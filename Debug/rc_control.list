
rc_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000818c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800832c  0800832c  0000932c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084f0  080084f0  0000a110  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080084f0  080084f0  000094f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084f8  080084f8  0000a110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084f8  080084f8  000094f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084fc  080084fc  000094fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  08008500  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043c0  20000110  08008610  0000a110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044d0  08008610  0000a4d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af53  00000000  00000000  0000a140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004094  00000000  00000000  00025093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c0  00000000  00000000  00029128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000132b  00000000  00000000  0002a9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1d6  00000000  00000000  0002bd13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d4a5  00000000  00000000  00046ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a627b  00000000  00000000  0006438e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a609  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ccc  00000000  00000000  0010a64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00111318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000110 	.word	0x20000110
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008314 	.word	0x08008314

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000114 	.word	0x20000114
 80001dc:	08008314 	.word	0x08008314

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	@ (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	@ 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	2000012c 	.word	0x2000012c
 80005ec:	200001cc 	.word	0x200001cc

080005f0 <render_menu>:
gpsSettingsValue gpsSettings;
uint8_t cursor = 0;
uint8_t buzzer_state = 0; // OFF

void render_menu(I2C_HandleTypeDef *hi2c)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    lcd_clear(hi2c);
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 fade 	bl	8000bba <lcd_clear>

    for (int i = 0; i < currentMenu->item_count; i++)
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	e049      	b.n	8000698 <render_menu+0xa8>
    {
        uint8_t line;
        if (currentMenu == &mainMenu)
 8000604:	4b36      	ldr	r3, [pc, #216]	@ (80006e0 <render_menu+0xf0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a36      	ldr	r2, [pc, #216]	@ (80006e4 <render_menu+0xf4>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d10b      	bne.n	8000626 <render_menu+0x36>
        {
            if (i == 0)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d102      	bne.n	800061a <render_menu+0x2a>
            {
                line = LINE3;
 8000614:	2394      	movs	r3, #148	@ 0x94
 8000616:	72fb      	strb	r3, [r7, #11]
 8000618:	e01c      	b.n	8000654 <render_menu+0x64>
            }
            else if (i == 1)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d119      	bne.n	8000654 <render_menu+0x64>
            {
                line = LINE4;
 8000620:	23d4      	movs	r3, #212	@ 0xd4
 8000622:	72fb      	strb	r3, [r7, #11]
 8000624:	e016      	b.n	8000654 <render_menu+0x64>
            }
        }
        else
        {
            if (i == 0)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d102      	bne.n	8000632 <render_menu+0x42>
            {
                line = LINE1;
 800062c:	2380      	movs	r3, #128	@ 0x80
 800062e:	72fb      	strb	r3, [r7, #11]
 8000630:	e010      	b.n	8000654 <render_menu+0x64>
            }
            else if (i == 1)
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d102      	bne.n	800063e <render_menu+0x4e>
            {
                line = LINE2;
 8000638:	23c0      	movs	r3, #192	@ 0xc0
 800063a:	72fb      	strb	r3, [r7, #11]
 800063c:	e00a      	b.n	8000654 <render_menu+0x64>
            }
            else if (i == 2)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b02      	cmp	r3, #2
 8000642:	d102      	bne.n	800064a <render_menu+0x5a>
            {
                line = LINE3;
 8000644:	2394      	movs	r3, #148	@ 0x94
 8000646:	72fb      	strb	r3, [r7, #11]
 8000648:	e004      	b.n	8000654 <render_menu+0x64>
            }
            else if (i == 3)
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	2b03      	cmp	r3, #3
 800064e:	d101      	bne.n	8000654 <render_menu+0x64>
            {
                line = LINE4;
 8000650:	23d4      	movs	r3, #212	@ 0xd4
 8000652:	72fb      	strb	r3, [r7, #11]
            }
        }

        if (i == cursor)
 8000654:	4b24      	ldr	r3, [pc, #144]	@ (80006e8 <render_menu+0xf8>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	4293      	cmp	r3, r2
 800065e:	d106      	bne.n	800066e <render_menu+0x7e>
        {
            lcd_send_string(hi2c, line, POS0, ">");
 8000660:	7af9      	ldrb	r1, [r7, #11]
 8000662:	4b22      	ldr	r3, [pc, #136]	@ (80006ec <render_menu+0xfc>)
 8000664:	2200      	movs	r2, #0
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f000 fa77 	bl	8000b5a <lcd_send_string>
 800066c:	e005      	b.n	800067a <render_menu+0x8a>
        }
        else
        {
            lcd_send_string(hi2c, line, POS0, " ");
 800066e:	7af9      	ldrb	r1, [r7, #11]
 8000670:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <render_menu+0x100>)
 8000672:	2200      	movs	r2, #0
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f000 fa70 	bl	8000b5a <lcd_send_string>
        }
        lcd_send_string(hi2c, line, POS2, (char *)currentMenu->items[i]);
 800067a:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <render_menu+0xf0>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	685a      	ldr	r2, [r3, #4]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	7af9      	ldrb	r1, [r7, #11]
 800068a:	2202      	movs	r2, #2
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f000 fa64 	bl	8000b5a <lcd_send_string>
    for (int i = 0; i < currentMenu->item_count; i++)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	3301      	adds	r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <render_menu+0xf0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	7a1b      	ldrb	r3, [r3, #8]
 800069e:	461a      	mov	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4293      	cmp	r3, r2
 80006a4:	dbae      	blt.n	8000604 <render_menu+0x14>
    }
    if (currentMenu == &mainMenu)
 80006a6:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <render_menu+0xf0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a0e      	ldr	r2, [pc, #56]	@ (80006e4 <render_menu+0xf4>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d113      	bne.n	80006d8 <render_menu+0xe8>
    {
        lcd_send_string(hi2c, LINE1, POS0, (char *)currentMenu->title);
 80006b0:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <render_menu+0xf0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2200      	movs	r2, #0
 80006b8:	2180      	movs	r1, #128	@ 0x80
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f000 fa4d 	bl	8000b5a <lcd_send_string>
        lcd_send_string(hi2c, LINE1, POS12, "TX:*****");
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <render_menu+0x104>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	2180      	movs	r1, #128	@ 0x80
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 fa47 	bl	8000b5a <lcd_send_string>
        lcd_send_string(hi2c, LINE2, POS12, "RX:*****");
 80006cc:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <render_menu+0x108>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	21c0      	movs	r1, #192	@ 0xc0
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f000 fa41 	bl	8000b5a <lcd_send_string>
    }
}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200003cc 	.word	0x200003cc
 80006e4:	2000001c 	.word	0x2000001c
 80006e8:	200003d0 	.word	0x200003d0
 80006ec:	080083a0 	.word	0x080083a0
 80006f0:	080083a4 	.word	0x080083a4
 80006f4:	080083a8 	.word	0x080083a8
 80006f8:	080083b4 	.word	0x080083b4

080006fc <menu_init>:

void menu_init(I2C_HandleTypeDef *hi2c)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
    currentMenu = &mainMenu;
 8000704:	4b04      	ldr	r3, [pc, #16]	@ (8000718 <menu_init+0x1c>)
 8000706:	4a05      	ldr	r2, [pc, #20]	@ (800071c <menu_init+0x20>)
 8000708:	601a      	str	r2, [r3, #0]
    render_menu(hi2c);
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ff70 	bl	80005f0 <render_menu>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200003cc 	.word	0x200003cc
 800071c:	2000001c 	.word	0x2000001c

08000720 <on_up>:

void on_up(I2C_HandleTypeDef *hi2c)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
    if (cursor > 0)
 8000728:	4b08      	ldr	r3, [pc, #32]	@ (800074c <on_up+0x2c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d005      	beq.n	800073c <on_up+0x1c>
        cursor--;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <on_up+0x2c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	3b01      	subs	r3, #1
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <on_up+0x2c>)
 800073a:	701a      	strb	r2, [r3, #0]
    render_menu(hi2c);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff ff57 	bl	80005f0 <render_menu>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200003d0 	.word	0x200003d0

08000750 <on_down>:

void on_down(I2C_HandleTypeDef *hi2c)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    if (cursor < currentMenu->item_count - 1)
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <on_down+0x34>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <on_down+0x38>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	7a1b      	ldrb	r3, [r3, #8]
 8000764:	3b01      	subs	r3, #1
 8000766:	429a      	cmp	r2, r3
 8000768:	da05      	bge.n	8000776 <on_down+0x26>
        cursor++;
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <on_down+0x34>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b04      	ldr	r3, [pc, #16]	@ (8000784 <on_down+0x34>)
 8000774:	701a      	strb	r2, [r3, #0]
    render_menu(hi2c);
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff ff3a 	bl	80005f0 <render_menu>
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200003d0 	.word	0x200003d0
 8000788:	200003cc 	.word	0x200003cc

0800078c <on_select>:

void on_select(I2C_HandleTypeDef *hi2c)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
    currentMenu->select_callback(hi2c, cursor);
 8000794:	4b05      	ldr	r3, [pc, #20]	@ (80007ac <on_select+0x20>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	4a05      	ldr	r2, [pc, #20]	@ (80007b0 <on_select+0x24>)
 800079c:	7812      	ldrb	r2, [r2, #0]
 800079e:	4611      	mov	r1, r2
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	4798      	blx	r3
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200003cc 	.word	0x200003cc
 80007b0:	200003d0 	.word	0x200003d0

080007b4 <on_back>:

void on_back(I2C_HandleTypeDef *hi2c)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
    if (currentMenu->back_link != NULL)
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <on_back+0x30>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	691b      	ldr	r3, [r3, #16]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00a      	beq.n	80007dc <on_back+0x28>
    {
        currentMenu = currentMenu->back_link;
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <on_back+0x30>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	4a05      	ldr	r2, [pc, #20]	@ (80007e4 <on_back+0x30>)
 80007ce:	6013      	str	r3, [r2, #0]
        cursor = 0;
 80007d0:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <on_back+0x34>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
        render_menu(hi2c);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff ff0a 	bl	80005f0 <render_menu>
    }
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200003cc 	.word	0x200003cc
 80007e8:	200003d0 	.word	0x200003d0

080007ec <mainMenuCallback>:

void mainMenuCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
    if (index == 0)
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d106      	bne.n	800080c <mainMenuCallback+0x20>
    {
        currentMenu = &menuMenu;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <mainMenuCallback+0x40>)
 8000800:	4a0b      	ldr	r2, [pc, #44]	@ (8000830 <mainMenuCallback+0x44>)
 8000802:	601a      	str	r2, [r3, #0]
        cursor = 0;
 8000804:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <mainMenuCallback+0x48>)
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]
 800080a:	e008      	b.n	800081e <mainMenuCallback+0x32>
    }
    else if (index == 1)
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d105      	bne.n	800081e <mainMenuCallback+0x32>
    {
        currentMenu = &settingsMenu;
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <mainMenuCallback+0x40>)
 8000814:	4a08      	ldr	r2, [pc, #32]	@ (8000838 <mainMenuCallback+0x4c>)
 8000816:	601a      	str	r2, [r3, #0]
        cursor = 0;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <mainMenuCallback+0x48>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
    }
    render_menu(hi2c);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff fee6 	bl	80005f0 <render_menu>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200003cc 	.word	0x200003cc
 8000830:	20000030 	.word	0x20000030
 8000834:	200003d0 	.word	0x200003d0
 8000838:	20000044 	.word	0x20000044

0800083c <menuCallback>:

void menuCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	70fb      	strb	r3, [r7, #3]
    if (index == 0)
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d10a      	bne.n	8000864 <menuCallback+0x28>
    {
        currentMenu = &flightStatusMenu;
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <menuCallback+0x4c>)
 8000850:	4a0e      	ldr	r2, [pc, #56]	@ (800088c <menuCallback+0x50>)
 8000852:	601a      	str	r2, [r3, #0]
        currentMenu->select_callback(hi2c, index);
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <menuCallback+0x4c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	78fa      	ldrb	r2, [r7, #3]
 800085c:	4611      	mov	r1, r2
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	4798      	blx	r3
    else if (index == 1)
    {
        currentMenu = &settingsMenu;
        currentMenu->select_callback(hi2c, index);
    }
}
 8000862:	e00c      	b.n	800087e <menuCallback+0x42>
    else if (index == 1)
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d109      	bne.n	800087e <menuCallback+0x42>
        currentMenu = &settingsMenu;
 800086a:	4b07      	ldr	r3, [pc, #28]	@ (8000888 <menuCallback+0x4c>)
 800086c:	4a08      	ldr	r2, [pc, #32]	@ (8000890 <menuCallback+0x54>)
 800086e:	601a      	str	r2, [r3, #0]
        currentMenu->select_callback(hi2c, index);
 8000870:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <menuCallback+0x4c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	68db      	ldr	r3, [r3, #12]
 8000876:	78fa      	ldrb	r2, [r7, #3]
 8000878:	4611      	mov	r1, r2
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	4798      	blx	r3
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200003cc 	.word	0x200003cc
 800088c:	2000006c 	.word	0x2000006c
 8000890:	20000044 	.word	0x20000044

08000894 <settingsCallback>:

void settingsCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]
    if (index == 0)
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d11d      	bne.n	80008e2 <settingsCallback+0x4e>
    {
        currentMenu = &buzzerMenu;
 80008a6:	4b17      	ldr	r3, [pc, #92]	@ (8000904 <settingsCallback+0x70>)
 80008a8:	4a17      	ldr	r2, [pc, #92]	@ (8000908 <settingsCallback+0x74>)
 80008aa:	601a      	str	r2, [r3, #0]
        cursor = 0;
 80008ac:	4b17      	ldr	r3, [pc, #92]	@ (800090c <settingsCallback+0x78>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
        if (buzzer_state == 0)
 80008b2:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <settingsCallback+0x7c>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d109      	bne.n	80008ce <settingsCallback+0x3a>
        {
            lcd_clear(hi2c);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f000 f97d 	bl	8000bba <lcd_clear>
            lcd_send_string(hi2c, LINE1, POS0, "OFF");
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <settingsCallback+0x80>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	2180      	movs	r1, #128	@ 0x80
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f000 f947 	bl	8000b5a <lcd_send_string>
    }
    else if (index==2)
    {

    }
}
 80008cc:	e015      	b.n	80008fa <settingsCallback+0x66>
            lcd_clear(hi2c);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f000 f973 	bl	8000bba <lcd_clear>
            lcd_send_string(hi2c, LINE1, POS0, "ON");
 80008d4:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <settingsCallback+0x84>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	2180      	movs	r1, #128	@ 0x80
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f93d 	bl	8000b5a <lcd_send_string>
}
 80008e0:	e00b      	b.n	80008fa <settingsCallback+0x66>
    else if (index == 1)
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d108      	bne.n	80008fa <settingsCallback+0x66>
        currentMenu = &gpsSettingsMenu;
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <settingsCallback+0x70>)
 80008ea:	4a0c      	ldr	r2, [pc, #48]	@ (800091c <settingsCallback+0x88>)
 80008ec:	601a      	str	r2, [r3, #0]
        cursor = 0;
 80008ee:	4b07      	ldr	r3, [pc, #28]	@ (800090c <settingsCallback+0x78>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
        render_menu(hi2c);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fe7b 	bl	80005f0 <render_menu>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200003cc 	.word	0x200003cc
 8000908:	20000058 	.word	0x20000058
 800090c:	200003d0 	.word	0x200003d0
 8000910:	200003d1 	.word	0x200003d1
 8000914:	080083c0 	.word	0x080083c0
 8000918:	080083c4 	.word	0x080083c4
 800091c:	20000080 	.word	0x20000080

08000920 <buzzerCallback>:


void buzzerCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	70fb      	strb	r3, [r7, #3]
    buzzer_state = buzzer_state ^ 1;
 800092c:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <buzzerCallback+0x50>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	f083 0301 	eor.w	r3, r3, #1
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <buzzerCallback+0x50>)
 8000938:	701a      	strb	r2, [r3, #0]
    if (buzzer_state == 0)
 800093a:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <buzzerCallback+0x50>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d109      	bne.n	8000956 <buzzerCallback+0x36>
    {
        lcd_clear(hi2c);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 f939 	bl	8000bba <lcd_clear>
        lcd_send_string(hi2c, LINE1, POS0, "OFF");
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <buzzerCallback+0x54>)
 800094a:	2200      	movs	r2, #0
 800094c:	2180      	movs	r1, #128	@ 0x80
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f000 f903 	bl	8000b5a <lcd_send_string>
    else
    {
        lcd_clear(hi2c);
        lcd_send_string(hi2c, LINE1, POS0, "ON");
    }
}
 8000954:	e008      	b.n	8000968 <buzzerCallback+0x48>
        lcd_clear(hi2c);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f000 f92f 	bl	8000bba <lcd_clear>
        lcd_send_string(hi2c, LINE1, POS0, "ON");
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <buzzerCallback+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	2180      	movs	r1, #128	@ 0x80
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 f8f9 	bl	8000b5a <lcd_send_string>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200003d1 	.word	0x200003d1
 8000974:	080083c0 	.word	0x080083c0
 8000978:	080083c4 	.word	0x080083c4

0800097c <flightStatusCallback>:

void flightStatusCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]
    lcd_clear(hi2c);
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f000 f916 	bl	8000bba <lcd_clear>
    lcd_send_string(hi2c, LINE1, POS0, "Roll:");
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <flightStatusCallback+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	2180      	movs	r1, #128	@ 0x80
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f000 f8e0 	bl	8000b5a <lcd_send_string>
    lcd_send_string(hi2c, LINE2, POS0, "Pitch:");
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <flightStatusCallback+0x50>)
 800099c:	2200      	movs	r2, #0
 800099e:	21c0      	movs	r1, #192	@ 0xc0
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 f8da 	bl	8000b5a <lcd_send_string>
    lcd_send_string(hi2c, LINE3, POS0, "Yaw:");
 80009a6:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <flightStatusCallback+0x54>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	2194      	movs	r1, #148	@ 0x94
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f000 f8d4 	bl	8000b5a <lcd_send_string>
    lcd_send_string(hi2c, LINE3, POS0, "Altitude:");
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <flightStatusCallback+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	2194      	movs	r1, #148	@ 0x94
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f000 f8ce 	bl	8000b5a <lcd_send_string>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	080083c8 	.word	0x080083c8
 80009cc:	080083d0 	.word	0x080083d0
 80009d0:	080083d8 	.word	0x080083d8
 80009d4:	080083e0 	.word	0x080083e0

080009d8 <gpsSettingsCallback>:
    lcd_send_string(hi2c, LINE1, POS0, "Longtitude:");
    lcd_send_string(hi2c, LINE2, POS0, "Latitude:");
}

void gpsSettingsCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	70fb      	strb	r3, [r7, #3]
    lcd_clear(hi2c);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f000 f8e8 	bl	8000bba <lcd_clear>
    lcd_send_string(hi2c, LINE1, POS0, "Longtitude:");
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <gpsSettingsCallback+0x34>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	2180      	movs	r1, #128	@ 0x80
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f000 f8b2 	bl	8000b5a <lcd_send_string>
    lcd_send_string(hi2c, LINE2, POS0, "Latitude:");
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <gpsSettingsCallback+0x38>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	21c0      	movs	r1, #192	@ 0xc0
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 f8ac 	bl	8000b5a <lcd_send_string>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	0800837c 	.word	0x0800837c
 8000a10:	080083ec 	.word	0x080083ec

08000a14 <lcd_init>:

/*
 * @brief This is init function, only use it in super loop
 */
void lcd_init(I2C_HandleTypeDef *hi2c)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	// 4 bit initialisation
	HAL_Delay(50); // wait for >40ms
 8000a1c:	2032      	movs	r0, #50	@ 0x32
 8000a1e:	f001 faaf 	bl	8001f80 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x30);
 8000a22:	2130      	movs	r1, #48	@ 0x30
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f000 f83c 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(5); // wait for >4.1ms
 8000a2a:	2005      	movs	r0, #5
 8000a2c:	f001 faa8 	bl	8001f80 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x30);
 8000a30:	2130      	movs	r1, #48	@ 0x30
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f000 f835 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(1); // wait for >100us
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f001 faa1 	bl	8001f80 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x30);
 8000a3e:	2130      	movs	r1, #48	@ 0x30
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f000 f82e 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(10);
 8000a46:	200a      	movs	r0, #10
 8000a48:	f001 fa9a 	bl	8001f80 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x20); // 4bit mode
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f000 f827 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(10);
 8000a54:	200a      	movs	r0, #10
 8000a56:	f001 fa93 	bl	8001f80 <HAL_Delay>

	// dislay initialisation
	lcd_send_cmd(hi2c, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000a5a:	2128      	movs	r1, #40	@ 0x28
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f000 f820 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(1);
 8000a62:	2001      	movs	r0, #1
 8000a64:	f001 fa8c 	bl	8001f80 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x08); // Display on/off control --> D=0,C=0, B=0  ---> display off
 8000a68:	2108      	movs	r1, #8
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f000 f819 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(1);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f001 fa85 	bl	8001f80 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x01); // clear display
 8000a76:	2101      	movs	r1, #1
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f000 f812 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(2);
 8000a7e:	2002      	movs	r0, #2
 8000a80:	f001 fa7e 	bl	8001f80 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x06); // Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000a84:	2106      	movs	r1, #6
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f000 f80b 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(1);
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f001 fa77 	bl	8001f80 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x0C); // Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000a92:	210c      	movs	r1, #12
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f000 f804 	bl	8000aa2 <lcd_send_cmd>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <lcd_send_cmd>:

void lcd_send_cmd(I2C_HandleTypeDef *hi2c, char cmd)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af02      	add	r7, sp, #8
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000aae:	78fb      	ldrb	r3, [r7, #3]
 8000ab0:	f023 030f 	bic.w	r3, r3, #15
 8000ab4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8000ab6:	78fb      	ldrb	r3, [r7, #3]
 8000ab8:	011b      	lsls	r3, r3, #4
 8000aba:	73bb      	strb	r3, [r7, #14]
	//rs = 0 : send cmd
	data_t[0] = data_u | 0x0C; // en=1, rs=0 -> send 4 bit high, enable
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	f043 030c 	orr.w	r3, r3, #12
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08; // en=0, rs=0 -> unenable
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C; // en=1, rs=0 -> send 4 bit low, enable
 8000ad0:	7bbb      	ldrb	r3, [r7, #14]
 8000ad2:	f043 030c 	orr.w	r3, r3, #12
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08; // en=0, rs=0 ->
 8000ada:	7bbb      	ldrb	r3, [r7, #14]
 8000adc:	f043 0308 	orr.w	r3, r3, #8
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000ae4:	f107 0208 	add.w	r2, r7, #8
 8000ae8:	2364      	movs	r3, #100	@ 0x64
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2304      	movs	r3, #4
 8000aee:	214e      	movs	r1, #78	@ 0x4e
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f002 feed 	bl	80038d0 <HAL_I2C_Master_Transmit>
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <lcd_send_data>:

void lcd_send_data(I2C_HandleTypeDef *hi2c, unsigned char data)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af02      	add	r7, sp, #8
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	460b      	mov	r3, r1
 8000b08:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8000b0a:	78fb      	ldrb	r3, [r7, #3]
 8000b0c:	f023 030f 	bic.w	r3, r3, #15
 8000b10:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8000b12:	78fb      	ldrb	r3, [r7, #3]
 8000b14:	011b      	lsls	r3, r3, #4
 8000b16:	73bb      	strb	r3, [r7, #14]
	//rs = 1 : send data
	data_t[0] = data_u | 0x0D; // en=1, rs=1
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	f043 030d 	orr.w	r3, r3, #13
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09; // en=0, rs=1
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	f043 0309 	orr.w	r3, r3, #9
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D; // en=1, rs=1
 8000b2c:	7bbb      	ldrb	r3, [r7, #14]
 8000b2e:	f043 030d 	orr.w	r3, r3, #13
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09; // en=0, rs=1
 8000b36:	7bbb      	ldrb	r3, [r7, #14]
 8000b38:	f043 0309 	orr.w	r3, r3, #9
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000b40:	f107 0208 	add.w	r2, r7, #8
 8000b44:	2364      	movs	r3, #100	@ 0x64
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2304      	movs	r3, #4
 8000b4a:	214e      	movs	r1, #78	@ 0x4e
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f002 febf 	bl	80038d0 <HAL_I2C_Master_Transmit>
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <lcd_send_string>:

void lcd_send_string(I2C_HandleTypeDef *hi2c, char line, char pos, char *str)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	72fb      	strb	r3, [r7, #11]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	72bb      	strb	r3, [r7, #10]
	uint16_t length = (uint16_t)strlen(str);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff fb37 	bl	80001e0 <strlen>
 8000b72:	4603      	mov	r3, r0
 8000b74:	827b      	strh	r3, [r7, #18]
	lcd_send_cmd(hi2c, line + pos);
 8000b76:	7afa      	ldrb	r2, [r7, #11]
 8000b78:	7abb      	ldrb	r3, [r7, #10]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4619      	mov	r1, r3
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f7ff ff8e 	bl	8000aa2 <lcd_send_cmd>

	#if USING_RTOS == 0
	HAL_Delay(1);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f001 f9fa 	bl	8001f80 <HAL_Delay>
	#else
	vTaskDelay(pdMS_TO_TICKS(1));
	#endif

	for (int i = 0; i < length; i++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	e00a      	b.n	8000ba8 <lcd_send_string+0x4e>
	{
		lcd_send_data(hi2c, *(str + i));
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	4413      	add	r3, r2
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f7ff ffae 	bl	8000afe <lcd_send_data>
	for (int i = 0; i < length; i++)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	8a7b      	ldrh	r3, [r7, #18]
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dbf0      	blt.n	8000b92 <lcd_send_string+0x38>
	}
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <lcd_clear>:
		lcd_send_data(hi2c, *(str + i));
	}
}

void lcd_clear(I2C_HandleTypeDef *hi2c)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
	lcd_send_cmd(hi2c,0x01);
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ff6c 	bl	8000aa2 <lcd_send_cmd>
	for (int i = 0; i < 80; i++)
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	e006      	b.n	8000bde <lcd_clear+0x24>
	{
		lcd_send_data(hi2c,' ');
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff ff93 	bl	8000afe <lcd_send_data>
	for (int i = 0; i < 80; i++)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	2b4f      	cmp	r3, #79	@ 0x4f
 8000be2:	ddf5      	ble.n	8000bd0 <lcd_clear+0x16>
	}
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  switch (GPIO_Pin)
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c04:	d02a      	beq.n	8000c5c <HAL_GPIO_EXTI_Callback+0x6c>
 8000c06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c0a:	dc30      	bgt.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
 8000c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c10:	d009      	beq.n	8000c26 <HAL_GPIO_EXTI_Callback+0x36>
 8000c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c16:	dc2a      	bgt.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
 8000c18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c1c:	d015      	beq.n	8000c4a <HAL_GPIO_EXTI_Callback+0x5a>
 8000c1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c22:	d009      	beq.n	8000c38 <HAL_GPIO_EXTI_Callback+0x48>
 8000c24:	e023      	b.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
  {
  case UP_Pin:
	  //UP_Pin_flag=1;
	  xSemaphoreGiveFromISR(xUpSem, &xHigherPriorityTaskWoken);
 8000c26:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <HAL_GPIO_EXTI_Callback+0x9c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f107 020c 	add.w	r2, r7, #12
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f005 f869 	bl	8005d08 <xQueueGiveFromISR>
    break;
 8000c36:	e01a      	b.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
  case DOWN_Pin:
	  //DOWN_Pin_flag=1;
	  xSemaphoreGiveFromISR(xDownSem, &xHigherPriorityTaskWoken);
 8000c38:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f107 020c 	add.w	r2, r7, #12
 8000c40:	4611      	mov	r1, r2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f005 f860 	bl	8005d08 <xQueueGiveFromISR>
    break;
 8000c48:	e011      	b.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
  case SELECT_Pin:
	  //SELECT_Pin_flag=1;
	  xSemaphoreGiveFromISR(xSelectSem, &xHigherPriorityTaskWoken);
 8000c4a:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f107 020c 	add.w	r2, r7, #12
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f005 f857 	bl	8005d08 <xQueueGiveFromISR>
    break;
 8000c5a:	e008      	b.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
  case BACK_Pin:
	  //BACK_Pin_flag=1;
	  xSemaphoreGiveFromISR(xBackSem, &xHigherPriorityTaskWoken);
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f107 020c 	add.w	r2, r7, #12
 8000c64:	4611      	mov	r1, r2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f005 f84e 	bl	8005d08 <xQueueGiveFromISR>
    break;
 8000c6c:	bf00      	nop
  }
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d007      	beq.n	8000c84 <HAL_GPIO_EXTI_Callback+0x94>
 8000c74:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <HAL_GPIO_EXTI_Callback+0xac>)
 8000c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	f3bf 8f4f 	dsb	sy
 8000c80:	f3bf 8f6f 	isb	sy
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000590 	.word	0x20000590
 8000c90:	20000594 	.word	0x20000594
 8000c94:	20000598 	.word	0x20000598
 8000c98:	2000059c 	.word	0x2000059c
 8000c9c:	e000ed04 	.word	0xe000ed04

08000ca0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce4 <HAL_ADC_ConvCpltCallback+0x44>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d114      	bne.n	8000cdc <HAL_ADC_ConvCpltCallback+0x3c>
        // Notify a FreeRTOS task
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
        //vTaskNotifyGiveFromISR(ADC_Handle, &xHigherPriorityTaskWoken);
        xSemaphoreGiveFromISR(xADCSem, &xHigherPriorityTaskWoken);
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <HAL_ADC_ConvCpltCallback+0x48>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f107 020c 	add.w	r2, r7, #12
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f005 f821 	bl	8005d08 <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d007      	beq.n	8000cdc <HAL_ADC_ConvCpltCallback+0x3c>
 8000ccc:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <HAL_ADC_ConvCpltCallback+0x4c>)
 8000cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	f3bf 8f4f 	dsb	sy
 8000cd8:	f3bf 8f6f 	isb	sy
    }
}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40012000 	.word	0x40012000
 8000ce8:	200005a0 	.word	0x200005a0
 8000cec:	e000ed04 	.word	0xe000ed04

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b5b0      	push	{r4, r5, r7, lr}
 8000cf2:	b08a      	sub	sp, #40	@ 0x28
 8000cf4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf6:	f001 f901 	bl	8001efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfa:	f000 f8b1 	bl	8000e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfe:	f000 fa5b 	bl	80011b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d02:	f000 fa39 	bl	8001178 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d06:	f000 f99d 	bl	8001044 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d0a:	f000 f9c9 	bl	80010a0 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000d0e:	f000 f90f 	bl	8000f30 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000d12:	f000 f9fb 	bl	800110c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  lcd_init(&hi2c1);
 8000d16:	483e      	ldr	r0, [pc, #248]	@ (8000e10 <main+0x120>)
 8000d18:	f7ff fe7c 	bl	8000a14 <lcd_init>
  menu_init(&hi2c1);
 8000d1c:	483c      	ldr	r0, [pc, #240]	@ (8000e10 <main+0x120>)
 8000d1e:	f7ff fced 	bl	80006fc <menu_init>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  xUpSem     = xSemaphoreCreateBinary();
 8000d22:	2203      	movs	r2, #3
 8000d24:	2100      	movs	r1, #0
 8000d26:	2001      	movs	r0, #1
 8000d28:	f004 ff94 	bl	8005c54 <xQueueGenericCreate>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4a39      	ldr	r2, [pc, #228]	@ (8000e14 <main+0x124>)
 8000d30:	6013      	str	r3, [r2, #0]
  xDownSem   = xSemaphoreCreateBinary();
 8000d32:	2203      	movs	r2, #3
 8000d34:	2100      	movs	r1, #0
 8000d36:	2001      	movs	r0, #1
 8000d38:	f004 ff8c 	bl	8005c54 <xQueueGenericCreate>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4a36      	ldr	r2, [pc, #216]	@ (8000e18 <main+0x128>)
 8000d40:	6013      	str	r3, [r2, #0]
  xSelectSem = xSemaphoreCreateBinary();
 8000d42:	2203      	movs	r2, #3
 8000d44:	2100      	movs	r1, #0
 8000d46:	2001      	movs	r0, #1
 8000d48:	f004 ff84 	bl	8005c54 <xQueueGenericCreate>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4a33      	ldr	r2, [pc, #204]	@ (8000e1c <main+0x12c>)
 8000d50:	6013      	str	r3, [r2, #0]
  xBackSem   = xSemaphoreCreateBinary();
 8000d52:	2203      	movs	r2, #3
 8000d54:	2100      	movs	r1, #0
 8000d56:	2001      	movs	r0, #1
 8000d58:	f004 ff7c 	bl	8005c54 <xQueueGenericCreate>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	4a30      	ldr	r2, [pc, #192]	@ (8000e20 <main+0x130>)
 8000d60:	6013      	str	r3, [r2, #0]
  xADCSem 	 = xSemaphoreCreateBinary();
 8000d62:	2203      	movs	r2, #3
 8000d64:	2100      	movs	r1, #0
 8000d66:	2001      	movs	r0, #1
 8000d68:	f004 ff74 	bl	8005c54 <xQueueGenericCreate>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	4a2d      	ldr	r2, [pc, #180]	@ (8000e24 <main+0x134>)
 8000d70:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  commandQueue = xQueueCreate(1, sizeof(char[32]));
 8000d72:	2200      	movs	r2, #0
 8000d74:	2120      	movs	r1, #32
 8000d76:	2001      	movs	r0, #1
 8000d78:	f004 ff6c 	bl	8005c54 <xQueueGenericCreate>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4a2a      	ldr	r2, [pc, #168]	@ (8000e28 <main+0x138>)
 8000d80:	6013      	str	r3, [r2, #0]
  if (commandQueue == NULL) {
 8000d82:	4b29      	ldr	r3, [pc, #164]	@ (8000e28 <main+0x138>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <main+0x9e>
      Error_Handler();
 8000d8a:	f000 fb7f 	bl	800148c <Error_Handler>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000d8e:	4b27      	ldr	r3, [pc, #156]	@ (8000e2c <main+0x13c>)
 8000d90:	1d3c      	adds	r4, r7, #4
 8000d92:	461d      	mov	r5, r3
 8000d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f004 fdd6 	bl	8005956 <osThreadCreate>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4a20      	ldr	r2, [pc, #128]	@ (8000e30 <main+0x140>)
 8000dae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(LCD_Task, "LCD", 256, NULL, 0, &LCD_Handle);
 8000db0:	4b20      	ldr	r3, [pc, #128]	@ (8000e34 <main+0x144>)
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	2300      	movs	r3, #0
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2300      	movs	r3, #0
 8000dba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dbe:	491e      	ldr	r1, [pc, #120]	@ (8000e38 <main+0x148>)
 8000dc0:	481e      	ldr	r0, [pc, #120]	@ (8000e3c <main+0x14c>)
 8000dc2:	f005 fa21 	bl	8006208 <xTaskCreate>
  xTaskCreate(NRF_Task, "NRF", 256, NULL, 0, &NRF_Handle);
 8000dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e40 <main+0x150>)
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dd4:	491b      	ldr	r1, [pc, #108]	@ (8000e44 <main+0x154>)
 8000dd6:	481c      	ldr	r0, [pc, #112]	@ (8000e48 <main+0x158>)
 8000dd8:	f005 fa16 	bl	8006208 <xTaskCreate>
  xTaskCreate(Button_Task, "BTN", 256, NULL, 1, NULL);
 8000ddc:	2300      	movs	r3, #0
 8000dde:	9301      	str	r3, [sp, #4]
 8000de0:	2301      	movs	r3, #1
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2300      	movs	r3, #0
 8000de6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dea:	4918      	ldr	r1, [pc, #96]	@ (8000e4c <main+0x15c>)
 8000dec:	4818      	ldr	r0, [pc, #96]	@ (8000e50 <main+0x160>)
 8000dee:	f005 fa0b 	bl	8006208 <xTaskCreate>
  xTaskCreate(ADC_Task, "ADC", 256, NULL, 1, &ADC_Handle);
 8000df2:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <main+0x164>)
 8000df4:	9301      	str	r3, [sp, #4]
 8000df6:	2301      	movs	r3, #1
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e00:	4915      	ldr	r1, [pc, #84]	@ (8000e58 <main+0x168>)
 8000e02:	4816      	ldr	r0, [pc, #88]	@ (8000e5c <main+0x16c>)
 8000e04:	f005 fa00 	bl	8006208 <xTaskCreate>


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e08:	f004 fd9e 	bl	8005948 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <main+0x11c>
 8000e10:	20000484 	.word	0x20000484
 8000e14:	20000590 	.word	0x20000590
 8000e18:	20000594 	.word	0x20000594
 8000e1c:	20000598 	.word	0x20000598
 8000e20:	2000059c 	.word	0x2000059c
 8000e24:	200005a0 	.word	0x200005a0
 8000e28:	2000058c 	.word	0x2000058c
 8000e2c:	08008414 	.word	0x08008414
 8000e30:	20000588 	.word	0x20000588
 8000e34:	200005d8 	.word	0x200005d8
 8000e38:	080083f8 	.word	0x080083f8
 8000e3c:	08001351 	.word	0x08001351
 8000e40:	200005dc 	.word	0x200005dc
 8000e44:	080083fc 	.word	0x080083fc
 8000e48:	0800131d 	.word	0x0800131d
 8000e4c:	08008400 	.word	0x08008400
 8000e50:	08001361 	.word	0x08001361
 8000e54:	200005e0 	.word	0x200005e0
 8000e58:	08008404 	.word	0x08008404
 8000e5c:	080013ed 	.word	0x080013ed

08000e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b094      	sub	sp, #80	@ 0x50
 8000e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e66:	f107 0320 	add.w	r3, r7, #32
 8000e6a:	2230      	movs	r2, #48	@ 0x30
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f006 fd74 	bl	800795c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	4b27      	ldr	r3, [pc, #156]	@ (8000f28 <SystemClock_Config+0xc8>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8c:	4a26      	ldr	r2, [pc, #152]	@ (8000f28 <SystemClock_Config+0xc8>)
 8000e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e94:	4b24      	ldr	r3, [pc, #144]	@ (8000f28 <SystemClock_Config+0xc8>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	4b21      	ldr	r3, [pc, #132]	@ (8000f2c <SystemClock_Config+0xcc>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a20      	ldr	r2, [pc, #128]	@ (8000f2c <SystemClock_Config+0xcc>)
 8000eaa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f2c <SystemClock_Config+0xcc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ed0:	2319      	movs	r3, #25
 8000ed2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ed4:	23a8      	movs	r3, #168	@ 0xa8
 8000ed6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000edc:	2304      	movs	r3, #4
 8000ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee0:	f107 0320 	add.w	r3, r7, #32
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f003 f84d 	bl	8003f84 <HAL_RCC_OscConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ef0:	f000 facc 	bl	800148c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	2102      	movs	r1, #2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f003 faaf 	bl	8004474 <HAL_RCC_ClockConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f1c:	f000 fab6 	bl	800148c <Error_Handler>
  }
}
 8000f20:	bf00      	nop
 8000f22:	3750      	adds	r7, #80	@ 0x50
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40007000 	.word	0x40007000

08000f30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f36:	463b      	mov	r3, r7
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f42:	4b3d      	ldr	r3, [pc, #244]	@ (8001038 <MX_ADC1_Init+0x108>)
 8000f44:	4a3d      	ldr	r2, [pc, #244]	@ (800103c <MX_ADC1_Init+0x10c>)
 8000f46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f48:	4b3b      	ldr	r3, [pc, #236]	@ (8001038 <MX_ADC1_Init+0x108>)
 8000f4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f50:	4b39      	ldr	r3, [pc, #228]	@ (8001038 <MX_ADC1_Init+0x108>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f56:	4b38      	ldr	r3, [pc, #224]	@ (8001038 <MX_ADC1_Init+0x108>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f5c:	4b36      	ldr	r3, [pc, #216]	@ (8001038 <MX_ADC1_Init+0x108>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f62:	4b35      	ldr	r3, [pc, #212]	@ (8001038 <MX_ADC1_Init+0x108>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f6a:	4b33      	ldr	r3, [pc, #204]	@ (8001038 <MX_ADC1_Init+0x108>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f70:	4b31      	ldr	r3, [pc, #196]	@ (8001038 <MX_ADC1_Init+0x108>)
 8000f72:	4a33      	ldr	r2, [pc, #204]	@ (8001040 <MX_ADC1_Init+0x110>)
 8000f74:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f76:	4b30      	ldr	r3, [pc, #192]	@ (8001038 <MX_ADC1_Init+0x108>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000f7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001038 <MX_ADC1_Init+0x108>)
 8000f7e:	2205      	movs	r2, #5
 8000f80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f82:	4b2d      	ldr	r3, [pc, #180]	@ (8001038 <MX_ADC1_Init+0x108>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001038 <MX_ADC1_Init+0x108>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f90:	4829      	ldr	r0, [pc, #164]	@ (8001038 <MX_ADC1_Init+0x108>)
 8000f92:	f001 f819 	bl	8001fc8 <HAL_ADC_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f9c:	f000 fa76 	bl	800148c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fac:	463b      	mov	r3, r7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4821      	ldr	r0, [pc, #132]	@ (8001038 <MX_ADC1_Init+0x108>)
 8000fb2:	f001 fa6f 	bl	8002494 <HAL_ADC_ConfigChannel>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fbc:	f000 fa66 	bl	800148c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4619      	mov	r1, r3
 8000fcc:	481a      	ldr	r0, [pc, #104]	@ (8001038 <MX_ADC1_Init+0x108>)
 8000fce:	f001 fa61 	bl	8002494 <HAL_ADC_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fd8:	f000 fa58 	bl	800148c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4813      	ldr	r0, [pc, #76]	@ (8001038 <MX_ADC1_Init+0x108>)
 8000fea:	f001 fa53 	bl	8002494 <HAL_ADC_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000ff4:	f000 fa4a 	bl	800148c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001000:	463b      	mov	r3, r7
 8001002:	4619      	mov	r1, r3
 8001004:	480c      	ldr	r0, [pc, #48]	@ (8001038 <MX_ADC1_Init+0x108>)
 8001006:	f001 fa45 	bl	8002494 <HAL_ADC_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001010:	f000 fa3c 	bl	800148c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001014:	2304      	movs	r3, #4
 8001016:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001018:	2305      	movs	r3, #5
 800101a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101c:	463b      	mov	r3, r7
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	@ (8001038 <MX_ADC1_Init+0x108>)
 8001022:	f001 fa37 	bl	8002494 <HAL_ADC_ConfigChannel>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800102c:	f000 fa2e 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200003dc 	.word	0x200003dc
 800103c:	40012000 	.word	0x40012000
 8001040:	0f000001 	.word	0x0f000001

08001044 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001048:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <MX_I2C1_Init+0x50>)
 800104a:	4a13      	ldr	r2, [pc, #76]	@ (8001098 <MX_I2C1_Init+0x54>)
 800104c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800104e:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <MX_I2C1_Init+0x50>)
 8001050:	4a12      	ldr	r2, [pc, #72]	@ (800109c <MX_I2C1_Init+0x58>)
 8001052:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001054:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <MX_I2C1_Init+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800105a:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <MX_I2C1_Init+0x50>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <MX_I2C1_Init+0x50>)
 8001062:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001066:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001068:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <MX_I2C1_Init+0x50>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800106e:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <MX_I2C1_Init+0x50>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001074:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <MX_I2C1_Init+0x50>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800107a:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <MX_I2C1_Init+0x50>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001080:	4804      	ldr	r0, [pc, #16]	@ (8001094 <MX_I2C1_Init+0x50>)
 8001082:	f002 fae1 	bl	8003648 <HAL_I2C_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800108c:	f000 f9fe 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000484 	.word	0x20000484
 8001098:	40005400 	.word	0x40005400
 800109c:	000186a0 	.word	0x000186a0

080010a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010a4:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010a6:	4a18      	ldr	r2, [pc, #96]	@ (8001108 <MX_SPI1_Init+0x68>)
 80010a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010aa:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010be:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010d4:	2210      	movs	r2, #16
 80010d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010da:	2200      	movs	r2, #0
 80010dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010ec:	220a      	movs	r2, #10
 80010ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010f0:	4804      	ldr	r0, [pc, #16]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010f2:	f003 fbd1 	bl	8004898 <HAL_SPI_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010fc:	f000 f9c6 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200004d8 	.word	0x200004d8
 8001108:	40013000 	.word	0x40013000

0800110c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001110:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <MX_SPI3_Init+0x64>)
 8001112:	4a18      	ldr	r2, [pc, #96]	@ (8001174 <MX_SPI3_Init+0x68>)
 8001114:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001116:	4b16      	ldr	r3, [pc, #88]	@ (8001170 <MX_SPI3_Init+0x64>)
 8001118:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800111c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800111e:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <MX_SPI3_Init+0x64>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001124:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <MX_SPI3_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800112a:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <MX_SPI3_Init+0x64>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001130:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <MX_SPI3_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001136:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <MX_SPI3_Init+0x64>)
 8001138:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800113c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800113e:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <MX_SPI3_Init+0x64>)
 8001140:	2208      	movs	r2, #8
 8001142:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <MX_SPI3_Init+0x64>)
 8001146:	2200      	movs	r2, #0
 8001148:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800114a:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <MX_SPI3_Init+0x64>)
 800114c:	2200      	movs	r2, #0
 800114e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001150:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <MX_SPI3_Init+0x64>)
 8001152:	2200      	movs	r2, #0
 8001154:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <MX_SPI3_Init+0x64>)
 8001158:	220a      	movs	r2, #10
 800115a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	@ (8001170 <MX_SPI3_Init+0x64>)
 800115e:	f003 fb9b 	bl	8004898 <HAL_SPI_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001168:	f000 f990 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000530 	.word	0x20000530
 8001174:	40003c00 	.word	0x40003c00

08001178 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <MX_DMA_Init+0x3c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <MX_DMA_Init+0x3c>)
 8001188:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800118c:	6313      	str	r3, [r2, #48]	@ 0x30
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <MX_DMA_Init+0x3c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2105      	movs	r1, #5
 800119e:	2038      	movs	r0, #56	@ 0x38
 80011a0:	f001 fcea 	bl	8002b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011a4:	2038      	movs	r0, #56	@ 0x38
 80011a6:	f001 fd03 	bl	8002bb0 <HAL_NVIC_EnableIRQ>

}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	@ 0x28
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b4e      	ldr	r3, [pc, #312]	@ (800130c <MX_GPIO_Init+0x154>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a4d      	ldr	r2, [pc, #308]	@ (800130c <MX_GPIO_Init+0x154>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b4b      	ldr	r3, [pc, #300]	@ (800130c <MX_GPIO_Init+0x154>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b47      	ldr	r3, [pc, #284]	@ (800130c <MX_GPIO_Init+0x154>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a46      	ldr	r2, [pc, #280]	@ (800130c <MX_GPIO_Init+0x154>)
 80011f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b44      	ldr	r3, [pc, #272]	@ (800130c <MX_GPIO_Init+0x154>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	4b40      	ldr	r3, [pc, #256]	@ (800130c <MX_GPIO_Init+0x154>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a3f      	ldr	r2, [pc, #252]	@ (800130c <MX_GPIO_Init+0x154>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b3d      	ldr	r3, [pc, #244]	@ (800130c <MX_GPIO_Init+0x154>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b39      	ldr	r3, [pc, #228]	@ (800130c <MX_GPIO_Init+0x154>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a38      	ldr	r2, [pc, #224]	@ (800130c <MX_GPIO_Init+0x154>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b36      	ldr	r3, [pc, #216]	@ (800130c <MX_GPIO_Init+0x154>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001244:	4832      	ldr	r0, [pc, #200]	@ (8001310 <MX_GPIO_Init+0x158>)
 8001246:	f002 f9cd 	bl	80035e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|CE_Pin|CS2_Pin|CE2_Pin
 800124a:	2200      	movs	r2, #0
 800124c:	f241 5103 	movw	r1, #5379	@ 0x1503
 8001250:	4830      	ldr	r0, [pc, #192]	@ (8001314 <MX_GPIO_Init+0x15c>)
 8001252:	f002 f9c7 	bl	80035e4 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001256:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800125a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4828      	ldr	r0, [pc, #160]	@ (8001310 <MX_GPIO_Init+0x158>)
 8001270:	f002 f81c 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin CE_Pin CS2_Pin CE2_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = CS_Pin|CE_Pin|CS2_Pin|CE2_Pin
 8001274:	f241 5303 	movw	r3, #5379	@ 0x1503
 8001278:	617b      	str	r3, [r7, #20]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4821      	ldr	r0, [pc, #132]	@ (8001314 <MX_GPIO_Init+0x15c>)
 800128e:	f002 f80d 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : IRQ_Pin IRQ2_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin|IRQ2_Pin;
 8001292:	f242 0304 	movw	r3, #8196	@ 0x2004
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	481b      	ldr	r0, [pc, #108]	@ (8001314 <MX_GPIO_Init+0x15c>)
 80012a8:	f002 f800 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 BACK_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|BACK_Pin;
 80012ac:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	4814      	ldr	r0, [pc, #80]	@ (8001314 <MX_GPIO_Init+0x15c>)
 80012c4:	f001 fff2 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SELECT_Pin DOWN_Pin UP_Pin HOME_Pin */
  GPIO_InitStruct.Pin = SELECT_Pin|DOWN_Pin|UP_Pin|HOME_Pin;
 80012c8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80012cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	480e      	ldr	r0, [pc, #56]	@ (8001318 <MX_GPIO_Init+0x160>)
 80012e0:	f001 ffe4 	bl	80032ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2105      	movs	r1, #5
 80012e8:	2017      	movs	r0, #23
 80012ea:	f001 fc45 	bl	8002b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012ee:	2017      	movs	r0, #23
 80012f0:	f001 fc5e 	bl	8002bb0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2105      	movs	r1, #5
 80012f8:	2028      	movs	r0, #40	@ 0x28
 80012fa:	f001 fc3d 	bl	8002b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012fe:	2028      	movs	r0, #40	@ 0x28
 8001300:	f001 fc56 	bl	8002bb0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	@ 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	40020800 	.word	0x40020800
 8001314:	40020400 	.word	0x40020400
 8001318:	40020000 	.word	0x40020000

0800131c <NRF_Task>:

/* USER CODE BEGIN 4 */
void NRF_Task(void *argument)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	char cmdBuf[32];
	while(1)
	{
		sprintf((char*)spi_tx,"%s",cmdBuf);
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	461a      	mov	r2, r3
 800132a:	4906      	ldr	r1, [pc, #24]	@ (8001344 <NRF_Task+0x28>)
 800132c:	4806      	ldr	r0, [pc, #24]	@ (8001348 <NRF_Task+0x2c>)
 800132e:	f006 faf3 	bl	8007918 <siprintf>
		TX_Communication(&nrf1, spi_tx);
 8001332:	4905      	ldr	r1, [pc, #20]	@ (8001348 <NRF_Task+0x2c>)
 8001334:	4805      	ldr	r0, [pc, #20]	@ (800134c <NRF_Task+0x30>)
 8001336:	f000 f975 	bl	8001624 <TX_Communication>
		vTaskDelay(pdMS_TO_TICKS(10));
 800133a:	200a      	movs	r0, #10
 800133c:	f005 f8b4 	bl	80064a8 <vTaskDelay>
		sprintf((char*)spi_tx,"%s",cmdBuf);
 8001340:	bf00      	nop
 8001342:	e7ef      	b.n	8001324 <NRF_Task+0x8>
 8001344:	08008430 	.word	0x08008430
 8001348:	200005a4 	.word	0x200005a4
 800134c:	20000094 	.word	0x20000094

08001350 <LCD_Task>:
	}
}

void LCD_Task(void *argument)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	while(1)
	{
		vTaskDelay(pdMS_TO_TICKS(10));
 8001358:	200a      	movs	r0, #10
 800135a:	f005 f8a5 	bl	80064a8 <vTaskDelay>
 800135e:	e7fb      	b.n	8001358 <LCD_Task+0x8>

08001360 <Button_Task>:
	}
}

void Button_Task(void *argument)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	for(;;)
	{
	         if(xSemaphoreTake(xUpSem, 0) == pdTRUE)
 8001368:	4b1b      	ldr	r3, [pc, #108]	@ (80013d8 <Button_Task+0x78>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f004 fd5a 	bl	8005e28 <xQueueSemaphoreTake>
 8001374:	4603      	mov	r3, r0
 8001376:	2b01      	cmp	r3, #1
 8001378:	d103      	bne.n	8001382 <Button_Task+0x22>
		  	  {
		  		  on_up(&hi2c1);
 800137a:	4818      	ldr	r0, [pc, #96]	@ (80013dc <Button_Task+0x7c>)
 800137c:	f7ff f9d0 	bl	8000720 <on_up>
 8001380:	e025      	b.n	80013ce <Button_Task+0x6e>

		  	  }
		  	  else if(xSemaphoreTake(xDownSem, 0) == pdTRUE)
 8001382:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <Button_Task+0x80>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f004 fd4d 	bl	8005e28 <xQueueSemaphoreTake>
 800138e:	4603      	mov	r3, r0
 8001390:	2b01      	cmp	r3, #1
 8001392:	d103      	bne.n	800139c <Button_Task+0x3c>
		  	  {
		  		  on_down(&hi2c1);
 8001394:	4811      	ldr	r0, [pc, #68]	@ (80013dc <Button_Task+0x7c>)
 8001396:	f7ff f9db 	bl	8000750 <on_down>
 800139a:	e018      	b.n	80013ce <Button_Task+0x6e>

		  	  }
		  	  else if(xSemaphoreTake(xBackSem, 0) == pdTRUE)
 800139c:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <Button_Task+0x84>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f004 fd40 	bl	8005e28 <xQueueSemaphoreTake>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d103      	bne.n	80013b6 <Button_Task+0x56>
		  	  {
		  		  on_back(&hi2c1);
 80013ae:	480b      	ldr	r0, [pc, #44]	@ (80013dc <Button_Task+0x7c>)
 80013b0:	f7ff fa00 	bl	80007b4 <on_back>
 80013b4:	e00b      	b.n	80013ce <Button_Task+0x6e>

		  	  }
		  	  else if(xSemaphoreTake(xSelectSem, 0) == pdTRUE)
 80013b6:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <Button_Task+0x88>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f004 fd33 	bl	8005e28 <xQueueSemaphoreTake>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d102      	bne.n	80013ce <Button_Task+0x6e>
		  	  {
		  		  on_select(&hi2c1);
 80013c8:	4804      	ldr	r0, [pc, #16]	@ (80013dc <Button_Task+0x7c>)
 80013ca:	f7ff f9df 	bl	800078c <on_select>

		  	  }
	         vTaskDelay(pdMS_TO_TICKS(20)); // debounce
 80013ce:	2014      	movs	r0, #20
 80013d0:	f005 f86a 	bl	80064a8 <vTaskDelay>
	         if(xSemaphoreTake(xUpSem, 0) == pdTRUE)
 80013d4:	e7c8      	b.n	8001368 <Button_Task+0x8>
 80013d6:	bf00      	nop
 80013d8:	20000590 	.word	0x20000590
 80013dc:	20000484 	.word	0x20000484
 80013e0:	20000594 	.word	0x20000594
 80013e4:	2000059c 	.word	0x2000059c
 80013e8:	20000598 	.word	0x20000598

080013ec <ADC_Task>:
	}
}

void ADC_Task(void *pvParameters)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_CHANNEL_COUNT);
 80013f4:	2204      	movs	r2, #4
 80013f6:	4914      	ldr	r1, [pc, #80]	@ (8001448 <ADC_Task+0x5c>)
 80013f8:	4814      	ldr	r0, [pc, #80]	@ (800144c <ADC_Task+0x60>)
 80013fa:	f000 ff39 	bl	8002270 <HAL_ADC_Start_DMA>
	RC_Input_t input;
    for (;;)
    {

    	if(xSemaphoreTake(xADCSem, portMAX_DELAY)==pdTRUE)
 80013fe:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <ADC_Task+0x64>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f04f 31ff 	mov.w	r1, #4294967295
 8001406:	4618      	mov	r0, r3
 8001408:	f004 fd0e 	bl	8005e28 <xQueueSemaphoreTake>
 800140c:	4603      	mov	r3, r0
 800140e:	2b01      	cmp	r3, #1
 8001410:	d110      	bne.n	8001434 <ADC_Task+0x48>
    	{

			input.throttle = adc_buffer[0];
 8001412:	4b0d      	ldr	r3, [pc, #52]	@ (8001448 <ADC_Task+0x5c>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	813b      	strh	r3, [r7, #8]
			input.roll      = adc_buffer[1];
 8001418:	4b0b      	ldr	r3, [pc, #44]	@ (8001448 <ADC_Task+0x5c>)
 800141a:	885b      	ldrh	r3, [r3, #2]
 800141c:	81fb      	strh	r3, [r7, #14]
			input.pitch    = adc_buffer[2];
 800141e:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <ADC_Task+0x5c>)
 8001420:	889b      	ldrh	r3, [r3, #4]
 8001422:	81bb      	strh	r3, [r7, #12]
			input.yaw     = adc_buffer[3];
 8001424:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <ADC_Task+0x5c>)
 8001426:	88db      	ldrh	r3, [r3, #6]
 8001428:	817b      	strh	r3, [r7, #10]

			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_CHANNEL_COUNT);
 800142a:	2204      	movs	r2, #4
 800142c:	4906      	ldr	r1, [pc, #24]	@ (8001448 <ADC_Task+0x5c>)
 800142e:	4807      	ldr	r0, [pc, #28]	@ (800144c <ADC_Task+0x60>)
 8001430:	f000 ff1e 	bl	8002270 <HAL_ADC_Start_DMA>
    	}
    	rccommand_process(&input,cmdStr);
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	4906      	ldr	r1, [pc, #24]	@ (8001454 <ADC_Task+0x68>)
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f936 	bl	80016ac <rccommand_process>
    	/*if (cmdStr != NULL)
    	{
    	   xQueueOverwrite(commandQueue, cmdStr);
    	}*/

        vTaskDelay(pdMS_TO_TICKS(10));
 8001440:	200a      	movs	r0, #10
 8001442:	f005 f831 	bl	80064a8 <vTaskDelay>
    	if(xSemaphoreTake(xADCSem, portMAX_DELAY)==pdTRUE)
 8001446:	e7da      	b.n	80013fe <ADC_Task+0x12>
 8001448:	200003d4 	.word	0x200003d4
 800144c:	200003dc 	.word	0x200003dc
 8001450:	200005a0 	.word	0x200005a0
 8001454:	200005c4 	.word	0x200005c4

08001458 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001460:	2001      	movs	r0, #1
 8001462:	f004 fac4 	bl	80059ee <osDelay>
 8001466:	e7fb      	b.n	8001460 <StartDefaultTask+0x8>

08001468 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a04      	ldr	r2, [pc, #16]	@ (8001488 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d101      	bne.n	800147e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800147a:	f000 fd61 	bl	8001f40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40010000 	.word	0x40010000

0800148c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001490:	b672      	cpsid	i
}
 8001492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <Error_Handler+0x8>

08001498 <Chip_Select>:

#include "nRF24L01.h"
#include "main.h"

void Chip_Select(NRF_HandleTypeDef *nrf)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CS_GPIO, nrf->CS_PIN, 0);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	899b      	ldrh	r3, [r3, #12]
 80014a8:	2200      	movs	r2, #0
 80014aa:	4619      	mov	r1, r3
 80014ac:	f002 f89a 	bl	80035e4 <HAL_GPIO_WritePin>
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <Chip_Deselect>:

void Chip_Deselect(NRF_HandleTypeDef *nrf)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CS_GPIO, nrf->CS_PIN, 1);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	899b      	ldrh	r3, [r3, #12]
 80014c8:	2201      	movs	r2, #1
 80014ca:	4619      	mov	r1, r3
 80014cc:	f002 f88a 	bl	80035e4 <HAL_GPIO_WritePin>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <Set_CE_High>:

void Set_CE_High(NRF_HandleTypeDef *nrf)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CE_GPIO, nrf->CE_PIN, 1);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6858      	ldr	r0, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	89db      	ldrh	r3, [r3, #14]
 80014e8:	2201      	movs	r2, #1
 80014ea:	4619      	mov	r1, r3
 80014ec:	f002 f87a 	bl	80035e4 <HAL_GPIO_WritePin>
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <WaitForIRQ>:
{
	HAL_GPIO_WritePin(nrf->CE_GPIO, nrf->CE_PIN, 0);
}

void WaitForIRQ(NRF_HandleTypeDef *nrf)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	while (HAL_GPIO_ReadPin(nrf->IRQ_GPIO, nrf->IRQ_PIN) == 1)
 8001500:	bf00      	nop
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	8a1b      	ldrh	r3, [r3, #16]
 800150a:	4619      	mov	r1, r3
 800150c:	4610      	mov	r0, r2
 800150e:	f002 f851 	bl	80035b4 <HAL_GPIO_ReadPin>
 8001512:	4603      	mov	r3, r0
 8001514:	2b01      	cmp	r3, #1
 8001516:	d0f4      	beq.n	8001502 <WaitForIRQ+0xa>
		;
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <nRF_WriteOneRegister>:
	HAL_SPI_Transmit(nrf->hspi, buff, (uint16_t)size + 1, NRF_SPI_TIMEOUT);
	Chip_Deselect(nrf);
}

void nRF_WriteOneRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t data)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b084      	sub	sp, #16
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	460b      	mov	r3, r1
 800152c:	70fb      	strb	r3, [r7, #3]
 800152e:	4613      	mov	r3, r2
 8001530:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2];
	buff[0] = reg | (1 << 5);
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	f043 0320 	orr.w	r3, r3, #32
 8001538:	b2db      	uxtb	r3, r3
 800153a:	733b      	strb	r3, [r7, #12]
	buff[1] = data;
 800153c:	78bb      	ldrb	r3, [r7, #2]
 800153e:	737b      	strb	r3, [r7, #13]
	Chip_Select(nrf);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ffa9 	bl	8001498 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, buff, 2, NRF_SPI_TIMEOUT);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6958      	ldr	r0, [r3, #20]
 800154a:	f107 010c 	add.w	r1, r7, #12
 800154e:	2364      	movs	r3, #100	@ 0x64
 8001550:	2202      	movs	r2, #2
 8001552:	f003 fa2a 	bl	80049aa <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffae 	bl	80014b8 <Chip_Deselect>
}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <nRF_SendCmd>:
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
	HAL_SPI_Receive(nrf->hspi, receive_data, 1, NRF_SPI_TIMEOUT);
	Chip_Deselect(nrf);
}
void nRF_SendCmd(NRF_HandleTypeDef *nrf, uint8_t cmd)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	70fb      	strb	r3, [r7, #3]

	uint8_t buff = cmd;
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	73fb      	strb	r3, [r7, #15]
	Chip_Select(nrf);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff8f 	bl	8001498 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6958      	ldr	r0, [r3, #20]
 800157e:	f107 010f 	add.w	r1, r7, #15
 8001582:	2364      	movs	r3, #100	@ 0x64
 8001584:	2201      	movs	r2, #1
 8001586:	f003 fa10 	bl	80049aa <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ff94 	bl	80014b8 <Chip_Deselect>
}
 8001590:	bf00      	nop
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <nRF_GetStatus>:

uint8_t nRF_GetStatus(NRF_HandleTypeDef *nrf)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

	uint8_t buff = STATUS;
 80015a0:	2307      	movs	r3, #7
 80015a2:	73fb      	strb	r3, [r7, #15]
	uint8_t rx_data = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	73bb      	strb	r3, [r7, #14]
	Chip_Select(nrf);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ff75 	bl	8001498 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6958      	ldr	r0, [r3, #20]
 80015b2:	f107 010f 	add.w	r1, r7, #15
 80015b6:	2364      	movs	r3, #100	@ 0x64
 80015b8:	2201      	movs	r2, #1
 80015ba:	f003 f9f6 	bl	80049aa <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->hspi, &rx_data, 1, NRF_SPI_TIMEOUT * 10);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6958      	ldr	r0, [r3, #20]
 80015c2:	f107 010e 	add.w	r1, r7, #14
 80015c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ca:	2201      	movs	r2, #1
 80015cc:	f003 fb31 	bl	8004c32 <HAL_SPI_Receive>
	Chip_Deselect(nrf);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ff71 	bl	80014b8 <Chip_Deselect>
	return rx_data;
 80015d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <nRF_TX_Payload>:

void nRF_TX_Payload(NRF_HandleTypeDef *nrf, uint8_t *data, uint16_t size)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	4613      	mov	r3, r2
 80015ec:	80fb      	strh	r3, [r7, #6]
	Chip_Select(nrf);
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	f7ff ff52 	bl	8001498 <Chip_Select>
	uint8_t buff = W_TX_PAYLOAD;
 80015f4:	23a0      	movs	r3, #160	@ 0xa0
 80015f6:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6958      	ldr	r0, [r3, #20]
 80015fc:	f107 0117 	add.w	r1, r7, #23
 8001600:	2364      	movs	r3, #100	@ 0x64
 8001602:	2201      	movs	r2, #1
 8001604:	f003 f9d1 	bl	80049aa <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf->hspi, data, size, NRF_SPI_TIMEOUT);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6958      	ldr	r0, [r3, #20]
 800160c:	88fa      	ldrh	r2, [r7, #6]
 800160e:	2364      	movs	r3, #100	@ 0x64
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	f003 f9ca 	bl	80049aa <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f7ff ff4e 	bl	80014b8 <Chip_Deselect>
}
 800161c:	bf00      	nop
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <TX_Communication>:
	Set_CE_High(nrf);
	HAL_Delay(2);
}

uint8_t TX_Communication(NRF_HandleTypeDef *nrf, uint8_t *data)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
	if (nrf->nrfmode == MODE_TX)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	7e1b      	ldrb	r3, [r3, #24]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d135      	bne.n	80016a2 <TX_Communication+0x7e>
	{
		nRF_TX_Payload(nrf, data, 32);
 8001636:	2220      	movs	r2, #32
 8001638:	6839      	ldr	r1, [r7, #0]
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ffd0 	bl	80015e0 <nRF_TX_Payload>
		Set_CE_High(nrf);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff49 	bl	80014d8 <Set_CE_High>
		WaitForIRQ(nrf);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ff56 	bl	80014f8 <WaitForIRQ>
		nRF_SendCmd(nrf, FLUSH_TX);
 800164c:	21e1      	movs	r1, #225	@ 0xe1
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ff88 	bl	8001564 <nRF_SendCmd>
		uint8_t status = nRF_GetStatus(nrf);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ff9f 	bl	8001598 <nRF_GetStatus>
 800165a:	4603      	mov	r3, r0
 800165c:	73fb      	strb	r3, [r7, #15]
		if ((status & (1 << MAX_RT)) != 0)
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	2b00      	cmp	r3, #0
 8001666:	d00b      	beq.n	8001680 <TX_Communication+0x5c>
		{
			status |= ((1 << MAX_RT) | (1 << TX_FULL));
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	f043 0311 	orr.w	r3, r3, #17
 800166e:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(nrf, STATUS, status);
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	461a      	mov	r2, r3
 8001674:	2107      	movs	r1, #7
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ff53 	bl	8001522 <nRF_WriteOneRegister>
			return STATUS_TX_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e011      	b.n	80016a4 <TX_Communication+0x80>
		}
		else if ((status & (1 << 5)) != 0)
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	f003 0320 	and.w	r3, r3, #32
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00b      	beq.n	80016a2 <TX_Communication+0x7e>
		{
			status |= ((1 << TX_DS) | (1 << TX_FULL));
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 8001690:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(nrf, STATUS, status);
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	461a      	mov	r2, r3
 8001696:	2107      	movs	r1, #7
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff42 	bl	8001522 <nRF_WriteOneRegister>
			return STATUS_TX_OK;
 800169e:	2302      	movs	r3, #2
 80016a0:	e000      	b.n	80016a4 <TX_Communication+0x80>
		}
	}
	return STATUS_TX_NONDEFINE;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <rccommand_process>:
{
    lastCmd = RC_CMD_NONE;
}

void rccommand_process(const RC_Input_t *input, char *buf )
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
    RC_Command_t cmd = RC_CMD_NONE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	73fb      	strb	r3, [r7, #15]

    // Throttle (UP/DOWN)
    if (input->throttle > CENTER + THRESHOLD)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	f640 122c 	movw	r2, #2348	@ 0x92c
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d904      	bls.n	80016d0 <rccommand_process+0x24>
        cmd |= RC_CMD_UP;
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	e007      	b.n	80016e0 <rccommand_process+0x34>
    else if (input->throttle < CENTER - THRESHOLD)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	f240 62d3 	movw	r2, #1747	@ 0x6d3
 80016d8:	4293      	cmp	r3, r2
 80016da:	d801      	bhi.n	80016e0 <rccommand_process+0x34>
        cmd = RC_CMD_DOWN;
 80016dc:	2302      	movs	r3, #2
 80016de:	73fb      	strb	r3, [r7, #15]

    // Roll (LEFT/RIGHT)
    if (input->roll > CENTER + THRESHOLD)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	88db      	ldrh	r3, [r3, #6]
 80016e4:	f640 122c 	movw	r2, #2348	@ 0x92c
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d904      	bls.n	80016f6 <rccommand_process+0x4a>
        cmd |= RC_CMD_RIGHT;
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	f043 0308 	orr.w	r3, r3, #8
 80016f2:	73fb      	strb	r3, [r7, #15]
 80016f4:	e009      	b.n	800170a <rccommand_process+0x5e>
    else if (input->roll < CENTER - THRESHOLD)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	88db      	ldrh	r3, [r3, #6]
 80016fa:	f240 62d3 	movw	r2, #1747	@ 0x6d3
 80016fe:	4293      	cmp	r3, r2
 8001700:	d803      	bhi.n	800170a <rccommand_process+0x5e>
        cmd |= RC_CMD_LEFT;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	73fb      	strb	r3, [r7, #15]

    // Yaw (ROTATE)
    if (input->yaw > CENTER + THRESHOLD)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	885b      	ldrh	r3, [r3, #2]
 800170e:	f640 122c 	movw	r2, #2348	@ 0x92c
 8001712:	4293      	cmp	r3, r2
 8001714:	d904      	bls.n	8001720 <rccommand_process+0x74>
        cmd |= RC_CMD_YAW_RIGHT;
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800171c:	73fb      	strb	r3, [r7, #15]
 800171e:	e009      	b.n	8001734 <rccommand_process+0x88>
    else if (input->yaw < CENTER - THRESHOLD)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	885b      	ldrh	r3, [r3, #2]
 8001724:	f240 62d3 	movw	r2, #1747	@ 0x6d3
 8001728:	4293      	cmp	r3, r2
 800172a:	d803      	bhi.n	8001734 <rccommand_process+0x88>
        cmd |= RC_CMD_YAW_LEFT;
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001732:	73fb      	strb	r3, [r7, #15]

    // Pitch (FORWARD/BACKWARD)
    if (input->pitch > CENTER + THRESHOLD)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	889b      	ldrh	r3, [r3, #4]
 8001738:	f640 122c 	movw	r2, #2348	@ 0x92c
 800173c:	4293      	cmp	r3, r2
 800173e:	d904      	bls.n	800174a <rccommand_process+0x9e>
        cmd |= RC_CMD_FORWARD;
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	f043 0310 	orr.w	r3, r3, #16
 8001746:	73fb      	strb	r3, [r7, #15]
 8001748:	e009      	b.n	800175e <rccommand_process+0xb2>
    else if (input->pitch < CENTER - THRESHOLD)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	889b      	ldrh	r3, [r3, #4]
 800174e:	f240 62d3 	movw	r2, #1747	@ 0x6d3
 8001752:	4293      	cmp	r3, r2
 8001754:	d803      	bhi.n	800175e <rccommand_process+0xb2>
    {
        cmd |= RC_CMD_BACKWARD;
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	f043 0320 	orr.w	r3, r3, #32
 800175c:	73fb      	strb	r3, [r7, #15]
    }

        buf[0] = '\0';
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
        strcat(buf, "CMD:");
 8001764:	6838      	ldr	r0, [r7, #0]
 8001766:	f7fe fd3b 	bl	80001e0 <strlen>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	4413      	add	r3, r2
 8001772:	4a80      	ldr	r2, [pc, #512]	@ (8001974 <rccommand_process+0x2c8>)
 8001774:	6810      	ldr	r0, [r2, #0]
 8001776:	6018      	str	r0, [r3, #0]
 8001778:	7912      	ldrb	r2, [r2, #4]
 800177a:	711a      	strb	r2, [r3, #4]

        if (cmd == RC_CMD_NONE)
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10c      	bne.n	800179c <rccommand_process+0xf0>
        {
            strcat(buf, "STOP");
 8001782:	6838      	ldr	r0, [r7, #0]
 8001784:	f7fe fd2c 	bl	80001e0 <strlen>
 8001788:	4603      	mov	r3, r0
 800178a:	461a      	mov	r2, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	4413      	add	r3, r2
 8001790:	4a79      	ldr	r2, [pc, #484]	@ (8001978 <rccommand_process+0x2cc>)
 8001792:	6810      	ldr	r0, [r2, #0]
 8001794:	6018      	str	r0, [r3, #0]
 8001796:	7912      	ldrb	r2, [r2, #4]
 8001798:	711a      	strb	r2, [r3, #4]
 800179a:	e0da      	b.n	8001952 <rccommand_process+0x2a6>
        }
        else
        {
            if (cmd == RC_CMD_UP)         strcat(buf, "UP|");
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d109      	bne.n	80017b6 <rccommand_process+0x10a>
 80017a2:	6838      	ldr	r0, [r7, #0]
 80017a4:	f7fe fd1c 	bl	80001e0 <strlen>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	4a72      	ldr	r2, [pc, #456]	@ (800197c <rccommand_process+0x2d0>)
 80017b2:	6810      	ldr	r0, [r2, #0]
 80017b4:	6018      	str	r0, [r3, #0]
            if (cmd == RC_CMD_DOWN)       strcat(buf, "DOWN|");
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d10b      	bne.n	80017d4 <rccommand_process+0x128>
 80017bc:	6838      	ldr	r0, [r7, #0]
 80017be:	f7fe fd0f 	bl	80001e0 <strlen>
 80017c2:	4603      	mov	r3, r0
 80017c4:	461a      	mov	r2, r3
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	4413      	add	r3, r2
 80017ca:	4a6d      	ldr	r2, [pc, #436]	@ (8001980 <rccommand_process+0x2d4>)
 80017cc:	6810      	ldr	r0, [r2, #0]
 80017ce:	6018      	str	r0, [r3, #0]
 80017d0:	8892      	ldrh	r2, [r2, #4]
 80017d2:	809a      	strh	r2, [r3, #4]
            if (cmd == RC_CMD_LEFT)       strcat(buf, "LEFT|");
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d10b      	bne.n	80017f2 <rccommand_process+0x146>
 80017da:	6838      	ldr	r0, [r7, #0]
 80017dc:	f7fe fd00 	bl	80001e0 <strlen>
 80017e0:	4603      	mov	r3, r0
 80017e2:	461a      	mov	r2, r3
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	4a66      	ldr	r2, [pc, #408]	@ (8001984 <rccommand_process+0x2d8>)
 80017ea:	6810      	ldr	r0, [r2, #0]
 80017ec:	6018      	str	r0, [r3, #0]
 80017ee:	8892      	ldrh	r2, [r2, #4]
 80017f0:	809a      	strh	r2, [r3, #4]
            if (cmd == RC_CMD_RIGHT)      strcat(buf, "RIGHT|");
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d10d      	bne.n	8001814 <rccommand_process+0x168>
 80017f8:	6838      	ldr	r0, [r7, #0]
 80017fa:	f7fe fcf1 	bl	80001e0 <strlen>
 80017fe:	4603      	mov	r3, r0
 8001800:	461a      	mov	r2, r3
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	4413      	add	r3, r2
 8001806:	4a60      	ldr	r2, [pc, #384]	@ (8001988 <rccommand_process+0x2dc>)
 8001808:	6810      	ldr	r0, [r2, #0]
 800180a:	6018      	str	r0, [r3, #0]
 800180c:	8891      	ldrh	r1, [r2, #4]
 800180e:	7992      	ldrb	r2, [r2, #6]
 8001810:	8099      	strh	r1, [r3, #4]
 8001812:	719a      	strb	r2, [r3, #6]

            if (cmd == RC_CMD_FORWARD)    strcat(buf, "FORWARD|");
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	2b10      	cmp	r3, #16
 8001818:	d10e      	bne.n	8001838 <rccommand_process+0x18c>
 800181a:	6838      	ldr	r0, [r7, #0]
 800181c:	f7fe fce0 	bl	80001e0 <strlen>
 8001820:	4603      	mov	r3, r0
 8001822:	461a      	mov	r2, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	4413      	add	r3, r2
 8001828:	4958      	ldr	r1, [pc, #352]	@ (800198c <rccommand_process+0x2e0>)
 800182a:	461a      	mov	r2, r3
 800182c:	460b      	mov	r3, r1
 800182e:	cb03      	ldmia	r3!, {r0, r1}
 8001830:	6010      	str	r0, [r2, #0]
 8001832:	6051      	str	r1, [r2, #4]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	7213      	strb	r3, [r2, #8]
            if (cmd == RC_CMD_BACKWARD)   strcat(buf, "BACKWARD|");
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	2b20      	cmp	r3, #32
 800183c:	d10e      	bne.n	800185c <rccommand_process+0x1b0>
 800183e:	6838      	ldr	r0, [r7, #0]
 8001840:	f7fe fcce 	bl	80001e0 <strlen>
 8001844:	4603      	mov	r3, r0
 8001846:	461a      	mov	r2, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	4413      	add	r3, r2
 800184c:	4950      	ldr	r1, [pc, #320]	@ (8001990 <rccommand_process+0x2e4>)
 800184e:	461a      	mov	r2, r3
 8001850:	460b      	mov	r3, r1
 8001852:	cb03      	ldmia	r3!, {r0, r1}
 8001854:	6010      	str	r0, [r2, #0]
 8001856:	6051      	str	r1, [r2, #4]
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	8113      	strh	r3, [r2, #8]
            if (cmd == RC_CMD_YAW_LEFT)   strcat(buf, "YAW_LEFT|");
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	2b40      	cmp	r3, #64	@ 0x40
 8001860:	d10e      	bne.n	8001880 <rccommand_process+0x1d4>
 8001862:	6838      	ldr	r0, [r7, #0]
 8001864:	f7fe fcbc 	bl	80001e0 <strlen>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	4413      	add	r3, r2
 8001870:	4948      	ldr	r1, [pc, #288]	@ (8001994 <rccommand_process+0x2e8>)
 8001872:	461a      	mov	r2, r3
 8001874:	460b      	mov	r3, r1
 8001876:	cb03      	ldmia	r3!, {r0, r1}
 8001878:	6010      	str	r0, [r2, #0]
 800187a:	6051      	str	r1, [r2, #4]
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	8113      	strh	r3, [r2, #8]
            if (cmd == RC_CMD_YAW_RIGHT)  strcat(buf, "YAW_RIGHT|");
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	2b80      	cmp	r3, #128	@ 0x80
 8001884:	d110      	bne.n	80018a8 <rccommand_process+0x1fc>
 8001886:	6838      	ldr	r0, [r7, #0]
 8001888:	f7fe fcaa 	bl	80001e0 <strlen>
 800188c:	4603      	mov	r3, r0
 800188e:	461a      	mov	r2, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	4413      	add	r3, r2
 8001894:	4940      	ldr	r1, [pc, #256]	@ (8001998 <rccommand_process+0x2ec>)
 8001896:	461a      	mov	r2, r3
 8001898:	460b      	mov	r3, r1
 800189a:	cb03      	ldmia	r3!, {r0, r1}
 800189c:	6010      	str	r0, [r2, #0]
 800189e:	6051      	str	r1, [r2, #4]
 80018a0:	8819      	ldrh	r1, [r3, #0]
 80018a2:	789b      	ldrb	r3, [r3, #2]
 80018a4:	8111      	strh	r1, [r2, #8]
 80018a6:	7293      	strb	r3, [r2, #10]

            if (cmd & RC_CMD_UP)         strcat(buf, "UP|");
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d009      	beq.n	80018c6 <rccommand_process+0x21a>
 80018b2:	6838      	ldr	r0, [r7, #0]
 80018b4:	f7fe fc94 	bl	80001e0 <strlen>
 80018b8:	4603      	mov	r3, r0
 80018ba:	461a      	mov	r2, r3
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	4a2e      	ldr	r2, [pc, #184]	@ (800197c <rccommand_process+0x2d0>)
 80018c2:	6810      	ldr	r0, [r2, #0]
 80018c4:	6018      	str	r0, [r3, #0]
            if (cmd & RC_CMD_DOWN)       strcat(buf, "DOWN|");
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00b      	beq.n	80018e8 <rccommand_process+0x23c>
 80018d0:	6838      	ldr	r0, [r7, #0]
 80018d2:	f7fe fc85 	bl	80001e0 <strlen>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461a      	mov	r2, r3
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	4413      	add	r3, r2
 80018de:	4a28      	ldr	r2, [pc, #160]	@ (8001980 <rccommand_process+0x2d4>)
 80018e0:	6810      	ldr	r0, [r2, #0]
 80018e2:	6018      	str	r0, [r3, #0]
 80018e4:	8892      	ldrh	r2, [r2, #4]
 80018e6:	809a      	strh	r2, [r3, #4]
            if (cmd & RC_CMD_LEFT)       strcat(buf, "LEFT|");
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00b      	beq.n	800190a <rccommand_process+0x25e>
 80018f2:	6838      	ldr	r0, [r7, #0]
 80018f4:	f7fe fc74 	bl	80001e0 <strlen>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	4a20      	ldr	r2, [pc, #128]	@ (8001984 <rccommand_process+0x2d8>)
 8001902:	6810      	ldr	r0, [r2, #0]
 8001904:	6018      	str	r0, [r3, #0]
 8001906:	8892      	ldrh	r2, [r2, #4]
 8001908:	809a      	strh	r2, [r3, #4]
            if (cmd & RC_CMD_RIGHT)      strcat(buf, "RIGHT|");
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00d      	beq.n	8001930 <rccommand_process+0x284>
 8001914:	6838      	ldr	r0, [r7, #0]
 8001916:	f7fe fc63 	bl	80001e0 <strlen>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	4413      	add	r3, r2
 8001922:	4a19      	ldr	r2, [pc, #100]	@ (8001988 <rccommand_process+0x2dc>)
 8001924:	6810      	ldr	r0, [r2, #0]
 8001926:	6018      	str	r0, [r3, #0]
 8001928:	8891      	ldrh	r1, [r2, #4]
 800192a:	7992      	ldrb	r2, [r2, #6]
 800192c:	8099      	strh	r1, [r3, #4]
 800192e:	719a      	strb	r2, [r3, #6]


            size_t len = strlen(buf);
 8001930:	6838      	ldr	r0, [r7, #0]
 8001932:	f7fe fc55 	bl	80001e0 <strlen>
 8001936:	60b8      	str	r0, [r7, #8]
            if (buf[len - 1] == '|') buf[len - 1] = '\0';
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	3b01      	subs	r3, #1
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	4413      	add	r3, r2
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b7c      	cmp	r3, #124	@ 0x7c
 8001944:	d105      	bne.n	8001952 <rccommand_process+0x2a6>
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	3b01      	subs	r3, #1
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	4413      	add	r3, r2
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
        }

        strcat(buf, "\n");
 8001952:	6838      	ldr	r0, [r7, #0]
 8001954:	f7fe fc44 	bl	80001e0 <strlen>
 8001958:	4603      	mov	r3, r0
 800195a:	461a      	mov	r2, r3
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	4413      	add	r3, r2
 8001960:	490e      	ldr	r1, [pc, #56]	@ (800199c <rccommand_process+0x2f0>)
 8001962:	461a      	mov	r2, r3
 8001964:	460b      	mov	r3, r1
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	8013      	strh	r3, [r2, #0]


}
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	08008434 	.word	0x08008434
 8001978:	0800843c 	.word	0x0800843c
 800197c:	08008444 	.word	0x08008444
 8001980:	08008448 	.word	0x08008448
 8001984:	08008450 	.word	0x08008450
 8001988:	08008458 	.word	0x08008458
 800198c:	08008460 	.word	0x08008460
 8001990:	0800846c 	.word	0x0800846c
 8001994:	08008478 	.word	0x08008478
 8001998:	08008484 	.word	0x08008484
 800199c:	08008490 	.word	0x08008490

080019a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <HAL_MspInit+0x54>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ae:	4a11      	ldr	r2, [pc, #68]	@ (80019f4 <HAL_MspInit+0x54>)
 80019b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019b6:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <HAL_MspInit+0x54>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <HAL_MspInit+0x54>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <HAL_MspInit+0x54>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d2:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <HAL_MspInit+0x54>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	210f      	movs	r1, #15
 80019e2:	f06f 0001 	mvn.w	r0, #1
 80019e6:	f001 f8c7 	bl	8002b78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800

080019f8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	@ 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a32      	ldr	r2, [pc, #200]	@ (8001ae0 <HAL_ADC_MspInit+0xe8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d15e      	bne.n	8001ad8 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b31      	ldr	r3, [pc, #196]	@ (8001ae4 <HAL_ADC_MspInit+0xec>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a22:	4a30      	ldr	r2, [pc, #192]	@ (8001ae4 <HAL_ADC_MspInit+0xec>)
 8001a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ae4 <HAL_ADC_MspInit+0xec>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae4 <HAL_ADC_MspInit+0xec>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	4a29      	ldr	r2, [pc, #164]	@ (8001ae4 <HAL_ADC_MspInit+0xec>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a46:	4b27      	ldr	r3, [pc, #156]	@ (8001ae4 <HAL_ADC_MspInit+0xec>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a52:	231f      	movs	r3, #31
 8001a54:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a56:	2303      	movs	r3, #3
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	4820      	ldr	r0, [pc, #128]	@ (8001ae8 <HAL_ADC_MspInit+0xf0>)
 8001a66:	f001 fc21 	bl	80032ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a6a:	4b20      	ldr	r3, [pc, #128]	@ (8001aec <HAL_ADC_MspInit+0xf4>)
 8001a6c:	4a20      	ldr	r2, [pc, #128]	@ (8001af0 <HAL_ADC_MspInit+0xf8>)
 8001a6e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a70:	4b1e      	ldr	r3, [pc, #120]	@ (8001aec <HAL_ADC_MspInit+0xf4>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a76:	4b1d      	ldr	r3, [pc, #116]	@ (8001aec <HAL_ADC_MspInit+0xf4>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aec <HAL_ADC_MspInit+0xf4>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a82:	4b1a      	ldr	r3, [pc, #104]	@ (8001aec <HAL_ADC_MspInit+0xf4>)
 8001a84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a88:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a8a:	4b18      	ldr	r3, [pc, #96]	@ (8001aec <HAL_ADC_MspInit+0xf4>)
 8001a8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a90:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a92:	4b16      	ldr	r3, [pc, #88]	@ (8001aec <HAL_ADC_MspInit+0xf4>)
 8001a94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a98:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001a9a:	4b14      	ldr	r3, [pc, #80]	@ (8001aec <HAL_ADC_MspInit+0xf4>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001aa0:	4b12      	ldr	r3, [pc, #72]	@ (8001aec <HAL_ADC_MspInit+0xf4>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <HAL_ADC_MspInit+0xf4>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001aac:	480f      	ldr	r0, [pc, #60]	@ (8001aec <HAL_ADC_MspInit+0xf4>)
 8001aae:	f001 f88d 	bl	8002bcc <HAL_DMA_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001ab8:	f7ff fce8 	bl	800148c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a0b      	ldr	r2, [pc, #44]	@ (8001aec <HAL_ADC_MspInit+0xf4>)
 8001ac0:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <HAL_ADC_MspInit+0xf4>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2105      	movs	r1, #5
 8001acc:	2012      	movs	r0, #18
 8001ace:	f001 f853 	bl	8002b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001ad2:	2012      	movs	r0, #18
 8001ad4:	f001 f86c 	bl	8002bb0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ad8:	bf00      	nop
 8001ada:	3728      	adds	r7, #40	@ 0x28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40012000 	.word	0x40012000
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40020000 	.word	0x40020000
 8001aec:	20000424 	.word	0x20000424
 8001af0:	40026410 	.word	0x40026410

08001af4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	@ 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a19      	ldr	r2, [pc, #100]	@ (8001b78 <HAL_I2C_MspInit+0x84>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d12b      	bne.n	8001b6e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	4b18      	ldr	r3, [pc, #96]	@ (8001b7c <HAL_I2C_MspInit+0x88>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	4a17      	ldr	r2, [pc, #92]	@ (8001b7c <HAL_I2C_MspInit+0x88>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b26:	4b15      	ldr	r3, [pc, #84]	@ (8001b7c <HAL_I2C_MspInit+0x88>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b32:	23c0      	movs	r3, #192	@ 0xc0
 8001b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b36:	2312      	movs	r3, #18
 8001b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b42:	2304      	movs	r3, #4
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	480c      	ldr	r0, [pc, #48]	@ (8001b80 <HAL_I2C_MspInit+0x8c>)
 8001b4e:	f001 fbad 	bl	80032ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <HAL_I2C_MspInit+0x88>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	4a08      	ldr	r2, [pc, #32]	@ (8001b7c <HAL_I2C_MspInit+0x88>)
 8001b5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_I2C_MspInit+0x88>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b6e:	bf00      	nop
 8001b70:	3728      	adds	r7, #40	@ 0x28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40005400 	.word	0x40005400
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020400 	.word	0x40020400

08001b84 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08c      	sub	sp, #48	@ 0x30
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a32      	ldr	r2, [pc, #200]	@ (8001c6c <HAL_SPI_MspInit+0xe8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d12c      	bne.n	8001c00 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
 8001baa:	4b31      	ldr	r3, [pc, #196]	@ (8001c70 <HAL_SPI_MspInit+0xec>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bae:	4a30      	ldr	r2, [pc, #192]	@ (8001c70 <HAL_SPI_MspInit+0xec>)
 8001bb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c70 <HAL_SPI_MspInit+0xec>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bbe:	61bb      	str	r3, [r7, #24]
 8001bc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c70 <HAL_SPI_MspInit+0xec>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	4a29      	ldr	r2, [pc, #164]	@ (8001c70 <HAL_SPI_MspInit+0xec>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd2:	4b27      	ldr	r3, [pc, #156]	@ (8001c70 <HAL_SPI_MspInit+0xec>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001bde:	23e0      	movs	r3, #224	@ 0xe0
 8001be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bea:	2303      	movs	r3, #3
 8001bec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bee:	2305      	movs	r3, #5
 8001bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	481e      	ldr	r0, [pc, #120]	@ (8001c74 <HAL_SPI_MspInit+0xf0>)
 8001bfa:	f001 fb57 	bl	80032ac <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001bfe:	e030      	b.n	8001c62 <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI3)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1c      	ldr	r2, [pc, #112]	@ (8001c78 <HAL_SPI_MspInit+0xf4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d12b      	bne.n	8001c62 <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <HAL_SPI_MspInit+0xec>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	4a17      	ldr	r2, [pc, #92]	@ (8001c70 <HAL_SPI_MspInit+0xec>)
 8001c14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1a:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <HAL_SPI_MspInit+0xec>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <HAL_SPI_MspInit+0xec>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	4a10      	ldr	r2, [pc, #64]	@ (8001c70 <HAL_SPI_MspInit+0xec>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c36:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <HAL_SPI_MspInit+0xec>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c42:	2338      	movs	r3, #56	@ 0x38
 8001c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c52:	2306      	movs	r3, #6
 8001c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c56:	f107 031c 	add.w	r3, r7, #28
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4807      	ldr	r0, [pc, #28]	@ (8001c7c <HAL_SPI_MspInit+0xf8>)
 8001c5e:	f001 fb25 	bl	80032ac <HAL_GPIO_Init>
}
 8001c62:	bf00      	nop
 8001c64:	3730      	adds	r7, #48	@ 0x30
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40013000 	.word	0x40013000
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40020000 	.word	0x40020000
 8001c78:	40003c00 	.word	0x40003c00
 8001c7c:	40020400 	.word	0x40020400

08001c80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08c      	sub	sp, #48	@ 0x30
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	4b2e      	ldr	r3, [pc, #184]	@ (8001d50 <HAL_InitTick+0xd0>)
 8001c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c98:	4a2d      	ldr	r2, [pc, #180]	@ (8001d50 <HAL_InitTick+0xd0>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d50 <HAL_InitTick+0xd0>)
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cac:	f107 020c 	add.w	r2, r7, #12
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f002 fdbc 	bl	8004834 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001cbc:	f002 fda6 	bl	800480c <HAL_RCC_GetPCLK2Freq>
 8001cc0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc4:	4a23      	ldr	r2, [pc, #140]	@ (8001d54 <HAL_InitTick+0xd4>)
 8001cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cca:	0c9b      	lsrs	r3, r3, #18
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001cd0:	4b21      	ldr	r3, [pc, #132]	@ (8001d58 <HAL_InitTick+0xd8>)
 8001cd2:	4a22      	ldr	r2, [pc, #136]	@ (8001d5c <HAL_InitTick+0xdc>)
 8001cd4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001cd6:	4b20      	ldr	r3, [pc, #128]	@ (8001d58 <HAL_InitTick+0xd8>)
 8001cd8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cdc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001cde:	4a1e      	ldr	r2, [pc, #120]	@ (8001d58 <HAL_InitTick+0xd8>)
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d58 <HAL_InitTick+0xd8>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cea:	4b1b      	ldr	r3, [pc, #108]	@ (8001d58 <HAL_InitTick+0xd8>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf0:	4b19      	ldr	r3, [pc, #100]	@ (8001d58 <HAL_InitTick+0xd8>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001cf6:	4818      	ldr	r0, [pc, #96]	@ (8001d58 <HAL_InitTick+0xd8>)
 8001cf8:	f003 fba0 	bl	800543c <HAL_TIM_Base_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001d02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d11b      	bne.n	8001d42 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d0a:	4813      	ldr	r0, [pc, #76]	@ (8001d58 <HAL_InitTick+0xd8>)
 8001d0c:	f003 fbf0 	bl	80054f0 <HAL_TIM_Base_Start_IT>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001d16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d111      	bne.n	8001d42 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d1e:	2019      	movs	r0, #25
 8001d20:	f000 ff46 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b0f      	cmp	r3, #15
 8001d28:	d808      	bhi.n	8001d3c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	2019      	movs	r0, #25
 8001d30:	f000 ff22 	bl	8002b78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d34:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <HAL_InitTick+0xe0>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e002      	b.n	8001d42 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3730      	adds	r7, #48	@ 0x30
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	431bde83 	.word	0x431bde83
 8001d58:	200005e4 	.word	0x200005e4
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	200000b4 	.word	0x200000b4

08001d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <NMI_Handler+0x4>

08001d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <HardFault_Handler+0x4>

08001d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <MemManage_Handler+0x4>

08001d7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <BusFault_Handler+0x4>

08001d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <UsageFault_Handler+0x4>

08001d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001da0:	4802      	ldr	r0, [pc, #8]	@ (8001dac <ADC_IRQHandler+0x10>)
 8001da2:	f000 f954 	bl	800204e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200003dc 	.word	0x200003dc

08001db0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SELECT_Pin);
 8001db4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001db8:	f001 fc2e 	bl	8003618 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_Pin);
 8001dbc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001dc0:	f001 fc2a 	bl	8003618 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dcc:	4802      	ldr	r0, [pc, #8]	@ (8001dd8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001dce:	f003 fbf1 	bl	80055b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200005e4 	.word	0x200005e4

08001ddc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_Pin);
 8001de0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001de4:	f001 fc18 	bl	8003618 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HOME_Pin);
 8001de8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001dec:	f001 fc14 	bl	8003618 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001df0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001df4:	f001 fc10 	bl	8003618 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BACK_Pin);
 8001df8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001dfc:	f001 fc0c 	bl	8003618 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e08:	4802      	ldr	r0, [pc, #8]	@ (8001e14 <DMA2_Stream0_IRQHandler+0x10>)
 8001e0a:	f000 ffe5 	bl	8002dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000424 	.word	0x20000424

08001e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e20:	4a14      	ldr	r2, [pc, #80]	@ (8001e74 <_sbrk+0x5c>)
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <_sbrk+0x60>)
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e2c:	4b13      	ldr	r3, [pc, #76]	@ (8001e7c <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e34:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <_sbrk+0x64>)
 8001e36:	4a12      	ldr	r2, [pc, #72]	@ (8001e80 <_sbrk+0x68>)
 8001e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3a:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <_sbrk+0x64>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d207      	bcs.n	8001e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e48:	f005 fdee 	bl	8007a28 <__errno>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	220c      	movs	r2, #12
 8001e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
 8001e56:	e009      	b.n	8001e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e58:	4b08      	ldr	r3, [pc, #32]	@ (8001e7c <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e5e:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	4a05      	ldr	r2, [pc, #20]	@ (8001e7c <_sbrk+0x64>)
 8001e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20020000 	.word	0x20020000
 8001e78:	00000400 	.word	0x00000400
 8001e7c:	2000062c 	.word	0x2000062c
 8001e80:	200044d0 	.word	0x200044d0

08001e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <SystemInit+0x20>)
 8001e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ea4 <SystemInit+0x20>)
 8001e90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ea8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ee0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eac:	f7ff ffea 	bl	8001e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eb0:	480c      	ldr	r0, [pc, #48]	@ (8001ee4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eb2:	490d      	ldr	r1, [pc, #52]	@ (8001ee8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001eec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb8:	e002      	b.n	8001ec0 <LoopCopyDataInit>

08001eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ebe:	3304      	adds	r3, #4

08001ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec4:	d3f9      	bcc.n	8001eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ec8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ef4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ecc:	e001      	b.n	8001ed2 <LoopFillZerobss>

08001ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed0:	3204      	adds	r2, #4

08001ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed4:	d3fb      	bcc.n	8001ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ed6:	f005 fdad 	bl	8007a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eda:	f7fe ff09 	bl	8000cf0 <main>
  bx  lr    
 8001ede:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ee0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee8:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001eec:	08008500 	.word	0x08008500
  ldr r2, =_sbss
 8001ef0:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001ef4:	200044d0 	.word	0x200044d0

08001ef8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef8:	e7fe      	b.n	8001ef8 <DMA1_Stream0_IRQHandler>
	...

08001efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f00:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <HAL_Init+0x40>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0d      	ldr	r2, [pc, #52]	@ (8001f3c <HAL_Init+0x40>)
 8001f06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f3c <HAL_Init+0x40>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0a      	ldr	r2, [pc, #40]	@ (8001f3c <HAL_Init+0x40>)
 8001f12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f18:	4b08      	ldr	r3, [pc, #32]	@ (8001f3c <HAL_Init+0x40>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a07      	ldr	r2, [pc, #28]	@ (8001f3c <HAL_Init+0x40>)
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f24:	2003      	movs	r0, #3
 8001f26:	f000 fe1c 	bl	8002b62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f2a:	200f      	movs	r0, #15
 8001f2c:	f7ff fea8 	bl	8001c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f30:	f7ff fd36 	bl	80019a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023c00 	.word	0x40023c00

08001f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f44:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_IncTick+0x20>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <HAL_IncTick+0x24>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4413      	add	r3, r2
 8001f50:	4a04      	ldr	r2, [pc, #16]	@ (8001f64 <HAL_IncTick+0x24>)
 8001f52:	6013      	str	r3, [r2, #0]
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	200000b8 	.word	0x200000b8
 8001f64:	20000630 	.word	0x20000630

08001f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f6c:	4b03      	ldr	r3, [pc, #12]	@ (8001f7c <HAL_GetTick+0x14>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	20000630 	.word	0x20000630

08001f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f88:	f7ff ffee 	bl	8001f68 <HAL_GetTick>
 8001f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f98:	d005      	beq.n	8001fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc4 <HAL_Delay+0x44>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fa6:	bf00      	nop
 8001fa8:	f7ff ffde 	bl	8001f68 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d8f7      	bhi.n	8001fa8 <HAL_Delay+0x28>
  {
  }
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200000b8 	.word	0x200000b8

08001fc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e033      	b.n	8002046 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d109      	bne.n	8001ffa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff fd06 	bl	80019f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	2b00      	cmp	r3, #0
 8002004:	d118      	bne.n	8002038 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800200e:	f023 0302 	bic.w	r3, r3, #2
 8002012:	f043 0202 	orr.w	r2, r3, #2
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fb6c 	bl	80026f8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	f023 0303 	bic.w	r3, r3, #3
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	641a      	str	r2, [r3, #64]	@ 0x40
 8002036:	e001      	b.n	800203c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002044:	7bfb      	ldrb	r3, [r7, #15]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b086      	sub	sp, #24
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f003 0320 	and.w	r3, r3, #32
 800207c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d049      	beq.n	8002118 <HAL_ADC_IRQHandler+0xca>
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d046      	beq.n	8002118 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b00      	cmp	r3, #0
 8002094:	d105      	bne.n	80020a2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d12b      	bne.n	8002108 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d127      	bne.n	8002108 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020be:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d006      	beq.n	80020d4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d119      	bne.n	8002108 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0220 	bic.w	r2, r2, #32
 80020e2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	f043 0201 	orr.w	r2, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7fe fdc9 	bl	8000ca0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f06f 0212 	mvn.w	r2, #18
 8002116:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002126:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d057      	beq.n	80021de <HAL_ADC_IRQHandler+0x190>
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d054      	beq.n	80021de <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	2b00      	cmp	r3, #0
 800213e:	d105      	bne.n	800214c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d139      	bne.n	80021ce <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002160:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002164:	2b00      	cmp	r3, #0
 8002166:	d006      	beq.n	8002176 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002172:	2b00      	cmp	r3, #0
 8002174:	d12b      	bne.n	80021ce <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002180:	2b00      	cmp	r3, #0
 8002182:	d124      	bne.n	80021ce <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800218e:	2b00      	cmp	r3, #0
 8002190:	d11d      	bne.n	80021ce <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002196:	2b00      	cmp	r3, #0
 8002198:	d119      	bne.n	80021ce <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021a8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d105      	bne.n	80021ce <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	f043 0201 	orr.w	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 fc10 	bl	80029f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 020c 	mvn.w	r2, #12
 80021dc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ec:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d017      	beq.n	8002224 <HAL_ADC_IRQHandler+0x1d6>
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d014      	beq.n	8002224 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b01      	cmp	r3, #1
 8002206:	d10d      	bne.n	8002224 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f929 	bl	800246c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f06f 0201 	mvn.w	r2, #1
 8002222:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0320 	and.w	r3, r3, #32
 800222a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002232:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d015      	beq.n	8002266 <HAL_ADC_IRQHandler+0x218>
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d012      	beq.n	8002266 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002244:	f043 0202 	orr.w	r2, r3, #2
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0220 	mvn.w	r2, #32
 8002254:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f912 	bl	8002480 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0220 	mvn.w	r2, #32
 8002264:	601a      	str	r2, [r3, #0]
  }
}
 8002266:	bf00      	nop
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_ADC_Start_DMA+0x22>
 800228e:	2302      	movs	r3, #2
 8002290:	e0d0      	b.n	8002434 <HAL_ADC_Start_DMA+0x1c4>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d018      	beq.n	80022da <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022b8:	4b60      	ldr	r3, [pc, #384]	@ (800243c <HAL_ADC_Start_DMA+0x1cc>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a60      	ldr	r2, [pc, #384]	@ (8002440 <HAL_ADC_Start_DMA+0x1d0>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	0c9a      	lsrs	r2, r3, #18
 80022c4:	4613      	mov	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80022cc:	e002      	b.n	80022d4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f9      	bne.n	80022ce <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022e8:	d107      	bne.n	80022fa <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022f8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	f040 8088 	bne.w	800241a <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002312:	f023 0301 	bic.w	r3, r3, #1
 8002316:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002328:	2b00      	cmp	r3, #0
 800232a:	d007      	beq.n	800233c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002330:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002334:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002344:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002348:	d106      	bne.n	8002358 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234e:	f023 0206 	bic.w	r2, r3, #6
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	645a      	str	r2, [r3, #68]	@ 0x44
 8002356:	e002      	b.n	800235e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002366:	4b37      	ldr	r3, [pc, #220]	@ (8002444 <HAL_ADC_Start_DMA+0x1d4>)
 8002368:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800236e:	4a36      	ldr	r2, [pc, #216]	@ (8002448 <HAL_ADC_Start_DMA+0x1d8>)
 8002370:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002376:	4a35      	ldr	r2, [pc, #212]	@ (800244c <HAL_ADC_Start_DMA+0x1dc>)
 8002378:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800237e:	4a34      	ldr	r2, [pc, #208]	@ (8002450 <HAL_ADC_Start_DMA+0x1e0>)
 8002380:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800238a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800239a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023aa:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	334c      	adds	r3, #76	@ 0x4c
 80023b6:	4619      	mov	r1, r3
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f000 fcb4 	bl	8002d28 <HAL_DMA_Start_IT>
 80023c0:	4603      	mov	r3, r0
 80023c2:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 031f 	and.w	r3, r3, #31
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10f      	bne.n	80023f0 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d129      	bne.n	8002432 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	e020      	b.n	8002432 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a17      	ldr	r2, [pc, #92]	@ (8002454 <HAL_ADC_Start_DMA+0x1e4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d11b      	bne.n	8002432 <HAL_ADC_Start_DMA+0x1c2>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d114      	bne.n	8002432 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	e00b      	b.n	8002432 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	f043 0210 	orr.w	r2, r3, #16
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242a:	f043 0201 	orr.w	r2, r3, #1
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002432:	7ffb      	ldrb	r3, [r7, #31]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3720      	adds	r7, #32
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	200000b0 	.word	0x200000b0
 8002440:	431bde83 	.word	0x431bde83
 8002444:	40012300 	.word	0x40012300
 8002448:	080028f1 	.word	0x080028f1
 800244c:	080029ab 	.word	0x080029ab
 8002450:	080029c7 	.word	0x080029c7
 8002454:	40012000 	.word	0x40012000

08002458 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x1c>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e113      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x244>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b09      	cmp	r3, #9
 80024be:	d925      	bls.n	800250c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68d9      	ldr	r1, [r3, #12]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	4613      	mov	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4413      	add	r3, r2
 80024d4:	3b1e      	subs	r3, #30
 80024d6:	2207      	movs	r2, #7
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43da      	mvns	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	400a      	ands	r2, r1
 80024e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68d9      	ldr	r1, [r3, #12]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	4603      	mov	r3, r0
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4403      	add	r3, r0
 80024fe:	3b1e      	subs	r3, #30
 8002500:	409a      	lsls	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	e022      	b.n	8002552 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6919      	ldr	r1, [r3, #16]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	2207      	movs	r2, #7
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	400a      	ands	r2, r1
 800252e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6919      	ldr	r1, [r3, #16]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	4618      	mov	r0, r3
 8002542:	4603      	mov	r3, r0
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4403      	add	r3, r0
 8002548:	409a      	lsls	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b06      	cmp	r3, #6
 8002558:	d824      	bhi.n	80025a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	3b05      	subs	r3, #5
 800256c:	221f      	movs	r2, #31
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	400a      	ands	r2, r1
 800257a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	b29b      	uxth	r3, r3
 8002588:	4618      	mov	r0, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	3b05      	subs	r3, #5
 8002596:	fa00 f203 	lsl.w	r2, r0, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80025a2:	e04c      	b.n	800263e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b0c      	cmp	r3, #12
 80025aa:	d824      	bhi.n	80025f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	3b23      	subs	r3, #35	@ 0x23
 80025be:	221f      	movs	r2, #31
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43da      	mvns	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	400a      	ands	r2, r1
 80025cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	4618      	mov	r0, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	3b23      	subs	r3, #35	@ 0x23
 80025e8:	fa00 f203 	lsl.w	r2, r0, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80025f4:	e023      	b.n	800263e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	3b41      	subs	r3, #65	@ 0x41
 8002608:	221f      	movs	r2, #31
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43da      	mvns	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	400a      	ands	r2, r1
 8002616:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	b29b      	uxth	r3, r3
 8002624:	4618      	mov	r0, r3
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	3b41      	subs	r3, #65	@ 0x41
 8002632:	fa00 f203 	lsl.w	r2, r0, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800263e:	4b29      	ldr	r3, [pc, #164]	@ (80026e4 <HAL_ADC_ConfigChannel+0x250>)
 8002640:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a28      	ldr	r2, [pc, #160]	@ (80026e8 <HAL_ADC_ConfigChannel+0x254>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d10f      	bne.n	800266c <HAL_ADC_ConfigChannel+0x1d8>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b12      	cmp	r3, #18
 8002652:	d10b      	bne.n	800266c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a1d      	ldr	r2, [pc, #116]	@ (80026e8 <HAL_ADC_ConfigChannel+0x254>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d12b      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x23a>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a1c      	ldr	r2, [pc, #112]	@ (80026ec <HAL_ADC_ConfigChannel+0x258>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d003      	beq.n	8002688 <HAL_ADC_ConfigChannel+0x1f4>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b11      	cmp	r3, #17
 8002686:	d122      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a11      	ldr	r2, [pc, #68]	@ (80026ec <HAL_ADC_ConfigChannel+0x258>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d111      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026aa:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <HAL_ADC_ConfigChannel+0x25c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a11      	ldr	r2, [pc, #68]	@ (80026f4 <HAL_ADC_ConfigChannel+0x260>)
 80026b0:	fba2 2303 	umull	r2, r3, r2, r3
 80026b4:	0c9a      	lsrs	r2, r3, #18
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026c0:	e002      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f9      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	40012300 	.word	0x40012300
 80026e8:	40012000 	.word	0x40012000
 80026ec:	10000012 	.word	0x10000012
 80026f0:	200000b0 	.word	0x200000b0
 80026f4:	431bde83 	.word	0x431bde83

080026f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002700:	4b79      	ldr	r3, [pc, #484]	@ (80028e8 <ADC_Init+0x1f0>)
 8002702:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	431a      	orrs	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800272c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6859      	ldr	r1, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	021a      	lsls	r2, r3, #8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002750:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6859      	ldr	r1, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002772:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6899      	ldr	r1, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278a:	4a58      	ldr	r2, [pc, #352]	@ (80028ec <ADC_Init+0x1f4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d022      	beq.n	80027d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800279e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6899      	ldr	r1, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6899      	ldr	r1, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	e00f      	b.n	80027f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027f4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0202 	bic.w	r2, r2, #2
 8002804:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6899      	ldr	r1, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	7e1b      	ldrb	r3, [r3, #24]
 8002810:	005a      	lsls	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d01b      	beq.n	800285c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002832:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002842:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6859      	ldr	r1, [r3, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284e:	3b01      	subs	r3, #1
 8002850:	035a      	lsls	r2, r3, #13
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	e007      	b.n	800286c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800286a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800287a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	3b01      	subs	r3, #1
 8002888:	051a      	lsls	r2, r3, #20
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6899      	ldr	r1, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028ae:	025a      	lsls	r2, r3, #9
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6899      	ldr	r1, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	029a      	lsls	r2, r3, #10
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	609a      	str	r2, [r3, #8]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	40012300 	.word	0x40012300
 80028ec:	0f000001 	.word	0x0f000001

080028f0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002906:	2b00      	cmp	r3, #0
 8002908:	d13c      	bne.n	8002984 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d12b      	bne.n	800297c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002928:	2b00      	cmp	r3, #0
 800292a:	d127      	bne.n	800297c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002932:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002936:	2b00      	cmp	r3, #0
 8002938:	d006      	beq.n	8002948 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002944:	2b00      	cmp	r3, #0
 8002946:	d119      	bne.n	800297c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0220 	bic.w	r2, r2, #32
 8002956:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d105      	bne.n	800297c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	f043 0201 	orr.w	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7fe f98f 	bl	8000ca0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002982:	e00e      	b.n	80029a2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	f003 0310 	and.w	r3, r3, #16
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f7ff fd75 	bl	8002480 <HAL_ADC_ErrorCallback>
}
 8002996:	e004      	b.n	80029a2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800299c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	4798      	blx	r3
}
 80029a2:	bf00      	nop
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b084      	sub	sp, #16
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f7ff fd4d 	bl	8002458 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b084      	sub	sp, #16
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2240      	movs	r2, #64	@ 0x40
 80029d8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029de:	f043 0204 	orr.w	r2, r3, #4
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f7ff fd4a 	bl	8002480 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029ec:	bf00      	nop
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a18:	4b0c      	ldr	r3, [pc, #48]	@ (8002a4c <__NVIC_SetPriorityGrouping+0x44>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a24:	4013      	ands	r3, r2
 8002a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a3a:	4a04      	ldr	r2, [pc, #16]	@ (8002a4c <__NVIC_SetPriorityGrouping+0x44>)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	60d3      	str	r3, [r2, #12]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a54:	4b04      	ldr	r3, [pc, #16]	@ (8002a68 <__NVIC_GetPriorityGrouping+0x18>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	0a1b      	lsrs	r3, r3, #8
 8002a5a:	f003 0307 	and.w	r3, r3, #7
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	db0b      	blt.n	8002a96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	f003 021f 	and.w	r2, r3, #31
 8002a84:	4907      	ldr	r1, [pc, #28]	@ (8002aa4 <__NVIC_EnableIRQ+0x38>)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	e000e100 	.word	0xe000e100

08002aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	6039      	str	r1, [r7, #0]
 8002ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	db0a      	blt.n	8002ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	490c      	ldr	r1, [pc, #48]	@ (8002af4 <__NVIC_SetPriority+0x4c>)
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	0112      	lsls	r2, r2, #4
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	440b      	add	r3, r1
 8002acc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad0:	e00a      	b.n	8002ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4908      	ldr	r1, [pc, #32]	@ (8002af8 <__NVIC_SetPriority+0x50>)
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	3b04      	subs	r3, #4
 8002ae0:	0112      	lsls	r2, r2, #4
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	761a      	strb	r2, [r3, #24]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000e100 	.word	0xe000e100
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	@ 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f1c3 0307 	rsb	r3, r3, #7
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	bf28      	it	cs
 8002b1a:	2304      	movcs	r3, #4
 8002b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3304      	adds	r3, #4
 8002b22:	2b06      	cmp	r3, #6
 8002b24:	d902      	bls.n	8002b2c <NVIC_EncodePriority+0x30>
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3b03      	subs	r3, #3
 8002b2a:	e000      	b.n	8002b2e <NVIC_EncodePriority+0x32>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	f04f 32ff 	mov.w	r2, #4294967295
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	401a      	ands	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b44:	f04f 31ff 	mov.w	r1, #4294967295
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4e:	43d9      	mvns	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	4313      	orrs	r3, r2
         );
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3724      	adds	r7, #36	@ 0x24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff ff4c 	bl	8002a08 <__NVIC_SetPriorityGrouping>
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b8a:	f7ff ff61 	bl	8002a50 <__NVIC_GetPriorityGrouping>
 8002b8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	6978      	ldr	r0, [r7, #20]
 8002b96:	f7ff ffb1 	bl	8002afc <NVIC_EncodePriority>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff ff80 	bl	8002aa8 <__NVIC_SetPriority>
}
 8002ba8:	bf00      	nop
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff54 	bl	8002a6c <__NVIC_EnableIRQ>
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bd8:	f7ff f9c6 	bl	8001f68 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e099      	b.n	8002d1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0201 	bic.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c08:	e00f      	b.n	8002c2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c0a:	f7ff f9ad 	bl	8001f68 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	d908      	bls.n	8002c2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2203      	movs	r2, #3
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e078      	b.n	8002d1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1e8      	bne.n	8002c0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4b38      	ldr	r3, [pc, #224]	@ (8002d24 <HAL_DMA_Init+0x158>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d107      	bne.n	8002c94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f023 0307 	bic.w	r3, r3, #7
 8002caa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d117      	bne.n	8002cee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00e      	beq.n	8002cee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 fa6f 	bl	80031b4 <DMA_CheckFifoParam>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2240      	movs	r2, #64	@ 0x40
 8002ce0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002cea:	2301      	movs	r3, #1
 8002cec:	e016      	b.n	8002d1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fa26 	bl	8003148 <DMA_CalcBaseAndBitshift>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d04:	223f      	movs	r2, #63	@ 0x3f
 8002d06:	409a      	lsls	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	f010803f 	.word	0xf010803f

08002d28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_DMA_Start_IT+0x26>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e040      	b.n	8002dd0 <HAL_DMA_Start_IT+0xa8>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d12f      	bne.n	8002dc2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2202      	movs	r2, #2
 8002d66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	68b9      	ldr	r1, [r7, #8]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f9b8 	bl	80030ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d80:	223f      	movs	r2, #63	@ 0x3f
 8002d82:	409a      	lsls	r2, r3
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0216 	orr.w	r2, r2, #22
 8002d96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d007      	beq.n	8002db0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0208 	orr.w	r2, r2, #8
 8002dae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	e005      	b.n	8002dce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002de4:	4b8e      	ldr	r3, [pc, #568]	@ (8003020 <HAL_DMA_IRQHandler+0x248>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a8e      	ldr	r2, [pc, #568]	@ (8003024 <HAL_DMA_IRQHandler+0x24c>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	0a9b      	lsrs	r3, r3, #10
 8002df0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e02:	2208      	movs	r2, #8
 8002e04:	409a      	lsls	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d01a      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d013      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0204 	bic.w	r2, r2, #4
 8002e2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e30:	2208      	movs	r2, #8
 8002e32:	409a      	lsls	r2, r3
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3c:	f043 0201 	orr.w	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e48:	2201      	movs	r2, #1
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d012      	beq.n	8002e7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00b      	beq.n	8002e7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e66:	2201      	movs	r2, #1
 8002e68:	409a      	lsls	r2, r3
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e72:	f043 0202 	orr.w	r2, r3, #2
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7e:	2204      	movs	r2, #4
 8002e80:	409a      	lsls	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d012      	beq.n	8002eb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00b      	beq.n	8002eb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9c:	2204      	movs	r2, #4
 8002e9e:	409a      	lsls	r2, r3
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea8:	f043 0204 	orr.w	r2, r3, #4
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb4:	2210      	movs	r2, #16
 8002eb6:	409a      	lsls	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d043      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d03c      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed2:	2210      	movs	r2, #16
 8002ed4:	409a      	lsls	r2, r3
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d018      	beq.n	8002f1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d108      	bne.n	8002f08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d024      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	4798      	blx	r3
 8002f06:	e01f      	b.n	8002f48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d01b      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
 8002f18:	e016      	b.n	8002f48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d107      	bne.n	8002f38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0208 	bic.w	r2, r2, #8
 8002f36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 808f 	beq.w	8003078 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 8087 	beq.w	8003078 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6e:	2220      	movs	r2, #32
 8002f70:	409a      	lsls	r2, r3
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b05      	cmp	r3, #5
 8002f80:	d136      	bne.n	8002ff0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0216 	bic.w	r2, r2, #22
 8002f90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fa0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d103      	bne.n	8002fb2 <HAL_DMA_IRQHandler+0x1da>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d007      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0208 	bic.w	r2, r2, #8
 8002fc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc6:	223f      	movs	r2, #63	@ 0x3f
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d07e      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	4798      	blx	r3
        }
        return;
 8002fee:	e079      	b.n	80030e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d01d      	beq.n	800303a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10d      	bne.n	8003028 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003010:	2b00      	cmp	r3, #0
 8003012:	d031      	beq.n	8003078 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	4798      	blx	r3
 800301c:	e02c      	b.n	8003078 <HAL_DMA_IRQHandler+0x2a0>
 800301e:	bf00      	nop
 8003020:	200000b0 	.word	0x200000b0
 8003024:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302c:	2b00      	cmp	r3, #0
 800302e:	d023      	beq.n	8003078 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
 8003038:	e01e      	b.n	8003078 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10f      	bne.n	8003068 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0210 	bic.w	r2, r2, #16
 8003056:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307c:	2b00      	cmp	r3, #0
 800307e:	d032      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d022      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2205      	movs	r2, #5
 8003090:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0201 	bic.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	3301      	adds	r3, #1
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d307      	bcc.n	80030c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f2      	bne.n	80030a4 <HAL_DMA_IRQHandler+0x2cc>
 80030be:	e000      	b.n	80030c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d005      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	4798      	blx	r3
 80030e2:	e000      	b.n	80030e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80030e4:	bf00      	nop
    }
  }
}
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003108:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b40      	cmp	r3, #64	@ 0x40
 8003118:	d108      	bne.n	800312c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800312a:	e007      	b.n	800313c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	60da      	str	r2, [r3, #12]
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	3b10      	subs	r3, #16
 8003158:	4a14      	ldr	r2, [pc, #80]	@ (80031ac <DMA_CalcBaseAndBitshift+0x64>)
 800315a:	fba2 2303 	umull	r2, r3, r2, r3
 800315e:	091b      	lsrs	r3, r3, #4
 8003160:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003162:	4a13      	ldr	r2, [pc, #76]	@ (80031b0 <DMA_CalcBaseAndBitshift+0x68>)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4413      	add	r3, r2
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b03      	cmp	r3, #3
 8003174:	d909      	bls.n	800318a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800317e:	f023 0303 	bic.w	r3, r3, #3
 8003182:	1d1a      	adds	r2, r3, #4
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	659a      	str	r2, [r3, #88]	@ 0x58
 8003188:	e007      	b.n	800319a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003192:	f023 0303 	bic.w	r3, r3, #3
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	aaaaaaab 	.word	0xaaaaaaab
 80031b0:	080084b4 	.word	0x080084b4

080031b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d11f      	bne.n	800320e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d856      	bhi.n	8003282 <DMA_CheckFifoParam+0xce>
 80031d4:	a201      	add	r2, pc, #4	@ (adr r2, 80031dc <DMA_CheckFifoParam+0x28>)
 80031d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031da:	bf00      	nop
 80031dc:	080031ed 	.word	0x080031ed
 80031e0:	080031ff 	.word	0x080031ff
 80031e4:	080031ed 	.word	0x080031ed
 80031e8:	08003283 	.word	0x08003283
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d046      	beq.n	8003286 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031fc:	e043      	b.n	8003286 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003202:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003206:	d140      	bne.n	800328a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800320c:	e03d      	b.n	800328a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003216:	d121      	bne.n	800325c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b03      	cmp	r3, #3
 800321c:	d837      	bhi.n	800328e <DMA_CheckFifoParam+0xda>
 800321e:	a201      	add	r2, pc, #4	@ (adr r2, 8003224 <DMA_CheckFifoParam+0x70>)
 8003220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003224:	08003235 	.word	0x08003235
 8003228:	0800323b 	.word	0x0800323b
 800322c:	08003235 	.word	0x08003235
 8003230:	0800324d 	.word	0x0800324d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
      break;
 8003238:	e030      	b.n	800329c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d025      	beq.n	8003292 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800324a:	e022      	b.n	8003292 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003250:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003254:	d11f      	bne.n	8003296 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800325a:	e01c      	b.n	8003296 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d903      	bls.n	800326a <DMA_CheckFifoParam+0xb6>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b03      	cmp	r3, #3
 8003266:	d003      	beq.n	8003270 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003268:	e018      	b.n	800329c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]
      break;
 800326e:	e015      	b.n	800329c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003274:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00e      	beq.n	800329a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
      break;
 8003280:	e00b      	b.n	800329a <DMA_CheckFifoParam+0xe6>
      break;
 8003282:	bf00      	nop
 8003284:	e00a      	b.n	800329c <DMA_CheckFifoParam+0xe8>
      break;
 8003286:	bf00      	nop
 8003288:	e008      	b.n	800329c <DMA_CheckFifoParam+0xe8>
      break;
 800328a:	bf00      	nop
 800328c:	e006      	b.n	800329c <DMA_CheckFifoParam+0xe8>
      break;
 800328e:	bf00      	nop
 8003290:	e004      	b.n	800329c <DMA_CheckFifoParam+0xe8>
      break;
 8003292:	bf00      	nop
 8003294:	e002      	b.n	800329c <DMA_CheckFifoParam+0xe8>
      break;   
 8003296:	bf00      	nop
 8003298:	e000      	b.n	800329c <DMA_CheckFifoParam+0xe8>
      break;
 800329a:	bf00      	nop
    }
  } 
  
  return status; 
 800329c:	7bfb      	ldrb	r3, [r7, #15]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop

080032ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b089      	sub	sp, #36	@ 0x24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032be:	2300      	movs	r3, #0
 80032c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032c2:	2300      	movs	r3, #0
 80032c4:	61fb      	str	r3, [r7, #28]
 80032c6:	e159      	b.n	800357c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032c8:	2201      	movs	r2, #1
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4013      	ands	r3, r2
 80032da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	f040 8148 	bne.w	8003576 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d005      	beq.n	80032fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d130      	bne.n	8003360 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	2203      	movs	r2, #3
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43db      	mvns	r3, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4313      	orrs	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003334:	2201      	movs	r2, #1
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	091b      	lsrs	r3, r3, #4
 800334a:	f003 0201 	and.w	r2, r3, #1
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	2b03      	cmp	r3, #3
 800336a:	d017      	beq.n	800339c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	2203      	movs	r2, #3
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d123      	bne.n	80033f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	08da      	lsrs	r2, r3, #3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3208      	adds	r2, #8
 80033b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	220f      	movs	r2, #15
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	08da      	lsrs	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3208      	adds	r2, #8
 80033ea:	69b9      	ldr	r1, [r7, #24]
 80033ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	2203      	movs	r2, #3
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f003 0203 	and.w	r2, r3, #3
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80a2 	beq.w	8003576 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	4b57      	ldr	r3, [pc, #348]	@ (8003594 <HAL_GPIO_Init+0x2e8>)
 8003438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343a:	4a56      	ldr	r2, [pc, #344]	@ (8003594 <HAL_GPIO_Init+0x2e8>)
 800343c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003440:	6453      	str	r3, [r2, #68]	@ 0x44
 8003442:	4b54      	ldr	r3, [pc, #336]	@ (8003594 <HAL_GPIO_Init+0x2e8>)
 8003444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800344e:	4a52      	ldr	r2, [pc, #328]	@ (8003598 <HAL_GPIO_Init+0x2ec>)
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	089b      	lsrs	r3, r3, #2
 8003454:	3302      	adds	r3, #2
 8003456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800345a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	220f      	movs	r2, #15
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a49      	ldr	r2, [pc, #292]	@ (800359c <HAL_GPIO_Init+0x2f0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d019      	beq.n	80034ae <HAL_GPIO_Init+0x202>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a48      	ldr	r2, [pc, #288]	@ (80035a0 <HAL_GPIO_Init+0x2f4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d013      	beq.n	80034aa <HAL_GPIO_Init+0x1fe>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a47      	ldr	r2, [pc, #284]	@ (80035a4 <HAL_GPIO_Init+0x2f8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d00d      	beq.n	80034a6 <HAL_GPIO_Init+0x1fa>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a46      	ldr	r2, [pc, #280]	@ (80035a8 <HAL_GPIO_Init+0x2fc>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d007      	beq.n	80034a2 <HAL_GPIO_Init+0x1f6>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a45      	ldr	r2, [pc, #276]	@ (80035ac <HAL_GPIO_Init+0x300>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d101      	bne.n	800349e <HAL_GPIO_Init+0x1f2>
 800349a:	2304      	movs	r3, #4
 800349c:	e008      	b.n	80034b0 <HAL_GPIO_Init+0x204>
 800349e:	2307      	movs	r3, #7
 80034a0:	e006      	b.n	80034b0 <HAL_GPIO_Init+0x204>
 80034a2:	2303      	movs	r3, #3
 80034a4:	e004      	b.n	80034b0 <HAL_GPIO_Init+0x204>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e002      	b.n	80034b0 <HAL_GPIO_Init+0x204>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <HAL_GPIO_Init+0x204>
 80034ae:	2300      	movs	r3, #0
 80034b0:	69fa      	ldr	r2, [r7, #28]
 80034b2:	f002 0203 	and.w	r2, r2, #3
 80034b6:	0092      	lsls	r2, r2, #2
 80034b8:	4093      	lsls	r3, r2
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4313      	orrs	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034c0:	4935      	ldr	r1, [pc, #212]	@ (8003598 <HAL_GPIO_Init+0x2ec>)
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	089b      	lsrs	r3, r3, #2
 80034c6:	3302      	adds	r3, #2
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ce:	4b38      	ldr	r3, [pc, #224]	@ (80035b0 <HAL_GPIO_Init+0x304>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	43db      	mvns	r3, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4013      	ands	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034f2:	4a2f      	ldr	r2, [pc, #188]	@ (80035b0 <HAL_GPIO_Init+0x304>)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034f8:	4b2d      	ldr	r3, [pc, #180]	@ (80035b0 <HAL_GPIO_Init+0x304>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	43db      	mvns	r3, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4013      	ands	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800351c:	4a24      	ldr	r2, [pc, #144]	@ (80035b0 <HAL_GPIO_Init+0x304>)
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003522:	4b23      	ldr	r3, [pc, #140]	@ (80035b0 <HAL_GPIO_Init+0x304>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	43db      	mvns	r3, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003546:	4a1a      	ldr	r2, [pc, #104]	@ (80035b0 <HAL_GPIO_Init+0x304>)
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800354c:	4b18      	ldr	r3, [pc, #96]	@ (80035b0 <HAL_GPIO_Init+0x304>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003570:	4a0f      	ldr	r2, [pc, #60]	@ (80035b0 <HAL_GPIO_Init+0x304>)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3301      	adds	r3, #1
 800357a:	61fb      	str	r3, [r7, #28]
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	2b0f      	cmp	r3, #15
 8003580:	f67f aea2 	bls.w	80032c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003584:	bf00      	nop
 8003586:	bf00      	nop
 8003588:	3724      	adds	r7, #36	@ 0x24
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40023800 	.word	0x40023800
 8003598:	40013800 	.word	0x40013800
 800359c:	40020000 	.word	0x40020000
 80035a0:	40020400 	.word	0x40020400
 80035a4:	40020800 	.word	0x40020800
 80035a8:	40020c00 	.word	0x40020c00
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40013c00 	.word	0x40013c00

080035b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	887b      	ldrh	r3, [r7, #2]
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035cc:	2301      	movs	r3, #1
 80035ce:	73fb      	strb	r3, [r7, #15]
 80035d0:	e001      	b.n	80035d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035d2:	2300      	movs	r3, #0
 80035d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	807b      	strh	r3, [r7, #2]
 80035f0:	4613      	mov	r3, r2
 80035f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035f4:	787b      	ldrb	r3, [r7, #1]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035fa:	887a      	ldrh	r2, [r7, #2]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003600:	e003      	b.n	800360a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003602:	887b      	ldrh	r3, [r7, #2]
 8003604:	041a      	lsls	r2, r3, #16
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	619a      	str	r2, [r3, #24]
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003622:	4b08      	ldr	r3, [pc, #32]	@ (8003644 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003624:	695a      	ldr	r2, [r3, #20]
 8003626:	88fb      	ldrh	r3, [r7, #6]
 8003628:	4013      	ands	r3, r2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d006      	beq.n	800363c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800362e:	4a05      	ldr	r2, [pc, #20]	@ (8003644 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003630:	88fb      	ldrh	r3, [r7, #6]
 8003632:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fd fada 	bl	8000bf0 <HAL_GPIO_EXTI_Callback>
  }
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40013c00 	.word	0x40013c00

08003648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e12b      	b.n	80038b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fe fa40 	bl	8001af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2224      	movs	r2, #36	@ 0x24
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0201 	bic.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800369a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036ac:	f001 f89a 	bl	80047e4 <HAL_RCC_GetPCLK1Freq>
 80036b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	4a81      	ldr	r2, [pc, #516]	@ (80038bc <HAL_I2C_Init+0x274>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d807      	bhi.n	80036cc <HAL_I2C_Init+0x84>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4a80      	ldr	r2, [pc, #512]	@ (80038c0 <HAL_I2C_Init+0x278>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	bf94      	ite	ls
 80036c4:	2301      	movls	r3, #1
 80036c6:	2300      	movhi	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e006      	b.n	80036da <HAL_I2C_Init+0x92>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4a7d      	ldr	r2, [pc, #500]	@ (80038c4 <HAL_I2C_Init+0x27c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	bf94      	ite	ls
 80036d4:	2301      	movls	r3, #1
 80036d6:	2300      	movhi	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e0e7      	b.n	80038b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4a78      	ldr	r2, [pc, #480]	@ (80038c8 <HAL_I2C_Init+0x280>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	0c9b      	lsrs	r3, r3, #18
 80036ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4a6a      	ldr	r2, [pc, #424]	@ (80038bc <HAL_I2C_Init+0x274>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d802      	bhi.n	800371c <HAL_I2C_Init+0xd4>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	3301      	adds	r3, #1
 800371a:	e009      	b.n	8003730 <HAL_I2C_Init+0xe8>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003722:	fb02 f303 	mul.w	r3, r2, r3
 8003726:	4a69      	ldr	r2, [pc, #420]	@ (80038cc <HAL_I2C_Init+0x284>)
 8003728:	fba2 2303 	umull	r2, r3, r2, r3
 800372c:	099b      	lsrs	r3, r3, #6
 800372e:	3301      	adds	r3, #1
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	430b      	orrs	r3, r1
 8003736:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003742:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	495c      	ldr	r1, [pc, #368]	@ (80038bc <HAL_I2C_Init+0x274>)
 800374c:	428b      	cmp	r3, r1
 800374e:	d819      	bhi.n	8003784 <HAL_I2C_Init+0x13c>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	1e59      	subs	r1, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	fbb1 f3f3 	udiv	r3, r1, r3
 800375e:	1c59      	adds	r1, r3, #1
 8003760:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003764:	400b      	ands	r3, r1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <HAL_I2C_Init+0x138>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1e59      	subs	r1, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	fbb1 f3f3 	udiv	r3, r1, r3
 8003778:	3301      	adds	r3, #1
 800377a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377e:	e051      	b.n	8003824 <HAL_I2C_Init+0x1dc>
 8003780:	2304      	movs	r3, #4
 8003782:	e04f      	b.n	8003824 <HAL_I2C_Init+0x1dc>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d111      	bne.n	80037b0 <HAL_I2C_Init+0x168>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1e58      	subs	r0, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6859      	ldr	r1, [r3, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	440b      	add	r3, r1
 800379a:	fbb0 f3f3 	udiv	r3, r0, r3
 800379e:	3301      	adds	r3, #1
 80037a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	bf0c      	ite	eq
 80037a8:	2301      	moveq	r3, #1
 80037aa:	2300      	movne	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	e012      	b.n	80037d6 <HAL_I2C_Init+0x18e>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1e58      	subs	r0, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	0099      	lsls	r1, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c6:	3301      	adds	r3, #1
 80037c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf0c      	ite	eq
 80037d0:	2301      	moveq	r3, #1
 80037d2:	2300      	movne	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Init+0x196>
 80037da:	2301      	movs	r3, #1
 80037dc:	e022      	b.n	8003824 <HAL_I2C_Init+0x1dc>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10e      	bne.n	8003804 <HAL_I2C_Init+0x1bc>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1e58      	subs	r0, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6859      	ldr	r1, [r3, #4]
 80037ee:	460b      	mov	r3, r1
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	440b      	add	r3, r1
 80037f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f8:	3301      	adds	r3, #1
 80037fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003802:	e00f      	b.n	8003824 <HAL_I2C_Init+0x1dc>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1e58      	subs	r0, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6859      	ldr	r1, [r3, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	0099      	lsls	r1, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	fbb0 f3f3 	udiv	r3, r0, r3
 800381a:	3301      	adds	r3, #1
 800381c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003820:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	6809      	ldr	r1, [r1, #0]
 8003828:	4313      	orrs	r3, r2
 800382a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69da      	ldr	r2, [r3, #28]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003852:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6911      	ldr	r1, [r2, #16]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68d2      	ldr	r2, [r2, #12]
 800385e:	4311      	orrs	r1, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	430b      	orrs	r3, r1
 8003866:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	000186a0 	.word	0x000186a0
 80038c0:	001e847f 	.word	0x001e847f
 80038c4:	003d08ff 	.word	0x003d08ff
 80038c8:	431bde83 	.word	0x431bde83
 80038cc:	10624dd3 	.word	0x10624dd3

080038d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	461a      	mov	r2, r3
 80038dc:	460b      	mov	r3, r1
 80038de:	817b      	strh	r3, [r7, #10]
 80038e0:	4613      	mov	r3, r2
 80038e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038e4:	f7fe fb40 	bl	8001f68 <HAL_GetTick>
 80038e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	f040 80e0 	bne.w	8003ab8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	2319      	movs	r3, #25
 80038fe:	2201      	movs	r2, #1
 8003900:	4970      	ldr	r1, [pc, #448]	@ (8003ac4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f964 	bl	8003bd0 <I2C_WaitOnFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800390e:	2302      	movs	r3, #2
 8003910:	e0d3      	b.n	8003aba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_I2C_Master_Transmit+0x50>
 800391c:	2302      	movs	r3, #2
 800391e:	e0cc      	b.n	8003aba <HAL_I2C_Master_Transmit+0x1ea>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b01      	cmp	r3, #1
 8003934:	d007      	beq.n	8003946 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0201 	orr.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003954:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2221      	movs	r2, #33	@ 0x21
 800395a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2210      	movs	r2, #16
 8003962:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	893a      	ldrh	r2, [r7, #8]
 8003976:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4a50      	ldr	r2, [pc, #320]	@ (8003ac8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003986:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003988:	8979      	ldrh	r1, [r7, #10]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	6a3a      	ldr	r2, [r7, #32]
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 f89c 	bl	8003acc <I2C_MasterRequestWrite>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e08d      	b.n	8003aba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80039b4:	e066      	b.n	8003a84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	6a39      	ldr	r1, [r7, #32]
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fa22 	bl	8003e04 <I2C_WaitOnTXEFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00d      	beq.n	80039e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d107      	bne.n	80039de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e06b      	b.n	8003aba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e6:	781a      	ldrb	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d11b      	bne.n	8003a58 <HAL_I2C_Master_Transmit+0x188>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d017      	beq.n	8003a58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	781a      	ldrb	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	6a39      	ldr	r1, [r7, #32]
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 fa19 	bl	8003e94 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00d      	beq.n	8003a84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d107      	bne.n	8003a80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e01a      	b.n	8003aba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d194      	bne.n	80039b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e000      	b.n	8003aba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ab8:	2302      	movs	r3, #2
  }
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	00100002 	.word	0x00100002
 8003ac8:	ffff0000 	.word	0xffff0000

08003acc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d006      	beq.n	8003af6 <I2C_MasterRequestWrite+0x2a>
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d003      	beq.n	8003af6 <I2C_MasterRequestWrite+0x2a>
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003af4:	d108      	bne.n	8003b08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	e00b      	b.n	8003b20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0c:	2b12      	cmp	r3, #18
 8003b0e:	d107      	bne.n	8003b20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f84f 	bl	8003bd0 <I2C_WaitOnFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00d      	beq.n	8003b54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b46:	d103      	bne.n	8003b50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e035      	b.n	8003bc0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b5c:	d108      	bne.n	8003b70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b5e:	897b      	ldrh	r3, [r7, #10]
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b6c:	611a      	str	r2, [r3, #16]
 8003b6e:	e01b      	b.n	8003ba8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b70:	897b      	ldrh	r3, [r7, #10]
 8003b72:	11db      	asrs	r3, r3, #7
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	f003 0306 	and.w	r3, r3, #6
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	f063 030f 	orn	r3, r3, #15
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	490e      	ldr	r1, [pc, #56]	@ (8003bc8 <I2C_MasterRequestWrite+0xfc>)
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 f898 	bl	8003cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e010      	b.n	8003bc0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b9e:	897b      	ldrh	r3, [r7, #10]
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	4907      	ldr	r1, [pc, #28]	@ (8003bcc <I2C_MasterRequestWrite+0x100>)
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 f888 	bl	8003cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	00010008 	.word	0x00010008
 8003bcc:	00010002 	.word	0x00010002

08003bd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003be0:	e048      	b.n	8003c74 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d044      	beq.n	8003c74 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bea:	f7fe f9bd 	bl	8001f68 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d302      	bcc.n	8003c00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d139      	bne.n	8003c74 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	0c1b      	lsrs	r3, r3, #16
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d10d      	bne.n	8003c26 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	43da      	mvns	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	4013      	ands	r3, r2
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf0c      	ite	eq
 8003c1c:	2301      	moveq	r3, #1
 8003c1e:	2300      	movne	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	e00c      	b.n	8003c40 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	43da      	mvns	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4013      	ands	r3, r2
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	461a      	mov	r2, r3
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d116      	bne.n	8003c74 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c60:	f043 0220 	orr.w	r2, r3, #32
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e023      	b.n	8003cbc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	0c1b      	lsrs	r3, r3, #16
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d10d      	bne.n	8003c9a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	43da      	mvns	r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	bf0c      	ite	eq
 8003c90:	2301      	moveq	r3, #1
 8003c92:	2300      	movne	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	e00c      	b.n	8003cb4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	43da      	mvns	r2, r3
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	bf0c      	ite	eq
 8003cac:	2301      	moveq	r3, #1
 8003cae:	2300      	movne	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	79fb      	ldrb	r3, [r7, #7]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d093      	beq.n	8003be2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cd2:	e071      	b.n	8003db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ce2:	d123      	bne.n	8003d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cf2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d18:	f043 0204 	orr.w	r2, r3, #4
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e067      	b.n	8003dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d32:	d041      	beq.n	8003db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d34:	f7fe f918 	bl	8001f68 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d302      	bcc.n	8003d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d136      	bne.n	8003db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	0c1b      	lsrs	r3, r3, #16
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d10c      	bne.n	8003d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bf14      	ite	ne
 8003d66:	2301      	movne	r3, #1
 8003d68:	2300      	moveq	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	e00b      	b.n	8003d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	43da      	mvns	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	bf14      	ite	ne
 8003d80:	2301      	movne	r3, #1
 8003d82:	2300      	moveq	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d016      	beq.n	8003db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	f043 0220 	orr.w	r2, r3, #32
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e021      	b.n	8003dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	0c1b      	lsrs	r3, r3, #16
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d10c      	bne.n	8003ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	43da      	mvns	r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	bf14      	ite	ne
 8003dd4:	2301      	movne	r3, #1
 8003dd6:	2300      	moveq	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	e00b      	b.n	8003df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	43da      	mvns	r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4013      	ands	r3, r2
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bf14      	ite	ne
 8003dee:	2301      	movne	r3, #1
 8003df0:	2300      	moveq	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f47f af6d 	bne.w	8003cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e10:	e034      	b.n	8003e7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f886 	bl	8003f24 <I2C_IsAcknowledgeFailed>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e034      	b.n	8003e8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e28:	d028      	beq.n	8003e7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2a:	f7fe f89d 	bl	8001f68 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d302      	bcc.n	8003e40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d11d      	bne.n	8003e7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e4a:	2b80      	cmp	r3, #128	@ 0x80
 8003e4c:	d016      	beq.n	8003e7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e68:	f043 0220 	orr.w	r2, r3, #32
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e007      	b.n	8003e8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e86:	2b80      	cmp	r3, #128	@ 0x80
 8003e88:	d1c3      	bne.n	8003e12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ea0:	e034      	b.n	8003f0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f83e 	bl	8003f24 <I2C_IsAcknowledgeFailed>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e034      	b.n	8003f1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb8:	d028      	beq.n	8003f0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eba:	f7fe f855 	bl	8001f68 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d302      	bcc.n	8003ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d11d      	bne.n	8003f0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d016      	beq.n	8003f0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	f043 0220 	orr.w	r2, r3, #32
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e007      	b.n	8003f1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d1c3      	bne.n	8003ea2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f3a:	d11b      	bne.n	8003f74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f60:	f043 0204 	orr.w	r2, r3, #4
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e267      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d075      	beq.n	800408e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003fa2:	4b88      	ldr	r3, [pc, #544]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 030c 	and.w	r3, r3, #12
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d00c      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fae:	4b85      	ldr	r3, [pc, #532]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d112      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fba:	4b82      	ldr	r3, [pc, #520]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fc6:	d10b      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc8:	4b7e      	ldr	r3, [pc, #504]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d05b      	beq.n	800408c <HAL_RCC_OscConfig+0x108>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d157      	bne.n	800408c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e242      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fe8:	d106      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x74>
 8003fea:	4b76      	ldr	r3, [pc, #472]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a75      	ldr	r2, [pc, #468]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	e01d      	b.n	8004034 <HAL_RCC_OscConfig+0xb0>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004000:	d10c      	bne.n	800401c <HAL_RCC_OscConfig+0x98>
 8004002:	4b70      	ldr	r3, [pc, #448]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a6f      	ldr	r2, [pc, #444]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	4b6d      	ldr	r3, [pc, #436]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a6c      	ldr	r2, [pc, #432]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	e00b      	b.n	8004034 <HAL_RCC_OscConfig+0xb0>
 800401c:	4b69      	ldr	r3, [pc, #420]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a68      	ldr	r2, [pc, #416]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	4b66      	ldr	r3, [pc, #408]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a65      	ldr	r2, [pc, #404]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 800402e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d013      	beq.n	8004064 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403c:	f7fd ff94 	bl	8001f68 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004044:	f7fd ff90 	bl	8001f68 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	@ 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e207      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004056:	4b5b      	ldr	r3, [pc, #364]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0xc0>
 8004062:	e014      	b.n	800408e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004064:	f7fd ff80 	bl	8001f68 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800406c:	f7fd ff7c 	bl	8001f68 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b64      	cmp	r3, #100	@ 0x64
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e1f3      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407e:	4b51      	ldr	r3, [pc, #324]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0xe8>
 800408a:	e000      	b.n	800408e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800408c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d063      	beq.n	8004162 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800409a:	4b4a      	ldr	r3, [pc, #296]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a6:	4b47      	ldr	r3, [pc, #284]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d11c      	bne.n	80040ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040b2:	4b44      	ldr	r3, [pc, #272]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d116      	bne.n	80040ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040be:	4b41      	ldr	r3, [pc, #260]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_RCC_OscConfig+0x152>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d001      	beq.n	80040d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e1c7      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d6:	4b3b      	ldr	r3, [pc, #236]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4937      	ldr	r1, [pc, #220]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ea:	e03a      	b.n	8004162 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d020      	beq.n	8004136 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f4:	4b34      	ldr	r3, [pc, #208]	@ (80041c8 <HAL_RCC_OscConfig+0x244>)
 80040f6:	2201      	movs	r2, #1
 80040f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fa:	f7fd ff35 	bl	8001f68 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004102:	f7fd ff31 	bl	8001f68 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e1a8      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004114:	4b2b      	ldr	r3, [pc, #172]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004120:	4b28      	ldr	r3, [pc, #160]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4925      	ldr	r1, [pc, #148]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004130:	4313      	orrs	r3, r2
 8004132:	600b      	str	r3, [r1, #0]
 8004134:	e015      	b.n	8004162 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004136:	4b24      	ldr	r3, [pc, #144]	@ (80041c8 <HAL_RCC_OscConfig+0x244>)
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413c:	f7fd ff14 	bl	8001f68 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004144:	f7fd ff10 	bl	8001f68 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e187      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004156:	4b1b      	ldr	r3, [pc, #108]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d036      	beq.n	80041dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d016      	beq.n	80041a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004176:	4b15      	ldr	r3, [pc, #84]	@ (80041cc <HAL_RCC_OscConfig+0x248>)
 8004178:	2201      	movs	r2, #1
 800417a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fd fef4 	bl	8001f68 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004184:	f7fd fef0 	bl	8001f68 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e167      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004196:	4b0b      	ldr	r3, [pc, #44]	@ (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0f0      	beq.n	8004184 <HAL_RCC_OscConfig+0x200>
 80041a2:	e01b      	b.n	80041dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a4:	4b09      	ldr	r3, [pc, #36]	@ (80041cc <HAL_RCC_OscConfig+0x248>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041aa:	f7fd fedd 	bl	8001f68 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b0:	e00e      	b.n	80041d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041b2:	f7fd fed9 	bl	8001f68 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d907      	bls.n	80041d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e150      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
 80041c4:	40023800 	.word	0x40023800
 80041c8:	42470000 	.word	0x42470000
 80041cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d0:	4b88      	ldr	r3, [pc, #544]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 80041d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1ea      	bne.n	80041b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 8097 	beq.w	8004318 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ea:	2300      	movs	r3, #0
 80041ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ee:	4b81      	ldr	r3, [pc, #516]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10f      	bne.n	800421a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	4b7d      	ldr	r3, [pc, #500]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	4a7c      	ldr	r2, [pc, #496]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004208:	6413      	str	r3, [r2, #64]	@ 0x40
 800420a:	4b7a      	ldr	r3, [pc, #488]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004212:	60bb      	str	r3, [r7, #8]
 8004214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004216:	2301      	movs	r3, #1
 8004218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421a:	4b77      	ldr	r3, [pc, #476]	@ (80043f8 <HAL_RCC_OscConfig+0x474>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004222:	2b00      	cmp	r3, #0
 8004224:	d118      	bne.n	8004258 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004226:	4b74      	ldr	r3, [pc, #464]	@ (80043f8 <HAL_RCC_OscConfig+0x474>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a73      	ldr	r2, [pc, #460]	@ (80043f8 <HAL_RCC_OscConfig+0x474>)
 800422c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004232:	f7fd fe99 	bl	8001f68 <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423a:	f7fd fe95 	bl	8001f68 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e10c      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424c:	4b6a      	ldr	r3, [pc, #424]	@ (80043f8 <HAL_RCC_OscConfig+0x474>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0f0      	beq.n	800423a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d106      	bne.n	800426e <HAL_RCC_OscConfig+0x2ea>
 8004260:	4b64      	ldr	r3, [pc, #400]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004264:	4a63      	ldr	r2, [pc, #396]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004266:	f043 0301 	orr.w	r3, r3, #1
 800426a:	6713      	str	r3, [r2, #112]	@ 0x70
 800426c:	e01c      	b.n	80042a8 <HAL_RCC_OscConfig+0x324>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b05      	cmp	r3, #5
 8004274:	d10c      	bne.n	8004290 <HAL_RCC_OscConfig+0x30c>
 8004276:	4b5f      	ldr	r3, [pc, #380]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800427a:	4a5e      	ldr	r2, [pc, #376]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 800427c:	f043 0304 	orr.w	r3, r3, #4
 8004280:	6713      	str	r3, [r2, #112]	@ 0x70
 8004282:	4b5c      	ldr	r3, [pc, #368]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004286:	4a5b      	ldr	r2, [pc, #364]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	6713      	str	r3, [r2, #112]	@ 0x70
 800428e:	e00b      	b.n	80042a8 <HAL_RCC_OscConfig+0x324>
 8004290:	4b58      	ldr	r3, [pc, #352]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004294:	4a57      	ldr	r2, [pc, #348]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	6713      	str	r3, [r2, #112]	@ 0x70
 800429c:	4b55      	ldr	r3, [pc, #340]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 800429e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a0:	4a54      	ldr	r2, [pc, #336]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 80042a2:	f023 0304 	bic.w	r3, r3, #4
 80042a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d015      	beq.n	80042dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b0:	f7fd fe5a 	bl	8001f68 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b6:	e00a      	b.n	80042ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b8:	f7fd fe56 	bl	8001f68 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e0cb      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ce:	4b49      	ldr	r3, [pc, #292]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0ee      	beq.n	80042b8 <HAL_RCC_OscConfig+0x334>
 80042da:	e014      	b.n	8004306 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042dc:	f7fd fe44 	bl	8001f68 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e2:	e00a      	b.n	80042fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e4:	f7fd fe40 	bl	8001f68 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e0b5      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042fa:	4b3e      	ldr	r3, [pc, #248]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 80042fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1ee      	bne.n	80042e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004306:	7dfb      	ldrb	r3, [r7, #23]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d105      	bne.n	8004318 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430c:	4b39      	ldr	r3, [pc, #228]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 800430e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004310:	4a38      	ldr	r2, [pc, #224]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004312:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004316:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 80a1 	beq.w	8004464 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004322:	4b34      	ldr	r3, [pc, #208]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 030c 	and.w	r3, r3, #12
 800432a:	2b08      	cmp	r3, #8
 800432c:	d05c      	beq.n	80043e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d141      	bne.n	80043ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004336:	4b31      	ldr	r3, [pc, #196]	@ (80043fc <HAL_RCC_OscConfig+0x478>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433c:	f7fd fe14 	bl	8001f68 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004344:	f7fd fe10 	bl	8001f68 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e087      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004356:	4b27      	ldr	r3, [pc, #156]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69da      	ldr	r2, [r3, #28]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004370:	019b      	lsls	r3, r3, #6
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004378:	085b      	lsrs	r3, r3, #1
 800437a:	3b01      	subs	r3, #1
 800437c:	041b      	lsls	r3, r3, #16
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004384:	061b      	lsls	r3, r3, #24
 8004386:	491b      	ldr	r1, [pc, #108]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004388:	4313      	orrs	r3, r2
 800438a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800438c:	4b1b      	ldr	r3, [pc, #108]	@ (80043fc <HAL_RCC_OscConfig+0x478>)
 800438e:	2201      	movs	r2, #1
 8004390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004392:	f7fd fde9 	bl	8001f68 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800439a:	f7fd fde5 	bl	8001f68 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e05c      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ac:	4b11      	ldr	r3, [pc, #68]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f0      	beq.n	800439a <HAL_RCC_OscConfig+0x416>
 80043b8:	e054      	b.n	8004464 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ba:	4b10      	ldr	r3, [pc, #64]	@ (80043fc <HAL_RCC_OscConfig+0x478>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fd fdd2 	bl	8001f68 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c8:	f7fd fdce 	bl	8001f68 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e045      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043da:	4b06      	ldr	r3, [pc, #24]	@ (80043f4 <HAL_RCC_OscConfig+0x470>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x444>
 80043e6:	e03d      	b.n	8004464 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d107      	bne.n	8004400 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e038      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
 80043f4:	40023800 	.word	0x40023800
 80043f8:	40007000 	.word	0x40007000
 80043fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004400:	4b1b      	ldr	r3, [pc, #108]	@ (8004470 <HAL_RCC_OscConfig+0x4ec>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d028      	beq.n	8004460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004418:	429a      	cmp	r2, r3
 800441a:	d121      	bne.n	8004460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004426:	429a      	cmp	r2, r3
 8004428:	d11a      	bne.n	8004460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004430:	4013      	ands	r3, r2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004436:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004438:	4293      	cmp	r3, r2
 800443a:	d111      	bne.n	8004460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004446:	085b      	lsrs	r3, r3, #1
 8004448:	3b01      	subs	r3, #1
 800444a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800444c:	429a      	cmp	r2, r3
 800444e:	d107      	bne.n	8004460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800445c:	429a      	cmp	r2, r3
 800445e:	d001      	beq.n	8004464 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e000      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40023800 	.word	0x40023800

08004474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0cc      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004488:	4b68      	ldr	r3, [pc, #416]	@ (800462c <HAL_RCC_ClockConfig+0x1b8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d90c      	bls.n	80044b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004496:	4b65      	ldr	r3, [pc, #404]	@ (800462c <HAL_RCC_ClockConfig+0x1b8>)
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800449e:	4b63      	ldr	r3, [pc, #396]	@ (800462c <HAL_RCC_ClockConfig+0x1b8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d001      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0b8      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d020      	beq.n	80044fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044c8:	4b59      	ldr	r3, [pc, #356]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	4a58      	ldr	r2, [pc, #352]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80044d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044e0:	4b53      	ldr	r3, [pc, #332]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	4a52      	ldr	r2, [pc, #328]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80044ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ec:	4b50      	ldr	r3, [pc, #320]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	494d      	ldr	r1, [pc, #308]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d044      	beq.n	8004594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d107      	bne.n	8004522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004512:	4b47      	ldr	r3, [pc, #284]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d119      	bne.n	8004552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e07f      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d003      	beq.n	8004532 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800452e:	2b03      	cmp	r3, #3
 8004530:	d107      	bne.n	8004542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004532:	4b3f      	ldr	r3, [pc, #252]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e06f      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004542:	4b3b      	ldr	r3, [pc, #236]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e067      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004552:	4b37      	ldr	r3, [pc, #220]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f023 0203 	bic.w	r2, r3, #3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	4934      	ldr	r1, [pc, #208]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004560:	4313      	orrs	r3, r2
 8004562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004564:	f7fd fd00 	bl	8001f68 <HAL_GetTick>
 8004568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456a:	e00a      	b.n	8004582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800456c:	f7fd fcfc 	bl	8001f68 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e04f      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004582:	4b2b      	ldr	r3, [pc, #172]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 020c 	and.w	r2, r3, #12
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	429a      	cmp	r2, r3
 8004592:	d1eb      	bne.n	800456c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004594:	4b25      	ldr	r3, [pc, #148]	@ (800462c <HAL_RCC_ClockConfig+0x1b8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d20c      	bcs.n	80045bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a2:	4b22      	ldr	r3, [pc, #136]	@ (800462c <HAL_RCC_ClockConfig+0x1b8>)
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045aa:	4b20      	ldr	r3, [pc, #128]	@ (800462c <HAL_RCC_ClockConfig+0x1b8>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d001      	beq.n	80045bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e032      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d008      	beq.n	80045da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045c8:	4b19      	ldr	r3, [pc, #100]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	4916      	ldr	r1, [pc, #88]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d009      	beq.n	80045fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045e6:	4b12      	ldr	r3, [pc, #72]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	490e      	ldr	r1, [pc, #56]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045fa:	f000 f821 	bl	8004640 <HAL_RCC_GetSysClockFreq>
 80045fe:	4602      	mov	r2, r0
 8004600:	4b0b      	ldr	r3, [pc, #44]	@ (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	091b      	lsrs	r3, r3, #4
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	490a      	ldr	r1, [pc, #40]	@ (8004634 <HAL_RCC_ClockConfig+0x1c0>)
 800460c:	5ccb      	ldrb	r3, [r1, r3]
 800460e:	fa22 f303 	lsr.w	r3, r2, r3
 8004612:	4a09      	ldr	r2, [pc, #36]	@ (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 8004614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004616:	4b09      	ldr	r3, [pc, #36]	@ (800463c <HAL_RCC_ClockConfig+0x1c8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f7fd fb30 	bl	8001c80 <HAL_InitTick>

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40023c00 	.word	0x40023c00
 8004630:	40023800 	.word	0x40023800
 8004634:	0800849c 	.word	0x0800849c
 8004638:	200000b0 	.word	0x200000b0
 800463c:	200000b4 	.word	0x200000b4

08004640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004644:	b090      	sub	sp, #64	@ 0x40
 8004646:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004658:	4b59      	ldr	r3, [pc, #356]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 030c 	and.w	r3, r3, #12
 8004660:	2b08      	cmp	r3, #8
 8004662:	d00d      	beq.n	8004680 <HAL_RCC_GetSysClockFreq+0x40>
 8004664:	2b08      	cmp	r3, #8
 8004666:	f200 80a1 	bhi.w	80047ac <HAL_RCC_GetSysClockFreq+0x16c>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <HAL_RCC_GetSysClockFreq+0x34>
 800466e:	2b04      	cmp	r3, #4
 8004670:	d003      	beq.n	800467a <HAL_RCC_GetSysClockFreq+0x3a>
 8004672:	e09b      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004674:	4b53      	ldr	r3, [pc, #332]	@ (80047c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004676:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004678:	e09b      	b.n	80047b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800467a:	4b53      	ldr	r3, [pc, #332]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800467c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800467e:	e098      	b.n	80047b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004680:	4b4f      	ldr	r3, [pc, #316]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004688:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800468a:	4b4d      	ldr	r3, [pc, #308]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d028      	beq.n	80046e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004696:	4b4a      	ldr	r3, [pc, #296]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	099b      	lsrs	r3, r3, #6
 800469c:	2200      	movs	r2, #0
 800469e:	623b      	str	r3, [r7, #32]
 80046a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046a8:	2100      	movs	r1, #0
 80046aa:	4b47      	ldr	r3, [pc, #284]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80046ac:	fb03 f201 	mul.w	r2, r3, r1
 80046b0:	2300      	movs	r3, #0
 80046b2:	fb00 f303 	mul.w	r3, r0, r3
 80046b6:	4413      	add	r3, r2
 80046b8:	4a43      	ldr	r2, [pc, #268]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80046ba:	fba0 1202 	umull	r1, r2, r0, r2
 80046be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046c0:	460a      	mov	r2, r1
 80046c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80046c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046c6:	4413      	add	r3, r2
 80046c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046cc:	2200      	movs	r2, #0
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	61fa      	str	r2, [r7, #28]
 80046d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80046da:	f7fb fdd9 	bl	8000290 <__aeabi_uldivmod>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4613      	mov	r3, r2
 80046e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046e6:	e053      	b.n	8004790 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046e8:	4b35      	ldr	r3, [pc, #212]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	099b      	lsrs	r3, r3, #6
 80046ee:	2200      	movs	r2, #0
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	617a      	str	r2, [r7, #20]
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046fa:	f04f 0b00 	mov.w	fp, #0
 80046fe:	4652      	mov	r2, sl
 8004700:	465b      	mov	r3, fp
 8004702:	f04f 0000 	mov.w	r0, #0
 8004706:	f04f 0100 	mov.w	r1, #0
 800470a:	0159      	lsls	r1, r3, #5
 800470c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004710:	0150      	lsls	r0, r2, #5
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	ebb2 080a 	subs.w	r8, r2, sl
 800471a:	eb63 090b 	sbc.w	r9, r3, fp
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800472a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800472e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004732:	ebb2 0408 	subs.w	r4, r2, r8
 8004736:	eb63 0509 	sbc.w	r5, r3, r9
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	00eb      	lsls	r3, r5, #3
 8004744:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004748:	00e2      	lsls	r2, r4, #3
 800474a:	4614      	mov	r4, r2
 800474c:	461d      	mov	r5, r3
 800474e:	eb14 030a 	adds.w	r3, r4, sl
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	eb45 030b 	adc.w	r3, r5, fp
 8004758:	607b      	str	r3, [r7, #4]
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004766:	4629      	mov	r1, r5
 8004768:	028b      	lsls	r3, r1, #10
 800476a:	4621      	mov	r1, r4
 800476c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004770:	4621      	mov	r1, r4
 8004772:	028a      	lsls	r2, r1, #10
 8004774:	4610      	mov	r0, r2
 8004776:	4619      	mov	r1, r3
 8004778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800477a:	2200      	movs	r2, #0
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	60fa      	str	r2, [r7, #12]
 8004780:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004784:	f7fb fd84 	bl	8000290 <__aeabi_uldivmod>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4613      	mov	r3, r2
 800478e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004790:	4b0b      	ldr	r3, [pc, #44]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	0c1b      	lsrs	r3, r3, #16
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	3301      	adds	r3, #1
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80047a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80047a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80047aa:	e002      	b.n	80047b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047ac:	4b05      	ldr	r3, [pc, #20]	@ (80047c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80047ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80047b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3740      	adds	r7, #64	@ 0x40
 80047b8:	46bd      	mov	sp, r7
 80047ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047be:	bf00      	nop
 80047c0:	40023800 	.word	0x40023800
 80047c4:	00f42400 	.word	0x00f42400
 80047c8:	017d7840 	.word	0x017d7840

080047cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d0:	4b03      	ldr	r3, [pc, #12]	@ (80047e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047d2:	681b      	ldr	r3, [r3, #0]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	200000b0 	.word	0x200000b0

080047e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047e8:	f7ff fff0 	bl	80047cc <HAL_RCC_GetHCLKFreq>
 80047ec:	4602      	mov	r2, r0
 80047ee:	4b05      	ldr	r3, [pc, #20]	@ (8004804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	0a9b      	lsrs	r3, r3, #10
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	4903      	ldr	r1, [pc, #12]	@ (8004808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047fa:	5ccb      	ldrb	r3, [r1, r3]
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004800:	4618      	mov	r0, r3
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40023800 	.word	0x40023800
 8004808:	080084ac 	.word	0x080084ac

0800480c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004810:	f7ff ffdc 	bl	80047cc <HAL_RCC_GetHCLKFreq>
 8004814:	4602      	mov	r2, r0
 8004816:	4b05      	ldr	r3, [pc, #20]	@ (800482c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	0b5b      	lsrs	r3, r3, #13
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	4903      	ldr	r1, [pc, #12]	@ (8004830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004822:	5ccb      	ldrb	r3, [r1, r3]
 8004824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004828:	4618      	mov	r0, r3
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40023800 	.word	0x40023800
 8004830:	080084ac 	.word	0x080084ac

08004834 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	220f      	movs	r2, #15
 8004842:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004844:	4b12      	ldr	r3, [pc, #72]	@ (8004890 <HAL_RCC_GetClockConfig+0x5c>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 0203 	and.w	r2, r3, #3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004850:	4b0f      	ldr	r3, [pc, #60]	@ (8004890 <HAL_RCC_GetClockConfig+0x5c>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800485c:	4b0c      	ldr	r3, [pc, #48]	@ (8004890 <HAL_RCC_GetClockConfig+0x5c>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004868:	4b09      	ldr	r3, [pc, #36]	@ (8004890 <HAL_RCC_GetClockConfig+0x5c>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	08db      	lsrs	r3, r3, #3
 800486e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004876:	4b07      	ldr	r3, [pc, #28]	@ (8004894 <HAL_RCC_GetClockConfig+0x60>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0207 	and.w	r2, r3, #7
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	601a      	str	r2, [r3, #0]
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40023800 	.word	0x40023800
 8004894:	40023c00 	.word	0x40023c00

08004898 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e07b      	b.n	80049a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d108      	bne.n	80048c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048ba:	d009      	beq.n	80048d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	61da      	str	r2, [r3, #28]
 80048c2:	e005      	b.n	80048d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fd f94a 	bl	8001b84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004906:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	431a      	orrs	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004954:	ea42 0103 	orr.w	r1, r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	0c1b      	lsrs	r3, r3, #16
 800496e:	f003 0104 	and.w	r1, r3, #4
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004976:	f003 0210 	and.w	r2, r3, #16
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	69da      	ldr	r2, [r3, #28]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004990:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b088      	sub	sp, #32
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	603b      	str	r3, [r7, #0]
 80049b6:	4613      	mov	r3, r2
 80049b8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049ba:	f7fd fad5 	bl	8001f68 <HAL_GetTick>
 80049be:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80049c0:	88fb      	ldrh	r3, [r7, #6]
 80049c2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d001      	beq.n	80049d4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80049d0:	2302      	movs	r3, #2
 80049d2:	e12a      	b.n	8004c2a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d002      	beq.n	80049e0 <HAL_SPI_Transmit+0x36>
 80049da:	88fb      	ldrh	r3, [r7, #6]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e122      	b.n	8004c2a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d101      	bne.n	80049f2 <HAL_SPI_Transmit+0x48>
 80049ee:	2302      	movs	r3, #2
 80049f0:	e11b      	b.n	8004c2a <HAL_SPI_Transmit+0x280>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2203      	movs	r2, #3
 80049fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	88fa      	ldrh	r2, [r7, #6]
 8004a12:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	88fa      	ldrh	r2, [r7, #6]
 8004a18:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a40:	d10f      	bne.n	8004a62 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a6c:	2b40      	cmp	r3, #64	@ 0x40
 8004a6e:	d007      	beq.n	8004a80 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a88:	d152      	bne.n	8004b30 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_SPI_Transmit+0xee>
 8004a92:	8b7b      	ldrh	r3, [r7, #26]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d145      	bne.n	8004b24 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9c:	881a      	ldrh	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa8:	1c9a      	adds	r2, r3, #2
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004abc:	e032      	b.n	8004b24 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d112      	bne.n	8004af2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad0:	881a      	ldrh	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004adc:	1c9a      	adds	r2, r3, #2
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004af0:	e018      	b.n	8004b24 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004af2:	f7fd fa39 	bl	8001f68 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d803      	bhi.n	8004b0a <HAL_SPI_Transmit+0x160>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b08:	d102      	bne.n	8004b10 <HAL_SPI_Transmit+0x166>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d109      	bne.n	8004b24 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e082      	b.n	8004c2a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1c7      	bne.n	8004abe <HAL_SPI_Transmit+0x114>
 8004b2e:	e053      	b.n	8004bd8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_SPI_Transmit+0x194>
 8004b38:	8b7b      	ldrh	r3, [r7, #26]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d147      	bne.n	8004bce <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	330c      	adds	r3, #12
 8004b48:	7812      	ldrb	r2, [r2, #0]
 8004b4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b64:	e033      	b.n	8004bce <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d113      	bne.n	8004b9c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	330c      	adds	r3, #12
 8004b7e:	7812      	ldrb	r2, [r2, #0]
 8004b80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004b9a:	e018      	b.n	8004bce <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b9c:	f7fd f9e4 	bl	8001f68 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d803      	bhi.n	8004bb4 <HAL_SPI_Transmit+0x20a>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb2:	d102      	bne.n	8004bba <HAL_SPI_Transmit+0x210>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d109      	bne.n	8004bce <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e02d      	b.n	8004c2a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1c6      	bne.n	8004b66 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	6839      	ldr	r1, [r7, #0]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 fbd9 	bl	8005394 <SPI_EndRxTxTransaction>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2220      	movs	r2, #32
 8004bec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e000      	b.n	8004c2a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004c28:	2300      	movs	r3, #0
  }
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b088      	sub	sp, #32
 8004c36:	af02      	add	r7, sp, #8
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	603b      	str	r3, [r7, #0]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d001      	beq.n	8004c52 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e104      	b.n	8004e5c <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <HAL_SPI_Receive+0x2c>
 8004c58:	88fb      	ldrh	r3, [r7, #6]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e0fc      	b.n	8004e5c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c6a:	d112      	bne.n	8004c92 <HAL_SPI_Receive+0x60>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10e      	bne.n	8004c92 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2204      	movs	r2, #4
 8004c78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c7c:	88fa      	ldrh	r2, [r7, #6]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	4613      	mov	r3, r2
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 f8eb 	bl	8004e64 <HAL_SPI_TransmitReceive>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	e0e4      	b.n	8004e5c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c92:	f7fd f969 	bl	8001f68 <HAL_GetTick>
 8004c96:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_SPI_Receive+0x74>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e0da      	b.n	8004e5c <HAL_SPI_Receive+0x22a>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2204      	movs	r2, #4
 8004cb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	88fa      	ldrh	r2, [r7, #6]
 8004cc6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	88fa      	ldrh	r2, [r7, #6]
 8004ccc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cf4:	d10f      	bne.n	8004d16 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d14:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d20:	2b40      	cmp	r3, #64	@ 0x40
 8004d22:	d007      	beq.n	8004d34 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d32:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d170      	bne.n	8004e1e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d3c:	e035      	b.n	8004daa <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d115      	bne.n	8004d78 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f103 020c 	add.w	r2, r3, #12
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d58:	7812      	ldrb	r2, [r2, #0]
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d76:	e018      	b.n	8004daa <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d78:	f7fd f8f6 	bl	8001f68 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d803      	bhi.n	8004d90 <HAL_SPI_Receive+0x15e>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8e:	d102      	bne.n	8004d96 <HAL_SPI_Receive+0x164>
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d109      	bne.n	8004daa <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e058      	b.n	8004e5c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1c4      	bne.n	8004d3e <HAL_SPI_Receive+0x10c>
 8004db4:	e038      	b.n	8004e28 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d113      	bne.n	8004dec <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dce:	b292      	uxth	r2, r2
 8004dd0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd6:	1c9a      	adds	r2, r3, #2
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004dea:	e018      	b.n	8004e1e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dec:	f7fd f8bc 	bl	8001f68 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d803      	bhi.n	8004e04 <HAL_SPI_Receive+0x1d2>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e02:	d102      	bne.n	8004e0a <HAL_SPI_Receive+0x1d8>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e01e      	b.n	8004e5c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1c6      	bne.n	8004db6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	6839      	ldr	r1, [r7, #0]
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 fa4b 	bl	80052c8 <SPI_EndRxTransaction>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
  }
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	@ 0x28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e72:	2301      	movs	r3, #1
 8004e74:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e76:	f7fd f877 	bl	8001f68 <HAL_GetTick>
 8004e7a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e82:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004e8a:	887b      	ldrh	r3, [r7, #2]
 8004e8c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e8e:	7ffb      	ldrb	r3, [r7, #31]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d00c      	beq.n	8004eae <HAL_SPI_TransmitReceive+0x4a>
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e9a:	d106      	bne.n	8004eaa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d102      	bne.n	8004eaa <HAL_SPI_TransmitReceive+0x46>
 8004ea4:	7ffb      	ldrb	r3, [r7, #31]
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d001      	beq.n	8004eae <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e17f      	b.n	80051ae <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <HAL_SPI_TransmitReceive+0x5c>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_SPI_TransmitReceive+0x5c>
 8004eba:	887b      	ldrh	r3, [r7, #2]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e174      	b.n	80051ae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_SPI_TransmitReceive+0x6e>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e16d      	b.n	80051ae <HAL_SPI_TransmitReceive+0x34a>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d003      	beq.n	8004eee <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2205      	movs	r2, #5
 8004eea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	887a      	ldrh	r2, [r7, #2]
 8004efe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	887a      	ldrh	r2, [r7, #2]
 8004f04:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	887a      	ldrh	r2, [r7, #2]
 8004f10:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	887a      	ldrh	r2, [r7, #2]
 8004f16:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f2e:	2b40      	cmp	r3, #64	@ 0x40
 8004f30:	d007      	beq.n	8004f42 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f4a:	d17e      	bne.n	800504a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <HAL_SPI_TransmitReceive+0xf6>
 8004f54:	8afb      	ldrh	r3, [r7, #22]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d16c      	bne.n	8005034 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5e:	881a      	ldrh	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6a:	1c9a      	adds	r2, r3, #2
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f7e:	e059      	b.n	8005034 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d11b      	bne.n	8004fc6 <HAL_SPI_TransmitReceive+0x162>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d016      	beq.n	8004fc6 <HAL_SPI_TransmitReceive+0x162>
 8004f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d113      	bne.n	8004fc6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa2:	881a      	ldrh	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fae:	1c9a      	adds	r2, r3, #2
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d119      	bne.n	8005008 <HAL_SPI_TransmitReceive+0x1a4>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d014      	beq.n	8005008 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe8:	b292      	uxth	r2, r2
 8004fea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff0:	1c9a      	adds	r2, r3, #2
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005004:	2301      	movs	r3, #1
 8005006:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005008:	f7fc ffae 	bl	8001f68 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005014:	429a      	cmp	r2, r3
 8005016:	d80d      	bhi.n	8005034 <HAL_SPI_TransmitReceive+0x1d0>
 8005018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501e:	d009      	beq.n	8005034 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e0bc      	b.n	80051ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1a0      	bne.n	8004f80 <HAL_SPI_TransmitReceive+0x11c>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d19b      	bne.n	8004f80 <HAL_SPI_TransmitReceive+0x11c>
 8005048:	e082      	b.n	8005150 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d002      	beq.n	8005058 <HAL_SPI_TransmitReceive+0x1f4>
 8005052:	8afb      	ldrh	r3, [r7, #22]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d171      	bne.n	800513c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	330c      	adds	r3, #12
 8005062:	7812      	ldrb	r2, [r2, #0]
 8005064:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005074:	b29b      	uxth	r3, r3
 8005076:	3b01      	subs	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800507e:	e05d      	b.n	800513c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b02      	cmp	r3, #2
 800508c:	d11c      	bne.n	80050c8 <HAL_SPI_TransmitReceive+0x264>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005092:	b29b      	uxth	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d017      	beq.n	80050c8 <HAL_SPI_TransmitReceive+0x264>
 8005098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509a:	2b01      	cmp	r3, #1
 800509c:	d114      	bne.n	80050c8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	330c      	adds	r3, #12
 80050a8:	7812      	ldrb	r2, [r2, #0]
 80050aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29a      	uxth	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d119      	bne.n	800510a <HAL_SPI_TransmitReceive+0x2a6>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050da:	b29b      	uxth	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d014      	beq.n	800510a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68da      	ldr	r2, [r3, #12]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	3b01      	subs	r3, #1
 8005100:	b29a      	uxth	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005106:	2301      	movs	r3, #1
 8005108:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800510a:	f7fc ff2d 	bl	8001f68 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005116:	429a      	cmp	r2, r3
 8005118:	d803      	bhi.n	8005122 <HAL_SPI_TransmitReceive+0x2be>
 800511a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005120:	d102      	bne.n	8005128 <HAL_SPI_TransmitReceive+0x2c4>
 8005122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005124:	2b00      	cmp	r3, #0
 8005126:	d109      	bne.n	800513c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e038      	b.n	80051ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d19c      	bne.n	8005080 <HAL_SPI_TransmitReceive+0x21c>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800514a:	b29b      	uxth	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d197      	bne.n	8005080 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005150:	6a3a      	ldr	r2, [r7, #32]
 8005152:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 f91d 	bl	8005394 <SPI_EndRxTxTransaction>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d008      	beq.n	8005172 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2220      	movs	r2, #32
 8005164:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e01d      	b.n	80051ae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800517a:	2300      	movs	r3, #0
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	613b      	str	r3, [r7, #16]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e000      	b.n	80051ae <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80051ac:	2300      	movs	r3, #0
  }
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3728      	adds	r7, #40	@ 0x28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	4613      	mov	r3, r2
 80051c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051c8:	f7fc fece 	bl	8001f68 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d0:	1a9b      	subs	r3, r3, r2
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	4413      	add	r3, r2
 80051d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051d8:	f7fc fec6 	bl	8001f68 <HAL_GetTick>
 80051dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051de:	4b39      	ldr	r3, [pc, #228]	@ (80052c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	015b      	lsls	r3, r3, #5
 80051e4:	0d1b      	lsrs	r3, r3, #20
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	fb02 f303 	mul.w	r3, r2, r3
 80051ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ee:	e055      	b.n	800529c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f6:	d051      	beq.n	800529c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051f8:	f7fc feb6 	bl	8001f68 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	429a      	cmp	r2, r3
 8005206:	d902      	bls.n	800520e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d13d      	bne.n	800528a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800521c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005226:	d111      	bne.n	800524c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005230:	d004      	beq.n	800523c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800523a:	d107      	bne.n	800524c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800524a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005250:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005254:	d10f      	bne.n	8005276 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005274:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e018      	b.n	80052bc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d102      	bne.n	8005296 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	61fb      	str	r3, [r7, #28]
 8005294:	e002      	b.n	800529c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	3b01      	subs	r3, #1
 800529a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	4013      	ands	r3, r2
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	bf0c      	ite	eq
 80052ac:	2301      	moveq	r3, #1
 80052ae:	2300      	movne	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	461a      	mov	r2, r3
 80052b4:	79fb      	ldrb	r3, [r7, #7]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d19a      	bne.n	80051f0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3720      	adds	r7, #32
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	200000b0 	.word	0x200000b0

080052c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052dc:	d111      	bne.n	8005302 <SPI_EndRxTransaction+0x3a>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052e6:	d004      	beq.n	80052f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052f0:	d107      	bne.n	8005302 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005300:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800530a:	d12a      	bne.n	8005362 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005314:	d012      	beq.n	800533c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2200      	movs	r2, #0
 800531e:	2180      	movs	r1, #128	@ 0x80
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f7ff ff49 	bl	80051b8 <SPI_WaitFlagStateUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d02d      	beq.n	8005388 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005330:	f043 0220 	orr.w	r2, r3, #32
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e026      	b.n	800538a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2200      	movs	r2, #0
 8005344:	2101      	movs	r1, #1
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f7ff ff36 	bl	80051b8 <SPI_WaitFlagStateUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d01a      	beq.n	8005388 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005356:	f043 0220 	orr.w	r2, r3, #32
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e013      	b.n	800538a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2200      	movs	r2, #0
 800536a:	2101      	movs	r1, #1
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff ff23 	bl	80051b8 <SPI_WaitFlagStateUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d007      	beq.n	8005388 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800537c:	f043 0220 	orr.w	r2, r3, #32
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e000      	b.n	800538a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af02      	add	r7, sp, #8
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2201      	movs	r2, #1
 80053a8:	2102      	movs	r1, #2
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f7ff ff04 	bl	80051b8 <SPI_WaitFlagStateUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d007      	beq.n	80053c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ba:	f043 0220 	orr.w	r2, r3, #32
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e032      	b.n	800542c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005434 <SPI_EndRxTxTransaction+0xa0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005438 <SPI_EndRxTxTransaction+0xa4>)
 80053cc:	fba2 2303 	umull	r2, r3, r2, r3
 80053d0:	0d5b      	lsrs	r3, r3, #21
 80053d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80053d6:	fb02 f303 	mul.w	r3, r2, r3
 80053da:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053e4:	d112      	bne.n	800540c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2200      	movs	r2, #0
 80053ee:	2180      	movs	r1, #128	@ 0x80
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f7ff fee1 	bl	80051b8 <SPI_WaitFlagStateUntilTimeout>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d016      	beq.n	800542a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005400:	f043 0220 	orr.w	r2, r3, #32
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e00f      	b.n	800542c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	3b01      	subs	r3, #1
 8005416:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005422:	2b80      	cmp	r3, #128	@ 0x80
 8005424:	d0f2      	beq.n	800540c <SPI_EndRxTxTransaction+0x78>
 8005426:	e000      	b.n	800542a <SPI_EndRxTxTransaction+0x96>
        break;
 8005428:	bf00      	nop
  }

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	200000b0 	.word	0x200000b0
 8005438:	165e9f81 	.word	0x165e9f81

0800543c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e041      	b.n	80054d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d106      	bne.n	8005468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f839 	bl	80054da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3304      	adds	r3, #4
 8005478:	4619      	mov	r1, r3
 800547a:	4610      	mov	r0, r2
 800547c:	f000 f9b2 	bl	80057e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
	...

080054f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b01      	cmp	r3, #1
 8005502:	d001      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e044      	b.n	8005592 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1e      	ldr	r2, [pc, #120]	@ (80055a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d018      	beq.n	800555c <HAL_TIM_Base_Start_IT+0x6c>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005532:	d013      	beq.n	800555c <HAL_TIM_Base_Start_IT+0x6c>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a1a      	ldr	r2, [pc, #104]	@ (80055a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00e      	beq.n	800555c <HAL_TIM_Base_Start_IT+0x6c>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a19      	ldr	r2, [pc, #100]	@ (80055a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d009      	beq.n	800555c <HAL_TIM_Base_Start_IT+0x6c>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a17      	ldr	r2, [pc, #92]	@ (80055ac <HAL_TIM_Base_Start_IT+0xbc>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d004      	beq.n	800555c <HAL_TIM_Base_Start_IT+0x6c>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a16      	ldr	r2, [pc, #88]	@ (80055b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d111      	bne.n	8005580 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b06      	cmp	r3, #6
 800556c:	d010      	beq.n	8005590 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f042 0201 	orr.w	r2, r2, #1
 800557c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557e:	e007      	b.n	8005590 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0201 	orr.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	40010000 	.word	0x40010000
 80055a4:	40000400 	.word	0x40000400
 80055a8:	40000800 	.word	0x40000800
 80055ac:	40000c00 	.word	0x40000c00
 80055b0:	40014000 	.word	0x40014000

080055b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d020      	beq.n	8005618 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01b      	beq.n	8005618 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0202 	mvn.w	r2, #2
 80055e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f8d2 	bl	80057a8 <HAL_TIM_IC_CaptureCallback>
 8005604:	e005      	b.n	8005612 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f8c4 	bl	8005794 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f8d5 	bl	80057bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b00      	cmp	r3, #0
 8005620:	d020      	beq.n	8005664 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d01b      	beq.n	8005664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0204 	mvn.w	r2, #4
 8005634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2202      	movs	r2, #2
 800563a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f8ac 	bl	80057a8 <HAL_TIM_IC_CaptureCallback>
 8005650:	e005      	b.n	800565e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f89e 	bl	8005794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f8af 	bl	80057bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f003 0308 	and.w	r3, r3, #8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d020      	beq.n	80056b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01b      	beq.n	80056b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0208 	mvn.w	r2, #8
 8005680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2204      	movs	r2, #4
 8005686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f886 	bl	80057a8 <HAL_TIM_IC_CaptureCallback>
 800569c:	e005      	b.n	80056aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f878 	bl	8005794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f889 	bl	80057bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f003 0310 	and.w	r3, r3, #16
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d020      	beq.n	80056fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d01b      	beq.n	80056fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0210 	mvn.w	r2, #16
 80056cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2208      	movs	r2, #8
 80056d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f860 	bl	80057a8 <HAL_TIM_IC_CaptureCallback>
 80056e8:	e005      	b.n	80056f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f852 	bl	8005794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f863 	bl	80057bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00c      	beq.n	8005720 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d007      	beq.n	8005720 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f06f 0201 	mvn.w	r2, #1
 8005718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fb fea4 	bl	8001468 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00c      	beq.n	8005744 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005730:	2b00      	cmp	r3, #0
 8005732:	d007      	beq.n	8005744 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800573c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f8e0 	bl	8005904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00c      	beq.n	8005768 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d007      	beq.n	8005768 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f834 	bl	80057d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f003 0320 	and.w	r3, r3, #32
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00c      	beq.n	800578c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f003 0320 	and.w	r3, r3, #32
 8005778:	2b00      	cmp	r3, #0
 800577a:	d007      	beq.n	800578c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0220 	mvn.w	r2, #32
 8005784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f8b2 	bl	80058f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800578c:	bf00      	nop
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a37      	ldr	r2, [pc, #220]	@ (80058d4 <TIM_Base_SetConfig+0xf0>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d00f      	beq.n	800581c <TIM_Base_SetConfig+0x38>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005802:	d00b      	beq.n	800581c <TIM_Base_SetConfig+0x38>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a34      	ldr	r2, [pc, #208]	@ (80058d8 <TIM_Base_SetConfig+0xf4>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d007      	beq.n	800581c <TIM_Base_SetConfig+0x38>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a33      	ldr	r2, [pc, #204]	@ (80058dc <TIM_Base_SetConfig+0xf8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d003      	beq.n	800581c <TIM_Base_SetConfig+0x38>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a32      	ldr	r2, [pc, #200]	@ (80058e0 <TIM_Base_SetConfig+0xfc>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d108      	bne.n	800582e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a28      	ldr	r2, [pc, #160]	@ (80058d4 <TIM_Base_SetConfig+0xf0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d01b      	beq.n	800586e <TIM_Base_SetConfig+0x8a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800583c:	d017      	beq.n	800586e <TIM_Base_SetConfig+0x8a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a25      	ldr	r2, [pc, #148]	@ (80058d8 <TIM_Base_SetConfig+0xf4>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d013      	beq.n	800586e <TIM_Base_SetConfig+0x8a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a24      	ldr	r2, [pc, #144]	@ (80058dc <TIM_Base_SetConfig+0xf8>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d00f      	beq.n	800586e <TIM_Base_SetConfig+0x8a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a23      	ldr	r2, [pc, #140]	@ (80058e0 <TIM_Base_SetConfig+0xfc>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00b      	beq.n	800586e <TIM_Base_SetConfig+0x8a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a22      	ldr	r2, [pc, #136]	@ (80058e4 <TIM_Base_SetConfig+0x100>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d007      	beq.n	800586e <TIM_Base_SetConfig+0x8a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a21      	ldr	r2, [pc, #132]	@ (80058e8 <TIM_Base_SetConfig+0x104>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d003      	beq.n	800586e <TIM_Base_SetConfig+0x8a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a20      	ldr	r2, [pc, #128]	@ (80058ec <TIM_Base_SetConfig+0x108>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d108      	bne.n	8005880 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a0c      	ldr	r2, [pc, #48]	@ (80058d4 <TIM_Base_SetConfig+0xf0>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d103      	bne.n	80058ae <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	691a      	ldr	r2, [r3, #16]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f043 0204 	orr.w	r2, r3, #4
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	601a      	str	r2, [r3, #0]
}
 80058c6:	bf00      	nop
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40010000 	.word	0x40010000
 80058d8:	40000400 	.word	0x40000400
 80058dc:	40000800 	.word	0x40000800
 80058e0:	40000c00 	.word	0x40000c00
 80058e4:	40014000 	.word	0x40014000
 80058e8:	40014400 	.word	0x40014400
 80058ec:	40014800 	.word	0x40014800

080058f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	4603      	mov	r3, r0
 8005920:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800592a:	2b84      	cmp	r3, #132	@ 0x84
 800592c:	d005      	beq.n	800593a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800592e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4413      	add	r3, r2
 8005936:	3303      	adds	r3, #3
 8005938:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800593a:	68fb      	ldr	r3, [r7, #12]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800594c:	f000 fde2 	bl	8006514 <vTaskStartScheduler>
  
  return osOK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	bd80      	pop	{r7, pc}

08005956 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005956:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005958:	b089      	sub	sp, #36	@ 0x24
 800595a:	af04      	add	r7, sp, #16
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d020      	beq.n	80059aa <osThreadCreate+0x54>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01c      	beq.n	80059aa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685c      	ldr	r4, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691e      	ldr	r6, [r3, #16]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005982:	4618      	mov	r0, r3
 8005984:	f7ff ffc8 	bl	8005918 <makeFreeRtosPriority>
 8005988:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005992:	9202      	str	r2, [sp, #8]
 8005994:	9301      	str	r3, [sp, #4]
 8005996:	9100      	str	r1, [sp, #0]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	4632      	mov	r2, r6
 800599c:	4629      	mov	r1, r5
 800599e:	4620      	mov	r0, r4
 80059a0:	f000 fbd2 	bl	8006148 <xTaskCreateStatic>
 80059a4:	4603      	mov	r3, r0
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	e01c      	b.n	80059e4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685c      	ldr	r4, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059b6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff ffaa 	bl	8005918 <makeFreeRtosPriority>
 80059c4:	4602      	mov	r2, r0
 80059c6:	f107 030c 	add.w	r3, r7, #12
 80059ca:	9301      	str	r3, [sp, #4]
 80059cc:	9200      	str	r2, [sp, #0]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	4632      	mov	r2, r6
 80059d2:	4629      	mov	r1, r5
 80059d4:	4620      	mov	r0, r4
 80059d6:	f000 fc17 	bl	8006208 <xTaskCreate>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d001      	beq.n	80059e4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80059e0:	2300      	movs	r3, #0
 80059e2:	e000      	b.n	80059e6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80059e4:	68fb      	ldr	r3, [r7, #12]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059ee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b084      	sub	sp, #16
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <osDelay+0x16>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	e000      	b.n	8005a06 <osDelay+0x18>
 8005a04:	2301      	movs	r3, #1
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fd4e 	bl	80064a8 <vTaskDelay>
  
  return osOK;
 8005a0c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f103 0208 	add.w	r2, r3, #8
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f103 0208 	add.w	r2, r3, #8
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f103 0208 	add.w	r2, r3, #8
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	601a      	str	r2, [r3, #0]
}
 8005aac:	bf00      	nop
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ace:	d103      	bne.n	8005ad8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	e00c      	b.n	8005af2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3308      	adds	r3, #8
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	e002      	b.n	8005ae6 <vListInsert+0x2e>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d2f6      	bcs.n	8005ae0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	601a      	str	r2, [r3, #0]
}
 8005b1e:	bf00      	nop
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b085      	sub	sp, #20
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6892      	ldr	r2, [r2, #8]
 8005b40:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6852      	ldr	r2, [r2, #4]
 8005b4a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d103      	bne.n	8005b5e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689a      	ldr	r2, [r3, #8]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	1e5a      	subs	r2, r3, #1
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
	...

08005b80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10b      	bne.n	8005bac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ba6:	bf00      	nop
 8005ba8:	bf00      	nop
 8005baa:	e7fd      	b.n	8005ba8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005bac:	f001 fba4 	bl	80072f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb8:	68f9      	ldr	r1, [r7, #12]
 8005bba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005bbc:	fb01 f303 	mul.w	r3, r1, r3
 8005bc0:	441a      	add	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	68f9      	ldr	r1, [r7, #12]
 8005be0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005be2:	fb01 f303 	mul.w	r3, r1, r3
 8005be6:	441a      	add	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	22ff      	movs	r2, #255	@ 0xff
 8005bf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	22ff      	movs	r2, #255	@ 0xff
 8005bf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d114      	bne.n	8005c2c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d01a      	beq.n	8005c40 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	3310      	adds	r3, #16
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 feda 	bl	80069c8 <xTaskRemoveFromEventList>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d012      	beq.n	8005c40 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c50 <xQueueGenericReset+0xd0>)
 8005c1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	e009      	b.n	8005c40 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	3310      	adds	r3, #16
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff fef0 	bl	8005a16 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3324      	adds	r3, #36	@ 0x24
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff feeb 	bl	8005a16 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c40:	f001 fb8c 	bl	800735c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c44:	2301      	movs	r3, #1
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	e000ed04 	.word	0xe000ed04

08005c54 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b08a      	sub	sp, #40	@ 0x28
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10b      	bne.n	8005c80 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6c:	f383 8811 	msr	BASEPRI, r3
 8005c70:	f3bf 8f6f 	isb	sy
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	613b      	str	r3, [r7, #16]
}
 8005c7a:	bf00      	nop
 8005c7c:	bf00      	nop
 8005c7e:	e7fd      	b.n	8005c7c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	fb02 f303 	mul.w	r3, r2, r3
 8005c88:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	3348      	adds	r3, #72	@ 0x48
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f001 fc54 	bl	800753c <pvPortMalloc>
 8005c94:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d011      	beq.n	8005cc0 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	3348      	adds	r3, #72	@ 0x48
 8005ca4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cae:	79fa      	ldrb	r2, [r7, #7]
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 f805 	bl	8005cca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005cc0:	69bb      	ldr	r3, [r7, #24]
	}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3720      	adds	r7, #32
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b084      	sub	sp, #16
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	60b9      	str	r1, [r7, #8]
 8005cd4:	607a      	str	r2, [r7, #4]
 8005cd6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d103      	bne.n	8005ce6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	e002      	b.n	8005cec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	69b8      	ldr	r0, [r7, #24]
 8005cfc:	f7ff ff40 	bl	8005b80 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d00:	bf00      	nop
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08e      	sub	sp, #56	@ 0x38
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10b      	bne.n	8005d34 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	623b      	str	r3, [r7, #32]
}
 8005d2e:	bf00      	nop
 8005d30:	bf00      	nop
 8005d32:	e7fd      	b.n	8005d30 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00b      	beq.n	8005d54 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	61fb      	str	r3, [r7, #28]
}
 8005d4e:	bf00      	nop
 8005d50:	bf00      	nop
 8005d52:	e7fd      	b.n	8005d50 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d103      	bne.n	8005d64 <xQueueGiveFromISR+0x5c>
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <xQueueGiveFromISR+0x60>
 8005d64:	2301      	movs	r3, #1
 8005d66:	e000      	b.n	8005d6a <xQueueGiveFromISR+0x62>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10b      	bne.n	8005d86 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	61bb      	str	r3, [r7, #24]
}
 8005d80:	bf00      	nop
 8005d82:	bf00      	nop
 8005d84:	e7fd      	b.n	8005d82 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d86:	f001 fb97 	bl	80074b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d8a:	f3ef 8211 	mrs	r2, BASEPRI
 8005d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	617a      	str	r2, [r7, #20]
 8005da0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005da2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005daa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d22b      	bcs.n	8005e0e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005dc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd0:	d112      	bne.n	8005df8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d016      	beq.n	8005e08 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ddc:	3324      	adds	r3, #36	@ 0x24
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fdf2 	bl	80069c8 <xTaskRemoveFromEventList>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00e      	beq.n	8005e08 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00b      	beq.n	8005e08 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	2201      	movs	r2, #1
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	e007      	b.n	8005e08 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005df8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	b25a      	sxtb	r2, r3
 8005e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e0c:	e001      	b.n	8005e12 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e14:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e1c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3738      	adds	r7, #56	@ 0x38
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08e      	sub	sp, #56	@ 0x38
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e32:	2300      	movs	r3, #0
 8005e34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10b      	bne.n	8005e5c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	623b      	str	r3, [r7, #32]
}
 8005e56:	bf00      	nop
 8005e58:	bf00      	nop
 8005e5a:	e7fd      	b.n	8005e58 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00b      	beq.n	8005e7c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	61fb      	str	r3, [r7, #28]
}
 8005e76:	bf00      	nop
 8005e78:	bf00      	nop
 8005e7a:	e7fd      	b.n	8005e78 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e7c:	f000 ff6a 	bl	8006d54 <xTaskGetSchedulerState>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d102      	bne.n	8005e8c <xQueueSemaphoreTake+0x64>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <xQueueSemaphoreTake+0x68>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e000      	b.n	8005e92 <xQueueSemaphoreTake+0x6a>
 8005e90:	2300      	movs	r3, #0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10b      	bne.n	8005eae <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	61bb      	str	r3, [r7, #24]
}
 8005ea8:	bf00      	nop
 8005eaa:	bf00      	nop
 8005eac:	e7fd      	b.n	8005eaa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005eae:	f001 fa23 	bl	80072f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d024      	beq.n	8005f08 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec0:	1e5a      	subs	r2, r3, #1
 8005ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d104      	bne.n	8005ed8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005ece:	f001 f865 	bl	8006f9c <pvTaskIncrementMutexHeldCount>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00f      	beq.n	8005f00 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee2:	3310      	adds	r3, #16
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 fd6f 	bl	80069c8 <xTaskRemoveFromEventList>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d007      	beq.n	8005f00 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ef0:	4b54      	ldr	r3, [pc, #336]	@ (8006044 <xQueueSemaphoreTake+0x21c>)
 8005ef2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f00:	f001 fa2c 	bl	800735c <vPortExitCritical>
				return pdPASS;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e098      	b.n	800603a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d112      	bne.n	8005f34 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00b      	beq.n	8005f2c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	617b      	str	r3, [r7, #20]
}
 8005f26:	bf00      	nop
 8005f28:	bf00      	nop
 8005f2a:	e7fd      	b.n	8005f28 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005f2c:	f001 fa16 	bl	800735c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f30:	2300      	movs	r3, #0
 8005f32:	e082      	b.n	800603a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d106      	bne.n	8005f48 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f3a:	f107 030c 	add.w	r3, r7, #12
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 fda6 	bl	8006a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f44:	2301      	movs	r3, #1
 8005f46:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f48:	f001 fa08 	bl	800735c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f4c:	f000 fb4c 	bl	80065e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f50:	f001 f9d2 	bl	80072f8 <vPortEnterCritical>
 8005f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f5a:	b25b      	sxtb	r3, r3
 8005f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f60:	d103      	bne.n	8005f6a <xQueueSemaphoreTake+0x142>
 8005f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f70:	b25b      	sxtb	r3, r3
 8005f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f76:	d103      	bne.n	8005f80 <xQueueSemaphoreTake+0x158>
 8005f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f80:	f001 f9ec 	bl	800735c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f84:	463a      	mov	r2, r7
 8005f86:	f107 030c 	add.w	r3, r7, #12
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 fd95 	bl	8006abc <xTaskCheckForTimeOut>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d132      	bne.n	8005ffe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f9a:	f000 f8bf 	bl	800611c <prvIsQueueEmpty>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d026      	beq.n	8005ff2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d109      	bne.n	8005fc0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005fac:	f001 f9a4 	bl	80072f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 feeb 	bl	8006d90 <xTaskPriorityInherit>
 8005fba:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005fbc:	f001 f9ce 	bl	800735c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc2:	3324      	adds	r3, #36	@ 0x24
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	4611      	mov	r1, r2
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 fcd7 	bl	800697c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fd0:	f000 f852 	bl	8006078 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fd4:	f000 fb16 	bl	8006604 <xTaskResumeAll>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f47f af67 	bne.w	8005eae <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005fe0:	4b18      	ldr	r3, [pc, #96]	@ (8006044 <xQueueSemaphoreTake+0x21c>)
 8005fe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	e75d      	b.n	8005eae <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005ff2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ff4:	f000 f840 	bl	8006078 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ff8:	f000 fb04 	bl	8006604 <xTaskResumeAll>
 8005ffc:	e757      	b.n	8005eae <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005ffe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006000:	f000 f83a 	bl	8006078 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006004:	f000 fafe 	bl	8006604 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006008:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800600a:	f000 f887 	bl	800611c <prvIsQueueEmpty>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	f43f af4c 	beq.w	8005eae <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00d      	beq.n	8006038 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800601c:	f001 f96c 	bl	80072f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006020:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006022:	f000 f811 	bl	8006048 <prvGetDisinheritPriorityAfterTimeout>
 8006026:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800602e:	4618      	mov	r0, r3
 8006030:	f000 ff24 	bl	8006e7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006034:	f001 f992 	bl	800735c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006038:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800603a:	4618      	mov	r0, r3
 800603c:	3738      	adds	r7, #56	@ 0x38
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	e000ed04 	.word	0xe000ed04

08006048 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006054:	2b00      	cmp	r3, #0
 8006056:	d006      	beq.n	8006066 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f1c3 0307 	rsb	r3, r3, #7
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	e001      	b.n	800606a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800606a:	68fb      	ldr	r3, [r7, #12]
	}
 800606c:	4618      	mov	r0, r3
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006080:	f001 f93a 	bl	80072f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800608a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800608c:	e011      	b.n	80060b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006092:	2b00      	cmp	r3, #0
 8006094:	d012      	beq.n	80060bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3324      	adds	r3, #36	@ 0x24
 800609a:	4618      	mov	r0, r3
 800609c:	f000 fc94 	bl	80069c8 <xTaskRemoveFromEventList>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80060a6:	f000 fd6d 	bl	8006b84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	dce9      	bgt.n	800608e <prvUnlockQueue+0x16>
 80060ba:	e000      	b.n	80060be <prvUnlockQueue+0x46>
					break;
 80060bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	22ff      	movs	r2, #255	@ 0xff
 80060c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80060c6:	f001 f949 	bl	800735c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80060ca:	f001 f915 	bl	80072f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060d6:	e011      	b.n	80060fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d012      	beq.n	8006106 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3310      	adds	r3, #16
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 fc6f 	bl	80069c8 <xTaskRemoveFromEventList>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060f0:	f000 fd48 	bl	8006b84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060f4:	7bbb      	ldrb	r3, [r7, #14]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006100:	2b00      	cmp	r3, #0
 8006102:	dce9      	bgt.n	80060d8 <prvUnlockQueue+0x60>
 8006104:	e000      	b.n	8006108 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006106:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	22ff      	movs	r2, #255	@ 0xff
 800610c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006110:	f001 f924 	bl	800735c <vPortExitCritical>
}
 8006114:	bf00      	nop
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006124:	f001 f8e8 	bl	80072f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612c:	2b00      	cmp	r3, #0
 800612e:	d102      	bne.n	8006136 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006130:	2301      	movs	r3, #1
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	e001      	b.n	800613a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006136:	2300      	movs	r3, #0
 8006138:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800613a:	f001 f90f 	bl	800735c <vPortExitCritical>

	return xReturn;
 800613e:	68fb      	ldr	r3, [r7, #12]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08e      	sub	sp, #56	@ 0x38
 800614c:	af04      	add	r7, sp, #16
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
 8006154:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10b      	bne.n	8006174 <xTaskCreateStatic+0x2c>
	__asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	623b      	str	r3, [r7, #32]
}
 800616e:	bf00      	nop
 8006170:	bf00      	nop
 8006172:	e7fd      	b.n	8006170 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10b      	bne.n	8006192 <xTaskCreateStatic+0x4a>
	__asm volatile
 800617a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	61fb      	str	r3, [r7, #28]
}
 800618c:	bf00      	nop
 800618e:	bf00      	nop
 8006190:	e7fd      	b.n	800618e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006192:	23a0      	movs	r3, #160	@ 0xa0
 8006194:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	2ba0      	cmp	r3, #160	@ 0xa0
 800619a:	d00b      	beq.n	80061b4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800619c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	61bb      	str	r3, [r7, #24]
}
 80061ae:	bf00      	nop
 80061b0:	bf00      	nop
 80061b2:	e7fd      	b.n	80061b0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d01e      	beq.n	80061fa <xTaskCreateStatic+0xb2>
 80061bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d01b      	beq.n	80061fa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061ca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061d4:	2300      	movs	r3, #0
 80061d6:	9303      	str	r3, [sp, #12]
 80061d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061da:	9302      	str	r3, [sp, #8]
 80061dc:	f107 0314 	add.w	r3, r7, #20
 80061e0:	9301      	str	r3, [sp, #4]
 80061e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	68b9      	ldr	r1, [r7, #8]
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 f851 	bl	8006294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80061f4:	f000 f8ee 	bl	80063d4 <prvAddNewTaskToReadyList>
 80061f8:	e001      	b.n	80061fe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061fe:	697b      	ldr	r3, [r7, #20]
	}
 8006200:	4618      	mov	r0, r3
 8006202:	3728      	adds	r7, #40	@ 0x28
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006208:	b580      	push	{r7, lr}
 800620a:	b08c      	sub	sp, #48	@ 0x30
 800620c:	af04      	add	r7, sp, #16
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	4613      	mov	r3, r2
 8006216:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006218:	88fb      	ldrh	r3, [r7, #6]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4618      	mov	r0, r3
 800621e:	f001 f98d 	bl	800753c <pvPortMalloc>
 8006222:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00e      	beq.n	8006248 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800622a:	20a0      	movs	r0, #160	@ 0xa0
 800622c:	f001 f986 	bl	800753c <pvPortMalloc>
 8006230:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d003      	beq.n	8006240 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	631a      	str	r2, [r3, #48]	@ 0x30
 800623e:	e005      	b.n	800624c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006240:	6978      	ldr	r0, [r7, #20]
 8006242:	f001 fa49 	bl	80076d8 <vPortFree>
 8006246:	e001      	b.n	800624c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006248:	2300      	movs	r3, #0
 800624a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d017      	beq.n	8006282 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800625a:	88fa      	ldrh	r2, [r7, #6]
 800625c:	2300      	movs	r3, #0
 800625e:	9303      	str	r3, [sp, #12]
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	9302      	str	r3, [sp, #8]
 8006264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006266:	9301      	str	r3, [sp, #4]
 8006268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	68b9      	ldr	r1, [r7, #8]
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 f80f 	bl	8006294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006276:	69f8      	ldr	r0, [r7, #28]
 8006278:	f000 f8ac 	bl	80063d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800627c:	2301      	movs	r3, #1
 800627e:	61bb      	str	r3, [r7, #24]
 8006280:	e002      	b.n	8006288 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006282:	f04f 33ff 	mov.w	r3, #4294967295
 8006286:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006288:	69bb      	ldr	r3, [r7, #24]
	}
 800628a:	4618      	mov	r0, r3
 800628c:	3720      	adds	r7, #32
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
	...

08006294 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b088      	sub	sp, #32
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062ac:	3b01      	subs	r3, #1
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	f023 0307 	bic.w	r3, r3, #7
 80062ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00b      	beq.n	80062de <prvInitialiseNewTask+0x4a>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	617b      	str	r3, [r7, #20]
}
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	e7fd      	b.n	80062da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01f      	beq.n	8006324 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062e4:	2300      	movs	r3, #0
 80062e6:	61fb      	str	r3, [r7, #28]
 80062e8:	e012      	b.n	8006310 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	4413      	add	r3, r2
 80062f0:	7819      	ldrb	r1, [r3, #0]
 80062f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	4413      	add	r3, r2
 80062f8:	3334      	adds	r3, #52	@ 0x34
 80062fa:	460a      	mov	r2, r1
 80062fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	4413      	add	r3, r2
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d006      	beq.n	8006318 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	3301      	adds	r3, #1
 800630e:	61fb      	str	r3, [r7, #28]
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	2b0f      	cmp	r3, #15
 8006314:	d9e9      	bls.n	80062ea <prvInitialiseNewTask+0x56>
 8006316:	e000      	b.n	800631a <prvInitialiseNewTask+0x86>
			{
				break;
 8006318:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800631a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006322:	e003      	b.n	800632c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800632c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632e:	2b06      	cmp	r3, #6
 8006330:	d901      	bls.n	8006336 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006332:	2306      	movs	r3, #6
 8006334:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006338:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800633a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800633c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006340:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006344:	2200      	movs	r2, #0
 8006346:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634a:	3304      	adds	r3, #4
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff fb82 	bl	8005a56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006354:	3318      	adds	r3, #24
 8006356:	4618      	mov	r0, r3
 8006358:	f7ff fb7d 	bl	8005a56 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800635c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006360:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006364:	f1c3 0207 	rsb	r2, r3, #7
 8006368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800636c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006370:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006374:	2200      	movs	r2, #0
 8006376:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800637a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637c:	2200      	movs	r2, #0
 800637e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006384:	334c      	adds	r3, #76	@ 0x4c
 8006386:	224c      	movs	r2, #76	@ 0x4c
 8006388:	2100      	movs	r1, #0
 800638a:	4618      	mov	r0, r3
 800638c:	f001 fae6 	bl	800795c <memset>
 8006390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006392:	4a0d      	ldr	r2, [pc, #52]	@ (80063c8 <prvInitialiseNewTask+0x134>)
 8006394:	651a      	str	r2, [r3, #80]	@ 0x50
 8006396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006398:	4a0c      	ldr	r2, [pc, #48]	@ (80063cc <prvInitialiseNewTask+0x138>)
 800639a:	655a      	str	r2, [r3, #84]	@ 0x54
 800639c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639e:	4a0c      	ldr	r2, [pc, #48]	@ (80063d0 <prvInitialiseNewTask+0x13c>)
 80063a0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	68f9      	ldr	r1, [r7, #12]
 80063a6:	69b8      	ldr	r0, [r7, #24]
 80063a8:	f000 fe72 	bl	8007090 <pxPortInitialiseStack>
 80063ac:	4602      	mov	r2, r0
 80063ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063be:	bf00      	nop
 80063c0:	3720      	adds	r7, #32
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20004388 	.word	0x20004388
 80063cc:	200043f0 	.word	0x200043f0
 80063d0:	20004458 	.word	0x20004458

080063d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063dc:	f000 ff8c 	bl	80072f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063e0:	4b2a      	ldr	r3, [pc, #168]	@ (800648c <prvAddNewTaskToReadyList+0xb8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3301      	adds	r3, #1
 80063e6:	4a29      	ldr	r2, [pc, #164]	@ (800648c <prvAddNewTaskToReadyList+0xb8>)
 80063e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063ea:	4b29      	ldr	r3, [pc, #164]	@ (8006490 <prvAddNewTaskToReadyList+0xbc>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d109      	bne.n	8006406 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063f2:	4a27      	ldr	r2, [pc, #156]	@ (8006490 <prvAddNewTaskToReadyList+0xbc>)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063f8:	4b24      	ldr	r3, [pc, #144]	@ (800648c <prvAddNewTaskToReadyList+0xb8>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d110      	bne.n	8006422 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006400:	f000 fbe4 	bl	8006bcc <prvInitialiseTaskLists>
 8006404:	e00d      	b.n	8006422 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006406:	4b23      	ldr	r3, [pc, #140]	@ (8006494 <prvAddNewTaskToReadyList+0xc0>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d109      	bne.n	8006422 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800640e:	4b20      	ldr	r3, [pc, #128]	@ (8006490 <prvAddNewTaskToReadyList+0xbc>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006418:	429a      	cmp	r2, r3
 800641a:	d802      	bhi.n	8006422 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800641c:	4a1c      	ldr	r2, [pc, #112]	@ (8006490 <prvAddNewTaskToReadyList+0xbc>)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006422:	4b1d      	ldr	r3, [pc, #116]	@ (8006498 <prvAddNewTaskToReadyList+0xc4>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3301      	adds	r3, #1
 8006428:	4a1b      	ldr	r2, [pc, #108]	@ (8006498 <prvAddNewTaskToReadyList+0xc4>)
 800642a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006430:	2201      	movs	r2, #1
 8006432:	409a      	lsls	r2, r3
 8006434:	4b19      	ldr	r3, [pc, #100]	@ (800649c <prvAddNewTaskToReadyList+0xc8>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4313      	orrs	r3, r2
 800643a:	4a18      	ldr	r2, [pc, #96]	@ (800649c <prvAddNewTaskToReadyList+0xc8>)
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006442:	4613      	mov	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4a15      	ldr	r2, [pc, #84]	@ (80064a0 <prvAddNewTaskToReadyList+0xcc>)
 800644c:	441a      	add	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	3304      	adds	r3, #4
 8006452:	4619      	mov	r1, r3
 8006454:	4610      	mov	r0, r2
 8006456:	f7ff fb0b 	bl	8005a70 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800645a:	f000 ff7f 	bl	800735c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800645e:	4b0d      	ldr	r3, [pc, #52]	@ (8006494 <prvAddNewTaskToReadyList+0xc0>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00e      	beq.n	8006484 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006466:	4b0a      	ldr	r3, [pc, #40]	@ (8006490 <prvAddNewTaskToReadyList+0xbc>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006470:	429a      	cmp	r2, r3
 8006472:	d207      	bcs.n	8006484 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006474:	4b0b      	ldr	r3, [pc, #44]	@ (80064a4 <prvAddNewTaskToReadyList+0xd0>)
 8006476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006484:	bf00      	nop
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	20000734 	.word	0x20000734
 8006490:	20000634 	.word	0x20000634
 8006494:	20000740 	.word	0x20000740
 8006498:	20000750 	.word	0x20000750
 800649c:	2000073c 	.word	0x2000073c
 80064a0:	20000638 	.word	0x20000638
 80064a4:	e000ed04 	.word	0xe000ed04

080064a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064b0:	2300      	movs	r3, #0
 80064b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d018      	beq.n	80064ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064ba:	4b14      	ldr	r3, [pc, #80]	@ (800650c <vTaskDelay+0x64>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00b      	beq.n	80064da <vTaskDelay+0x32>
	__asm volatile
 80064c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	60bb      	str	r3, [r7, #8]
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop
 80064d8:	e7fd      	b.n	80064d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064da:	f000 f885 	bl	80065e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064de:	2100      	movs	r1, #0
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fd6f 	bl	8006fc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064e6:	f000 f88d 	bl	8006604 <xTaskResumeAll>
 80064ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d107      	bne.n	8006502 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80064f2:	4b07      	ldr	r3, [pc, #28]	@ (8006510 <vTaskDelay+0x68>)
 80064f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006502:	bf00      	nop
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	2000075c 	.word	0x2000075c
 8006510:	e000ed04 	.word	0xe000ed04

08006514 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08a      	sub	sp, #40	@ 0x28
 8006518:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800651a:	2300      	movs	r3, #0
 800651c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800651e:	2300      	movs	r3, #0
 8006520:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006522:	463a      	mov	r2, r7
 8006524:	1d39      	adds	r1, r7, #4
 8006526:	f107 0308 	add.w	r3, r7, #8
 800652a:	4618      	mov	r0, r3
 800652c:	f7fa f846 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	9202      	str	r2, [sp, #8]
 8006538:	9301      	str	r3, [sp, #4]
 800653a:	2300      	movs	r3, #0
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	2300      	movs	r3, #0
 8006540:	460a      	mov	r2, r1
 8006542:	4921      	ldr	r1, [pc, #132]	@ (80065c8 <vTaskStartScheduler+0xb4>)
 8006544:	4821      	ldr	r0, [pc, #132]	@ (80065cc <vTaskStartScheduler+0xb8>)
 8006546:	f7ff fdff 	bl	8006148 <xTaskCreateStatic>
 800654a:	4603      	mov	r3, r0
 800654c:	4a20      	ldr	r2, [pc, #128]	@ (80065d0 <vTaskStartScheduler+0xbc>)
 800654e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006550:	4b1f      	ldr	r3, [pc, #124]	@ (80065d0 <vTaskStartScheduler+0xbc>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006558:	2301      	movs	r3, #1
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	e001      	b.n	8006562 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800655e:	2300      	movs	r3, #0
 8006560:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d11b      	bne.n	80065a0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	613b      	str	r3, [r7, #16]
}
 800657a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800657c:	4b15      	ldr	r3, [pc, #84]	@ (80065d4 <vTaskStartScheduler+0xc0>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	334c      	adds	r3, #76	@ 0x4c
 8006582:	4a15      	ldr	r2, [pc, #84]	@ (80065d8 <vTaskStartScheduler+0xc4>)
 8006584:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006586:	4b15      	ldr	r3, [pc, #84]	@ (80065dc <vTaskStartScheduler+0xc8>)
 8006588:	f04f 32ff 	mov.w	r2, #4294967295
 800658c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800658e:	4b14      	ldr	r3, [pc, #80]	@ (80065e0 <vTaskStartScheduler+0xcc>)
 8006590:	2201      	movs	r2, #1
 8006592:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006594:	4b13      	ldr	r3, [pc, #76]	@ (80065e4 <vTaskStartScheduler+0xd0>)
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800659a:	f000 fe09 	bl	80071b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800659e:	e00f      	b.n	80065c0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a6:	d10b      	bne.n	80065c0 <vTaskStartScheduler+0xac>
	__asm volatile
 80065a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	60fb      	str	r3, [r7, #12]
}
 80065ba:	bf00      	nop
 80065bc:	bf00      	nop
 80065be:	e7fd      	b.n	80065bc <vTaskStartScheduler+0xa8>
}
 80065c0:	bf00      	nop
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	08008494 	.word	0x08008494
 80065cc:	08006b9d 	.word	0x08006b9d
 80065d0:	20000758 	.word	0x20000758
 80065d4:	20000634 	.word	0x20000634
 80065d8:	200000c0 	.word	0x200000c0
 80065dc:	20000754 	.word	0x20000754
 80065e0:	20000740 	.word	0x20000740
 80065e4:	20000738 	.word	0x20000738

080065e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065e8:	b480      	push	{r7}
 80065ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80065ec:	4b04      	ldr	r3, [pc, #16]	@ (8006600 <vTaskSuspendAll+0x18>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3301      	adds	r3, #1
 80065f2:	4a03      	ldr	r2, [pc, #12]	@ (8006600 <vTaskSuspendAll+0x18>)
 80065f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80065f6:	bf00      	nop
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	2000075c 	.word	0x2000075c

08006604 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800660e:	2300      	movs	r3, #0
 8006610:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006612:	4b42      	ldr	r3, [pc, #264]	@ (800671c <xTaskResumeAll+0x118>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10b      	bne.n	8006632 <xTaskResumeAll+0x2e>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	603b      	str	r3, [r7, #0]
}
 800662c:	bf00      	nop
 800662e:	bf00      	nop
 8006630:	e7fd      	b.n	800662e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006632:	f000 fe61 	bl	80072f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006636:	4b39      	ldr	r3, [pc, #228]	@ (800671c <xTaskResumeAll+0x118>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3b01      	subs	r3, #1
 800663c:	4a37      	ldr	r2, [pc, #220]	@ (800671c <xTaskResumeAll+0x118>)
 800663e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006640:	4b36      	ldr	r3, [pc, #216]	@ (800671c <xTaskResumeAll+0x118>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d161      	bne.n	800670c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006648:	4b35      	ldr	r3, [pc, #212]	@ (8006720 <xTaskResumeAll+0x11c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d05d      	beq.n	800670c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006650:	e02e      	b.n	80066b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006652:	4b34      	ldr	r3, [pc, #208]	@ (8006724 <xTaskResumeAll+0x120>)
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3318      	adds	r3, #24
 800665e:	4618      	mov	r0, r3
 8006660:	f7ff fa63 	bl	8005b2a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	3304      	adds	r3, #4
 8006668:	4618      	mov	r0, r3
 800666a:	f7ff fa5e 	bl	8005b2a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006672:	2201      	movs	r2, #1
 8006674:	409a      	lsls	r2, r3
 8006676:	4b2c      	ldr	r3, [pc, #176]	@ (8006728 <xTaskResumeAll+0x124>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4313      	orrs	r3, r2
 800667c:	4a2a      	ldr	r2, [pc, #168]	@ (8006728 <xTaskResumeAll+0x124>)
 800667e:	6013      	str	r3, [r2, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006684:	4613      	mov	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4a27      	ldr	r2, [pc, #156]	@ (800672c <xTaskResumeAll+0x128>)
 800668e:	441a      	add	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3304      	adds	r3, #4
 8006694:	4619      	mov	r1, r3
 8006696:	4610      	mov	r0, r2
 8006698:	f7ff f9ea 	bl	8005a70 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a0:	4b23      	ldr	r3, [pc, #140]	@ (8006730 <xTaskResumeAll+0x12c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d302      	bcc.n	80066b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80066aa:	4b22      	ldr	r3, [pc, #136]	@ (8006734 <xTaskResumeAll+0x130>)
 80066ac:	2201      	movs	r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066b0:	4b1c      	ldr	r3, [pc, #112]	@ (8006724 <xTaskResumeAll+0x120>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1cc      	bne.n	8006652 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066be:	f000 fb29 	bl	8006d14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006738 <xTaskResumeAll+0x134>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d010      	beq.n	80066f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066ce:	f000 f837 	bl	8006740 <xTaskIncrementTick>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d002      	beq.n	80066de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80066d8:	4b16      	ldr	r3, [pc, #88]	@ (8006734 <xTaskResumeAll+0x130>)
 80066da:	2201      	movs	r2, #1
 80066dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1f1      	bne.n	80066ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80066ea:	4b13      	ldr	r3, [pc, #76]	@ (8006738 <xTaskResumeAll+0x134>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066f0:	4b10      	ldr	r3, [pc, #64]	@ (8006734 <xTaskResumeAll+0x130>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d009      	beq.n	800670c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066f8:	2301      	movs	r3, #1
 80066fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066fc:	4b0f      	ldr	r3, [pc, #60]	@ (800673c <xTaskResumeAll+0x138>)
 80066fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	f3bf 8f4f 	dsb	sy
 8006708:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800670c:	f000 fe26 	bl	800735c <vPortExitCritical>

	return xAlreadyYielded;
 8006710:	68bb      	ldr	r3, [r7, #8]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	2000075c 	.word	0x2000075c
 8006720:	20000734 	.word	0x20000734
 8006724:	200006f4 	.word	0x200006f4
 8006728:	2000073c 	.word	0x2000073c
 800672c:	20000638 	.word	0x20000638
 8006730:	20000634 	.word	0x20000634
 8006734:	20000748 	.word	0x20000748
 8006738:	20000744 	.word	0x20000744
 800673c:	e000ed04 	.word	0xe000ed04

08006740 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006746:	2300      	movs	r3, #0
 8006748:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800674a:	4b4f      	ldr	r3, [pc, #316]	@ (8006888 <xTaskIncrementTick+0x148>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	f040 808f 	bne.w	8006872 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006754:	4b4d      	ldr	r3, [pc, #308]	@ (800688c <xTaskIncrementTick+0x14c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3301      	adds	r3, #1
 800675a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800675c:	4a4b      	ldr	r2, [pc, #300]	@ (800688c <xTaskIncrementTick+0x14c>)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d121      	bne.n	80067ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006768:	4b49      	ldr	r3, [pc, #292]	@ (8006890 <xTaskIncrementTick+0x150>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00b      	beq.n	800678a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	603b      	str	r3, [r7, #0]
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop
 8006788:	e7fd      	b.n	8006786 <xTaskIncrementTick+0x46>
 800678a:	4b41      	ldr	r3, [pc, #260]	@ (8006890 <xTaskIncrementTick+0x150>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	4b40      	ldr	r3, [pc, #256]	@ (8006894 <xTaskIncrementTick+0x154>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a3e      	ldr	r2, [pc, #248]	@ (8006890 <xTaskIncrementTick+0x150>)
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	4a3e      	ldr	r2, [pc, #248]	@ (8006894 <xTaskIncrementTick+0x154>)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	4b3e      	ldr	r3, [pc, #248]	@ (8006898 <xTaskIncrementTick+0x158>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3301      	adds	r3, #1
 80067a4:	4a3c      	ldr	r2, [pc, #240]	@ (8006898 <xTaskIncrementTick+0x158>)
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	f000 fab4 	bl	8006d14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067ac:	4b3b      	ldr	r3, [pc, #236]	@ (800689c <xTaskIncrementTick+0x15c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d348      	bcc.n	8006848 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067b6:	4b36      	ldr	r3, [pc, #216]	@ (8006890 <xTaskIncrementTick+0x150>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d104      	bne.n	80067ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067c0:	4b36      	ldr	r3, [pc, #216]	@ (800689c <xTaskIncrementTick+0x15c>)
 80067c2:	f04f 32ff 	mov.w	r2, #4294967295
 80067c6:	601a      	str	r2, [r3, #0]
					break;
 80067c8:	e03e      	b.n	8006848 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ca:	4b31      	ldr	r3, [pc, #196]	@ (8006890 <xTaskIncrementTick+0x150>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d203      	bcs.n	80067ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067e2:	4a2e      	ldr	r2, [pc, #184]	@ (800689c <xTaskIncrementTick+0x15c>)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067e8:	e02e      	b.n	8006848 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	3304      	adds	r3, #4
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff f99b 	bl	8005b2a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d004      	beq.n	8006806 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	3318      	adds	r3, #24
 8006800:	4618      	mov	r0, r3
 8006802:	f7ff f992 	bl	8005b2a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680a:	2201      	movs	r2, #1
 800680c:	409a      	lsls	r2, r3
 800680e:	4b24      	ldr	r3, [pc, #144]	@ (80068a0 <xTaskIncrementTick+0x160>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4313      	orrs	r3, r2
 8006814:	4a22      	ldr	r2, [pc, #136]	@ (80068a0 <xTaskIncrementTick+0x160>)
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800681c:	4613      	mov	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4a1f      	ldr	r2, [pc, #124]	@ (80068a4 <xTaskIncrementTick+0x164>)
 8006826:	441a      	add	r2, r3
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	3304      	adds	r3, #4
 800682c:	4619      	mov	r1, r3
 800682e:	4610      	mov	r0, r2
 8006830:	f7ff f91e 	bl	8005a70 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006838:	4b1b      	ldr	r3, [pc, #108]	@ (80068a8 <xTaskIncrementTick+0x168>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683e:	429a      	cmp	r2, r3
 8006840:	d3b9      	bcc.n	80067b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006842:	2301      	movs	r3, #1
 8006844:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006846:	e7b6      	b.n	80067b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006848:	4b17      	ldr	r3, [pc, #92]	@ (80068a8 <xTaskIncrementTick+0x168>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800684e:	4915      	ldr	r1, [pc, #84]	@ (80068a4 <xTaskIncrementTick+0x164>)
 8006850:	4613      	mov	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	440b      	add	r3, r1
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d901      	bls.n	8006864 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006860:	2301      	movs	r3, #1
 8006862:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006864:	4b11      	ldr	r3, [pc, #68]	@ (80068ac <xTaskIncrementTick+0x16c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d007      	beq.n	800687c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800686c:	2301      	movs	r3, #1
 800686e:	617b      	str	r3, [r7, #20]
 8006870:	e004      	b.n	800687c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006872:	4b0f      	ldr	r3, [pc, #60]	@ (80068b0 <xTaskIncrementTick+0x170>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3301      	adds	r3, #1
 8006878:	4a0d      	ldr	r2, [pc, #52]	@ (80068b0 <xTaskIncrementTick+0x170>)
 800687a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800687c:	697b      	ldr	r3, [r7, #20]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	2000075c 	.word	0x2000075c
 800688c:	20000738 	.word	0x20000738
 8006890:	200006ec 	.word	0x200006ec
 8006894:	200006f0 	.word	0x200006f0
 8006898:	2000074c 	.word	0x2000074c
 800689c:	20000754 	.word	0x20000754
 80068a0:	2000073c 	.word	0x2000073c
 80068a4:	20000638 	.word	0x20000638
 80068a8:	20000634 	.word	0x20000634
 80068ac:	20000748 	.word	0x20000748
 80068b0:	20000744 	.word	0x20000744

080068b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068ba:	4b2a      	ldr	r3, [pc, #168]	@ (8006964 <vTaskSwitchContext+0xb0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068c2:	4b29      	ldr	r3, [pc, #164]	@ (8006968 <vTaskSwitchContext+0xb4>)
 80068c4:	2201      	movs	r2, #1
 80068c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068c8:	e045      	b.n	8006956 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80068ca:	4b27      	ldr	r3, [pc, #156]	@ (8006968 <vTaskSwitchContext+0xb4>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068d0:	4b26      	ldr	r3, [pc, #152]	@ (800696c <vTaskSwitchContext+0xb8>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	fab3 f383 	clz	r3, r3
 80068dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80068de:	7afb      	ldrb	r3, [r7, #11]
 80068e0:	f1c3 031f 	rsb	r3, r3, #31
 80068e4:	617b      	str	r3, [r7, #20]
 80068e6:	4922      	ldr	r1, [pc, #136]	@ (8006970 <vTaskSwitchContext+0xbc>)
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10b      	bne.n	8006912 <vTaskSwitchContext+0x5e>
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	607b      	str	r3, [r7, #4]
}
 800690c:	bf00      	nop
 800690e:	bf00      	nop
 8006910:	e7fd      	b.n	800690e <vTaskSwitchContext+0x5a>
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	4613      	mov	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4a14      	ldr	r2, [pc, #80]	@ (8006970 <vTaskSwitchContext+0xbc>)
 800691e:	4413      	add	r3, r2
 8006920:	613b      	str	r3, [r7, #16]
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	605a      	str	r2, [r3, #4]
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	3308      	adds	r3, #8
 8006934:	429a      	cmp	r2, r3
 8006936:	d104      	bne.n	8006942 <vTaskSwitchContext+0x8e>
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	605a      	str	r2, [r3, #4]
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	4a0a      	ldr	r2, [pc, #40]	@ (8006974 <vTaskSwitchContext+0xc0>)
 800694a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800694c:	4b09      	ldr	r3, [pc, #36]	@ (8006974 <vTaskSwitchContext+0xc0>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	334c      	adds	r3, #76	@ 0x4c
 8006952:	4a09      	ldr	r2, [pc, #36]	@ (8006978 <vTaskSwitchContext+0xc4>)
 8006954:	6013      	str	r3, [r2, #0]
}
 8006956:	bf00      	nop
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	2000075c 	.word	0x2000075c
 8006968:	20000748 	.word	0x20000748
 800696c:	2000073c 	.word	0x2000073c
 8006970:	20000638 	.word	0x20000638
 8006974:	20000634 	.word	0x20000634
 8006978:	200000c0 	.word	0x200000c0

0800697c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10b      	bne.n	80069a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	60fb      	str	r3, [r7, #12]
}
 800699e:	bf00      	nop
 80069a0:	bf00      	nop
 80069a2:	e7fd      	b.n	80069a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069a4:	4b07      	ldr	r3, [pc, #28]	@ (80069c4 <vTaskPlaceOnEventList+0x48>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3318      	adds	r3, #24
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7ff f883 	bl	8005ab8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069b2:	2101      	movs	r1, #1
 80069b4:	6838      	ldr	r0, [r7, #0]
 80069b6:	f000 fb05 	bl	8006fc4 <prvAddCurrentTaskToDelayedList>
}
 80069ba:	bf00      	nop
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	20000634 	.word	0x20000634

080069c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10b      	bne.n	80069f6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	60fb      	str	r3, [r7, #12]
}
 80069f0:	bf00      	nop
 80069f2:	bf00      	nop
 80069f4:	e7fd      	b.n	80069f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	3318      	adds	r3, #24
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff f895 	bl	8005b2a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a00:	4b1d      	ldr	r3, [pc, #116]	@ (8006a78 <xTaskRemoveFromEventList+0xb0>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d11c      	bne.n	8006a42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7ff f88c 	bl	8005b2a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a16:	2201      	movs	r2, #1
 8006a18:	409a      	lsls	r2, r3
 8006a1a:	4b18      	ldr	r3, [pc, #96]	@ (8006a7c <xTaskRemoveFromEventList+0xb4>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	4a16      	ldr	r2, [pc, #88]	@ (8006a7c <xTaskRemoveFromEventList+0xb4>)
 8006a22:	6013      	str	r3, [r2, #0]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a28:	4613      	mov	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4a13      	ldr	r2, [pc, #76]	@ (8006a80 <xTaskRemoveFromEventList+0xb8>)
 8006a32:	441a      	add	r2, r3
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	3304      	adds	r3, #4
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	f7ff f818 	bl	8005a70 <vListInsertEnd>
 8006a40:	e005      	b.n	8006a4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	3318      	adds	r3, #24
 8006a46:	4619      	mov	r1, r3
 8006a48:	480e      	ldr	r0, [pc, #56]	@ (8006a84 <xTaskRemoveFromEventList+0xbc>)
 8006a4a:	f7ff f811 	bl	8005a70 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a52:	4b0d      	ldr	r3, [pc, #52]	@ (8006a88 <xTaskRemoveFromEventList+0xc0>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d905      	bls.n	8006a68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a60:	4b0a      	ldr	r3, [pc, #40]	@ (8006a8c <xTaskRemoveFromEventList+0xc4>)
 8006a62:	2201      	movs	r2, #1
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	e001      	b.n	8006a6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a6c:	697b      	ldr	r3, [r7, #20]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3718      	adds	r7, #24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	2000075c 	.word	0x2000075c
 8006a7c:	2000073c 	.word	0x2000073c
 8006a80:	20000638 	.word	0x20000638
 8006a84:	200006f4 	.word	0x200006f4
 8006a88:	20000634 	.word	0x20000634
 8006a8c:	20000748 	.word	0x20000748

08006a90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a98:	4b06      	ldr	r3, [pc, #24]	@ (8006ab4 <vTaskInternalSetTimeOutState+0x24>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006aa0:	4b05      	ldr	r3, [pc, #20]	@ (8006ab8 <vTaskInternalSetTimeOutState+0x28>)
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	605a      	str	r2, [r3, #4]
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	2000074c 	.word	0x2000074c
 8006ab8:	20000738 	.word	0x20000738

08006abc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b088      	sub	sp, #32
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10b      	bne.n	8006ae4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	613b      	str	r3, [r7, #16]
}
 8006ade:	bf00      	nop
 8006ae0:	bf00      	nop
 8006ae2:	e7fd      	b.n	8006ae0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10b      	bne.n	8006b02 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aee:	f383 8811 	msr	BASEPRI, r3
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	60fb      	str	r3, [r7, #12]
}
 8006afc:	bf00      	nop
 8006afe:	bf00      	nop
 8006b00:	e7fd      	b.n	8006afe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006b02:	f000 fbf9 	bl	80072f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b06:	4b1d      	ldr	r3, [pc, #116]	@ (8006b7c <xTaskCheckForTimeOut+0xc0>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1e:	d102      	bne.n	8006b26 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b20:	2300      	movs	r3, #0
 8006b22:	61fb      	str	r3, [r7, #28]
 8006b24:	e023      	b.n	8006b6e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	4b15      	ldr	r3, [pc, #84]	@ (8006b80 <xTaskCheckForTimeOut+0xc4>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d007      	beq.n	8006b42 <xTaskCheckForTimeOut+0x86>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d302      	bcc.n	8006b42 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	61fb      	str	r3, [r7, #28]
 8006b40:	e015      	b.n	8006b6e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d20b      	bcs.n	8006b64 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	1ad2      	subs	r2, r2, r3
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7ff ff99 	bl	8006a90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	61fb      	str	r3, [r7, #28]
 8006b62:	e004      	b.n	8006b6e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b6e:	f000 fbf5 	bl	800735c <vPortExitCritical>

	return xReturn;
 8006b72:	69fb      	ldr	r3, [r7, #28]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3720      	adds	r7, #32
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	20000738 	.word	0x20000738
 8006b80:	2000074c 	.word	0x2000074c

08006b84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b84:	b480      	push	{r7}
 8006b86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b88:	4b03      	ldr	r3, [pc, #12]	@ (8006b98 <vTaskMissedYield+0x14>)
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	601a      	str	r2, [r3, #0]
}
 8006b8e:	bf00      	nop
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	20000748 	.word	0x20000748

08006b9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ba4:	f000 f852 	bl	8006c4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ba8:	4b06      	ldr	r3, [pc, #24]	@ (8006bc4 <prvIdleTask+0x28>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d9f9      	bls.n	8006ba4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006bb0:	4b05      	ldr	r3, [pc, #20]	@ (8006bc8 <prvIdleTask+0x2c>)
 8006bb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bc0:	e7f0      	b.n	8006ba4 <prvIdleTask+0x8>
 8006bc2:	bf00      	nop
 8006bc4:	20000638 	.word	0x20000638
 8006bc8:	e000ed04 	.word	0xe000ed04

08006bcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	607b      	str	r3, [r7, #4]
 8006bd6:	e00c      	b.n	8006bf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4a12      	ldr	r2, [pc, #72]	@ (8006c2c <prvInitialiseTaskLists+0x60>)
 8006be4:	4413      	add	r3, r2
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe ff15 	bl	8005a16 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	607b      	str	r3, [r7, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b06      	cmp	r3, #6
 8006bf6:	d9ef      	bls.n	8006bd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006bf8:	480d      	ldr	r0, [pc, #52]	@ (8006c30 <prvInitialiseTaskLists+0x64>)
 8006bfa:	f7fe ff0c 	bl	8005a16 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006bfe:	480d      	ldr	r0, [pc, #52]	@ (8006c34 <prvInitialiseTaskLists+0x68>)
 8006c00:	f7fe ff09 	bl	8005a16 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c04:	480c      	ldr	r0, [pc, #48]	@ (8006c38 <prvInitialiseTaskLists+0x6c>)
 8006c06:	f7fe ff06 	bl	8005a16 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c0a:	480c      	ldr	r0, [pc, #48]	@ (8006c3c <prvInitialiseTaskLists+0x70>)
 8006c0c:	f7fe ff03 	bl	8005a16 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c10:	480b      	ldr	r0, [pc, #44]	@ (8006c40 <prvInitialiseTaskLists+0x74>)
 8006c12:	f7fe ff00 	bl	8005a16 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c16:	4b0b      	ldr	r3, [pc, #44]	@ (8006c44 <prvInitialiseTaskLists+0x78>)
 8006c18:	4a05      	ldr	r2, [pc, #20]	@ (8006c30 <prvInitialiseTaskLists+0x64>)
 8006c1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c48 <prvInitialiseTaskLists+0x7c>)
 8006c1e:	4a05      	ldr	r2, [pc, #20]	@ (8006c34 <prvInitialiseTaskLists+0x68>)
 8006c20:	601a      	str	r2, [r3, #0]
}
 8006c22:	bf00      	nop
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20000638 	.word	0x20000638
 8006c30:	200006c4 	.word	0x200006c4
 8006c34:	200006d8 	.word	0x200006d8
 8006c38:	200006f4 	.word	0x200006f4
 8006c3c:	20000708 	.word	0x20000708
 8006c40:	20000720 	.word	0x20000720
 8006c44:	200006ec 	.word	0x200006ec
 8006c48:	200006f0 	.word	0x200006f0

08006c4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c52:	e019      	b.n	8006c88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c54:	f000 fb50 	bl	80072f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c58:	4b10      	ldr	r3, [pc, #64]	@ (8006c9c <prvCheckTasksWaitingTermination+0x50>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3304      	adds	r3, #4
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fe ff60 	bl	8005b2a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca0 <prvCheckTasksWaitingTermination+0x54>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	4a0b      	ldr	r2, [pc, #44]	@ (8006ca0 <prvCheckTasksWaitingTermination+0x54>)
 8006c72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c74:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca4 <prvCheckTasksWaitingTermination+0x58>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8006ca4 <prvCheckTasksWaitingTermination+0x58>)
 8006c7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c7e:	f000 fb6d 	bl	800735c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f810 	bl	8006ca8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c88:	4b06      	ldr	r3, [pc, #24]	@ (8006ca4 <prvCheckTasksWaitingTermination+0x58>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1e1      	bne.n	8006c54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c90:	bf00      	nop
 8006c92:	bf00      	nop
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000708 	.word	0x20000708
 8006ca0:	20000734 	.word	0x20000734
 8006ca4:	2000071c 	.word	0x2000071c

08006ca8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	334c      	adds	r3, #76	@ 0x4c
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fe59 	bl	800796c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d108      	bne.n	8006cd6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 fd05 	bl	80076d8 <vPortFree>
				vPortFree( pxTCB );
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fd02 	bl	80076d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006cd4:	e019      	b.n	8006d0a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d103      	bne.n	8006ce8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fcf9 	bl	80076d8 <vPortFree>
	}
 8006ce6:	e010      	b.n	8006d0a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d00b      	beq.n	8006d0a <prvDeleteTCB+0x62>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	60fb      	str	r3, [r7, #12]
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop
 8006d08:	e7fd      	b.n	8006d06 <prvDeleteTCB+0x5e>
	}
 8006d0a:	bf00      	nop
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d4c <prvResetNextTaskUnblockTime+0x38>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d104      	bne.n	8006d2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d24:	4b0a      	ldr	r3, [pc, #40]	@ (8006d50 <prvResetNextTaskUnblockTime+0x3c>)
 8006d26:	f04f 32ff 	mov.w	r2, #4294967295
 8006d2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d2c:	e008      	b.n	8006d40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d2e:	4b07      	ldr	r3, [pc, #28]	@ (8006d4c <prvResetNextTaskUnblockTime+0x38>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	4a04      	ldr	r2, [pc, #16]	@ (8006d50 <prvResetNextTaskUnblockTime+0x3c>)
 8006d3e:	6013      	str	r3, [r2, #0]
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr
 8006d4c:	200006ec 	.word	0x200006ec
 8006d50:	20000754 	.word	0x20000754

08006d54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d88 <xTaskGetSchedulerState+0x34>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d102      	bne.n	8006d68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d62:	2301      	movs	r3, #1
 8006d64:	607b      	str	r3, [r7, #4]
 8006d66:	e008      	b.n	8006d7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d68:	4b08      	ldr	r3, [pc, #32]	@ (8006d8c <xTaskGetSchedulerState+0x38>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d102      	bne.n	8006d76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d70:	2302      	movs	r3, #2
 8006d72:	607b      	str	r3, [r7, #4]
 8006d74:	e001      	b.n	8006d7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d76:	2300      	movs	r3, #0
 8006d78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d7a:	687b      	ldr	r3, [r7, #4]
	}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	20000740 	.word	0x20000740
 8006d8c:	2000075c 	.word	0x2000075c

08006d90 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d05e      	beq.n	8006e64 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006daa:	4b31      	ldr	r3, [pc, #196]	@ (8006e70 <xTaskPriorityInherit+0xe0>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d24e      	bcs.n	8006e52 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	db06      	blt.n	8006dca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8006e70 <xTaskPriorityInherit+0xe0>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc2:	f1c3 0207 	rsb	r2, r3, #7
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	6959      	ldr	r1, [r3, #20]
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4a26      	ldr	r2, [pc, #152]	@ (8006e74 <xTaskPriorityInherit+0xe4>)
 8006ddc:	4413      	add	r3, r2
 8006dde:	4299      	cmp	r1, r3
 8006de0:	d12f      	bne.n	8006e42 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	3304      	adds	r3, #4
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fe fe9f 	bl	8005b2a <uxListRemove>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10a      	bne.n	8006e08 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df6:	2201      	movs	r2, #1
 8006df8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfc:	43da      	mvns	r2, r3
 8006dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8006e78 <xTaskPriorityInherit+0xe8>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4013      	ands	r3, r2
 8006e04:	4a1c      	ldr	r2, [pc, #112]	@ (8006e78 <xTaskPriorityInherit+0xe8>)
 8006e06:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e08:	4b19      	ldr	r3, [pc, #100]	@ (8006e70 <xTaskPriorityInherit+0xe0>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e16:	2201      	movs	r2, #1
 8006e18:	409a      	lsls	r2, r3
 8006e1a:	4b17      	ldr	r3, [pc, #92]	@ (8006e78 <xTaskPriorityInherit+0xe8>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	4a15      	ldr	r2, [pc, #84]	@ (8006e78 <xTaskPriorityInherit+0xe8>)
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e28:	4613      	mov	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4a10      	ldr	r2, [pc, #64]	@ (8006e74 <xTaskPriorityInherit+0xe4>)
 8006e32:	441a      	add	r2, r3
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	3304      	adds	r3, #4
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	f7fe fe18 	bl	8005a70 <vListInsertEnd>
 8006e40:	e004      	b.n	8006e4c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e42:	4b0b      	ldr	r3, [pc, #44]	@ (8006e70 <xTaskPriorityInherit+0xe0>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	60fb      	str	r3, [r7, #12]
 8006e50:	e008      	b.n	8006e64 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e56:	4b06      	ldr	r3, [pc, #24]	@ (8006e70 <xTaskPriorityInherit+0xe0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d201      	bcs.n	8006e64 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006e60:	2301      	movs	r3, #1
 8006e62:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e64:	68fb      	ldr	r3, [r7, #12]
	}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	20000634 	.word	0x20000634
 8006e74:	20000638 	.word	0x20000638
 8006e78:	2000073c 	.word	0x2000073c

08006e7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b088      	sub	sp, #32
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d079      	beq.n	8006f88 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10b      	bne.n	8006eb4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	60fb      	str	r3, [r7, #12]
}
 8006eae:	bf00      	nop
 8006eb0:	bf00      	nop
 8006eb2:	e7fd      	b.n	8006eb0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d902      	bls.n	8006ec4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	61fb      	str	r3, [r7, #28]
 8006ec2:	e002      	b.n	8006eca <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ec8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ece:	69fa      	ldr	r2, [r7, #28]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d059      	beq.n	8006f88 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d154      	bne.n	8006f88 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006ede:	4b2c      	ldr	r3, [pc, #176]	@ (8006f90 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	69ba      	ldr	r2, [r7, #24]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d10b      	bne.n	8006f00 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	60bb      	str	r3, [r7, #8]
}
 8006efa:	bf00      	nop
 8006efc:	bf00      	nop
 8006efe:	e7fd      	b.n	8006efc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	69fa      	ldr	r2, [r7, #28]
 8006f0a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	db04      	blt.n	8006f1e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	f1c3 0207 	rsb	r2, r3, #7
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	6959      	ldr	r1, [r3, #20]
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4a19      	ldr	r2, [pc, #100]	@ (8006f94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006f2e:	4413      	add	r3, r2
 8006f30:	4299      	cmp	r1, r3
 8006f32:	d129      	bne.n	8006f88 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	3304      	adds	r3, #4
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fe fdf6 	bl	8005b2a <uxListRemove>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10a      	bne.n	8006f5a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f48:	2201      	movs	r2, #1
 8006f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4e:	43da      	mvns	r2, r3
 8006f50:	4b11      	ldr	r3, [pc, #68]	@ (8006f98 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4013      	ands	r3, r2
 8006f56:	4a10      	ldr	r2, [pc, #64]	@ (8006f98 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006f58:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5e:	2201      	movs	r2, #1
 8006f60:	409a      	lsls	r2, r3
 8006f62:	4b0d      	ldr	r3, [pc, #52]	@ (8006f98 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	4a0b      	ldr	r2, [pc, #44]	@ (8006f98 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006f6a:	6013      	str	r3, [r2, #0]
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f70:	4613      	mov	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4a06      	ldr	r2, [pc, #24]	@ (8006f94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006f7a:	441a      	add	r2, r3
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	4619      	mov	r1, r3
 8006f82:	4610      	mov	r0, r2
 8006f84:	f7fe fd74 	bl	8005a70 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f88:	bf00      	nop
 8006f8a:	3720      	adds	r7, #32
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	20000634 	.word	0x20000634
 8006f94:	20000638 	.word	0x20000638
 8006f98:	2000073c 	.word	0x2000073c

08006f9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006f9c:	b480      	push	{r7}
 8006f9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006fa0:	4b07      	ldr	r3, [pc, #28]	@ (8006fc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d004      	beq.n	8006fb2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006fa8:	4b05      	ldr	r3, [pc, #20]	@ (8006fc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006fae:	3201      	adds	r2, #1
 8006fb0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8006fb2:	4b03      	ldr	r3, [pc, #12]	@ (8006fc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
	}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	20000634 	.word	0x20000634

08006fc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fce:	4b29      	ldr	r3, [pc, #164]	@ (8007074 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fd4:	4b28      	ldr	r3, [pc, #160]	@ (8007078 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3304      	adds	r3, #4
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fe fda5 	bl	8005b2a <uxListRemove>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10b      	bne.n	8006ffe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006fe6:	4b24      	ldr	r3, [pc, #144]	@ (8007078 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fec:	2201      	movs	r2, #1
 8006fee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff2:	43da      	mvns	r2, r3
 8006ff4:	4b21      	ldr	r3, [pc, #132]	@ (800707c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	4a20      	ldr	r2, [pc, #128]	@ (800707c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ffc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007004:	d10a      	bne.n	800701c <prvAddCurrentTaskToDelayedList+0x58>
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d007      	beq.n	800701c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800700c:	4b1a      	ldr	r3, [pc, #104]	@ (8007078 <prvAddCurrentTaskToDelayedList+0xb4>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3304      	adds	r3, #4
 8007012:	4619      	mov	r1, r3
 8007014:	481a      	ldr	r0, [pc, #104]	@ (8007080 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007016:	f7fe fd2b 	bl	8005a70 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800701a:	e026      	b.n	800706a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4413      	add	r3, r2
 8007022:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007024:	4b14      	ldr	r3, [pc, #80]	@ (8007078 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	429a      	cmp	r2, r3
 8007032:	d209      	bcs.n	8007048 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007034:	4b13      	ldr	r3, [pc, #76]	@ (8007084 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	4b0f      	ldr	r3, [pc, #60]	@ (8007078 <prvAddCurrentTaskToDelayedList+0xb4>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3304      	adds	r3, #4
 800703e:	4619      	mov	r1, r3
 8007040:	4610      	mov	r0, r2
 8007042:	f7fe fd39 	bl	8005ab8 <vListInsert>
}
 8007046:	e010      	b.n	800706a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007048:	4b0f      	ldr	r3, [pc, #60]	@ (8007088 <prvAddCurrentTaskToDelayedList+0xc4>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	4b0a      	ldr	r3, [pc, #40]	@ (8007078 <prvAddCurrentTaskToDelayedList+0xb4>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	3304      	adds	r3, #4
 8007052:	4619      	mov	r1, r3
 8007054:	4610      	mov	r0, r2
 8007056:	f7fe fd2f 	bl	8005ab8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800705a:	4b0c      	ldr	r3, [pc, #48]	@ (800708c <prvAddCurrentTaskToDelayedList+0xc8>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	429a      	cmp	r2, r3
 8007062:	d202      	bcs.n	800706a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007064:	4a09      	ldr	r2, [pc, #36]	@ (800708c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	6013      	str	r3, [r2, #0]
}
 800706a:	bf00      	nop
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	20000738 	.word	0x20000738
 8007078:	20000634 	.word	0x20000634
 800707c:	2000073c 	.word	0x2000073c
 8007080:	20000720 	.word	0x20000720
 8007084:	200006f0 	.word	0x200006f0
 8007088:	200006ec 	.word	0x200006ec
 800708c:	20000754 	.word	0x20000754

08007090 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	3b04      	subs	r3, #4
 80070a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80070a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3b04      	subs	r3, #4
 80070ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	f023 0201 	bic.w	r2, r3, #1
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	3b04      	subs	r3, #4
 80070be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070c0:	4a0c      	ldr	r2, [pc, #48]	@ (80070f4 <pxPortInitialiseStack+0x64>)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3b14      	subs	r3, #20
 80070ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	3b04      	subs	r3, #4
 80070d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f06f 0202 	mvn.w	r2, #2
 80070de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3b20      	subs	r3, #32
 80070e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070e6:	68fb      	ldr	r3, [r7, #12]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	080070f9 	.word	0x080070f9

080070f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80070fe:	2300      	movs	r3, #0
 8007100:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007102:	4b13      	ldr	r3, [pc, #76]	@ (8007150 <prvTaskExitError+0x58>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710a:	d00b      	beq.n	8007124 <prvTaskExitError+0x2c>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	60fb      	str	r3, [r7, #12]
}
 800711e:	bf00      	nop
 8007120:	bf00      	nop
 8007122:	e7fd      	b.n	8007120 <prvTaskExitError+0x28>
	__asm volatile
 8007124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007128:	f383 8811 	msr	BASEPRI, r3
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	60bb      	str	r3, [r7, #8]
}
 8007136:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007138:	bf00      	nop
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d0fc      	beq.n	800713a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007140:	bf00      	nop
 8007142:	bf00      	nop
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	200000bc 	.word	0x200000bc
	...

08007160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007160:	4b07      	ldr	r3, [pc, #28]	@ (8007180 <pxCurrentTCBConst2>)
 8007162:	6819      	ldr	r1, [r3, #0]
 8007164:	6808      	ldr	r0, [r1, #0]
 8007166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716a:	f380 8809 	msr	PSP, r0
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f04f 0000 	mov.w	r0, #0
 8007176:	f380 8811 	msr	BASEPRI, r0
 800717a:	4770      	bx	lr
 800717c:	f3af 8000 	nop.w

08007180 <pxCurrentTCBConst2>:
 8007180:	20000634 	.word	0x20000634
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007184:	bf00      	nop
 8007186:	bf00      	nop

08007188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007188:	4808      	ldr	r0, [pc, #32]	@ (80071ac <prvPortStartFirstTask+0x24>)
 800718a:	6800      	ldr	r0, [r0, #0]
 800718c:	6800      	ldr	r0, [r0, #0]
 800718e:	f380 8808 	msr	MSP, r0
 8007192:	f04f 0000 	mov.w	r0, #0
 8007196:	f380 8814 	msr	CONTROL, r0
 800719a:	b662      	cpsie	i
 800719c:	b661      	cpsie	f
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	df00      	svc	0
 80071a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80071aa:	bf00      	nop
 80071ac:	e000ed08 	.word	0xe000ed08

080071b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80071b6:	4b47      	ldr	r3, [pc, #284]	@ (80072d4 <xPortStartScheduler+0x124>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a47      	ldr	r2, [pc, #284]	@ (80072d8 <xPortStartScheduler+0x128>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d10b      	bne.n	80071d8 <xPortStartScheduler+0x28>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	60fb      	str	r3, [r7, #12]
}
 80071d2:	bf00      	nop
 80071d4:	bf00      	nop
 80071d6:	e7fd      	b.n	80071d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80071d8:	4b3e      	ldr	r3, [pc, #248]	@ (80072d4 <xPortStartScheduler+0x124>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a3f      	ldr	r2, [pc, #252]	@ (80072dc <xPortStartScheduler+0x12c>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d10b      	bne.n	80071fa <xPortStartScheduler+0x4a>
	__asm volatile
 80071e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	613b      	str	r3, [r7, #16]
}
 80071f4:	bf00      	nop
 80071f6:	bf00      	nop
 80071f8:	e7fd      	b.n	80071f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80071fa:	4b39      	ldr	r3, [pc, #228]	@ (80072e0 <xPortStartScheduler+0x130>)
 80071fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	b2db      	uxtb	r3, r3
 8007204:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	22ff      	movs	r2, #255	@ 0xff
 800720a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	b2db      	uxtb	r3, r3
 8007212:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007214:	78fb      	ldrb	r3, [r7, #3]
 8007216:	b2db      	uxtb	r3, r3
 8007218:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800721c:	b2da      	uxtb	r2, r3
 800721e:	4b31      	ldr	r3, [pc, #196]	@ (80072e4 <xPortStartScheduler+0x134>)
 8007220:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007222:	4b31      	ldr	r3, [pc, #196]	@ (80072e8 <xPortStartScheduler+0x138>)
 8007224:	2207      	movs	r2, #7
 8007226:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007228:	e009      	b.n	800723e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800722a:	4b2f      	ldr	r3, [pc, #188]	@ (80072e8 <xPortStartScheduler+0x138>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	3b01      	subs	r3, #1
 8007230:	4a2d      	ldr	r2, [pc, #180]	@ (80072e8 <xPortStartScheduler+0x138>)
 8007232:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	b2db      	uxtb	r3, r3
 8007238:	005b      	lsls	r3, r3, #1
 800723a:	b2db      	uxtb	r3, r3
 800723c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800723e:	78fb      	ldrb	r3, [r7, #3]
 8007240:	b2db      	uxtb	r3, r3
 8007242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007246:	2b80      	cmp	r3, #128	@ 0x80
 8007248:	d0ef      	beq.n	800722a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800724a:	4b27      	ldr	r3, [pc, #156]	@ (80072e8 <xPortStartScheduler+0x138>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f1c3 0307 	rsb	r3, r3, #7
 8007252:	2b04      	cmp	r3, #4
 8007254:	d00b      	beq.n	800726e <xPortStartScheduler+0xbe>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	60bb      	str	r3, [r7, #8]
}
 8007268:	bf00      	nop
 800726a:	bf00      	nop
 800726c:	e7fd      	b.n	800726a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800726e:	4b1e      	ldr	r3, [pc, #120]	@ (80072e8 <xPortStartScheduler+0x138>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	021b      	lsls	r3, r3, #8
 8007274:	4a1c      	ldr	r2, [pc, #112]	@ (80072e8 <xPortStartScheduler+0x138>)
 8007276:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007278:	4b1b      	ldr	r3, [pc, #108]	@ (80072e8 <xPortStartScheduler+0x138>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007280:	4a19      	ldr	r2, [pc, #100]	@ (80072e8 <xPortStartScheduler+0x138>)
 8007282:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	b2da      	uxtb	r2, r3
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800728c:	4b17      	ldr	r3, [pc, #92]	@ (80072ec <xPortStartScheduler+0x13c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a16      	ldr	r2, [pc, #88]	@ (80072ec <xPortStartScheduler+0x13c>)
 8007292:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007296:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007298:	4b14      	ldr	r3, [pc, #80]	@ (80072ec <xPortStartScheduler+0x13c>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a13      	ldr	r2, [pc, #76]	@ (80072ec <xPortStartScheduler+0x13c>)
 800729e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80072a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072a4:	f000 f8da 	bl	800745c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80072a8:	4b11      	ldr	r3, [pc, #68]	@ (80072f0 <xPortStartScheduler+0x140>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80072ae:	f000 f8f9 	bl	80074a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072b2:	4b10      	ldr	r3, [pc, #64]	@ (80072f4 <xPortStartScheduler+0x144>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a0f      	ldr	r2, [pc, #60]	@ (80072f4 <xPortStartScheduler+0x144>)
 80072b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80072bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80072be:	f7ff ff63 	bl	8007188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072c2:	f7ff faf7 	bl	80068b4 <vTaskSwitchContext>
	prvTaskExitError();
 80072c6:	f7ff ff17 	bl	80070f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	e000ed00 	.word	0xe000ed00
 80072d8:	410fc271 	.word	0x410fc271
 80072dc:	410fc270 	.word	0x410fc270
 80072e0:	e000e400 	.word	0xe000e400
 80072e4:	20000760 	.word	0x20000760
 80072e8:	20000764 	.word	0x20000764
 80072ec:	e000ed20 	.word	0xe000ed20
 80072f0:	200000bc 	.word	0x200000bc
 80072f4:	e000ef34 	.word	0xe000ef34

080072f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	607b      	str	r3, [r7, #4]
}
 8007310:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007312:	4b10      	ldr	r3, [pc, #64]	@ (8007354 <vPortEnterCritical+0x5c>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3301      	adds	r3, #1
 8007318:	4a0e      	ldr	r2, [pc, #56]	@ (8007354 <vPortEnterCritical+0x5c>)
 800731a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800731c:	4b0d      	ldr	r3, [pc, #52]	@ (8007354 <vPortEnterCritical+0x5c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d110      	bne.n	8007346 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007324:	4b0c      	ldr	r3, [pc, #48]	@ (8007358 <vPortEnterCritical+0x60>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00b      	beq.n	8007346 <vPortEnterCritical+0x4e>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	603b      	str	r3, [r7, #0]
}
 8007340:	bf00      	nop
 8007342:	bf00      	nop
 8007344:	e7fd      	b.n	8007342 <vPortEnterCritical+0x4a>
	}
}
 8007346:	bf00      	nop
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	200000bc 	.word	0x200000bc
 8007358:	e000ed04 	.word	0xe000ed04

0800735c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007362:	4b12      	ldr	r3, [pc, #72]	@ (80073ac <vPortExitCritical+0x50>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10b      	bne.n	8007382 <vPortExitCritical+0x26>
	__asm volatile
 800736a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800736e:	f383 8811 	msr	BASEPRI, r3
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	f3bf 8f4f 	dsb	sy
 800737a:	607b      	str	r3, [r7, #4]
}
 800737c:	bf00      	nop
 800737e:	bf00      	nop
 8007380:	e7fd      	b.n	800737e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007382:	4b0a      	ldr	r3, [pc, #40]	@ (80073ac <vPortExitCritical+0x50>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3b01      	subs	r3, #1
 8007388:	4a08      	ldr	r2, [pc, #32]	@ (80073ac <vPortExitCritical+0x50>)
 800738a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800738c:	4b07      	ldr	r3, [pc, #28]	@ (80073ac <vPortExitCritical+0x50>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d105      	bne.n	80073a0 <vPortExitCritical+0x44>
 8007394:	2300      	movs	r3, #0
 8007396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	f383 8811 	msr	BASEPRI, r3
}
 800739e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	200000bc 	.word	0x200000bc

080073b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80073b0:	f3ef 8009 	mrs	r0, PSP
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	4b15      	ldr	r3, [pc, #84]	@ (8007410 <pxCurrentTCBConst>)
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	f01e 0f10 	tst.w	lr, #16
 80073c0:	bf08      	it	eq
 80073c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80073c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ca:	6010      	str	r0, [r2, #0]
 80073cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80073d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80073d4:	f380 8811 	msr	BASEPRI, r0
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f7ff fa68 	bl	80068b4 <vTaskSwitchContext>
 80073e4:	f04f 0000 	mov.w	r0, #0
 80073e8:	f380 8811 	msr	BASEPRI, r0
 80073ec:	bc09      	pop	{r0, r3}
 80073ee:	6819      	ldr	r1, [r3, #0]
 80073f0:	6808      	ldr	r0, [r1, #0]
 80073f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f6:	f01e 0f10 	tst.w	lr, #16
 80073fa:	bf08      	it	eq
 80073fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007400:	f380 8809 	msr	PSP, r0
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	f3af 8000 	nop.w

08007410 <pxCurrentTCBConst>:
 8007410:	20000634 	.word	0x20000634
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007414:	bf00      	nop
 8007416:	bf00      	nop

08007418 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	607b      	str	r3, [r7, #4]
}
 8007430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007432:	f7ff f985 	bl	8006740 <xTaskIncrementTick>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d003      	beq.n	8007444 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800743c:	4b06      	ldr	r3, [pc, #24]	@ (8007458 <SysTick_Handler+0x40>)
 800743e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007442:	601a      	str	r2, [r3, #0]
 8007444:	2300      	movs	r3, #0
 8007446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	f383 8811 	msr	BASEPRI, r3
}
 800744e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	e000ed04 	.word	0xe000ed04

0800745c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800745c:	b480      	push	{r7}
 800745e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007460:	4b0b      	ldr	r3, [pc, #44]	@ (8007490 <vPortSetupTimerInterrupt+0x34>)
 8007462:	2200      	movs	r2, #0
 8007464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007466:	4b0b      	ldr	r3, [pc, #44]	@ (8007494 <vPortSetupTimerInterrupt+0x38>)
 8007468:	2200      	movs	r2, #0
 800746a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800746c:	4b0a      	ldr	r3, [pc, #40]	@ (8007498 <vPortSetupTimerInterrupt+0x3c>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a0a      	ldr	r2, [pc, #40]	@ (800749c <vPortSetupTimerInterrupt+0x40>)
 8007472:	fba2 2303 	umull	r2, r3, r2, r3
 8007476:	099b      	lsrs	r3, r3, #6
 8007478:	4a09      	ldr	r2, [pc, #36]	@ (80074a0 <vPortSetupTimerInterrupt+0x44>)
 800747a:	3b01      	subs	r3, #1
 800747c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800747e:	4b04      	ldr	r3, [pc, #16]	@ (8007490 <vPortSetupTimerInterrupt+0x34>)
 8007480:	2207      	movs	r2, #7
 8007482:	601a      	str	r2, [r3, #0]
}
 8007484:	bf00      	nop
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	e000e010 	.word	0xe000e010
 8007494:	e000e018 	.word	0xe000e018
 8007498:	200000b0 	.word	0x200000b0
 800749c:	10624dd3 	.word	0x10624dd3
 80074a0:	e000e014 	.word	0xe000e014

080074a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80074a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80074b4 <vPortEnableVFP+0x10>
 80074a8:	6801      	ldr	r1, [r0, #0]
 80074aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80074ae:	6001      	str	r1, [r0, #0]
 80074b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80074b2:	bf00      	nop
 80074b4:	e000ed88 	.word	0xe000ed88

080074b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80074be:	f3ef 8305 	mrs	r3, IPSR
 80074c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b0f      	cmp	r3, #15
 80074c8:	d915      	bls.n	80074f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80074ca:	4a18      	ldr	r2, [pc, #96]	@ (800752c <vPortValidateInterruptPriority+0x74>)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	4413      	add	r3, r2
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80074d4:	4b16      	ldr	r3, [pc, #88]	@ (8007530 <vPortValidateInterruptPriority+0x78>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	7afa      	ldrb	r2, [r7, #11]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d20b      	bcs.n	80074f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80074de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	607b      	str	r3, [r7, #4]
}
 80074f0:	bf00      	nop
 80074f2:	bf00      	nop
 80074f4:	e7fd      	b.n	80074f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80074f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007534 <vPortValidateInterruptPriority+0x7c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80074fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007538 <vPortValidateInterruptPriority+0x80>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	429a      	cmp	r2, r3
 8007504:	d90b      	bls.n	800751e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	603b      	str	r3, [r7, #0]
}
 8007518:	bf00      	nop
 800751a:	bf00      	nop
 800751c:	e7fd      	b.n	800751a <vPortValidateInterruptPriority+0x62>
	}
 800751e:	bf00      	nop
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	e000e3f0 	.word	0xe000e3f0
 8007530:	20000760 	.word	0x20000760
 8007534:	e000ed0c 	.word	0xe000ed0c
 8007538:	20000764 	.word	0x20000764

0800753c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b08a      	sub	sp, #40	@ 0x28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007544:	2300      	movs	r3, #0
 8007546:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007548:	f7ff f84e 	bl	80065e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800754c:	4b5c      	ldr	r3, [pc, #368]	@ (80076c0 <pvPortMalloc+0x184>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d101      	bne.n	8007558 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007554:	f000 f924 	bl	80077a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007558:	4b5a      	ldr	r3, [pc, #360]	@ (80076c4 <pvPortMalloc+0x188>)
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4013      	ands	r3, r2
 8007560:	2b00      	cmp	r3, #0
 8007562:	f040 8095 	bne.w	8007690 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d01e      	beq.n	80075aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800756c:	2208      	movs	r2, #8
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4413      	add	r3, r2
 8007572:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f003 0307 	and.w	r3, r3, #7
 800757a:	2b00      	cmp	r3, #0
 800757c:	d015      	beq.n	80075aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f023 0307 	bic.w	r3, r3, #7
 8007584:	3308      	adds	r3, #8
 8007586:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f003 0307 	and.w	r3, r3, #7
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00b      	beq.n	80075aa <pvPortMalloc+0x6e>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	617b      	str	r3, [r7, #20]
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	e7fd      	b.n	80075a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d06f      	beq.n	8007690 <pvPortMalloc+0x154>
 80075b0:	4b45      	ldr	r3, [pc, #276]	@ (80076c8 <pvPortMalloc+0x18c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d86a      	bhi.n	8007690 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80075ba:	4b44      	ldr	r3, [pc, #272]	@ (80076cc <pvPortMalloc+0x190>)
 80075bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80075be:	4b43      	ldr	r3, [pc, #268]	@ (80076cc <pvPortMalloc+0x190>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075c4:	e004      	b.n	80075d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80075c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d903      	bls.n	80075e2 <pvPortMalloc+0xa6>
 80075da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1f1      	bne.n	80075c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075e2:	4b37      	ldr	r3, [pc, #220]	@ (80076c0 <pvPortMalloc+0x184>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d051      	beq.n	8007690 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2208      	movs	r2, #8
 80075f2:	4413      	add	r3, r2
 80075f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80075f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	1ad2      	subs	r2, r2, r3
 8007606:	2308      	movs	r3, #8
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	429a      	cmp	r2, r3
 800760c:	d920      	bls.n	8007650 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800760e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4413      	add	r3, r2
 8007614:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	f003 0307 	and.w	r3, r3, #7
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <pvPortMalloc+0xfc>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	613b      	str	r3, [r7, #16]
}
 8007632:	bf00      	nop
 8007634:	bf00      	nop
 8007636:	e7fd      	b.n	8007634 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	1ad2      	subs	r2, r2, r3
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800764a:	69b8      	ldr	r0, [r7, #24]
 800764c:	f000 f90a 	bl	8007864 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007650:	4b1d      	ldr	r3, [pc, #116]	@ (80076c8 <pvPortMalloc+0x18c>)
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	4a1b      	ldr	r2, [pc, #108]	@ (80076c8 <pvPortMalloc+0x18c>)
 800765c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800765e:	4b1a      	ldr	r3, [pc, #104]	@ (80076c8 <pvPortMalloc+0x18c>)
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	4b1b      	ldr	r3, [pc, #108]	@ (80076d0 <pvPortMalloc+0x194>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	429a      	cmp	r2, r3
 8007668:	d203      	bcs.n	8007672 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800766a:	4b17      	ldr	r3, [pc, #92]	@ (80076c8 <pvPortMalloc+0x18c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a18      	ldr	r2, [pc, #96]	@ (80076d0 <pvPortMalloc+0x194>)
 8007670:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	4b13      	ldr	r3, [pc, #76]	@ (80076c4 <pvPortMalloc+0x188>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	431a      	orrs	r2, r3
 800767c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007682:	2200      	movs	r2, #0
 8007684:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007686:	4b13      	ldr	r3, [pc, #76]	@ (80076d4 <pvPortMalloc+0x198>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3301      	adds	r3, #1
 800768c:	4a11      	ldr	r2, [pc, #68]	@ (80076d4 <pvPortMalloc+0x198>)
 800768e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007690:	f7fe ffb8 	bl	8006604 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	f003 0307 	and.w	r3, r3, #7
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00b      	beq.n	80076b6 <pvPortMalloc+0x17a>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	60fb      	str	r3, [r7, #12]
}
 80076b0:	bf00      	nop
 80076b2:	bf00      	nop
 80076b4:	e7fd      	b.n	80076b2 <pvPortMalloc+0x176>
	return pvReturn;
 80076b6:	69fb      	ldr	r3, [r7, #28]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3728      	adds	r7, #40	@ 0x28
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	20004370 	.word	0x20004370
 80076c4:	20004384 	.word	0x20004384
 80076c8:	20004374 	.word	0x20004374
 80076cc:	20004368 	.word	0x20004368
 80076d0:	20004378 	.word	0x20004378
 80076d4:	2000437c 	.word	0x2000437c

080076d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d04f      	beq.n	800778a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80076ea:	2308      	movs	r3, #8
 80076ec:	425b      	negs	r3, r3
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	4413      	add	r3, r2
 80076f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	4b25      	ldr	r3, [pc, #148]	@ (8007794 <vPortFree+0xbc>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4013      	ands	r3, r2
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10b      	bne.n	800771e <vPortFree+0x46>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	60fb      	str	r3, [r7, #12]
}
 8007718:	bf00      	nop
 800771a:	bf00      	nop
 800771c:	e7fd      	b.n	800771a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00b      	beq.n	800773e <vPortFree+0x66>
	__asm volatile
 8007726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772a:	f383 8811 	msr	BASEPRI, r3
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f3bf 8f4f 	dsb	sy
 8007736:	60bb      	str	r3, [r7, #8]
}
 8007738:	bf00      	nop
 800773a:	bf00      	nop
 800773c:	e7fd      	b.n	800773a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	4b14      	ldr	r3, [pc, #80]	@ (8007794 <vPortFree+0xbc>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4013      	ands	r3, r2
 8007748:	2b00      	cmp	r3, #0
 800774a:	d01e      	beq.n	800778a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d11a      	bne.n	800778a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	4b0e      	ldr	r3, [pc, #56]	@ (8007794 <vPortFree+0xbc>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	43db      	mvns	r3, r3
 800775e:	401a      	ands	r2, r3
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007764:	f7fe ff40 	bl	80065e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	4b0a      	ldr	r3, [pc, #40]	@ (8007798 <vPortFree+0xc0>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4413      	add	r3, r2
 8007772:	4a09      	ldr	r2, [pc, #36]	@ (8007798 <vPortFree+0xc0>)
 8007774:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007776:	6938      	ldr	r0, [r7, #16]
 8007778:	f000 f874 	bl	8007864 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800777c:	4b07      	ldr	r3, [pc, #28]	@ (800779c <vPortFree+0xc4>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3301      	adds	r3, #1
 8007782:	4a06      	ldr	r2, [pc, #24]	@ (800779c <vPortFree+0xc4>)
 8007784:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007786:	f7fe ff3d 	bl	8006604 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800778a:	bf00      	nop
 800778c:	3718      	adds	r7, #24
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	20004384 	.word	0x20004384
 8007798:	20004374 	.word	0x20004374
 800779c:	20004380 	.word	0x20004380

080077a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80077aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077ac:	4b27      	ldr	r3, [pc, #156]	@ (800784c <prvHeapInit+0xac>)
 80077ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f003 0307 	and.w	r3, r3, #7
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00c      	beq.n	80077d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3307      	adds	r3, #7
 80077be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0307 	bic.w	r3, r3, #7
 80077c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	4a1f      	ldr	r2, [pc, #124]	@ (800784c <prvHeapInit+0xac>)
 80077d0:	4413      	add	r3, r2
 80077d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007850 <prvHeapInit+0xb0>)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077de:	4b1c      	ldr	r3, [pc, #112]	@ (8007850 <prvHeapInit+0xb0>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	4413      	add	r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80077ec:	2208      	movs	r2, #8
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	1a9b      	subs	r3, r3, r2
 80077f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f023 0307 	bic.w	r3, r3, #7
 80077fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4a15      	ldr	r2, [pc, #84]	@ (8007854 <prvHeapInit+0xb4>)
 8007800:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007802:	4b14      	ldr	r3, [pc, #80]	@ (8007854 <prvHeapInit+0xb4>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2200      	movs	r2, #0
 8007808:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800780a:	4b12      	ldr	r3, [pc, #72]	@ (8007854 <prvHeapInit+0xb4>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2200      	movs	r2, #0
 8007810:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	1ad2      	subs	r2, r2, r3
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007820:	4b0c      	ldr	r3, [pc, #48]	@ (8007854 <prvHeapInit+0xb4>)
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	4a0a      	ldr	r2, [pc, #40]	@ (8007858 <prvHeapInit+0xb8>)
 800782e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	4a09      	ldr	r2, [pc, #36]	@ (800785c <prvHeapInit+0xbc>)
 8007836:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007838:	4b09      	ldr	r3, [pc, #36]	@ (8007860 <prvHeapInit+0xc0>)
 800783a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800783e:	601a      	str	r2, [r3, #0]
}
 8007840:	bf00      	nop
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	20000768 	.word	0x20000768
 8007850:	20004368 	.word	0x20004368
 8007854:	20004370 	.word	0x20004370
 8007858:	20004378 	.word	0x20004378
 800785c:	20004374 	.word	0x20004374
 8007860:	20004384 	.word	0x20004384

08007864 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800786c:	4b28      	ldr	r3, [pc, #160]	@ (8007910 <prvInsertBlockIntoFreeList+0xac>)
 800786e:	60fb      	str	r3, [r7, #12]
 8007870:	e002      	b.n	8007878 <prvInsertBlockIntoFreeList+0x14>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	429a      	cmp	r2, r3
 8007880:	d8f7      	bhi.n	8007872 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	4413      	add	r3, r2
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	429a      	cmp	r2, r3
 8007892:	d108      	bne.n	80078a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	685a      	ldr	r2, [r3, #4]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	441a      	add	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	441a      	add	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d118      	bne.n	80078ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	4b15      	ldr	r3, [pc, #84]	@ (8007914 <prvInsertBlockIntoFreeList+0xb0>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d00d      	beq.n	80078e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	441a      	add	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	e008      	b.n	80078f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007914 <prvInsertBlockIntoFreeList+0xb0>)
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	e003      	b.n	80078f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d002      	beq.n	8007902 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007902:	bf00      	nop
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	20004368 	.word	0x20004368
 8007914:	20004370 	.word	0x20004370

08007918 <siprintf>:
 8007918:	b40e      	push	{r1, r2, r3}
 800791a:	b510      	push	{r4, lr}
 800791c:	b09d      	sub	sp, #116	@ 0x74
 800791e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007920:	9002      	str	r0, [sp, #8]
 8007922:	9006      	str	r0, [sp, #24]
 8007924:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007928:	480a      	ldr	r0, [pc, #40]	@ (8007954 <siprintf+0x3c>)
 800792a:	9107      	str	r1, [sp, #28]
 800792c:	9104      	str	r1, [sp, #16]
 800792e:	490a      	ldr	r1, [pc, #40]	@ (8007958 <siprintf+0x40>)
 8007930:	f853 2b04 	ldr.w	r2, [r3], #4
 8007934:	9105      	str	r1, [sp, #20]
 8007936:	2400      	movs	r4, #0
 8007938:	a902      	add	r1, sp, #8
 800793a:	6800      	ldr	r0, [r0, #0]
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007940:	f000 fa00 	bl	8007d44 <_svfiprintf_r>
 8007944:	9b02      	ldr	r3, [sp, #8]
 8007946:	701c      	strb	r4, [r3, #0]
 8007948:	b01d      	add	sp, #116	@ 0x74
 800794a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800794e:	b003      	add	sp, #12
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	200000c0 	.word	0x200000c0
 8007958:	ffff0208 	.word	0xffff0208

0800795c <memset>:
 800795c:	4402      	add	r2, r0
 800795e:	4603      	mov	r3, r0
 8007960:	4293      	cmp	r3, r2
 8007962:	d100      	bne.n	8007966 <memset+0xa>
 8007964:	4770      	bx	lr
 8007966:	f803 1b01 	strb.w	r1, [r3], #1
 800796a:	e7f9      	b.n	8007960 <memset+0x4>

0800796c <_reclaim_reent>:
 800796c:	4b2d      	ldr	r3, [pc, #180]	@ (8007a24 <_reclaim_reent+0xb8>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4283      	cmp	r3, r0
 8007972:	b570      	push	{r4, r5, r6, lr}
 8007974:	4604      	mov	r4, r0
 8007976:	d053      	beq.n	8007a20 <_reclaim_reent+0xb4>
 8007978:	69c3      	ldr	r3, [r0, #28]
 800797a:	b31b      	cbz	r3, 80079c4 <_reclaim_reent+0x58>
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	b163      	cbz	r3, 800799a <_reclaim_reent+0x2e>
 8007980:	2500      	movs	r5, #0
 8007982:	69e3      	ldr	r3, [r4, #28]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	5959      	ldr	r1, [r3, r5]
 8007988:	b9b1      	cbnz	r1, 80079b8 <_reclaim_reent+0x4c>
 800798a:	3504      	adds	r5, #4
 800798c:	2d80      	cmp	r5, #128	@ 0x80
 800798e:	d1f8      	bne.n	8007982 <_reclaim_reent+0x16>
 8007990:	69e3      	ldr	r3, [r4, #28]
 8007992:	4620      	mov	r0, r4
 8007994:	68d9      	ldr	r1, [r3, #12]
 8007996:	f000 f881 	bl	8007a9c <_free_r>
 800799a:	69e3      	ldr	r3, [r4, #28]
 800799c:	6819      	ldr	r1, [r3, #0]
 800799e:	b111      	cbz	r1, 80079a6 <_reclaim_reent+0x3a>
 80079a0:	4620      	mov	r0, r4
 80079a2:	f000 f87b 	bl	8007a9c <_free_r>
 80079a6:	69e3      	ldr	r3, [r4, #28]
 80079a8:	689d      	ldr	r5, [r3, #8]
 80079aa:	b15d      	cbz	r5, 80079c4 <_reclaim_reent+0x58>
 80079ac:	4629      	mov	r1, r5
 80079ae:	4620      	mov	r0, r4
 80079b0:	682d      	ldr	r5, [r5, #0]
 80079b2:	f000 f873 	bl	8007a9c <_free_r>
 80079b6:	e7f8      	b.n	80079aa <_reclaim_reent+0x3e>
 80079b8:	680e      	ldr	r6, [r1, #0]
 80079ba:	4620      	mov	r0, r4
 80079bc:	f000 f86e 	bl	8007a9c <_free_r>
 80079c0:	4631      	mov	r1, r6
 80079c2:	e7e1      	b.n	8007988 <_reclaim_reent+0x1c>
 80079c4:	6961      	ldr	r1, [r4, #20]
 80079c6:	b111      	cbz	r1, 80079ce <_reclaim_reent+0x62>
 80079c8:	4620      	mov	r0, r4
 80079ca:	f000 f867 	bl	8007a9c <_free_r>
 80079ce:	69e1      	ldr	r1, [r4, #28]
 80079d0:	b111      	cbz	r1, 80079d8 <_reclaim_reent+0x6c>
 80079d2:	4620      	mov	r0, r4
 80079d4:	f000 f862 	bl	8007a9c <_free_r>
 80079d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80079da:	b111      	cbz	r1, 80079e2 <_reclaim_reent+0x76>
 80079dc:	4620      	mov	r0, r4
 80079de:	f000 f85d 	bl	8007a9c <_free_r>
 80079e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079e4:	b111      	cbz	r1, 80079ec <_reclaim_reent+0x80>
 80079e6:	4620      	mov	r0, r4
 80079e8:	f000 f858 	bl	8007a9c <_free_r>
 80079ec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80079ee:	b111      	cbz	r1, 80079f6 <_reclaim_reent+0x8a>
 80079f0:	4620      	mov	r0, r4
 80079f2:	f000 f853 	bl	8007a9c <_free_r>
 80079f6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80079f8:	b111      	cbz	r1, 8007a00 <_reclaim_reent+0x94>
 80079fa:	4620      	mov	r0, r4
 80079fc:	f000 f84e 	bl	8007a9c <_free_r>
 8007a00:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007a02:	b111      	cbz	r1, 8007a0a <_reclaim_reent+0x9e>
 8007a04:	4620      	mov	r0, r4
 8007a06:	f000 f849 	bl	8007a9c <_free_r>
 8007a0a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007a0c:	b111      	cbz	r1, 8007a14 <_reclaim_reent+0xa8>
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f000 f844 	bl	8007a9c <_free_r>
 8007a14:	6a23      	ldr	r3, [r4, #32]
 8007a16:	b11b      	cbz	r3, 8007a20 <_reclaim_reent+0xb4>
 8007a18:	4620      	mov	r0, r4
 8007a1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a1e:	4718      	bx	r3
 8007a20:	bd70      	pop	{r4, r5, r6, pc}
 8007a22:	bf00      	nop
 8007a24:	200000c0 	.word	0x200000c0

08007a28 <__errno>:
 8007a28:	4b01      	ldr	r3, [pc, #4]	@ (8007a30 <__errno+0x8>)
 8007a2a:	6818      	ldr	r0, [r3, #0]
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	200000c0 	.word	0x200000c0

08007a34 <__libc_init_array>:
 8007a34:	b570      	push	{r4, r5, r6, lr}
 8007a36:	4d0d      	ldr	r5, [pc, #52]	@ (8007a6c <__libc_init_array+0x38>)
 8007a38:	4c0d      	ldr	r4, [pc, #52]	@ (8007a70 <__libc_init_array+0x3c>)
 8007a3a:	1b64      	subs	r4, r4, r5
 8007a3c:	10a4      	asrs	r4, r4, #2
 8007a3e:	2600      	movs	r6, #0
 8007a40:	42a6      	cmp	r6, r4
 8007a42:	d109      	bne.n	8007a58 <__libc_init_array+0x24>
 8007a44:	4d0b      	ldr	r5, [pc, #44]	@ (8007a74 <__libc_init_array+0x40>)
 8007a46:	4c0c      	ldr	r4, [pc, #48]	@ (8007a78 <__libc_init_array+0x44>)
 8007a48:	f000 fc64 	bl	8008314 <_init>
 8007a4c:	1b64      	subs	r4, r4, r5
 8007a4e:	10a4      	asrs	r4, r4, #2
 8007a50:	2600      	movs	r6, #0
 8007a52:	42a6      	cmp	r6, r4
 8007a54:	d105      	bne.n	8007a62 <__libc_init_array+0x2e>
 8007a56:	bd70      	pop	{r4, r5, r6, pc}
 8007a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a5c:	4798      	blx	r3
 8007a5e:	3601      	adds	r6, #1
 8007a60:	e7ee      	b.n	8007a40 <__libc_init_array+0xc>
 8007a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a66:	4798      	blx	r3
 8007a68:	3601      	adds	r6, #1
 8007a6a:	e7f2      	b.n	8007a52 <__libc_init_array+0x1e>
 8007a6c:	080084f8 	.word	0x080084f8
 8007a70:	080084f8 	.word	0x080084f8
 8007a74:	080084f8 	.word	0x080084f8
 8007a78:	080084fc 	.word	0x080084fc

08007a7c <__retarget_lock_acquire_recursive>:
 8007a7c:	4770      	bx	lr

08007a7e <__retarget_lock_release_recursive>:
 8007a7e:	4770      	bx	lr

08007a80 <memcpy>:
 8007a80:	440a      	add	r2, r1
 8007a82:	4291      	cmp	r1, r2
 8007a84:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a88:	d100      	bne.n	8007a8c <memcpy+0xc>
 8007a8a:	4770      	bx	lr
 8007a8c:	b510      	push	{r4, lr}
 8007a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a96:	4291      	cmp	r1, r2
 8007a98:	d1f9      	bne.n	8007a8e <memcpy+0xe>
 8007a9a:	bd10      	pop	{r4, pc}

08007a9c <_free_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	2900      	cmp	r1, #0
 8007aa2:	d041      	beq.n	8007b28 <_free_r+0x8c>
 8007aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aa8:	1f0c      	subs	r4, r1, #4
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	bfb8      	it	lt
 8007aae:	18e4      	addlt	r4, r4, r3
 8007ab0:	f000 f8e0 	bl	8007c74 <__malloc_lock>
 8007ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8007b2c <_free_r+0x90>)
 8007ab6:	6813      	ldr	r3, [r2, #0]
 8007ab8:	b933      	cbnz	r3, 8007ac8 <_free_r+0x2c>
 8007aba:	6063      	str	r3, [r4, #4]
 8007abc:	6014      	str	r4, [r2, #0]
 8007abe:	4628      	mov	r0, r5
 8007ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ac4:	f000 b8dc 	b.w	8007c80 <__malloc_unlock>
 8007ac8:	42a3      	cmp	r3, r4
 8007aca:	d908      	bls.n	8007ade <_free_r+0x42>
 8007acc:	6820      	ldr	r0, [r4, #0]
 8007ace:	1821      	adds	r1, r4, r0
 8007ad0:	428b      	cmp	r3, r1
 8007ad2:	bf01      	itttt	eq
 8007ad4:	6819      	ldreq	r1, [r3, #0]
 8007ad6:	685b      	ldreq	r3, [r3, #4]
 8007ad8:	1809      	addeq	r1, r1, r0
 8007ada:	6021      	streq	r1, [r4, #0]
 8007adc:	e7ed      	b.n	8007aba <_free_r+0x1e>
 8007ade:	461a      	mov	r2, r3
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	b10b      	cbz	r3, 8007ae8 <_free_r+0x4c>
 8007ae4:	42a3      	cmp	r3, r4
 8007ae6:	d9fa      	bls.n	8007ade <_free_r+0x42>
 8007ae8:	6811      	ldr	r1, [r2, #0]
 8007aea:	1850      	adds	r0, r2, r1
 8007aec:	42a0      	cmp	r0, r4
 8007aee:	d10b      	bne.n	8007b08 <_free_r+0x6c>
 8007af0:	6820      	ldr	r0, [r4, #0]
 8007af2:	4401      	add	r1, r0
 8007af4:	1850      	adds	r0, r2, r1
 8007af6:	4283      	cmp	r3, r0
 8007af8:	6011      	str	r1, [r2, #0]
 8007afa:	d1e0      	bne.n	8007abe <_free_r+0x22>
 8007afc:	6818      	ldr	r0, [r3, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	6053      	str	r3, [r2, #4]
 8007b02:	4408      	add	r0, r1
 8007b04:	6010      	str	r0, [r2, #0]
 8007b06:	e7da      	b.n	8007abe <_free_r+0x22>
 8007b08:	d902      	bls.n	8007b10 <_free_r+0x74>
 8007b0a:	230c      	movs	r3, #12
 8007b0c:	602b      	str	r3, [r5, #0]
 8007b0e:	e7d6      	b.n	8007abe <_free_r+0x22>
 8007b10:	6820      	ldr	r0, [r4, #0]
 8007b12:	1821      	adds	r1, r4, r0
 8007b14:	428b      	cmp	r3, r1
 8007b16:	bf04      	itt	eq
 8007b18:	6819      	ldreq	r1, [r3, #0]
 8007b1a:	685b      	ldreq	r3, [r3, #4]
 8007b1c:	6063      	str	r3, [r4, #4]
 8007b1e:	bf04      	itt	eq
 8007b20:	1809      	addeq	r1, r1, r0
 8007b22:	6021      	streq	r1, [r4, #0]
 8007b24:	6054      	str	r4, [r2, #4]
 8007b26:	e7ca      	b.n	8007abe <_free_r+0x22>
 8007b28:	bd38      	pop	{r3, r4, r5, pc}
 8007b2a:	bf00      	nop
 8007b2c:	200044cc 	.word	0x200044cc

08007b30 <sbrk_aligned>:
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	4e0f      	ldr	r6, [pc, #60]	@ (8007b70 <sbrk_aligned+0x40>)
 8007b34:	460c      	mov	r4, r1
 8007b36:	6831      	ldr	r1, [r6, #0]
 8007b38:	4605      	mov	r5, r0
 8007b3a:	b911      	cbnz	r1, 8007b42 <sbrk_aligned+0x12>
 8007b3c:	f000 fba4 	bl	8008288 <_sbrk_r>
 8007b40:	6030      	str	r0, [r6, #0]
 8007b42:	4621      	mov	r1, r4
 8007b44:	4628      	mov	r0, r5
 8007b46:	f000 fb9f 	bl	8008288 <_sbrk_r>
 8007b4a:	1c43      	adds	r3, r0, #1
 8007b4c:	d103      	bne.n	8007b56 <sbrk_aligned+0x26>
 8007b4e:	f04f 34ff 	mov.w	r4, #4294967295
 8007b52:	4620      	mov	r0, r4
 8007b54:	bd70      	pop	{r4, r5, r6, pc}
 8007b56:	1cc4      	adds	r4, r0, #3
 8007b58:	f024 0403 	bic.w	r4, r4, #3
 8007b5c:	42a0      	cmp	r0, r4
 8007b5e:	d0f8      	beq.n	8007b52 <sbrk_aligned+0x22>
 8007b60:	1a21      	subs	r1, r4, r0
 8007b62:	4628      	mov	r0, r5
 8007b64:	f000 fb90 	bl	8008288 <_sbrk_r>
 8007b68:	3001      	adds	r0, #1
 8007b6a:	d1f2      	bne.n	8007b52 <sbrk_aligned+0x22>
 8007b6c:	e7ef      	b.n	8007b4e <sbrk_aligned+0x1e>
 8007b6e:	bf00      	nop
 8007b70:	200044c8 	.word	0x200044c8

08007b74 <_malloc_r>:
 8007b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b78:	1ccd      	adds	r5, r1, #3
 8007b7a:	f025 0503 	bic.w	r5, r5, #3
 8007b7e:	3508      	adds	r5, #8
 8007b80:	2d0c      	cmp	r5, #12
 8007b82:	bf38      	it	cc
 8007b84:	250c      	movcc	r5, #12
 8007b86:	2d00      	cmp	r5, #0
 8007b88:	4606      	mov	r6, r0
 8007b8a:	db01      	blt.n	8007b90 <_malloc_r+0x1c>
 8007b8c:	42a9      	cmp	r1, r5
 8007b8e:	d904      	bls.n	8007b9a <_malloc_r+0x26>
 8007b90:	230c      	movs	r3, #12
 8007b92:	6033      	str	r3, [r6, #0]
 8007b94:	2000      	movs	r0, #0
 8007b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c70 <_malloc_r+0xfc>
 8007b9e:	f000 f869 	bl	8007c74 <__malloc_lock>
 8007ba2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ba6:	461c      	mov	r4, r3
 8007ba8:	bb44      	cbnz	r4, 8007bfc <_malloc_r+0x88>
 8007baa:	4629      	mov	r1, r5
 8007bac:	4630      	mov	r0, r6
 8007bae:	f7ff ffbf 	bl	8007b30 <sbrk_aligned>
 8007bb2:	1c43      	adds	r3, r0, #1
 8007bb4:	4604      	mov	r4, r0
 8007bb6:	d158      	bne.n	8007c6a <_malloc_r+0xf6>
 8007bb8:	f8d8 4000 	ldr.w	r4, [r8]
 8007bbc:	4627      	mov	r7, r4
 8007bbe:	2f00      	cmp	r7, #0
 8007bc0:	d143      	bne.n	8007c4a <_malloc_r+0xd6>
 8007bc2:	2c00      	cmp	r4, #0
 8007bc4:	d04b      	beq.n	8007c5e <_malloc_r+0xea>
 8007bc6:	6823      	ldr	r3, [r4, #0]
 8007bc8:	4639      	mov	r1, r7
 8007bca:	4630      	mov	r0, r6
 8007bcc:	eb04 0903 	add.w	r9, r4, r3
 8007bd0:	f000 fb5a 	bl	8008288 <_sbrk_r>
 8007bd4:	4581      	cmp	r9, r0
 8007bd6:	d142      	bne.n	8007c5e <_malloc_r+0xea>
 8007bd8:	6821      	ldr	r1, [r4, #0]
 8007bda:	1a6d      	subs	r5, r5, r1
 8007bdc:	4629      	mov	r1, r5
 8007bde:	4630      	mov	r0, r6
 8007be0:	f7ff ffa6 	bl	8007b30 <sbrk_aligned>
 8007be4:	3001      	adds	r0, #1
 8007be6:	d03a      	beq.n	8007c5e <_malloc_r+0xea>
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	442b      	add	r3, r5
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	f8d8 3000 	ldr.w	r3, [r8]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	bb62      	cbnz	r2, 8007c50 <_malloc_r+0xdc>
 8007bf6:	f8c8 7000 	str.w	r7, [r8]
 8007bfa:	e00f      	b.n	8007c1c <_malloc_r+0xa8>
 8007bfc:	6822      	ldr	r2, [r4, #0]
 8007bfe:	1b52      	subs	r2, r2, r5
 8007c00:	d420      	bmi.n	8007c44 <_malloc_r+0xd0>
 8007c02:	2a0b      	cmp	r2, #11
 8007c04:	d917      	bls.n	8007c36 <_malloc_r+0xc2>
 8007c06:	1961      	adds	r1, r4, r5
 8007c08:	42a3      	cmp	r3, r4
 8007c0a:	6025      	str	r5, [r4, #0]
 8007c0c:	bf18      	it	ne
 8007c0e:	6059      	strne	r1, [r3, #4]
 8007c10:	6863      	ldr	r3, [r4, #4]
 8007c12:	bf08      	it	eq
 8007c14:	f8c8 1000 	streq.w	r1, [r8]
 8007c18:	5162      	str	r2, [r4, r5]
 8007c1a:	604b      	str	r3, [r1, #4]
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f000 f82f 	bl	8007c80 <__malloc_unlock>
 8007c22:	f104 000b 	add.w	r0, r4, #11
 8007c26:	1d23      	adds	r3, r4, #4
 8007c28:	f020 0007 	bic.w	r0, r0, #7
 8007c2c:	1ac2      	subs	r2, r0, r3
 8007c2e:	bf1c      	itt	ne
 8007c30:	1a1b      	subne	r3, r3, r0
 8007c32:	50a3      	strne	r3, [r4, r2]
 8007c34:	e7af      	b.n	8007b96 <_malloc_r+0x22>
 8007c36:	6862      	ldr	r2, [r4, #4]
 8007c38:	42a3      	cmp	r3, r4
 8007c3a:	bf0c      	ite	eq
 8007c3c:	f8c8 2000 	streq.w	r2, [r8]
 8007c40:	605a      	strne	r2, [r3, #4]
 8007c42:	e7eb      	b.n	8007c1c <_malloc_r+0xa8>
 8007c44:	4623      	mov	r3, r4
 8007c46:	6864      	ldr	r4, [r4, #4]
 8007c48:	e7ae      	b.n	8007ba8 <_malloc_r+0x34>
 8007c4a:	463c      	mov	r4, r7
 8007c4c:	687f      	ldr	r7, [r7, #4]
 8007c4e:	e7b6      	b.n	8007bbe <_malloc_r+0x4a>
 8007c50:	461a      	mov	r2, r3
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	42a3      	cmp	r3, r4
 8007c56:	d1fb      	bne.n	8007c50 <_malloc_r+0xdc>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	6053      	str	r3, [r2, #4]
 8007c5c:	e7de      	b.n	8007c1c <_malloc_r+0xa8>
 8007c5e:	230c      	movs	r3, #12
 8007c60:	6033      	str	r3, [r6, #0]
 8007c62:	4630      	mov	r0, r6
 8007c64:	f000 f80c 	bl	8007c80 <__malloc_unlock>
 8007c68:	e794      	b.n	8007b94 <_malloc_r+0x20>
 8007c6a:	6005      	str	r5, [r0, #0]
 8007c6c:	e7d6      	b.n	8007c1c <_malloc_r+0xa8>
 8007c6e:	bf00      	nop
 8007c70:	200044cc 	.word	0x200044cc

08007c74 <__malloc_lock>:
 8007c74:	4801      	ldr	r0, [pc, #4]	@ (8007c7c <__malloc_lock+0x8>)
 8007c76:	f7ff bf01 	b.w	8007a7c <__retarget_lock_acquire_recursive>
 8007c7a:	bf00      	nop
 8007c7c:	200044c4 	.word	0x200044c4

08007c80 <__malloc_unlock>:
 8007c80:	4801      	ldr	r0, [pc, #4]	@ (8007c88 <__malloc_unlock+0x8>)
 8007c82:	f7ff befc 	b.w	8007a7e <__retarget_lock_release_recursive>
 8007c86:	bf00      	nop
 8007c88:	200044c4 	.word	0x200044c4

08007c8c <__ssputs_r>:
 8007c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c90:	688e      	ldr	r6, [r1, #8]
 8007c92:	461f      	mov	r7, r3
 8007c94:	42be      	cmp	r6, r7
 8007c96:	680b      	ldr	r3, [r1, #0]
 8007c98:	4682      	mov	sl, r0
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	4690      	mov	r8, r2
 8007c9e:	d82d      	bhi.n	8007cfc <__ssputs_r+0x70>
 8007ca0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ca4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ca8:	d026      	beq.n	8007cf8 <__ssputs_r+0x6c>
 8007caa:	6965      	ldr	r5, [r4, #20]
 8007cac:	6909      	ldr	r1, [r1, #16]
 8007cae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cb2:	eba3 0901 	sub.w	r9, r3, r1
 8007cb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cba:	1c7b      	adds	r3, r7, #1
 8007cbc:	444b      	add	r3, r9
 8007cbe:	106d      	asrs	r5, r5, #1
 8007cc0:	429d      	cmp	r5, r3
 8007cc2:	bf38      	it	cc
 8007cc4:	461d      	movcc	r5, r3
 8007cc6:	0553      	lsls	r3, r2, #21
 8007cc8:	d527      	bpl.n	8007d1a <__ssputs_r+0x8e>
 8007cca:	4629      	mov	r1, r5
 8007ccc:	f7ff ff52 	bl	8007b74 <_malloc_r>
 8007cd0:	4606      	mov	r6, r0
 8007cd2:	b360      	cbz	r0, 8007d2e <__ssputs_r+0xa2>
 8007cd4:	6921      	ldr	r1, [r4, #16]
 8007cd6:	464a      	mov	r2, r9
 8007cd8:	f7ff fed2 	bl	8007a80 <memcpy>
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ce6:	81a3      	strh	r3, [r4, #12]
 8007ce8:	6126      	str	r6, [r4, #16]
 8007cea:	6165      	str	r5, [r4, #20]
 8007cec:	444e      	add	r6, r9
 8007cee:	eba5 0509 	sub.w	r5, r5, r9
 8007cf2:	6026      	str	r6, [r4, #0]
 8007cf4:	60a5      	str	r5, [r4, #8]
 8007cf6:	463e      	mov	r6, r7
 8007cf8:	42be      	cmp	r6, r7
 8007cfa:	d900      	bls.n	8007cfe <__ssputs_r+0x72>
 8007cfc:	463e      	mov	r6, r7
 8007cfe:	6820      	ldr	r0, [r4, #0]
 8007d00:	4632      	mov	r2, r6
 8007d02:	4641      	mov	r1, r8
 8007d04:	f000 faa6 	bl	8008254 <memmove>
 8007d08:	68a3      	ldr	r3, [r4, #8]
 8007d0a:	1b9b      	subs	r3, r3, r6
 8007d0c:	60a3      	str	r3, [r4, #8]
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	4433      	add	r3, r6
 8007d12:	6023      	str	r3, [r4, #0]
 8007d14:	2000      	movs	r0, #0
 8007d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d1a:	462a      	mov	r2, r5
 8007d1c:	f000 fac4 	bl	80082a8 <_realloc_r>
 8007d20:	4606      	mov	r6, r0
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d1e0      	bne.n	8007ce8 <__ssputs_r+0x5c>
 8007d26:	6921      	ldr	r1, [r4, #16]
 8007d28:	4650      	mov	r0, sl
 8007d2a:	f7ff feb7 	bl	8007a9c <_free_r>
 8007d2e:	230c      	movs	r3, #12
 8007d30:	f8ca 3000 	str.w	r3, [sl]
 8007d34:	89a3      	ldrh	r3, [r4, #12]
 8007d36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d3a:	81a3      	strh	r3, [r4, #12]
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d40:	e7e9      	b.n	8007d16 <__ssputs_r+0x8a>
	...

08007d44 <_svfiprintf_r>:
 8007d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d48:	4698      	mov	r8, r3
 8007d4a:	898b      	ldrh	r3, [r1, #12]
 8007d4c:	061b      	lsls	r3, r3, #24
 8007d4e:	b09d      	sub	sp, #116	@ 0x74
 8007d50:	4607      	mov	r7, r0
 8007d52:	460d      	mov	r5, r1
 8007d54:	4614      	mov	r4, r2
 8007d56:	d510      	bpl.n	8007d7a <_svfiprintf_r+0x36>
 8007d58:	690b      	ldr	r3, [r1, #16]
 8007d5a:	b973      	cbnz	r3, 8007d7a <_svfiprintf_r+0x36>
 8007d5c:	2140      	movs	r1, #64	@ 0x40
 8007d5e:	f7ff ff09 	bl	8007b74 <_malloc_r>
 8007d62:	6028      	str	r0, [r5, #0]
 8007d64:	6128      	str	r0, [r5, #16]
 8007d66:	b930      	cbnz	r0, 8007d76 <_svfiprintf_r+0x32>
 8007d68:	230c      	movs	r3, #12
 8007d6a:	603b      	str	r3, [r7, #0]
 8007d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d70:	b01d      	add	sp, #116	@ 0x74
 8007d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d76:	2340      	movs	r3, #64	@ 0x40
 8007d78:	616b      	str	r3, [r5, #20]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d7e:	2320      	movs	r3, #32
 8007d80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d84:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d88:	2330      	movs	r3, #48	@ 0x30
 8007d8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f28 <_svfiprintf_r+0x1e4>
 8007d8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d92:	f04f 0901 	mov.w	r9, #1
 8007d96:	4623      	mov	r3, r4
 8007d98:	469a      	mov	sl, r3
 8007d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d9e:	b10a      	cbz	r2, 8007da4 <_svfiprintf_r+0x60>
 8007da0:	2a25      	cmp	r2, #37	@ 0x25
 8007da2:	d1f9      	bne.n	8007d98 <_svfiprintf_r+0x54>
 8007da4:	ebba 0b04 	subs.w	fp, sl, r4
 8007da8:	d00b      	beq.n	8007dc2 <_svfiprintf_r+0x7e>
 8007daa:	465b      	mov	r3, fp
 8007dac:	4622      	mov	r2, r4
 8007dae:	4629      	mov	r1, r5
 8007db0:	4638      	mov	r0, r7
 8007db2:	f7ff ff6b 	bl	8007c8c <__ssputs_r>
 8007db6:	3001      	adds	r0, #1
 8007db8:	f000 80a7 	beq.w	8007f0a <_svfiprintf_r+0x1c6>
 8007dbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dbe:	445a      	add	r2, fp
 8007dc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 809f 	beq.w	8007f0a <_svfiprintf_r+0x1c6>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dd6:	f10a 0a01 	add.w	sl, sl, #1
 8007dda:	9304      	str	r3, [sp, #16]
 8007ddc:	9307      	str	r3, [sp, #28]
 8007dde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007de2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007de4:	4654      	mov	r4, sl
 8007de6:	2205      	movs	r2, #5
 8007de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dec:	484e      	ldr	r0, [pc, #312]	@ (8007f28 <_svfiprintf_r+0x1e4>)
 8007dee:	f7f8 f9ff 	bl	80001f0 <memchr>
 8007df2:	9a04      	ldr	r2, [sp, #16]
 8007df4:	b9d8      	cbnz	r0, 8007e2e <_svfiprintf_r+0xea>
 8007df6:	06d0      	lsls	r0, r2, #27
 8007df8:	bf44      	itt	mi
 8007dfa:	2320      	movmi	r3, #32
 8007dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e00:	0711      	lsls	r1, r2, #28
 8007e02:	bf44      	itt	mi
 8007e04:	232b      	movmi	r3, #43	@ 0x2b
 8007e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e10:	d015      	beq.n	8007e3e <_svfiprintf_r+0xfa>
 8007e12:	9a07      	ldr	r2, [sp, #28]
 8007e14:	4654      	mov	r4, sl
 8007e16:	2000      	movs	r0, #0
 8007e18:	f04f 0c0a 	mov.w	ip, #10
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e22:	3b30      	subs	r3, #48	@ 0x30
 8007e24:	2b09      	cmp	r3, #9
 8007e26:	d94b      	bls.n	8007ec0 <_svfiprintf_r+0x17c>
 8007e28:	b1b0      	cbz	r0, 8007e58 <_svfiprintf_r+0x114>
 8007e2a:	9207      	str	r2, [sp, #28]
 8007e2c:	e014      	b.n	8007e58 <_svfiprintf_r+0x114>
 8007e2e:	eba0 0308 	sub.w	r3, r0, r8
 8007e32:	fa09 f303 	lsl.w	r3, r9, r3
 8007e36:	4313      	orrs	r3, r2
 8007e38:	9304      	str	r3, [sp, #16]
 8007e3a:	46a2      	mov	sl, r4
 8007e3c:	e7d2      	b.n	8007de4 <_svfiprintf_r+0xa0>
 8007e3e:	9b03      	ldr	r3, [sp, #12]
 8007e40:	1d19      	adds	r1, r3, #4
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	9103      	str	r1, [sp, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	bfbb      	ittet	lt
 8007e4a:	425b      	neglt	r3, r3
 8007e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8007e50:	9307      	strge	r3, [sp, #28]
 8007e52:	9307      	strlt	r3, [sp, #28]
 8007e54:	bfb8      	it	lt
 8007e56:	9204      	strlt	r2, [sp, #16]
 8007e58:	7823      	ldrb	r3, [r4, #0]
 8007e5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e5c:	d10a      	bne.n	8007e74 <_svfiprintf_r+0x130>
 8007e5e:	7863      	ldrb	r3, [r4, #1]
 8007e60:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e62:	d132      	bne.n	8007eca <_svfiprintf_r+0x186>
 8007e64:	9b03      	ldr	r3, [sp, #12]
 8007e66:	1d1a      	adds	r2, r3, #4
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	9203      	str	r2, [sp, #12]
 8007e6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e70:	3402      	adds	r4, #2
 8007e72:	9305      	str	r3, [sp, #20]
 8007e74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f38 <_svfiprintf_r+0x1f4>
 8007e78:	7821      	ldrb	r1, [r4, #0]
 8007e7a:	2203      	movs	r2, #3
 8007e7c:	4650      	mov	r0, sl
 8007e7e:	f7f8 f9b7 	bl	80001f0 <memchr>
 8007e82:	b138      	cbz	r0, 8007e94 <_svfiprintf_r+0x150>
 8007e84:	9b04      	ldr	r3, [sp, #16]
 8007e86:	eba0 000a 	sub.w	r0, r0, sl
 8007e8a:	2240      	movs	r2, #64	@ 0x40
 8007e8c:	4082      	lsls	r2, r0
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	3401      	adds	r4, #1
 8007e92:	9304      	str	r3, [sp, #16]
 8007e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e98:	4824      	ldr	r0, [pc, #144]	@ (8007f2c <_svfiprintf_r+0x1e8>)
 8007e9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e9e:	2206      	movs	r2, #6
 8007ea0:	f7f8 f9a6 	bl	80001f0 <memchr>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d036      	beq.n	8007f16 <_svfiprintf_r+0x1d2>
 8007ea8:	4b21      	ldr	r3, [pc, #132]	@ (8007f30 <_svfiprintf_r+0x1ec>)
 8007eaa:	bb1b      	cbnz	r3, 8007ef4 <_svfiprintf_r+0x1b0>
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	3307      	adds	r3, #7
 8007eb0:	f023 0307 	bic.w	r3, r3, #7
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	9303      	str	r3, [sp, #12]
 8007eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eba:	4433      	add	r3, r6
 8007ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ebe:	e76a      	b.n	8007d96 <_svfiprintf_r+0x52>
 8007ec0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	2001      	movs	r0, #1
 8007ec8:	e7a8      	b.n	8007e1c <_svfiprintf_r+0xd8>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	3401      	adds	r4, #1
 8007ece:	9305      	str	r3, [sp, #20]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	f04f 0c0a 	mov.w	ip, #10
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007edc:	3a30      	subs	r2, #48	@ 0x30
 8007ede:	2a09      	cmp	r2, #9
 8007ee0:	d903      	bls.n	8007eea <_svfiprintf_r+0x1a6>
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0c6      	beq.n	8007e74 <_svfiprintf_r+0x130>
 8007ee6:	9105      	str	r1, [sp, #20]
 8007ee8:	e7c4      	b.n	8007e74 <_svfiprintf_r+0x130>
 8007eea:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eee:	4604      	mov	r4, r0
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e7f0      	b.n	8007ed6 <_svfiprintf_r+0x192>
 8007ef4:	ab03      	add	r3, sp, #12
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	462a      	mov	r2, r5
 8007efa:	4b0e      	ldr	r3, [pc, #56]	@ (8007f34 <_svfiprintf_r+0x1f0>)
 8007efc:	a904      	add	r1, sp, #16
 8007efe:	4638      	mov	r0, r7
 8007f00:	f3af 8000 	nop.w
 8007f04:	1c42      	adds	r2, r0, #1
 8007f06:	4606      	mov	r6, r0
 8007f08:	d1d6      	bne.n	8007eb8 <_svfiprintf_r+0x174>
 8007f0a:	89ab      	ldrh	r3, [r5, #12]
 8007f0c:	065b      	lsls	r3, r3, #25
 8007f0e:	f53f af2d 	bmi.w	8007d6c <_svfiprintf_r+0x28>
 8007f12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f14:	e72c      	b.n	8007d70 <_svfiprintf_r+0x2c>
 8007f16:	ab03      	add	r3, sp, #12
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	462a      	mov	r2, r5
 8007f1c:	4b05      	ldr	r3, [pc, #20]	@ (8007f34 <_svfiprintf_r+0x1f0>)
 8007f1e:	a904      	add	r1, sp, #16
 8007f20:	4638      	mov	r0, r7
 8007f22:	f000 f879 	bl	8008018 <_printf_i>
 8007f26:	e7ed      	b.n	8007f04 <_svfiprintf_r+0x1c0>
 8007f28:	080084bc 	.word	0x080084bc
 8007f2c:	080084c6 	.word	0x080084c6
 8007f30:	00000000 	.word	0x00000000
 8007f34:	08007c8d 	.word	0x08007c8d
 8007f38:	080084c2 	.word	0x080084c2

08007f3c <_printf_common>:
 8007f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f40:	4616      	mov	r6, r2
 8007f42:	4698      	mov	r8, r3
 8007f44:	688a      	ldr	r2, [r1, #8]
 8007f46:	690b      	ldr	r3, [r1, #16]
 8007f48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	bfb8      	it	lt
 8007f50:	4613      	movlt	r3, r2
 8007f52:	6033      	str	r3, [r6, #0]
 8007f54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f58:	4607      	mov	r7, r0
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	b10a      	cbz	r2, 8007f62 <_printf_common+0x26>
 8007f5e:	3301      	adds	r3, #1
 8007f60:	6033      	str	r3, [r6, #0]
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	0699      	lsls	r1, r3, #26
 8007f66:	bf42      	ittt	mi
 8007f68:	6833      	ldrmi	r3, [r6, #0]
 8007f6a:	3302      	addmi	r3, #2
 8007f6c:	6033      	strmi	r3, [r6, #0]
 8007f6e:	6825      	ldr	r5, [r4, #0]
 8007f70:	f015 0506 	ands.w	r5, r5, #6
 8007f74:	d106      	bne.n	8007f84 <_printf_common+0x48>
 8007f76:	f104 0a19 	add.w	sl, r4, #25
 8007f7a:	68e3      	ldr	r3, [r4, #12]
 8007f7c:	6832      	ldr	r2, [r6, #0]
 8007f7e:	1a9b      	subs	r3, r3, r2
 8007f80:	42ab      	cmp	r3, r5
 8007f82:	dc26      	bgt.n	8007fd2 <_printf_common+0x96>
 8007f84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f88:	6822      	ldr	r2, [r4, #0]
 8007f8a:	3b00      	subs	r3, #0
 8007f8c:	bf18      	it	ne
 8007f8e:	2301      	movne	r3, #1
 8007f90:	0692      	lsls	r2, r2, #26
 8007f92:	d42b      	bmi.n	8007fec <_printf_common+0xb0>
 8007f94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f98:	4641      	mov	r1, r8
 8007f9a:	4638      	mov	r0, r7
 8007f9c:	47c8      	blx	r9
 8007f9e:	3001      	adds	r0, #1
 8007fa0:	d01e      	beq.n	8007fe0 <_printf_common+0xa4>
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	6922      	ldr	r2, [r4, #16]
 8007fa6:	f003 0306 	and.w	r3, r3, #6
 8007faa:	2b04      	cmp	r3, #4
 8007fac:	bf02      	ittt	eq
 8007fae:	68e5      	ldreq	r5, [r4, #12]
 8007fb0:	6833      	ldreq	r3, [r6, #0]
 8007fb2:	1aed      	subeq	r5, r5, r3
 8007fb4:	68a3      	ldr	r3, [r4, #8]
 8007fb6:	bf0c      	ite	eq
 8007fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fbc:	2500      	movne	r5, #0
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	bfc4      	itt	gt
 8007fc2:	1a9b      	subgt	r3, r3, r2
 8007fc4:	18ed      	addgt	r5, r5, r3
 8007fc6:	2600      	movs	r6, #0
 8007fc8:	341a      	adds	r4, #26
 8007fca:	42b5      	cmp	r5, r6
 8007fcc:	d11a      	bne.n	8008004 <_printf_common+0xc8>
 8007fce:	2000      	movs	r0, #0
 8007fd0:	e008      	b.n	8007fe4 <_printf_common+0xa8>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	4652      	mov	r2, sl
 8007fd6:	4641      	mov	r1, r8
 8007fd8:	4638      	mov	r0, r7
 8007fda:	47c8      	blx	r9
 8007fdc:	3001      	adds	r0, #1
 8007fde:	d103      	bne.n	8007fe8 <_printf_common+0xac>
 8007fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fe8:	3501      	adds	r5, #1
 8007fea:	e7c6      	b.n	8007f7a <_printf_common+0x3e>
 8007fec:	18e1      	adds	r1, r4, r3
 8007fee:	1c5a      	adds	r2, r3, #1
 8007ff0:	2030      	movs	r0, #48	@ 0x30
 8007ff2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ff6:	4422      	add	r2, r4
 8007ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ffc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008000:	3302      	adds	r3, #2
 8008002:	e7c7      	b.n	8007f94 <_printf_common+0x58>
 8008004:	2301      	movs	r3, #1
 8008006:	4622      	mov	r2, r4
 8008008:	4641      	mov	r1, r8
 800800a:	4638      	mov	r0, r7
 800800c:	47c8      	blx	r9
 800800e:	3001      	adds	r0, #1
 8008010:	d0e6      	beq.n	8007fe0 <_printf_common+0xa4>
 8008012:	3601      	adds	r6, #1
 8008014:	e7d9      	b.n	8007fca <_printf_common+0x8e>
	...

08008018 <_printf_i>:
 8008018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800801c:	7e0f      	ldrb	r7, [r1, #24]
 800801e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008020:	2f78      	cmp	r7, #120	@ 0x78
 8008022:	4691      	mov	r9, r2
 8008024:	4680      	mov	r8, r0
 8008026:	460c      	mov	r4, r1
 8008028:	469a      	mov	sl, r3
 800802a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800802e:	d807      	bhi.n	8008040 <_printf_i+0x28>
 8008030:	2f62      	cmp	r7, #98	@ 0x62
 8008032:	d80a      	bhi.n	800804a <_printf_i+0x32>
 8008034:	2f00      	cmp	r7, #0
 8008036:	f000 80d1 	beq.w	80081dc <_printf_i+0x1c4>
 800803a:	2f58      	cmp	r7, #88	@ 0x58
 800803c:	f000 80b8 	beq.w	80081b0 <_printf_i+0x198>
 8008040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008044:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008048:	e03a      	b.n	80080c0 <_printf_i+0xa8>
 800804a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800804e:	2b15      	cmp	r3, #21
 8008050:	d8f6      	bhi.n	8008040 <_printf_i+0x28>
 8008052:	a101      	add	r1, pc, #4	@ (adr r1, 8008058 <_printf_i+0x40>)
 8008054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008058:	080080b1 	.word	0x080080b1
 800805c:	080080c5 	.word	0x080080c5
 8008060:	08008041 	.word	0x08008041
 8008064:	08008041 	.word	0x08008041
 8008068:	08008041 	.word	0x08008041
 800806c:	08008041 	.word	0x08008041
 8008070:	080080c5 	.word	0x080080c5
 8008074:	08008041 	.word	0x08008041
 8008078:	08008041 	.word	0x08008041
 800807c:	08008041 	.word	0x08008041
 8008080:	08008041 	.word	0x08008041
 8008084:	080081c3 	.word	0x080081c3
 8008088:	080080ef 	.word	0x080080ef
 800808c:	0800817d 	.word	0x0800817d
 8008090:	08008041 	.word	0x08008041
 8008094:	08008041 	.word	0x08008041
 8008098:	080081e5 	.word	0x080081e5
 800809c:	08008041 	.word	0x08008041
 80080a0:	080080ef 	.word	0x080080ef
 80080a4:	08008041 	.word	0x08008041
 80080a8:	08008041 	.word	0x08008041
 80080ac:	08008185 	.word	0x08008185
 80080b0:	6833      	ldr	r3, [r6, #0]
 80080b2:	1d1a      	adds	r2, r3, #4
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6032      	str	r2, [r6, #0]
 80080b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080c0:	2301      	movs	r3, #1
 80080c2:	e09c      	b.n	80081fe <_printf_i+0x1e6>
 80080c4:	6833      	ldr	r3, [r6, #0]
 80080c6:	6820      	ldr	r0, [r4, #0]
 80080c8:	1d19      	adds	r1, r3, #4
 80080ca:	6031      	str	r1, [r6, #0]
 80080cc:	0606      	lsls	r6, r0, #24
 80080ce:	d501      	bpl.n	80080d4 <_printf_i+0xbc>
 80080d0:	681d      	ldr	r5, [r3, #0]
 80080d2:	e003      	b.n	80080dc <_printf_i+0xc4>
 80080d4:	0645      	lsls	r5, r0, #25
 80080d6:	d5fb      	bpl.n	80080d0 <_printf_i+0xb8>
 80080d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80080dc:	2d00      	cmp	r5, #0
 80080de:	da03      	bge.n	80080e8 <_printf_i+0xd0>
 80080e0:	232d      	movs	r3, #45	@ 0x2d
 80080e2:	426d      	negs	r5, r5
 80080e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080e8:	4858      	ldr	r0, [pc, #352]	@ (800824c <_printf_i+0x234>)
 80080ea:	230a      	movs	r3, #10
 80080ec:	e011      	b.n	8008112 <_printf_i+0xfa>
 80080ee:	6821      	ldr	r1, [r4, #0]
 80080f0:	6833      	ldr	r3, [r6, #0]
 80080f2:	0608      	lsls	r0, r1, #24
 80080f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80080f8:	d402      	bmi.n	8008100 <_printf_i+0xe8>
 80080fa:	0649      	lsls	r1, r1, #25
 80080fc:	bf48      	it	mi
 80080fe:	b2ad      	uxthmi	r5, r5
 8008100:	2f6f      	cmp	r7, #111	@ 0x6f
 8008102:	4852      	ldr	r0, [pc, #328]	@ (800824c <_printf_i+0x234>)
 8008104:	6033      	str	r3, [r6, #0]
 8008106:	bf14      	ite	ne
 8008108:	230a      	movne	r3, #10
 800810a:	2308      	moveq	r3, #8
 800810c:	2100      	movs	r1, #0
 800810e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008112:	6866      	ldr	r6, [r4, #4]
 8008114:	60a6      	str	r6, [r4, #8]
 8008116:	2e00      	cmp	r6, #0
 8008118:	db05      	blt.n	8008126 <_printf_i+0x10e>
 800811a:	6821      	ldr	r1, [r4, #0]
 800811c:	432e      	orrs	r6, r5
 800811e:	f021 0104 	bic.w	r1, r1, #4
 8008122:	6021      	str	r1, [r4, #0]
 8008124:	d04b      	beq.n	80081be <_printf_i+0x1a6>
 8008126:	4616      	mov	r6, r2
 8008128:	fbb5 f1f3 	udiv	r1, r5, r3
 800812c:	fb03 5711 	mls	r7, r3, r1, r5
 8008130:	5dc7      	ldrb	r7, [r0, r7]
 8008132:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008136:	462f      	mov	r7, r5
 8008138:	42bb      	cmp	r3, r7
 800813a:	460d      	mov	r5, r1
 800813c:	d9f4      	bls.n	8008128 <_printf_i+0x110>
 800813e:	2b08      	cmp	r3, #8
 8008140:	d10b      	bne.n	800815a <_printf_i+0x142>
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	07df      	lsls	r7, r3, #31
 8008146:	d508      	bpl.n	800815a <_printf_i+0x142>
 8008148:	6923      	ldr	r3, [r4, #16]
 800814a:	6861      	ldr	r1, [r4, #4]
 800814c:	4299      	cmp	r1, r3
 800814e:	bfde      	ittt	le
 8008150:	2330      	movle	r3, #48	@ 0x30
 8008152:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008156:	f106 36ff 	addle.w	r6, r6, #4294967295
 800815a:	1b92      	subs	r2, r2, r6
 800815c:	6122      	str	r2, [r4, #16]
 800815e:	f8cd a000 	str.w	sl, [sp]
 8008162:	464b      	mov	r3, r9
 8008164:	aa03      	add	r2, sp, #12
 8008166:	4621      	mov	r1, r4
 8008168:	4640      	mov	r0, r8
 800816a:	f7ff fee7 	bl	8007f3c <_printf_common>
 800816e:	3001      	adds	r0, #1
 8008170:	d14a      	bne.n	8008208 <_printf_i+0x1f0>
 8008172:	f04f 30ff 	mov.w	r0, #4294967295
 8008176:	b004      	add	sp, #16
 8008178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800817c:	6823      	ldr	r3, [r4, #0]
 800817e:	f043 0320 	orr.w	r3, r3, #32
 8008182:	6023      	str	r3, [r4, #0]
 8008184:	4832      	ldr	r0, [pc, #200]	@ (8008250 <_printf_i+0x238>)
 8008186:	2778      	movs	r7, #120	@ 0x78
 8008188:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800818c:	6823      	ldr	r3, [r4, #0]
 800818e:	6831      	ldr	r1, [r6, #0]
 8008190:	061f      	lsls	r7, r3, #24
 8008192:	f851 5b04 	ldr.w	r5, [r1], #4
 8008196:	d402      	bmi.n	800819e <_printf_i+0x186>
 8008198:	065f      	lsls	r7, r3, #25
 800819a:	bf48      	it	mi
 800819c:	b2ad      	uxthmi	r5, r5
 800819e:	6031      	str	r1, [r6, #0]
 80081a0:	07d9      	lsls	r1, r3, #31
 80081a2:	bf44      	itt	mi
 80081a4:	f043 0320 	orrmi.w	r3, r3, #32
 80081a8:	6023      	strmi	r3, [r4, #0]
 80081aa:	b11d      	cbz	r5, 80081b4 <_printf_i+0x19c>
 80081ac:	2310      	movs	r3, #16
 80081ae:	e7ad      	b.n	800810c <_printf_i+0xf4>
 80081b0:	4826      	ldr	r0, [pc, #152]	@ (800824c <_printf_i+0x234>)
 80081b2:	e7e9      	b.n	8008188 <_printf_i+0x170>
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	f023 0320 	bic.w	r3, r3, #32
 80081ba:	6023      	str	r3, [r4, #0]
 80081bc:	e7f6      	b.n	80081ac <_printf_i+0x194>
 80081be:	4616      	mov	r6, r2
 80081c0:	e7bd      	b.n	800813e <_printf_i+0x126>
 80081c2:	6833      	ldr	r3, [r6, #0]
 80081c4:	6825      	ldr	r5, [r4, #0]
 80081c6:	6961      	ldr	r1, [r4, #20]
 80081c8:	1d18      	adds	r0, r3, #4
 80081ca:	6030      	str	r0, [r6, #0]
 80081cc:	062e      	lsls	r6, r5, #24
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	d501      	bpl.n	80081d6 <_printf_i+0x1be>
 80081d2:	6019      	str	r1, [r3, #0]
 80081d4:	e002      	b.n	80081dc <_printf_i+0x1c4>
 80081d6:	0668      	lsls	r0, r5, #25
 80081d8:	d5fb      	bpl.n	80081d2 <_printf_i+0x1ba>
 80081da:	8019      	strh	r1, [r3, #0]
 80081dc:	2300      	movs	r3, #0
 80081de:	6123      	str	r3, [r4, #16]
 80081e0:	4616      	mov	r6, r2
 80081e2:	e7bc      	b.n	800815e <_printf_i+0x146>
 80081e4:	6833      	ldr	r3, [r6, #0]
 80081e6:	1d1a      	adds	r2, r3, #4
 80081e8:	6032      	str	r2, [r6, #0]
 80081ea:	681e      	ldr	r6, [r3, #0]
 80081ec:	6862      	ldr	r2, [r4, #4]
 80081ee:	2100      	movs	r1, #0
 80081f0:	4630      	mov	r0, r6
 80081f2:	f7f7 fffd 	bl	80001f0 <memchr>
 80081f6:	b108      	cbz	r0, 80081fc <_printf_i+0x1e4>
 80081f8:	1b80      	subs	r0, r0, r6
 80081fa:	6060      	str	r0, [r4, #4]
 80081fc:	6863      	ldr	r3, [r4, #4]
 80081fe:	6123      	str	r3, [r4, #16]
 8008200:	2300      	movs	r3, #0
 8008202:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008206:	e7aa      	b.n	800815e <_printf_i+0x146>
 8008208:	6923      	ldr	r3, [r4, #16]
 800820a:	4632      	mov	r2, r6
 800820c:	4649      	mov	r1, r9
 800820e:	4640      	mov	r0, r8
 8008210:	47d0      	blx	sl
 8008212:	3001      	adds	r0, #1
 8008214:	d0ad      	beq.n	8008172 <_printf_i+0x15a>
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	079b      	lsls	r3, r3, #30
 800821a:	d413      	bmi.n	8008244 <_printf_i+0x22c>
 800821c:	68e0      	ldr	r0, [r4, #12]
 800821e:	9b03      	ldr	r3, [sp, #12]
 8008220:	4298      	cmp	r0, r3
 8008222:	bfb8      	it	lt
 8008224:	4618      	movlt	r0, r3
 8008226:	e7a6      	b.n	8008176 <_printf_i+0x15e>
 8008228:	2301      	movs	r3, #1
 800822a:	4632      	mov	r2, r6
 800822c:	4649      	mov	r1, r9
 800822e:	4640      	mov	r0, r8
 8008230:	47d0      	blx	sl
 8008232:	3001      	adds	r0, #1
 8008234:	d09d      	beq.n	8008172 <_printf_i+0x15a>
 8008236:	3501      	adds	r5, #1
 8008238:	68e3      	ldr	r3, [r4, #12]
 800823a:	9903      	ldr	r1, [sp, #12]
 800823c:	1a5b      	subs	r3, r3, r1
 800823e:	42ab      	cmp	r3, r5
 8008240:	dcf2      	bgt.n	8008228 <_printf_i+0x210>
 8008242:	e7eb      	b.n	800821c <_printf_i+0x204>
 8008244:	2500      	movs	r5, #0
 8008246:	f104 0619 	add.w	r6, r4, #25
 800824a:	e7f5      	b.n	8008238 <_printf_i+0x220>
 800824c:	080084cd 	.word	0x080084cd
 8008250:	080084de 	.word	0x080084de

08008254 <memmove>:
 8008254:	4288      	cmp	r0, r1
 8008256:	b510      	push	{r4, lr}
 8008258:	eb01 0402 	add.w	r4, r1, r2
 800825c:	d902      	bls.n	8008264 <memmove+0x10>
 800825e:	4284      	cmp	r4, r0
 8008260:	4623      	mov	r3, r4
 8008262:	d807      	bhi.n	8008274 <memmove+0x20>
 8008264:	1e43      	subs	r3, r0, #1
 8008266:	42a1      	cmp	r1, r4
 8008268:	d008      	beq.n	800827c <memmove+0x28>
 800826a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800826e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008272:	e7f8      	b.n	8008266 <memmove+0x12>
 8008274:	4402      	add	r2, r0
 8008276:	4601      	mov	r1, r0
 8008278:	428a      	cmp	r2, r1
 800827a:	d100      	bne.n	800827e <memmove+0x2a>
 800827c:	bd10      	pop	{r4, pc}
 800827e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008282:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008286:	e7f7      	b.n	8008278 <memmove+0x24>

08008288 <_sbrk_r>:
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	4d06      	ldr	r5, [pc, #24]	@ (80082a4 <_sbrk_r+0x1c>)
 800828c:	2300      	movs	r3, #0
 800828e:	4604      	mov	r4, r0
 8008290:	4608      	mov	r0, r1
 8008292:	602b      	str	r3, [r5, #0]
 8008294:	f7f9 fdc0 	bl	8001e18 <_sbrk>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	d102      	bne.n	80082a2 <_sbrk_r+0x1a>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	b103      	cbz	r3, 80082a2 <_sbrk_r+0x1a>
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	bd38      	pop	{r3, r4, r5, pc}
 80082a4:	200044c0 	.word	0x200044c0

080082a8 <_realloc_r>:
 80082a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ac:	4607      	mov	r7, r0
 80082ae:	4614      	mov	r4, r2
 80082b0:	460d      	mov	r5, r1
 80082b2:	b921      	cbnz	r1, 80082be <_realloc_r+0x16>
 80082b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082b8:	4611      	mov	r1, r2
 80082ba:	f7ff bc5b 	b.w	8007b74 <_malloc_r>
 80082be:	b92a      	cbnz	r2, 80082cc <_realloc_r+0x24>
 80082c0:	f7ff fbec 	bl	8007a9c <_free_r>
 80082c4:	4625      	mov	r5, r4
 80082c6:	4628      	mov	r0, r5
 80082c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082cc:	f000 f81a 	bl	8008304 <_malloc_usable_size_r>
 80082d0:	4284      	cmp	r4, r0
 80082d2:	4606      	mov	r6, r0
 80082d4:	d802      	bhi.n	80082dc <_realloc_r+0x34>
 80082d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082da:	d8f4      	bhi.n	80082c6 <_realloc_r+0x1e>
 80082dc:	4621      	mov	r1, r4
 80082de:	4638      	mov	r0, r7
 80082e0:	f7ff fc48 	bl	8007b74 <_malloc_r>
 80082e4:	4680      	mov	r8, r0
 80082e6:	b908      	cbnz	r0, 80082ec <_realloc_r+0x44>
 80082e8:	4645      	mov	r5, r8
 80082ea:	e7ec      	b.n	80082c6 <_realloc_r+0x1e>
 80082ec:	42b4      	cmp	r4, r6
 80082ee:	4622      	mov	r2, r4
 80082f0:	4629      	mov	r1, r5
 80082f2:	bf28      	it	cs
 80082f4:	4632      	movcs	r2, r6
 80082f6:	f7ff fbc3 	bl	8007a80 <memcpy>
 80082fa:	4629      	mov	r1, r5
 80082fc:	4638      	mov	r0, r7
 80082fe:	f7ff fbcd 	bl	8007a9c <_free_r>
 8008302:	e7f1      	b.n	80082e8 <_realloc_r+0x40>

08008304 <_malloc_usable_size_r>:
 8008304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008308:	1f18      	subs	r0, r3, #4
 800830a:	2b00      	cmp	r3, #0
 800830c:	bfbc      	itt	lt
 800830e:	580b      	ldrlt	r3, [r1, r0]
 8008310:	18c0      	addlt	r0, r0, r3
 8008312:	4770      	bx	lr

08008314 <_init>:
 8008314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008316:	bf00      	nop
 8008318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800831a:	bc08      	pop	{r3}
 800831c:	469e      	mov	lr, r3
 800831e:	4770      	bx	lr

08008320 <_fini>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	bf00      	nop
 8008324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008326:	bc08      	pop	{r3}
 8008328:	469e      	mov	lr, r3
 800832a:	4770      	bx	lr
