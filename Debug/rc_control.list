
rc_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067ac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800694c  0800694c  0000794c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006aa4  08006aa4  000080f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006aa4  08006aa4  00007aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006aac  08006aac  000080f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006aac  08006aac  00007aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ab0  08006ab0  00007ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f4  20000000  08006ab4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042bc  200000f4  08006ba8  000080f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200043b0  08006ba8  000083b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ffe  00000000  00000000  00008124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038be  00000000  00000000  00020122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  000239e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001143  00000000  00000000  00025028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195ae  00000000  00000000  0002616b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019585  00000000  00000000  0003f719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099e7c  00000000  00000000  00058c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f2b1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006288  00000000  00000000  000f2b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000f8de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f4 	.word	0x200000f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006934 	.word	0x08006934

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f8 	.word	0x200000f8
 80001dc:	08006934 	.word	0x08006934

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	@ (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	@ 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000110 	.word	0x20000110
 80005ec:	200001b0 	.word	0x200001b0

080005f0 <render_menu>:
gpsSettingsValue gpsSettings;
uint8_t cursor = 0;
uint8_t buzzer_state = 0; // OFF

void render_menu(I2C_HandleTypeDef *hi2c)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    lcd_clear(hi2c);
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 fade 	bl	8000bba <lcd_clear>

    for (int i = 0; i < currentMenu->item_count; i++)
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	e049      	b.n	8000698 <render_menu+0xa8>
    {
        uint8_t line;
        if (currentMenu == &mainMenu)
 8000604:	4b36      	ldr	r3, [pc, #216]	@ (80006e0 <render_menu+0xf0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a36      	ldr	r2, [pc, #216]	@ (80006e4 <render_menu+0xf4>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d10b      	bne.n	8000626 <render_menu+0x36>
        {
            if (i == 0)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d102      	bne.n	800061a <render_menu+0x2a>
            {
                line = LINE3;
 8000614:	2394      	movs	r3, #148	@ 0x94
 8000616:	72fb      	strb	r3, [r7, #11]
 8000618:	e01c      	b.n	8000654 <render_menu+0x64>
            }
            else if (i == 1)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d119      	bne.n	8000654 <render_menu+0x64>
            {
                line = LINE4;
 8000620:	23d4      	movs	r3, #212	@ 0xd4
 8000622:	72fb      	strb	r3, [r7, #11]
 8000624:	e016      	b.n	8000654 <render_menu+0x64>
            }
        }
        else
        {
            if (i == 0)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d102      	bne.n	8000632 <render_menu+0x42>
            {
                line = LINE1;
 800062c:	2380      	movs	r3, #128	@ 0x80
 800062e:	72fb      	strb	r3, [r7, #11]
 8000630:	e010      	b.n	8000654 <render_menu+0x64>
            }
            else if (i == 1)
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d102      	bne.n	800063e <render_menu+0x4e>
            {
                line = LINE2;
 8000638:	23c0      	movs	r3, #192	@ 0xc0
 800063a:	72fb      	strb	r3, [r7, #11]
 800063c:	e00a      	b.n	8000654 <render_menu+0x64>
            }
            else if (i == 2)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b02      	cmp	r3, #2
 8000642:	d102      	bne.n	800064a <render_menu+0x5a>
            {
                line = LINE3;
 8000644:	2394      	movs	r3, #148	@ 0x94
 8000646:	72fb      	strb	r3, [r7, #11]
 8000648:	e004      	b.n	8000654 <render_menu+0x64>
            }
            else if (i == 3)
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	2b03      	cmp	r3, #3
 800064e:	d101      	bne.n	8000654 <render_menu+0x64>
            {
                line = LINE4;
 8000650:	23d4      	movs	r3, #212	@ 0xd4
 8000652:	72fb      	strb	r3, [r7, #11]
            }
        }

        if (i == cursor)
 8000654:	4b24      	ldr	r3, [pc, #144]	@ (80006e8 <render_menu+0xf8>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	4293      	cmp	r3, r2
 800065e:	d106      	bne.n	800066e <render_menu+0x7e>
        {
            lcd_send_string(hi2c, line, POS0, ">");
 8000660:	7af9      	ldrb	r1, [r7, #11]
 8000662:	4b22      	ldr	r3, [pc, #136]	@ (80006ec <render_menu+0xfc>)
 8000664:	2200      	movs	r2, #0
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f000 fa77 	bl	8000b5a <lcd_send_string>
 800066c:	e005      	b.n	800067a <render_menu+0x8a>
        }
        else
        {
            lcd_send_string(hi2c, line, POS0, " ");
 800066e:	7af9      	ldrb	r1, [r7, #11]
 8000670:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <render_menu+0x100>)
 8000672:	2200      	movs	r2, #0
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f000 fa70 	bl	8000b5a <lcd_send_string>
        }
        lcd_send_string(hi2c, line, POS2, (char *)currentMenu->items[i]);
 800067a:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <render_menu+0xf0>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	685a      	ldr	r2, [r3, #4]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	7af9      	ldrb	r1, [r7, #11]
 800068a:	2202      	movs	r2, #2
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f000 fa64 	bl	8000b5a <lcd_send_string>
    for (int i = 0; i < currentMenu->item_count; i++)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	3301      	adds	r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <render_menu+0xf0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	7a1b      	ldrb	r3, [r3, #8]
 800069e:	461a      	mov	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4293      	cmp	r3, r2
 80006a4:	dbae      	blt.n	8000604 <render_menu+0x14>
    }
    if (currentMenu == &mainMenu)
 80006a6:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <render_menu+0xf0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a0e      	ldr	r2, [pc, #56]	@ (80006e4 <render_menu+0xf4>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d113      	bne.n	80006d8 <render_menu+0xe8>
    {
        lcd_send_string(hi2c, LINE1, POS0, (char *)currentMenu->title);
 80006b0:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <render_menu+0xf0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2200      	movs	r2, #0
 80006b8:	2180      	movs	r1, #128	@ 0x80
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f000 fa4d 	bl	8000b5a <lcd_send_string>
        lcd_send_string(hi2c, LINE1, POS12, "TX:*****");
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <render_menu+0x104>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	2180      	movs	r1, #128	@ 0x80
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 fa47 	bl	8000b5a <lcd_send_string>
        lcd_send_string(hi2c, LINE2, POS12, "RX:*****");
 80006cc:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <render_menu+0x108>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	21c0      	movs	r1, #192	@ 0xc0
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f000 fa41 	bl	8000b5a <lcd_send_string>
    }
}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200003b0 	.word	0x200003b0
 80006e4:	2000001c 	.word	0x2000001c
 80006e8:	200003b4 	.word	0x200003b4
 80006ec:	080069c0 	.word	0x080069c0
 80006f0:	080069c4 	.word	0x080069c4
 80006f4:	080069c8 	.word	0x080069c8
 80006f8:	080069d4 	.word	0x080069d4

080006fc <menu_init>:

void menu_init(I2C_HandleTypeDef *hi2c)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
    currentMenu = &mainMenu;
 8000704:	4b04      	ldr	r3, [pc, #16]	@ (8000718 <menu_init+0x1c>)
 8000706:	4a05      	ldr	r2, [pc, #20]	@ (800071c <menu_init+0x20>)
 8000708:	601a      	str	r2, [r3, #0]
    render_menu(hi2c);
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ff70 	bl	80005f0 <render_menu>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200003b0 	.word	0x200003b0
 800071c:	2000001c 	.word	0x2000001c

08000720 <on_up>:

void on_up(I2C_HandleTypeDef *hi2c)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
    if (cursor > 0)
 8000728:	4b08      	ldr	r3, [pc, #32]	@ (800074c <on_up+0x2c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d005      	beq.n	800073c <on_up+0x1c>
        cursor--;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <on_up+0x2c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	3b01      	subs	r3, #1
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <on_up+0x2c>)
 800073a:	701a      	strb	r2, [r3, #0]
    render_menu(hi2c);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff ff57 	bl	80005f0 <render_menu>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200003b4 	.word	0x200003b4

08000750 <on_down>:

void on_down(I2C_HandleTypeDef *hi2c)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    if (cursor < currentMenu->item_count - 1)
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <on_down+0x34>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <on_down+0x38>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	7a1b      	ldrb	r3, [r3, #8]
 8000764:	3b01      	subs	r3, #1
 8000766:	429a      	cmp	r2, r3
 8000768:	da05      	bge.n	8000776 <on_down+0x26>
        cursor++;
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <on_down+0x34>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b04      	ldr	r3, [pc, #16]	@ (8000784 <on_down+0x34>)
 8000774:	701a      	strb	r2, [r3, #0]
    render_menu(hi2c);
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff ff3a 	bl	80005f0 <render_menu>
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200003b4 	.word	0x200003b4
 8000788:	200003b0 	.word	0x200003b0

0800078c <on_select>:

void on_select(I2C_HandleTypeDef *hi2c)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
    currentMenu->select_callback(hi2c, cursor);
 8000794:	4b05      	ldr	r3, [pc, #20]	@ (80007ac <on_select+0x20>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	4a05      	ldr	r2, [pc, #20]	@ (80007b0 <on_select+0x24>)
 800079c:	7812      	ldrb	r2, [r2, #0]
 800079e:	4611      	mov	r1, r2
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	4798      	blx	r3
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200003b0 	.word	0x200003b0
 80007b0:	200003b4 	.word	0x200003b4

080007b4 <on_back>:

void on_back(I2C_HandleTypeDef *hi2c)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
    if (currentMenu->back_link != NULL)
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <on_back+0x30>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	691b      	ldr	r3, [r3, #16]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00a      	beq.n	80007dc <on_back+0x28>
    {
        currentMenu = currentMenu->back_link;
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <on_back+0x30>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	4a05      	ldr	r2, [pc, #20]	@ (80007e4 <on_back+0x30>)
 80007ce:	6013      	str	r3, [r2, #0]
        cursor = 0;
 80007d0:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <on_back+0x34>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
        render_menu(hi2c);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff ff0a 	bl	80005f0 <render_menu>
    }
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200003b0 	.word	0x200003b0
 80007e8:	200003b4 	.word	0x200003b4

080007ec <mainMenuCallback>:

void mainMenuCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
    if (index == 0)
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d106      	bne.n	800080c <mainMenuCallback+0x20>
    {
        currentMenu = &menuMenu;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <mainMenuCallback+0x40>)
 8000800:	4a0b      	ldr	r2, [pc, #44]	@ (8000830 <mainMenuCallback+0x44>)
 8000802:	601a      	str	r2, [r3, #0]
        cursor = 0;
 8000804:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <mainMenuCallback+0x48>)
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]
 800080a:	e008      	b.n	800081e <mainMenuCallback+0x32>
    }
    else if (index == 1)
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d105      	bne.n	800081e <mainMenuCallback+0x32>
    {
        currentMenu = &settingsMenu;
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <mainMenuCallback+0x40>)
 8000814:	4a08      	ldr	r2, [pc, #32]	@ (8000838 <mainMenuCallback+0x4c>)
 8000816:	601a      	str	r2, [r3, #0]
        cursor = 0;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <mainMenuCallback+0x48>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
    }
    render_menu(hi2c);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff fee6 	bl	80005f0 <render_menu>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200003b0 	.word	0x200003b0
 8000830:	20000030 	.word	0x20000030
 8000834:	200003b4 	.word	0x200003b4
 8000838:	20000044 	.word	0x20000044

0800083c <menuCallback>:

void menuCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	70fb      	strb	r3, [r7, #3]
    if (index == 0)
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d10a      	bne.n	8000864 <menuCallback+0x28>
    {
        currentMenu = &flightStatusMenu;
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <menuCallback+0x4c>)
 8000850:	4a0e      	ldr	r2, [pc, #56]	@ (800088c <menuCallback+0x50>)
 8000852:	601a      	str	r2, [r3, #0]
        currentMenu->select_callback(hi2c, index);
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <menuCallback+0x4c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	78fa      	ldrb	r2, [r7, #3]
 800085c:	4611      	mov	r1, r2
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	4798      	blx	r3
    else if (index == 1)
    {
        currentMenu = &settingsMenu;
        currentMenu->select_callback(hi2c, index);
    }
}
 8000862:	e00c      	b.n	800087e <menuCallback+0x42>
    else if (index == 1)
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d109      	bne.n	800087e <menuCallback+0x42>
        currentMenu = &settingsMenu;
 800086a:	4b07      	ldr	r3, [pc, #28]	@ (8000888 <menuCallback+0x4c>)
 800086c:	4a08      	ldr	r2, [pc, #32]	@ (8000890 <menuCallback+0x54>)
 800086e:	601a      	str	r2, [r3, #0]
        currentMenu->select_callback(hi2c, index);
 8000870:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <menuCallback+0x4c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	68db      	ldr	r3, [r3, #12]
 8000876:	78fa      	ldrb	r2, [r7, #3]
 8000878:	4611      	mov	r1, r2
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	4798      	blx	r3
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200003b0 	.word	0x200003b0
 800088c:	2000006c 	.word	0x2000006c
 8000890:	20000044 	.word	0x20000044

08000894 <settingsCallback>:

void settingsCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]
    if (index == 0)
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d11d      	bne.n	80008e2 <settingsCallback+0x4e>
    {
        currentMenu = &buzzerMenu;
 80008a6:	4b17      	ldr	r3, [pc, #92]	@ (8000904 <settingsCallback+0x70>)
 80008a8:	4a17      	ldr	r2, [pc, #92]	@ (8000908 <settingsCallback+0x74>)
 80008aa:	601a      	str	r2, [r3, #0]
        cursor = 0;
 80008ac:	4b17      	ldr	r3, [pc, #92]	@ (800090c <settingsCallback+0x78>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
        if (buzzer_state == 0)
 80008b2:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <settingsCallback+0x7c>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d109      	bne.n	80008ce <settingsCallback+0x3a>
        {
            lcd_clear(hi2c);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f000 f97d 	bl	8000bba <lcd_clear>
            lcd_send_string(hi2c, LINE1, POS0, "OFF");
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <settingsCallback+0x80>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	2180      	movs	r1, #128	@ 0x80
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f000 f947 	bl	8000b5a <lcd_send_string>
    }
    else if (index==2)
    {

    }
}
 80008cc:	e015      	b.n	80008fa <settingsCallback+0x66>
            lcd_clear(hi2c);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f000 f973 	bl	8000bba <lcd_clear>
            lcd_send_string(hi2c, LINE1, POS0, "ON");
 80008d4:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <settingsCallback+0x84>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	2180      	movs	r1, #128	@ 0x80
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f93d 	bl	8000b5a <lcd_send_string>
}
 80008e0:	e00b      	b.n	80008fa <settingsCallback+0x66>
    else if (index == 1)
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d108      	bne.n	80008fa <settingsCallback+0x66>
        currentMenu = &gpsSettingsMenu;
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <settingsCallback+0x70>)
 80008ea:	4a0c      	ldr	r2, [pc, #48]	@ (800091c <settingsCallback+0x88>)
 80008ec:	601a      	str	r2, [r3, #0]
        cursor = 0;
 80008ee:	4b07      	ldr	r3, [pc, #28]	@ (800090c <settingsCallback+0x78>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
        render_menu(hi2c);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fe7b 	bl	80005f0 <render_menu>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200003b0 	.word	0x200003b0
 8000908:	20000058 	.word	0x20000058
 800090c:	200003b4 	.word	0x200003b4
 8000910:	200003b5 	.word	0x200003b5
 8000914:	080069e0 	.word	0x080069e0
 8000918:	080069e4 	.word	0x080069e4
 800091c:	20000080 	.word	0x20000080

08000920 <buzzerCallback>:


void buzzerCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	70fb      	strb	r3, [r7, #3]
    buzzer_state = buzzer_state ^ 1;
 800092c:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <buzzerCallback+0x50>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	f083 0301 	eor.w	r3, r3, #1
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <buzzerCallback+0x50>)
 8000938:	701a      	strb	r2, [r3, #0]
    if (buzzer_state == 0)
 800093a:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <buzzerCallback+0x50>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d109      	bne.n	8000956 <buzzerCallback+0x36>
    {
        lcd_clear(hi2c);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 f939 	bl	8000bba <lcd_clear>
        lcd_send_string(hi2c, LINE1, POS0, "OFF");
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <buzzerCallback+0x54>)
 800094a:	2200      	movs	r2, #0
 800094c:	2180      	movs	r1, #128	@ 0x80
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f000 f903 	bl	8000b5a <lcd_send_string>
    else
    {
        lcd_clear(hi2c);
        lcd_send_string(hi2c, LINE1, POS0, "ON");
    }
}
 8000954:	e008      	b.n	8000968 <buzzerCallback+0x48>
        lcd_clear(hi2c);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f000 f92f 	bl	8000bba <lcd_clear>
        lcd_send_string(hi2c, LINE1, POS0, "ON");
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <buzzerCallback+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	2180      	movs	r1, #128	@ 0x80
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 f8f9 	bl	8000b5a <lcd_send_string>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200003b5 	.word	0x200003b5
 8000974:	080069e0 	.word	0x080069e0
 8000978:	080069e4 	.word	0x080069e4

0800097c <flightStatusCallback>:

void flightStatusCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]
    lcd_clear(hi2c);
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f000 f916 	bl	8000bba <lcd_clear>
    lcd_send_string(hi2c, LINE1, POS0, "Roll:");
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <flightStatusCallback+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	2180      	movs	r1, #128	@ 0x80
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f000 f8e0 	bl	8000b5a <lcd_send_string>
    lcd_send_string(hi2c, LINE2, POS0, "Pitch:");
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <flightStatusCallback+0x50>)
 800099c:	2200      	movs	r2, #0
 800099e:	21c0      	movs	r1, #192	@ 0xc0
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 f8da 	bl	8000b5a <lcd_send_string>
    lcd_send_string(hi2c, LINE3, POS0, "Yaw:");
 80009a6:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <flightStatusCallback+0x54>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	2194      	movs	r1, #148	@ 0x94
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f000 f8d4 	bl	8000b5a <lcd_send_string>
    lcd_send_string(hi2c, LINE3, POS0, "Altitude:");
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <flightStatusCallback+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	2194      	movs	r1, #148	@ 0x94
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f000 f8ce 	bl	8000b5a <lcd_send_string>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	080069e8 	.word	0x080069e8
 80009cc:	080069f0 	.word	0x080069f0
 80009d0:	080069f8 	.word	0x080069f8
 80009d4:	08006a00 	.word	0x08006a00

080009d8 <gpsSettingsCallback>:
    lcd_send_string(hi2c, LINE1, POS0, "Longtitude:");
    lcd_send_string(hi2c, LINE2, POS0, "Latitude:");
}

void gpsSettingsCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	70fb      	strb	r3, [r7, #3]
    lcd_clear(hi2c);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f000 f8e8 	bl	8000bba <lcd_clear>
    lcd_send_string(hi2c, LINE1, POS0, "Longtitude:");
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <gpsSettingsCallback+0x34>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	2180      	movs	r1, #128	@ 0x80
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f000 f8b2 	bl	8000b5a <lcd_send_string>
    lcd_send_string(hi2c, LINE2, POS0, "Latitude:");
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <gpsSettingsCallback+0x38>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	21c0      	movs	r1, #192	@ 0xc0
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 f8ac 	bl	8000b5a <lcd_send_string>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	0800699c 	.word	0x0800699c
 8000a10:	08006a0c 	.word	0x08006a0c

08000a14 <lcd_init>:

/*
 * @brief This is init function, only use it in super loop
 */
void lcd_init(I2C_HandleTypeDef *hi2c)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	// 4 bit initialisation
	HAL_Delay(50); // wait for >40ms
 8000a1c:	2032      	movs	r0, #50	@ 0x32
 8000a1e:	f001 f921 	bl	8001c64 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x30);
 8000a22:	2130      	movs	r1, #48	@ 0x30
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f000 f83c 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(5); // wait for >4.1ms
 8000a2a:	2005      	movs	r0, #5
 8000a2c:	f001 f91a 	bl	8001c64 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x30);
 8000a30:	2130      	movs	r1, #48	@ 0x30
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f000 f835 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(1); // wait for >100us
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f001 f913 	bl	8001c64 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x30);
 8000a3e:	2130      	movs	r1, #48	@ 0x30
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f000 f82e 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(10);
 8000a46:	200a      	movs	r0, #10
 8000a48:	f001 f90c 	bl	8001c64 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x20); // 4bit mode
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f000 f827 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(10);
 8000a54:	200a      	movs	r0, #10
 8000a56:	f001 f905 	bl	8001c64 <HAL_Delay>

	// dislay initialisation
	lcd_send_cmd(hi2c, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000a5a:	2128      	movs	r1, #40	@ 0x28
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f000 f820 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(1);
 8000a62:	2001      	movs	r0, #1
 8000a64:	f001 f8fe 	bl	8001c64 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x08); // Display on/off control --> D=0,C=0, B=0  ---> display off
 8000a68:	2108      	movs	r1, #8
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f000 f819 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(1);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f001 f8f7 	bl	8001c64 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x01); // clear display
 8000a76:	2101      	movs	r1, #1
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f000 f812 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(2);
 8000a7e:	2002      	movs	r0, #2
 8000a80:	f001 f8f0 	bl	8001c64 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x06); // Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000a84:	2106      	movs	r1, #6
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f000 f80b 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(1);
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f001 f8e9 	bl	8001c64 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x0C); // Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000a92:	210c      	movs	r1, #12
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f000 f804 	bl	8000aa2 <lcd_send_cmd>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <lcd_send_cmd>:

void lcd_send_cmd(I2C_HandleTypeDef *hi2c, char cmd)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af02      	add	r7, sp, #8
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000aae:	78fb      	ldrb	r3, [r7, #3]
 8000ab0:	f023 030f 	bic.w	r3, r3, #15
 8000ab4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8000ab6:	78fb      	ldrb	r3, [r7, #3]
 8000ab8:	011b      	lsls	r3, r3, #4
 8000aba:	73bb      	strb	r3, [r7, #14]
	//rs = 0 : send cmd
	data_t[0] = data_u | 0x0C; // en=1, rs=0 -> send 4 bit high, enable
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	f043 030c 	orr.w	r3, r3, #12
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08; // en=0, rs=0 -> unenable
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C; // en=1, rs=0 -> send 4 bit low, enable
 8000ad0:	7bbb      	ldrb	r3, [r7, #14]
 8000ad2:	f043 030c 	orr.w	r3, r3, #12
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08; // en=0, rs=0 ->
 8000ada:	7bbb      	ldrb	r3, [r7, #14]
 8000adc:	f043 0308 	orr.w	r3, r3, #8
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000ae4:	f107 0208 	add.w	r2, r7, #8
 8000ae8:	2364      	movs	r3, #100	@ 0x64
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2304      	movs	r3, #4
 8000aee:	214e      	movs	r1, #78	@ 0x4e
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f001 fccf 	bl	8002494 <HAL_I2C_Master_Transmit>
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <lcd_send_data>:

void lcd_send_data(I2C_HandleTypeDef *hi2c, unsigned char data)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af02      	add	r7, sp, #8
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	460b      	mov	r3, r1
 8000b08:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8000b0a:	78fb      	ldrb	r3, [r7, #3]
 8000b0c:	f023 030f 	bic.w	r3, r3, #15
 8000b10:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8000b12:	78fb      	ldrb	r3, [r7, #3]
 8000b14:	011b      	lsls	r3, r3, #4
 8000b16:	73bb      	strb	r3, [r7, #14]
	//rs = 1 : send data
	data_t[0] = data_u | 0x0D; // en=1, rs=1
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	f043 030d 	orr.w	r3, r3, #13
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09; // en=0, rs=1
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	f043 0309 	orr.w	r3, r3, #9
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D; // en=1, rs=1
 8000b2c:	7bbb      	ldrb	r3, [r7, #14]
 8000b2e:	f043 030d 	orr.w	r3, r3, #13
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09; // en=0, rs=1
 8000b36:	7bbb      	ldrb	r3, [r7, #14]
 8000b38:	f043 0309 	orr.w	r3, r3, #9
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000b40:	f107 0208 	add.w	r2, r7, #8
 8000b44:	2364      	movs	r3, #100	@ 0x64
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2304      	movs	r3, #4
 8000b4a:	214e      	movs	r1, #78	@ 0x4e
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f001 fca1 	bl	8002494 <HAL_I2C_Master_Transmit>
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <lcd_send_string>:

void lcd_send_string(I2C_HandleTypeDef *hi2c, char line, char pos, char *str)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	72fb      	strb	r3, [r7, #11]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	72bb      	strb	r3, [r7, #10]
	uint16_t length = (uint16_t)strlen(str);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff fb37 	bl	80001e0 <strlen>
 8000b72:	4603      	mov	r3, r0
 8000b74:	827b      	strh	r3, [r7, #18]
	lcd_send_cmd(hi2c, line + pos);
 8000b76:	7afa      	ldrb	r2, [r7, #11]
 8000b78:	7abb      	ldrb	r3, [r7, #10]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4619      	mov	r1, r3
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f7ff ff8e 	bl	8000aa2 <lcd_send_cmd>

	#if USING_RTOS == 0
	HAL_Delay(1);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f001 f86c 	bl	8001c64 <HAL_Delay>
	#else
	vTaskDelay(pdMS_TO_TICKS(1));
	#endif

	for (int i = 0; i < length; i++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	e00a      	b.n	8000ba8 <lcd_send_string+0x4e>
	{
		lcd_send_data(hi2c, *(str + i));
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	4413      	add	r3, r2
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f7ff ffae 	bl	8000afe <lcd_send_data>
	for (int i = 0; i < length; i++)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	8a7b      	ldrh	r3, [r7, #18]
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dbf0      	blt.n	8000b92 <lcd_send_string+0x38>
	}
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <lcd_clear>:
		lcd_send_data(hi2c, *(str + i));
	}
}

void lcd_clear(I2C_HandleTypeDef *hi2c)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
	lcd_send_cmd(hi2c,0x01);
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ff6c 	bl	8000aa2 <lcd_send_cmd>
	for (int i = 0; i < 80; i++)
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	e006      	b.n	8000bde <lcd_clear+0x24>
	{
		lcd_send_data(hi2c,' ');
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff ff93 	bl	8000afe <lcd_send_data>
	for (int i = 0; i < 80; i++)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	2b4f      	cmp	r3, #79	@ 0x4f
 8000be2:	ddf5      	ble.n	8000bd0 <lcd_clear+0x16>
	}
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  switch (GPIO_Pin)
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c04:	d02a      	beq.n	8000c5c <HAL_GPIO_EXTI_Callback+0x6c>
 8000c06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c0a:	dc30      	bgt.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
 8000c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c10:	d009      	beq.n	8000c26 <HAL_GPIO_EXTI_Callback+0x36>
 8000c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c16:	dc2a      	bgt.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
 8000c18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c1c:	d015      	beq.n	8000c4a <HAL_GPIO_EXTI_Callback+0x5a>
 8000c1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c22:	d009      	beq.n	8000c38 <HAL_GPIO_EXTI_Callback+0x48>
 8000c24:	e023      	b.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
  {
  case UP_Pin:
	  //UP_Pin_flag=1;
	  xSemaphoreGiveFromISR(xUpSem, &xHigherPriorityTaskWoken);
 8000c26:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <HAL_GPIO_EXTI_Callback+0x9c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f107 020c 	add.w	r2, r7, #12
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f003 fe4b 	bl	80048cc <xQueueGiveFromISR>
    break;
 8000c36:	e01a      	b.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
  case DOWN_Pin:
	  //DOWN_Pin_flag=1;
	  xSemaphoreGiveFromISR(xDownSem, &xHigherPriorityTaskWoken);
 8000c38:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f107 020c 	add.w	r2, r7, #12
 8000c40:	4611      	mov	r1, r2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f003 fe42 	bl	80048cc <xQueueGiveFromISR>
    break;
 8000c48:	e011      	b.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
  case SELECT_Pin:
	  //SELECT_Pin_flag=1;
	  xSemaphoreGiveFromISR(xSelectSem, &xHigherPriorityTaskWoken);
 8000c4a:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f107 020c 	add.w	r2, r7, #12
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f003 fe39 	bl	80048cc <xQueueGiveFromISR>
    break;
 8000c5a:	e008      	b.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
  case BACK_Pin:
	  //BACK_Pin_flag=1;
	  xSemaphoreGiveFromISR(xBackSem, &xHigherPriorityTaskWoken);
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f107 020c 	add.w	r2, r7, #12
 8000c64:	4611      	mov	r1, r2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f003 fe30 	bl	80048cc <xQueueGiveFromISR>
    break;
 8000c6c:	bf00      	nop
  }
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d007      	beq.n	8000c84 <HAL_GPIO_EXTI_Callback+0x94>
 8000c74:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <HAL_GPIO_EXTI_Callback+0xac>)
 8000c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	f3bf 8f4f 	dsb	sy
 8000c80:	f3bf 8f6f 	isb	sy
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200004b0 	.word	0x200004b0
 8000c90:	200004b4 	.word	0x200004b4
 8000c94:	200004b8 	.word	0x200004b8
 8000c98:	200004bc 	.word	0x200004bc
 8000c9c:	e000ed04 	.word	0xe000ed04

08000ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca0:	b5b0      	push	{r4, r5, r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca6:	f000 ff9b 	bl	8001be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000caa:	f000 f893 	bl	8000dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cae:	f000 f95d 	bl	8000f6c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cb2:	f000 f8f7 	bl	8000ea4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000cb6:	f000 f923 	bl	8000f00 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(&hi2c1);
 8000cba:	4836      	ldr	r0, [pc, #216]	@ (8000d94 <main+0xf4>)
 8000cbc:	f7ff feaa 	bl	8000a14 <lcd_init>
  menu_init(&hi2c1);
 8000cc0:	4834      	ldr	r0, [pc, #208]	@ (8000d94 <main+0xf4>)
 8000cc2:	f7ff fd1b 	bl	80006fc <menu_init>
  Two_Way_Commuination_Pipe0_Config(&hspi1, 0xC5C5C5C5C5, 0xA2A2A2A2A2);
 8000cc6:	f04f 32a2 	mov.w	r2, #2728567458	@ 0xa2a2a2a2
 8000cca:	f04f 03a2 	mov.w	r3, #162	@ 0xa2
 8000cce:	e9cd 2300 	strd	r2, r3, [sp]
 8000cd2:	f04f 32c5 	mov.w	r2, #3318072773	@ 0xc5c5c5c5
 8000cd6:	f04f 03c5 	mov.w	r3, #197	@ 0xc5
 8000cda:	482f      	ldr	r0, [pc, #188]	@ (8000d98 <main+0xf8>)
 8000cdc:	f000 fc02 	bl	80014e4 <Two_Way_Commuination_Pipe0_Config>
  Select_Tx_Mode(&hspi1);
 8000ce0:	482d      	ldr	r0, [pc, #180]	@ (8000d98 <main+0xf8>)
 8000ce2:	f000 fbab 	bl	800143c <Select_Tx_Mode>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000ce6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d9c <main+0xfc>)
 8000ce8:	1d3c      	adds	r4, r7, #4
 8000cea:	461d      	mov	r5, r3
 8000cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cf4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f003 fc0c 	bl	800451a <osThreadCreate>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4a26      	ldr	r2, [pc, #152]	@ (8000da0 <main+0x100>)
 8000d06:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(LCD_Task, "LCD", 256, NULL, 0, &LCD_Handle);
 8000d08:	4b26      	ldr	r3, [pc, #152]	@ (8000da4 <main+0x104>)
 8000d0a:	9301      	str	r3, [sp, #4]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	2300      	movs	r3, #0
 8000d12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d16:	4924      	ldr	r1, [pc, #144]	@ (8000da8 <main+0x108>)
 8000d18:	4824      	ldr	r0, [pc, #144]	@ (8000dac <main+0x10c>)
 8000d1a:	f003 ff6f 	bl	8004bfc <xTaskCreate>
  xTaskCreate(NRF_Task, "NRF", 256, NULL, 0, &NRF_Handle);
 8000d1e:	4b24      	ldr	r3, [pc, #144]	@ (8000db0 <main+0x110>)
 8000d20:	9301      	str	r3, [sp, #4]
 8000d22:	2300      	movs	r3, #0
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	2300      	movs	r3, #0
 8000d28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d2c:	4921      	ldr	r1, [pc, #132]	@ (8000db4 <main+0x114>)
 8000d2e:	4822      	ldr	r0, [pc, #136]	@ (8000db8 <main+0x118>)
 8000d30:	f003 ff64 	bl	8004bfc <xTaskCreate>
  xTaskCreate(Button_Task, "BTN", 256, NULL, 1, NULL);
 8000d34:	2300      	movs	r3, #0
 8000d36:	9301      	str	r3, [sp, #4]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d42:	491e      	ldr	r1, [pc, #120]	@ (8000dbc <main+0x11c>)
 8000d44:	481e      	ldr	r0, [pc, #120]	@ (8000dc0 <main+0x120>)
 8000d46:	f003 ff59 	bl	8004bfc <xTaskCreate>

  xUpSem     = xSemaphoreCreateBinary();
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f003 fd62 	bl	8004818 <xQueueGenericCreate>
 8000d54:	4603      	mov	r3, r0
 8000d56:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc4 <main+0x124>)
 8000d58:	6013      	str	r3, [r2, #0]
  xDownSem   = xSemaphoreCreateBinary();
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f003 fd5a 	bl	8004818 <xQueueGenericCreate>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4a18      	ldr	r2, [pc, #96]	@ (8000dc8 <main+0x128>)
 8000d68:	6013      	str	r3, [r2, #0]
  xSelectSem = xSemaphoreCreateBinary();
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f003 fd52 	bl	8004818 <xQueueGenericCreate>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4a15      	ldr	r2, [pc, #84]	@ (8000dcc <main+0x12c>)
 8000d78:	6013      	str	r3, [r2, #0]
  xBackSem   = xSemaphoreCreateBinary();
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f003 fd4a 	bl	8004818 <xQueueGenericCreate>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4a12      	ldr	r2, [pc, #72]	@ (8000dd0 <main+0x130>)
 8000d88:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d8a:	f003 fbbf 	bl	800450c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d8e:	bf00      	nop
 8000d90:	e7fd      	b.n	8000d8e <main+0xee>
 8000d92:	bf00      	nop
 8000d94:	200003b8 	.word	0x200003b8
 8000d98:	2000040c 	.word	0x2000040c
 8000d9c:	08006a30 	.word	0x08006a30
 8000da0:	20000464 	.word	0x20000464
 8000da4:	200004a8 	.word	0x200004a8
 8000da8:	08006a18 	.word	0x08006a18
 8000dac:	080010bd 	.word	0x080010bd
 8000db0:	200004ac 	.word	0x200004ac
 8000db4:	08006a1c 	.word	0x08006a1c
 8000db8:	08001081 	.word	0x08001081
 8000dbc:	08006a20 	.word	0x08006a20
 8000dc0:	080010cd 	.word	0x080010cd
 8000dc4:	200004b0 	.word	0x200004b0
 8000dc8:	200004b4 	.word	0x200004b4
 8000dcc:	200004b8 	.word	0x200004b8
 8000dd0:	200004bc 	.word	0x200004bc

08000dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b094      	sub	sp, #80	@ 0x50
 8000dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dda:	f107 0320 	add.w	r3, r7, #32
 8000dde:	2230      	movs	r2, #48	@ 0x30
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f005 f8ca 	bl	8005f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	4b27      	ldr	r3, [pc, #156]	@ (8000e9c <SystemClock_Config+0xc8>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e00:	4a26      	ldr	r2, [pc, #152]	@ (8000e9c <SystemClock_Config+0xc8>)
 8000e02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e08:	4b24      	ldr	r3, [pc, #144]	@ (8000e9c <SystemClock_Config+0xc8>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e14:	2300      	movs	r3, #0
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	4b21      	ldr	r3, [pc, #132]	@ (8000ea0 <SystemClock_Config+0xcc>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a20      	ldr	r2, [pc, #128]	@ (8000ea0 <SystemClock_Config+0xcc>)
 8000e1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea0 <SystemClock_Config+0xcc>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e30:	2301      	movs	r3, #1
 8000e32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e3e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e44:	2319      	movs	r3, #25
 8000e46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e48:	23a8      	movs	r3, #168	@ 0xa8
 8000e4a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e50:	2304      	movs	r3, #4
 8000e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e54:	f107 0320 	add.w	r3, r7, #32
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f001 fe75 	bl	8002b48 <HAL_RCC_OscConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e64:	f000 f996 	bl	8001194 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e68:	230f      	movs	r3, #15
 8000e6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	2102      	movs	r1, #2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f002 f8d7 	bl	8003038 <HAL_RCC_ClockConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e90:	f000 f980 	bl	8001194 <Error_Handler>
  }
}
 8000e94:	bf00      	nop
 8000e96:	3750      	adds	r7, #80	@ 0x50
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40007000 	.word	0x40007000

08000ea4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <MX_I2C1_Init+0x50>)
 8000eaa:	4a13      	ldr	r2, [pc, #76]	@ (8000ef8 <MX_I2C1_Init+0x54>)
 8000eac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eae:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <MX_I2C1_Init+0x50>)
 8000eb0:	4a12      	ldr	r2, [pc, #72]	@ (8000efc <MX_I2C1_Init+0x58>)
 8000eb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <MX_I2C1_Init+0x50>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <MX_I2C1_Init+0x50>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <MX_I2C1_Init+0x50>)
 8000ec2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ec6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <MX_I2C1_Init+0x50>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ece:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <MX_I2C1_Init+0x50>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <MX_I2C1_Init+0x50>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <MX_I2C1_Init+0x50>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ee0:	4804      	ldr	r0, [pc, #16]	@ (8000ef4 <MX_I2C1_Init+0x50>)
 8000ee2:	f001 f993 	bl	800220c <HAL_I2C_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000eec:	f000 f952 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200003b8 	.word	0x200003b8
 8000ef8:	40005400 	.word	0x40005400
 8000efc:	000186a0 	.word	0x000186a0

08000f00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f04:	4b17      	ldr	r3, [pc, #92]	@ (8000f64 <MX_SPI1_Init+0x64>)
 8000f06:	4a18      	ldr	r2, [pc, #96]	@ (8000f68 <MX_SPI1_Init+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	@ (8000f64 <MX_SPI1_Init+0x64>)
 8000f0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f12:	4b14      	ldr	r3, [pc, #80]	@ (8000f64 <MX_SPI1_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f18:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <MX_SPI1_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <MX_SPI1_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <MX_SPI1_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <MX_SPI1_Init+0x64>)
 8000f2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f32:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <MX_SPI1_Init+0x64>)
 8000f34:	2210      	movs	r2, #16
 8000f36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <MX_SPI1_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <MX_SPI1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f44:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <MX_SPI1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <MX_SPI1_Init+0x64>)
 8000f4c:	220a      	movs	r2, #10
 8000f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	@ (8000f64 <MX_SPI1_Init+0x64>)
 8000f52:	f002 fa83 	bl	800345c <HAL_SPI_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f5c:	f000 f91a 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	2000040c 	.word	0x2000040c
 8000f68:	40013000 	.word	0x40013000

08000f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	4b3b      	ldr	r3, [pc, #236]	@ (8001074 <MX_GPIO_Init+0x108>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	4a3a      	ldr	r2, [pc, #232]	@ (8001074 <MX_GPIO_Init+0x108>)
 8000f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f92:	4b38      	ldr	r3, [pc, #224]	@ (8001074 <MX_GPIO_Init+0x108>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	4b34      	ldr	r3, [pc, #208]	@ (8001074 <MX_GPIO_Init+0x108>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	4a33      	ldr	r2, [pc, #204]	@ (8001074 <MX_GPIO_Init+0x108>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fae:	4b31      	ldr	r3, [pc, #196]	@ (8001074 <MX_GPIO_Init+0x108>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8001074 <MX_GPIO_Init+0x108>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a2c      	ldr	r2, [pc, #176]	@ (8001074 <MX_GPIO_Init+0x108>)
 8000fc4:	f043 0302 	orr.w	r3, r3, #2
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b2a      	ldr	r3, [pc, #168]	@ (8001074 <MX_GPIO_Init+0x108>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|CE_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2103      	movs	r1, #3
 8000fda:	4827      	ldr	r0, [pc, #156]	@ (8001078 <MX_GPIO_Init+0x10c>)
 8000fdc:	f001 f8e4 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin CE_Pin */
  GPIO_InitStruct.Pin = CS_Pin|CE_Pin;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4820      	ldr	r0, [pc, #128]	@ (8001078 <MX_GPIO_Init+0x10c>)
 8000ff8:	f000 ff3a 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001000:	2300      	movs	r3, #0
 8001002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	4619      	mov	r1, r3
 800100e:	481a      	ldr	r0, [pc, #104]	@ (8001078 <MX_GPIO_Init+0x10c>)
 8001010:	f000 ff2e 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 BACK_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|BACK_Pin;
 8001014:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001018:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800101a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800101e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001020:	2301      	movs	r3, #1
 8001022:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	4619      	mov	r1, r3
 800102a:	4813      	ldr	r0, [pc, #76]	@ (8001078 <MX_GPIO_Init+0x10c>)
 800102c:	f000 ff20 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : SELECT_Pin DOWN_Pin UP_Pin HOME_Pin */
  GPIO_InitStruct.Pin = SELECT_Pin|DOWN_Pin|UP_Pin|HOME_Pin;
 8001030:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001034:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001036:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800103a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800103c:	2301      	movs	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	4619      	mov	r1, r3
 8001046:	480d      	ldr	r0, [pc, #52]	@ (800107c <MX_GPIO_Init+0x110>)
 8001048:	f000 ff12 	bl	8001e70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	2105      	movs	r1, #5
 8001050:	2017      	movs	r0, #23
 8001052:	f000 fee3 	bl	8001e1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001056:	2017      	movs	r0, #23
 8001058:	f000 fefc 	bl	8001e54 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2105      	movs	r1, #5
 8001060:	2028      	movs	r0, #40	@ 0x28
 8001062:	f000 fedb 	bl	8001e1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001066:	2028      	movs	r0, #40	@ 0x28
 8001068:	f000 fef4 	bl	8001e54 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800106c:	bf00      	nop
 800106e:	3720      	adds	r7, #32
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40023800 	.word	0x40023800
 8001078:	40020400 	.word	0x40020400
 800107c:	40020000 	.word	0x40020000

08001080 <NRF_Task>:

/* USER CODE BEGIN 4 */
void NRF_Task(void *argument)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 8001088:	2300      	movs	r3, #0
 800108a:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		sprintf((char*)spi_tx,"%d",i);
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	461a      	mov	r2, r3
 8001090:	4906      	ldr	r1, [pc, #24]	@ (80010ac <NRF_Task+0x2c>)
 8001092:	4807      	ldr	r0, [pc, #28]	@ (80010b0 <NRF_Task+0x30>)
 8001094:	f004 ff50 	bl	8005f38 <siprintf>
		Two_Way_Commuination_RTOS(&hspi1, spi_tx, spi_rx);
 8001098:	4a06      	ldr	r2, [pc, #24]	@ (80010b4 <NRF_Task+0x34>)
 800109a:	4905      	ldr	r1, [pc, #20]	@ (80010b0 <NRF_Task+0x30>)
 800109c:	4806      	ldr	r0, [pc, #24]	@ (80010b8 <NRF_Task+0x38>)
 800109e:	f000 fac3 	bl	8001628 <Two_Way_Commuination_RTOS>
		i++;
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	3301      	adds	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
		sprintf((char*)spi_tx,"%d",i);
 80010a8:	bf00      	nop
 80010aa:	e7ef      	b.n	800108c <NRF_Task+0xc>
 80010ac:	08006a4c 	.word	0x08006a4c
 80010b0:	20000468 	.word	0x20000468
 80010b4:	20000488 	.word	0x20000488
 80010b8:	2000040c 	.word	0x2000040c

080010bc <LCD_Task>:
	}
}

void LCD_Task(void *argument)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		vTaskDelay(pdMS_TO_TICKS(1));
 80010c4:	2001      	movs	r0, #1
 80010c6:	f003 fee9 	bl	8004e9c <vTaskDelay>
 80010ca:	e7fb      	b.n	80010c4 <LCD_Task+0x8>

080010cc <Button_Task>:
	}
}

void Button_Task(void *argument)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	for(;;)
	{
	         if(xSemaphoreTakeFromISR(xUpSem, 0) == pdTRUE)
 80010d4:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <Button_Task+0x80>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fc85 	bl	80049ec <xQueueReceiveFromISR>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d103      	bne.n	80010f0 <Button_Task+0x24>
		  	  {
		  		  on_up(&hi2c1);
 80010e8:	4819      	ldr	r0, [pc, #100]	@ (8001150 <Button_Task+0x84>)
 80010ea:	f7ff fb19 	bl	8000720 <on_up>
 80010ee:	e028      	b.n	8001142 <Button_Task+0x76>
		  		  //UP_Pin_flag=0;
		  	  }
		  	  else if(xSemaphoreTakeFromISR(xDownSem, 0) == pdTRUE)
 80010f0:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <Button_Task+0x88>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f003 fc77 	bl	80049ec <xQueueReceiveFromISR>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b01      	cmp	r3, #1
 8001102:	d103      	bne.n	800110c <Button_Task+0x40>
		  	  {
		  		  on_down(&hi2c1);
 8001104:	4812      	ldr	r0, [pc, #72]	@ (8001150 <Button_Task+0x84>)
 8001106:	f7ff fb23 	bl	8000750 <on_down>
 800110a:	e01a      	b.n	8001142 <Button_Task+0x76>
		  		  //DOWN_Pin_flag=0;
		  	  }
		  	  else if(xSemaphoreTakeFromISR(xBackSem, 0) == pdTRUE)
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <Button_Task+0x8c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2200      	movs	r2, #0
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f003 fc69 	bl	80049ec <xQueueReceiveFromISR>
 800111a:	4603      	mov	r3, r0
 800111c:	2b01      	cmp	r3, #1
 800111e:	d103      	bne.n	8001128 <Button_Task+0x5c>
		  	  {
		  		  on_back(&hi2c1);
 8001120:	480b      	ldr	r0, [pc, #44]	@ (8001150 <Button_Task+0x84>)
 8001122:	f7ff fb47 	bl	80007b4 <on_back>
 8001126:	e00c      	b.n	8001142 <Button_Task+0x76>
		  		  //BACK_Pin_flag=0;
		  	  }
		  	  else if(xSemaphoreTakeFromISR(xSelectSem, 0) == pdTRUE)
 8001128:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <Button_Task+0x90>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2200      	movs	r2, #0
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f003 fc5b 	bl	80049ec <xQueueReceiveFromISR>
 8001136:	4603      	mov	r3, r0
 8001138:	2b01      	cmp	r3, #1
 800113a:	d102      	bne.n	8001142 <Button_Task+0x76>
		  	  {
		  		  on_select(&hi2c1);
 800113c:	4804      	ldr	r0, [pc, #16]	@ (8001150 <Button_Task+0x84>)
 800113e:	f7ff fb25 	bl	800078c <on_select>
		  		  //SELECT_Pin_flag=0;
		  	  }
	         vTaskDelay(pdMS_TO_TICKS(20)); // debounce
 8001142:	2014      	movs	r0, #20
 8001144:	f003 feaa 	bl	8004e9c <vTaskDelay>
	         if(xSemaphoreTakeFromISR(xUpSem, 0) == pdTRUE)
 8001148:	e7c4      	b.n	80010d4 <Button_Task+0x8>
 800114a:	bf00      	nop
 800114c:	200004b0 	.word	0x200004b0
 8001150:	200003b8 	.word	0x200003b8
 8001154:	200004b4 	.word	0x200004b4
 8001158:	200004bc 	.word	0x200004bc
 800115c:	200004b8 	.word	0x200004b8

08001160 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001168:	2001      	movs	r0, #1
 800116a:	f003 fa22 	bl	80045b2 <osDelay>
 800116e:	e7fb      	b.n	8001168 <StartDefaultTask+0x8>

08001170 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a04      	ldr	r2, [pc, #16]	@ (8001190 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d101      	bne.n	8001186 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001182:	f000 fd4f 	bl	8001c24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40010000 	.word	0x40010000

08001194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001198:	b672      	cpsid	i
}
 800119a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <Error_Handler+0x8>

080011a0 <Chip_Select>:
#include "main.h"

NRF_MODE nrfmode;

void Chip_Select()
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO, CHIP_SELECT_PIN, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2101      	movs	r1, #1
 80011a8:	4802      	ldr	r0, [pc, #8]	@ (80011b4 <Chip_Select+0x14>)
 80011aa:	f000 fffd 	bl	80021a8 <HAL_GPIO_WritePin>
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40020400 	.word	0x40020400

080011b8 <Chip_Deselect>:

void Chip_Deselect()
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO, CHIP_SELECT_PIN, 1);
 80011bc:	2201      	movs	r2, #1
 80011be:	2101      	movs	r1, #1
 80011c0:	4802      	ldr	r0, [pc, #8]	@ (80011cc <Chip_Deselect+0x14>)
 80011c2:	f000 fff1 	bl	80021a8 <HAL_GPIO_WritePin>
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40020400 	.word	0x40020400

080011d0 <Set_CE_High>:

void Set_CE_High()
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CE_GPIO, CE_PIN, 1);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2102      	movs	r1, #2
 80011d8:	4802      	ldr	r0, [pc, #8]	@ (80011e4 <Set_CE_High+0x14>)
 80011da:	f000 ffe5 	bl	80021a8 <HAL_GPIO_WritePin>
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40020400 	.word	0x40020400

080011e8 <Set_CE_Low>:

void Set_CE_Low()
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CE_GPIO, CE_PIN, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2102      	movs	r1, #2
 80011f0:	4802      	ldr	r0, [pc, #8]	@ (80011fc <Set_CE_Low+0x14>)
 80011f2:	f000 ffd9 	bl	80021a8 <HAL_GPIO_WritePin>
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40020400 	.word	0x40020400

08001200 <WaitForIRQ>:

void WaitForIRQ()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(IRQ_GPIO, IRQ_PIN) == 1)
 8001204:	bf00      	nop
 8001206:	2104      	movs	r1, #4
 8001208:	4804      	ldr	r0, [pc, #16]	@ (800121c <WaitForIRQ+0x1c>)
 800120a:	f000 ffb5 	bl	8002178 <HAL_GPIO_ReadPin>
 800120e:	4603      	mov	r3, r0
 8001210:	2b01      	cmp	r3, #1
 8001212:	d0f8      	beq.n	8001206 <WaitForIRQ+0x6>
		;
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40020400 	.word	0x40020400

08001220 <nRF_WriteRegister>:

void nRF_WriteRegister(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t *data, int size)
{
 8001220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001224:	b089      	sub	sp, #36	@ 0x24
 8001226:	af00      	add	r7, sp, #0
 8001228:	60f8      	str	r0, [r7, #12]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	460b      	mov	r3, r1
 8001230:	72fb      	strb	r3, [r7, #11]
 8001232:	466b      	mov	r3, sp
 8001234:	461e      	mov	r6, r3
	uint8_t buff[size + 1];
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	1c59      	adds	r1, r3, #1
 800123a:	1e4b      	subs	r3, r1, #1
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	460a      	mov	r2, r1
 8001240:	2300      	movs	r3, #0
 8001242:	4690      	mov	r8, r2
 8001244:	4699      	mov	r9, r3
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	f04f 0300 	mov.w	r3, #0
 800124e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800125a:	460a      	mov	r2, r1
 800125c:	2300      	movs	r3, #0
 800125e:	4614      	mov	r4, r2
 8001260:	461d      	mov	r5, r3
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	f04f 0300 	mov.w	r3, #0
 800126a:	00eb      	lsls	r3, r5, #3
 800126c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001270:	00e2      	lsls	r2, r4, #3
 8001272:	460b      	mov	r3, r1
 8001274:	3307      	adds	r3, #7
 8001276:	08db      	lsrs	r3, r3, #3
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	ebad 0d03 	sub.w	sp, sp, r3
 800127e:	466b      	mov	r3, sp
 8001280:	3300      	adds	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
	buff[0] = reg | (1 << 5);
 8001284:	7afb      	ldrb	r3, [r7, #11]
 8001286:	f043 0320 	orr.w	r3, r3, #32
 800128a:	b2da      	uxtb	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++)
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
 8001294:	e00a      	b.n	80012ac <nRF_WriteRegister+0x8c>
	{
		buff[i + 1] = data[i];
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	441a      	add	r2, r3
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	3301      	adds	r3, #1
 80012a0:	7811      	ldrb	r1, [r2, #0]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < size; i++)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3301      	adds	r3, #1
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	dbf0      	blt.n	8001296 <nRF_WriteRegister+0x76>
	}
	Chip_Select();
 80012b4:	f7ff ff74 	bl	80011a0 <Chip_Select>
	HAL_SPI_Transmit(hspi, buff, (uint16_t)size + 1, NRF_SPI_TIMEOUT);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	3301      	adds	r3, #1
 80012be:	b29a      	uxth	r2, r3
 80012c0:	2364      	movs	r3, #100	@ 0x64
 80012c2:	6979      	ldr	r1, [r7, #20]
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f002 f952 	bl	800356e <HAL_SPI_Transmit>
	Chip_Deselect();
 80012ca:	f7ff ff75 	bl	80011b8 <Chip_Deselect>
 80012ce:	46b5      	mov	sp, r6
}
 80012d0:	bf00      	nop
 80012d2:	3724      	adds	r7, #36	@ 0x24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080012da <nRF_WriteOneRegister>:

void nRF_WriteOneRegister(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t data)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b084      	sub	sp, #16
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	460b      	mov	r3, r1
 80012e4:	70fb      	strb	r3, [r7, #3]
 80012e6:	4613      	mov	r3, r2
 80012e8:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2];
	buff[0] = reg | (1 << 5);
 80012ea:	78fb      	ldrb	r3, [r7, #3]
 80012ec:	f043 0320 	orr.w	r3, r3, #32
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	733b      	strb	r3, [r7, #12]
	buff[1] = data;
 80012f4:	78bb      	ldrb	r3, [r7, #2]
 80012f6:	737b      	strb	r3, [r7, #13]
	Chip_Select();
 80012f8:	f7ff ff52 	bl	80011a0 <Chip_Select>
	HAL_SPI_Transmit(hspi, buff, 2, NRF_SPI_TIMEOUT);
 80012fc:	f107 010c 	add.w	r1, r7, #12
 8001300:	2364      	movs	r3, #100	@ 0x64
 8001302:	2202      	movs	r2, #2
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f002 f932 	bl	800356e <HAL_SPI_Transmit>
	Chip_Deselect();
 800130a:	f7ff ff55 	bl	80011b8 <Chip_Deselect>
}
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <nRF_ReadOneRegister>:
	HAL_SPI_Receive(hspi, receive_data, size, NRF_SPI_TIMEOUT * 10);
	Chip_Deselect();
}

void nRF_ReadOneRegister(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t *receive_data)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	460b      	mov	r3, r1
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	72fb      	strb	r3, [r7, #11]

	uint8_t buff = reg;
 8001324:	7afb      	ldrb	r3, [r7, #11]
 8001326:	75fb      	strb	r3, [r7, #23]
	Chip_Select();
 8001328:	f7ff ff3a 	bl	80011a0 <Chip_Select>
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 800132c:	f107 0117 	add.w	r1, r7, #23
 8001330:	2364      	movs	r3, #100	@ 0x64
 8001332:	2201      	movs	r2, #1
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f002 f91a 	bl	800356e <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, receive_data, 1, NRF_SPI_TIMEOUT);
 800133a:	2364      	movs	r3, #100	@ 0x64
 800133c:	2201      	movs	r2, #1
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f002 fa58 	bl	80037f6 <HAL_SPI_Receive>
	Chip_Deselect();
 8001346:	f7ff ff37 	bl	80011b8 <Chip_Deselect>
}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <nRF_SendCmd>:
void nRF_SendCmd(SPI_HandleTypeDef *hspi, uint8_t cmd)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b084      	sub	sp, #16
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	70fb      	strb	r3, [r7, #3]

	uint8_t buff = cmd;
 800135e:	78fb      	ldrb	r3, [r7, #3]
 8001360:	73fb      	strb	r3, [r7, #15]
	Chip_Select();
 8001362:	f7ff ff1d 	bl	80011a0 <Chip_Select>
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8001366:	f107 010f 	add.w	r1, r7, #15
 800136a:	2364      	movs	r3, #100	@ 0x64
 800136c:	2201      	movs	r2, #1
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f002 f8fd 	bl	800356e <HAL_SPI_Transmit>
	Chip_Deselect();
 8001374:	f7ff ff20 	bl	80011b8 <Chip_Deselect>
}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <nRF_GetStatus>:

uint8_t nRF_GetStatus(SPI_HandleTypeDef *hspi)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

	uint8_t buff = STATUS;
 8001388:	2307      	movs	r3, #7
 800138a:	73fb      	strb	r3, [r7, #15]
	uint8_t rx_data = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	73bb      	strb	r3, [r7, #14]
	Chip_Select();
 8001390:	f7ff ff06 	bl	80011a0 <Chip_Select>
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8001394:	f107 010f 	add.w	r1, r7, #15
 8001398:	2364      	movs	r3, #100	@ 0x64
 800139a:	2201      	movs	r2, #1
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f002 f8e6 	bl	800356e <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &rx_data, 1, NRF_SPI_TIMEOUT * 10);
 80013a2:	f107 010e 	add.w	r1, r7, #14
 80013a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013aa:	2201      	movs	r2, #1
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f002 fa22 	bl	80037f6 <HAL_SPI_Receive>
	Chip_Deselect();
 80013b2:	f7ff ff01 	bl	80011b8 <Chip_Deselect>
	return rx_data;
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <nRF_TX_Payload>:

void nRF_TX_Payload(SPI_HandleTypeDef *hspi, uint8_t *data, uint16_t size)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	4613      	mov	r3, r2
 80013cc:	80fb      	strh	r3, [r7, #6]
	Chip_Select();
 80013ce:	f7ff fee7 	bl	80011a0 <Chip_Select>
	uint8_t buff = W_TX_PAYLOAD;
 80013d2:	23a0      	movs	r3, #160	@ 0xa0
 80013d4:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 80013d6:	f107 0117 	add.w	r1, r7, #23
 80013da:	2364      	movs	r3, #100	@ 0x64
 80013dc:	2201      	movs	r2, #1
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f002 f8c5 	bl	800356e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, data, size, NRF_SPI_TIMEOUT);
 80013e4:	88fa      	ldrh	r2, [r7, #6]
 80013e6:	2364      	movs	r3, #100	@ 0x64
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f002 f8bf 	bl	800356e <HAL_SPI_Transmit>
	Chip_Deselect();
 80013f0:	f7ff fee2 	bl	80011b8 <Chip_Deselect>
}
 80013f4:	bf00      	nop
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <nRF_RX_Payload>:

void nRF_RX_Payload(SPI_HandleTypeDef *hspi, uint8_t *rx_data, uint16_t size)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	4613      	mov	r3, r2
 8001408:	80fb      	strh	r3, [r7, #6]
	Chip_Select();
 800140a:	f7ff fec9 	bl	80011a0 <Chip_Select>
	uint8_t buff = R_RX_PAYLOAD;
 800140e:	2361      	movs	r3, #97	@ 0x61
 8001410:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8001412:	f107 0117 	add.w	r1, r7, #23
 8001416:	2364      	movs	r3, #100	@ 0x64
 8001418:	2201      	movs	r2, #1
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f002 f8a7 	bl	800356e <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, rx_data, size, NRF_SPI_TIMEOUT * 10);
 8001420:	88fa      	ldrh	r2, [r7, #6]
 8001422:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001426:	68b9      	ldr	r1, [r7, #8]
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f002 f9e4 	bl	80037f6 <HAL_SPI_Receive>
	Chip_Deselect();
 800142e:	f7ff fec3 	bl	80011b8 <Chip_Deselect>
}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <Select_Tx_Mode>:
	HAL_Delay(2);
	nrfmode = MODE_TX;
}

void Select_Tx_Mode(SPI_HandleTypeDef *hspi)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	uint8_t buff = 0x0a;
 8001444:	230a      	movs	r3, #10
 8001446:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low();
 8001448:	f7ff fece 	bl	80011e8 <Set_CE_Low>
	CONFIG_REG_Write(hspi, buff);
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	4619      	mov	r1, r3
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 f907 	bl	8001664 <CONFIG_REG_Write>
	Set_CE_High();
 8001456:	f7ff febb 	bl	80011d0 <Set_CE_High>
	HAL_Delay(2);
 800145a:	2002      	movs	r0, #2
 800145c:	f000 fc02 	bl	8001c64 <HAL_Delay>
	nrfmode = MODE_TX;
 8001460:	4b03      	ldr	r3, [pc, #12]	@ (8001470 <Select_Tx_Mode+0x34>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200004c0 	.word	0x200004c0

08001474 <Select_Tx_Mode_RTOS>:
	vTaskDelay(pdMS_TO_TICKS(2));
	nrfmode = MODE_TX;
}

void Select_Tx_Mode_RTOS(SPI_HandleTypeDef *hspi)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	uint8_t buff = 0x0a;
 800147c:	230a      	movs	r3, #10
 800147e:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low();
 8001480:	f7ff feb2 	bl	80011e8 <Set_CE_Low>
	CONFIG_REG_Write(hspi, buff);
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	4619      	mov	r1, r3
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f8eb 	bl	8001664 <CONFIG_REG_Write>
	Set_CE_High();
 800148e:	f7ff fe9f 	bl	80011d0 <Set_CE_High>
	vTaskDelay(pdMS_TO_TICKS(2));
 8001492:	2002      	movs	r0, #2
 8001494:	f003 fd02 	bl	8004e9c <vTaskDelay>
	nrfmode = MODE_TX;
 8001498:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <Select_Tx_Mode_RTOS+0x34>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200004c0 	.word	0x200004c0

080014ac <Select_Rx_Mode_RTOS>:
	nRF_SendCmd(hspi, FLUSH_RX);
	nrfmode = MODE_RX;
}

void Select_Rx_Mode_RTOS(SPI_HandleTypeDef *hspi)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	uint8_t buff = 0x0b;
 80014b4:	230b      	movs	r3, #11
 80014b6:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low();
 80014b8:	f7ff fe96 	bl	80011e8 <Set_CE_Low>
	CONFIG_REG_Write(hspi, buff);
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	4619      	mov	r1, r3
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 f8cf 	bl	8001664 <CONFIG_REG_Write>
	Set_CE_High();
 80014c6:	f7ff fe83 	bl	80011d0 <Set_CE_High>
	vTaskDelay(pdMS_TO_TICKS(2));
 80014ca:	2002      	movs	r0, #2
 80014cc:	f003 fce6 	bl	8004e9c <vTaskDelay>
	nrfmode = MODE_RX;
 80014d0:	4b03      	ldr	r3, [pc, #12]	@ (80014e0 <Select_Rx_Mode_RTOS+0x34>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200004c0 	.word	0x200004c0

080014e4 <Two_Way_Commuination_Pipe0_Config>:
#endif

void Two_Way_Commuination_Pipe0_Config(SPI_HandleTypeDef *hspi, uint64_t tx_addr, uint64_t rx_addr)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	e9c7 2300 	strd	r2, r3, [r7]
	Set_CE_Low();
 80014f0:	f7ff fe7a 	bl	80011e8 <Set_CE_Low>
	RX_PW_P_NUM_Number_Of_Bytes(hspi, 0, 8);
 80014f4:	2208      	movs	r2, #8
 80014f6:	2100      	movs	r1, #0
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f000 f933 	bl	8001764 <RX_PW_P_NUM_Number_Of_Bytes>
	TX_ADDR_Write(hspi, tx_addr);
 80014fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f000 f8fc 	bl	8001700 <TX_ADDR_Write>
	RX_ADDR_P0_Write(hspi, rx_addr);
 8001508:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	f000 f8c5 	bl	800169c <RX_ADDR_P0_Write>
	nRF_WriteOneRegister(hspi, EN_RXADDR, 1);
 8001512:	2201      	movs	r2, #1
 8001514:	2102      	movs	r1, #2
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f7ff fedf 	bl	80012da <nRF_WriteOneRegister>
	nRF_WriteOneRegister(hspi, EN_AA, 0x00);
 800151c:	2200      	movs	r2, #0
 800151e:	2101      	movs	r1, #1
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f7ff feda 	bl	80012da <nRF_WriteOneRegister>
	nRF_WriteOneRegister(hspi, RF_SETUP, 0x7);
 8001526:	2207      	movs	r2, #7
 8001528:	2106      	movs	r1, #6
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f7ff fed5 	bl	80012da <nRF_WriteOneRegister>
	Set_CE_High();
 8001530:	f7ff fe4e 	bl	80011d0 <Set_CE_High>
	HAL_Delay(2);
 8001534:	2002      	movs	r0, #2
 8001536:	f000 fb95 	bl	8001c64 <HAL_Delay>
}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <TX_Communication>:
	Set_CE_High();
	HAL_Delay(2);
}

uint8_t TX_Communication(SPI_HandleTypeDef *hspi, uint8_t *data)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
	if (nrfmode == MODE_TX)
 800154e:	4b1e      	ldr	r3, [pc, #120]	@ (80015c8 <TX_Communication+0x84>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d133      	bne.n	80015be <TX_Communication+0x7a>
	{
		nRF_TX_Payload(hspi, data, 8);
 8001556:	2208      	movs	r2, #8
 8001558:	6839      	ldr	r1, [r7, #0]
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ff30 	bl	80013c0 <nRF_TX_Payload>
		Set_CE_High();
 8001560:	f7ff fe36 	bl	80011d0 <Set_CE_High>
		WaitForIRQ();
 8001564:	f7ff fe4c 	bl	8001200 <WaitForIRQ>
		nRF_SendCmd(hspi, FLUSH_TX);
 8001568:	21e1      	movs	r1, #225	@ 0xe1
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fef1 	bl	8001352 <nRF_SendCmd>
		uint8_t status = nRF_GetStatus(hspi);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff05 	bl	8001380 <nRF_GetStatus>
 8001576:	4603      	mov	r3, r0
 8001578:	73fb      	strb	r3, [r7, #15]
		if ((status & (1 << MAX_RT)) != 0)
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	f003 0310 	and.w	r3, r3, #16
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00b      	beq.n	800159c <TX_Communication+0x58>
		{
			status |= ((1 << MAX_RT) | (1 << TX_FULL));
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	f043 0311 	orr.w	r3, r3, #17
 800158a:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(hspi, STATUS, status);
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	461a      	mov	r2, r3
 8001590:	2107      	movs	r1, #7
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fea1 	bl	80012da <nRF_WriteOneRegister>
			return STATUS_TX_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e011      	b.n	80015c0 <TX_Communication+0x7c>
		}
		else if ((status & (1 << 5)) != 0)
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	f003 0320 	and.w	r3, r3, #32
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00b      	beq.n	80015be <TX_Communication+0x7a>
		{
			status |= ((1 << TX_DS) | (1 << TX_FULL));
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 80015ac:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(hspi, STATUS, status);
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	461a      	mov	r2, r3
 80015b2:	2107      	movs	r1, #7
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fe90 	bl	80012da <nRF_WriteOneRegister>
			return STATUS_TX_OK;
 80015ba:	2302      	movs	r3, #2
 80015bc:	e000      	b.n	80015c0 <TX_Communication+0x7c>
		}
	}
	return STATUS_TX_NONDEFINE;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	200004c0 	.word	0x200004c0

080015cc <RX_Communication>:

uint8_t RX_Communication(SPI_HandleTypeDef *hspi, uint8_t *rx_data)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
	if (nrfmode == MODE_RX)
 80015d6:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <RX_Communication+0x58>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d11d      	bne.n	800161a <RX_Communication+0x4e>
	{
		Set_CE_High();
 80015de:	f7ff fdf7 	bl	80011d0 <Set_CE_High>
		uint8_t status = nRF_GetStatus(hspi);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fecc 	bl	8001380 <nRF_GetStatus>
 80015e8:	4603      	mov	r3, r0
 80015ea:	73fb      	strb	r3, [r7, #15]
		if ((status & (1 << RX_DR)) != 0)
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00b      	beq.n	800160e <RX_Communication+0x42>
		{
			nRF_WriteOneRegister(hspi, STATUS, (1 << 6));
 80015f6:	2240      	movs	r2, #64	@ 0x40
 80015f8:	2107      	movs	r1, #7
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff fe6d 	bl	80012da <nRF_WriteOneRegister>
			nRF_RX_Payload(hspi, rx_data, 8);
 8001600:	2208      	movs	r2, #8
 8001602:	6839      	ldr	r1, [r7, #0]
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fef9 	bl	80013fc <nRF_RX_Payload>
			return STATUS_RX_OK;
 800160a:	2302      	movs	r3, #2
 800160c:	e006      	b.n	800161c <RX_Communication+0x50>
		}
		nRF_SendCmd(hspi, FLUSH_RX);
 800160e:	21e2      	movs	r1, #226	@ 0xe2
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff fe9e 	bl	8001352 <nRF_SendCmd>
		return STATUS_RX_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <RX_Communication+0x50>
	}
	return STATUS_RX_NONEDEFINE;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	200004c0 	.word	0x200004c0

08001628 <Two_Way_Commuination_RTOS>:
	Select_Tx_Mode_RTOS(hspi);
	HAL_Delay(10);
}

void Two_Way_Commuination_RTOS(SPI_HandleTypeDef *hspi,uint8_t *tx_data,uint8_t *rx_data)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
	TX_Communication(hspi,tx_data);
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f7ff ff84 	bl	8001544 <TX_Communication>
	Select_Rx_Mode_RTOS(hspi);
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f7ff ff35 	bl	80014ac <Select_Rx_Mode_RTOS>
	vTaskDelay(pdMS_TO_TICKS(50));
 8001642:	2032      	movs	r0, #50	@ 0x32
 8001644:	f003 fc2a 	bl	8004e9c <vTaskDelay>
	RX_Communication(hspi,rx_data);
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f7ff ffbe 	bl	80015cc <RX_Communication>
	Select_Tx_Mode_RTOS(hspi);
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f7ff ff0f 	bl	8001474 <Select_Tx_Mode_RTOS>
	vTaskDelay(pdMS_TO_TICKS(10));
 8001656:	200a      	movs	r0, #10
 8001658:	f003 fc20 	bl	8004e9c <vTaskDelay>
}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <CONFIG_REG_Write>:

void CONFIG_REG_Write(SPI_HandleTypeDef *hspi, uint8_t data)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	70fb      	strb	r3, [r7, #3]
	uint8_t read_reg;
	do
	{
		nRF_WriteOneRegister(hspi, CONFIG, data);
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	461a      	mov	r2, r3
 8001674:	2100      	movs	r1, #0
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff fe2f 	bl	80012da <nRF_WriteOneRegister>
		nRF_ReadOneRegister(hspi, CONFIG, &read_reg);
 800167c:	f107 030f 	add.w	r3, r7, #15
 8001680:	461a      	mov	r2, r3
 8001682:	2100      	movs	r1, #0
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff fe46 	bl	8001316 <nRF_ReadOneRegister>
	} while (read_reg != data);
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	78fa      	ldrb	r2, [r7, #3]
 800168e:	429a      	cmp	r2, r3
 8001690:	d1ee      	bne.n	8001670 <CONFIG_REG_Write+0xc>
}
 8001692:	bf00      	nop
 8001694:	bf00      	nop
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <RX_ADDR_P0_Write>:
{
	nRF_WriteOneRegister(hspi, EN_AA, pipe & 0x3F);
}

void RX_ADDR_P0_Write(SPI_HandleTypeDef *hspi, uint64_t data)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	@ 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t buff[5];
	uint64_t temp = data;
 80016a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	e016      	b.n	80016e4 <RX_ADDR_P0_Write+0x48>
	{
		buff[i] = (uint8_t)((temp) & 0xff);
 80016b6:	f897 1020 	ldrb.w	r1, [r7, #32]
 80016ba:	f107 0214 	add.w	r2, r7, #20
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	4413      	add	r3, r2
 80016c2:	460a      	mov	r2, r1
 80016c4:	701a      	strb	r2, [r3, #0]
		temp = temp >> 8;
 80016c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	0a02      	lsrs	r2, r0, #8
 80016d4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80016d8:	0a0b      	lsrs	r3, r1, #8
 80016da:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3301      	adds	r3, #1
 80016e2:	61fb      	str	r3, [r7, #28]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	dde5      	ble.n	80016b6 <RX_ADDR_P0_Write+0x1a>
	}
	nRF_WriteRegister(hspi, RX_ADDR_P0, buff, 5);
 80016ea:	f107 0214 	add.w	r2, r7, #20
 80016ee:	2305      	movs	r3, #5
 80016f0:	210a      	movs	r1, #10
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f7ff fd94 	bl	8001220 <nRF_WriteRegister>
}
 80016f8:	bf00      	nop
 80016fa:	3728      	adds	r7, #40	@ 0x28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <TX_ADDR_Write>:
	}
	nRF_WriteOneRegister(hspi, reg, data);
}

void TX_ADDR_Write(SPI_HandleTypeDef *hspi, uint64_t data)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	@ 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t buff[5];
	uint64_t temp = data;
 800170c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001710:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	e016      	b.n	8001748 <TX_ADDR_Write+0x48>
	{
		buff[i] = (uint8_t)((temp) & 0xff);
 800171a:	f897 1020 	ldrb.w	r1, [r7, #32]
 800171e:	f107 0214 	add.w	r2, r7, #20
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	4413      	add	r3, r2
 8001726:	460a      	mov	r2, r1
 8001728:	701a      	strb	r2, [r3, #0]
		temp = temp >> 8;
 800172a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	0a02      	lsrs	r2, r0, #8
 8001738:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800173c:	0a0b      	lsrs	r3, r1, #8
 800173e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3301      	adds	r3, #1
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	2b04      	cmp	r3, #4
 800174c:	dde5      	ble.n	800171a <TX_ADDR_Write+0x1a>
	}
	nRF_WriteRegister(hspi, TX_ADDR, buff, 5);
 800174e:	f107 0214 	add.w	r2, r7, #20
 8001752:	2305      	movs	r3, #5
 8001754:	2110      	movs	r1, #16
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f7ff fd62 	bl	8001220 <nRF_WriteRegister>
}
 800175c:	bf00      	nop
 800175e:	3728      	adds	r7, #40	@ 0x28
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <RX_PW_P_NUM_Number_Of_Bytes>:

void RX_PW_P_NUM_Number_Of_Bytes(SPI_HandleTypeDef *hspi, int num, uint8_t data)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	4613      	mov	r3, r2
 8001770:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	switch (num)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2b05      	cmp	r3, #5
 8001776:	d828      	bhi.n	80017ca <RX_PW_P_NUM_Number_Of_Bytes+0x66>
 8001778:	a201      	add	r2, pc, #4	@ (adr r2, 8001780 <RX_PW_P_NUM_Number_Of_Bytes+0x1c>)
 800177a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177e:	bf00      	nop
 8001780:	08001799 	.word	0x08001799
 8001784:	0800179f 	.word	0x0800179f
 8001788:	080017a5 	.word	0x080017a5
 800178c:	080017ab 	.word	0x080017ab
 8001790:	080017b1 	.word	0x080017b1
 8001794:	080017b7 	.word	0x080017b7
	{
	case 0:
		reg = RX_PW_P0;
 8001798:	2311      	movs	r3, #17
 800179a:	75fb      	strb	r3, [r7, #23]
		break;
 800179c:	e00e      	b.n	80017bc <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 1:
		reg = RX_PW_P1;
 800179e:	2312      	movs	r3, #18
 80017a0:	75fb      	strb	r3, [r7, #23]
		break;
 80017a2:	e00b      	b.n	80017bc <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 2:
		reg = RX_PW_P2;
 80017a4:	2313      	movs	r3, #19
 80017a6:	75fb      	strb	r3, [r7, #23]
		break;
 80017a8:	e008      	b.n	80017bc <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 3:
		reg = RX_PW_P3;
 80017aa:	2314      	movs	r3, #20
 80017ac:	75fb      	strb	r3, [r7, #23]
		break;
 80017ae:	e005      	b.n	80017bc <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 4:
		reg = RX_PW_P4;
 80017b0:	2315      	movs	r3, #21
 80017b2:	75fb      	strb	r3, [r7, #23]
		break;
 80017b4:	e002      	b.n	80017bc <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 5:
		reg = RX_PW_P5;
 80017b6:	2316      	movs	r3, #22
 80017b8:	75fb      	strb	r3, [r7, #23]
		break;
 80017ba:	bf00      	nop
	default:
		return;
	}
	nRF_WriteOneRegister(hspi, reg, data);
 80017bc:	79fa      	ldrb	r2, [r7, #7]
 80017be:	7dfb      	ldrb	r3, [r7, #23]
 80017c0:	4619      	mov	r1, r3
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f7ff fd89 	bl	80012da <nRF_WriteOneRegister>
 80017c8:	e000      	b.n	80017cc <RX_PW_P_NUM_Number_Of_Bytes+0x68>
		return;
 80017ca:	bf00      	nop
}
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop

080017d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <HAL_MspInit+0x54>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e2:	4a11      	ldr	r2, [pc, #68]	@ (8001828 <HAL_MspInit+0x54>)
 80017e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <HAL_MspInit+0x54>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <HAL_MspInit+0x54>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001828 <HAL_MspInit+0x54>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001804:	6413      	str	r3, [r2, #64]	@ 0x40
 8001806:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <HAL_MspInit+0x54>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	210f      	movs	r1, #15
 8001816:	f06f 0001 	mvn.w	r0, #1
 800181a:	f000 faff 	bl	8001e1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800

0800182c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	@ 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a19      	ldr	r2, [pc, #100]	@ (80018b0 <HAL_I2C_MspInit+0x84>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d12b      	bne.n	80018a6 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <HAL_I2C_MspInit+0x88>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a17      	ldr	r2, [pc, #92]	@ (80018b4 <HAL_I2C_MspInit+0x88>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <HAL_I2C_MspInit+0x88>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800186a:	23c0      	movs	r3, #192	@ 0xc0
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186e:	2312      	movs	r3, #18
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800187a:	2304      	movs	r3, #4
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	480c      	ldr	r0, [pc, #48]	@ (80018b8 <HAL_I2C_MspInit+0x8c>)
 8001886:	f000 faf3 	bl	8001e70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <HAL_I2C_MspInit+0x88>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	4a08      	ldr	r2, [pc, #32]	@ (80018b4 <HAL_I2C_MspInit+0x88>)
 8001894:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001898:	6413      	str	r3, [r2, #64]	@ 0x40
 800189a:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_I2C_MspInit+0x88>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80018a6:	bf00      	nop
 80018a8:	3728      	adds	r7, #40	@ 0x28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40005400 	.word	0x40005400
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020400 	.word	0x40020400

080018bc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	@ 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a28      	ldr	r2, [pc, #160]	@ (800197c <HAL_SPI_MspInit+0xc0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d149      	bne.n	8001972 <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	4b27      	ldr	r3, [pc, #156]	@ (8001980 <HAL_SPI_MspInit+0xc4>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e6:	4a26      	ldr	r2, [pc, #152]	@ (8001980 <HAL_SPI_MspInit+0xc4>)
 80018e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ee:	4b24      	ldr	r3, [pc, #144]	@ (8001980 <HAL_SPI_MspInit+0xc4>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b20      	ldr	r3, [pc, #128]	@ (8001980 <HAL_SPI_MspInit+0xc4>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	4a1f      	ldr	r2, [pc, #124]	@ (8001980 <HAL_SPI_MspInit+0xc4>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6313      	str	r3, [r2, #48]	@ 0x30
 800190a:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <HAL_SPI_MspInit+0xc4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	4b19      	ldr	r3, [pc, #100]	@ (8001980 <HAL_SPI_MspInit+0xc4>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	4a18      	ldr	r2, [pc, #96]	@ (8001980 <HAL_SPI_MspInit+0xc4>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6313      	str	r3, [r2, #48]	@ 0x30
 8001926:	4b16      	ldr	r3, [pc, #88]	@ (8001980 <HAL_SPI_MspInit+0xc4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001932:	2380      	movs	r3, #128	@ 0x80
 8001934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193e:	2303      	movs	r3, #3
 8001940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001942:	2305      	movs	r3, #5
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	480d      	ldr	r0, [pc, #52]	@ (8001984 <HAL_SPI_MspInit+0xc8>)
 800194e:	f000 fa8f 	bl	8001e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001952:	2318      	movs	r3, #24
 8001954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001962:	2305      	movs	r3, #5
 8001964:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	4806      	ldr	r0, [pc, #24]	@ (8001988 <HAL_SPI_MspInit+0xcc>)
 800196e:	f000 fa7f 	bl	8001e70 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001972:	bf00      	nop
 8001974:	3728      	adds	r7, #40	@ 0x28
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40013000 	.word	0x40013000
 8001980:	40023800 	.word	0x40023800
 8001984:	40020000 	.word	0x40020000
 8001988:	40020400 	.word	0x40020400

0800198c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	@ 0x30
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a5c <HAL_InitTick+0xd0>)
 80019a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a4:	4a2d      	ldr	r2, [pc, #180]	@ (8001a5c <HAL_InitTick+0xd0>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ac:	4b2b      	ldr	r3, [pc, #172]	@ (8001a5c <HAL_InitTick+0xd0>)
 80019ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019b8:	f107 020c 	add.w	r2, r7, #12
 80019bc:	f107 0310 	add.w	r3, r7, #16
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f001 fd18 	bl	80033f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80019c8:	f001 fd02 	bl	80033d0 <HAL_RCC_GetPCLK2Freq>
 80019cc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019d0:	4a23      	ldr	r2, [pc, #140]	@ (8001a60 <HAL_InitTick+0xd4>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	0c9b      	lsrs	r3, r3, #18
 80019d8:	3b01      	subs	r3, #1
 80019da:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80019dc:	4b21      	ldr	r3, [pc, #132]	@ (8001a64 <HAL_InitTick+0xd8>)
 80019de:	4a22      	ldr	r2, [pc, #136]	@ (8001a68 <HAL_InitTick+0xdc>)
 80019e0:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80019e2:	4b20      	ldr	r3, [pc, #128]	@ (8001a64 <HAL_InitTick+0xd8>)
 80019e4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019e8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80019ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001a64 <HAL_InitTick+0xd8>)
 80019ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80019f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <HAL_InitTick+0xd8>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <HAL_InitTick+0xd8>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fc:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <HAL_InitTick+0xd8>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001a02:	4818      	ldr	r0, [pc, #96]	@ (8001a64 <HAL_InitTick+0xd8>)
 8001a04:	f002 fafc 	bl	8004000 <HAL_TIM_Base_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001a0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d11b      	bne.n	8001a4e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001a16:	4813      	ldr	r0, [pc, #76]	@ (8001a64 <HAL_InitTick+0xd8>)
 8001a18:	f002 fb4c 	bl	80040b4 <HAL_TIM_Base_Start_IT>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001a22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d111      	bne.n	8001a4e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a2a:	2019      	movs	r0, #25
 8001a2c:	f000 fa12 	bl	8001e54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b0f      	cmp	r3, #15
 8001a34:	d808      	bhi.n	8001a48 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001a36:	2200      	movs	r2, #0
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	2019      	movs	r0, #25
 8001a3c:	f000 f9ee 	bl	8001e1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a40:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <HAL_InitTick+0xe0>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e002      	b.n	8001a4e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001a4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3730      	adds	r7, #48	@ 0x30
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	431bde83 	.word	0x431bde83
 8001a64:	200004c4 	.word	0x200004c4
 8001a68:	40010000 	.word	0x40010000
 8001a6c:	20000098 	.word	0x20000098

08001a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <NMI_Handler+0x4>

08001a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <HardFault_Handler+0x4>

08001a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <MemManage_Handler+0x4>

08001a88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SELECT_Pin);
 8001aaa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001aae:	f000 fb95 	bl	80021dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_Pin);
 8001ab2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ab6:	f000 fb91 	bl	80021dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ac4:	4802      	ldr	r0, [pc, #8]	@ (8001ad0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001ac6:	f002 fb57 	bl	8004178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200004c4 	.word	0x200004c4

08001ad4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_Pin);
 8001ad8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001adc:	f000 fb7e 	bl	80021dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HOME_Pin);
 8001ae0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001ae4:	f000 fb7a 	bl	80021dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001ae8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001aec:	f000 fb76 	bl	80021dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BACK_Pin);
 8001af0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001af4:	f000 fb72 	bl	80021dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b04:	4a14      	ldr	r2, [pc, #80]	@ (8001b58 <_sbrk+0x5c>)
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <_sbrk+0x60>)
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b10:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b18:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <_sbrk+0x64>)
 8001b1a:	4a12      	ldr	r2, [pc, #72]	@ (8001b64 <_sbrk+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b1e:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d207      	bcs.n	8001b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b2c:	f004 fa8c 	bl	8006048 <__errno>
 8001b30:	4603      	mov	r3, r0
 8001b32:	220c      	movs	r2, #12
 8001b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3a:	e009      	b.n	8001b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b3c:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b42:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a05      	ldr	r2, [pc, #20]	@ (8001b60 <_sbrk+0x64>)
 8001b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20020000 	.word	0x20020000
 8001b5c:	00000400 	.word	0x00000400
 8001b60:	2000050c 	.word	0x2000050c
 8001b64:	200043b0 	.word	0x200043b0

08001b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <SystemInit+0x20>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b72:	4a05      	ldr	r2, [pc, #20]	@ (8001b88 <SystemInit+0x20>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b90:	f7ff ffea 	bl	8001b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b94:	480c      	ldr	r0, [pc, #48]	@ (8001bc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b96:	490d      	ldr	r1, [pc, #52]	@ (8001bcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b98:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b9c:	e002      	b.n	8001ba4 <LoopCopyDataInit>

08001b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba2:	3304      	adds	r3, #4

08001ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba8:	d3f9      	bcc.n	8001b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001baa:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bac:	4c0a      	ldr	r4, [pc, #40]	@ (8001bd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb0:	e001      	b.n	8001bb6 <LoopFillZerobss>

08001bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb4:	3204      	adds	r2, #4

08001bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb8:	d3fb      	bcc.n	8001bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bba:	f004 fa4b 	bl	8006054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bbe:	f7ff f86f 	bl	8000ca0 <main>
  bx  lr    
 8001bc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bcc:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8001bd0:	08006ab4 	.word	0x08006ab4
  ldr r2, =_sbss
 8001bd4:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8001bd8:	200043b0 	.word	0x200043b0

08001bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bdc:	e7fe      	b.n	8001bdc <ADC_IRQHandler>
	...

08001be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <HAL_Init+0x40>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c20 <HAL_Init+0x40>)
 8001bea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <HAL_Init+0x40>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c20 <HAL_Init+0x40>)
 8001bf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bfc:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <HAL_Init+0x40>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a07      	ldr	r2, [pc, #28]	@ (8001c20 <HAL_Init+0x40>)
 8001c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f000 f8fc 	bl	8001e06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0e:	200f      	movs	r0, #15
 8001c10:	f7ff febc 	bl	800198c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c14:	f7ff fdde 	bl	80017d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c28:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <HAL_IncTick+0x20>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <HAL_IncTick+0x24>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a04      	ldr	r2, [pc, #16]	@ (8001c48 <HAL_IncTick+0x24>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	2000009c 	.word	0x2000009c
 8001c48:	20000510 	.word	0x20000510

08001c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c50:	4b03      	ldr	r3, [pc, #12]	@ (8001c60 <HAL_GetTick+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000510 	.word	0x20000510

08001c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff ffee 	bl	8001c4c <HAL_GetTick>
 8001c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d005      	beq.n	8001c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca8 <HAL_Delay+0x44>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c8a:	bf00      	nop
 8001c8c:	f7ff ffde 	bl	8001c4c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d8f7      	bhi.n	8001c8c <HAL_Delay+0x28>
  {
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	2000009c 	.word	0x2000009c

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cde:	4a04      	ldr	r2, [pc, #16]	@ (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60d3      	str	r3, [r2, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	@ (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db0b      	blt.n	8001d3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4907      	ldr	r1, [pc, #28]	@ (8001d48 <__NVIC_EnableIRQ+0x38>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2001      	movs	r0, #1
 8001d32:	fa00 f202 	lsl.w	r2, r0, r2
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000e100 	.word	0xe000e100

08001d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	db0a      	blt.n	8001d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	490c      	ldr	r1, [pc, #48]	@ (8001d98 <__NVIC_SetPriority+0x4c>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	0112      	lsls	r2, r2, #4
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d74:	e00a      	b.n	8001d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4908      	ldr	r1, [pc, #32]	@ (8001d9c <__NVIC_SetPriority+0x50>)
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	3b04      	subs	r3, #4
 8001d84:	0112      	lsls	r2, r2, #4
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	440b      	add	r3, r1
 8001d8a:	761a      	strb	r2, [r3, #24]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000e100 	.word	0xe000e100
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	@ 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f1c3 0307 	rsb	r3, r3, #7
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	bf28      	it	cs
 8001dbe:	2304      	movcs	r3, #4
 8001dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d902      	bls.n	8001dd0 <NVIC_EncodePriority+0x30>
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3b03      	subs	r3, #3
 8001dce:	e000      	b.n	8001dd2 <NVIC_EncodePriority+0x32>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	401a      	ands	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	43d9      	mvns	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	4313      	orrs	r3, r2
         );
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	@ 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ff4c 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2e:	f7ff ff61 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	68b9      	ldr	r1, [r7, #8]
 8001e38:	6978      	ldr	r0, [r7, #20]
 8001e3a:	f7ff ffb1 	bl	8001da0 <NVIC_EncodePriority>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e44:	4611      	mov	r1, r2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff80 	bl	8001d4c <__NVIC_SetPriority>
}
 8001e4c:	bf00      	nop
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff ff54 	bl	8001d10 <__NVIC_EnableIRQ>
}
 8001e68:	bf00      	nop
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	@ 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
 8001e8a:	e159      	b.n	8002140 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	f040 8148 	bne.w	800213a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d005      	beq.n	8001ec2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d130      	bne.n	8001f24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	2203      	movs	r2, #3
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef8:	2201      	movs	r2, #1
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 0201 	and.w	r2, r3, #1
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d017      	beq.n	8001f60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d123      	bne.n	8001fb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	08da      	lsrs	r2, r3, #3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3208      	adds	r2, #8
 8001f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	220f      	movs	r2, #15
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	08da      	lsrs	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3208      	adds	r2, #8
 8001fae:	69b9      	ldr	r1, [r7, #24]
 8001fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0203 	and.w	r2, r3, #3
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80a2 	beq.w	800213a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b57      	ldr	r3, [pc, #348]	@ (8002158 <HAL_GPIO_Init+0x2e8>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	4a56      	ldr	r2, [pc, #344]	@ (8002158 <HAL_GPIO_Init+0x2e8>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002004:	6453      	str	r3, [r2, #68]	@ 0x44
 8002006:	4b54      	ldr	r3, [pc, #336]	@ (8002158 <HAL_GPIO_Init+0x2e8>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002012:	4a52      	ldr	r2, [pc, #328]	@ (800215c <HAL_GPIO_Init+0x2ec>)
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	3302      	adds	r3, #2
 800201a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	220f      	movs	r2, #15
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a49      	ldr	r2, [pc, #292]	@ (8002160 <HAL_GPIO_Init+0x2f0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d019      	beq.n	8002072 <HAL_GPIO_Init+0x202>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a48      	ldr	r2, [pc, #288]	@ (8002164 <HAL_GPIO_Init+0x2f4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_GPIO_Init+0x1fe>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a47      	ldr	r2, [pc, #284]	@ (8002168 <HAL_GPIO_Init+0x2f8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00d      	beq.n	800206a <HAL_GPIO_Init+0x1fa>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a46      	ldr	r2, [pc, #280]	@ (800216c <HAL_GPIO_Init+0x2fc>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <HAL_GPIO_Init+0x1f6>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a45      	ldr	r2, [pc, #276]	@ (8002170 <HAL_GPIO_Init+0x300>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d101      	bne.n	8002062 <HAL_GPIO_Init+0x1f2>
 800205e:	2304      	movs	r3, #4
 8002060:	e008      	b.n	8002074 <HAL_GPIO_Init+0x204>
 8002062:	2307      	movs	r3, #7
 8002064:	e006      	b.n	8002074 <HAL_GPIO_Init+0x204>
 8002066:	2303      	movs	r3, #3
 8002068:	e004      	b.n	8002074 <HAL_GPIO_Init+0x204>
 800206a:	2302      	movs	r3, #2
 800206c:	e002      	b.n	8002074 <HAL_GPIO_Init+0x204>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <HAL_GPIO_Init+0x204>
 8002072:	2300      	movs	r3, #0
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	f002 0203 	and.w	r2, r2, #3
 800207a:	0092      	lsls	r2, r2, #2
 800207c:	4093      	lsls	r3, r2
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002084:	4935      	ldr	r1, [pc, #212]	@ (800215c <HAL_GPIO_Init+0x2ec>)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	3302      	adds	r3, #2
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002092:	4b38      	ldr	r3, [pc, #224]	@ (8002174 <HAL_GPIO_Init+0x304>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020b6:	4a2f      	ldr	r2, [pc, #188]	@ (8002174 <HAL_GPIO_Init+0x304>)
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002174 <HAL_GPIO_Init+0x304>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020e0:	4a24      	ldr	r2, [pc, #144]	@ (8002174 <HAL_GPIO_Init+0x304>)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020e6:	4b23      	ldr	r3, [pc, #140]	@ (8002174 <HAL_GPIO_Init+0x304>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800210a:	4a1a      	ldr	r2, [pc, #104]	@ (8002174 <HAL_GPIO_Init+0x304>)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002110:	4b18      	ldr	r3, [pc, #96]	@ (8002174 <HAL_GPIO_Init+0x304>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002134:	4a0f      	ldr	r2, [pc, #60]	@ (8002174 <HAL_GPIO_Init+0x304>)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3301      	adds	r3, #1
 800213e:	61fb      	str	r3, [r7, #28]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	2b0f      	cmp	r3, #15
 8002144:	f67f aea2 	bls.w	8001e8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002148:	bf00      	nop
 800214a:	bf00      	nop
 800214c:	3724      	adds	r7, #36	@ 0x24
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800
 800215c:	40013800 	.word	0x40013800
 8002160:	40020000 	.word	0x40020000
 8002164:	40020400 	.word	0x40020400
 8002168:	40020800 	.word	0x40020800
 800216c:	40020c00 	.word	0x40020c00
 8002170:	40021000 	.word	0x40021000
 8002174:	40013c00 	.word	0x40013c00

08002178 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	887b      	ldrh	r3, [r7, #2]
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d002      	beq.n	8002196 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
 8002194:	e001      	b.n	800219a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002196:	2300      	movs	r3, #0
 8002198:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800219a:	7bfb      	ldrb	r3, [r7, #15]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
 80021b4:	4613      	mov	r3, r2
 80021b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b8:	787b      	ldrb	r3, [r7, #1]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021c4:	e003      	b.n	80021ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021c6:	887b      	ldrh	r3, [r7, #2]
 80021c8:	041a      	lsls	r2, r3, #16
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	619a      	str	r2, [r3, #24]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021e6:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e8:	695a      	ldr	r2, [r3, #20]
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d006      	beq.n	8002200 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021f2:	4a05      	ldr	r2, [pc, #20]	@ (8002208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe fcf8 	bl	8000bf0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40013c00 	.word	0x40013c00

0800220c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e12b      	b.n	8002476 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff fafa 	bl	800182c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2224      	movs	r2, #36	@ 0x24
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0201 	bic.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800225e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800226e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002270:	f001 f89a 	bl	80033a8 <HAL_RCC_GetPCLK1Freq>
 8002274:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	4a81      	ldr	r2, [pc, #516]	@ (8002480 <HAL_I2C_Init+0x274>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d807      	bhi.n	8002290 <HAL_I2C_Init+0x84>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4a80      	ldr	r2, [pc, #512]	@ (8002484 <HAL_I2C_Init+0x278>)
 8002284:	4293      	cmp	r3, r2
 8002286:	bf94      	ite	ls
 8002288:	2301      	movls	r3, #1
 800228a:	2300      	movhi	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	e006      	b.n	800229e <HAL_I2C_Init+0x92>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4a7d      	ldr	r2, [pc, #500]	@ (8002488 <HAL_I2C_Init+0x27c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	bf94      	ite	ls
 8002298:	2301      	movls	r3, #1
 800229a:	2300      	movhi	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e0e7      	b.n	8002476 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4a78      	ldr	r2, [pc, #480]	@ (800248c <HAL_I2C_Init+0x280>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	0c9b      	lsrs	r3, r3, #18
 80022b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002480 <HAL_I2C_Init+0x274>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d802      	bhi.n	80022e0 <HAL_I2C_Init+0xd4>
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	3301      	adds	r3, #1
 80022de:	e009      	b.n	80022f4 <HAL_I2C_Init+0xe8>
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022e6:	fb02 f303 	mul.w	r3, r2, r3
 80022ea:	4a69      	ldr	r2, [pc, #420]	@ (8002490 <HAL_I2C_Init+0x284>)
 80022ec:	fba2 2303 	umull	r2, r3, r2, r3
 80022f0:	099b      	lsrs	r3, r3, #6
 80022f2:	3301      	adds	r3, #1
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	430b      	orrs	r3, r1
 80022fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002306:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	495c      	ldr	r1, [pc, #368]	@ (8002480 <HAL_I2C_Init+0x274>)
 8002310:	428b      	cmp	r3, r1
 8002312:	d819      	bhi.n	8002348 <HAL_I2C_Init+0x13c>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1e59      	subs	r1, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002322:	1c59      	adds	r1, r3, #1
 8002324:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002328:	400b      	ands	r3, r1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <HAL_I2C_Init+0x138>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1e59      	subs	r1, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fbb1 f3f3 	udiv	r3, r1, r3
 800233c:	3301      	adds	r3, #1
 800233e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002342:	e051      	b.n	80023e8 <HAL_I2C_Init+0x1dc>
 8002344:	2304      	movs	r3, #4
 8002346:	e04f      	b.n	80023e8 <HAL_I2C_Init+0x1dc>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d111      	bne.n	8002374 <HAL_I2C_Init+0x168>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1e58      	subs	r0, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6859      	ldr	r1, [r3, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	440b      	add	r3, r1
 800235e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002362:	3301      	adds	r3, #1
 8002364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	e012      	b.n	800239a <HAL_I2C_Init+0x18e>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1e58      	subs	r0, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	0099      	lsls	r1, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	fbb0 f3f3 	udiv	r3, r0, r3
 800238a:	3301      	adds	r3, #1
 800238c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf0c      	ite	eq
 8002394:	2301      	moveq	r3, #1
 8002396:	2300      	movne	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_I2C_Init+0x196>
 800239e:	2301      	movs	r3, #1
 80023a0:	e022      	b.n	80023e8 <HAL_I2C_Init+0x1dc>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10e      	bne.n	80023c8 <HAL_I2C_Init+0x1bc>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1e58      	subs	r0, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6859      	ldr	r1, [r3, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	440b      	add	r3, r1
 80023b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80023bc:	3301      	adds	r3, #1
 80023be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023c6:	e00f      	b.n	80023e8 <HAL_I2C_Init+0x1dc>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1e58      	subs	r0, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6859      	ldr	r1, [r3, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	0099      	lsls	r1, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	fbb0 f3f3 	udiv	r3, r0, r3
 80023de:	3301      	adds	r3, #1
 80023e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	6809      	ldr	r1, [r1, #0]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69da      	ldr	r2, [r3, #28]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002416:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6911      	ldr	r1, [r2, #16]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68d2      	ldr	r2, [r2, #12]
 8002422:	4311      	orrs	r1, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	430b      	orrs	r3, r1
 800242a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2220      	movs	r2, #32
 8002462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	000186a0 	.word	0x000186a0
 8002484:	001e847f 	.word	0x001e847f
 8002488:	003d08ff 	.word	0x003d08ff
 800248c:	431bde83 	.word	0x431bde83
 8002490:	10624dd3 	.word	0x10624dd3

08002494 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	461a      	mov	r2, r3
 80024a0:	460b      	mov	r3, r1
 80024a2:	817b      	strh	r3, [r7, #10]
 80024a4:	4613      	mov	r3, r2
 80024a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024a8:	f7ff fbd0 	bl	8001c4c <HAL_GetTick>
 80024ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b20      	cmp	r3, #32
 80024b8:	f040 80e0 	bne.w	800267c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2319      	movs	r3, #25
 80024c2:	2201      	movs	r2, #1
 80024c4:	4970      	ldr	r1, [pc, #448]	@ (8002688 <HAL_I2C_Master_Transmit+0x1f4>)
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 f964 	bl	8002794 <I2C_WaitOnFlagUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024d2:	2302      	movs	r3, #2
 80024d4:	e0d3      	b.n	800267e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_I2C_Master_Transmit+0x50>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e0cc      	b.n	800267e <HAL_I2C_Master_Transmit+0x1ea>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d007      	beq.n	800250a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0201 	orr.w	r2, r2, #1
 8002508:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002518:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2221      	movs	r2, #33	@ 0x21
 800251e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2210      	movs	r2, #16
 8002526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	893a      	ldrh	r2, [r7, #8]
 800253a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4a50      	ldr	r2, [pc, #320]	@ (800268c <HAL_I2C_Master_Transmit+0x1f8>)
 800254a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800254c:	8979      	ldrh	r1, [r7, #10]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	6a3a      	ldr	r2, [r7, #32]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f89c 	bl	8002690 <I2C_MasterRequestWrite>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e08d      	b.n	800267e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002578:	e066      	b.n	8002648 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	6a39      	ldr	r1, [r7, #32]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 fa22 	bl	80029c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00d      	beq.n	80025a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	2b04      	cmp	r3, #4
 8002590:	d107      	bne.n	80025a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e06b      	b.n	800267e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025aa:	781a      	ldrb	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d11b      	bne.n	800261c <HAL_I2C_Master_Transmit+0x188>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d017      	beq.n	800261c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f0:	781a      	ldrb	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002606:	b29b      	uxth	r3, r3
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	6a39      	ldr	r1, [r7, #32]
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 fa19 	bl	8002a58 <I2C_WaitOnBTFFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00d      	beq.n	8002648 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002630:	2b04      	cmp	r3, #4
 8002632:	d107      	bne.n	8002644 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002642:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e01a      	b.n	800267e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800264c:	2b00      	cmp	r3, #0
 800264e:	d194      	bne.n	800257a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800265e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	e000      	b.n	800267e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800267c:	2302      	movs	r3, #2
  }
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	00100002 	.word	0x00100002
 800268c:	ffff0000 	.word	0xffff0000

08002690 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af02      	add	r7, sp, #8
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	607a      	str	r2, [r7, #4]
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	460b      	mov	r3, r1
 800269e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d006      	beq.n	80026ba <I2C_MasterRequestWrite+0x2a>
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d003      	beq.n	80026ba <I2C_MasterRequestWrite+0x2a>
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026b8:	d108      	bne.n	80026cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	e00b      	b.n	80026e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d0:	2b12      	cmp	r3, #18
 80026d2:	d107      	bne.n	80026e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 f84f 	bl	8002794 <I2C_WaitOnFlagUntilTimeout>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00d      	beq.n	8002718 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800270a:	d103      	bne.n	8002714 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002712:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e035      	b.n	8002784 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002720:	d108      	bne.n	8002734 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002722:	897b      	ldrh	r3, [r7, #10]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002730:	611a      	str	r2, [r3, #16]
 8002732:	e01b      	b.n	800276c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002734:	897b      	ldrh	r3, [r7, #10]
 8002736:	11db      	asrs	r3, r3, #7
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f003 0306 	and.w	r3, r3, #6
 800273e:	b2db      	uxtb	r3, r3
 8002740:	f063 030f 	orn	r3, r3, #15
 8002744:	b2da      	uxtb	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	490e      	ldr	r1, [pc, #56]	@ (800278c <I2C_MasterRequestWrite+0xfc>)
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f898 	bl	8002888 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e010      	b.n	8002784 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002762:	897b      	ldrh	r3, [r7, #10]
 8002764:	b2da      	uxtb	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	4907      	ldr	r1, [pc, #28]	@ (8002790 <I2C_MasterRequestWrite+0x100>)
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f888 	bl	8002888 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	00010008 	.word	0x00010008
 8002790:	00010002 	.word	0x00010002

08002794 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	4613      	mov	r3, r2
 80027a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027a4:	e048      	b.n	8002838 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ac:	d044      	beq.n	8002838 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ae:	f7ff fa4d 	bl	8001c4c <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d302      	bcc.n	80027c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d139      	bne.n	8002838 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	0c1b      	lsrs	r3, r3, #16
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d10d      	bne.n	80027ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	43da      	mvns	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	4013      	ands	r3, r2
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	bf0c      	ite	eq
 80027e0:	2301      	moveq	r3, #1
 80027e2:	2300      	movne	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	e00c      	b.n	8002804 <I2C_WaitOnFlagUntilTimeout+0x70>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	43da      	mvns	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	4013      	ands	r3, r2
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	bf0c      	ite	eq
 80027fc:	2301      	moveq	r3, #1
 80027fe:	2300      	movne	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	461a      	mov	r2, r3
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	429a      	cmp	r2, r3
 8002808:	d116      	bne.n	8002838 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	f043 0220 	orr.w	r2, r3, #32
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e023      	b.n	8002880 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	0c1b      	lsrs	r3, r3, #16
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d10d      	bne.n	800285e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	43da      	mvns	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	4013      	ands	r3, r2
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf0c      	ite	eq
 8002854:	2301      	moveq	r3, #1
 8002856:	2300      	movne	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	e00c      	b.n	8002878 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	43da      	mvns	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	4013      	ands	r3, r2
 800286a:	b29b      	uxth	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	bf0c      	ite	eq
 8002870:	2301      	moveq	r3, #1
 8002872:	2300      	movne	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	429a      	cmp	r2, r3
 800287c:	d093      	beq.n	80027a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002896:	e071      	b.n	800297c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028a6:	d123      	bne.n	80028f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	f043 0204 	orr.w	r2, r3, #4
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e067      	b.n	80029c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f6:	d041      	beq.n	800297c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f8:	f7ff f9a8 	bl	8001c4c <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	429a      	cmp	r2, r3
 8002906:	d302      	bcc.n	800290e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d136      	bne.n	800297c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	0c1b      	lsrs	r3, r3, #16
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d10c      	bne.n	8002932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	43da      	mvns	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4013      	ands	r3, r2
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	bf14      	ite	ne
 800292a:	2301      	movne	r3, #1
 800292c:	2300      	moveq	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	e00b      	b.n	800294a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	43da      	mvns	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	4013      	ands	r3, r2
 800293e:	b29b      	uxth	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	bf14      	ite	ne
 8002944:	2301      	movne	r3, #1
 8002946:	2300      	moveq	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d016      	beq.n	800297c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	f043 0220 	orr.w	r2, r3, #32
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e021      	b.n	80029c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	0c1b      	lsrs	r3, r3, #16
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b01      	cmp	r3, #1
 8002984:	d10c      	bne.n	80029a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	43da      	mvns	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	4013      	ands	r3, r2
 8002992:	b29b      	uxth	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf14      	ite	ne
 8002998:	2301      	movne	r3, #1
 800299a:	2300      	moveq	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	e00b      	b.n	80029b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	43da      	mvns	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4013      	ands	r3, r2
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	bf14      	ite	ne
 80029b2:	2301      	movne	r3, #1
 80029b4:	2300      	moveq	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f47f af6d 	bne.w	8002898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029d4:	e034      	b.n	8002a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 f886 	bl	8002ae8 <I2C_IsAcknowledgeFailed>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e034      	b.n	8002a50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d028      	beq.n	8002a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ee:	f7ff f92d 	bl	8001c4c <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d302      	bcc.n	8002a04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d11d      	bne.n	8002a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a0e:	2b80      	cmp	r3, #128	@ 0x80
 8002a10:	d016      	beq.n	8002a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2c:	f043 0220 	orr.w	r2, r3, #32
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e007      	b.n	8002a50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a4a:	2b80      	cmp	r3, #128	@ 0x80
 8002a4c:	d1c3      	bne.n	80029d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a64:	e034      	b.n	8002ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f83e 	bl	8002ae8 <I2C_IsAcknowledgeFailed>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e034      	b.n	8002ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d028      	beq.n	8002ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7e:	f7ff f8e5 	bl	8001c4c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d302      	bcc.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d11d      	bne.n	8002ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d016      	beq.n	8002ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abc:	f043 0220 	orr.w	r2, r3, #32
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e007      	b.n	8002ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d1c3      	bne.n	8002a66 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002afe:	d11b      	bne.n	8002b38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b24:	f043 0204 	orr.w	r2, r3, #4
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
	...

08002b48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e267      	b.n	800302a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d075      	beq.n	8002c52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b66:	4b88      	ldr	r3, [pc, #544]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d00c      	beq.n	8002b8c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b72:	4b85      	ldr	r3, [pc, #532]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d112      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b7e:	4b82      	ldr	r3, [pc, #520]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b8a:	d10b      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b8c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d05b      	beq.n	8002c50 <HAL_RCC_OscConfig+0x108>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d157      	bne.n	8002c50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e242      	b.n	800302a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bac:	d106      	bne.n	8002bbc <HAL_RCC_OscConfig+0x74>
 8002bae:	4b76      	ldr	r3, [pc, #472]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a75      	ldr	r2, [pc, #468]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	e01d      	b.n	8002bf8 <HAL_RCC_OscConfig+0xb0>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x98>
 8002bc6:	4b70      	ldr	r3, [pc, #448]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a6f      	ldr	r2, [pc, #444]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	4b6d      	ldr	r3, [pc, #436]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a6c      	ldr	r2, [pc, #432]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	e00b      	b.n	8002bf8 <HAL_RCC_OscConfig+0xb0>
 8002be0:	4b69      	ldr	r3, [pc, #420]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a68      	ldr	r2, [pc, #416]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002be6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	4b66      	ldr	r3, [pc, #408]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a65      	ldr	r2, [pc, #404]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002bf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d013      	beq.n	8002c28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7ff f824 	bl	8001c4c <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c08:	f7ff f820 	bl	8001c4c <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b64      	cmp	r3, #100	@ 0x64
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e207      	b.n	800302a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	4b5b      	ldr	r3, [pc, #364]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0xc0>
 8002c26:	e014      	b.n	8002c52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7ff f810 	bl	8001c4c <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c30:	f7ff f80c 	bl	8001c4c <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b64      	cmp	r3, #100	@ 0x64
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e1f3      	b.n	800302a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c42:	4b51      	ldr	r3, [pc, #324]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0xe8>
 8002c4e:	e000      	b.n	8002c52 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d063      	beq.n	8002d26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00b      	beq.n	8002c82 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c6a:	4b47      	ldr	r3, [pc, #284]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d11c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c76:	4b44      	ldr	r3, [pc, #272]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d116      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c82:	4b41      	ldr	r3, [pc, #260]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <HAL_RCC_OscConfig+0x152>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d001      	beq.n	8002c9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e1c7      	b.n	800302a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4937      	ldr	r1, [pc, #220]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cae:	e03a      	b.n	8002d26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d020      	beq.n	8002cfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb8:	4b34      	ldr	r3, [pc, #208]	@ (8002d8c <HAL_RCC_OscConfig+0x244>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbe:	f7fe ffc5 	bl	8001c4c <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc6:	f7fe ffc1 	bl	8001c4c <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e1a8      	b.n	800302a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0f0      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce4:	4b28      	ldr	r3, [pc, #160]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4925      	ldr	r1, [pc, #148]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	600b      	str	r3, [r1, #0]
 8002cf8:	e015      	b.n	8002d26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cfa:	4b24      	ldr	r3, [pc, #144]	@ (8002d8c <HAL_RCC_OscConfig+0x244>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe ffa4 	bl	8001c4c <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d08:	f7fe ffa0 	bl	8001c4c <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e187      	b.n	800302a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d036      	beq.n	8002da0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d016      	beq.n	8002d68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d3a:	4b15      	ldr	r3, [pc, #84]	@ (8002d90 <HAL_RCC_OscConfig+0x248>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d40:	f7fe ff84 	bl	8001c4c <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d48:	f7fe ff80 	bl	8001c4c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e167      	b.n	800302a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d88 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x200>
 8002d66:	e01b      	b.n	8002da0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d68:	4b09      	ldr	r3, [pc, #36]	@ (8002d90 <HAL_RCC_OscConfig+0x248>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6e:	f7fe ff6d 	bl	8001c4c <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d74:	e00e      	b.n	8002d94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d76:	f7fe ff69 	bl	8001c4c <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d907      	bls.n	8002d94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e150      	b.n	800302a <HAL_RCC_OscConfig+0x4e2>
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	42470000 	.word	0x42470000
 8002d90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d94:	4b88      	ldr	r3, [pc, #544]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002d96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1ea      	bne.n	8002d76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 8097 	beq.w	8002edc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dae:	2300      	movs	r3, #0
 8002db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db2:	4b81      	ldr	r3, [pc, #516]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10f      	bne.n	8002dde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	4b7d      	ldr	r3, [pc, #500]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc6:	4a7c      	ldr	r2, [pc, #496]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dce:	4b7a      	ldr	r3, [pc, #488]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dde:	4b77      	ldr	r3, [pc, #476]	@ (8002fbc <HAL_RCC_OscConfig+0x474>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d118      	bne.n	8002e1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dea:	4b74      	ldr	r3, [pc, #464]	@ (8002fbc <HAL_RCC_OscConfig+0x474>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a73      	ldr	r2, [pc, #460]	@ (8002fbc <HAL_RCC_OscConfig+0x474>)
 8002df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df6:	f7fe ff29 	bl	8001c4c <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfe:	f7fe ff25 	bl	8001c4c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e10c      	b.n	800302a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	4b6a      	ldr	r3, [pc, #424]	@ (8002fbc <HAL_RCC_OscConfig+0x474>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d106      	bne.n	8002e32 <HAL_RCC_OscConfig+0x2ea>
 8002e24:	4b64      	ldr	r3, [pc, #400]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e28:	4a63      	ldr	r2, [pc, #396]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e30:	e01c      	b.n	8002e6c <HAL_RCC_OscConfig+0x324>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b05      	cmp	r3, #5
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x30c>
 8002e3a:	4b5f      	ldr	r3, [pc, #380]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3e:	4a5e      	ldr	r2, [pc, #376]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002e40:	f043 0304 	orr.w	r3, r3, #4
 8002e44:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e46:	4b5c      	ldr	r3, [pc, #368]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e4a:	4a5b      	ldr	r2, [pc, #364]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e52:	e00b      	b.n	8002e6c <HAL_RCC_OscConfig+0x324>
 8002e54:	4b58      	ldr	r3, [pc, #352]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e58:	4a57      	ldr	r2, [pc, #348]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002e5a:	f023 0301 	bic.w	r3, r3, #1
 8002e5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e60:	4b55      	ldr	r3, [pc, #340]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e64:	4a54      	ldr	r2, [pc, #336]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002e66:	f023 0304 	bic.w	r3, r3, #4
 8002e6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d015      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e74:	f7fe feea 	bl	8001c4c <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7a:	e00a      	b.n	8002e92 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7c:	f7fe fee6 	bl	8001c4c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e0cb      	b.n	800302a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e92:	4b49      	ldr	r3, [pc, #292]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0ee      	beq.n	8002e7c <HAL_RCC_OscConfig+0x334>
 8002e9e:	e014      	b.n	8002eca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea0:	f7fe fed4 	bl	8001c4c <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea6:	e00a      	b.n	8002ebe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea8:	f7fe fed0 	bl	8001c4c <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e0b5      	b.n	800302a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1ee      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eca:	7dfb      	ldrb	r3, [r7, #23]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d105      	bne.n	8002edc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed0:	4b39      	ldr	r3, [pc, #228]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	4a38      	ldr	r2, [pc, #224]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002ed6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80a1 	beq.w	8003028 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ee6:	4b34      	ldr	r3, [pc, #208]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 030c 	and.w	r3, r3, #12
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d05c      	beq.n	8002fac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d141      	bne.n	8002f7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efa:	4b31      	ldr	r3, [pc, #196]	@ (8002fc0 <HAL_RCC_OscConfig+0x478>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7fe fea4 	bl	8001c4c <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f08:	f7fe fea0 	bl	8001c4c <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e087      	b.n	800302a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1a:	4b27      	ldr	r3, [pc, #156]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69da      	ldr	r2, [r3, #28]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f34:	019b      	lsls	r3, r3, #6
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3c:	085b      	lsrs	r3, r3, #1
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	041b      	lsls	r3, r3, #16
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f48:	061b      	lsls	r3, r3, #24
 8002f4a:	491b      	ldr	r1, [pc, #108]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f50:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc0 <HAL_RCC_OscConfig+0x478>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f56:	f7fe fe79 	bl	8001c4c <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5e:	f7fe fe75 	bl	8001c4c <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e05c      	b.n	800302a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f70:	4b11      	ldr	r3, [pc, #68]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x416>
 8002f7c:	e054      	b.n	8003028 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7e:	4b10      	ldr	r3, [pc, #64]	@ (8002fc0 <HAL_RCC_OscConfig+0x478>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f84:	f7fe fe62 	bl	8001c4c <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8c:	f7fe fe5e 	bl	8001c4c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e045      	b.n	800302a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9e:	4b06      	ldr	r3, [pc, #24]	@ (8002fb8 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x444>
 8002faa:	e03d      	b.n	8003028 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d107      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e038      	b.n	800302a <HAL_RCC_OscConfig+0x4e2>
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40007000 	.word	0x40007000
 8002fc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003034 <HAL_RCC_OscConfig+0x4ec>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d028      	beq.n	8003024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d121      	bne.n	8003024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d11a      	bne.n	8003024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ffa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d111      	bne.n	8003024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300a:	085b      	lsrs	r3, r3, #1
 800300c:	3b01      	subs	r3, #1
 800300e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003010:	429a      	cmp	r2, r3
 8003012:	d107      	bne.n	8003024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40023800 	.word	0x40023800

08003038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0cc      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800304c:	4b68      	ldr	r3, [pc, #416]	@ (80031f0 <HAL_RCC_ClockConfig+0x1b8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d90c      	bls.n	8003074 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305a:	4b65      	ldr	r3, [pc, #404]	@ (80031f0 <HAL_RCC_ClockConfig+0x1b8>)
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003062:	4b63      	ldr	r3, [pc, #396]	@ (80031f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0b8      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d020      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800308c:	4b59      	ldr	r3, [pc, #356]	@ (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	4a58      	ldr	r2, [pc, #352]	@ (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003096:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a4:	4b53      	ldr	r3, [pc, #332]	@ (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	4a52      	ldr	r2, [pc, #328]	@ (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b0:	4b50      	ldr	r3, [pc, #320]	@ (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	494d      	ldr	r1, [pc, #308]	@ (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d044      	beq.n	8003158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d107      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d6:	4b47      	ldr	r3, [pc, #284]	@ (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d119      	bne.n	8003116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e07f      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d003      	beq.n	80030f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d107      	bne.n	8003106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f6:	4b3f      	ldr	r3, [pc, #252]	@ (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d109      	bne.n	8003116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e06f      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003106:	4b3b      	ldr	r3, [pc, #236]	@ (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e067      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003116:	4b37      	ldr	r3, [pc, #220]	@ (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f023 0203 	bic.w	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	4934      	ldr	r1, [pc, #208]	@ (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	4313      	orrs	r3, r2
 8003126:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003128:	f7fe fd90 	bl	8001c4c <HAL_GetTick>
 800312c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312e:	e00a      	b.n	8003146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003130:	f7fe fd8c 	bl	8001c4c <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e04f      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003146:	4b2b      	ldr	r3, [pc, #172]	@ (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 020c 	and.w	r2, r3, #12
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	429a      	cmp	r2, r3
 8003156:	d1eb      	bne.n	8003130 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003158:	4b25      	ldr	r3, [pc, #148]	@ (80031f0 <HAL_RCC_ClockConfig+0x1b8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d20c      	bcs.n	8003180 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003166:	4b22      	ldr	r3, [pc, #136]	@ (80031f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800316e:	4b20      	ldr	r3, [pc, #128]	@ (80031f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e032      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800318c:	4b19      	ldr	r3, [pc, #100]	@ (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4916      	ldr	r1, [pc, #88]	@ (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	4313      	orrs	r3, r2
 800319c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031aa:	4b12      	ldr	r3, [pc, #72]	@ (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	490e      	ldr	r1, [pc, #56]	@ (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031be:	f000 f821 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 80031c2:	4602      	mov	r2, r0
 80031c4:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	490a      	ldr	r1, [pc, #40]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 80031d0:	5ccb      	ldrb	r3, [r1, r3]
 80031d2:	fa22 f303 	lsr.w	r3, r2, r3
 80031d6:	4a09      	ldr	r2, [pc, #36]	@ (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80031d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80031da:	4b09      	ldr	r3, [pc, #36]	@ (8003200 <HAL_RCC_ClockConfig+0x1c8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fe fbd4 	bl	800198c <HAL_InitTick>

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40023c00 	.word	0x40023c00
 80031f4:	40023800 	.word	0x40023800
 80031f8:	08006a58 	.word	0x08006a58
 80031fc:	20000094 	.word	0x20000094
 8003200:	20000098 	.word	0x20000098

08003204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003208:	b090      	sub	sp, #64	@ 0x40
 800320a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800321c:	4b59      	ldr	r3, [pc, #356]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x180>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 030c 	and.w	r3, r3, #12
 8003224:	2b08      	cmp	r3, #8
 8003226:	d00d      	beq.n	8003244 <HAL_RCC_GetSysClockFreq+0x40>
 8003228:	2b08      	cmp	r3, #8
 800322a:	f200 80a1 	bhi.w	8003370 <HAL_RCC_GetSysClockFreq+0x16c>
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x34>
 8003232:	2b04      	cmp	r3, #4
 8003234:	d003      	beq.n	800323e <HAL_RCC_GetSysClockFreq+0x3a>
 8003236:	e09b      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003238:	4b53      	ldr	r3, [pc, #332]	@ (8003388 <HAL_RCC_GetSysClockFreq+0x184>)
 800323a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800323c:	e09b      	b.n	8003376 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800323e:	4b53      	ldr	r3, [pc, #332]	@ (800338c <HAL_RCC_GetSysClockFreq+0x188>)
 8003240:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003242:	e098      	b.n	8003376 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003244:	4b4f      	ldr	r3, [pc, #316]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x180>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800324c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800324e:	4b4d      	ldr	r3, [pc, #308]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x180>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d028      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800325a:	4b4a      	ldr	r3, [pc, #296]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x180>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	099b      	lsrs	r3, r3, #6
 8003260:	2200      	movs	r2, #0
 8003262:	623b      	str	r3, [r7, #32]
 8003264:	627a      	str	r2, [r7, #36]	@ 0x24
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800326c:	2100      	movs	r1, #0
 800326e:	4b47      	ldr	r3, [pc, #284]	@ (800338c <HAL_RCC_GetSysClockFreq+0x188>)
 8003270:	fb03 f201 	mul.w	r2, r3, r1
 8003274:	2300      	movs	r3, #0
 8003276:	fb00 f303 	mul.w	r3, r0, r3
 800327a:	4413      	add	r3, r2
 800327c:	4a43      	ldr	r2, [pc, #268]	@ (800338c <HAL_RCC_GetSysClockFreq+0x188>)
 800327e:	fba0 1202 	umull	r1, r2, r0, r2
 8003282:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003284:	460a      	mov	r2, r1
 8003286:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003288:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800328a:	4413      	add	r3, r2
 800328c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800328e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003290:	2200      	movs	r2, #0
 8003292:	61bb      	str	r3, [r7, #24]
 8003294:	61fa      	str	r2, [r7, #28]
 8003296:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800329a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800329e:	f7fc fff7 	bl	8000290 <__aeabi_uldivmod>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4613      	mov	r3, r2
 80032a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032aa:	e053      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ac:	4b35      	ldr	r3, [pc, #212]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	099b      	lsrs	r3, r3, #6
 80032b2:	2200      	movs	r2, #0
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	617a      	str	r2, [r7, #20]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032be:	f04f 0b00 	mov.w	fp, #0
 80032c2:	4652      	mov	r2, sl
 80032c4:	465b      	mov	r3, fp
 80032c6:	f04f 0000 	mov.w	r0, #0
 80032ca:	f04f 0100 	mov.w	r1, #0
 80032ce:	0159      	lsls	r1, r3, #5
 80032d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032d4:	0150      	lsls	r0, r2, #5
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	ebb2 080a 	subs.w	r8, r2, sl
 80032de:	eb63 090b 	sbc.w	r9, r3, fp
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80032ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80032f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80032f6:	ebb2 0408 	subs.w	r4, r2, r8
 80032fa:	eb63 0509 	sbc.w	r5, r3, r9
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	00eb      	lsls	r3, r5, #3
 8003308:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800330c:	00e2      	lsls	r2, r4, #3
 800330e:	4614      	mov	r4, r2
 8003310:	461d      	mov	r5, r3
 8003312:	eb14 030a 	adds.w	r3, r4, sl
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	eb45 030b 	adc.w	r3, r5, fp
 800331c:	607b      	str	r3, [r7, #4]
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	e9d7 4500 	ldrd	r4, r5, [r7]
 800332a:	4629      	mov	r1, r5
 800332c:	028b      	lsls	r3, r1, #10
 800332e:	4621      	mov	r1, r4
 8003330:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003334:	4621      	mov	r1, r4
 8003336:	028a      	lsls	r2, r1, #10
 8003338:	4610      	mov	r0, r2
 800333a:	4619      	mov	r1, r3
 800333c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800333e:	2200      	movs	r2, #0
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	60fa      	str	r2, [r7, #12]
 8003344:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003348:	f7fc ffa2 	bl	8000290 <__aeabi_uldivmod>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4613      	mov	r3, r2
 8003352:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003354:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x180>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	0c1b      	lsrs	r3, r3, #16
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	3301      	adds	r3, #1
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003364:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003368:	fbb2 f3f3 	udiv	r3, r2, r3
 800336c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800336e:	e002      	b.n	8003376 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003370:	4b05      	ldr	r3, [pc, #20]	@ (8003388 <HAL_RCC_GetSysClockFreq+0x184>)
 8003372:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003378:	4618      	mov	r0, r3
 800337a:	3740      	adds	r7, #64	@ 0x40
 800337c:	46bd      	mov	sp, r7
 800337e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003382:	bf00      	nop
 8003384:	40023800 	.word	0x40023800
 8003388:	00f42400 	.word	0x00f42400
 800338c:	017d7840 	.word	0x017d7840

08003390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003394:	4b03      	ldr	r3, [pc, #12]	@ (80033a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003396:	681b      	ldr	r3, [r3, #0]
}
 8003398:	4618      	mov	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	20000094 	.word	0x20000094

080033a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033ac:	f7ff fff0 	bl	8003390 <HAL_RCC_GetHCLKFreq>
 80033b0:	4602      	mov	r2, r0
 80033b2:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	0a9b      	lsrs	r3, r3, #10
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	4903      	ldr	r1, [pc, #12]	@ (80033cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033be:	5ccb      	ldrb	r3, [r1, r3]
 80033c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40023800 	.word	0x40023800
 80033cc:	08006a68 	.word	0x08006a68

080033d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033d4:	f7ff ffdc 	bl	8003390 <HAL_RCC_GetHCLKFreq>
 80033d8:	4602      	mov	r2, r0
 80033da:	4b05      	ldr	r3, [pc, #20]	@ (80033f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	0b5b      	lsrs	r3, r3, #13
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	4903      	ldr	r1, [pc, #12]	@ (80033f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033e6:	5ccb      	ldrb	r3, [r1, r3]
 80033e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40023800 	.word	0x40023800
 80033f4:	08006a68 	.word	0x08006a68

080033f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	220f      	movs	r2, #15
 8003406:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003408:	4b12      	ldr	r3, [pc, #72]	@ (8003454 <HAL_RCC_GetClockConfig+0x5c>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 0203 	and.w	r2, r3, #3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003414:	4b0f      	ldr	r3, [pc, #60]	@ (8003454 <HAL_RCC_GetClockConfig+0x5c>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003420:	4b0c      	ldr	r3, [pc, #48]	@ (8003454 <HAL_RCC_GetClockConfig+0x5c>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800342c:	4b09      	ldr	r3, [pc, #36]	@ (8003454 <HAL_RCC_GetClockConfig+0x5c>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	08db      	lsrs	r3, r3, #3
 8003432:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800343a:	4b07      	ldr	r3, [pc, #28]	@ (8003458 <HAL_RCC_GetClockConfig+0x60>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0207 	and.w	r2, r3, #7
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	601a      	str	r2, [r3, #0]
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800
 8003458:	40023c00 	.word	0x40023c00

0800345c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e07b      	b.n	8003566 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	2b00      	cmp	r3, #0
 8003474:	d108      	bne.n	8003488 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800347e:	d009      	beq.n	8003494 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	61da      	str	r2, [r3, #28]
 8003486:	e005      	b.n	8003494 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fe fa04 	bl	80018bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003518:	ea42 0103 	orr.w	r1, r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003520:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	0c1b      	lsrs	r3, r3, #16
 8003532:	f003 0104 	and.w	r1, r3, #4
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353a:	f003 0210 	and.w	r2, r3, #16
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69da      	ldr	r2, [r3, #28]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003554:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b088      	sub	sp, #32
 8003572:	af00      	add	r7, sp, #0
 8003574:	60f8      	str	r0, [r7, #12]
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	4613      	mov	r3, r2
 800357c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800357e:	f7fe fb65 	bl	8001c4c <HAL_GetTick>
 8003582:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b01      	cmp	r3, #1
 8003592:	d001      	beq.n	8003598 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003594:	2302      	movs	r3, #2
 8003596:	e12a      	b.n	80037ee <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_SPI_Transmit+0x36>
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e122      	b.n	80037ee <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_SPI_Transmit+0x48>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e11b      	b.n	80037ee <HAL_SPI_Transmit+0x280>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2203      	movs	r2, #3
 80035c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	88fa      	ldrh	r2, [r7, #6]
 80035d6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	88fa      	ldrh	r2, [r7, #6]
 80035dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003604:	d10f      	bne.n	8003626 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003614:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003624:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003630:	2b40      	cmp	r3, #64	@ 0x40
 8003632:	d007      	beq.n	8003644 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003642:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800364c:	d152      	bne.n	80036f4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_SPI_Transmit+0xee>
 8003656:	8b7b      	ldrh	r3, [r7, #26]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d145      	bne.n	80036e8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003660:	881a      	ldrh	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366c:	1c9a      	adds	r2, r3, #2
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003680:	e032      	b.n	80036e8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b02      	cmp	r3, #2
 800368e:	d112      	bne.n	80036b6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003694:	881a      	ldrh	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a0:	1c9a      	adds	r2, r3, #2
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80036b4:	e018      	b.n	80036e8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036b6:	f7fe fac9 	bl	8001c4c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d803      	bhi.n	80036ce <HAL_SPI_Transmit+0x160>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036cc:	d102      	bne.n	80036d4 <HAL_SPI_Transmit+0x166>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d109      	bne.n	80036e8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e082      	b.n	80037ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1c7      	bne.n	8003682 <HAL_SPI_Transmit+0x114>
 80036f2:	e053      	b.n	800379c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_SPI_Transmit+0x194>
 80036fc:	8b7b      	ldrh	r3, [r7, #26]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d147      	bne.n	8003792 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	330c      	adds	r3, #12
 800370c:	7812      	ldrb	r2, [r2, #0]
 800370e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003728:	e033      	b.n	8003792 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b02      	cmp	r3, #2
 8003736:	d113      	bne.n	8003760 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	330c      	adds	r3, #12
 8003742:	7812      	ldrb	r2, [r2, #0]
 8003744:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003754:	b29b      	uxth	r3, r3
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800375e:	e018      	b.n	8003792 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003760:	f7fe fa74 	bl	8001c4c <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d803      	bhi.n	8003778 <HAL_SPI_Transmit+0x20a>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003776:	d102      	bne.n	800377e <HAL_SPI_Transmit+0x210>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d109      	bne.n	8003792 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e02d      	b.n	80037ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1c6      	bne.n	800372a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	6839      	ldr	r1, [r7, #0]
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 fbd9 	bl	8003f58 <SPI_EndRxTxTransaction>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10a      	bne.n	80037d0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80037ec:	2300      	movs	r3, #0
  }
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3720      	adds	r7, #32
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b088      	sub	sp, #32
 80037fa:	af02      	add	r7, sp, #8
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	4613      	mov	r3, r2
 8003804:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b01      	cmp	r3, #1
 8003810:	d001      	beq.n	8003816 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003812:	2302      	movs	r3, #2
 8003814:	e104      	b.n	8003a20 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <HAL_SPI_Receive+0x2c>
 800381c:	88fb      	ldrh	r3, [r7, #6]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e0fc      	b.n	8003a20 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800382e:	d112      	bne.n	8003856 <HAL_SPI_Receive+0x60>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10e      	bne.n	8003856 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2204      	movs	r2, #4
 800383c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003840:	88fa      	ldrh	r2, [r7, #6]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	4613      	mov	r3, r2
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f8eb 	bl	8003a28 <HAL_SPI_TransmitReceive>
 8003852:	4603      	mov	r3, r0
 8003854:	e0e4      	b.n	8003a20 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003856:	f7fe f9f9 	bl	8001c4c <HAL_GetTick>
 800385a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_SPI_Receive+0x74>
 8003866:	2302      	movs	r3, #2
 8003868:	e0da      	b.n	8003a20 <HAL_SPI_Receive+0x22a>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2204      	movs	r2, #4
 8003876:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	88fa      	ldrh	r2, [r7, #6]
 800388a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	88fa      	ldrh	r2, [r7, #6]
 8003890:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038b8:	d10f      	bne.n	80038da <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80038d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e4:	2b40      	cmp	r3, #64	@ 0x40
 80038e6:	d007      	beq.n	80038f8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d170      	bne.n	80039e2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003900:	e035      	b.n	800396e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b01      	cmp	r3, #1
 800390e:	d115      	bne.n	800393c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f103 020c 	add.w	r2, r3, #12
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391c:	7812      	ldrb	r2, [r2, #0]
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800393a:	e018      	b.n	800396e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800393c:	f7fe f986 	bl	8001c4c <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d803      	bhi.n	8003954 <HAL_SPI_Receive+0x15e>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003952:	d102      	bne.n	800395a <HAL_SPI_Receive+0x164>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e058      	b.n	8003a20 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1c4      	bne.n	8003902 <HAL_SPI_Receive+0x10c>
 8003978:	e038      	b.n	80039ec <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b01      	cmp	r3, #1
 8003986:	d113      	bne.n	80039b0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003992:	b292      	uxth	r2, r2
 8003994:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399a:	1c9a      	adds	r2, r3, #2
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039ae:	e018      	b.n	80039e2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039b0:	f7fe f94c 	bl	8001c4c <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d803      	bhi.n	80039c8 <HAL_SPI_Receive+0x1d2>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c6:	d102      	bne.n	80039ce <HAL_SPI_Receive+0x1d8>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e01e      	b.n	8003a20 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1c6      	bne.n	800397a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	6839      	ldr	r1, [r7, #0]
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 fa4b 	bl	8003e8c <SPI_EndRxTransaction>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2220      	movs	r2, #32
 8003a00:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
  }
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08a      	sub	sp, #40	@ 0x28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a36:	2301      	movs	r3, #1
 8003a38:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a3a:	f7fe f907 	bl	8001c4c <HAL_GetTick>
 8003a3e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a46:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003a4e:	887b      	ldrh	r3, [r7, #2]
 8003a50:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a52:	7ffb      	ldrb	r3, [r7, #31]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d00c      	beq.n	8003a72 <HAL_SPI_TransmitReceive+0x4a>
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a5e:	d106      	bne.n	8003a6e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d102      	bne.n	8003a6e <HAL_SPI_TransmitReceive+0x46>
 8003a68:	7ffb      	ldrb	r3, [r7, #31]
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d001      	beq.n	8003a72 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e17f      	b.n	8003d72 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_SPI_TransmitReceive+0x5c>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <HAL_SPI_TransmitReceive+0x5c>
 8003a7e:	887b      	ldrh	r3, [r7, #2]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e174      	b.n	8003d72 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_SPI_TransmitReceive+0x6e>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e16d      	b.n	8003d72 <HAL_SPI_TransmitReceive+0x34a>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d003      	beq.n	8003ab2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2205      	movs	r2, #5
 8003aae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	887a      	ldrh	r2, [r7, #2]
 8003ac2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	887a      	ldrh	r2, [r7, #2]
 8003ac8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	887a      	ldrh	r2, [r7, #2]
 8003ad4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	887a      	ldrh	r2, [r7, #2]
 8003ada:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af2:	2b40      	cmp	r3, #64	@ 0x40
 8003af4:	d007      	beq.n	8003b06 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b0e:	d17e      	bne.n	8003c0e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <HAL_SPI_TransmitReceive+0xf6>
 8003b18:	8afb      	ldrh	r3, [r7, #22]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d16c      	bne.n	8003bf8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b22:	881a      	ldrh	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2e:	1c9a      	adds	r2, r3, #2
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b42:	e059      	b.n	8003bf8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d11b      	bne.n	8003b8a <HAL_SPI_TransmitReceive+0x162>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d016      	beq.n	8003b8a <HAL_SPI_TransmitReceive+0x162>
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d113      	bne.n	8003b8a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b66:	881a      	ldrh	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b72:	1c9a      	adds	r2, r3, #2
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d119      	bne.n	8003bcc <HAL_SPI_TransmitReceive+0x1a4>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d014      	beq.n	8003bcc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bac:	b292      	uxth	r2, r2
 8003bae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb4:	1c9a      	adds	r2, r3, #2
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bcc:	f7fe f83e 	bl	8001c4c <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d80d      	bhi.n	8003bf8 <HAL_SPI_TransmitReceive+0x1d0>
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be2:	d009      	beq.n	8003bf8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e0bc      	b.n	8003d72 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1a0      	bne.n	8003b44 <HAL_SPI_TransmitReceive+0x11c>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d19b      	bne.n	8003b44 <HAL_SPI_TransmitReceive+0x11c>
 8003c0c:	e082      	b.n	8003d14 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_SPI_TransmitReceive+0x1f4>
 8003c16:	8afb      	ldrh	r3, [r7, #22]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d171      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	330c      	adds	r3, #12
 8003c26:	7812      	ldrb	r2, [r2, #0]
 8003c28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c42:	e05d      	b.n	8003d00 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d11c      	bne.n	8003c8c <HAL_SPI_TransmitReceive+0x264>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d017      	beq.n	8003c8c <HAL_SPI_TransmitReceive+0x264>
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d114      	bne.n	8003c8c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	330c      	adds	r3, #12
 8003c6c:	7812      	ldrb	r2, [r2, #0]
 8003c6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d119      	bne.n	8003cce <HAL_SPI_TransmitReceive+0x2a6>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d014      	beq.n	8003cce <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cce:	f7fd ffbd 	bl	8001c4c <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d803      	bhi.n	8003ce6 <HAL_SPI_TransmitReceive+0x2be>
 8003cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce4:	d102      	bne.n	8003cec <HAL_SPI_TransmitReceive+0x2c4>
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d109      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e038      	b.n	8003d72 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d19c      	bne.n	8003c44 <HAL_SPI_TransmitReceive+0x21c>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d197      	bne.n	8003c44 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d14:	6a3a      	ldr	r2, [r7, #32]
 8003d16:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f91d 	bl	8003f58 <SPI_EndRxTxTransaction>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e01d      	b.n	8003d72 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10a      	bne.n	8003d54 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d3e:	2300      	movs	r3, #0
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e000      	b.n	8003d72 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003d70:	2300      	movs	r3, #0
  }
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3728      	adds	r7, #40	@ 0x28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
	...

08003d7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d8c:	f7fd ff5e 	bl	8001c4c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	4413      	add	r3, r2
 8003d9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d9c:	f7fd ff56 	bl	8001c4c <HAL_GetTick>
 8003da0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003da2:	4b39      	ldr	r3, [pc, #228]	@ (8003e88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	015b      	lsls	r3, r3, #5
 8003da8:	0d1b      	lsrs	r3, r3, #20
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	fb02 f303 	mul.w	r3, r2, r3
 8003db0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003db2:	e055      	b.n	8003e60 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dba:	d051      	beq.n	8003e60 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dbc:	f7fd ff46 	bl	8001c4c <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d902      	bls.n	8003dd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d13d      	bne.n	8003e4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003de0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dea:	d111      	bne.n	8003e10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003df4:	d004      	beq.n	8003e00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dfe:	d107      	bne.n	8003e10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e18:	d10f      	bne.n	8003e3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e018      	b.n	8003e80 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d102      	bne.n	8003e5a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61fb      	str	r3, [r7, #28]
 8003e58:	e002      	b.n	8003e60 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d19a      	bne.n	8003db4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3720      	adds	r7, #32
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20000094 	.word	0x20000094

08003e8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ea0:	d111      	bne.n	8003ec6 <SPI_EndRxTransaction+0x3a>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eaa:	d004      	beq.n	8003eb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eb4:	d107      	bne.n	8003ec6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ec4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ece:	d12a      	bne.n	8003f26 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed8:	d012      	beq.n	8003f00 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	2180      	movs	r1, #128	@ 0x80
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f7ff ff49 	bl	8003d7c <SPI_WaitFlagStateUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d02d      	beq.n	8003f4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef4:	f043 0220 	orr.w	r2, r3, #32
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e026      	b.n	8003f4e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2200      	movs	r2, #0
 8003f08:	2101      	movs	r1, #1
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff ff36 	bl	8003d7c <SPI_WaitFlagStateUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d01a      	beq.n	8003f4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1a:	f043 0220 	orr.w	r2, r3, #32
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e013      	b.n	8003f4e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2101      	movs	r1, #1
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f7ff ff23 	bl	8003d7c <SPI_WaitFlagStateUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d007      	beq.n	8003f4c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f40:	f043 0220 	orr.w	r2, r3, #32
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e000      	b.n	8003f4e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f7ff ff04 	bl	8003d7c <SPI_WaitFlagStateUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7e:	f043 0220 	orr.w	r2, r3, #32
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e032      	b.n	8003ff0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff8 <SPI_EndRxTxTransaction+0xa0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8003ffc <SPI_EndRxTxTransaction+0xa4>)
 8003f90:	fba2 2303 	umull	r2, r3, r2, r3
 8003f94:	0d5b      	lsrs	r3, r3, #21
 8003f96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f9a:	fb02 f303 	mul.w	r3, r2, r3
 8003f9e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fa8:	d112      	bne.n	8003fd0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2180      	movs	r1, #128	@ 0x80
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f7ff fee1 	bl	8003d7c <SPI_WaitFlagStateUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d016      	beq.n	8003fee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc4:	f043 0220 	orr.w	r2, r3, #32
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e00f      	b.n	8003ff0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe6:	2b80      	cmp	r3, #128	@ 0x80
 8003fe8:	d0f2      	beq.n	8003fd0 <SPI_EndRxTxTransaction+0x78>
 8003fea:	e000      	b.n	8003fee <SPI_EndRxTxTransaction+0x96>
        break;
 8003fec:	bf00      	nop
  }

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	20000094 	.word	0x20000094
 8003ffc:	165e9f81 	.word	0x165e9f81

08004000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e041      	b.n	8004096 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f839 	bl	800409e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3304      	adds	r3, #4
 800403c:	4619      	mov	r1, r3
 800403e:	4610      	mov	r0, r2
 8004040:	f000 f9b2 	bl	80043a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d001      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e044      	b.n	8004156 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0201 	orr.w	r2, r2, #1
 80040e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004164 <HAL_TIM_Base_Start_IT+0xb0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d018      	beq.n	8004120 <HAL_TIM_Base_Start_IT+0x6c>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040f6:	d013      	beq.n	8004120 <HAL_TIM_Base_Start_IT+0x6c>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004168 <HAL_TIM_Base_Start_IT+0xb4>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00e      	beq.n	8004120 <HAL_TIM_Base_Start_IT+0x6c>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a19      	ldr	r2, [pc, #100]	@ (800416c <HAL_TIM_Base_Start_IT+0xb8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d009      	beq.n	8004120 <HAL_TIM_Base_Start_IT+0x6c>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a17      	ldr	r2, [pc, #92]	@ (8004170 <HAL_TIM_Base_Start_IT+0xbc>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d004      	beq.n	8004120 <HAL_TIM_Base_Start_IT+0x6c>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a16      	ldr	r2, [pc, #88]	@ (8004174 <HAL_TIM_Base_Start_IT+0xc0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d111      	bne.n	8004144 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b06      	cmp	r3, #6
 8004130:	d010      	beq.n	8004154 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 0201 	orr.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004142:	e007      	b.n	8004154 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40010000 	.word	0x40010000
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800
 8004170:	40000c00 	.word	0x40000c00
 8004174:	40014000 	.word	0x40014000

08004178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d020      	beq.n	80041dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d01b      	beq.n	80041dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f06f 0202 	mvn.w	r2, #2
 80041ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f8d2 	bl	800436c <HAL_TIM_IC_CaptureCallback>
 80041c8:	e005      	b.n	80041d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f8c4 	bl	8004358 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f8d5 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d020      	beq.n	8004228 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01b      	beq.n	8004228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f06f 0204 	mvn.w	r2, #4
 80041f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2202      	movs	r2, #2
 80041fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f8ac 	bl	800436c <HAL_TIM_IC_CaptureCallback>
 8004214:	e005      	b.n	8004222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f89e 	bl	8004358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f8af 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d020      	beq.n	8004274 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01b      	beq.n	8004274 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0208 	mvn.w	r2, #8
 8004244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2204      	movs	r2, #4
 800424a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f886 	bl	800436c <HAL_TIM_IC_CaptureCallback>
 8004260:	e005      	b.n	800426e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f878 	bl	8004358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f889 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	2b00      	cmp	r3, #0
 800427c:	d020      	beq.n	80042c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01b      	beq.n	80042c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0210 	mvn.w	r2, #16
 8004290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2208      	movs	r2, #8
 8004296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f860 	bl	800436c <HAL_TIM_IC_CaptureCallback>
 80042ac:	e005      	b.n	80042ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f852 	bl	8004358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f863 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00c      	beq.n	80042e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d007      	beq.n	80042e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0201 	mvn.w	r2, #1
 80042dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fc ff46 	bl	8001170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00c      	beq.n	8004308 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d007      	beq.n	8004308 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f8e0 	bl	80044c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00c      	beq.n	800432c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f834 	bl	8004394 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00c      	beq.n	8004350 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	2b00      	cmp	r3, #0
 800433e:	d007      	beq.n	8004350 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f06f 0220 	mvn.w	r2, #32
 8004348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f8b2 	bl	80044b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004350:	bf00      	nop
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a37      	ldr	r2, [pc, #220]	@ (8004498 <TIM_Base_SetConfig+0xf0>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d00f      	beq.n	80043e0 <TIM_Base_SetConfig+0x38>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043c6:	d00b      	beq.n	80043e0 <TIM_Base_SetConfig+0x38>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a34      	ldr	r2, [pc, #208]	@ (800449c <TIM_Base_SetConfig+0xf4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d007      	beq.n	80043e0 <TIM_Base_SetConfig+0x38>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a33      	ldr	r2, [pc, #204]	@ (80044a0 <TIM_Base_SetConfig+0xf8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d003      	beq.n	80043e0 <TIM_Base_SetConfig+0x38>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a32      	ldr	r2, [pc, #200]	@ (80044a4 <TIM_Base_SetConfig+0xfc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d108      	bne.n	80043f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a28      	ldr	r2, [pc, #160]	@ (8004498 <TIM_Base_SetConfig+0xf0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d01b      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004400:	d017      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a25      	ldr	r2, [pc, #148]	@ (800449c <TIM_Base_SetConfig+0xf4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d013      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a24      	ldr	r2, [pc, #144]	@ (80044a0 <TIM_Base_SetConfig+0xf8>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d00f      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a23      	ldr	r2, [pc, #140]	@ (80044a4 <TIM_Base_SetConfig+0xfc>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d00b      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a22      	ldr	r2, [pc, #136]	@ (80044a8 <TIM_Base_SetConfig+0x100>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d007      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a21      	ldr	r2, [pc, #132]	@ (80044ac <TIM_Base_SetConfig+0x104>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d003      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a20      	ldr	r2, [pc, #128]	@ (80044b0 <TIM_Base_SetConfig+0x108>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d108      	bne.n	8004444 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a0c      	ldr	r2, [pc, #48]	@ (8004498 <TIM_Base_SetConfig+0xf0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d103      	bne.n	8004472 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f043 0204 	orr.w	r2, r3, #4
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	601a      	str	r2, [r3, #0]
}
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40010000 	.word	0x40010000
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800
 80044a4:	40000c00 	.word	0x40000c00
 80044a8:	40014000 	.word	0x40014000
 80044ac:	40014400 	.word	0x40014400
 80044b0:	40014800 	.word	0x40014800

080044b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80044ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044ee:	2b84      	cmp	r3, #132	@ 0x84
 80044f0:	d005      	beq.n	80044fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80044f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4413      	add	r3, r2
 80044fa:	3303      	adds	r3, #3
 80044fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80044fe:	68fb      	ldr	r3, [r7, #12]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004510:	f000 fcfa 	bl	8004f08 <vTaskStartScheduler>
  
  return osOK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	bd80      	pop	{r7, pc}

0800451a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800451a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800451c:	b089      	sub	sp, #36	@ 0x24
 800451e:	af04      	add	r7, sp, #16
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d020      	beq.n	800456e <osThreadCreate+0x54>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01c      	beq.n	800456e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685c      	ldr	r4, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691e      	ldr	r6, [r3, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff ffc8 	bl	80044dc <makeFreeRtosPriority>
 800454c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004556:	9202      	str	r2, [sp, #8]
 8004558:	9301      	str	r3, [sp, #4]
 800455a:	9100      	str	r1, [sp, #0]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	4632      	mov	r2, r6
 8004560:	4629      	mov	r1, r5
 8004562:	4620      	mov	r0, r4
 8004564:	f000 faea 	bl	8004b3c <xTaskCreateStatic>
 8004568:	4603      	mov	r3, r0
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	e01c      	b.n	80045a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685c      	ldr	r4, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800457a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff ffaa 	bl	80044dc <makeFreeRtosPriority>
 8004588:	4602      	mov	r2, r0
 800458a:	f107 030c 	add.w	r3, r7, #12
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	9200      	str	r2, [sp, #0]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	4632      	mov	r2, r6
 8004596:	4629      	mov	r1, r5
 8004598:	4620      	mov	r0, r4
 800459a:	f000 fb2f 	bl	8004bfc <xTaskCreate>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d001      	beq.n	80045a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	e000      	b.n	80045aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80045a8:	68fb      	ldr	r3, [r7, #12]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <osDelay+0x16>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	e000      	b.n	80045ca <osDelay+0x18>
 80045c8:	2301      	movs	r3, #1
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fc66 	bl	8004e9c <vTaskDelay>
  
  return osOK;
 80045d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f103 0208 	add.w	r2, r3, #8
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f04f 32ff 	mov.w	r2, #4294967295
 80045f2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f103 0208 	add.w	r2, r3, #8
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f103 0208 	add.w	r2, r3, #8
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	601a      	str	r2, [r3, #0]
}
 8004670:	bf00      	nop
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004692:	d103      	bne.n	800469c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	e00c      	b.n	80046b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3308      	adds	r3, #8
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	e002      	b.n	80046aa <vListInsert+0x2e>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d2f6      	bcs.n	80046a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	601a      	str	r2, [r3, #0]
}
 80046e2:	bf00      	nop
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046ee:	b480      	push	{r7}
 80046f0:	b085      	sub	sp, #20
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6892      	ldr	r2, [r2, #8]
 8004704:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6852      	ldr	r2, [r2, #4]
 800470e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	429a      	cmp	r2, r3
 8004718:	d103      	bne.n	8004722 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	1e5a      	subs	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
	...

08004744 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10b      	bne.n	8004770 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800476a:	bf00      	nop
 800476c:	bf00      	nop
 800476e:	e7fd      	b.n	800476c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004770:	f001 f8d2 	bl	8005918 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800477c:	68f9      	ldr	r1, [r7, #12]
 800477e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004780:	fb01 f303 	mul.w	r3, r1, r3
 8004784:	441a      	add	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a0:	3b01      	subs	r3, #1
 80047a2:	68f9      	ldr	r1, [r7, #12]
 80047a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80047a6:	fb01 f303 	mul.w	r3, r1, r3
 80047aa:	441a      	add	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	22ff      	movs	r2, #255	@ 0xff
 80047b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	22ff      	movs	r2, #255	@ 0xff
 80047bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d114      	bne.n	80047f0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d01a      	beq.n	8004804 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3310      	adds	r3, #16
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fdcc 	bl	8005370 <xTaskRemoveFromEventList>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d012      	beq.n	8004804 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047de:	4b0d      	ldr	r3, [pc, #52]	@ (8004814 <xQueueGenericReset+0xd0>)
 80047e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	e009      	b.n	8004804 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	3310      	adds	r3, #16
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff fef0 	bl	80045da <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3324      	adds	r3, #36	@ 0x24
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff feeb 	bl	80045da <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004804:	f001 f8ba 	bl	800597c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004808:	2301      	movs	r3, #1
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	e000ed04 	.word	0xe000ed04

08004818 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	@ 0x28
 800481c:	af02      	add	r7, sp, #8
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	4613      	mov	r3, r2
 8004824:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10b      	bne.n	8004844 <xQueueGenericCreate+0x2c>
	__asm volatile
 800482c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	613b      	str	r3, [r7, #16]
}
 800483e:	bf00      	nop
 8004840:	bf00      	nop
 8004842:	e7fd      	b.n	8004840 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	fb02 f303 	mul.w	r3, r2, r3
 800484c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	3348      	adds	r3, #72	@ 0x48
 8004852:	4618      	mov	r0, r3
 8004854:	f001 f982 	bl	8005b5c <pvPortMalloc>
 8004858:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d011      	beq.n	8004884 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	3348      	adds	r3, #72	@ 0x48
 8004868:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004872:	79fa      	ldrb	r2, [r7, #7]
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	4613      	mov	r3, r2
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	68b9      	ldr	r1, [r7, #8]
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 f805 	bl	800488e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004884:	69bb      	ldr	r3, [r7, #24]
	}
 8004886:	4618      	mov	r0, r3
 8004888:	3720      	adds	r7, #32
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	607a      	str	r2, [r7, #4]
 800489a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d103      	bne.n	80048aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	e002      	b.n	80048b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80048bc:	2101      	movs	r1, #1
 80048be:	69b8      	ldr	r0, [r7, #24]
 80048c0:	f7ff ff40 	bl	8004744 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80048c4:	bf00      	nop
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b08e      	sub	sp, #56	@ 0x38
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80048da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10b      	bne.n	80048f8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	623b      	str	r3, [r7, #32]
}
 80048f2:	bf00      	nop
 80048f4:	bf00      	nop
 80048f6:	e7fd      	b.n	80048f4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80048f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00b      	beq.n	8004918 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	61fb      	str	r3, [r7, #28]
}
 8004912:	bf00      	nop
 8004914:	bf00      	nop
 8004916:	e7fd      	b.n	8004914 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d103      	bne.n	8004928 <xQueueGiveFromISR+0x5c>
 8004920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <xQueueGiveFromISR+0x60>
 8004928:	2301      	movs	r3, #1
 800492a:	e000      	b.n	800492e <xQueueGiveFromISR+0x62>
 800492c:	2300      	movs	r3, #0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10b      	bne.n	800494a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	61bb      	str	r3, [r7, #24]
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	e7fd      	b.n	8004946 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800494a:	f001 f8c5 	bl	8005ad8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800494e:	f3ef 8211 	mrs	r2, BASEPRI
 8004952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	617a      	str	r2, [r7, #20]
 8004964:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004966:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004968:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800496a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004974:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004976:	429a      	cmp	r2, r3
 8004978:	d22b      	bcs.n	80049d2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800497a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800498c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004994:	d112      	bne.n	80049bc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499a:	2b00      	cmp	r3, #0
 800499c:	d016      	beq.n	80049cc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800499e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a0:	3324      	adds	r3, #36	@ 0x24
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fce4 	bl	8005370 <xTaskRemoveFromEventList>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00e      	beq.n	80049cc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00b      	beq.n	80049cc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2201      	movs	r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	e007      	b.n	80049cc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049c0:	3301      	adds	r3, #1
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	b25a      	sxtb	r2, r3
 80049c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80049cc:	2301      	movs	r3, #1
 80049ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80049d0:	e001      	b.n	80049d6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80049d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3738      	adds	r7, #56	@ 0x38
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08e      	sub	sp, #56	@ 0x38
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80049fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10b      	bne.n	8004a1a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	623b      	str	r3, [r7, #32]
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop
 8004a18:	e7fd      	b.n	8004a16 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d103      	bne.n	8004a28 <xQueueReceiveFromISR+0x3c>
 8004a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <xQueueReceiveFromISR+0x40>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e000      	b.n	8004a2e <xQueueReceiveFromISR+0x42>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10b      	bne.n	8004a4a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	61fb      	str	r3, [r7, #28]
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop
 8004a48:	e7fd      	b.n	8004a46 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a4a:	f001 f845 	bl	8005ad8 <vPortValidateInterruptPriority>
	__asm volatile
 8004a4e:	f3ef 8211 	mrs	r2, BASEPRI
 8004a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	61ba      	str	r2, [r7, #24]
 8004a64:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004a66:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a6e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d02f      	beq.n	8004ad6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a80:	68b9      	ldr	r1, [r7, #8]
 8004a82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a84:	f000 f834 	bl	8004af0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8a:	1e5a      	subs	r2, r3, #1
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004a90:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a98:	d112      	bne.n	8004ac0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d016      	beq.n	8004ad0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa4:	3310      	adds	r3, #16
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fc62 	bl	8005370 <xTaskRemoveFromEventList>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00e      	beq.n	8004ad0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00b      	beq.n	8004ad0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	e007      	b.n	8004ad0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	b25a      	sxtb	r2, r3
 8004aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004acc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ad4:	e001      	b.n	8004ada <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004adc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f383 8811 	msr	BASEPRI, r3
}
 8004ae4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3738      	adds	r7, #56	@ 0x38
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d018      	beq.n	8004b34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	441a      	add	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68da      	ldr	r2, [r3, #12]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d303      	bcc.n	8004b24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68d9      	ldr	r1, [r3, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6838      	ldr	r0, [r7, #0]
 8004b30:	f001 fab6 	bl	80060a0 <memcpy>
	}
}
 8004b34:	bf00      	nop
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08e      	sub	sp, #56	@ 0x38
 8004b40:	af04      	add	r7, sp, #16
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10b      	bne.n	8004b68 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	623b      	str	r3, [r7, #32]
}
 8004b62:	bf00      	nop
 8004b64:	bf00      	nop
 8004b66:	e7fd      	b.n	8004b64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10b      	bne.n	8004b86 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	61fb      	str	r3, [r7, #28]
}
 8004b80:	bf00      	nop
 8004b82:	bf00      	nop
 8004b84:	e7fd      	b.n	8004b82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b86:	23a0      	movs	r3, #160	@ 0xa0
 8004b88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2ba0      	cmp	r3, #160	@ 0xa0
 8004b8e:	d00b      	beq.n	8004ba8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	61bb      	str	r3, [r7, #24]
}
 8004ba2:	bf00      	nop
 8004ba4:	bf00      	nop
 8004ba6:	e7fd      	b.n	8004ba4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ba8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01e      	beq.n	8004bee <xTaskCreateStatic+0xb2>
 8004bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d01b      	beq.n	8004bee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bbe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bc8:	2300      	movs	r3, #0
 8004bca:	9303      	str	r3, [sp, #12]
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bce:	9302      	str	r3, [sp, #8]
 8004bd0:	f107 0314 	add.w	r3, r7, #20
 8004bd4:	9301      	str	r3, [sp, #4]
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	68b9      	ldr	r1, [r7, #8]
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 f851 	bl	8004c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004be6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004be8:	f000 f8ee 	bl	8004dc8 <prvAddNewTaskToReadyList>
 8004bec:	e001      	b.n	8004bf2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004bf2:	697b      	ldr	r3, [r7, #20]
	}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3728      	adds	r7, #40	@ 0x28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08c      	sub	sp, #48	@ 0x30
 8004c00:	af04      	add	r7, sp, #16
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	603b      	str	r3, [r7, #0]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c0c:	88fb      	ldrh	r3, [r7, #6]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 ffa3 	bl	8005b5c <pvPortMalloc>
 8004c16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00e      	beq.n	8004c3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c1e:	20a0      	movs	r0, #160	@ 0xa0
 8004c20:	f000 ff9c 	bl	8005b5c <pvPortMalloc>
 8004c24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c32:	e005      	b.n	8004c40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c34:	6978      	ldr	r0, [r7, #20]
 8004c36:	f001 f85f 	bl	8005cf8 <vPortFree>
 8004c3a:	e001      	b.n	8004c40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d017      	beq.n	8004c76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c4e:	88fa      	ldrh	r2, [r7, #6]
 8004c50:	2300      	movs	r3, #0
 8004c52:	9303      	str	r3, [sp, #12]
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	9302      	str	r3, [sp, #8]
 8004c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c5a:	9301      	str	r3, [sp, #4]
 8004c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	68b9      	ldr	r1, [r7, #8]
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 f80f 	bl	8004c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c6a:	69f8      	ldr	r0, [r7, #28]
 8004c6c:	f000 f8ac 	bl	8004dc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c70:	2301      	movs	r3, #1
 8004c72:	61bb      	str	r3, [r7, #24]
 8004c74:	e002      	b.n	8004c7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c76:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c7c:	69bb      	ldr	r3, [r7, #24]
	}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3720      	adds	r7, #32
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	f023 0307 	bic.w	r3, r3, #7
 8004cae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00b      	beq.n	8004cd2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	617b      	str	r3, [r7, #20]
}
 8004ccc:	bf00      	nop
 8004cce:	bf00      	nop
 8004cd0:	e7fd      	b.n	8004cce <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01f      	beq.n	8004d18 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cd8:	2300      	movs	r3, #0
 8004cda:	61fb      	str	r3, [r7, #28]
 8004cdc:	e012      	b.n	8004d04 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	7819      	ldrb	r1, [r3, #0]
 8004ce6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	4413      	add	r3, r2
 8004cec:	3334      	adds	r3, #52	@ 0x34
 8004cee:	460a      	mov	r2, r1
 8004cf0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d006      	beq.n	8004d0c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	3301      	adds	r3, #1
 8004d02:	61fb      	str	r3, [r7, #28]
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	2b0f      	cmp	r3, #15
 8004d08:	d9e9      	bls.n	8004cde <prvInitialiseNewTask+0x56>
 8004d0a:	e000      	b.n	8004d0e <prvInitialiseNewTask+0x86>
			{
				break;
 8004d0c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d16:	e003      	b.n	8004d20 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d22:	2b06      	cmp	r3, #6
 8004d24:	d901      	bls.n	8004d2a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d26:	2306      	movs	r3, #6
 8004d28:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d34:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d38:	2200      	movs	r2, #0
 8004d3a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3e:	3304      	adds	r3, #4
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff fc6a 	bl	800461a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d48:	3318      	adds	r3, #24
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff fc65 	bl	800461a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d54:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d58:	f1c3 0207 	rsb	r2, r3, #7
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d64:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d78:	334c      	adds	r3, #76	@ 0x4c
 8004d7a:	224c      	movs	r2, #76	@ 0x4c
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f001 f8fc 	bl	8005f7c <memset>
 8004d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d86:	4a0d      	ldr	r2, [pc, #52]	@ (8004dbc <prvInitialiseNewTask+0x134>)
 8004d88:	651a      	str	r2, [r3, #80]	@ 0x50
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8c:	4a0c      	ldr	r2, [pc, #48]	@ (8004dc0 <prvInitialiseNewTask+0x138>)
 8004d8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d92:	4a0c      	ldr	r2, [pc, #48]	@ (8004dc4 <prvInitialiseNewTask+0x13c>)
 8004d94:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	68f9      	ldr	r1, [r7, #12]
 8004d9a:	69b8      	ldr	r0, [r7, #24]
 8004d9c:	f000 fc8e 	bl	80056bc <pxPortInitialiseStack>
 8004da0:	4602      	mov	r2, r0
 8004da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004db0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004db2:	bf00      	nop
 8004db4:	3720      	adds	r7, #32
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20004268 	.word	0x20004268
 8004dc0:	200042d0 	.word	0x200042d0
 8004dc4:	20004338 	.word	0x20004338

08004dc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004dd0:	f000 fda2 	bl	8005918 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e80 <prvAddNewTaskToReadyList+0xb8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	4a29      	ldr	r2, [pc, #164]	@ (8004e80 <prvAddNewTaskToReadyList+0xb8>)
 8004ddc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004dde:	4b29      	ldr	r3, [pc, #164]	@ (8004e84 <prvAddNewTaskToReadyList+0xbc>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004de6:	4a27      	ldr	r2, [pc, #156]	@ (8004e84 <prvAddNewTaskToReadyList+0xbc>)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004dec:	4b24      	ldr	r3, [pc, #144]	@ (8004e80 <prvAddNewTaskToReadyList+0xb8>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d110      	bne.n	8004e16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004df4:	f000 fb38 	bl	8005468 <prvInitialiseTaskLists>
 8004df8:	e00d      	b.n	8004e16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004dfa:	4b23      	ldr	r3, [pc, #140]	@ (8004e88 <prvAddNewTaskToReadyList+0xc0>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d109      	bne.n	8004e16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e02:	4b20      	ldr	r3, [pc, #128]	@ (8004e84 <prvAddNewTaskToReadyList+0xbc>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d802      	bhi.n	8004e16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e10:	4a1c      	ldr	r2, [pc, #112]	@ (8004e84 <prvAddNewTaskToReadyList+0xbc>)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e16:	4b1d      	ldr	r3, [pc, #116]	@ (8004e8c <prvAddNewTaskToReadyList+0xc4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8004e8c <prvAddNewTaskToReadyList+0xc4>)
 8004e1e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e24:	2201      	movs	r2, #1
 8004e26:	409a      	lsls	r2, r3
 8004e28:	4b19      	ldr	r3, [pc, #100]	@ (8004e90 <prvAddNewTaskToReadyList+0xc8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	4a18      	ldr	r2, [pc, #96]	@ (8004e90 <prvAddNewTaskToReadyList+0xc8>)
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e36:	4613      	mov	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4a15      	ldr	r2, [pc, #84]	@ (8004e94 <prvAddNewTaskToReadyList+0xcc>)
 8004e40:	441a      	add	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	3304      	adds	r3, #4
 8004e46:	4619      	mov	r1, r3
 8004e48:	4610      	mov	r0, r2
 8004e4a:	f7ff fbf3 	bl	8004634 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e4e:	f000 fd95 	bl	800597c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e52:	4b0d      	ldr	r3, [pc, #52]	@ (8004e88 <prvAddNewTaskToReadyList+0xc0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00e      	beq.n	8004e78 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e84 <prvAddNewTaskToReadyList+0xbc>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d207      	bcs.n	8004e78 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e68:	4b0b      	ldr	r3, [pc, #44]	@ (8004e98 <prvAddNewTaskToReadyList+0xd0>)
 8004e6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e78:	bf00      	nop
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	20000614 	.word	0x20000614
 8004e84:	20000514 	.word	0x20000514
 8004e88:	20000620 	.word	0x20000620
 8004e8c:	20000630 	.word	0x20000630
 8004e90:	2000061c 	.word	0x2000061c
 8004e94:	20000518 	.word	0x20000518
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d018      	beq.n	8004ee0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004eae:	4b14      	ldr	r3, [pc, #80]	@ (8004f00 <vTaskDelay+0x64>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00b      	beq.n	8004ece <vTaskDelay+0x32>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	60bb      	str	r3, [r7, #8]
}
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop
 8004ecc:	e7fd      	b.n	8004eca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ece:	f000 f885 	bl	8004fdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fb8b 	bl	80055f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004eda:	f000 f88d 	bl	8004ff8 <xTaskResumeAll>
 8004ede:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d107      	bne.n	8004ef6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004ee6:	4b07      	ldr	r3, [pc, #28]	@ (8004f04 <vTaskDelay+0x68>)
 8004ee8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	2000063c 	.word	0x2000063c
 8004f04:	e000ed04 	.word	0xe000ed04

08004f08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	@ 0x28
 8004f0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f16:	463a      	mov	r2, r7
 8004f18:	1d39      	adds	r1, r7, #4
 8004f1a:	f107 0308 	add.w	r3, r7, #8
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fb fb4c 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f24:	6839      	ldr	r1, [r7, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	9202      	str	r2, [sp, #8]
 8004f2c:	9301      	str	r3, [sp, #4]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	2300      	movs	r3, #0
 8004f34:	460a      	mov	r2, r1
 8004f36:	4921      	ldr	r1, [pc, #132]	@ (8004fbc <vTaskStartScheduler+0xb4>)
 8004f38:	4821      	ldr	r0, [pc, #132]	@ (8004fc0 <vTaskStartScheduler+0xb8>)
 8004f3a:	f7ff fdff 	bl	8004b3c <xTaskCreateStatic>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	4a20      	ldr	r2, [pc, #128]	@ (8004fc4 <vTaskStartScheduler+0xbc>)
 8004f42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f44:	4b1f      	ldr	r3, [pc, #124]	@ (8004fc4 <vTaskStartScheduler+0xbc>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	e001      	b.n	8004f56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d11b      	bne.n	8004f94 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	613b      	str	r3, [r7, #16]
}
 8004f6e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f70:	4b15      	ldr	r3, [pc, #84]	@ (8004fc8 <vTaskStartScheduler+0xc0>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	334c      	adds	r3, #76	@ 0x4c
 8004f76:	4a15      	ldr	r2, [pc, #84]	@ (8004fcc <vTaskStartScheduler+0xc4>)
 8004f78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f7a:	4b15      	ldr	r3, [pc, #84]	@ (8004fd0 <vTaskStartScheduler+0xc8>)
 8004f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f82:	4b14      	ldr	r3, [pc, #80]	@ (8004fd4 <vTaskStartScheduler+0xcc>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f88:	4b13      	ldr	r3, [pc, #76]	@ (8004fd8 <vTaskStartScheduler+0xd0>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f8e:	f000 fc1f 	bl	80057d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f92:	e00f      	b.n	8004fb4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9a:	d10b      	bne.n	8004fb4 <vTaskStartScheduler+0xac>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	60fb      	str	r3, [r7, #12]
}
 8004fae:	bf00      	nop
 8004fb0:	bf00      	nop
 8004fb2:	e7fd      	b.n	8004fb0 <vTaskStartScheduler+0xa8>
}
 8004fb4:	bf00      	nop
 8004fb6:	3718      	adds	r7, #24
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	08006a50 	.word	0x08006a50
 8004fc0:	08005439 	.word	0x08005439
 8004fc4:	20000638 	.word	0x20000638
 8004fc8:	20000514 	.word	0x20000514
 8004fcc:	200000a4 	.word	0x200000a4
 8004fd0:	20000634 	.word	0x20000634
 8004fd4:	20000620 	.word	0x20000620
 8004fd8:	20000618 	.word	0x20000618

08004fdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004fe0:	4b04      	ldr	r3, [pc, #16]	@ (8004ff4 <vTaskSuspendAll+0x18>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	4a03      	ldr	r2, [pc, #12]	@ (8004ff4 <vTaskSuspendAll+0x18>)
 8004fe8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004fea:	bf00      	nop
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	2000063c 	.word	0x2000063c

08004ff8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005002:	2300      	movs	r3, #0
 8005004:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005006:	4b42      	ldr	r3, [pc, #264]	@ (8005110 <xTaskResumeAll+0x118>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10b      	bne.n	8005026 <xTaskResumeAll+0x2e>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	603b      	str	r3, [r7, #0]
}
 8005020:	bf00      	nop
 8005022:	bf00      	nop
 8005024:	e7fd      	b.n	8005022 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005026:	f000 fc77 	bl	8005918 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800502a:	4b39      	ldr	r3, [pc, #228]	@ (8005110 <xTaskResumeAll+0x118>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3b01      	subs	r3, #1
 8005030:	4a37      	ldr	r2, [pc, #220]	@ (8005110 <xTaskResumeAll+0x118>)
 8005032:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005034:	4b36      	ldr	r3, [pc, #216]	@ (8005110 <xTaskResumeAll+0x118>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d161      	bne.n	8005100 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800503c:	4b35      	ldr	r3, [pc, #212]	@ (8005114 <xTaskResumeAll+0x11c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d05d      	beq.n	8005100 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005044:	e02e      	b.n	80050a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005046:	4b34      	ldr	r3, [pc, #208]	@ (8005118 <xTaskResumeAll+0x120>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3318      	adds	r3, #24
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff fb4b 	bl	80046ee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	3304      	adds	r3, #4
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff fb46 	bl	80046ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005066:	2201      	movs	r2, #1
 8005068:	409a      	lsls	r2, r3
 800506a:	4b2c      	ldr	r3, [pc, #176]	@ (800511c <xTaskResumeAll+0x124>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4313      	orrs	r3, r2
 8005070:	4a2a      	ldr	r2, [pc, #168]	@ (800511c <xTaskResumeAll+0x124>)
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4a27      	ldr	r2, [pc, #156]	@ (8005120 <xTaskResumeAll+0x128>)
 8005082:	441a      	add	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	3304      	adds	r3, #4
 8005088:	4619      	mov	r1, r3
 800508a:	4610      	mov	r0, r2
 800508c:	f7ff fad2 	bl	8004634 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005094:	4b23      	ldr	r3, [pc, #140]	@ (8005124 <xTaskResumeAll+0x12c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509a:	429a      	cmp	r2, r3
 800509c:	d302      	bcc.n	80050a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800509e:	4b22      	ldr	r3, [pc, #136]	@ (8005128 <xTaskResumeAll+0x130>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005118 <xTaskResumeAll+0x120>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1cc      	bne.n	8005046 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050b2:	f000 fa7d 	bl	80055b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80050b6:	4b1d      	ldr	r3, [pc, #116]	@ (800512c <xTaskResumeAll+0x134>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d010      	beq.n	80050e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050c2:	f000 f837 	bl	8005134 <xTaskIncrementTick>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80050cc:	4b16      	ldr	r3, [pc, #88]	@ (8005128 <xTaskResumeAll+0x130>)
 80050ce:	2201      	movs	r2, #1
 80050d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3b01      	subs	r3, #1
 80050d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f1      	bne.n	80050c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80050de:	4b13      	ldr	r3, [pc, #76]	@ (800512c <xTaskResumeAll+0x134>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050e4:	4b10      	ldr	r3, [pc, #64]	@ (8005128 <xTaskResumeAll+0x130>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d009      	beq.n	8005100 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050ec:	2301      	movs	r3, #1
 80050ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005130 <xTaskResumeAll+0x138>)
 80050f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005100:	f000 fc3c 	bl	800597c <vPortExitCritical>

	return xAlreadyYielded;
 8005104:	68bb      	ldr	r3, [r7, #8]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	2000063c 	.word	0x2000063c
 8005114:	20000614 	.word	0x20000614
 8005118:	200005d4 	.word	0x200005d4
 800511c:	2000061c 	.word	0x2000061c
 8005120:	20000518 	.word	0x20000518
 8005124:	20000514 	.word	0x20000514
 8005128:	20000628 	.word	0x20000628
 800512c:	20000624 	.word	0x20000624
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800513a:	2300      	movs	r3, #0
 800513c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800513e:	4b4f      	ldr	r3, [pc, #316]	@ (800527c <xTaskIncrementTick+0x148>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	f040 808f 	bne.w	8005266 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005148:	4b4d      	ldr	r3, [pc, #308]	@ (8005280 <xTaskIncrementTick+0x14c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3301      	adds	r3, #1
 800514e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005150:	4a4b      	ldr	r2, [pc, #300]	@ (8005280 <xTaskIncrementTick+0x14c>)
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d121      	bne.n	80051a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800515c:	4b49      	ldr	r3, [pc, #292]	@ (8005284 <xTaskIncrementTick+0x150>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00b      	beq.n	800517e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	603b      	str	r3, [r7, #0]
}
 8005178:	bf00      	nop
 800517a:	bf00      	nop
 800517c:	e7fd      	b.n	800517a <xTaskIncrementTick+0x46>
 800517e:	4b41      	ldr	r3, [pc, #260]	@ (8005284 <xTaskIncrementTick+0x150>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	4b40      	ldr	r3, [pc, #256]	@ (8005288 <xTaskIncrementTick+0x154>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a3e      	ldr	r2, [pc, #248]	@ (8005284 <xTaskIncrementTick+0x150>)
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	4a3e      	ldr	r2, [pc, #248]	@ (8005288 <xTaskIncrementTick+0x154>)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	4b3e      	ldr	r3, [pc, #248]	@ (800528c <xTaskIncrementTick+0x158>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3301      	adds	r3, #1
 8005198:	4a3c      	ldr	r2, [pc, #240]	@ (800528c <xTaskIncrementTick+0x158>)
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	f000 fa08 	bl	80055b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005290 <xTaskIncrementTick+0x15c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d348      	bcc.n	800523c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051aa:	4b36      	ldr	r3, [pc, #216]	@ (8005284 <xTaskIncrementTick+0x150>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d104      	bne.n	80051be <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051b4:	4b36      	ldr	r3, [pc, #216]	@ (8005290 <xTaskIncrementTick+0x15c>)
 80051b6:	f04f 32ff 	mov.w	r2, #4294967295
 80051ba:	601a      	str	r2, [r3, #0]
					break;
 80051bc:	e03e      	b.n	800523c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051be:	4b31      	ldr	r3, [pc, #196]	@ (8005284 <xTaskIncrementTick+0x150>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d203      	bcs.n	80051de <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051d6:	4a2e      	ldr	r2, [pc, #184]	@ (8005290 <xTaskIncrementTick+0x15c>)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051dc:	e02e      	b.n	800523c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	3304      	adds	r3, #4
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff fa83 	bl	80046ee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d004      	beq.n	80051fa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	3318      	adds	r3, #24
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff fa7a 	bl	80046ee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fe:	2201      	movs	r2, #1
 8005200:	409a      	lsls	r2, r3
 8005202:	4b24      	ldr	r3, [pc, #144]	@ (8005294 <xTaskIncrementTick+0x160>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4313      	orrs	r3, r2
 8005208:	4a22      	ldr	r2, [pc, #136]	@ (8005294 <xTaskIncrementTick+0x160>)
 800520a:	6013      	str	r3, [r2, #0]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005210:	4613      	mov	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4a1f      	ldr	r2, [pc, #124]	@ (8005298 <xTaskIncrementTick+0x164>)
 800521a:	441a      	add	r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	3304      	adds	r3, #4
 8005220:	4619      	mov	r1, r3
 8005222:	4610      	mov	r0, r2
 8005224:	f7ff fa06 	bl	8004634 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800522c:	4b1b      	ldr	r3, [pc, #108]	@ (800529c <xTaskIncrementTick+0x168>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005232:	429a      	cmp	r2, r3
 8005234:	d3b9      	bcc.n	80051aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005236:	2301      	movs	r3, #1
 8005238:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800523a:	e7b6      	b.n	80051aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800523c:	4b17      	ldr	r3, [pc, #92]	@ (800529c <xTaskIncrementTick+0x168>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005242:	4915      	ldr	r1, [pc, #84]	@ (8005298 <xTaskIncrementTick+0x164>)
 8005244:	4613      	mov	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d901      	bls.n	8005258 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005254:	2301      	movs	r3, #1
 8005256:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005258:	4b11      	ldr	r3, [pc, #68]	@ (80052a0 <xTaskIncrementTick+0x16c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d007      	beq.n	8005270 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005260:	2301      	movs	r3, #1
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	e004      	b.n	8005270 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005266:	4b0f      	ldr	r3, [pc, #60]	@ (80052a4 <xTaskIncrementTick+0x170>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3301      	adds	r3, #1
 800526c:	4a0d      	ldr	r2, [pc, #52]	@ (80052a4 <xTaskIncrementTick+0x170>)
 800526e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005270:	697b      	ldr	r3, [r7, #20]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	2000063c 	.word	0x2000063c
 8005280:	20000618 	.word	0x20000618
 8005284:	200005cc 	.word	0x200005cc
 8005288:	200005d0 	.word	0x200005d0
 800528c:	2000062c 	.word	0x2000062c
 8005290:	20000634 	.word	0x20000634
 8005294:	2000061c 	.word	0x2000061c
 8005298:	20000518 	.word	0x20000518
 800529c:	20000514 	.word	0x20000514
 80052a0:	20000628 	.word	0x20000628
 80052a4:	20000624 	.word	0x20000624

080052a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052ae:	4b2a      	ldr	r3, [pc, #168]	@ (8005358 <vTaskSwitchContext+0xb0>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052b6:	4b29      	ldr	r3, [pc, #164]	@ (800535c <vTaskSwitchContext+0xb4>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052bc:	e045      	b.n	800534a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80052be:	4b27      	ldr	r3, [pc, #156]	@ (800535c <vTaskSwitchContext+0xb4>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052c4:	4b26      	ldr	r3, [pc, #152]	@ (8005360 <vTaskSwitchContext+0xb8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	fab3 f383 	clz	r3, r3
 80052d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80052d2:	7afb      	ldrb	r3, [r7, #11]
 80052d4:	f1c3 031f 	rsb	r3, r3, #31
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	4922      	ldr	r1, [pc, #136]	@ (8005364 <vTaskSwitchContext+0xbc>)
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	440b      	add	r3, r1
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10b      	bne.n	8005306 <vTaskSwitchContext+0x5e>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	607b      	str	r3, [r7, #4]
}
 8005300:	bf00      	nop
 8005302:	bf00      	nop
 8005304:	e7fd      	b.n	8005302 <vTaskSwitchContext+0x5a>
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4613      	mov	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4a14      	ldr	r2, [pc, #80]	@ (8005364 <vTaskSwitchContext+0xbc>)
 8005312:	4413      	add	r3, r2
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	605a      	str	r2, [r3, #4]
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	3308      	adds	r3, #8
 8005328:	429a      	cmp	r2, r3
 800532a:	d104      	bne.n	8005336 <vTaskSwitchContext+0x8e>
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	605a      	str	r2, [r3, #4]
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	4a0a      	ldr	r2, [pc, #40]	@ (8005368 <vTaskSwitchContext+0xc0>)
 800533e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005340:	4b09      	ldr	r3, [pc, #36]	@ (8005368 <vTaskSwitchContext+0xc0>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	334c      	adds	r3, #76	@ 0x4c
 8005346:	4a09      	ldr	r2, [pc, #36]	@ (800536c <vTaskSwitchContext+0xc4>)
 8005348:	6013      	str	r3, [r2, #0]
}
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	2000063c 	.word	0x2000063c
 800535c:	20000628 	.word	0x20000628
 8005360:	2000061c 	.word	0x2000061c
 8005364:	20000518 	.word	0x20000518
 8005368:	20000514 	.word	0x20000514
 800536c:	200000a4 	.word	0x200000a4

08005370 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10b      	bne.n	800539e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	60fb      	str	r3, [r7, #12]
}
 8005398:	bf00      	nop
 800539a:	bf00      	nop
 800539c:	e7fd      	b.n	800539a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	3318      	adds	r3, #24
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff f9a3 	bl	80046ee <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005420 <xTaskRemoveFromEventList+0xb0>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d11c      	bne.n	80053ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	3304      	adds	r3, #4
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7ff f99a 	bl	80046ee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053be:	2201      	movs	r2, #1
 80053c0:	409a      	lsls	r2, r3
 80053c2:	4b18      	ldr	r3, [pc, #96]	@ (8005424 <xTaskRemoveFromEventList+0xb4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	4a16      	ldr	r2, [pc, #88]	@ (8005424 <xTaskRemoveFromEventList+0xb4>)
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053d0:	4613      	mov	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4a13      	ldr	r2, [pc, #76]	@ (8005428 <xTaskRemoveFromEventList+0xb8>)
 80053da:	441a      	add	r2, r3
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	3304      	adds	r3, #4
 80053e0:	4619      	mov	r1, r3
 80053e2:	4610      	mov	r0, r2
 80053e4:	f7ff f926 	bl	8004634 <vListInsertEnd>
 80053e8:	e005      	b.n	80053f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	3318      	adds	r3, #24
 80053ee:	4619      	mov	r1, r3
 80053f0:	480e      	ldr	r0, [pc, #56]	@ (800542c <xTaskRemoveFromEventList+0xbc>)
 80053f2:	f7ff f91f 	bl	8004634 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005430 <xTaskRemoveFromEventList+0xc0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005400:	429a      	cmp	r2, r3
 8005402:	d905      	bls.n	8005410 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005404:	2301      	movs	r3, #1
 8005406:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005408:	4b0a      	ldr	r3, [pc, #40]	@ (8005434 <xTaskRemoveFromEventList+0xc4>)
 800540a:	2201      	movs	r2, #1
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	e001      	b.n	8005414 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005414:	697b      	ldr	r3, [r7, #20]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	2000063c 	.word	0x2000063c
 8005424:	2000061c 	.word	0x2000061c
 8005428:	20000518 	.word	0x20000518
 800542c:	200005d4 	.word	0x200005d4
 8005430:	20000514 	.word	0x20000514
 8005434:	20000628 	.word	0x20000628

08005438 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005440:	f000 f852 	bl	80054e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005444:	4b06      	ldr	r3, [pc, #24]	@ (8005460 <prvIdleTask+0x28>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d9f9      	bls.n	8005440 <prvIdleTask+0x8>
			{
				taskYIELD();
 800544c:	4b05      	ldr	r3, [pc, #20]	@ (8005464 <prvIdleTask+0x2c>)
 800544e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800545c:	e7f0      	b.n	8005440 <prvIdleTask+0x8>
 800545e:	bf00      	nop
 8005460:	20000518 	.word	0x20000518
 8005464:	e000ed04 	.word	0xe000ed04

08005468 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800546e:	2300      	movs	r3, #0
 8005470:	607b      	str	r3, [r7, #4]
 8005472:	e00c      	b.n	800548e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	4613      	mov	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4a12      	ldr	r2, [pc, #72]	@ (80054c8 <prvInitialiseTaskLists+0x60>)
 8005480:	4413      	add	r3, r2
 8005482:	4618      	mov	r0, r3
 8005484:	f7ff f8a9 	bl	80045da <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3301      	adds	r3, #1
 800548c:	607b      	str	r3, [r7, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b06      	cmp	r3, #6
 8005492:	d9ef      	bls.n	8005474 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005494:	480d      	ldr	r0, [pc, #52]	@ (80054cc <prvInitialiseTaskLists+0x64>)
 8005496:	f7ff f8a0 	bl	80045da <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800549a:	480d      	ldr	r0, [pc, #52]	@ (80054d0 <prvInitialiseTaskLists+0x68>)
 800549c:	f7ff f89d 	bl	80045da <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054a0:	480c      	ldr	r0, [pc, #48]	@ (80054d4 <prvInitialiseTaskLists+0x6c>)
 80054a2:	f7ff f89a 	bl	80045da <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054a6:	480c      	ldr	r0, [pc, #48]	@ (80054d8 <prvInitialiseTaskLists+0x70>)
 80054a8:	f7ff f897 	bl	80045da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054ac:	480b      	ldr	r0, [pc, #44]	@ (80054dc <prvInitialiseTaskLists+0x74>)
 80054ae:	f7ff f894 	bl	80045da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054b2:	4b0b      	ldr	r3, [pc, #44]	@ (80054e0 <prvInitialiseTaskLists+0x78>)
 80054b4:	4a05      	ldr	r2, [pc, #20]	@ (80054cc <prvInitialiseTaskLists+0x64>)
 80054b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054b8:	4b0a      	ldr	r3, [pc, #40]	@ (80054e4 <prvInitialiseTaskLists+0x7c>)
 80054ba:	4a05      	ldr	r2, [pc, #20]	@ (80054d0 <prvInitialiseTaskLists+0x68>)
 80054bc:	601a      	str	r2, [r3, #0]
}
 80054be:	bf00      	nop
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000518 	.word	0x20000518
 80054cc:	200005a4 	.word	0x200005a4
 80054d0:	200005b8 	.word	0x200005b8
 80054d4:	200005d4 	.word	0x200005d4
 80054d8:	200005e8 	.word	0x200005e8
 80054dc:	20000600 	.word	0x20000600
 80054e0:	200005cc 	.word	0x200005cc
 80054e4:	200005d0 	.word	0x200005d0

080054e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054ee:	e019      	b.n	8005524 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80054f0:	f000 fa12 	bl	8005918 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054f4:	4b10      	ldr	r3, [pc, #64]	@ (8005538 <prvCheckTasksWaitingTermination+0x50>)
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3304      	adds	r3, #4
 8005500:	4618      	mov	r0, r3
 8005502:	f7ff f8f4 	bl	80046ee <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005506:	4b0d      	ldr	r3, [pc, #52]	@ (800553c <prvCheckTasksWaitingTermination+0x54>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3b01      	subs	r3, #1
 800550c:	4a0b      	ldr	r2, [pc, #44]	@ (800553c <prvCheckTasksWaitingTermination+0x54>)
 800550e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005510:	4b0b      	ldr	r3, [pc, #44]	@ (8005540 <prvCheckTasksWaitingTermination+0x58>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3b01      	subs	r3, #1
 8005516:	4a0a      	ldr	r2, [pc, #40]	@ (8005540 <prvCheckTasksWaitingTermination+0x58>)
 8005518:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800551a:	f000 fa2f 	bl	800597c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f810 	bl	8005544 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005524:	4b06      	ldr	r3, [pc, #24]	@ (8005540 <prvCheckTasksWaitingTermination+0x58>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e1      	bne.n	80054f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800552c:	bf00      	nop
 800552e:	bf00      	nop
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	200005e8 	.word	0x200005e8
 800553c:	20000614 	.word	0x20000614
 8005540:	200005fc 	.word	0x200005fc

08005544 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	334c      	adds	r3, #76	@ 0x4c
 8005550:	4618      	mov	r0, r3
 8005552:	f000 fd1b 	bl	8005f8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800555c:	2b00      	cmp	r3, #0
 800555e:	d108      	bne.n	8005572 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005564:	4618      	mov	r0, r3
 8005566:	f000 fbc7 	bl	8005cf8 <vPortFree>
				vPortFree( pxTCB );
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fbc4 	bl	8005cf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005570:	e019      	b.n	80055a6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005578:	2b01      	cmp	r3, #1
 800557a:	d103      	bne.n	8005584 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fbbb 	bl	8005cf8 <vPortFree>
	}
 8005582:	e010      	b.n	80055a6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800558a:	2b02      	cmp	r3, #2
 800558c:	d00b      	beq.n	80055a6 <prvDeleteTCB+0x62>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	60fb      	str	r3, [r7, #12]
}
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	e7fd      	b.n	80055a2 <prvDeleteTCB+0x5e>
	}
 80055a6:	bf00      	nop
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055b6:	4b0c      	ldr	r3, [pc, #48]	@ (80055e8 <prvResetNextTaskUnblockTime+0x38>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d104      	bne.n	80055ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055c0:	4b0a      	ldr	r3, [pc, #40]	@ (80055ec <prvResetNextTaskUnblockTime+0x3c>)
 80055c2:	f04f 32ff 	mov.w	r2, #4294967295
 80055c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80055c8:	e008      	b.n	80055dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ca:	4b07      	ldr	r3, [pc, #28]	@ (80055e8 <prvResetNextTaskUnblockTime+0x38>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	4a04      	ldr	r2, [pc, #16]	@ (80055ec <prvResetNextTaskUnblockTime+0x3c>)
 80055da:	6013      	str	r3, [r2, #0]
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	200005cc 	.word	0x200005cc
 80055ec:	20000634 	.word	0x20000634

080055f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055fa:	4b29      	ldr	r3, [pc, #164]	@ (80056a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005600:	4b28      	ldr	r3, [pc, #160]	@ (80056a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3304      	adds	r3, #4
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff f871 	bl	80046ee <uxListRemove>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10b      	bne.n	800562a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005612:	4b24      	ldr	r3, [pc, #144]	@ (80056a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005618:	2201      	movs	r2, #1
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	43da      	mvns	r2, r3
 8005620:	4b21      	ldr	r3, [pc, #132]	@ (80056a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4013      	ands	r3, r2
 8005626:	4a20      	ldr	r2, [pc, #128]	@ (80056a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005628:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d10a      	bne.n	8005648 <prvAddCurrentTaskToDelayedList+0x58>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d007      	beq.n	8005648 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005638:	4b1a      	ldr	r3, [pc, #104]	@ (80056a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3304      	adds	r3, #4
 800563e:	4619      	mov	r1, r3
 8005640:	481a      	ldr	r0, [pc, #104]	@ (80056ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8005642:	f7fe fff7 	bl	8004634 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005646:	e026      	b.n	8005696 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4413      	add	r3, r2
 800564e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005650:	4b14      	ldr	r3, [pc, #80]	@ (80056a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	429a      	cmp	r2, r3
 800565e:	d209      	bcs.n	8005674 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005660:	4b13      	ldr	r3, [pc, #76]	@ (80056b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	4b0f      	ldr	r3, [pc, #60]	@ (80056a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3304      	adds	r3, #4
 800566a:	4619      	mov	r1, r3
 800566c:	4610      	mov	r0, r2
 800566e:	f7ff f805 	bl	800467c <vListInsert>
}
 8005672:	e010      	b.n	8005696 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005674:	4b0f      	ldr	r3, [pc, #60]	@ (80056b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	4b0a      	ldr	r3, [pc, #40]	@ (80056a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3304      	adds	r3, #4
 800567e:	4619      	mov	r1, r3
 8005680:	4610      	mov	r0, r2
 8005682:	f7fe fffb 	bl	800467c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005686:	4b0c      	ldr	r3, [pc, #48]	@ (80056b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	429a      	cmp	r2, r3
 800568e:	d202      	bcs.n	8005696 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005690:	4a09      	ldr	r2, [pc, #36]	@ (80056b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	6013      	str	r3, [r2, #0]
}
 8005696:	bf00      	nop
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	20000618 	.word	0x20000618
 80056a4:	20000514 	.word	0x20000514
 80056a8:	2000061c 	.word	0x2000061c
 80056ac:	20000600 	.word	0x20000600
 80056b0:	200005d0 	.word	0x200005d0
 80056b4:	200005cc 	.word	0x200005cc
 80056b8:	20000634 	.word	0x20000634

080056bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3b04      	subs	r3, #4
 80056cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80056d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	3b04      	subs	r3, #4
 80056da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f023 0201 	bic.w	r2, r3, #1
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3b04      	subs	r3, #4
 80056ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056ec:	4a0c      	ldr	r2, [pc, #48]	@ (8005720 <pxPortInitialiseStack+0x64>)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3b14      	subs	r3, #20
 80056f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3b04      	subs	r3, #4
 8005702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f06f 0202 	mvn.w	r2, #2
 800570a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	3b20      	subs	r3, #32
 8005710:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005712:	68fb      	ldr	r3, [r7, #12]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	08005725 	.word	0x08005725

08005724 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800572a:	2300      	movs	r3, #0
 800572c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800572e:	4b13      	ldr	r3, [pc, #76]	@ (800577c <prvTaskExitError+0x58>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005736:	d00b      	beq.n	8005750 <prvTaskExitError+0x2c>
	__asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	60fb      	str	r3, [r7, #12]
}
 800574a:	bf00      	nop
 800574c:	bf00      	nop
 800574e:	e7fd      	b.n	800574c <prvTaskExitError+0x28>
	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	60bb      	str	r3, [r7, #8]
}
 8005762:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005764:	bf00      	nop
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0fc      	beq.n	8005766 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800576c:	bf00      	nop
 800576e:	bf00      	nop
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	200000a0 	.word	0x200000a0

08005780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005780:	4b07      	ldr	r3, [pc, #28]	@ (80057a0 <pxCurrentTCBConst2>)
 8005782:	6819      	ldr	r1, [r3, #0]
 8005784:	6808      	ldr	r0, [r1, #0]
 8005786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800578a:	f380 8809 	msr	PSP, r0
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f04f 0000 	mov.w	r0, #0
 8005796:	f380 8811 	msr	BASEPRI, r0
 800579a:	4770      	bx	lr
 800579c:	f3af 8000 	nop.w

080057a0 <pxCurrentTCBConst2>:
 80057a0:	20000514 	.word	0x20000514
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057a4:	bf00      	nop
 80057a6:	bf00      	nop

080057a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057a8:	4808      	ldr	r0, [pc, #32]	@ (80057cc <prvPortStartFirstTask+0x24>)
 80057aa:	6800      	ldr	r0, [r0, #0]
 80057ac:	6800      	ldr	r0, [r0, #0]
 80057ae:	f380 8808 	msr	MSP, r0
 80057b2:	f04f 0000 	mov.w	r0, #0
 80057b6:	f380 8814 	msr	CONTROL, r0
 80057ba:	b662      	cpsie	i
 80057bc:	b661      	cpsie	f
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	df00      	svc	0
 80057c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057ca:	bf00      	nop
 80057cc:	e000ed08 	.word	0xe000ed08

080057d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057d6:	4b47      	ldr	r3, [pc, #284]	@ (80058f4 <xPortStartScheduler+0x124>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a47      	ldr	r2, [pc, #284]	@ (80058f8 <xPortStartScheduler+0x128>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d10b      	bne.n	80057f8 <xPortStartScheduler+0x28>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	60fb      	str	r3, [r7, #12]
}
 80057f2:	bf00      	nop
 80057f4:	bf00      	nop
 80057f6:	e7fd      	b.n	80057f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80057f8:	4b3e      	ldr	r3, [pc, #248]	@ (80058f4 <xPortStartScheduler+0x124>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a3f      	ldr	r2, [pc, #252]	@ (80058fc <xPortStartScheduler+0x12c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d10b      	bne.n	800581a <xPortStartScheduler+0x4a>
	__asm volatile
 8005802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	613b      	str	r3, [r7, #16]
}
 8005814:	bf00      	nop
 8005816:	bf00      	nop
 8005818:	e7fd      	b.n	8005816 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800581a:	4b39      	ldr	r3, [pc, #228]	@ (8005900 <xPortStartScheduler+0x130>)
 800581c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	b2db      	uxtb	r3, r3
 8005824:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	22ff      	movs	r2, #255	@ 0xff
 800582a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	b2db      	uxtb	r3, r3
 8005832:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005834:	78fb      	ldrb	r3, [r7, #3]
 8005836:	b2db      	uxtb	r3, r3
 8005838:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800583c:	b2da      	uxtb	r2, r3
 800583e:	4b31      	ldr	r3, [pc, #196]	@ (8005904 <xPortStartScheduler+0x134>)
 8005840:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005842:	4b31      	ldr	r3, [pc, #196]	@ (8005908 <xPortStartScheduler+0x138>)
 8005844:	2207      	movs	r2, #7
 8005846:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005848:	e009      	b.n	800585e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800584a:	4b2f      	ldr	r3, [pc, #188]	@ (8005908 <xPortStartScheduler+0x138>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3b01      	subs	r3, #1
 8005850:	4a2d      	ldr	r2, [pc, #180]	@ (8005908 <xPortStartScheduler+0x138>)
 8005852:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	b2db      	uxtb	r3, r3
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	b2db      	uxtb	r3, r3
 800585c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800585e:	78fb      	ldrb	r3, [r7, #3]
 8005860:	b2db      	uxtb	r3, r3
 8005862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005866:	2b80      	cmp	r3, #128	@ 0x80
 8005868:	d0ef      	beq.n	800584a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800586a:	4b27      	ldr	r3, [pc, #156]	@ (8005908 <xPortStartScheduler+0x138>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f1c3 0307 	rsb	r3, r3, #7
 8005872:	2b04      	cmp	r3, #4
 8005874:	d00b      	beq.n	800588e <xPortStartScheduler+0xbe>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	60bb      	str	r3, [r7, #8]
}
 8005888:	bf00      	nop
 800588a:	bf00      	nop
 800588c:	e7fd      	b.n	800588a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800588e:	4b1e      	ldr	r3, [pc, #120]	@ (8005908 <xPortStartScheduler+0x138>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	021b      	lsls	r3, r3, #8
 8005894:	4a1c      	ldr	r2, [pc, #112]	@ (8005908 <xPortStartScheduler+0x138>)
 8005896:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005898:	4b1b      	ldr	r3, [pc, #108]	@ (8005908 <xPortStartScheduler+0x138>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80058a0:	4a19      	ldr	r2, [pc, #100]	@ (8005908 <xPortStartScheduler+0x138>)
 80058a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058ac:	4b17      	ldr	r3, [pc, #92]	@ (800590c <xPortStartScheduler+0x13c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a16      	ldr	r2, [pc, #88]	@ (800590c <xPortStartScheduler+0x13c>)
 80058b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80058b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058b8:	4b14      	ldr	r3, [pc, #80]	@ (800590c <xPortStartScheduler+0x13c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a13      	ldr	r2, [pc, #76]	@ (800590c <xPortStartScheduler+0x13c>)
 80058be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80058c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058c4:	f000 f8da 	bl	8005a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058c8:	4b11      	ldr	r3, [pc, #68]	@ (8005910 <xPortStartScheduler+0x140>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80058ce:	f000 f8f9 	bl	8005ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058d2:	4b10      	ldr	r3, [pc, #64]	@ (8005914 <xPortStartScheduler+0x144>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a0f      	ldr	r2, [pc, #60]	@ (8005914 <xPortStartScheduler+0x144>)
 80058d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80058dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058de:	f7ff ff63 	bl	80057a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058e2:	f7ff fce1 	bl	80052a8 <vTaskSwitchContext>
	prvTaskExitError();
 80058e6:	f7ff ff1d 	bl	8005724 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	e000ed00 	.word	0xe000ed00
 80058f8:	410fc271 	.word	0x410fc271
 80058fc:	410fc270 	.word	0x410fc270
 8005900:	e000e400 	.word	0xe000e400
 8005904:	20000640 	.word	0x20000640
 8005908:	20000644 	.word	0x20000644
 800590c:	e000ed20 	.word	0xe000ed20
 8005910:	200000a0 	.word	0x200000a0
 8005914:	e000ef34 	.word	0xe000ef34

08005918 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	607b      	str	r3, [r7, #4]
}
 8005930:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005932:	4b10      	ldr	r3, [pc, #64]	@ (8005974 <vPortEnterCritical+0x5c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3301      	adds	r3, #1
 8005938:	4a0e      	ldr	r2, [pc, #56]	@ (8005974 <vPortEnterCritical+0x5c>)
 800593a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800593c:	4b0d      	ldr	r3, [pc, #52]	@ (8005974 <vPortEnterCritical+0x5c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d110      	bne.n	8005966 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005944:	4b0c      	ldr	r3, [pc, #48]	@ (8005978 <vPortEnterCritical+0x60>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <vPortEnterCritical+0x4e>
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	603b      	str	r3, [r7, #0]
}
 8005960:	bf00      	nop
 8005962:	bf00      	nop
 8005964:	e7fd      	b.n	8005962 <vPortEnterCritical+0x4a>
	}
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	200000a0 	.word	0x200000a0
 8005978:	e000ed04 	.word	0xe000ed04

0800597c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005982:	4b12      	ldr	r3, [pc, #72]	@ (80059cc <vPortExitCritical+0x50>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10b      	bne.n	80059a2 <vPortExitCritical+0x26>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	607b      	str	r3, [r7, #4]
}
 800599c:	bf00      	nop
 800599e:	bf00      	nop
 80059a0:	e7fd      	b.n	800599e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059a2:	4b0a      	ldr	r3, [pc, #40]	@ (80059cc <vPortExitCritical+0x50>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	4a08      	ldr	r2, [pc, #32]	@ (80059cc <vPortExitCritical+0x50>)
 80059aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059ac:	4b07      	ldr	r3, [pc, #28]	@ (80059cc <vPortExitCritical+0x50>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d105      	bne.n	80059c0 <vPortExitCritical+0x44>
 80059b4:	2300      	movs	r3, #0
 80059b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	f383 8811 	msr	BASEPRI, r3
}
 80059be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	200000a0 	.word	0x200000a0

080059d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059d0:	f3ef 8009 	mrs	r0, PSP
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	4b15      	ldr	r3, [pc, #84]	@ (8005a30 <pxCurrentTCBConst>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	f01e 0f10 	tst.w	lr, #16
 80059e0:	bf08      	it	eq
 80059e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ea:	6010      	str	r0, [r2, #0]
 80059ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80059f4:	f380 8811 	msr	BASEPRI, r0
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f7ff fc52 	bl	80052a8 <vTaskSwitchContext>
 8005a04:	f04f 0000 	mov.w	r0, #0
 8005a08:	f380 8811 	msr	BASEPRI, r0
 8005a0c:	bc09      	pop	{r0, r3}
 8005a0e:	6819      	ldr	r1, [r3, #0]
 8005a10:	6808      	ldr	r0, [r1, #0]
 8005a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a16:	f01e 0f10 	tst.w	lr, #16
 8005a1a:	bf08      	it	eq
 8005a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a20:	f380 8809 	msr	PSP, r0
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	f3af 8000 	nop.w

08005a30 <pxCurrentTCBConst>:
 8005a30:	20000514 	.word	0x20000514
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop

08005a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	607b      	str	r3, [r7, #4]
}
 8005a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a52:	f7ff fb6f 	bl	8005134 <xTaskIncrementTick>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a5c:	4b06      	ldr	r3, [pc, #24]	@ (8005a78 <SysTick_Handler+0x40>)
 8005a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	2300      	movs	r3, #0
 8005a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	f383 8811 	msr	BASEPRI, r3
}
 8005a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a70:	bf00      	nop
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	e000ed04 	.word	0xe000ed04

08005a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a80:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab0 <vPortSetupTimerInterrupt+0x34>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a86:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab4 <vPortSetupTimerInterrupt+0x38>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab8 <vPortSetupTimerInterrupt+0x3c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a0a      	ldr	r2, [pc, #40]	@ (8005abc <vPortSetupTimerInterrupt+0x40>)
 8005a92:	fba2 2303 	umull	r2, r3, r2, r3
 8005a96:	099b      	lsrs	r3, r3, #6
 8005a98:	4a09      	ldr	r2, [pc, #36]	@ (8005ac0 <vPortSetupTimerInterrupt+0x44>)
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a9e:	4b04      	ldr	r3, [pc, #16]	@ (8005ab0 <vPortSetupTimerInterrupt+0x34>)
 8005aa0:	2207      	movs	r2, #7
 8005aa2:	601a      	str	r2, [r3, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	e000e010 	.word	0xe000e010
 8005ab4:	e000e018 	.word	0xe000e018
 8005ab8:	20000094 	.word	0x20000094
 8005abc:	10624dd3 	.word	0x10624dd3
 8005ac0:	e000e014 	.word	0xe000e014

08005ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005ad4 <vPortEnableVFP+0x10>
 8005ac8:	6801      	ldr	r1, [r0, #0]
 8005aca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005ace:	6001      	str	r1, [r0, #0]
 8005ad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ad2:	bf00      	nop
 8005ad4:	e000ed88 	.word	0xe000ed88

08005ad8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ade:	f3ef 8305 	mrs	r3, IPSR
 8005ae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b0f      	cmp	r3, #15
 8005ae8:	d915      	bls.n	8005b16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005aea:	4a18      	ldr	r2, [pc, #96]	@ (8005b4c <vPortValidateInterruptPriority+0x74>)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4413      	add	r3, r2
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005af4:	4b16      	ldr	r3, [pc, #88]	@ (8005b50 <vPortValidateInterruptPriority+0x78>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	7afa      	ldrb	r2, [r7, #11]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d20b      	bcs.n	8005b16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	607b      	str	r3, [r7, #4]
}
 8005b10:	bf00      	nop
 8005b12:	bf00      	nop
 8005b14:	e7fd      	b.n	8005b12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b16:	4b0f      	ldr	r3, [pc, #60]	@ (8005b54 <vPortValidateInterruptPriority+0x7c>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b58 <vPortValidateInterruptPriority+0x80>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d90b      	bls.n	8005b3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	603b      	str	r3, [r7, #0]
}
 8005b38:	bf00      	nop
 8005b3a:	bf00      	nop
 8005b3c:	e7fd      	b.n	8005b3a <vPortValidateInterruptPriority+0x62>
	}
 8005b3e:	bf00      	nop
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	e000e3f0 	.word	0xe000e3f0
 8005b50:	20000640 	.word	0x20000640
 8005b54:	e000ed0c 	.word	0xe000ed0c
 8005b58:	20000644 	.word	0x20000644

08005b5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b08a      	sub	sp, #40	@ 0x28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b64:	2300      	movs	r3, #0
 8005b66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b68:	f7ff fa38 	bl	8004fdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8005ce0 <pvPortMalloc+0x184>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b74:	f000 f924 	bl	8005dc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b78:	4b5a      	ldr	r3, [pc, #360]	@ (8005ce4 <pvPortMalloc+0x188>)
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f040 8095 	bne.w	8005cb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01e      	beq.n	8005bca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005b8c:	2208      	movs	r2, #8
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4413      	add	r3, r2
 8005b92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d015      	beq.n	8005bca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f023 0307 	bic.w	r3, r3, #7
 8005ba4:	3308      	adds	r3, #8
 8005ba6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00b      	beq.n	8005bca <pvPortMalloc+0x6e>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	617b      	str	r3, [r7, #20]
}
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop
 8005bc8:	e7fd      	b.n	8005bc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d06f      	beq.n	8005cb0 <pvPortMalloc+0x154>
 8005bd0:	4b45      	ldr	r3, [pc, #276]	@ (8005ce8 <pvPortMalloc+0x18c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d86a      	bhi.n	8005cb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bda:	4b44      	ldr	r3, [pc, #272]	@ (8005cec <pvPortMalloc+0x190>)
 8005bdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bde:	4b43      	ldr	r3, [pc, #268]	@ (8005cec <pvPortMalloc+0x190>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005be4:	e004      	b.n	8005bf0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d903      	bls.n	8005c02 <pvPortMalloc+0xa6>
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1f1      	bne.n	8005be6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c02:	4b37      	ldr	r3, [pc, #220]	@ (8005ce0 <pvPortMalloc+0x184>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d051      	beq.n	8005cb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2208      	movs	r2, #8
 8005c12:	4413      	add	r3, r2
 8005c14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	1ad2      	subs	r2, r2, r3
 8005c26:	2308      	movs	r3, #8
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d920      	bls.n	8005c70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4413      	add	r3, r2
 8005c34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00b      	beq.n	8005c58 <pvPortMalloc+0xfc>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	613b      	str	r3, [r7, #16]
}
 8005c52:	bf00      	nop
 8005c54:	bf00      	nop
 8005c56:	e7fd      	b.n	8005c54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	1ad2      	subs	r2, r2, r3
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c6a:	69b8      	ldr	r0, [r7, #24]
 8005c6c:	f000 f90a 	bl	8005e84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c70:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce8 <pvPortMalloc+0x18c>)
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ce8 <pvPortMalloc+0x18c>)
 8005c7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ce8 <pvPortMalloc+0x18c>)
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	4b1b      	ldr	r3, [pc, #108]	@ (8005cf0 <pvPortMalloc+0x194>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d203      	bcs.n	8005c92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c8a:	4b17      	ldr	r3, [pc, #92]	@ (8005ce8 <pvPortMalloc+0x18c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a18      	ldr	r2, [pc, #96]	@ (8005cf0 <pvPortMalloc+0x194>)
 8005c90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	4b13      	ldr	r3, [pc, #76]	@ (8005ce4 <pvPortMalloc+0x188>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005ca6:	4b13      	ldr	r3, [pc, #76]	@ (8005cf4 <pvPortMalloc+0x198>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3301      	adds	r3, #1
 8005cac:	4a11      	ldr	r2, [pc, #68]	@ (8005cf4 <pvPortMalloc+0x198>)
 8005cae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005cb0:	f7ff f9a2 	bl	8004ff8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00b      	beq.n	8005cd6 <pvPortMalloc+0x17a>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	60fb      	str	r3, [r7, #12]
}
 8005cd0:	bf00      	nop
 8005cd2:	bf00      	nop
 8005cd4:	e7fd      	b.n	8005cd2 <pvPortMalloc+0x176>
	return pvReturn;
 8005cd6:	69fb      	ldr	r3, [r7, #28]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3728      	adds	r7, #40	@ 0x28
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	20004250 	.word	0x20004250
 8005ce4:	20004264 	.word	0x20004264
 8005ce8:	20004254 	.word	0x20004254
 8005cec:	20004248 	.word	0x20004248
 8005cf0:	20004258 	.word	0x20004258
 8005cf4:	2000425c 	.word	0x2000425c

08005cf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d04f      	beq.n	8005daa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d0a:	2308      	movs	r3, #8
 8005d0c:	425b      	negs	r3, r3
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	4413      	add	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	4b25      	ldr	r3, [pc, #148]	@ (8005db4 <vPortFree+0xbc>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4013      	ands	r3, r2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10b      	bne.n	8005d3e <vPortFree+0x46>
	__asm volatile
 8005d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2a:	f383 8811 	msr	BASEPRI, r3
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	60fb      	str	r3, [r7, #12]
}
 8005d38:	bf00      	nop
 8005d3a:	bf00      	nop
 8005d3c:	e7fd      	b.n	8005d3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00b      	beq.n	8005d5e <vPortFree+0x66>
	__asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	60bb      	str	r3, [r7, #8]
}
 8005d58:	bf00      	nop
 8005d5a:	bf00      	nop
 8005d5c:	e7fd      	b.n	8005d5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	4b14      	ldr	r3, [pc, #80]	@ (8005db4 <vPortFree+0xbc>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4013      	ands	r3, r2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d01e      	beq.n	8005daa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d11a      	bne.n	8005daa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	4b0e      	ldr	r3, [pc, #56]	@ (8005db4 <vPortFree+0xbc>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	43db      	mvns	r3, r3
 8005d7e:	401a      	ands	r2, r3
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d84:	f7ff f92a 	bl	8004fdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005db8 <vPortFree+0xc0>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4413      	add	r3, r2
 8005d92:	4a09      	ldr	r2, [pc, #36]	@ (8005db8 <vPortFree+0xc0>)
 8005d94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d96:	6938      	ldr	r0, [r7, #16]
 8005d98:	f000 f874 	bl	8005e84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d9c:	4b07      	ldr	r3, [pc, #28]	@ (8005dbc <vPortFree+0xc4>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3301      	adds	r3, #1
 8005da2:	4a06      	ldr	r2, [pc, #24]	@ (8005dbc <vPortFree+0xc4>)
 8005da4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005da6:	f7ff f927 	bl	8004ff8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005daa:	bf00      	nop
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20004264 	.word	0x20004264
 8005db8:	20004254 	.word	0x20004254
 8005dbc:	20004260 	.word	0x20004260

08005dc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dc6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005dca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005dcc:	4b27      	ldr	r3, [pc, #156]	@ (8005e6c <prvHeapInit+0xac>)
 8005dce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f003 0307 	and.w	r3, r3, #7
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00c      	beq.n	8005df4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	3307      	adds	r3, #7
 8005dde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f023 0307 	bic.w	r3, r3, #7
 8005de6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	4a1f      	ldr	r2, [pc, #124]	@ (8005e6c <prvHeapInit+0xac>)
 8005df0:	4413      	add	r3, r2
 8005df2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005df8:	4a1d      	ldr	r2, [pc, #116]	@ (8005e70 <prvHeapInit+0xb0>)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8005e70 <prvHeapInit+0xb0>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	4413      	add	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e0c:	2208      	movs	r2, #8
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	1a9b      	subs	r3, r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 0307 	bic.w	r3, r3, #7
 8005e1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4a15      	ldr	r2, [pc, #84]	@ (8005e74 <prvHeapInit+0xb4>)
 8005e20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e22:	4b14      	ldr	r3, [pc, #80]	@ (8005e74 <prvHeapInit+0xb4>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2200      	movs	r2, #0
 8005e28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e2a:	4b12      	ldr	r3, [pc, #72]	@ (8005e74 <prvHeapInit+0xb4>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	1ad2      	subs	r2, r2, r3
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e40:	4b0c      	ldr	r3, [pc, #48]	@ (8005e74 <prvHeapInit+0xb4>)
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8005e78 <prvHeapInit+0xb8>)
 8005e4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	4a09      	ldr	r2, [pc, #36]	@ (8005e7c <prvHeapInit+0xbc>)
 8005e56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e58:	4b09      	ldr	r3, [pc, #36]	@ (8005e80 <prvHeapInit+0xc0>)
 8005e5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005e5e:	601a      	str	r2, [r3, #0]
}
 8005e60:	bf00      	nop
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	20000648 	.word	0x20000648
 8005e70:	20004248 	.word	0x20004248
 8005e74:	20004250 	.word	0x20004250
 8005e78:	20004258 	.word	0x20004258
 8005e7c:	20004254 	.word	0x20004254
 8005e80:	20004264 	.word	0x20004264

08005e84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e8c:	4b28      	ldr	r3, [pc, #160]	@ (8005f30 <prvInsertBlockIntoFreeList+0xac>)
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	e002      	b.n	8005e98 <prvInsertBlockIntoFreeList+0x14>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d8f7      	bhi.n	8005e92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	4413      	add	r3, r2
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d108      	bne.n	8005ec6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	441a      	add	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	441a      	add	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d118      	bne.n	8005f0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	4b15      	ldr	r3, [pc, #84]	@ (8005f34 <prvInsertBlockIntoFreeList+0xb0>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d00d      	beq.n	8005f02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	441a      	add	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	e008      	b.n	8005f14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f02:	4b0c      	ldr	r3, [pc, #48]	@ (8005f34 <prvInsertBlockIntoFreeList+0xb0>)
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	e003      	b.n	8005f14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d002      	beq.n	8005f22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f22:	bf00      	nop
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	20004248 	.word	0x20004248
 8005f34:	20004250 	.word	0x20004250

08005f38 <siprintf>:
 8005f38:	b40e      	push	{r1, r2, r3}
 8005f3a:	b510      	push	{r4, lr}
 8005f3c:	b09d      	sub	sp, #116	@ 0x74
 8005f3e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005f40:	9002      	str	r0, [sp, #8]
 8005f42:	9006      	str	r0, [sp, #24]
 8005f44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005f48:	480a      	ldr	r0, [pc, #40]	@ (8005f74 <siprintf+0x3c>)
 8005f4a:	9107      	str	r1, [sp, #28]
 8005f4c:	9104      	str	r1, [sp, #16]
 8005f4e:	490a      	ldr	r1, [pc, #40]	@ (8005f78 <siprintf+0x40>)
 8005f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f54:	9105      	str	r1, [sp, #20]
 8005f56:	2400      	movs	r4, #0
 8005f58:	a902      	add	r1, sp, #8
 8005f5a:	6800      	ldr	r0, [r0, #0]
 8005f5c:	9301      	str	r3, [sp, #4]
 8005f5e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005f60:	f000 fa00 	bl	8006364 <_svfiprintf_r>
 8005f64:	9b02      	ldr	r3, [sp, #8]
 8005f66:	701c      	strb	r4, [r3, #0]
 8005f68:	b01d      	add	sp, #116	@ 0x74
 8005f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f6e:	b003      	add	sp, #12
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	200000a4 	.word	0x200000a4
 8005f78:	ffff0208 	.word	0xffff0208

08005f7c <memset>:
 8005f7c:	4402      	add	r2, r0
 8005f7e:	4603      	mov	r3, r0
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d100      	bne.n	8005f86 <memset+0xa>
 8005f84:	4770      	bx	lr
 8005f86:	f803 1b01 	strb.w	r1, [r3], #1
 8005f8a:	e7f9      	b.n	8005f80 <memset+0x4>

08005f8c <_reclaim_reent>:
 8005f8c:	4b2d      	ldr	r3, [pc, #180]	@ (8006044 <_reclaim_reent+0xb8>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4283      	cmp	r3, r0
 8005f92:	b570      	push	{r4, r5, r6, lr}
 8005f94:	4604      	mov	r4, r0
 8005f96:	d053      	beq.n	8006040 <_reclaim_reent+0xb4>
 8005f98:	69c3      	ldr	r3, [r0, #28]
 8005f9a:	b31b      	cbz	r3, 8005fe4 <_reclaim_reent+0x58>
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	b163      	cbz	r3, 8005fba <_reclaim_reent+0x2e>
 8005fa0:	2500      	movs	r5, #0
 8005fa2:	69e3      	ldr	r3, [r4, #28]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	5959      	ldr	r1, [r3, r5]
 8005fa8:	b9b1      	cbnz	r1, 8005fd8 <_reclaim_reent+0x4c>
 8005faa:	3504      	adds	r5, #4
 8005fac:	2d80      	cmp	r5, #128	@ 0x80
 8005fae:	d1f8      	bne.n	8005fa2 <_reclaim_reent+0x16>
 8005fb0:	69e3      	ldr	r3, [r4, #28]
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	68d9      	ldr	r1, [r3, #12]
 8005fb6:	f000 f881 	bl	80060bc <_free_r>
 8005fba:	69e3      	ldr	r3, [r4, #28]
 8005fbc:	6819      	ldr	r1, [r3, #0]
 8005fbe:	b111      	cbz	r1, 8005fc6 <_reclaim_reent+0x3a>
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f000 f87b 	bl	80060bc <_free_r>
 8005fc6:	69e3      	ldr	r3, [r4, #28]
 8005fc8:	689d      	ldr	r5, [r3, #8]
 8005fca:	b15d      	cbz	r5, 8005fe4 <_reclaim_reent+0x58>
 8005fcc:	4629      	mov	r1, r5
 8005fce:	4620      	mov	r0, r4
 8005fd0:	682d      	ldr	r5, [r5, #0]
 8005fd2:	f000 f873 	bl	80060bc <_free_r>
 8005fd6:	e7f8      	b.n	8005fca <_reclaim_reent+0x3e>
 8005fd8:	680e      	ldr	r6, [r1, #0]
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f000 f86e 	bl	80060bc <_free_r>
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	e7e1      	b.n	8005fa8 <_reclaim_reent+0x1c>
 8005fe4:	6961      	ldr	r1, [r4, #20]
 8005fe6:	b111      	cbz	r1, 8005fee <_reclaim_reent+0x62>
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 f867 	bl	80060bc <_free_r>
 8005fee:	69e1      	ldr	r1, [r4, #28]
 8005ff0:	b111      	cbz	r1, 8005ff8 <_reclaim_reent+0x6c>
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f000 f862 	bl	80060bc <_free_r>
 8005ff8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005ffa:	b111      	cbz	r1, 8006002 <_reclaim_reent+0x76>
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f000 f85d 	bl	80060bc <_free_r>
 8006002:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006004:	b111      	cbz	r1, 800600c <_reclaim_reent+0x80>
 8006006:	4620      	mov	r0, r4
 8006008:	f000 f858 	bl	80060bc <_free_r>
 800600c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800600e:	b111      	cbz	r1, 8006016 <_reclaim_reent+0x8a>
 8006010:	4620      	mov	r0, r4
 8006012:	f000 f853 	bl	80060bc <_free_r>
 8006016:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006018:	b111      	cbz	r1, 8006020 <_reclaim_reent+0x94>
 800601a:	4620      	mov	r0, r4
 800601c:	f000 f84e 	bl	80060bc <_free_r>
 8006020:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006022:	b111      	cbz	r1, 800602a <_reclaim_reent+0x9e>
 8006024:	4620      	mov	r0, r4
 8006026:	f000 f849 	bl	80060bc <_free_r>
 800602a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800602c:	b111      	cbz	r1, 8006034 <_reclaim_reent+0xa8>
 800602e:	4620      	mov	r0, r4
 8006030:	f000 f844 	bl	80060bc <_free_r>
 8006034:	6a23      	ldr	r3, [r4, #32]
 8006036:	b11b      	cbz	r3, 8006040 <_reclaim_reent+0xb4>
 8006038:	4620      	mov	r0, r4
 800603a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800603e:	4718      	bx	r3
 8006040:	bd70      	pop	{r4, r5, r6, pc}
 8006042:	bf00      	nop
 8006044:	200000a4 	.word	0x200000a4

08006048 <__errno>:
 8006048:	4b01      	ldr	r3, [pc, #4]	@ (8006050 <__errno+0x8>)
 800604a:	6818      	ldr	r0, [r3, #0]
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	200000a4 	.word	0x200000a4

08006054 <__libc_init_array>:
 8006054:	b570      	push	{r4, r5, r6, lr}
 8006056:	4d0d      	ldr	r5, [pc, #52]	@ (800608c <__libc_init_array+0x38>)
 8006058:	4c0d      	ldr	r4, [pc, #52]	@ (8006090 <__libc_init_array+0x3c>)
 800605a:	1b64      	subs	r4, r4, r5
 800605c:	10a4      	asrs	r4, r4, #2
 800605e:	2600      	movs	r6, #0
 8006060:	42a6      	cmp	r6, r4
 8006062:	d109      	bne.n	8006078 <__libc_init_array+0x24>
 8006064:	4d0b      	ldr	r5, [pc, #44]	@ (8006094 <__libc_init_array+0x40>)
 8006066:	4c0c      	ldr	r4, [pc, #48]	@ (8006098 <__libc_init_array+0x44>)
 8006068:	f000 fc64 	bl	8006934 <_init>
 800606c:	1b64      	subs	r4, r4, r5
 800606e:	10a4      	asrs	r4, r4, #2
 8006070:	2600      	movs	r6, #0
 8006072:	42a6      	cmp	r6, r4
 8006074:	d105      	bne.n	8006082 <__libc_init_array+0x2e>
 8006076:	bd70      	pop	{r4, r5, r6, pc}
 8006078:	f855 3b04 	ldr.w	r3, [r5], #4
 800607c:	4798      	blx	r3
 800607e:	3601      	adds	r6, #1
 8006080:	e7ee      	b.n	8006060 <__libc_init_array+0xc>
 8006082:	f855 3b04 	ldr.w	r3, [r5], #4
 8006086:	4798      	blx	r3
 8006088:	3601      	adds	r6, #1
 800608a:	e7f2      	b.n	8006072 <__libc_init_array+0x1e>
 800608c:	08006aac 	.word	0x08006aac
 8006090:	08006aac 	.word	0x08006aac
 8006094:	08006aac 	.word	0x08006aac
 8006098:	08006ab0 	.word	0x08006ab0

0800609c <__retarget_lock_acquire_recursive>:
 800609c:	4770      	bx	lr

0800609e <__retarget_lock_release_recursive>:
 800609e:	4770      	bx	lr

080060a0 <memcpy>:
 80060a0:	440a      	add	r2, r1
 80060a2:	4291      	cmp	r1, r2
 80060a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80060a8:	d100      	bne.n	80060ac <memcpy+0xc>
 80060aa:	4770      	bx	lr
 80060ac:	b510      	push	{r4, lr}
 80060ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060b6:	4291      	cmp	r1, r2
 80060b8:	d1f9      	bne.n	80060ae <memcpy+0xe>
 80060ba:	bd10      	pop	{r4, pc}

080060bc <_free_r>:
 80060bc:	b538      	push	{r3, r4, r5, lr}
 80060be:	4605      	mov	r5, r0
 80060c0:	2900      	cmp	r1, #0
 80060c2:	d041      	beq.n	8006148 <_free_r+0x8c>
 80060c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060c8:	1f0c      	subs	r4, r1, #4
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	bfb8      	it	lt
 80060ce:	18e4      	addlt	r4, r4, r3
 80060d0:	f000 f8e0 	bl	8006294 <__malloc_lock>
 80060d4:	4a1d      	ldr	r2, [pc, #116]	@ (800614c <_free_r+0x90>)
 80060d6:	6813      	ldr	r3, [r2, #0]
 80060d8:	b933      	cbnz	r3, 80060e8 <_free_r+0x2c>
 80060da:	6063      	str	r3, [r4, #4]
 80060dc:	6014      	str	r4, [r2, #0]
 80060de:	4628      	mov	r0, r5
 80060e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060e4:	f000 b8dc 	b.w	80062a0 <__malloc_unlock>
 80060e8:	42a3      	cmp	r3, r4
 80060ea:	d908      	bls.n	80060fe <_free_r+0x42>
 80060ec:	6820      	ldr	r0, [r4, #0]
 80060ee:	1821      	adds	r1, r4, r0
 80060f0:	428b      	cmp	r3, r1
 80060f2:	bf01      	itttt	eq
 80060f4:	6819      	ldreq	r1, [r3, #0]
 80060f6:	685b      	ldreq	r3, [r3, #4]
 80060f8:	1809      	addeq	r1, r1, r0
 80060fa:	6021      	streq	r1, [r4, #0]
 80060fc:	e7ed      	b.n	80060da <_free_r+0x1e>
 80060fe:	461a      	mov	r2, r3
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	b10b      	cbz	r3, 8006108 <_free_r+0x4c>
 8006104:	42a3      	cmp	r3, r4
 8006106:	d9fa      	bls.n	80060fe <_free_r+0x42>
 8006108:	6811      	ldr	r1, [r2, #0]
 800610a:	1850      	adds	r0, r2, r1
 800610c:	42a0      	cmp	r0, r4
 800610e:	d10b      	bne.n	8006128 <_free_r+0x6c>
 8006110:	6820      	ldr	r0, [r4, #0]
 8006112:	4401      	add	r1, r0
 8006114:	1850      	adds	r0, r2, r1
 8006116:	4283      	cmp	r3, r0
 8006118:	6011      	str	r1, [r2, #0]
 800611a:	d1e0      	bne.n	80060de <_free_r+0x22>
 800611c:	6818      	ldr	r0, [r3, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	6053      	str	r3, [r2, #4]
 8006122:	4408      	add	r0, r1
 8006124:	6010      	str	r0, [r2, #0]
 8006126:	e7da      	b.n	80060de <_free_r+0x22>
 8006128:	d902      	bls.n	8006130 <_free_r+0x74>
 800612a:	230c      	movs	r3, #12
 800612c:	602b      	str	r3, [r5, #0]
 800612e:	e7d6      	b.n	80060de <_free_r+0x22>
 8006130:	6820      	ldr	r0, [r4, #0]
 8006132:	1821      	adds	r1, r4, r0
 8006134:	428b      	cmp	r3, r1
 8006136:	bf04      	itt	eq
 8006138:	6819      	ldreq	r1, [r3, #0]
 800613a:	685b      	ldreq	r3, [r3, #4]
 800613c:	6063      	str	r3, [r4, #4]
 800613e:	bf04      	itt	eq
 8006140:	1809      	addeq	r1, r1, r0
 8006142:	6021      	streq	r1, [r4, #0]
 8006144:	6054      	str	r4, [r2, #4]
 8006146:	e7ca      	b.n	80060de <_free_r+0x22>
 8006148:	bd38      	pop	{r3, r4, r5, pc}
 800614a:	bf00      	nop
 800614c:	200043ac 	.word	0x200043ac

08006150 <sbrk_aligned>:
 8006150:	b570      	push	{r4, r5, r6, lr}
 8006152:	4e0f      	ldr	r6, [pc, #60]	@ (8006190 <sbrk_aligned+0x40>)
 8006154:	460c      	mov	r4, r1
 8006156:	6831      	ldr	r1, [r6, #0]
 8006158:	4605      	mov	r5, r0
 800615a:	b911      	cbnz	r1, 8006162 <sbrk_aligned+0x12>
 800615c:	f000 fba4 	bl	80068a8 <_sbrk_r>
 8006160:	6030      	str	r0, [r6, #0]
 8006162:	4621      	mov	r1, r4
 8006164:	4628      	mov	r0, r5
 8006166:	f000 fb9f 	bl	80068a8 <_sbrk_r>
 800616a:	1c43      	adds	r3, r0, #1
 800616c:	d103      	bne.n	8006176 <sbrk_aligned+0x26>
 800616e:	f04f 34ff 	mov.w	r4, #4294967295
 8006172:	4620      	mov	r0, r4
 8006174:	bd70      	pop	{r4, r5, r6, pc}
 8006176:	1cc4      	adds	r4, r0, #3
 8006178:	f024 0403 	bic.w	r4, r4, #3
 800617c:	42a0      	cmp	r0, r4
 800617e:	d0f8      	beq.n	8006172 <sbrk_aligned+0x22>
 8006180:	1a21      	subs	r1, r4, r0
 8006182:	4628      	mov	r0, r5
 8006184:	f000 fb90 	bl	80068a8 <_sbrk_r>
 8006188:	3001      	adds	r0, #1
 800618a:	d1f2      	bne.n	8006172 <sbrk_aligned+0x22>
 800618c:	e7ef      	b.n	800616e <sbrk_aligned+0x1e>
 800618e:	bf00      	nop
 8006190:	200043a8 	.word	0x200043a8

08006194 <_malloc_r>:
 8006194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006198:	1ccd      	adds	r5, r1, #3
 800619a:	f025 0503 	bic.w	r5, r5, #3
 800619e:	3508      	adds	r5, #8
 80061a0:	2d0c      	cmp	r5, #12
 80061a2:	bf38      	it	cc
 80061a4:	250c      	movcc	r5, #12
 80061a6:	2d00      	cmp	r5, #0
 80061a8:	4606      	mov	r6, r0
 80061aa:	db01      	blt.n	80061b0 <_malloc_r+0x1c>
 80061ac:	42a9      	cmp	r1, r5
 80061ae:	d904      	bls.n	80061ba <_malloc_r+0x26>
 80061b0:	230c      	movs	r3, #12
 80061b2:	6033      	str	r3, [r6, #0]
 80061b4:	2000      	movs	r0, #0
 80061b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006290 <_malloc_r+0xfc>
 80061be:	f000 f869 	bl	8006294 <__malloc_lock>
 80061c2:	f8d8 3000 	ldr.w	r3, [r8]
 80061c6:	461c      	mov	r4, r3
 80061c8:	bb44      	cbnz	r4, 800621c <_malloc_r+0x88>
 80061ca:	4629      	mov	r1, r5
 80061cc:	4630      	mov	r0, r6
 80061ce:	f7ff ffbf 	bl	8006150 <sbrk_aligned>
 80061d2:	1c43      	adds	r3, r0, #1
 80061d4:	4604      	mov	r4, r0
 80061d6:	d158      	bne.n	800628a <_malloc_r+0xf6>
 80061d8:	f8d8 4000 	ldr.w	r4, [r8]
 80061dc:	4627      	mov	r7, r4
 80061de:	2f00      	cmp	r7, #0
 80061e0:	d143      	bne.n	800626a <_malloc_r+0xd6>
 80061e2:	2c00      	cmp	r4, #0
 80061e4:	d04b      	beq.n	800627e <_malloc_r+0xea>
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	4639      	mov	r1, r7
 80061ea:	4630      	mov	r0, r6
 80061ec:	eb04 0903 	add.w	r9, r4, r3
 80061f0:	f000 fb5a 	bl	80068a8 <_sbrk_r>
 80061f4:	4581      	cmp	r9, r0
 80061f6:	d142      	bne.n	800627e <_malloc_r+0xea>
 80061f8:	6821      	ldr	r1, [r4, #0]
 80061fa:	1a6d      	subs	r5, r5, r1
 80061fc:	4629      	mov	r1, r5
 80061fe:	4630      	mov	r0, r6
 8006200:	f7ff ffa6 	bl	8006150 <sbrk_aligned>
 8006204:	3001      	adds	r0, #1
 8006206:	d03a      	beq.n	800627e <_malloc_r+0xea>
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	442b      	add	r3, r5
 800620c:	6023      	str	r3, [r4, #0]
 800620e:	f8d8 3000 	ldr.w	r3, [r8]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	bb62      	cbnz	r2, 8006270 <_malloc_r+0xdc>
 8006216:	f8c8 7000 	str.w	r7, [r8]
 800621a:	e00f      	b.n	800623c <_malloc_r+0xa8>
 800621c:	6822      	ldr	r2, [r4, #0]
 800621e:	1b52      	subs	r2, r2, r5
 8006220:	d420      	bmi.n	8006264 <_malloc_r+0xd0>
 8006222:	2a0b      	cmp	r2, #11
 8006224:	d917      	bls.n	8006256 <_malloc_r+0xc2>
 8006226:	1961      	adds	r1, r4, r5
 8006228:	42a3      	cmp	r3, r4
 800622a:	6025      	str	r5, [r4, #0]
 800622c:	bf18      	it	ne
 800622e:	6059      	strne	r1, [r3, #4]
 8006230:	6863      	ldr	r3, [r4, #4]
 8006232:	bf08      	it	eq
 8006234:	f8c8 1000 	streq.w	r1, [r8]
 8006238:	5162      	str	r2, [r4, r5]
 800623a:	604b      	str	r3, [r1, #4]
 800623c:	4630      	mov	r0, r6
 800623e:	f000 f82f 	bl	80062a0 <__malloc_unlock>
 8006242:	f104 000b 	add.w	r0, r4, #11
 8006246:	1d23      	adds	r3, r4, #4
 8006248:	f020 0007 	bic.w	r0, r0, #7
 800624c:	1ac2      	subs	r2, r0, r3
 800624e:	bf1c      	itt	ne
 8006250:	1a1b      	subne	r3, r3, r0
 8006252:	50a3      	strne	r3, [r4, r2]
 8006254:	e7af      	b.n	80061b6 <_malloc_r+0x22>
 8006256:	6862      	ldr	r2, [r4, #4]
 8006258:	42a3      	cmp	r3, r4
 800625a:	bf0c      	ite	eq
 800625c:	f8c8 2000 	streq.w	r2, [r8]
 8006260:	605a      	strne	r2, [r3, #4]
 8006262:	e7eb      	b.n	800623c <_malloc_r+0xa8>
 8006264:	4623      	mov	r3, r4
 8006266:	6864      	ldr	r4, [r4, #4]
 8006268:	e7ae      	b.n	80061c8 <_malloc_r+0x34>
 800626a:	463c      	mov	r4, r7
 800626c:	687f      	ldr	r7, [r7, #4]
 800626e:	e7b6      	b.n	80061de <_malloc_r+0x4a>
 8006270:	461a      	mov	r2, r3
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	42a3      	cmp	r3, r4
 8006276:	d1fb      	bne.n	8006270 <_malloc_r+0xdc>
 8006278:	2300      	movs	r3, #0
 800627a:	6053      	str	r3, [r2, #4]
 800627c:	e7de      	b.n	800623c <_malloc_r+0xa8>
 800627e:	230c      	movs	r3, #12
 8006280:	6033      	str	r3, [r6, #0]
 8006282:	4630      	mov	r0, r6
 8006284:	f000 f80c 	bl	80062a0 <__malloc_unlock>
 8006288:	e794      	b.n	80061b4 <_malloc_r+0x20>
 800628a:	6005      	str	r5, [r0, #0]
 800628c:	e7d6      	b.n	800623c <_malloc_r+0xa8>
 800628e:	bf00      	nop
 8006290:	200043ac 	.word	0x200043ac

08006294 <__malloc_lock>:
 8006294:	4801      	ldr	r0, [pc, #4]	@ (800629c <__malloc_lock+0x8>)
 8006296:	f7ff bf01 	b.w	800609c <__retarget_lock_acquire_recursive>
 800629a:	bf00      	nop
 800629c:	200043a4 	.word	0x200043a4

080062a0 <__malloc_unlock>:
 80062a0:	4801      	ldr	r0, [pc, #4]	@ (80062a8 <__malloc_unlock+0x8>)
 80062a2:	f7ff befc 	b.w	800609e <__retarget_lock_release_recursive>
 80062a6:	bf00      	nop
 80062a8:	200043a4 	.word	0x200043a4

080062ac <__ssputs_r>:
 80062ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062b0:	688e      	ldr	r6, [r1, #8]
 80062b2:	461f      	mov	r7, r3
 80062b4:	42be      	cmp	r6, r7
 80062b6:	680b      	ldr	r3, [r1, #0]
 80062b8:	4682      	mov	sl, r0
 80062ba:	460c      	mov	r4, r1
 80062bc:	4690      	mov	r8, r2
 80062be:	d82d      	bhi.n	800631c <__ssputs_r+0x70>
 80062c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80062c8:	d026      	beq.n	8006318 <__ssputs_r+0x6c>
 80062ca:	6965      	ldr	r5, [r4, #20]
 80062cc:	6909      	ldr	r1, [r1, #16]
 80062ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062d2:	eba3 0901 	sub.w	r9, r3, r1
 80062d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062da:	1c7b      	adds	r3, r7, #1
 80062dc:	444b      	add	r3, r9
 80062de:	106d      	asrs	r5, r5, #1
 80062e0:	429d      	cmp	r5, r3
 80062e2:	bf38      	it	cc
 80062e4:	461d      	movcc	r5, r3
 80062e6:	0553      	lsls	r3, r2, #21
 80062e8:	d527      	bpl.n	800633a <__ssputs_r+0x8e>
 80062ea:	4629      	mov	r1, r5
 80062ec:	f7ff ff52 	bl	8006194 <_malloc_r>
 80062f0:	4606      	mov	r6, r0
 80062f2:	b360      	cbz	r0, 800634e <__ssputs_r+0xa2>
 80062f4:	6921      	ldr	r1, [r4, #16]
 80062f6:	464a      	mov	r2, r9
 80062f8:	f7ff fed2 	bl	80060a0 <memcpy>
 80062fc:	89a3      	ldrh	r3, [r4, #12]
 80062fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006306:	81a3      	strh	r3, [r4, #12]
 8006308:	6126      	str	r6, [r4, #16]
 800630a:	6165      	str	r5, [r4, #20]
 800630c:	444e      	add	r6, r9
 800630e:	eba5 0509 	sub.w	r5, r5, r9
 8006312:	6026      	str	r6, [r4, #0]
 8006314:	60a5      	str	r5, [r4, #8]
 8006316:	463e      	mov	r6, r7
 8006318:	42be      	cmp	r6, r7
 800631a:	d900      	bls.n	800631e <__ssputs_r+0x72>
 800631c:	463e      	mov	r6, r7
 800631e:	6820      	ldr	r0, [r4, #0]
 8006320:	4632      	mov	r2, r6
 8006322:	4641      	mov	r1, r8
 8006324:	f000 faa6 	bl	8006874 <memmove>
 8006328:	68a3      	ldr	r3, [r4, #8]
 800632a:	1b9b      	subs	r3, r3, r6
 800632c:	60a3      	str	r3, [r4, #8]
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	4433      	add	r3, r6
 8006332:	6023      	str	r3, [r4, #0]
 8006334:	2000      	movs	r0, #0
 8006336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800633a:	462a      	mov	r2, r5
 800633c:	f000 fac4 	bl	80068c8 <_realloc_r>
 8006340:	4606      	mov	r6, r0
 8006342:	2800      	cmp	r0, #0
 8006344:	d1e0      	bne.n	8006308 <__ssputs_r+0x5c>
 8006346:	6921      	ldr	r1, [r4, #16]
 8006348:	4650      	mov	r0, sl
 800634a:	f7ff feb7 	bl	80060bc <_free_r>
 800634e:	230c      	movs	r3, #12
 8006350:	f8ca 3000 	str.w	r3, [sl]
 8006354:	89a3      	ldrh	r3, [r4, #12]
 8006356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800635a:	81a3      	strh	r3, [r4, #12]
 800635c:	f04f 30ff 	mov.w	r0, #4294967295
 8006360:	e7e9      	b.n	8006336 <__ssputs_r+0x8a>
	...

08006364 <_svfiprintf_r>:
 8006364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006368:	4698      	mov	r8, r3
 800636a:	898b      	ldrh	r3, [r1, #12]
 800636c:	061b      	lsls	r3, r3, #24
 800636e:	b09d      	sub	sp, #116	@ 0x74
 8006370:	4607      	mov	r7, r0
 8006372:	460d      	mov	r5, r1
 8006374:	4614      	mov	r4, r2
 8006376:	d510      	bpl.n	800639a <_svfiprintf_r+0x36>
 8006378:	690b      	ldr	r3, [r1, #16]
 800637a:	b973      	cbnz	r3, 800639a <_svfiprintf_r+0x36>
 800637c:	2140      	movs	r1, #64	@ 0x40
 800637e:	f7ff ff09 	bl	8006194 <_malloc_r>
 8006382:	6028      	str	r0, [r5, #0]
 8006384:	6128      	str	r0, [r5, #16]
 8006386:	b930      	cbnz	r0, 8006396 <_svfiprintf_r+0x32>
 8006388:	230c      	movs	r3, #12
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	f04f 30ff 	mov.w	r0, #4294967295
 8006390:	b01d      	add	sp, #116	@ 0x74
 8006392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006396:	2340      	movs	r3, #64	@ 0x40
 8006398:	616b      	str	r3, [r5, #20]
 800639a:	2300      	movs	r3, #0
 800639c:	9309      	str	r3, [sp, #36]	@ 0x24
 800639e:	2320      	movs	r3, #32
 80063a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80063a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80063a8:	2330      	movs	r3, #48	@ 0x30
 80063aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006548 <_svfiprintf_r+0x1e4>
 80063ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80063b2:	f04f 0901 	mov.w	r9, #1
 80063b6:	4623      	mov	r3, r4
 80063b8:	469a      	mov	sl, r3
 80063ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063be:	b10a      	cbz	r2, 80063c4 <_svfiprintf_r+0x60>
 80063c0:	2a25      	cmp	r2, #37	@ 0x25
 80063c2:	d1f9      	bne.n	80063b8 <_svfiprintf_r+0x54>
 80063c4:	ebba 0b04 	subs.w	fp, sl, r4
 80063c8:	d00b      	beq.n	80063e2 <_svfiprintf_r+0x7e>
 80063ca:	465b      	mov	r3, fp
 80063cc:	4622      	mov	r2, r4
 80063ce:	4629      	mov	r1, r5
 80063d0:	4638      	mov	r0, r7
 80063d2:	f7ff ff6b 	bl	80062ac <__ssputs_r>
 80063d6:	3001      	adds	r0, #1
 80063d8:	f000 80a7 	beq.w	800652a <_svfiprintf_r+0x1c6>
 80063dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063de:	445a      	add	r2, fp
 80063e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80063e2:	f89a 3000 	ldrb.w	r3, [sl]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 809f 	beq.w	800652a <_svfiprintf_r+0x1c6>
 80063ec:	2300      	movs	r3, #0
 80063ee:	f04f 32ff 	mov.w	r2, #4294967295
 80063f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063f6:	f10a 0a01 	add.w	sl, sl, #1
 80063fa:	9304      	str	r3, [sp, #16]
 80063fc:	9307      	str	r3, [sp, #28]
 80063fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006402:	931a      	str	r3, [sp, #104]	@ 0x68
 8006404:	4654      	mov	r4, sl
 8006406:	2205      	movs	r2, #5
 8006408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800640c:	484e      	ldr	r0, [pc, #312]	@ (8006548 <_svfiprintf_r+0x1e4>)
 800640e:	f7f9 feef 	bl	80001f0 <memchr>
 8006412:	9a04      	ldr	r2, [sp, #16]
 8006414:	b9d8      	cbnz	r0, 800644e <_svfiprintf_r+0xea>
 8006416:	06d0      	lsls	r0, r2, #27
 8006418:	bf44      	itt	mi
 800641a:	2320      	movmi	r3, #32
 800641c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006420:	0711      	lsls	r1, r2, #28
 8006422:	bf44      	itt	mi
 8006424:	232b      	movmi	r3, #43	@ 0x2b
 8006426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800642a:	f89a 3000 	ldrb.w	r3, [sl]
 800642e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006430:	d015      	beq.n	800645e <_svfiprintf_r+0xfa>
 8006432:	9a07      	ldr	r2, [sp, #28]
 8006434:	4654      	mov	r4, sl
 8006436:	2000      	movs	r0, #0
 8006438:	f04f 0c0a 	mov.w	ip, #10
 800643c:	4621      	mov	r1, r4
 800643e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006442:	3b30      	subs	r3, #48	@ 0x30
 8006444:	2b09      	cmp	r3, #9
 8006446:	d94b      	bls.n	80064e0 <_svfiprintf_r+0x17c>
 8006448:	b1b0      	cbz	r0, 8006478 <_svfiprintf_r+0x114>
 800644a:	9207      	str	r2, [sp, #28]
 800644c:	e014      	b.n	8006478 <_svfiprintf_r+0x114>
 800644e:	eba0 0308 	sub.w	r3, r0, r8
 8006452:	fa09 f303 	lsl.w	r3, r9, r3
 8006456:	4313      	orrs	r3, r2
 8006458:	9304      	str	r3, [sp, #16]
 800645a:	46a2      	mov	sl, r4
 800645c:	e7d2      	b.n	8006404 <_svfiprintf_r+0xa0>
 800645e:	9b03      	ldr	r3, [sp, #12]
 8006460:	1d19      	adds	r1, r3, #4
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	9103      	str	r1, [sp, #12]
 8006466:	2b00      	cmp	r3, #0
 8006468:	bfbb      	ittet	lt
 800646a:	425b      	neglt	r3, r3
 800646c:	f042 0202 	orrlt.w	r2, r2, #2
 8006470:	9307      	strge	r3, [sp, #28]
 8006472:	9307      	strlt	r3, [sp, #28]
 8006474:	bfb8      	it	lt
 8006476:	9204      	strlt	r2, [sp, #16]
 8006478:	7823      	ldrb	r3, [r4, #0]
 800647a:	2b2e      	cmp	r3, #46	@ 0x2e
 800647c:	d10a      	bne.n	8006494 <_svfiprintf_r+0x130>
 800647e:	7863      	ldrb	r3, [r4, #1]
 8006480:	2b2a      	cmp	r3, #42	@ 0x2a
 8006482:	d132      	bne.n	80064ea <_svfiprintf_r+0x186>
 8006484:	9b03      	ldr	r3, [sp, #12]
 8006486:	1d1a      	adds	r2, r3, #4
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	9203      	str	r2, [sp, #12]
 800648c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006490:	3402      	adds	r4, #2
 8006492:	9305      	str	r3, [sp, #20]
 8006494:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006558 <_svfiprintf_r+0x1f4>
 8006498:	7821      	ldrb	r1, [r4, #0]
 800649a:	2203      	movs	r2, #3
 800649c:	4650      	mov	r0, sl
 800649e:	f7f9 fea7 	bl	80001f0 <memchr>
 80064a2:	b138      	cbz	r0, 80064b4 <_svfiprintf_r+0x150>
 80064a4:	9b04      	ldr	r3, [sp, #16]
 80064a6:	eba0 000a 	sub.w	r0, r0, sl
 80064aa:	2240      	movs	r2, #64	@ 0x40
 80064ac:	4082      	lsls	r2, r0
 80064ae:	4313      	orrs	r3, r2
 80064b0:	3401      	adds	r4, #1
 80064b2:	9304      	str	r3, [sp, #16]
 80064b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064b8:	4824      	ldr	r0, [pc, #144]	@ (800654c <_svfiprintf_r+0x1e8>)
 80064ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80064be:	2206      	movs	r2, #6
 80064c0:	f7f9 fe96 	bl	80001f0 <memchr>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	d036      	beq.n	8006536 <_svfiprintf_r+0x1d2>
 80064c8:	4b21      	ldr	r3, [pc, #132]	@ (8006550 <_svfiprintf_r+0x1ec>)
 80064ca:	bb1b      	cbnz	r3, 8006514 <_svfiprintf_r+0x1b0>
 80064cc:	9b03      	ldr	r3, [sp, #12]
 80064ce:	3307      	adds	r3, #7
 80064d0:	f023 0307 	bic.w	r3, r3, #7
 80064d4:	3308      	adds	r3, #8
 80064d6:	9303      	str	r3, [sp, #12]
 80064d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064da:	4433      	add	r3, r6
 80064dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80064de:	e76a      	b.n	80063b6 <_svfiprintf_r+0x52>
 80064e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80064e4:	460c      	mov	r4, r1
 80064e6:	2001      	movs	r0, #1
 80064e8:	e7a8      	b.n	800643c <_svfiprintf_r+0xd8>
 80064ea:	2300      	movs	r3, #0
 80064ec:	3401      	adds	r4, #1
 80064ee:	9305      	str	r3, [sp, #20]
 80064f0:	4619      	mov	r1, r3
 80064f2:	f04f 0c0a 	mov.w	ip, #10
 80064f6:	4620      	mov	r0, r4
 80064f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064fc:	3a30      	subs	r2, #48	@ 0x30
 80064fe:	2a09      	cmp	r2, #9
 8006500:	d903      	bls.n	800650a <_svfiprintf_r+0x1a6>
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0c6      	beq.n	8006494 <_svfiprintf_r+0x130>
 8006506:	9105      	str	r1, [sp, #20]
 8006508:	e7c4      	b.n	8006494 <_svfiprintf_r+0x130>
 800650a:	fb0c 2101 	mla	r1, ip, r1, r2
 800650e:	4604      	mov	r4, r0
 8006510:	2301      	movs	r3, #1
 8006512:	e7f0      	b.n	80064f6 <_svfiprintf_r+0x192>
 8006514:	ab03      	add	r3, sp, #12
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	462a      	mov	r2, r5
 800651a:	4b0e      	ldr	r3, [pc, #56]	@ (8006554 <_svfiprintf_r+0x1f0>)
 800651c:	a904      	add	r1, sp, #16
 800651e:	4638      	mov	r0, r7
 8006520:	f3af 8000 	nop.w
 8006524:	1c42      	adds	r2, r0, #1
 8006526:	4606      	mov	r6, r0
 8006528:	d1d6      	bne.n	80064d8 <_svfiprintf_r+0x174>
 800652a:	89ab      	ldrh	r3, [r5, #12]
 800652c:	065b      	lsls	r3, r3, #25
 800652e:	f53f af2d 	bmi.w	800638c <_svfiprintf_r+0x28>
 8006532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006534:	e72c      	b.n	8006390 <_svfiprintf_r+0x2c>
 8006536:	ab03      	add	r3, sp, #12
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	462a      	mov	r2, r5
 800653c:	4b05      	ldr	r3, [pc, #20]	@ (8006554 <_svfiprintf_r+0x1f0>)
 800653e:	a904      	add	r1, sp, #16
 8006540:	4638      	mov	r0, r7
 8006542:	f000 f879 	bl	8006638 <_printf_i>
 8006546:	e7ed      	b.n	8006524 <_svfiprintf_r+0x1c0>
 8006548:	08006a70 	.word	0x08006a70
 800654c:	08006a7a 	.word	0x08006a7a
 8006550:	00000000 	.word	0x00000000
 8006554:	080062ad 	.word	0x080062ad
 8006558:	08006a76 	.word	0x08006a76

0800655c <_printf_common>:
 800655c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006560:	4616      	mov	r6, r2
 8006562:	4698      	mov	r8, r3
 8006564:	688a      	ldr	r2, [r1, #8]
 8006566:	690b      	ldr	r3, [r1, #16]
 8006568:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800656c:	4293      	cmp	r3, r2
 800656e:	bfb8      	it	lt
 8006570:	4613      	movlt	r3, r2
 8006572:	6033      	str	r3, [r6, #0]
 8006574:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006578:	4607      	mov	r7, r0
 800657a:	460c      	mov	r4, r1
 800657c:	b10a      	cbz	r2, 8006582 <_printf_common+0x26>
 800657e:	3301      	adds	r3, #1
 8006580:	6033      	str	r3, [r6, #0]
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	0699      	lsls	r1, r3, #26
 8006586:	bf42      	ittt	mi
 8006588:	6833      	ldrmi	r3, [r6, #0]
 800658a:	3302      	addmi	r3, #2
 800658c:	6033      	strmi	r3, [r6, #0]
 800658e:	6825      	ldr	r5, [r4, #0]
 8006590:	f015 0506 	ands.w	r5, r5, #6
 8006594:	d106      	bne.n	80065a4 <_printf_common+0x48>
 8006596:	f104 0a19 	add.w	sl, r4, #25
 800659a:	68e3      	ldr	r3, [r4, #12]
 800659c:	6832      	ldr	r2, [r6, #0]
 800659e:	1a9b      	subs	r3, r3, r2
 80065a0:	42ab      	cmp	r3, r5
 80065a2:	dc26      	bgt.n	80065f2 <_printf_common+0x96>
 80065a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80065a8:	6822      	ldr	r2, [r4, #0]
 80065aa:	3b00      	subs	r3, #0
 80065ac:	bf18      	it	ne
 80065ae:	2301      	movne	r3, #1
 80065b0:	0692      	lsls	r2, r2, #26
 80065b2:	d42b      	bmi.n	800660c <_printf_common+0xb0>
 80065b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80065b8:	4641      	mov	r1, r8
 80065ba:	4638      	mov	r0, r7
 80065bc:	47c8      	blx	r9
 80065be:	3001      	adds	r0, #1
 80065c0:	d01e      	beq.n	8006600 <_printf_common+0xa4>
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	6922      	ldr	r2, [r4, #16]
 80065c6:	f003 0306 	and.w	r3, r3, #6
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	bf02      	ittt	eq
 80065ce:	68e5      	ldreq	r5, [r4, #12]
 80065d0:	6833      	ldreq	r3, [r6, #0]
 80065d2:	1aed      	subeq	r5, r5, r3
 80065d4:	68a3      	ldr	r3, [r4, #8]
 80065d6:	bf0c      	ite	eq
 80065d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065dc:	2500      	movne	r5, #0
 80065de:	4293      	cmp	r3, r2
 80065e0:	bfc4      	itt	gt
 80065e2:	1a9b      	subgt	r3, r3, r2
 80065e4:	18ed      	addgt	r5, r5, r3
 80065e6:	2600      	movs	r6, #0
 80065e8:	341a      	adds	r4, #26
 80065ea:	42b5      	cmp	r5, r6
 80065ec:	d11a      	bne.n	8006624 <_printf_common+0xc8>
 80065ee:	2000      	movs	r0, #0
 80065f0:	e008      	b.n	8006604 <_printf_common+0xa8>
 80065f2:	2301      	movs	r3, #1
 80065f4:	4652      	mov	r2, sl
 80065f6:	4641      	mov	r1, r8
 80065f8:	4638      	mov	r0, r7
 80065fa:	47c8      	blx	r9
 80065fc:	3001      	adds	r0, #1
 80065fe:	d103      	bne.n	8006608 <_printf_common+0xac>
 8006600:	f04f 30ff 	mov.w	r0, #4294967295
 8006604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006608:	3501      	adds	r5, #1
 800660a:	e7c6      	b.n	800659a <_printf_common+0x3e>
 800660c:	18e1      	adds	r1, r4, r3
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	2030      	movs	r0, #48	@ 0x30
 8006612:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006616:	4422      	add	r2, r4
 8006618:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800661c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006620:	3302      	adds	r3, #2
 8006622:	e7c7      	b.n	80065b4 <_printf_common+0x58>
 8006624:	2301      	movs	r3, #1
 8006626:	4622      	mov	r2, r4
 8006628:	4641      	mov	r1, r8
 800662a:	4638      	mov	r0, r7
 800662c:	47c8      	blx	r9
 800662e:	3001      	adds	r0, #1
 8006630:	d0e6      	beq.n	8006600 <_printf_common+0xa4>
 8006632:	3601      	adds	r6, #1
 8006634:	e7d9      	b.n	80065ea <_printf_common+0x8e>
	...

08006638 <_printf_i>:
 8006638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800663c:	7e0f      	ldrb	r7, [r1, #24]
 800663e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006640:	2f78      	cmp	r7, #120	@ 0x78
 8006642:	4691      	mov	r9, r2
 8006644:	4680      	mov	r8, r0
 8006646:	460c      	mov	r4, r1
 8006648:	469a      	mov	sl, r3
 800664a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800664e:	d807      	bhi.n	8006660 <_printf_i+0x28>
 8006650:	2f62      	cmp	r7, #98	@ 0x62
 8006652:	d80a      	bhi.n	800666a <_printf_i+0x32>
 8006654:	2f00      	cmp	r7, #0
 8006656:	f000 80d1 	beq.w	80067fc <_printf_i+0x1c4>
 800665a:	2f58      	cmp	r7, #88	@ 0x58
 800665c:	f000 80b8 	beq.w	80067d0 <_printf_i+0x198>
 8006660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006664:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006668:	e03a      	b.n	80066e0 <_printf_i+0xa8>
 800666a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800666e:	2b15      	cmp	r3, #21
 8006670:	d8f6      	bhi.n	8006660 <_printf_i+0x28>
 8006672:	a101      	add	r1, pc, #4	@ (adr r1, 8006678 <_printf_i+0x40>)
 8006674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006678:	080066d1 	.word	0x080066d1
 800667c:	080066e5 	.word	0x080066e5
 8006680:	08006661 	.word	0x08006661
 8006684:	08006661 	.word	0x08006661
 8006688:	08006661 	.word	0x08006661
 800668c:	08006661 	.word	0x08006661
 8006690:	080066e5 	.word	0x080066e5
 8006694:	08006661 	.word	0x08006661
 8006698:	08006661 	.word	0x08006661
 800669c:	08006661 	.word	0x08006661
 80066a0:	08006661 	.word	0x08006661
 80066a4:	080067e3 	.word	0x080067e3
 80066a8:	0800670f 	.word	0x0800670f
 80066ac:	0800679d 	.word	0x0800679d
 80066b0:	08006661 	.word	0x08006661
 80066b4:	08006661 	.word	0x08006661
 80066b8:	08006805 	.word	0x08006805
 80066bc:	08006661 	.word	0x08006661
 80066c0:	0800670f 	.word	0x0800670f
 80066c4:	08006661 	.word	0x08006661
 80066c8:	08006661 	.word	0x08006661
 80066cc:	080067a5 	.word	0x080067a5
 80066d0:	6833      	ldr	r3, [r6, #0]
 80066d2:	1d1a      	adds	r2, r3, #4
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6032      	str	r2, [r6, #0]
 80066d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066e0:	2301      	movs	r3, #1
 80066e2:	e09c      	b.n	800681e <_printf_i+0x1e6>
 80066e4:	6833      	ldr	r3, [r6, #0]
 80066e6:	6820      	ldr	r0, [r4, #0]
 80066e8:	1d19      	adds	r1, r3, #4
 80066ea:	6031      	str	r1, [r6, #0]
 80066ec:	0606      	lsls	r6, r0, #24
 80066ee:	d501      	bpl.n	80066f4 <_printf_i+0xbc>
 80066f0:	681d      	ldr	r5, [r3, #0]
 80066f2:	e003      	b.n	80066fc <_printf_i+0xc4>
 80066f4:	0645      	lsls	r5, r0, #25
 80066f6:	d5fb      	bpl.n	80066f0 <_printf_i+0xb8>
 80066f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066fc:	2d00      	cmp	r5, #0
 80066fe:	da03      	bge.n	8006708 <_printf_i+0xd0>
 8006700:	232d      	movs	r3, #45	@ 0x2d
 8006702:	426d      	negs	r5, r5
 8006704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006708:	4858      	ldr	r0, [pc, #352]	@ (800686c <_printf_i+0x234>)
 800670a:	230a      	movs	r3, #10
 800670c:	e011      	b.n	8006732 <_printf_i+0xfa>
 800670e:	6821      	ldr	r1, [r4, #0]
 8006710:	6833      	ldr	r3, [r6, #0]
 8006712:	0608      	lsls	r0, r1, #24
 8006714:	f853 5b04 	ldr.w	r5, [r3], #4
 8006718:	d402      	bmi.n	8006720 <_printf_i+0xe8>
 800671a:	0649      	lsls	r1, r1, #25
 800671c:	bf48      	it	mi
 800671e:	b2ad      	uxthmi	r5, r5
 8006720:	2f6f      	cmp	r7, #111	@ 0x6f
 8006722:	4852      	ldr	r0, [pc, #328]	@ (800686c <_printf_i+0x234>)
 8006724:	6033      	str	r3, [r6, #0]
 8006726:	bf14      	ite	ne
 8006728:	230a      	movne	r3, #10
 800672a:	2308      	moveq	r3, #8
 800672c:	2100      	movs	r1, #0
 800672e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006732:	6866      	ldr	r6, [r4, #4]
 8006734:	60a6      	str	r6, [r4, #8]
 8006736:	2e00      	cmp	r6, #0
 8006738:	db05      	blt.n	8006746 <_printf_i+0x10e>
 800673a:	6821      	ldr	r1, [r4, #0]
 800673c:	432e      	orrs	r6, r5
 800673e:	f021 0104 	bic.w	r1, r1, #4
 8006742:	6021      	str	r1, [r4, #0]
 8006744:	d04b      	beq.n	80067de <_printf_i+0x1a6>
 8006746:	4616      	mov	r6, r2
 8006748:	fbb5 f1f3 	udiv	r1, r5, r3
 800674c:	fb03 5711 	mls	r7, r3, r1, r5
 8006750:	5dc7      	ldrb	r7, [r0, r7]
 8006752:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006756:	462f      	mov	r7, r5
 8006758:	42bb      	cmp	r3, r7
 800675a:	460d      	mov	r5, r1
 800675c:	d9f4      	bls.n	8006748 <_printf_i+0x110>
 800675e:	2b08      	cmp	r3, #8
 8006760:	d10b      	bne.n	800677a <_printf_i+0x142>
 8006762:	6823      	ldr	r3, [r4, #0]
 8006764:	07df      	lsls	r7, r3, #31
 8006766:	d508      	bpl.n	800677a <_printf_i+0x142>
 8006768:	6923      	ldr	r3, [r4, #16]
 800676a:	6861      	ldr	r1, [r4, #4]
 800676c:	4299      	cmp	r1, r3
 800676e:	bfde      	ittt	le
 8006770:	2330      	movle	r3, #48	@ 0x30
 8006772:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006776:	f106 36ff 	addle.w	r6, r6, #4294967295
 800677a:	1b92      	subs	r2, r2, r6
 800677c:	6122      	str	r2, [r4, #16]
 800677e:	f8cd a000 	str.w	sl, [sp]
 8006782:	464b      	mov	r3, r9
 8006784:	aa03      	add	r2, sp, #12
 8006786:	4621      	mov	r1, r4
 8006788:	4640      	mov	r0, r8
 800678a:	f7ff fee7 	bl	800655c <_printf_common>
 800678e:	3001      	adds	r0, #1
 8006790:	d14a      	bne.n	8006828 <_printf_i+0x1f0>
 8006792:	f04f 30ff 	mov.w	r0, #4294967295
 8006796:	b004      	add	sp, #16
 8006798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	f043 0320 	orr.w	r3, r3, #32
 80067a2:	6023      	str	r3, [r4, #0]
 80067a4:	4832      	ldr	r0, [pc, #200]	@ (8006870 <_printf_i+0x238>)
 80067a6:	2778      	movs	r7, #120	@ 0x78
 80067a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80067ac:	6823      	ldr	r3, [r4, #0]
 80067ae:	6831      	ldr	r1, [r6, #0]
 80067b0:	061f      	lsls	r7, r3, #24
 80067b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80067b6:	d402      	bmi.n	80067be <_printf_i+0x186>
 80067b8:	065f      	lsls	r7, r3, #25
 80067ba:	bf48      	it	mi
 80067bc:	b2ad      	uxthmi	r5, r5
 80067be:	6031      	str	r1, [r6, #0]
 80067c0:	07d9      	lsls	r1, r3, #31
 80067c2:	bf44      	itt	mi
 80067c4:	f043 0320 	orrmi.w	r3, r3, #32
 80067c8:	6023      	strmi	r3, [r4, #0]
 80067ca:	b11d      	cbz	r5, 80067d4 <_printf_i+0x19c>
 80067cc:	2310      	movs	r3, #16
 80067ce:	e7ad      	b.n	800672c <_printf_i+0xf4>
 80067d0:	4826      	ldr	r0, [pc, #152]	@ (800686c <_printf_i+0x234>)
 80067d2:	e7e9      	b.n	80067a8 <_printf_i+0x170>
 80067d4:	6823      	ldr	r3, [r4, #0]
 80067d6:	f023 0320 	bic.w	r3, r3, #32
 80067da:	6023      	str	r3, [r4, #0]
 80067dc:	e7f6      	b.n	80067cc <_printf_i+0x194>
 80067de:	4616      	mov	r6, r2
 80067e0:	e7bd      	b.n	800675e <_printf_i+0x126>
 80067e2:	6833      	ldr	r3, [r6, #0]
 80067e4:	6825      	ldr	r5, [r4, #0]
 80067e6:	6961      	ldr	r1, [r4, #20]
 80067e8:	1d18      	adds	r0, r3, #4
 80067ea:	6030      	str	r0, [r6, #0]
 80067ec:	062e      	lsls	r6, r5, #24
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	d501      	bpl.n	80067f6 <_printf_i+0x1be>
 80067f2:	6019      	str	r1, [r3, #0]
 80067f4:	e002      	b.n	80067fc <_printf_i+0x1c4>
 80067f6:	0668      	lsls	r0, r5, #25
 80067f8:	d5fb      	bpl.n	80067f2 <_printf_i+0x1ba>
 80067fa:	8019      	strh	r1, [r3, #0]
 80067fc:	2300      	movs	r3, #0
 80067fe:	6123      	str	r3, [r4, #16]
 8006800:	4616      	mov	r6, r2
 8006802:	e7bc      	b.n	800677e <_printf_i+0x146>
 8006804:	6833      	ldr	r3, [r6, #0]
 8006806:	1d1a      	adds	r2, r3, #4
 8006808:	6032      	str	r2, [r6, #0]
 800680a:	681e      	ldr	r6, [r3, #0]
 800680c:	6862      	ldr	r2, [r4, #4]
 800680e:	2100      	movs	r1, #0
 8006810:	4630      	mov	r0, r6
 8006812:	f7f9 fced 	bl	80001f0 <memchr>
 8006816:	b108      	cbz	r0, 800681c <_printf_i+0x1e4>
 8006818:	1b80      	subs	r0, r0, r6
 800681a:	6060      	str	r0, [r4, #4]
 800681c:	6863      	ldr	r3, [r4, #4]
 800681e:	6123      	str	r3, [r4, #16]
 8006820:	2300      	movs	r3, #0
 8006822:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006826:	e7aa      	b.n	800677e <_printf_i+0x146>
 8006828:	6923      	ldr	r3, [r4, #16]
 800682a:	4632      	mov	r2, r6
 800682c:	4649      	mov	r1, r9
 800682e:	4640      	mov	r0, r8
 8006830:	47d0      	blx	sl
 8006832:	3001      	adds	r0, #1
 8006834:	d0ad      	beq.n	8006792 <_printf_i+0x15a>
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	079b      	lsls	r3, r3, #30
 800683a:	d413      	bmi.n	8006864 <_printf_i+0x22c>
 800683c:	68e0      	ldr	r0, [r4, #12]
 800683e:	9b03      	ldr	r3, [sp, #12]
 8006840:	4298      	cmp	r0, r3
 8006842:	bfb8      	it	lt
 8006844:	4618      	movlt	r0, r3
 8006846:	e7a6      	b.n	8006796 <_printf_i+0x15e>
 8006848:	2301      	movs	r3, #1
 800684a:	4632      	mov	r2, r6
 800684c:	4649      	mov	r1, r9
 800684e:	4640      	mov	r0, r8
 8006850:	47d0      	blx	sl
 8006852:	3001      	adds	r0, #1
 8006854:	d09d      	beq.n	8006792 <_printf_i+0x15a>
 8006856:	3501      	adds	r5, #1
 8006858:	68e3      	ldr	r3, [r4, #12]
 800685a:	9903      	ldr	r1, [sp, #12]
 800685c:	1a5b      	subs	r3, r3, r1
 800685e:	42ab      	cmp	r3, r5
 8006860:	dcf2      	bgt.n	8006848 <_printf_i+0x210>
 8006862:	e7eb      	b.n	800683c <_printf_i+0x204>
 8006864:	2500      	movs	r5, #0
 8006866:	f104 0619 	add.w	r6, r4, #25
 800686a:	e7f5      	b.n	8006858 <_printf_i+0x220>
 800686c:	08006a81 	.word	0x08006a81
 8006870:	08006a92 	.word	0x08006a92

08006874 <memmove>:
 8006874:	4288      	cmp	r0, r1
 8006876:	b510      	push	{r4, lr}
 8006878:	eb01 0402 	add.w	r4, r1, r2
 800687c:	d902      	bls.n	8006884 <memmove+0x10>
 800687e:	4284      	cmp	r4, r0
 8006880:	4623      	mov	r3, r4
 8006882:	d807      	bhi.n	8006894 <memmove+0x20>
 8006884:	1e43      	subs	r3, r0, #1
 8006886:	42a1      	cmp	r1, r4
 8006888:	d008      	beq.n	800689c <memmove+0x28>
 800688a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800688e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006892:	e7f8      	b.n	8006886 <memmove+0x12>
 8006894:	4402      	add	r2, r0
 8006896:	4601      	mov	r1, r0
 8006898:	428a      	cmp	r2, r1
 800689a:	d100      	bne.n	800689e <memmove+0x2a>
 800689c:	bd10      	pop	{r4, pc}
 800689e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068a6:	e7f7      	b.n	8006898 <memmove+0x24>

080068a8 <_sbrk_r>:
 80068a8:	b538      	push	{r3, r4, r5, lr}
 80068aa:	4d06      	ldr	r5, [pc, #24]	@ (80068c4 <_sbrk_r+0x1c>)
 80068ac:	2300      	movs	r3, #0
 80068ae:	4604      	mov	r4, r0
 80068b0:	4608      	mov	r0, r1
 80068b2:	602b      	str	r3, [r5, #0]
 80068b4:	f7fb f922 	bl	8001afc <_sbrk>
 80068b8:	1c43      	adds	r3, r0, #1
 80068ba:	d102      	bne.n	80068c2 <_sbrk_r+0x1a>
 80068bc:	682b      	ldr	r3, [r5, #0]
 80068be:	b103      	cbz	r3, 80068c2 <_sbrk_r+0x1a>
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	bd38      	pop	{r3, r4, r5, pc}
 80068c4:	200043a0 	.word	0x200043a0

080068c8 <_realloc_r>:
 80068c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068cc:	4607      	mov	r7, r0
 80068ce:	4614      	mov	r4, r2
 80068d0:	460d      	mov	r5, r1
 80068d2:	b921      	cbnz	r1, 80068de <_realloc_r+0x16>
 80068d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068d8:	4611      	mov	r1, r2
 80068da:	f7ff bc5b 	b.w	8006194 <_malloc_r>
 80068de:	b92a      	cbnz	r2, 80068ec <_realloc_r+0x24>
 80068e0:	f7ff fbec 	bl	80060bc <_free_r>
 80068e4:	4625      	mov	r5, r4
 80068e6:	4628      	mov	r0, r5
 80068e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068ec:	f000 f81a 	bl	8006924 <_malloc_usable_size_r>
 80068f0:	4284      	cmp	r4, r0
 80068f2:	4606      	mov	r6, r0
 80068f4:	d802      	bhi.n	80068fc <_realloc_r+0x34>
 80068f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068fa:	d8f4      	bhi.n	80068e6 <_realloc_r+0x1e>
 80068fc:	4621      	mov	r1, r4
 80068fe:	4638      	mov	r0, r7
 8006900:	f7ff fc48 	bl	8006194 <_malloc_r>
 8006904:	4680      	mov	r8, r0
 8006906:	b908      	cbnz	r0, 800690c <_realloc_r+0x44>
 8006908:	4645      	mov	r5, r8
 800690a:	e7ec      	b.n	80068e6 <_realloc_r+0x1e>
 800690c:	42b4      	cmp	r4, r6
 800690e:	4622      	mov	r2, r4
 8006910:	4629      	mov	r1, r5
 8006912:	bf28      	it	cs
 8006914:	4632      	movcs	r2, r6
 8006916:	f7ff fbc3 	bl	80060a0 <memcpy>
 800691a:	4629      	mov	r1, r5
 800691c:	4638      	mov	r0, r7
 800691e:	f7ff fbcd 	bl	80060bc <_free_r>
 8006922:	e7f1      	b.n	8006908 <_realloc_r+0x40>

08006924 <_malloc_usable_size_r>:
 8006924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006928:	1f18      	subs	r0, r3, #4
 800692a:	2b00      	cmp	r3, #0
 800692c:	bfbc      	itt	lt
 800692e:	580b      	ldrlt	r3, [r1, r0]
 8006930:	18c0      	addlt	r0, r0, r3
 8006932:	4770      	bx	lr

08006934 <_init>:
 8006934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006936:	bf00      	nop
 8006938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800693a:	bc08      	pop	{r3}
 800693c:	469e      	mov	lr, r3
 800693e:	4770      	bx	lr

08006940 <_fini>:
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	bf00      	nop
 8006944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006946:	bc08      	pop	{r3}
 8006948:	469e      	mov	lr, r3
 800694a:	4770      	bx	lr
