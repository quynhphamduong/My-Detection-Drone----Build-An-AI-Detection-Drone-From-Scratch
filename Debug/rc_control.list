
rc_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008300  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080084a0  080084a0  000094a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800862c  0800862c  0000a0f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800862c  0800862c  0000962c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008634  08008634  0000a0f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008634  08008634  00009634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008638  08008638  00009638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f4  20000000  0800863c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004388  200000f4  08008730  0000a0f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000447c  08008730  0000a47c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001acc9  00000000  00000000  0000a124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ff5  00000000  00000000  00024ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  00028de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001312  00000000  00000000  0002a680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae96  00000000  00000000  0002b992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce5a  00000000  00000000  00046828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5e8e  00000000  00000000  00063682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109510  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a20  00000000  00000000  00109554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0010ff74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f4 	.word	0x200000f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008488 	.word	0x08008488

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f8 	.word	0x200000f8
 80001dc:	08008488 	.word	0x08008488

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b988 	b.w	8000518 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	468e      	mov	lr, r1
 8000228:	4604      	mov	r4, r0
 800022a:	4688      	mov	r8, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d962      	bls.n	80002fc <__udivmoddi4+0xdc>
 8000236:	fab2 f682 	clz	r6, r2
 800023a:	b14e      	cbz	r6, 8000250 <__udivmoddi4+0x30>
 800023c:	f1c6 0320 	rsb	r3, r6, #32
 8000240:	fa01 f806 	lsl.w	r8, r1, r6
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	40b7      	lsls	r7, r6
 800024a:	ea43 0808 	orr.w	r8, r3, r8
 800024e:	40b4      	lsls	r4, r6
 8000250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000254:	fa1f fc87 	uxth.w	ip, r7
 8000258:	fbb8 f1fe 	udiv	r1, r8, lr
 800025c:	0c23      	lsrs	r3, r4, #16
 800025e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000262:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000266:	fb01 f20c 	mul.w	r2, r1, ip
 800026a:	429a      	cmp	r2, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x62>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f101 30ff 	add.w	r0, r1, #4294967295
 8000274:	f080 80ea 	bcs.w	800044c <__udivmoddi4+0x22c>
 8000278:	429a      	cmp	r2, r3
 800027a:	f240 80e7 	bls.w	800044c <__udivmoddi4+0x22c>
 800027e:	3902      	subs	r1, #2
 8000280:	443b      	add	r3, r7
 8000282:	1a9a      	subs	r2, r3, r2
 8000284:	b2a3      	uxth	r3, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb00 fc0c 	mul.w	ip, r0, ip
 8000296:	459c      	cmp	ip, r3
 8000298:	d909      	bls.n	80002ae <__udivmoddi4+0x8e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a0:	f080 80d6 	bcs.w	8000450 <__udivmoddi4+0x230>
 80002a4:	459c      	cmp	ip, r3
 80002a6:	f240 80d3 	bls.w	8000450 <__udivmoddi4+0x230>
 80002aa:	443b      	add	r3, r7
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b2:	eba3 030c 	sub.w	r3, r3, ip
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40f3      	lsrs	r3, r6
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xb6>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb0>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x14c>
 80002de:	4573      	cmp	r3, lr
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xc8>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 8105 	bhi.w	80004f2 <__udivmoddi4+0x2d2>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4690      	mov	r8, r2
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e5      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002f6:	e9c5 4800 	strd	r4, r8, [r5]
 80002fa:	e7e2      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f000 8090 	beq.w	8000422 <__udivmoddi4+0x202>
 8000302:	fab2 f682 	clz	r6, r2
 8000306:	2e00      	cmp	r6, #0
 8000308:	f040 80a4 	bne.w	8000454 <__udivmoddi4+0x234>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	0c03      	lsrs	r3, r0, #16
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	b280      	uxth	r0, r0
 8000316:	b2bc      	uxth	r4, r7
 8000318:	2101      	movs	r1, #1
 800031a:	fbb2 fcfe 	udiv	ip, r2, lr
 800031e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000326:	fb04 f20c 	mul.w	r2, r4, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0x11e>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x11c>
 8000336:	429a      	cmp	r2, r3
 8000338:	f200 80e0 	bhi.w	80004fc <__udivmoddi4+0x2dc>
 800033c:	46c4      	mov	ip, r8
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	fbb3 f2fe 	udiv	r2, r3, lr
 8000344:	fb0e 3312 	mls	r3, lr, r2, r3
 8000348:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800034c:	fb02 f404 	mul.w	r4, r2, r4
 8000350:	429c      	cmp	r4, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x144>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f102 30ff 	add.w	r0, r2, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x142>
 800035c:	429c      	cmp	r4, r3
 800035e:	f200 80ca 	bhi.w	80004f6 <__udivmoddi4+0x2d6>
 8000362:	4602      	mov	r2, r0
 8000364:	1b1b      	subs	r3, r3, r4
 8000366:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x98>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa0e f401 	lsl.w	r4, lr, r1
 800037c:	fa20 f306 	lsr.w	r3, r0, r6
 8000380:	fa2e fe06 	lsr.w	lr, lr, r6
 8000384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	fa1f fc87 	uxth.w	ip, r7
 8000392:	fbbe f0f9 	udiv	r0, lr, r9
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	fb09 ee10 	mls	lr, r9, r0, lr
 800039c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1a0>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80003b2:	f080 809c 	bcs.w	80004ee <__udivmoddi4+0x2ce>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f240 8099 	bls.w	80004ee <__udivmoddi4+0x2ce>
 80003bc:	3802      	subs	r0, #2
 80003be:	443c      	add	r4, r7
 80003c0:	eba4 040e 	sub.w	r4, r4, lr
 80003c4:	fa1f fe83 	uxth.w	lr, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d8:	45a4      	cmp	ip, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1ce>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f103 3eff 	add.w	lr, r3, #4294967295
 80003e2:	f080 8082 	bcs.w	80004ea <__udivmoddi4+0x2ca>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d97f      	bls.n	80004ea <__udivmoddi4+0x2ca>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003fa:	4564      	cmp	r4, ip
 80003fc:	4673      	mov	r3, lr
 80003fe:	46e1      	mov	r9, ip
 8000400:	d362      	bcc.n	80004c8 <__udivmoddi4+0x2a8>
 8000402:	d05f      	beq.n	80004c4 <__udivmoddi4+0x2a4>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x1fe>
 8000406:	ebb8 0203 	subs.w	r2, r8, r3
 800040a:	eb64 0409 	sbc.w	r4, r4, r9
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	fa22 f301 	lsr.w	r3, r2, r1
 8000416:	431e      	orrs	r6, r3
 8000418:	40cc      	lsrs	r4, r1
 800041a:	e9c5 6400 	strd	r6, r4, [r5]
 800041e:	2100      	movs	r1, #0
 8000420:	e74f      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000422:	fbb1 fcf2 	udiv	ip, r1, r2
 8000426:	0c01      	lsrs	r1, r0, #16
 8000428:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800042c:	b280      	uxth	r0, r0
 800042e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000432:	463b      	mov	r3, r7
 8000434:	4638      	mov	r0, r7
 8000436:	463c      	mov	r4, r7
 8000438:	46b8      	mov	r8, r7
 800043a:	46be      	mov	lr, r7
 800043c:	2620      	movs	r6, #32
 800043e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000442:	eba2 0208 	sub.w	r2, r2, r8
 8000446:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800044a:	e766      	b.n	800031a <__udivmoddi4+0xfa>
 800044c:	4601      	mov	r1, r0
 800044e:	e718      	b.n	8000282 <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e72c      	b.n	80002ae <__udivmoddi4+0x8e>
 8000454:	f1c6 0220 	rsb	r2, r6, #32
 8000458:	fa2e f302 	lsr.w	r3, lr, r2
 800045c:	40b7      	lsls	r7, r6
 800045e:	40b1      	lsls	r1, r6
 8000460:	fa20 f202 	lsr.w	r2, r0, r2
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	430a      	orrs	r2, r1
 800046a:	fbb3 f8fe 	udiv	r8, r3, lr
 800046e:	b2bc      	uxth	r4, r7
 8000470:	fb0e 3318 	mls	r3, lr, r8, r3
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb08 f904 	mul.w	r9, r8, r4
 800047e:	40b0      	lsls	r0, r6
 8000480:	4589      	cmp	r9, r1
 8000482:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000486:	b280      	uxth	r0, r0
 8000488:	d93e      	bls.n	8000508 <__udivmoddi4+0x2e8>
 800048a:	1879      	adds	r1, r7, r1
 800048c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x276>
 8000492:	4589      	cmp	r9, r1
 8000494:	d81f      	bhi.n	80004d6 <__udivmoddi4+0x2b6>
 8000496:	eba1 0109 	sub.w	r1, r1, r9
 800049a:	fbb1 f9fe 	udiv	r9, r1, lr
 800049e:	fb09 f804 	mul.w	r8, r9, r4
 80004a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a6:	b292      	uxth	r2, r2
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d229      	bcs.n	8000504 <__udivmoddi4+0x2e4>
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b6:	d2c4      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d2c2      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004bc:	f1a9 0102 	sub.w	r1, r9, #2
 80004c0:	443a      	add	r2, r7
 80004c2:	e7be      	b.n	8000442 <__udivmoddi4+0x222>
 80004c4:	45f0      	cmp	r8, lr
 80004c6:	d29d      	bcs.n	8000404 <__udivmoddi4+0x1e4>
 80004c8:	ebbe 0302 	subs.w	r3, lr, r2
 80004cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d0:	3801      	subs	r0, #1
 80004d2:	46e1      	mov	r9, ip
 80004d4:	e796      	b.n	8000404 <__udivmoddi4+0x1e4>
 80004d6:	eba7 0909 	sub.w	r9, r7, r9
 80004da:	4449      	add	r1, r9
 80004dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e4:	fb09 f804 	mul.w	r8, r9, r4
 80004e8:	e7db      	b.n	80004a2 <__udivmoddi4+0x282>
 80004ea:	4673      	mov	r3, lr
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1ce>
 80004ee:	4650      	mov	r0, sl
 80004f0:	e766      	b.n	80003c0 <__udivmoddi4+0x1a0>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e6fd      	b.n	80002f2 <__udivmoddi4+0xd2>
 80004f6:	443b      	add	r3, r7
 80004f8:	3a02      	subs	r2, #2
 80004fa:	e733      	b.n	8000364 <__udivmoddi4+0x144>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	443b      	add	r3, r7
 8000502:	e71c      	b.n	800033e <__udivmoddi4+0x11e>
 8000504:	4649      	mov	r1, r9
 8000506:	e79c      	b.n	8000442 <__udivmoddi4+0x222>
 8000508:	eba1 0109 	sub.w	r1, r1, r9
 800050c:	46c4      	mov	ip, r8
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	e7c4      	b.n	80004a2 <__udivmoddi4+0x282>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	4a07      	ldr	r2, [pc, #28]	@ (8000548 <vApplicationGetIdleTaskMemory+0x2c>)
 800052c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	4a06      	ldr	r2, [pc, #24]	@ (800054c <vApplicationGetIdleTaskMemory+0x30>)
 8000532:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2280      	movs	r2, #128	@ 0x80
 8000538:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20000110 	.word	0x20000110
 800054c:	200001b0 	.word	0x200001b0

08000550 <render_menu>:
gpsSettingsValue gpsSettings;
uint8_t cursor = 0;
uint8_t buzzer_state = 0; // OFF

void render_menu(I2C_HandleTypeDef *hi2c)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
    lcd_clear(hi2c);
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f000 fade 	bl	8000b1a <lcd_clear>

    for (int i = 0; i < currentMenu->item_count; i++)
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	e049      	b.n	80005f8 <render_menu+0xa8>
    {
        uint8_t line;
        if (currentMenu == &mainMenu)
 8000564:	4b36      	ldr	r3, [pc, #216]	@ (8000640 <render_menu+0xf0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a36      	ldr	r2, [pc, #216]	@ (8000644 <render_menu+0xf4>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d10b      	bne.n	8000586 <render_menu+0x36>
        {
            if (i == 0)
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d102      	bne.n	800057a <render_menu+0x2a>
            {
                line = LINE3;
 8000574:	2394      	movs	r3, #148	@ 0x94
 8000576:	72fb      	strb	r3, [r7, #11]
 8000578:	e01c      	b.n	80005b4 <render_menu+0x64>
            }
            else if (i == 1)
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d119      	bne.n	80005b4 <render_menu+0x64>
            {
                line = LINE4;
 8000580:	23d4      	movs	r3, #212	@ 0xd4
 8000582:	72fb      	strb	r3, [r7, #11]
 8000584:	e016      	b.n	80005b4 <render_menu+0x64>
            }
        }
        else
        {
            if (i == 0)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d102      	bne.n	8000592 <render_menu+0x42>
            {
                line = LINE1;
 800058c:	2380      	movs	r3, #128	@ 0x80
 800058e:	72fb      	strb	r3, [r7, #11]
 8000590:	e010      	b.n	80005b4 <render_menu+0x64>
            }
            else if (i == 1)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d102      	bne.n	800059e <render_menu+0x4e>
            {
                line = LINE2;
 8000598:	23c0      	movs	r3, #192	@ 0xc0
 800059a:	72fb      	strb	r3, [r7, #11]
 800059c:	e00a      	b.n	80005b4 <render_menu+0x64>
            }
            else if (i == 2)
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	d102      	bne.n	80005aa <render_menu+0x5a>
            {
                line = LINE3;
 80005a4:	2394      	movs	r3, #148	@ 0x94
 80005a6:	72fb      	strb	r3, [r7, #11]
 80005a8:	e004      	b.n	80005b4 <render_menu+0x64>
            }
            else if (i == 3)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	d101      	bne.n	80005b4 <render_menu+0x64>
            {
                line = LINE4;
 80005b0:	23d4      	movs	r3, #212	@ 0xd4
 80005b2:	72fb      	strb	r3, [r7, #11]
            }
        }

        if (i == cursor)
 80005b4:	4b24      	ldr	r3, [pc, #144]	@ (8000648 <render_menu+0xf8>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	4293      	cmp	r3, r2
 80005be:	d106      	bne.n	80005ce <render_menu+0x7e>
        {
            lcd_send_string(hi2c, line, POS0, ">");
 80005c0:	7af9      	ldrb	r1, [r7, #11]
 80005c2:	4b22      	ldr	r3, [pc, #136]	@ (800064c <render_menu+0xfc>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f000 fa77 	bl	8000aba <lcd_send_string>
 80005cc:	e005      	b.n	80005da <render_menu+0x8a>
        }
        else
        {
            lcd_send_string(hi2c, line, POS0, " ");
 80005ce:	7af9      	ldrb	r1, [r7, #11]
 80005d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000650 <render_menu+0x100>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f000 fa70 	bl	8000aba <lcd_send_string>
        }
        lcd_send_string(hi2c, line, POS2, (char *)currentMenu->items[i]);
 80005da:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <render_menu+0xf0>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	685a      	ldr	r2, [r3, #4]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	7af9      	ldrb	r1, [r7, #11]
 80005ea:	2202      	movs	r2, #2
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 fa64 	bl	8000aba <lcd_send_string>
    for (int i = 0; i < currentMenu->item_count; i++)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	3301      	adds	r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <render_menu+0xf0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	7a1b      	ldrb	r3, [r3, #8]
 80005fe:	461a      	mov	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4293      	cmp	r3, r2
 8000604:	dbae      	blt.n	8000564 <render_menu+0x14>
    }
    if (currentMenu == &mainMenu)
 8000606:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <render_menu+0xf0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a0e      	ldr	r2, [pc, #56]	@ (8000644 <render_menu+0xf4>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d113      	bne.n	8000638 <render_menu+0xe8>
    {
        lcd_send_string(hi2c, LINE1, POS0, (char *)currentMenu->title);
 8000610:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <render_menu+0xf0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2200      	movs	r2, #0
 8000618:	2180      	movs	r1, #128	@ 0x80
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f000 fa4d 	bl	8000aba <lcd_send_string>
        lcd_send_string(hi2c, LINE1, POS12, "TX:*****");
 8000620:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <render_menu+0x104>)
 8000622:	220c      	movs	r2, #12
 8000624:	2180      	movs	r1, #128	@ 0x80
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f000 fa47 	bl	8000aba <lcd_send_string>
        lcd_send_string(hi2c, LINE2, POS12, "RX:*****");
 800062c:	4b0a      	ldr	r3, [pc, #40]	@ (8000658 <render_menu+0x108>)
 800062e:	220c      	movs	r2, #12
 8000630:	21c0      	movs	r1, #192	@ 0xc0
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f000 fa41 	bl	8000aba <lcd_send_string>
    }
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200003b0 	.word	0x200003b0
 8000644:	2000001c 	.word	0x2000001c
 8000648:	200003b4 	.word	0x200003b4
 800064c:	08008514 	.word	0x08008514
 8000650:	08008518 	.word	0x08008518
 8000654:	0800851c 	.word	0x0800851c
 8000658:	08008528 	.word	0x08008528

0800065c <menu_init>:

void menu_init(I2C_HandleTypeDef *hi2c)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
    currentMenu = &mainMenu;
 8000664:	4b04      	ldr	r3, [pc, #16]	@ (8000678 <menu_init+0x1c>)
 8000666:	4a05      	ldr	r2, [pc, #20]	@ (800067c <menu_init+0x20>)
 8000668:	601a      	str	r2, [r3, #0]
    render_menu(hi2c);
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f7ff ff70 	bl	8000550 <render_menu>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200003b0 	.word	0x200003b0
 800067c:	2000001c 	.word	0x2000001c

08000680 <on_up>:

void on_up(I2C_HandleTypeDef *hi2c)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
    if (cursor > 0)
 8000688:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <on_up+0x2c>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d005      	beq.n	800069c <on_up+0x1c>
        cursor--;
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <on_up+0x2c>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	3b01      	subs	r3, #1
 8000696:	b2da      	uxtb	r2, r3
 8000698:	4b04      	ldr	r3, [pc, #16]	@ (80006ac <on_up+0x2c>)
 800069a:	701a      	strb	r2, [r3, #0]
    render_menu(hi2c);
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f7ff ff57 	bl	8000550 <render_menu>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200003b4 	.word	0x200003b4

080006b0 <on_down>:

void on_down(I2C_HandleTypeDef *hi2c)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
    if (cursor < currentMenu->item_count - 1)
 80006b8:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <on_down+0x34>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b0a      	ldr	r3, [pc, #40]	@ (80006e8 <on_down+0x38>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	7a1b      	ldrb	r3, [r3, #8]
 80006c4:	3b01      	subs	r3, #1
 80006c6:	429a      	cmp	r2, r3
 80006c8:	da05      	bge.n	80006d6 <on_down+0x26>
        cursor++;
 80006ca:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <on_down+0x34>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	3301      	adds	r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <on_down+0x34>)
 80006d4:	701a      	strb	r2, [r3, #0]
    render_menu(hi2c);
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff ff3a 	bl	8000550 <render_menu>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200003b4 	.word	0x200003b4
 80006e8:	200003b0 	.word	0x200003b0

080006ec <on_select>:

void on_select(I2C_HandleTypeDef *hi2c)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    currentMenu->select_callback(hi2c, cursor);
 80006f4:	4b05      	ldr	r3, [pc, #20]	@ (800070c <on_select+0x20>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	4a05      	ldr	r2, [pc, #20]	@ (8000710 <on_select+0x24>)
 80006fc:	7812      	ldrb	r2, [r2, #0]
 80006fe:	4611      	mov	r1, r2
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	4798      	blx	r3
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200003b0 	.word	0x200003b0
 8000710:	200003b4 	.word	0x200003b4

08000714 <on_back>:

void on_back(I2C_HandleTypeDef *hi2c)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    if (currentMenu->back_link != NULL)
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <on_back+0x30>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	691b      	ldr	r3, [r3, #16]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d00a      	beq.n	800073c <on_back+0x28>
    {
        currentMenu = currentMenu->back_link;
 8000726:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <on_back+0x30>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	4a05      	ldr	r2, [pc, #20]	@ (8000744 <on_back+0x30>)
 800072e:	6013      	str	r3, [r2, #0]
        cursor = 0;
 8000730:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <on_back+0x34>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
        render_menu(hi2c);
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff ff0a 	bl	8000550 <render_menu>
    }
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200003b0 	.word	0x200003b0
 8000748:	200003b4 	.word	0x200003b4

0800074c <mainMenuCallback>:

void mainMenuCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	70fb      	strb	r3, [r7, #3]
    if (index == 0)
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d106      	bne.n	800076c <mainMenuCallback+0x20>
    {
        currentMenu = &menuMenu;
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <mainMenuCallback+0x40>)
 8000760:	4a0b      	ldr	r2, [pc, #44]	@ (8000790 <mainMenuCallback+0x44>)
 8000762:	601a      	str	r2, [r3, #0]
        cursor = 0;
 8000764:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <mainMenuCallback+0x48>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
 800076a:	e008      	b.n	800077e <mainMenuCallback+0x32>
    }
    else if (index == 1)
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d105      	bne.n	800077e <mainMenuCallback+0x32>
    {
        currentMenu = &settingsMenu;
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <mainMenuCallback+0x40>)
 8000774:	4a08      	ldr	r2, [pc, #32]	@ (8000798 <mainMenuCallback+0x4c>)
 8000776:	601a      	str	r2, [r3, #0]
        cursor = 0;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <mainMenuCallback+0x48>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
    }
    render_menu(hi2c);
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff fee6 	bl	8000550 <render_menu>
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200003b0 	.word	0x200003b0
 8000790:	20000030 	.word	0x20000030
 8000794:	200003b4 	.word	0x200003b4
 8000798:	20000044 	.word	0x20000044

0800079c <menuCallback>:

void menuCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
    if (index == 0)
 80007a8:	78fb      	ldrb	r3, [r7, #3]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d10a      	bne.n	80007c4 <menuCallback+0x28>
    {
        currentMenu = &flightStatusMenu;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <menuCallback+0x4c>)
 80007b0:	4a0e      	ldr	r2, [pc, #56]	@ (80007ec <menuCallback+0x50>)
 80007b2:	601a      	str	r2, [r3, #0]
        currentMenu->select_callback(hi2c, index);
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <menuCallback+0x4c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	78fa      	ldrb	r2, [r7, #3]
 80007bc:	4611      	mov	r1, r2
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	4798      	blx	r3
    else if (index == 1)
    {
        currentMenu = &settingsMenu;
        currentMenu->select_callback(hi2c, index);
    }
}
 80007c2:	e00c      	b.n	80007de <menuCallback+0x42>
    else if (index == 1)
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d109      	bne.n	80007de <menuCallback+0x42>
        currentMenu = &settingsMenu;
 80007ca:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <menuCallback+0x4c>)
 80007cc:	4a08      	ldr	r2, [pc, #32]	@ (80007f0 <menuCallback+0x54>)
 80007ce:	601a      	str	r2, [r3, #0]
        currentMenu->select_callback(hi2c, index);
 80007d0:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <menuCallback+0x4c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	78fa      	ldrb	r2, [r7, #3]
 80007d8:	4611      	mov	r1, r2
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	4798      	blx	r3
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200003b0 	.word	0x200003b0
 80007ec:	2000006c 	.word	0x2000006c
 80007f0:	20000044 	.word	0x20000044

080007f4 <settingsCallback>:

void settingsCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	70fb      	strb	r3, [r7, #3]
    if (index == 0)
 8000800:	78fb      	ldrb	r3, [r7, #3]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d11d      	bne.n	8000842 <settingsCallback+0x4e>
    {
        currentMenu = &buzzerMenu;
 8000806:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <settingsCallback+0x70>)
 8000808:	4a17      	ldr	r2, [pc, #92]	@ (8000868 <settingsCallback+0x74>)
 800080a:	601a      	str	r2, [r3, #0]
        cursor = 0;
 800080c:	4b17      	ldr	r3, [pc, #92]	@ (800086c <settingsCallback+0x78>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
        if (buzzer_state == 0)
 8000812:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <settingsCallback+0x7c>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d109      	bne.n	800082e <settingsCallback+0x3a>
        {
            lcd_clear(hi2c);
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f000 f97d 	bl	8000b1a <lcd_clear>
            lcd_send_string(hi2c, LINE1, POS0, "OFF");
 8000820:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <settingsCallback+0x80>)
 8000822:	2200      	movs	r2, #0
 8000824:	2180      	movs	r1, #128	@ 0x80
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f000 f947 	bl	8000aba <lcd_send_string>
    }
    else if (index==2)
    {

    }
}
 800082c:	e015      	b.n	800085a <settingsCallback+0x66>
            lcd_clear(hi2c);
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f000 f973 	bl	8000b1a <lcd_clear>
            lcd_send_string(hi2c, LINE1, POS0, "ON");
 8000834:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <settingsCallback+0x84>)
 8000836:	2200      	movs	r2, #0
 8000838:	2180      	movs	r1, #128	@ 0x80
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f000 f93d 	bl	8000aba <lcd_send_string>
}
 8000840:	e00b      	b.n	800085a <settingsCallback+0x66>
    else if (index == 1)
 8000842:	78fb      	ldrb	r3, [r7, #3]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d108      	bne.n	800085a <settingsCallback+0x66>
        currentMenu = &gpsSettingsMenu;
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <settingsCallback+0x70>)
 800084a:	4a0c      	ldr	r2, [pc, #48]	@ (800087c <settingsCallback+0x88>)
 800084c:	601a      	str	r2, [r3, #0]
        cursor = 0;
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <settingsCallback+0x78>)
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]
        render_menu(hi2c);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff fe7b 	bl	8000550 <render_menu>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200003b0 	.word	0x200003b0
 8000868:	20000058 	.word	0x20000058
 800086c:	200003b4 	.word	0x200003b4
 8000870:	200003b5 	.word	0x200003b5
 8000874:	08008534 	.word	0x08008534
 8000878:	08008538 	.word	0x08008538
 800087c:	20000080 	.word	0x20000080

08000880 <buzzerCallback>:


void buzzerCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	460b      	mov	r3, r1
 800088a:	70fb      	strb	r3, [r7, #3]
    buzzer_state = buzzer_state ^ 1;
 800088c:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <buzzerCallback+0x50>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	f083 0301 	eor.w	r3, r3, #1
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <buzzerCallback+0x50>)
 8000898:	701a      	strb	r2, [r3, #0]
    if (buzzer_state == 0)
 800089a:	4b0d      	ldr	r3, [pc, #52]	@ (80008d0 <buzzerCallback+0x50>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d109      	bne.n	80008b6 <buzzerCallback+0x36>
    {
        lcd_clear(hi2c);
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f000 f939 	bl	8000b1a <lcd_clear>
        lcd_send_string(hi2c, LINE1, POS0, "OFF");
 80008a8:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <buzzerCallback+0x54>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	2180      	movs	r1, #128	@ 0x80
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f000 f903 	bl	8000aba <lcd_send_string>
    else
    {
        lcd_clear(hi2c);
        lcd_send_string(hi2c, LINE1, POS0, "ON");
    }
}
 80008b4:	e008      	b.n	80008c8 <buzzerCallback+0x48>
        lcd_clear(hi2c);
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 f92f 	bl	8000b1a <lcd_clear>
        lcd_send_string(hi2c, LINE1, POS0, "ON");
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <buzzerCallback+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	2180      	movs	r1, #128	@ 0x80
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f000 f8f9 	bl	8000aba <lcd_send_string>
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	200003b5 	.word	0x200003b5
 80008d4:	08008534 	.word	0x08008534
 80008d8:	08008538 	.word	0x08008538

080008dc <flightStatusCallback>:

void flightStatusCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	70fb      	strb	r3, [r7, #3]
    lcd_clear(hi2c);
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f000 f916 	bl	8000b1a <lcd_clear>
    lcd_send_string(hi2c, LINE1, POS0, "Roll:");
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <flightStatusCallback+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	2180      	movs	r1, #128	@ 0x80
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f000 f8e0 	bl	8000aba <lcd_send_string>
    lcd_send_string(hi2c, LINE2, POS0, "Pitch:");
 80008fa:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <flightStatusCallback+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	21c0      	movs	r1, #192	@ 0xc0
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f000 f8da 	bl	8000aba <lcd_send_string>
    lcd_send_string(hi2c, LINE3, POS0, "Yaw:");
 8000906:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <flightStatusCallback+0x54>)
 8000908:	2200      	movs	r2, #0
 800090a:	2194      	movs	r1, #148	@ 0x94
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f000 f8d4 	bl	8000aba <lcd_send_string>
    lcd_send_string(hi2c, LINE3, POS0, "Altitude:");
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <flightStatusCallback+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	2194      	movs	r1, #148	@ 0x94
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f000 f8ce 	bl	8000aba <lcd_send_string>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	0800853c 	.word	0x0800853c
 800092c:	08008544 	.word	0x08008544
 8000930:	0800854c 	.word	0x0800854c
 8000934:	08008554 	.word	0x08008554

08000938 <gpsSettingsCallback>:
    lcd_send_string(hi2c, LINE1, POS0, "Longtitude:");
    lcd_send_string(hi2c, LINE2, POS0, "Latitude:");
}

void gpsSettingsCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	70fb      	strb	r3, [r7, #3]
    lcd_clear(hi2c);
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f000 f8e8 	bl	8000b1a <lcd_clear>
    lcd_send_string(hi2c, LINE1, POS0, "Longtitude:");
 800094a:	4b08      	ldr	r3, [pc, #32]	@ (800096c <gpsSettingsCallback+0x34>)
 800094c:	2200      	movs	r2, #0
 800094e:	2180      	movs	r1, #128	@ 0x80
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f000 f8b2 	bl	8000aba <lcd_send_string>
    lcd_send_string(hi2c, LINE2, POS0, "Latitude:");
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <gpsSettingsCallback+0x38>)
 8000958:	2200      	movs	r2, #0
 800095a:	21c0      	movs	r1, #192	@ 0xc0
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f000 f8ac 	bl	8000aba <lcd_send_string>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	080084f0 	.word	0x080084f0
 8000970:	08008560 	.word	0x08008560

08000974 <lcd_init>:

/*
 * @brief This is init function, only use it in super loop
 */
void lcd_init(I2C_HandleTypeDef *hi2c)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	// 4 bit initialisation
	HAL_Delay(50); // wait for >40ms
 800097c:	2032      	movs	r0, #50	@ 0x32
 800097e:	f001 fbd7 	bl	8002130 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x30);
 8000982:	2130      	movs	r1, #48	@ 0x30
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f000 f83c 	bl	8000a02 <lcd_send_cmd>
	HAL_Delay(5); // wait for >4.1ms
 800098a:	2005      	movs	r0, #5
 800098c:	f001 fbd0 	bl	8002130 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x30);
 8000990:	2130      	movs	r1, #48	@ 0x30
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 f835 	bl	8000a02 <lcd_send_cmd>
	HAL_Delay(1); // wait for >100us
 8000998:	2001      	movs	r0, #1
 800099a:	f001 fbc9 	bl	8002130 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x30);
 800099e:	2130      	movs	r1, #48	@ 0x30
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 f82e 	bl	8000a02 <lcd_send_cmd>
	HAL_Delay(10);
 80009a6:	200a      	movs	r0, #10
 80009a8:	f001 fbc2 	bl	8002130 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x20); // 4bit mode
 80009ac:	2120      	movs	r1, #32
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f000 f827 	bl	8000a02 <lcd_send_cmd>
	HAL_Delay(10);
 80009b4:	200a      	movs	r0, #10
 80009b6:	f001 fbbb 	bl	8002130 <HAL_Delay>

	// dislay initialisation
	lcd_send_cmd(hi2c, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80009ba:	2128      	movs	r1, #40	@ 0x28
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f000 f820 	bl	8000a02 <lcd_send_cmd>
	HAL_Delay(1);
 80009c2:	2001      	movs	r0, #1
 80009c4:	f001 fbb4 	bl	8002130 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x08); // Display on/off control --> D=0,C=0, B=0  ---> display off
 80009c8:	2108      	movs	r1, #8
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f000 f819 	bl	8000a02 <lcd_send_cmd>
	HAL_Delay(1);
 80009d0:	2001      	movs	r0, #1
 80009d2:	f001 fbad 	bl	8002130 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x01); // clear display
 80009d6:	2101      	movs	r1, #1
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 f812 	bl	8000a02 <lcd_send_cmd>
	HAL_Delay(2);
 80009de:	2002      	movs	r0, #2
 80009e0:	f001 fba6 	bl	8002130 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x06); // Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80009e4:	2106      	movs	r1, #6
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f000 f80b 	bl	8000a02 <lcd_send_cmd>
	HAL_Delay(1);
 80009ec:	2001      	movs	r0, #1
 80009ee:	f001 fb9f 	bl	8002130 <HAL_Delay>
	lcd_send_cmd(hi2c, 0x0C); // Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80009f2:	210c      	movs	r1, #12
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f000 f804 	bl	8000a02 <lcd_send_cmd>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <lcd_send_cmd>:

void lcd_send_cmd(I2C_HandleTypeDef *hi2c, char cmd)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b086      	sub	sp, #24
 8000a06:	af02      	add	r7, sp, #8
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000a0e:	78fb      	ldrb	r3, [r7, #3]
 8000a10:	f023 030f 	bic.w	r3, r3, #15
 8000a14:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8000a16:	78fb      	ldrb	r3, [r7, #3]
 8000a18:	011b      	lsls	r3, r3, #4
 8000a1a:	73bb      	strb	r3, [r7, #14]
	//rs = 0 : send cmd
	data_t[0] = data_u | 0x0C; // en=1, rs=0 -> send 4 bit high, enable
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
 8000a1e:	f043 030c 	orr.w	r3, r3, #12
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08; // en=0, rs=0 -> unenable
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C; // en=1, rs=0 -> send 4 bit low, enable
 8000a30:	7bbb      	ldrb	r3, [r7, #14]
 8000a32:	f043 030c 	orr.w	r3, r3, #12
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08; // en=0, rs=0 ->
 8000a3a:	7bbb      	ldrb	r3, [r7, #14]
 8000a3c:	f043 0308 	orr.w	r3, r3, #8
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000a44:	f107 0208 	add.w	r2, r7, #8
 8000a48:	2364      	movs	r3, #100	@ 0x64
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	214e      	movs	r1, #78	@ 0x4e
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f003 f815 	bl	8003a80 <HAL_I2C_Master_Transmit>
}
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <lcd_send_data>:

void lcd_send_data(I2C_HandleTypeDef *hi2c, unsigned char data)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b086      	sub	sp, #24
 8000a62:	af02      	add	r7, sp, #8
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	460b      	mov	r3, r1
 8000a68:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8000a6a:	78fb      	ldrb	r3, [r7, #3]
 8000a6c:	f023 030f 	bic.w	r3, r3, #15
 8000a70:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8000a72:	78fb      	ldrb	r3, [r7, #3]
 8000a74:	011b      	lsls	r3, r3, #4
 8000a76:	73bb      	strb	r3, [r7, #14]
	//rs = 1 : send data
	data_t[0] = data_u | 0x0D; // en=1, rs=1
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	f043 030d 	orr.w	r3, r3, #13
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09; // en=0, rs=1
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	f043 0309 	orr.w	r3, r3, #9
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D; // en=1, rs=1
 8000a8c:	7bbb      	ldrb	r3, [r7, #14]
 8000a8e:	f043 030d 	orr.w	r3, r3, #13
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09; // en=0, rs=1
 8000a96:	7bbb      	ldrb	r3, [r7, #14]
 8000a98:	f043 0309 	orr.w	r3, r3, #9
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000aa0:	f107 0208 	add.w	r2, r7, #8
 8000aa4:	2364      	movs	r3, #100	@ 0x64
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	214e      	movs	r1, #78	@ 0x4e
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f002 ffe7 	bl	8003a80 <HAL_I2C_Master_Transmit>
}
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <lcd_send_string>:

void lcd_send_string(I2C_HandleTypeDef *hi2c, char line, char pos, char *str)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b086      	sub	sp, #24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	72fb      	strb	r3, [r7, #11]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	72bb      	strb	r3, [r7, #10]
	uint16_t length = (uint16_t)strlen(str);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff fb87 	bl	80001e0 <strlen>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	827b      	strh	r3, [r7, #18]
	lcd_send_cmd(hi2c, line + pos);
 8000ad6:	7afa      	ldrb	r2, [r7, #11]
 8000ad8:	7abb      	ldrb	r3, [r7, #10]
 8000ada:	4413      	add	r3, r2
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4619      	mov	r1, r3
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f7ff ff8e 	bl	8000a02 <lcd_send_cmd>

	#if USING_RTOS == 0
	HAL_Delay(1);
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f001 fb22 	bl	8002130 <HAL_Delay>
	#else
	vTaskDelay(pdMS_TO_TICKS(1));
	#endif

	for (int i = 0; i < length; i++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	e00a      	b.n	8000b08 <lcd_send_string+0x4e>
	{
		lcd_send_data(hi2c, *(str + i));
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	4413      	add	r3, r2
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	4619      	mov	r1, r3
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	f7ff ffae 	bl	8000a5e <lcd_send_data>
	for (int i = 0; i < length; i++)
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	3301      	adds	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	8a7b      	ldrh	r3, [r7, #18]
 8000b0a:	697a      	ldr	r2, [r7, #20]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dbf0      	blt.n	8000af2 <lcd_send_string+0x38>
	}
}
 8000b10:	bf00      	nop
 8000b12:	bf00      	nop
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <lcd_clear>:
		lcd_send_data(hi2c, *(str + i));
	}
}

void lcd_clear(I2C_HandleTypeDef *hi2c)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b084      	sub	sp, #16
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
	lcd_send_cmd(hi2c,0x01);
 8000b22:	2101      	movs	r1, #1
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ff6c 	bl	8000a02 <lcd_send_cmd>
	for (int i = 0; i < 80; i++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	e006      	b.n	8000b3e <lcd_clear+0x24>
	{
		lcd_send_data(hi2c,' ');
 8000b30:	2120      	movs	r1, #32
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff ff93 	bl	8000a5e <lcd_send_data>
	for (int i = 0; i < 80; i++)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	2b4f      	cmp	r3, #79	@ 0x4f
 8000b42:	ddf5      	ble.n	8000b30 <lcd_clear+0x16>
	}
}
 8000b44:	bf00      	nop
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  switch (GPIO_Pin)
 8000b5e:	88fb      	ldrh	r3, [r7, #6]
 8000b60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000b64:	d02a      	beq.n	8000bbc <HAL_GPIO_EXTI_Callback+0x6c>
 8000b66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000b6a:	dc30      	bgt.n	8000bce <HAL_GPIO_EXTI_Callback+0x7e>
 8000b6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b70:	d009      	beq.n	8000b86 <HAL_GPIO_EXTI_Callback+0x36>
 8000b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b76:	dc2a      	bgt.n	8000bce <HAL_GPIO_EXTI_Callback+0x7e>
 8000b78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b7c:	d015      	beq.n	8000baa <HAL_GPIO_EXTI_Callback+0x5a>
 8000b7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b82:	d009      	beq.n	8000b98 <HAL_GPIO_EXTI_Callback+0x48>
 8000b84:	e023      	b.n	8000bce <HAL_GPIO_EXTI_Callback+0x7e>
  {
  case UP_Pin:
	  //UP_Pin_flag=1;
	  xSemaphoreGiveFromISR(xUpSem, &xHigherPriorityTaskWoken);
 8000b86:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <HAL_GPIO_EXTI_Callback+0x9c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f107 020c 	add.w	r2, r7, #12
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f005 fa93 	bl	80060bc <xQueueGiveFromISR>
    break;
 8000b96:	e01a      	b.n	8000bce <HAL_GPIO_EXTI_Callback+0x7e>
  case DOWN_Pin:
	  //DOWN_Pin_flag=1;
	  xSemaphoreGiveFromISR(xDownSem, &xHigherPriorityTaskWoken);
 8000b98:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f107 020c 	add.w	r2, r7, #12
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f005 fa8a 	bl	80060bc <xQueueGiveFromISR>
    break;
 8000ba8:	e011      	b.n	8000bce <HAL_GPIO_EXTI_Callback+0x7e>
  case SELECT_Pin:
	  //SELECT_Pin_flag=1;
	  xSemaphoreGiveFromISR(xSelectSem, &xHigherPriorityTaskWoken);
 8000baa:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f107 020c 	add.w	r2, r7, #12
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f005 fa81 	bl	80060bc <xQueueGiveFromISR>
    break;
 8000bba:	e008      	b.n	8000bce <HAL_GPIO_EXTI_Callback+0x7e>
  case BACK_Pin:
	  //BACK_Pin_flag=1;
	  xSemaphoreGiveFromISR(xBackSem, &xHigherPriorityTaskWoken);
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f107 020c 	add.w	r2, r7, #12
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f005 fa78 	bl	80060bc <xQueueGiveFromISR>
    break;
 8000bcc:	bf00      	nop
  }
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d007      	beq.n	8000be4 <HAL_GPIO_EXTI_Callback+0x94>
 8000bd4:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0xac>)
 8000bd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	f3bf 8f4f 	dsb	sy
 8000be0:	f3bf 8f6f 	isb	sy
}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000548 	.word	0x20000548
 8000bf0:	2000054c 	.word	0x2000054c
 8000bf4:	20000550 	.word	0x20000550
 8000bf8:	20000554 	.word	0x20000554
 8000bfc:	e000ed04 	.word	0xe000ed04

08000c00 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c44 <HAL_ADC_ConvCpltCallback+0x44>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d114      	bne.n	8000c3c <HAL_ADC_ConvCpltCallback+0x3c>
        // Notify a FreeRTOS task
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
        vTaskNotifyGiveFromISR(ADC_Handle, &xHigherPriorityTaskWoken);
 8000c16:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <HAL_ADC_ConvCpltCallback+0x48>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f107 020c 	add.w	r2, r7, #12
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f006 fe07 	bl	8007834 <vTaskNotifyGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d007      	beq.n	8000c3c <HAL_ADC_ConvCpltCallback+0x3c>
 8000c2c:	4b07      	ldr	r3, [pc, #28]	@ (8000c4c <HAL_ADC_ConvCpltCallback+0x4c>)
 8000c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	f3bf 8f4f 	dsb	sy
 8000c38:	f3bf 8f6f 	isb	sy
    }
}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40012000 	.word	0x40012000
 8000c48:	20000544 	.word	0x20000544
 8000c4c:	e000ed04 	.word	0xe000ed04

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b08a      	sub	sp, #40	@ 0x28
 8000c54:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c56:	f001 fa29 	bl	80020ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5a:	f000 f8af 	bl	8000dbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5e:	f000 fa15 	bl	800108c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c62:	f000 f9f3 	bl	800104c <MX_DMA_Init>
  MX_I2C1_Init();
 8000c66:	f000 f98d 	bl	8000f84 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c6a:	f000 f9b9 	bl	8000fe0 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000c6e:	f000 f90d 	bl	8000e8c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_CHANNEL_COUNT);
 8000c72:	2204      	movs	r2, #4
 8000c74:	493c      	ldr	r1, [pc, #240]	@ (8000d68 <main+0x118>)
 8000c76:	483d      	ldr	r0, [pc, #244]	@ (8000d6c <main+0x11c>)
 8000c78:	f001 fbd2 	bl	8002420 <HAL_ADC_Start_DMA>
  lcd_init(&hi2c1);
 8000c7c:	483c      	ldr	r0, [pc, #240]	@ (8000d70 <main+0x120>)
 8000c7e:	f7ff fe79 	bl	8000974 <lcd_init>
  menu_init(&hi2c1);
 8000c82:	483b      	ldr	r0, [pc, #236]	@ (8000d70 <main+0x120>)
 8000c84:	f7ff fcea 	bl	800065c <menu_init>
  Two_Way_Commuination_Pipe0_Config(&hspi1, 0xC5C5C5C5C5, 0xA2A2A2A2A2);
 8000c88:	f04f 32a2 	mov.w	r2, #2728567458	@ 0xa2a2a2a2
 8000c8c:	f04f 03a2 	mov.w	r3, #162	@ 0xa2
 8000c90:	e9cd 2300 	strd	r2, r3, [sp]
 8000c94:	f04f 32c5 	mov.w	r2, #3318072773	@ 0xc5c5c5c5
 8000c98:	f04f 03c5 	mov.w	r3, #197	@ 0xc5
 8000c9c:	4835      	ldr	r0, [pc, #212]	@ (8000d74 <main+0x124>)
 8000c9e:	f000 fcd7 	bl	8001650 <Two_Way_Commuination_Pipe0_Config>
  Select_Tx_Mode(&hspi1);
 8000ca2:	4834      	ldr	r0, [pc, #208]	@ (8000d74 <main+0x124>)
 8000ca4:	f000 fc80 	bl	80015a8 <Select_Tx_Mode>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000ca8:	4b33      	ldr	r3, [pc, #204]	@ (8000d78 <main+0x128>)
 8000caa:	1d3c      	adds	r4, r7, #4
 8000cac:	461d      	mov	r5, r3
 8000cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f004 ff21 	bl	8005b06 <osThreadCreate>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	4a2d      	ldr	r2, [pc, #180]	@ (8000d7c <main+0x12c>)
 8000cc8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(LCD_Task, "LCD", 256, NULL, 0, &LCD_Handle);
 8000cca:	4b2d      	ldr	r3, [pc, #180]	@ (8000d80 <main+0x130>)
 8000ccc:	9301      	str	r3, [sp, #4]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cd8:	492a      	ldr	r1, [pc, #168]	@ (8000d84 <main+0x134>)
 8000cda:	482b      	ldr	r0, [pc, #172]	@ (8000d88 <main+0x138>)
 8000cdc:	f005 fdf8 	bl	80068d0 <xTaskCreate>
  xTaskCreate(NRF_Task, "NRF", 256, NULL, 0, &NRF_Handle);
 8000ce0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d8c <main+0x13c>)
 8000ce2:	9301      	str	r3, [sp, #4]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cee:	4928      	ldr	r1, [pc, #160]	@ (8000d90 <main+0x140>)
 8000cf0:	4828      	ldr	r0, [pc, #160]	@ (8000d94 <main+0x144>)
 8000cf2:	f005 fded 	bl	80068d0 <xTaskCreate>
  xTaskCreate(Button_Task, "BTN", 256, NULL, 1, NULL);
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	9301      	str	r3, [sp, #4]
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d04:	4924      	ldr	r1, [pc, #144]	@ (8000d98 <main+0x148>)
 8000d06:	4825      	ldr	r0, [pc, #148]	@ (8000d9c <main+0x14c>)
 8000d08:	f005 fde2 	bl	80068d0 <xTaskCreate>
  xTaskCreate(ADC_Task, "ADC", 128, NULL, 2, &ADC_Handle);
 8000d0c:	4b24      	ldr	r3, [pc, #144]	@ (8000da0 <main+0x150>)
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	2302      	movs	r3, #2
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2300      	movs	r3, #0
 8000d16:	2280      	movs	r2, #128	@ 0x80
 8000d18:	4922      	ldr	r1, [pc, #136]	@ (8000da4 <main+0x154>)
 8000d1a:	4823      	ldr	r0, [pc, #140]	@ (8000da8 <main+0x158>)
 8000d1c:	f005 fdd8 	bl	80068d0 <xTaskCreate>

  xUpSem     = xSemaphoreCreateBinary();
 8000d20:	2203      	movs	r2, #3
 8000d22:	2100      	movs	r1, #0
 8000d24:	2001      	movs	r0, #1
 8000d26:	f005 f86d 	bl	8005e04 <xQueueGenericCreate>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4a1f      	ldr	r2, [pc, #124]	@ (8000dac <main+0x15c>)
 8000d2e:	6013      	str	r3, [r2, #0]
  xDownSem   = xSemaphoreCreateBinary();
 8000d30:	2203      	movs	r2, #3
 8000d32:	2100      	movs	r1, #0
 8000d34:	2001      	movs	r0, #1
 8000d36:	f005 f865 	bl	8005e04 <xQueueGenericCreate>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8000db0 <main+0x160>)
 8000d3e:	6013      	str	r3, [r2, #0]
  xSelectSem = xSemaphoreCreateBinary();
 8000d40:	2203      	movs	r2, #3
 8000d42:	2100      	movs	r1, #0
 8000d44:	2001      	movs	r0, #1
 8000d46:	f005 f85d 	bl	8005e04 <xQueueGenericCreate>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4a19      	ldr	r2, [pc, #100]	@ (8000db4 <main+0x164>)
 8000d4e:	6013      	str	r3, [r2, #0]
  xBackSem   = xSemaphoreCreateBinary();
 8000d50:	2203      	movs	r2, #3
 8000d52:	2100      	movs	r1, #0
 8000d54:	2001      	movs	r0, #1
 8000d56:	f005 f855 	bl	8005e04 <xQueueGenericCreate>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4a16      	ldr	r2, [pc, #88]	@ (8000db8 <main+0x168>)
 8000d5e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d60:	f004 feca 	bl	8005af8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <main+0x114>
 8000d68:	200003b8 	.word	0x200003b8
 8000d6c:	200003c0 	.word	0x200003c0
 8000d70:	20000468 	.word	0x20000468
 8000d74:	200004bc 	.word	0x200004bc
 8000d78:	08008588 	.word	0x08008588
 8000d7c:	20000514 	.word	0x20000514
 8000d80:	2000053c 	.word	0x2000053c
 8000d84:	0800856c 	.word	0x0800856c
 8000d88:	080011dd 	.word	0x080011dd
 8000d8c:	20000540 	.word	0x20000540
 8000d90:	08008570 	.word	0x08008570
 8000d94:	080011a1 	.word	0x080011a1
 8000d98:	08008574 	.word	0x08008574
 8000d9c:	080011ed 	.word	0x080011ed
 8000da0:	20000544 	.word	0x20000544
 8000da4:	08008578 	.word	0x08008578
 8000da8:	08001279 	.word	0x08001279
 8000dac:	20000548 	.word	0x20000548
 8000db0:	2000054c 	.word	0x2000054c
 8000db4:	20000550 	.word	0x20000550
 8000db8:	20000554 	.word	0x20000554

08000dbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b094      	sub	sp, #80	@ 0x50
 8000dc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc2:	f107 0320 	add.w	r3, r7, #32
 8000dc6:	2230      	movs	r2, #48	@ 0x30
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f007 fa6c 	bl	80082a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd0:	f107 030c 	add.w	r3, r7, #12
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	4b27      	ldr	r3, [pc, #156]	@ (8000e84 <SystemClock_Config+0xc8>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de8:	4a26      	ldr	r2, [pc, #152]	@ (8000e84 <SystemClock_Config+0xc8>)
 8000dea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df0:	4b24      	ldr	r3, [pc, #144]	@ (8000e84 <SystemClock_Config+0xc8>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <SystemClock_Config+0xcc>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a20      	ldr	r2, [pc, #128]	@ (8000e88 <SystemClock_Config+0xcc>)
 8000e06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e88 <SystemClock_Config+0xcc>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e22:	2302      	movs	r3, #2
 8000e24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e26:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e2c:	2319      	movs	r3, #25
 8000e2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e30:	23a8      	movs	r3, #168	@ 0xa8
 8000e32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3c:	f107 0320 	add.w	r3, r7, #32
 8000e40:	4618      	mov	r0, r3
 8000e42:	f003 f977 	bl	8004134 <HAL_RCC_OscConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e4c:	f000 fa58 	bl	8001300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e50:	230f      	movs	r3, #15
 8000e52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e54:	2302      	movs	r3, #2
 8000e56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	2102      	movs	r1, #2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f003 fbd9 	bl	8004624 <HAL_RCC_ClockConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e78:	f000 fa42 	bl	8001300 <Error_Handler>
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3750      	adds	r7, #80	@ 0x50
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40007000 	.word	0x40007000

08000e8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e92:	463b      	mov	r3, r7
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e9e:	4b36      	ldr	r3, [pc, #216]	@ (8000f78 <MX_ADC1_Init+0xec>)
 8000ea0:	4a36      	ldr	r2, [pc, #216]	@ (8000f7c <MX_ADC1_Init+0xf0>)
 8000ea2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ea4:	4b34      	ldr	r3, [pc, #208]	@ (8000f78 <MX_ADC1_Init+0xec>)
 8000ea6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000eaa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eac:	4b32      	ldr	r3, [pc, #200]	@ (8000f78 <MX_ADC1_Init+0xec>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000eb2:	4b31      	ldr	r3, [pc, #196]	@ (8000f78 <MX_ADC1_Init+0xec>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eb8:	4b2f      	ldr	r3, [pc, #188]	@ (8000f78 <MX_ADC1_Init+0xec>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ebe:	4b2e      	ldr	r3, [pc, #184]	@ (8000f78 <MX_ADC1_Init+0xec>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ec6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f78 <MX_ADC1_Init+0xec>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8000f78 <MX_ADC1_Init+0xec>)
 8000ece:	4a2c      	ldr	r2, [pc, #176]	@ (8000f80 <MX_ADC1_Init+0xf4>)
 8000ed0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed2:	4b29      	ldr	r3, [pc, #164]	@ (8000f78 <MX_ADC1_Init+0xec>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000ed8:	4b27      	ldr	r3, [pc, #156]	@ (8000f78 <MX_ADC1_Init+0xec>)
 8000eda:	2204      	movs	r2, #4
 8000edc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ede:	4b26      	ldr	r3, [pc, #152]	@ (8000f78 <MX_ADC1_Init+0xec>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee6:	4b24      	ldr	r3, [pc, #144]	@ (8000f78 <MX_ADC1_Init+0xec>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eec:	4822      	ldr	r0, [pc, #136]	@ (8000f78 <MX_ADC1_Init+0xec>)
 8000eee:	f001 f943 	bl	8002178 <HAL_ADC_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ef8:	f000 fa02 	bl	8001300 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	481a      	ldr	r0, [pc, #104]	@ (8000f78 <MX_ADC1_Init+0xec>)
 8000f0e:	f001 fb99 	bl	8002644 <HAL_ADC_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f18:	f000 f9f2 	bl	8001300 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f24:	463b      	mov	r3, r7
 8000f26:	4619      	mov	r1, r3
 8000f28:	4813      	ldr	r0, [pc, #76]	@ (8000f78 <MX_ADC1_Init+0xec>)
 8000f2a:	f001 fb8b 	bl	8002644 <HAL_ADC_ConfigChannel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f34:	f000 f9e4 	bl	8001300 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f38:	2305      	movs	r3, #5
 8000f3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f40:	463b      	mov	r3, r7
 8000f42:	4619      	mov	r1, r3
 8000f44:	480c      	ldr	r0, [pc, #48]	@ (8000f78 <MX_ADC1_Init+0xec>)
 8000f46:	f001 fb7d 	bl	8002644 <HAL_ADC_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000f50:	f000 f9d6 	bl	8001300 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f54:	2306      	movs	r3, #6
 8000f56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	@ (8000f78 <MX_ADC1_Init+0xec>)
 8000f62:	f001 fb6f 	bl	8002644 <HAL_ADC_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000f6c:	f000 f9c8 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200003c0 	.word	0x200003c0
 8000f7c:	40012000 	.word	0x40012000
 8000f80:	0f000001 	.word	0x0f000001

08000f84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f88:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000f8a:	4a13      	ldr	r2, [pc, #76]	@ (8000fd8 <MX_I2C1_Init+0x54>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000f90:	4a12      	ldr	r2, [pc, #72]	@ (8000fdc <MX_I2C1_Init+0x58>)
 8000f92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000fa2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fa6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000fc2:	f002 fc19 	bl	80037f8 <HAL_I2C_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fcc:	f000 f998 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000468 	.word	0x20000468
 8000fd8:	40005400 	.word	0x40005400
 8000fdc:	000186a0 	.word	0x000186a0

08000fe0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fe4:	4b17      	ldr	r3, [pc, #92]	@ (8001044 <MX_SPI1_Init+0x64>)
 8000fe6:	4a18      	ldr	r2, [pc, #96]	@ (8001048 <MX_SPI1_Init+0x68>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fea:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <MX_SPI1_Init+0x64>)
 8000fec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ff0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ff2:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <MX_SPI1_Init+0x64>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <MX_SPI1_Init+0x64>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <MX_SPI1_Init+0x64>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001004:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <MX_SPI1_Init+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800100a:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <MX_SPI1_Init+0x64>)
 800100c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001010:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001012:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <MX_SPI1_Init+0x64>)
 8001014:	2210      	movs	r2, #16
 8001016:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001018:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <MX_SPI1_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800101e:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <MX_SPI1_Init+0x64>)
 8001020:	2200      	movs	r2, #0
 8001022:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001024:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <MX_SPI1_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <MX_SPI1_Init+0x64>)
 800102c:	220a      	movs	r2, #10
 800102e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001030:	4804      	ldr	r0, [pc, #16]	@ (8001044 <MX_SPI1_Init+0x64>)
 8001032:	f003 fd09 	bl	8004a48 <HAL_SPI_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800103c:	f000 f960 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200004bc 	.word	0x200004bc
 8001048:	40013000 	.word	0x40013000

0800104c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <MX_DMA_Init+0x3c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a0b      	ldr	r2, [pc, #44]	@ (8001088 <MX_DMA_Init+0x3c>)
 800105c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_DMA_Init+0x3c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2105      	movs	r1, #5
 8001072:	2038      	movs	r0, #56	@ 0x38
 8001074:	f001 fe58 	bl	8002d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001078:	2038      	movs	r0, #56	@ 0x38
 800107a:	f001 fe71 	bl	8002d60 <HAL_NVIC_EnableIRQ>

}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800

0800108c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001194 <MX_GPIO_Init+0x108>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a3a      	ldr	r2, [pc, #232]	@ (8001194 <MX_GPIO_Init+0x108>)
 80010ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b38      	ldr	r3, [pc, #224]	@ (8001194 <MX_GPIO_Init+0x108>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	4b34      	ldr	r3, [pc, #208]	@ (8001194 <MX_GPIO_Init+0x108>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a33      	ldr	r2, [pc, #204]	@ (8001194 <MX_GPIO_Init+0x108>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b31      	ldr	r3, [pc, #196]	@ (8001194 <MX_GPIO_Init+0x108>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	4b2d      	ldr	r3, [pc, #180]	@ (8001194 <MX_GPIO_Init+0x108>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001194 <MX_GPIO_Init+0x108>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001194 <MX_GPIO_Init+0x108>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|CE_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2103      	movs	r1, #3
 80010fa:	4827      	ldr	r0, [pc, #156]	@ (8001198 <MX_GPIO_Init+0x10c>)
 80010fc:	f002 fb4a 	bl	8003794 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin CE_Pin */
  GPIO_InitStruct.Pin = CS_Pin|CE_Pin;
 8001100:	2303      	movs	r3, #3
 8001102:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	4619      	mov	r1, r3
 8001116:	4820      	ldr	r0, [pc, #128]	@ (8001198 <MX_GPIO_Init+0x10c>)
 8001118:	f002 f9a0 	bl	800345c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 800111c:	2304      	movs	r3, #4
 800111e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	4619      	mov	r1, r3
 800112e:	481a      	ldr	r0, [pc, #104]	@ (8001198 <MX_GPIO_Init+0x10c>)
 8001130:	f002 f994 	bl	800345c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 BACK_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|BACK_Pin;
 8001134:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001138:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800113a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800113e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001140:	2301      	movs	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	4619      	mov	r1, r3
 800114a:	4813      	ldr	r0, [pc, #76]	@ (8001198 <MX_GPIO_Init+0x10c>)
 800114c:	f002 f986 	bl	800345c <HAL_GPIO_Init>

  /*Configure GPIO pins : SELECT_Pin DOWN_Pin UP_Pin HOME_Pin */
  GPIO_InitStruct.Pin = SELECT_Pin|DOWN_Pin|UP_Pin|HOME_Pin;
 8001150:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001154:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001156:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800115a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115c:	2301      	movs	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	4619      	mov	r1, r3
 8001166:	480d      	ldr	r0, [pc, #52]	@ (800119c <MX_GPIO_Init+0x110>)
 8001168:	f002 f978 	bl	800345c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2105      	movs	r1, #5
 8001170:	2017      	movs	r0, #23
 8001172:	f001 fdd9 	bl	8002d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001176:	2017      	movs	r0, #23
 8001178:	f001 fdf2 	bl	8002d60 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2105      	movs	r1, #5
 8001180:	2028      	movs	r0, #40	@ 0x28
 8001182:	f001 fdd1 	bl	8002d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001186:	2028      	movs	r0, #40	@ 0x28
 8001188:	f001 fdea 	bl	8002d60 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40023800 	.word	0x40023800
 8001198:	40020400 	.word	0x40020400
 800119c:	40020000 	.word	0x40020000

080011a0 <NRF_Task>:

/* USER CODE BEGIN 4 */
void NRF_Task(void *argument)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b092      	sub	sp, #72	@ 0x48
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	char cmdBuf[64];
	while(1)
	{

		if (xQueueReceive(commandQueue, &cmdBuf, portMAX_DELAY) == pdPASS)
 80011a8:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <NRF_Task+0x30>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f107 0108 	add.w	r1, r7, #8
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	4618      	mov	r0, r3
 80011b6:	f005 f811 	bl	80061dc <xQueueReceive>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d1f3      	bne.n	80011a8 <NRF_Task+0x8>
		{
		   Two_Way_Commuination_RTOS(&hspi1, (uint8_t*)cmdBuf, spi_rx);
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	4a03      	ldr	r2, [pc, #12]	@ (80011d4 <NRF_Task+0x34>)
 80011c6:	4619      	mov	r1, r3
 80011c8:	4803      	ldr	r0, [pc, #12]	@ (80011d8 <NRF_Task+0x38>)
 80011ca:	f000 fae3 	bl	8001794 <Two_Way_Commuination_RTOS>
		if (xQueueReceive(commandQueue, &cmdBuf, portMAX_DELAY) == pdPASS)
 80011ce:	e7eb      	b.n	80011a8 <NRF_Task+0x8>
 80011d0:	20000518 	.word	0x20000518
 80011d4:	2000051c 	.word	0x2000051c
 80011d8:	200004bc 	.word	0x200004bc

080011dc <LCD_Task>:
		}
	}
}

void LCD_Task(void *argument)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		vTaskDelay(pdMS_TO_TICKS(1));
 80011e4:	2001      	movs	r0, #1
 80011e6:	f005 fcc3 	bl	8006b70 <vTaskDelay>
 80011ea:	e7fb      	b.n	80011e4 <LCD_Task+0x8>

080011ec <Button_Task>:
	}
}

void Button_Task(void *argument)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	for(;;)
	{
	         if(xSemaphoreTake(xUpSem, 0) == pdTRUE)
 80011f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001264 <Button_Task+0x78>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f005 f8d0 	bl	80063a0 <xQueueSemaphoreTake>
 8001200:	4603      	mov	r3, r0
 8001202:	2b01      	cmp	r3, #1
 8001204:	d103      	bne.n	800120e <Button_Task+0x22>
		  	  {
		  		  on_up(&hi2c1);
 8001206:	4818      	ldr	r0, [pc, #96]	@ (8001268 <Button_Task+0x7c>)
 8001208:	f7ff fa3a 	bl	8000680 <on_up>
 800120c:	e025      	b.n	800125a <Button_Task+0x6e>

		  	  }
		  	  else if(xSemaphoreTake(xDownSem, 0) == pdTRUE)
 800120e:	4b17      	ldr	r3, [pc, #92]	@ (800126c <Button_Task+0x80>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f005 f8c3 	bl	80063a0 <xQueueSemaphoreTake>
 800121a:	4603      	mov	r3, r0
 800121c:	2b01      	cmp	r3, #1
 800121e:	d103      	bne.n	8001228 <Button_Task+0x3c>
		  	  {
		  		  on_down(&hi2c1);
 8001220:	4811      	ldr	r0, [pc, #68]	@ (8001268 <Button_Task+0x7c>)
 8001222:	f7ff fa45 	bl	80006b0 <on_down>
 8001226:	e018      	b.n	800125a <Button_Task+0x6e>

		  	  }
		  	  else if(xSemaphoreTake(xBackSem, 0) == pdTRUE)
 8001228:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <Button_Task+0x84>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f005 f8b6 	bl	80063a0 <xQueueSemaphoreTake>
 8001234:	4603      	mov	r3, r0
 8001236:	2b01      	cmp	r3, #1
 8001238:	d103      	bne.n	8001242 <Button_Task+0x56>
		  	  {
		  		  on_back(&hi2c1);
 800123a:	480b      	ldr	r0, [pc, #44]	@ (8001268 <Button_Task+0x7c>)
 800123c:	f7ff fa6a 	bl	8000714 <on_back>
 8001240:	e00b      	b.n	800125a <Button_Task+0x6e>

		  	  }
		  	  else if(xSemaphoreTake(xSelectSem, 0) == pdTRUE)
 8001242:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <Button_Task+0x88>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f005 f8a9 	bl	80063a0 <xQueueSemaphoreTake>
 800124e:	4603      	mov	r3, r0
 8001250:	2b01      	cmp	r3, #1
 8001252:	d102      	bne.n	800125a <Button_Task+0x6e>
		  	  {
		  		  on_select(&hi2c1);
 8001254:	4804      	ldr	r0, [pc, #16]	@ (8001268 <Button_Task+0x7c>)
 8001256:	f7ff fa49 	bl	80006ec <on_select>

		  	  }
	         vTaskDelay(pdMS_TO_TICKS(20)); // debounce
 800125a:	2014      	movs	r0, #20
 800125c:	f005 fc88 	bl	8006b70 <vTaskDelay>
	         if(xSemaphoreTake(xUpSem, 0) == pdTRUE)
 8001260:	e7c8      	b.n	80011f4 <Button_Task+0x8>
 8001262:	bf00      	nop
 8001264:	20000548 	.word	0x20000548
 8001268:	20000468 	.word	0x20000468
 800126c:	2000054c 	.word	0x2000054c
 8001270:	20000554 	.word	0x20000554
 8001274:	20000550 	.word	0x20000550

08001278 <ADC_Task>:
	}
}

void ADC_Task(void *pvParameters)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
    for (;;) {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);  // Wait for DMA complete
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	2001      	movs	r0, #1
 8001286:	f006 fa89 	bl	800779c <ulTaskNotifyTake>
        RC_Input_t input;

        // Use adc_buffer[] safely here
        input.throttle = adc_buffer[0];
 800128a:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <ADC_Task+0x4c>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	81bb      	strh	r3, [r7, #12]
        input.yaw      = adc_buffer[1];
 8001290:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <ADC_Task+0x4c>)
 8001292:	885b      	ldrh	r3, [r3, #2]
 8001294:	81fb      	strh	r3, [r7, #14]
        input.pitch    = adc_buffer[2];
 8001296:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <ADC_Task+0x4c>)
 8001298:	889b      	ldrh	r3, [r3, #4]
 800129a:	823b      	strh	r3, [r7, #16]
        input.roll     = adc_buffer[3];
 800129c:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <ADC_Task+0x4c>)
 800129e:	88db      	ldrh	r3, [r3, #6]
 80012a0:	827b      	strh	r3, [r7, #18]


        //rccommand_process(&input);
        const char *cmdStr = rccommand_process(&input);
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fb4a 	bl	8001940 <rccommand_process>
 80012ac:	6178      	str	r0, [r7, #20]
        if (cmdStr != NULL)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0e5      	beq.n	8001280 <ADC_Task+0x8>
        {
          // Gửi chuỗi vào queue
             xQueueOverwrite(commandQueue, cmdStr);
 80012b4:	4b04      	ldr	r3, [pc, #16]	@ (80012c8 <ADC_Task+0x50>)
 80012b6:	6818      	ldr	r0, [r3, #0]
 80012b8:	2302      	movs	r3, #2
 80012ba:	2200      	movs	r2, #0
 80012bc:	6979      	ldr	r1, [r7, #20]
 80012be:	f004 fdfb 	bl	8005eb8 <xQueueGenericSend>
    for (;;) {
 80012c2:	e7dd      	b.n	8001280 <ADC_Task+0x8>
 80012c4:	200003b8 	.word	0x200003b8
 80012c8:	20000518 	.word	0x20000518

080012cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012d4:	2001      	movs	r0, #1
 80012d6:	f004 fc62 	bl	8005b9e <osDelay>
 80012da:	e7fb      	b.n	80012d4 <StartDefaultTask+0x8>

080012dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a04      	ldr	r2, [pc, #16]	@ (80012fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d101      	bne.n	80012f2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80012ee:	f000 feff 	bl	80020f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40010000 	.word	0x40010000

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <Error_Handler+0x8>

0800130c <Chip_Select>:
#include "main.h"

NRF_MODE nrfmode;

void Chip_Select()
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO, CHIP_SELECT_PIN, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2101      	movs	r1, #1
 8001314:	4802      	ldr	r0, [pc, #8]	@ (8001320 <Chip_Select+0x14>)
 8001316:	f002 fa3d 	bl	8003794 <HAL_GPIO_WritePin>
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40020400 	.word	0x40020400

08001324 <Chip_Deselect>:

void Chip_Deselect()
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO, CHIP_SELECT_PIN, 1);
 8001328:	2201      	movs	r2, #1
 800132a:	2101      	movs	r1, #1
 800132c:	4802      	ldr	r0, [pc, #8]	@ (8001338 <Chip_Deselect+0x14>)
 800132e:	f002 fa31 	bl	8003794 <HAL_GPIO_WritePin>
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40020400 	.word	0x40020400

0800133c <Set_CE_High>:

void Set_CE_High()
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CE_GPIO, CE_PIN, 1);
 8001340:	2201      	movs	r2, #1
 8001342:	2102      	movs	r1, #2
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <Set_CE_High+0x14>)
 8001346:	f002 fa25 	bl	8003794 <HAL_GPIO_WritePin>
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40020400 	.word	0x40020400

08001354 <Set_CE_Low>:

void Set_CE_Low()
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CE_GPIO, CE_PIN, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2102      	movs	r1, #2
 800135c:	4802      	ldr	r0, [pc, #8]	@ (8001368 <Set_CE_Low+0x14>)
 800135e:	f002 fa19 	bl	8003794 <HAL_GPIO_WritePin>
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40020400 	.word	0x40020400

0800136c <WaitForIRQ>:

void WaitForIRQ()
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(IRQ_GPIO, IRQ_PIN) == 1)
 8001370:	bf00      	nop
 8001372:	2104      	movs	r1, #4
 8001374:	4804      	ldr	r0, [pc, #16]	@ (8001388 <WaitForIRQ+0x1c>)
 8001376:	f002 f9f5 	bl	8003764 <HAL_GPIO_ReadPin>
 800137a:	4603      	mov	r3, r0
 800137c:	2b01      	cmp	r3, #1
 800137e:	d0f8      	beq.n	8001372 <WaitForIRQ+0x6>
		;
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40020400 	.word	0x40020400

0800138c <nRF_WriteRegister>:

void nRF_WriteRegister(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t *data, int size)
{
 800138c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001390:	b089      	sub	sp, #36	@ 0x24
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	460b      	mov	r3, r1
 800139c:	72fb      	strb	r3, [r7, #11]
 800139e:	466b      	mov	r3, sp
 80013a0:	461e      	mov	r6, r3
	uint8_t buff[size + 1];
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	1c59      	adds	r1, r3, #1
 80013a6:	1e4b      	subs	r3, r1, #1
 80013a8:	61bb      	str	r3, [r7, #24]
 80013aa:	460a      	mov	r2, r1
 80013ac:	2300      	movs	r3, #0
 80013ae:	4690      	mov	r8, r2
 80013b0:	4699      	mov	r9, r3
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	f04f 0300 	mov.w	r3, #0
 80013ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013c6:	460a      	mov	r2, r1
 80013c8:	2300      	movs	r3, #0
 80013ca:	4614      	mov	r4, r2
 80013cc:	461d      	mov	r5, r3
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	00eb      	lsls	r3, r5, #3
 80013d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013dc:	00e2      	lsls	r2, r4, #3
 80013de:	460b      	mov	r3, r1
 80013e0:	3307      	adds	r3, #7
 80013e2:	08db      	lsrs	r3, r3, #3
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	ebad 0d03 	sub.w	sp, sp, r3
 80013ea:	466b      	mov	r3, sp
 80013ec:	3300      	adds	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
	buff[0] = reg | (1 << 5);
 80013f0:	7afb      	ldrb	r3, [r7, #11]
 80013f2:	f043 0320 	orr.w	r3, r3, #32
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	e00a      	b.n	8001418 <nRF_WriteRegister+0x8c>
	{
		buff[i + 1] = data[i];
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	441a      	add	r2, r3
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	3301      	adds	r3, #1
 800140c:	7811      	ldrb	r1, [r2, #0]
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < size; i++)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3301      	adds	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fa      	ldr	r2, [r7, #28]
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	dbf0      	blt.n	8001402 <nRF_WriteRegister+0x76>
	}
	Chip_Select();
 8001420:	f7ff ff74 	bl	800130c <Chip_Select>
	HAL_SPI_Transmit(hspi, buff, (uint16_t)size + 1, NRF_SPI_TIMEOUT);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	b29b      	uxth	r3, r3
 8001428:	3301      	adds	r3, #1
 800142a:	b29a      	uxth	r2, r3
 800142c:	2364      	movs	r3, #100	@ 0x64
 800142e:	6979      	ldr	r1, [r7, #20]
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f003 fb92 	bl	8004b5a <HAL_SPI_Transmit>
	Chip_Deselect();
 8001436:	f7ff ff75 	bl	8001324 <Chip_Deselect>
 800143a:	46b5      	mov	sp, r6
}
 800143c:	bf00      	nop
 800143e:	3724      	adds	r7, #36	@ 0x24
 8001440:	46bd      	mov	sp, r7
 8001442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001446 <nRF_WriteOneRegister>:

void nRF_WriteOneRegister(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t data)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b084      	sub	sp, #16
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	460b      	mov	r3, r1
 8001450:	70fb      	strb	r3, [r7, #3]
 8001452:	4613      	mov	r3, r2
 8001454:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2];
	buff[0] = reg | (1 << 5);
 8001456:	78fb      	ldrb	r3, [r7, #3]
 8001458:	f043 0320 	orr.w	r3, r3, #32
 800145c:	b2db      	uxtb	r3, r3
 800145e:	733b      	strb	r3, [r7, #12]
	buff[1] = data;
 8001460:	78bb      	ldrb	r3, [r7, #2]
 8001462:	737b      	strb	r3, [r7, #13]
	Chip_Select();
 8001464:	f7ff ff52 	bl	800130c <Chip_Select>
	HAL_SPI_Transmit(hspi, buff, 2, NRF_SPI_TIMEOUT);
 8001468:	f107 010c 	add.w	r1, r7, #12
 800146c:	2364      	movs	r3, #100	@ 0x64
 800146e:	2202      	movs	r2, #2
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f003 fb72 	bl	8004b5a <HAL_SPI_Transmit>
	Chip_Deselect();
 8001476:	f7ff ff55 	bl	8001324 <Chip_Deselect>
}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <nRF_ReadOneRegister>:
	HAL_SPI_Receive(hspi, receive_data, size, NRF_SPI_TIMEOUT * 10);
	Chip_Deselect();
}

void nRF_ReadOneRegister(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t *receive_data)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	460b      	mov	r3, r1
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	72fb      	strb	r3, [r7, #11]

	uint8_t buff = reg;
 8001490:	7afb      	ldrb	r3, [r7, #11]
 8001492:	75fb      	strb	r3, [r7, #23]
	Chip_Select();
 8001494:	f7ff ff3a 	bl	800130c <Chip_Select>
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8001498:	f107 0117 	add.w	r1, r7, #23
 800149c:	2364      	movs	r3, #100	@ 0x64
 800149e:	2201      	movs	r2, #1
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f003 fb5a 	bl	8004b5a <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, receive_data, 1, NRF_SPI_TIMEOUT);
 80014a6:	2364      	movs	r3, #100	@ 0x64
 80014a8:	2201      	movs	r2, #1
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f003 fc98 	bl	8004de2 <HAL_SPI_Receive>
	Chip_Deselect();
 80014b2:	f7ff ff37 	bl	8001324 <Chip_Deselect>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <nRF_SendCmd>:
void nRF_SendCmd(SPI_HandleTypeDef *hspi, uint8_t cmd)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b084      	sub	sp, #16
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	460b      	mov	r3, r1
 80014c8:	70fb      	strb	r3, [r7, #3]

	uint8_t buff = cmd;
 80014ca:	78fb      	ldrb	r3, [r7, #3]
 80014cc:	73fb      	strb	r3, [r7, #15]
	Chip_Select();
 80014ce:	f7ff ff1d 	bl	800130c <Chip_Select>
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 80014d2:	f107 010f 	add.w	r1, r7, #15
 80014d6:	2364      	movs	r3, #100	@ 0x64
 80014d8:	2201      	movs	r2, #1
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f003 fb3d 	bl	8004b5a <HAL_SPI_Transmit>
	Chip_Deselect();
 80014e0:	f7ff ff20 	bl	8001324 <Chip_Deselect>
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <nRF_GetStatus>:

uint8_t nRF_GetStatus(SPI_HandleTypeDef *hspi)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

	uint8_t buff = STATUS;
 80014f4:	2307      	movs	r3, #7
 80014f6:	73fb      	strb	r3, [r7, #15]
	uint8_t rx_data = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	73bb      	strb	r3, [r7, #14]
	Chip_Select();
 80014fc:	f7ff ff06 	bl	800130c <Chip_Select>
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8001500:	f107 010f 	add.w	r1, r7, #15
 8001504:	2364      	movs	r3, #100	@ 0x64
 8001506:	2201      	movs	r2, #1
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f003 fb26 	bl	8004b5a <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &rx_data, 1, NRF_SPI_TIMEOUT * 10);
 800150e:	f107 010e 	add.w	r1, r7, #14
 8001512:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001516:	2201      	movs	r2, #1
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f003 fc62 	bl	8004de2 <HAL_SPI_Receive>
	Chip_Deselect();
 800151e:	f7ff ff01 	bl	8001324 <Chip_Deselect>
	return rx_data;
 8001522:	7bbb      	ldrb	r3, [r7, #14]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <nRF_TX_Payload>:

void nRF_TX_Payload(SPI_HandleTypeDef *hspi, uint8_t *data, uint16_t size)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	4613      	mov	r3, r2
 8001538:	80fb      	strh	r3, [r7, #6]
	Chip_Select();
 800153a:	f7ff fee7 	bl	800130c <Chip_Select>
	uint8_t buff = W_TX_PAYLOAD;
 800153e:	23a0      	movs	r3, #160	@ 0xa0
 8001540:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8001542:	f107 0117 	add.w	r1, r7, #23
 8001546:	2364      	movs	r3, #100	@ 0x64
 8001548:	2201      	movs	r2, #1
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f003 fb05 	bl	8004b5a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, data, size, NRF_SPI_TIMEOUT);
 8001550:	88fa      	ldrh	r2, [r7, #6]
 8001552:	2364      	movs	r3, #100	@ 0x64
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f003 faff 	bl	8004b5a <HAL_SPI_Transmit>
	Chip_Deselect();
 800155c:	f7ff fee2 	bl	8001324 <Chip_Deselect>
}
 8001560:	bf00      	nop
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <nRF_RX_Payload>:

void nRF_RX_Payload(SPI_HandleTypeDef *hspi, uint8_t *rx_data, uint16_t size)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	4613      	mov	r3, r2
 8001574:	80fb      	strh	r3, [r7, #6]
	Chip_Select();
 8001576:	f7ff fec9 	bl	800130c <Chip_Select>
	uint8_t buff = R_RX_PAYLOAD;
 800157a:	2361      	movs	r3, #97	@ 0x61
 800157c:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 800157e:	f107 0117 	add.w	r1, r7, #23
 8001582:	2364      	movs	r3, #100	@ 0x64
 8001584:	2201      	movs	r2, #1
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f003 fae7 	bl	8004b5a <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, rx_data, size, NRF_SPI_TIMEOUT * 10);
 800158c:	88fa      	ldrh	r2, [r7, #6]
 800158e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001592:	68b9      	ldr	r1, [r7, #8]
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f003 fc24 	bl	8004de2 <HAL_SPI_Receive>
	Chip_Deselect();
 800159a:	f7ff fec3 	bl	8001324 <Chip_Deselect>
}
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <Select_Tx_Mode>:
	HAL_Delay(2);
	nrfmode = MODE_TX;
}

void Select_Tx_Mode(SPI_HandleTypeDef *hspi)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	uint8_t buff = 0x0a;
 80015b0:	230a      	movs	r3, #10
 80015b2:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low();
 80015b4:	f7ff fece 	bl	8001354 <Set_CE_Low>
	CONFIG_REG_Write(hspi, buff);
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	4619      	mov	r1, r3
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f907 	bl	80017d0 <CONFIG_REG_Write>
	Set_CE_High();
 80015c2:	f7ff febb 	bl	800133c <Set_CE_High>
	HAL_Delay(2);
 80015c6:	2002      	movs	r0, #2
 80015c8:	f000 fdb2 	bl	8002130 <HAL_Delay>
	nrfmode = MODE_TX;
 80015cc:	4b03      	ldr	r3, [pc, #12]	@ (80015dc <Select_Tx_Mode+0x34>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000558 	.word	0x20000558

080015e0 <Select_Tx_Mode_RTOS>:
	vTaskDelay(pdMS_TO_TICKS(2));
	nrfmode = MODE_TX;
}

void Select_Tx_Mode_RTOS(SPI_HandleTypeDef *hspi)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	uint8_t buff = 0x0a;
 80015e8:	230a      	movs	r3, #10
 80015ea:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low();
 80015ec:	f7ff feb2 	bl	8001354 <Set_CE_Low>
	CONFIG_REG_Write(hspi, buff);
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	4619      	mov	r1, r3
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f8eb 	bl	80017d0 <CONFIG_REG_Write>
	Set_CE_High();
 80015fa:	f7ff fe9f 	bl	800133c <Set_CE_High>
	vTaskDelay(pdMS_TO_TICKS(2));
 80015fe:	2002      	movs	r0, #2
 8001600:	f005 fab6 	bl	8006b70 <vTaskDelay>
	nrfmode = MODE_TX;
 8001604:	4b03      	ldr	r3, [pc, #12]	@ (8001614 <Select_Tx_Mode_RTOS+0x34>)
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000558 	.word	0x20000558

08001618 <Select_Rx_Mode_RTOS>:
	nRF_SendCmd(hspi, FLUSH_RX);
	nrfmode = MODE_RX;
}

void Select_Rx_Mode_RTOS(SPI_HandleTypeDef *hspi)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	uint8_t buff = 0x0b;
 8001620:	230b      	movs	r3, #11
 8001622:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low();
 8001624:	f7ff fe96 	bl	8001354 <Set_CE_Low>
	CONFIG_REG_Write(hspi, buff);
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	4619      	mov	r1, r3
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f8cf 	bl	80017d0 <CONFIG_REG_Write>
	Set_CE_High();
 8001632:	f7ff fe83 	bl	800133c <Set_CE_High>
	vTaskDelay(pdMS_TO_TICKS(2));
 8001636:	2002      	movs	r0, #2
 8001638:	f005 fa9a 	bl	8006b70 <vTaskDelay>
	nrfmode = MODE_RX;
 800163c:	4b03      	ldr	r3, [pc, #12]	@ (800164c <Select_Rx_Mode_RTOS+0x34>)
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000558 	.word	0x20000558

08001650 <Two_Way_Commuination_Pipe0_Config>:
#endif

void Two_Way_Commuination_Pipe0_Config(SPI_HandleTypeDef *hspi, uint64_t tx_addr, uint64_t rx_addr)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	e9c7 2300 	strd	r2, r3, [r7]
	Set_CE_Low();
 800165c:	f7ff fe7a 	bl	8001354 <Set_CE_Low>
	RX_PW_P_NUM_Number_Of_Bytes(hspi, 0, 32);
 8001660:	2220      	movs	r2, #32
 8001662:	2100      	movs	r1, #0
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f000 f933 	bl	80018d0 <RX_PW_P_NUM_Number_Of_Bytes>
	TX_ADDR_Write(hspi, tx_addr);
 800166a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f000 f8fc 	bl	800186c <TX_ADDR_Write>
	RX_ADDR_P0_Write(hspi, rx_addr);
 8001674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f000 f8c5 	bl	8001808 <RX_ADDR_P0_Write>
	nRF_WriteOneRegister(hspi, EN_RXADDR, 1);
 800167e:	2201      	movs	r2, #1
 8001680:	2102      	movs	r1, #2
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f7ff fedf 	bl	8001446 <nRF_WriteOneRegister>
	nRF_WriteOneRegister(hspi, EN_AA, 0x00);
 8001688:	2200      	movs	r2, #0
 800168a:	2101      	movs	r1, #1
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f7ff feda 	bl	8001446 <nRF_WriteOneRegister>
	nRF_WriteOneRegister(hspi, RF_SETUP, 0x7);
 8001692:	2207      	movs	r2, #7
 8001694:	2106      	movs	r1, #6
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f7ff fed5 	bl	8001446 <nRF_WriteOneRegister>
	Set_CE_High();
 800169c:	f7ff fe4e 	bl	800133c <Set_CE_High>
	HAL_Delay(2);
 80016a0:	2002      	movs	r0, #2
 80016a2:	f000 fd45 	bl	8002130 <HAL_Delay>
}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <TX_Communication>:
	Set_CE_High();
	HAL_Delay(2);
}

uint8_t TX_Communication(SPI_HandleTypeDef *hspi, uint8_t *data)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
	if (nrfmode == MODE_TX)
 80016ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001734 <TX_Communication+0x84>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d133      	bne.n	800172a <TX_Communication+0x7a>
	{
		nRF_TX_Payload(hspi, data, 32);
 80016c2:	2220      	movs	r2, #32
 80016c4:	6839      	ldr	r1, [r7, #0]
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ff30 	bl	800152c <nRF_TX_Payload>
		Set_CE_High();
 80016cc:	f7ff fe36 	bl	800133c <Set_CE_High>
		WaitForIRQ();
 80016d0:	f7ff fe4c 	bl	800136c <WaitForIRQ>
		nRF_SendCmd(hspi, FLUSH_TX);
 80016d4:	21e1      	movs	r1, #225	@ 0xe1
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fef1 	bl	80014be <nRF_SendCmd>
		uint8_t status = nRF_GetStatus(hspi);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff05 	bl	80014ec <nRF_GetStatus>
 80016e2:	4603      	mov	r3, r0
 80016e4:	73fb      	strb	r3, [r7, #15]
		if ((status & (1 << MAX_RT)) != 0)
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00b      	beq.n	8001708 <TX_Communication+0x58>
		{
			status |= ((1 << MAX_RT) | (1 << TX_FULL));
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	f043 0311 	orr.w	r3, r3, #17
 80016f6:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(hspi, STATUS, status);
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	461a      	mov	r2, r3
 80016fc:	2107      	movs	r1, #7
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fea1 	bl	8001446 <nRF_WriteOneRegister>
			return STATUS_TX_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e011      	b.n	800172c <TX_Communication+0x7c>
		}
		else if ((status & (1 << 5)) != 0)
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	f003 0320 	and.w	r3, r3, #32
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00b      	beq.n	800172a <TX_Communication+0x7a>
		{
			status |= ((1 << TX_DS) | (1 << TX_FULL));
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 8001718:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(hspi, STATUS, status);
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	461a      	mov	r2, r3
 800171e:	2107      	movs	r1, #7
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff fe90 	bl	8001446 <nRF_WriteOneRegister>
			return STATUS_TX_OK;
 8001726:	2302      	movs	r3, #2
 8001728:	e000      	b.n	800172c <TX_Communication+0x7c>
		}
	}
	return STATUS_TX_NONDEFINE;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000558 	.word	0x20000558

08001738 <RX_Communication>:

uint8_t RX_Communication(SPI_HandleTypeDef *hspi, uint8_t *rx_data)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
	if (nrfmode == MODE_RX)
 8001742:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <RX_Communication+0x58>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d11d      	bne.n	8001786 <RX_Communication+0x4e>
	{
		Set_CE_High();
 800174a:	f7ff fdf7 	bl	800133c <Set_CE_High>
		uint8_t status = nRF_GetStatus(hspi);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fecc 	bl	80014ec <nRF_GetStatus>
 8001754:	4603      	mov	r3, r0
 8001756:	73fb      	strb	r3, [r7, #15]
		if ((status & (1 << RX_DR)) != 0)
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00b      	beq.n	800177a <RX_Communication+0x42>
		{
			nRF_WriteOneRegister(hspi, STATUS, (1 << 6));
 8001762:	2240      	movs	r2, #64	@ 0x40
 8001764:	2107      	movs	r1, #7
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fe6d 	bl	8001446 <nRF_WriteOneRegister>
			nRF_RX_Payload(hspi, rx_data, 32);
 800176c:	2220      	movs	r2, #32
 800176e:	6839      	ldr	r1, [r7, #0]
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff fef9 	bl	8001568 <nRF_RX_Payload>
			return STATUS_RX_OK;
 8001776:	2302      	movs	r3, #2
 8001778:	e006      	b.n	8001788 <RX_Communication+0x50>
		}
		nRF_SendCmd(hspi, FLUSH_RX);
 800177a:	21e2      	movs	r1, #226	@ 0xe2
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fe9e 	bl	80014be <nRF_SendCmd>
		return STATUS_RX_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <RX_Communication+0x50>
	}
	return STATUS_RX_NONEDEFINE;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000558 	.word	0x20000558

08001794 <Two_Way_Commuination_RTOS>:
	Select_Tx_Mode_RTOS(hspi);
	HAL_Delay(10);
}

void Two_Way_Commuination_RTOS(SPI_HandleTypeDef *hspi,uint8_t *tx_data,uint8_t *rx_data)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
	TX_Communication(hspi,tx_data);
 80017a0:	68b9      	ldr	r1, [r7, #8]
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f7ff ff84 	bl	80016b0 <TX_Communication>
	Select_Rx_Mode_RTOS(hspi);
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f7ff ff35 	bl	8001618 <Select_Rx_Mode_RTOS>
	vTaskDelay(pdMS_TO_TICKS(50));
 80017ae:	2032      	movs	r0, #50	@ 0x32
 80017b0:	f005 f9de 	bl	8006b70 <vTaskDelay>
	RX_Communication(hspi,rx_data);
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f7ff ffbe 	bl	8001738 <RX_Communication>
	Select_Tx_Mode_RTOS(hspi);
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f7ff ff0f 	bl	80015e0 <Select_Tx_Mode_RTOS>
	vTaskDelay(pdMS_TO_TICKS(10));
 80017c2:	200a      	movs	r0, #10
 80017c4:	f005 f9d4 	bl	8006b70 <vTaskDelay>
}
 80017c8:	bf00      	nop
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <CONFIG_REG_Write>:

void CONFIG_REG_Write(SPI_HandleTypeDef *hspi, uint8_t data)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	70fb      	strb	r3, [r7, #3]
	uint8_t read_reg;
	do
	{
		nRF_WriteOneRegister(hspi, CONFIG, data);
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	461a      	mov	r2, r3
 80017e0:	2100      	movs	r1, #0
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff fe2f 	bl	8001446 <nRF_WriteOneRegister>
		nRF_ReadOneRegister(hspi, CONFIG, &read_reg);
 80017e8:	f107 030f 	add.w	r3, r7, #15
 80017ec:	461a      	mov	r2, r3
 80017ee:	2100      	movs	r1, #0
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff fe46 	bl	8001482 <nRF_ReadOneRegister>
	} while (read_reg != data);
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
 80017f8:	78fa      	ldrb	r2, [r7, #3]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d1ee      	bne.n	80017dc <CONFIG_REG_Write+0xc>
}
 80017fe:	bf00      	nop
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <RX_ADDR_P0_Write>:
{
	nRF_WriteOneRegister(hspi, EN_AA, pipe & 0x3F);
}

void RX_ADDR_P0_Write(SPI_HandleTypeDef *hspi, uint64_t data)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	@ 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t buff[5];
	uint64_t temp = data;
 8001814:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001818:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	e016      	b.n	8001850 <RX_ADDR_P0_Write+0x48>
	{
		buff[i] = (uint8_t)((temp) & 0xff);
 8001822:	f897 1020 	ldrb.w	r1, [r7, #32]
 8001826:	f107 0214 	add.w	r2, r7, #20
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	4413      	add	r3, r2
 800182e:	460a      	mov	r2, r1
 8001830:	701a      	strb	r2, [r3, #0]
		temp = temp >> 8;
 8001832:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	0a02      	lsrs	r2, r0, #8
 8001840:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001844:	0a0b      	lsrs	r3, r1, #8
 8001846:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3301      	adds	r3, #1
 800184e:	61fb      	str	r3, [r7, #28]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	2b04      	cmp	r3, #4
 8001854:	dde5      	ble.n	8001822 <RX_ADDR_P0_Write+0x1a>
	}
	nRF_WriteRegister(hspi, RX_ADDR_P0, buff, 5);
 8001856:	f107 0214 	add.w	r2, r7, #20
 800185a:	2305      	movs	r3, #5
 800185c:	210a      	movs	r1, #10
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f7ff fd94 	bl	800138c <nRF_WriteRegister>
}
 8001864:	bf00      	nop
 8001866:	3728      	adds	r7, #40	@ 0x28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <TX_ADDR_Write>:
	}
	nRF_WriteOneRegister(hspi, reg, data);
}

void TX_ADDR_Write(SPI_HandleTypeDef *hspi, uint64_t data)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	@ 0x28
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t buff[5];
	uint64_t temp = data;
 8001878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800187c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	e016      	b.n	80018b4 <TX_ADDR_Write+0x48>
	{
		buff[i] = (uint8_t)((temp) & 0xff);
 8001886:	f897 1020 	ldrb.w	r1, [r7, #32]
 800188a:	f107 0214 	add.w	r2, r7, #20
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	4413      	add	r3, r2
 8001892:	460a      	mov	r2, r1
 8001894:	701a      	strb	r2, [r3, #0]
		temp = temp >> 8;
 8001896:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	0a02      	lsrs	r2, r0, #8
 80018a4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80018a8:	0a0b      	lsrs	r3, r1, #8
 80018aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3301      	adds	r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	dde5      	ble.n	8001886 <TX_ADDR_Write+0x1a>
	}
	nRF_WriteRegister(hspi, TX_ADDR, buff, 5);
 80018ba:	f107 0214 	add.w	r2, r7, #20
 80018be:	2305      	movs	r3, #5
 80018c0:	2110      	movs	r1, #16
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f7ff fd62 	bl	800138c <nRF_WriteRegister>
}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	@ 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <RX_PW_P_NUM_Number_Of_Bytes>:

void RX_PW_P_NUM_Number_Of_Bytes(SPI_HandleTypeDef *hspi, int num, uint8_t data)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	4613      	mov	r3, r2
 80018dc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	switch (num)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d828      	bhi.n	8001936 <RX_PW_P_NUM_Number_Of_Bytes+0x66>
 80018e4:	a201      	add	r2, pc, #4	@ (adr r2, 80018ec <RX_PW_P_NUM_Number_Of_Bytes+0x1c>)
 80018e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ea:	bf00      	nop
 80018ec:	08001905 	.word	0x08001905
 80018f0:	0800190b 	.word	0x0800190b
 80018f4:	08001911 	.word	0x08001911
 80018f8:	08001917 	.word	0x08001917
 80018fc:	0800191d 	.word	0x0800191d
 8001900:	08001923 	.word	0x08001923
	{
	case 0:
		reg = RX_PW_P0;
 8001904:	2311      	movs	r3, #17
 8001906:	75fb      	strb	r3, [r7, #23]
		break;
 8001908:	e00e      	b.n	8001928 <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 1:
		reg = RX_PW_P1;
 800190a:	2312      	movs	r3, #18
 800190c:	75fb      	strb	r3, [r7, #23]
		break;
 800190e:	e00b      	b.n	8001928 <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 2:
		reg = RX_PW_P2;
 8001910:	2313      	movs	r3, #19
 8001912:	75fb      	strb	r3, [r7, #23]
		break;
 8001914:	e008      	b.n	8001928 <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 3:
		reg = RX_PW_P3;
 8001916:	2314      	movs	r3, #20
 8001918:	75fb      	strb	r3, [r7, #23]
		break;
 800191a:	e005      	b.n	8001928 <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 4:
		reg = RX_PW_P4;
 800191c:	2315      	movs	r3, #21
 800191e:	75fb      	strb	r3, [r7, #23]
		break;
 8001920:	e002      	b.n	8001928 <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 5:
		reg = RX_PW_P5;
 8001922:	2316      	movs	r3, #22
 8001924:	75fb      	strb	r3, [r7, #23]
		break;
 8001926:	bf00      	nop
	default:
		return;
	}
	nRF_WriteOneRegister(hspi, reg, data);
 8001928:	79fa      	ldrb	r2, [r7, #7]
 800192a:	7dfb      	ldrb	r3, [r7, #23]
 800192c:	4619      	mov	r1, r3
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f7ff fd89 	bl	8001446 <nRF_WriteOneRegister>
 8001934:	e000      	b.n	8001938 <RX_PW_P_NUM_Number_Of_Bytes+0x68>
		return;
 8001936:	bf00      	nop
}
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop

08001940 <rccommand_process>:
{
    lastCmd = RC_CMD_NONE;
}

const char* rccommand_process(const RC_Input_t *input)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
    RC_Command_t cmd = RC_CMD_NONE;
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]

    // Throttle (UP/DOWN)
    if (input->throttle > CENTER + THRESHOLD)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	f640 122c 	movw	r2, #2348	@ 0x92c
 8001954:	4293      	cmp	r3, r2
 8001956:	d904      	bls.n	8001962 <rccommand_process+0x22>
        cmd |= RC_CMD_UP;
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e009      	b.n	8001976 <rccommand_process+0x36>
    else if (input->throttle < CENTER - THRESHOLD)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	f240 62d3 	movw	r2, #1747	@ 0x6d3
 800196a:	4293      	cmp	r3, r2
 800196c:	d803      	bhi.n	8001976 <rccommand_process+0x36>
        cmd |= RC_CMD_DOWN;
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	73fb      	strb	r3, [r7, #15]

    // Yaw (rotate)
    if (input->yaw > CENTER + THRESHOLD)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	885b      	ldrh	r3, [r3, #2]
 800197a:	f640 122c 	movw	r2, #2348	@ 0x92c
 800197e:	4293      	cmp	r3, r2
 8001980:	d904      	bls.n	800198c <rccommand_process+0x4c>
        cmd |= RC_CMD_YAW_RIGHT;
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001988:	73fb      	strb	r3, [r7, #15]
 800198a:	e009      	b.n	80019a0 <rccommand_process+0x60>
    else if (input->yaw < CENTER - THRESHOLD)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	885b      	ldrh	r3, [r3, #2]
 8001990:	f240 62d3 	movw	r2, #1747	@ 0x6d3
 8001994:	4293      	cmp	r3, r2
 8001996:	d803      	bhi.n	80019a0 <rccommand_process+0x60>
        cmd |= RC_CMD_YAW_LEFT;
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800199e:	73fb      	strb	r3, [r7, #15]

    // Pitch (FORWARD/BACKWARD)
    if (input->pitch > CENTER + THRESHOLD)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	889b      	ldrh	r3, [r3, #4]
 80019a4:	f640 122c 	movw	r2, #2348	@ 0x92c
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d904      	bls.n	80019b6 <rccommand_process+0x76>
        cmd |= RC_CMD_FORWARD;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	f043 0310 	orr.w	r3, r3, #16
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	e009      	b.n	80019ca <rccommand_process+0x8a>
    else if (input->pitch < CENTER - THRESHOLD)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	889b      	ldrh	r3, [r3, #4]
 80019ba:	f240 62d3 	movw	r2, #1747	@ 0x6d3
 80019be:	4293      	cmp	r3, r2
 80019c0:	d803      	bhi.n	80019ca <rccommand_process+0x8a>
        cmd |= RC_CMD_BACKWARD;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	f043 0320 	orr.w	r3, r3, #32
 80019c8:	73fb      	strb	r3, [r7, #15]

    // Roll (LEFT/RIGHT)
    if (input->roll > CENTER + THRESHOLD)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	88db      	ldrh	r3, [r3, #6]
 80019ce:	f640 122c 	movw	r2, #2348	@ 0x92c
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d904      	bls.n	80019e0 <rccommand_process+0xa0>
        cmd |= RC_CMD_RIGHT;
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	f043 0308 	orr.w	r3, r3, #8
 80019dc:	73fb      	strb	r3, [r7, #15]
 80019de:	e009      	b.n	80019f4 <rccommand_process+0xb4>
    else if (input->roll < CENTER - THRESHOLD)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	88db      	ldrh	r3, [r3, #6]
 80019e4:	f240 62d3 	movw	r2, #1747	@ 0x6d3
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d803      	bhi.n	80019f4 <rccommand_process+0xb4>
        cmd |= RC_CMD_LEFT;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	f043 0304 	orr.w	r3, r3, #4
 80019f2:	73fb      	strb	r3, [r7, #15]

    static char buf[64];
        buf[0] = '\0';
 80019f4:	4b6e      	ldr	r3, [pc, #440]	@ (8001bb0 <rccommand_process+0x270>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
        strcat(buf, "CMD:");
 80019fa:	486d      	ldr	r0, [pc, #436]	@ (8001bb0 <rccommand_process+0x270>)
 80019fc:	f7fe fbf0 	bl	80001e0 <strlen>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b6a      	ldr	r3, [pc, #424]	@ (8001bb0 <rccommand_process+0x270>)
 8001a06:	4413      	add	r3, r2
 8001a08:	4a6a      	ldr	r2, [pc, #424]	@ (8001bb4 <rccommand_process+0x274>)
 8001a0a:	6810      	ldr	r0, [r2, #0]
 8001a0c:	6018      	str	r0, [r3, #0]
 8001a0e:	7912      	ldrb	r2, [r2, #4]
 8001a10:	711a      	strb	r2, [r3, #4]

        if (cmd == RC_CMD_NONE) {
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d10c      	bne.n	8001a32 <rccommand_process+0xf2>
            strcat(buf, "STOP");
 8001a18:	4865      	ldr	r0, [pc, #404]	@ (8001bb0 <rccommand_process+0x270>)
 8001a1a:	f7fe fbe1 	bl	80001e0 <strlen>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b63      	ldr	r3, [pc, #396]	@ (8001bb0 <rccommand_process+0x270>)
 8001a24:	4413      	add	r3, r2
 8001a26:	4a64      	ldr	r2, [pc, #400]	@ (8001bb8 <rccommand_process+0x278>)
 8001a28:	6810      	ldr	r0, [r2, #0]
 8001a2a:	6018      	str	r0, [r3, #0]
 8001a2c:	7912      	ldrb	r2, [r2, #4]
 8001a2e:	711a      	strb	r2, [r3, #4]
 8001a30:	e0a3      	b.n	8001b7a <rccommand_process+0x23a>
        } else {
            if (cmd & RC_CMD_UP)         strcat(buf, "UP|");
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d009      	beq.n	8001a50 <rccommand_process+0x110>
 8001a3c:	485c      	ldr	r0, [pc, #368]	@ (8001bb0 <rccommand_process+0x270>)
 8001a3e:	f7fe fbcf 	bl	80001e0 <strlen>
 8001a42:	4603      	mov	r3, r0
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b5a      	ldr	r3, [pc, #360]	@ (8001bb0 <rccommand_process+0x270>)
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a5c      	ldr	r2, [pc, #368]	@ (8001bbc <rccommand_process+0x27c>)
 8001a4c:	6810      	ldr	r0, [r2, #0]
 8001a4e:	6018      	str	r0, [r3, #0]
            if (cmd & RC_CMD_DOWN)       strcat(buf, "DOWN|");
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <rccommand_process+0x132>
 8001a5a:	4855      	ldr	r0, [pc, #340]	@ (8001bb0 <rccommand_process+0x270>)
 8001a5c:	f7fe fbc0 	bl	80001e0 <strlen>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b52      	ldr	r3, [pc, #328]	@ (8001bb0 <rccommand_process+0x270>)
 8001a66:	4413      	add	r3, r2
 8001a68:	4a55      	ldr	r2, [pc, #340]	@ (8001bc0 <rccommand_process+0x280>)
 8001a6a:	6810      	ldr	r0, [r2, #0]
 8001a6c:	6018      	str	r0, [r3, #0]
 8001a6e:	8892      	ldrh	r2, [r2, #4]
 8001a70:	809a      	strh	r2, [r3, #4]
            if (cmd & RC_CMD_LEFT)       strcat(buf, "LEFT|");
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00b      	beq.n	8001a94 <rccommand_process+0x154>
 8001a7c:	484c      	ldr	r0, [pc, #304]	@ (8001bb0 <rccommand_process+0x270>)
 8001a7e:	f7fe fbaf 	bl	80001e0 <strlen>
 8001a82:	4603      	mov	r3, r0
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b4a      	ldr	r3, [pc, #296]	@ (8001bb0 <rccommand_process+0x270>)
 8001a88:	4413      	add	r3, r2
 8001a8a:	4a4e      	ldr	r2, [pc, #312]	@ (8001bc4 <rccommand_process+0x284>)
 8001a8c:	6810      	ldr	r0, [r2, #0]
 8001a8e:	6018      	str	r0, [r3, #0]
 8001a90:	8892      	ldrh	r2, [r2, #4]
 8001a92:	809a      	strh	r2, [r3, #4]
            if (cmd & RC_CMD_RIGHT)      strcat(buf, "RIGHT|");
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00d      	beq.n	8001aba <rccommand_process+0x17a>
 8001a9e:	4844      	ldr	r0, [pc, #272]	@ (8001bb0 <rccommand_process+0x270>)
 8001aa0:	f7fe fb9e 	bl	80001e0 <strlen>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b41      	ldr	r3, [pc, #260]	@ (8001bb0 <rccommand_process+0x270>)
 8001aaa:	4413      	add	r3, r2
 8001aac:	4a46      	ldr	r2, [pc, #280]	@ (8001bc8 <rccommand_process+0x288>)
 8001aae:	6810      	ldr	r0, [r2, #0]
 8001ab0:	6018      	str	r0, [r3, #0]
 8001ab2:	8891      	ldrh	r1, [r2, #4]
 8001ab4:	7992      	ldrb	r2, [r2, #6]
 8001ab6:	8099      	strh	r1, [r3, #4]
 8001ab8:	719a      	strb	r2, [r3, #6]
            if (cmd & RC_CMD_FORWARD)    strcat(buf, "FORWARD|");
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	f003 0310 	and.w	r3, r3, #16
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00e      	beq.n	8001ae2 <rccommand_process+0x1a2>
 8001ac4:	483a      	ldr	r0, [pc, #232]	@ (8001bb0 <rccommand_process+0x270>)
 8001ac6:	f7fe fb8b 	bl	80001e0 <strlen>
 8001aca:	4603      	mov	r3, r0
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b38      	ldr	r3, [pc, #224]	@ (8001bb0 <rccommand_process+0x270>)
 8001ad0:	4413      	add	r3, r2
 8001ad2:	493e      	ldr	r1, [pc, #248]	@ (8001bcc <rccommand_process+0x28c>)
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	cb03      	ldmia	r3!, {r0, r1}
 8001ada:	6010      	str	r0, [r2, #0]
 8001adc:	6051      	str	r1, [r2, #4]
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	7213      	strb	r3, [r2, #8]
            if (cmd & RC_CMD_BACKWARD)   strcat(buf, "BACKWARD|");
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	f003 0320 	and.w	r3, r3, #32
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00e      	beq.n	8001b0a <rccommand_process+0x1ca>
 8001aec:	4830      	ldr	r0, [pc, #192]	@ (8001bb0 <rccommand_process+0x270>)
 8001aee:	f7fe fb77 	bl	80001e0 <strlen>
 8001af2:	4603      	mov	r3, r0
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb0 <rccommand_process+0x270>)
 8001af8:	4413      	add	r3, r2
 8001afa:	4935      	ldr	r1, [pc, #212]	@ (8001bd0 <rccommand_process+0x290>)
 8001afc:	461a      	mov	r2, r3
 8001afe:	460b      	mov	r3, r1
 8001b00:	cb03      	ldmia	r3!, {r0, r1}
 8001b02:	6010      	str	r0, [r2, #0]
 8001b04:	6051      	str	r1, [r2, #4]
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	8113      	strh	r3, [r2, #8]
            if (cmd & RC_CMD_YAW_LEFT)   strcat(buf, "YAW_LEFT|");
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00e      	beq.n	8001b32 <rccommand_process+0x1f2>
 8001b14:	4826      	ldr	r0, [pc, #152]	@ (8001bb0 <rccommand_process+0x270>)
 8001b16:	f7fe fb63 	bl	80001e0 <strlen>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <rccommand_process+0x270>)
 8001b20:	4413      	add	r3, r2
 8001b22:	492c      	ldr	r1, [pc, #176]	@ (8001bd4 <rccommand_process+0x294>)
 8001b24:	461a      	mov	r2, r3
 8001b26:	460b      	mov	r3, r1
 8001b28:	cb03      	ldmia	r3!, {r0, r1}
 8001b2a:	6010      	str	r0, [r2, #0]
 8001b2c:	6051      	str	r1, [r2, #4]
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	8113      	strh	r3, [r2, #8]
            if (cmd & RC_CMD_YAW_RIGHT)  strcat(buf, "YAW_RIGHT|");
 8001b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	da10      	bge.n	8001b5c <rccommand_process+0x21c>
 8001b3a:	481d      	ldr	r0, [pc, #116]	@ (8001bb0 <rccommand_process+0x270>)
 8001b3c:	f7fe fb50 	bl	80001e0 <strlen>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb0 <rccommand_process+0x270>)
 8001b46:	4413      	add	r3, r2
 8001b48:	4923      	ldr	r1, [pc, #140]	@ (8001bd8 <rccommand_process+0x298>)
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	cb03      	ldmia	r3!, {r0, r1}
 8001b50:	6010      	str	r0, [r2, #0]
 8001b52:	6051      	str	r1, [r2, #4]
 8001b54:	8819      	ldrh	r1, [r3, #0]
 8001b56:	789b      	ldrb	r3, [r3, #2]
 8001b58:	8111      	strh	r1, [r2, #8]
 8001b5a:	7293      	strb	r3, [r2, #10]

            size_t len = strlen(buf);
 8001b5c:	4814      	ldr	r0, [pc, #80]	@ (8001bb0 <rccommand_process+0x270>)
 8001b5e:	f7fe fb3f 	bl	80001e0 <strlen>
 8001b62:	60b8      	str	r0, [r7, #8]
            if (buf[len - 1] == '|') buf[len - 1] = '\0';
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	4a11      	ldr	r2, [pc, #68]	@ (8001bb0 <rccommand_process+0x270>)
 8001b6a:	5cd3      	ldrb	r3, [r2, r3]
 8001b6c:	2b7c      	cmp	r3, #124	@ 0x7c
 8001b6e:	d104      	bne.n	8001b7a <rccommand_process+0x23a>
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb0 <rccommand_process+0x270>)
 8001b76:	2100      	movs	r1, #0
 8001b78:	54d1      	strb	r1, [r2, r3]
        }

        strcat(buf, "\n");
 8001b7a:	480d      	ldr	r0, [pc, #52]	@ (8001bb0 <rccommand_process+0x270>)
 8001b7c:	f7fe fb30 	bl	80001e0 <strlen>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb0 <rccommand_process+0x270>)
 8001b86:	4413      	add	r3, r2
 8001b88:	4914      	ldr	r1, [pc, #80]	@ (8001bdc <rccommand_process+0x29c>)
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	8013      	strh	r3, [r2, #0]

        // Chỉ trả chuỗi nếu có thay đổi
        if (cmd != lastCmd)
 8001b92:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <rccommand_process+0x2a0>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	7bfa      	ldrb	r2, [r7, #15]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d004      	beq.n	8001ba6 <rccommand_process+0x266>
        {
            lastCmd = cmd;
 8001b9c:	4a10      	ldr	r2, [pc, #64]	@ (8001be0 <rccommand_process+0x2a0>)
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	7013      	strb	r3, [r2, #0]
            return buf;
 8001ba2:	4b03      	ldr	r3, [pc, #12]	@ (8001bb0 <rccommand_process+0x270>)
 8001ba4:	e000      	b.n	8001ba8 <rccommand_process+0x268>
        }
        else
        {
            return NULL;
 8001ba6:	2300      	movs	r3, #0
        }
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	2000055c 	.word	0x2000055c
 8001bb4:	080085a4 	.word	0x080085a4
 8001bb8:	080085ac 	.word	0x080085ac
 8001bbc:	080085b4 	.word	0x080085b4
 8001bc0:	080085b8 	.word	0x080085b8
 8001bc4:	080085c0 	.word	0x080085c0
 8001bc8:	080085c8 	.word	0x080085c8
 8001bcc:	080085d0 	.word	0x080085d0
 8001bd0:	080085dc 	.word	0x080085dc
 8001bd4:	080085e8 	.word	0x080085e8
 8001bd8:	080085f4 	.word	0x080085f4
 8001bdc:	08008600 	.word	0x08008600
 8001be0:	20000559 	.word	0x20000559

08001be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <HAL_MspInit+0x54>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	4a11      	ldr	r2, [pc, #68]	@ (8001c38 <HAL_MspInit+0x54>)
 8001bf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <HAL_MspInit+0x54>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	603b      	str	r3, [r7, #0]
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <HAL_MspInit+0x54>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c38 <HAL_MspInit+0x54>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c16:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <HAL_MspInit+0x54>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	210f      	movs	r1, #15
 8001c26:	f06f 0001 	mvn.w	r0, #1
 8001c2a:	f001 f87d 	bl	8002d28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800

08001c3c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	@ 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a33      	ldr	r2, [pc, #204]	@ (8001d28 <HAL_ADC_MspInit+0xec>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d15f      	bne.n	8001d1e <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b32      	ldr	r3, [pc, #200]	@ (8001d2c <HAL_ADC_MspInit+0xf0>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	4a31      	ldr	r2, [pc, #196]	@ (8001d2c <HAL_ADC_MspInit+0xf0>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d2c <HAL_ADC_MspInit+0xf0>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d2c <HAL_ADC_MspInit+0xf0>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	4a2a      	ldr	r2, [pc, #168]	@ (8001d2c <HAL_ADC_MspInit+0xf0>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8a:	4b28      	ldr	r3, [pc, #160]	@ (8001d2c <HAL_ADC_MspInit+0xf0>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6;
 8001c96:	2363      	movs	r3, #99	@ 0x63
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4821      	ldr	r0, [pc, #132]	@ (8001d30 <HAL_ADC_MspInit+0xf4>)
 8001caa:	f001 fbd7 	bl	800345c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001cae:	4b21      	ldr	r3, [pc, #132]	@ (8001d34 <HAL_ADC_MspInit+0xf8>)
 8001cb0:	4a21      	ldr	r2, [pc, #132]	@ (8001d38 <HAL_ADC_MspInit+0xfc>)
 8001cb2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d34 <HAL_ADC_MspInit+0xf8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cba:	4b1e      	ldr	r3, [pc, #120]	@ (8001d34 <HAL_ADC_MspInit+0xf8>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d34 <HAL_ADC_MspInit+0xf8>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d34 <HAL_ADC_MspInit+0xf8>)
 8001cc8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ccc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cce:	4b19      	ldr	r3, [pc, #100]	@ (8001d34 <HAL_ADC_MspInit+0xf8>)
 8001cd0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cd4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cd6:	4b17      	ldr	r3, [pc, #92]	@ (8001d34 <HAL_ADC_MspInit+0xf8>)
 8001cd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cdc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cde:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <HAL_ADC_MspInit+0xf8>)
 8001ce0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ce4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ce6:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <HAL_ADC_MspInit+0xf8>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cec:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <HAL_ADC_MspInit+0xf8>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cf2:	4810      	ldr	r0, [pc, #64]	@ (8001d34 <HAL_ADC_MspInit+0xf8>)
 8001cf4:	f001 f842 	bl	8002d7c <HAL_DMA_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001cfe:	f7ff faff 	bl	8001300 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a0b      	ldr	r2, [pc, #44]	@ (8001d34 <HAL_ADC_MspInit+0xf8>)
 8001d06:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d08:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <HAL_ADC_MspInit+0xf8>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2105      	movs	r1, #5
 8001d12:	2012      	movs	r0, #18
 8001d14:	f001 f808 	bl	8002d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d18:	2012      	movs	r0, #18
 8001d1a:	f001 f821 	bl	8002d60 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	@ 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40012000 	.word	0x40012000
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020000 	.word	0x40020000
 8001d34:	20000408 	.word	0x20000408
 8001d38:	40026410 	.word	0x40026410

08001d3c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	@ 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a19      	ldr	r2, [pc, #100]	@ (8001dc0 <HAL_I2C_MspInit+0x84>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d12b      	bne.n	8001db6 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	4b18      	ldr	r3, [pc, #96]	@ (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	4a17      	ldr	r2, [pc, #92]	@ (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6e:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d7a:	23c0      	movs	r3, #192	@ 0xc0
 8001d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d7e:	2312      	movs	r3, #18
 8001d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d86:	2303      	movs	r3, #3
 8001d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	4619      	mov	r1, r3
 8001d94:	480c      	ldr	r0, [pc, #48]	@ (8001dc8 <HAL_I2C_MspInit+0x8c>)
 8001d96:	f001 fb61 	bl	800345c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	4a08      	ldr	r2, [pc, #32]	@ (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001da4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001db6:	bf00      	nop
 8001db8:	3728      	adds	r7, #40	@ 0x28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40005400 	.word	0x40005400
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020400 	.word	0x40020400

08001dcc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08a      	sub	sp, #40	@ 0x28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a28      	ldr	r2, [pc, #160]	@ (8001e8c <HAL_SPI_MspInit+0xc0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d149      	bne.n	8001e82 <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	4b27      	ldr	r3, [pc, #156]	@ (8001e90 <HAL_SPI_MspInit+0xc4>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	4a26      	ldr	r2, [pc, #152]	@ (8001e90 <HAL_SPI_MspInit+0xc4>)
 8001df8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dfe:	4b24      	ldr	r3, [pc, #144]	@ (8001e90 <HAL_SPI_MspInit+0xc4>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <HAL_SPI_MspInit+0xc4>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	4a1f      	ldr	r2, [pc, #124]	@ (8001e90 <HAL_SPI_MspInit+0xc4>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e90 <HAL_SPI_MspInit+0xc4>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <HAL_SPI_MspInit+0xc4>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	4a18      	ldr	r2, [pc, #96]	@ (8001e90 <HAL_SPI_MspInit+0xc4>)
 8001e30:	f043 0302 	orr.w	r3, r3, #2
 8001e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e36:	4b16      	ldr	r3, [pc, #88]	@ (8001e90 <HAL_SPI_MspInit+0xc4>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e42:	2380      	movs	r3, #128	@ 0x80
 8001e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e52:	2305      	movs	r3, #5
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	480d      	ldr	r0, [pc, #52]	@ (8001e94 <HAL_SPI_MspInit+0xc8>)
 8001e5e:	f001 fafd 	bl	800345c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001e62:	2318      	movs	r3, #24
 8001e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e72:	2305      	movs	r3, #5
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4806      	ldr	r0, [pc, #24]	@ (8001e98 <HAL_SPI_MspInit+0xcc>)
 8001e7e:	f001 faed 	bl	800345c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001e82:	bf00      	nop
 8001e84:	3728      	adds	r7, #40	@ 0x28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40013000 	.word	0x40013000
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020000 	.word	0x40020000
 8001e98:	40020400 	.word	0x40020400

08001e9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08c      	sub	sp, #48	@ 0x30
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001eac:	2300      	movs	r3, #0
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f6c <HAL_InitTick+0xd0>)
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8001f6c <HAL_InitTick+0xd0>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f6c <HAL_InitTick+0xd0>)
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ec8:	f107 020c 	add.w	r2, r7, #12
 8001ecc:	f107 0310 	add.w	r3, r7, #16
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f002 fd86 	bl	80049e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ed8:	f002 fd70 	bl	80049bc <HAL_RCC_GetPCLK2Freq>
 8001edc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ee0:	4a23      	ldr	r2, [pc, #140]	@ (8001f70 <HAL_InitTick+0xd4>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	0c9b      	lsrs	r3, r3, #18
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001eec:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <HAL_InitTick+0xd8>)
 8001eee:	4a22      	ldr	r2, [pc, #136]	@ (8001f78 <HAL_InitTick+0xdc>)
 8001ef0:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001ef2:	4b20      	ldr	r3, [pc, #128]	@ (8001f74 <HAL_InitTick+0xd8>)
 8001ef4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ef8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001efa:	4a1e      	ldr	r2, [pc, #120]	@ (8001f74 <HAL_InitTick+0xd8>)
 8001efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f00:	4b1c      	ldr	r3, [pc, #112]	@ (8001f74 <HAL_InitTick+0xd8>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f06:	4b1b      	ldr	r3, [pc, #108]	@ (8001f74 <HAL_InitTick+0xd8>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0c:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <HAL_InitTick+0xd8>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001f12:	4818      	ldr	r0, [pc, #96]	@ (8001f74 <HAL_InitTick+0xd8>)
 8001f14:	f003 fb6a 	bl	80055ec <HAL_TIM_Base_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001f1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d11b      	bne.n	8001f5e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001f26:	4813      	ldr	r0, [pc, #76]	@ (8001f74 <HAL_InitTick+0xd8>)
 8001f28:	f003 fbba 	bl	80056a0 <HAL_TIM_Base_Start_IT>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001f32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d111      	bne.n	8001f5e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f3a:	2019      	movs	r0, #25
 8001f3c:	f000 ff10 	bl	8002d60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b0f      	cmp	r3, #15
 8001f44:	d808      	bhi.n	8001f58 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001f46:	2200      	movs	r2, #0
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	2019      	movs	r0, #25
 8001f4c:	f000 feec 	bl	8002d28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f50:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <HAL_InitTick+0xe0>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e002      	b.n	8001f5e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3730      	adds	r7, #48	@ 0x30
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	431bde83 	.word	0x431bde83
 8001f74:	2000059c 	.word	0x2000059c
 8001f78:	40010000 	.word	0x40010000
 8001f7c:	20000098 	.word	0x20000098

08001f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <NMI_Handler+0x4>

08001f88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <HardFault_Handler+0x4>

08001f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <MemManage_Handler+0x4>

08001f98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <BusFault_Handler+0x4>

08001fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <UsageFault_Handler+0x4>

08001fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001fbc:	4802      	ldr	r0, [pc, #8]	@ (8001fc8 <ADC_IRQHandler+0x10>)
 8001fbe:	f000 f91e 	bl	80021fe <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200003c0 	.word	0x200003c0

08001fcc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SELECT_Pin);
 8001fd0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001fd4:	f001 fbf8 	bl	80037c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_Pin);
 8001fd8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001fdc:	f001 fbf4 	bl	80037c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fe8:	4802      	ldr	r0, [pc, #8]	@ (8001ff4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001fea:	f003 fbbb 	bl	8005764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000059c 	.word	0x2000059c

08001ff8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_Pin);
 8001ffc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002000:	f001 fbe2 	bl	80037c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HOME_Pin);
 8002004:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002008:	f001 fbde 	bl	80037c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800200c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002010:	f001 fbda 	bl	80037c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BACK_Pin);
 8002014:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002018:	f001 fbd6 	bl	80037c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}

08002020 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002024:	4802      	ldr	r0, [pc, #8]	@ (8002030 <DMA2_Stream0_IRQHandler+0x10>)
 8002026:	f000 ffaf 	bl	8002f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000408 	.word	0x20000408

08002034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <SystemInit+0x20>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800203e:	4a05      	ldr	r2, [pc, #20]	@ (8002054 <SystemInit+0x20>)
 8002040:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002044:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002058:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002090 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800205c:	f7ff ffea 	bl	8002034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002060:	480c      	ldr	r0, [pc, #48]	@ (8002094 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002062:	490d      	ldr	r1, [pc, #52]	@ (8002098 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002064:	4a0d      	ldr	r2, [pc, #52]	@ (800209c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002068:	e002      	b.n	8002070 <LoopCopyDataInit>

0800206a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800206c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206e:	3304      	adds	r3, #4

08002070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002074:	d3f9      	bcc.n	800206a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002076:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002078:	4c0a      	ldr	r4, [pc, #40]	@ (80020a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800207c:	e001      	b.n	8002082 <LoopFillZerobss>

0800207e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002080:	3204      	adds	r2, #4

08002082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002084:	d3fb      	bcc.n	800207e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002086:	f006 f975 	bl	8008374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800208a:	f7fe fde1 	bl	8000c50 <main>
  bx  lr    
 800208e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002090:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002098:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 800209c:	0800863c 	.word	0x0800863c
  ldr r2, =_sbss
 80020a0:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 80020a4:	2000447c 	.word	0x2000447c

080020a8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020a8:	e7fe      	b.n	80020a8 <DMA1_Stream0_IRQHandler>
	...

080020ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020b0:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <HAL_Init+0x40>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0d      	ldr	r2, [pc, #52]	@ (80020ec <HAL_Init+0x40>)
 80020b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020bc:	4b0b      	ldr	r3, [pc, #44]	@ (80020ec <HAL_Init+0x40>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0a      	ldr	r2, [pc, #40]	@ (80020ec <HAL_Init+0x40>)
 80020c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c8:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <HAL_Init+0x40>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a07      	ldr	r2, [pc, #28]	@ (80020ec <HAL_Init+0x40>)
 80020ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d4:	2003      	movs	r0, #3
 80020d6:	f000 fe1c 	bl	8002d12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020da:	200f      	movs	r0, #15
 80020dc:	f7ff fede 	bl	8001e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e0:	f7ff fd80 	bl	8001be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40023c00 	.word	0x40023c00

080020f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <HAL_IncTick+0x20>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <HAL_IncTick+0x24>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	4a04      	ldr	r2, [pc, #16]	@ (8002114 <HAL_IncTick+0x24>)
 8002102:	6013      	str	r3, [r2, #0]
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	2000009c 	.word	0x2000009c
 8002114:	200005e4 	.word	0x200005e4

08002118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return uwTick;
 800211c:	4b03      	ldr	r3, [pc, #12]	@ (800212c <HAL_GetTick+0x14>)
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	200005e4 	.word	0x200005e4

08002130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002138:	f7ff ffee 	bl	8002118 <HAL_GetTick>
 800213c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d005      	beq.n	8002156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800214a:	4b0a      	ldr	r3, [pc, #40]	@ (8002174 <HAL_Delay+0x44>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002156:	bf00      	nop
 8002158:	f7ff ffde 	bl	8002118 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	429a      	cmp	r2, r3
 8002166:	d8f7      	bhi.n	8002158 <HAL_Delay+0x28>
  {
  }
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	2000009c 	.word	0x2000009c

08002178 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e033      	b.n	80021f6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	2b00      	cmp	r3, #0
 8002194:	d109      	bne.n	80021aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff fd50 	bl	8001c3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d118      	bne.n	80021e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021be:	f023 0302 	bic.w	r3, r3, #2
 80021c2:	f043 0202 	orr.w	r2, r3, #2
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 fb6c 	bl	80028a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	f023 0303 	bic.w	r3, r3, #3
 80021de:	f043 0201 	orr.w	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80021e6:	e001      	b.n	80021ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d049      	beq.n	80022c8 <HAL_ADC_IRQHandler+0xca>
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d046      	beq.n	80022c8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b00      	cmp	r3, #0
 8002244:	d105      	bne.n	8002252 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d12b      	bne.n	80022b8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002264:	2b00      	cmp	r3, #0
 8002266:	d127      	bne.n	80022b8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002272:	2b00      	cmp	r3, #0
 8002274:	d006      	beq.n	8002284 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002280:	2b00      	cmp	r3, #0
 8002282:	d119      	bne.n	80022b8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0220 	bic.w	r2, r2, #32
 8002292:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002298:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d105      	bne.n	80022b8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b0:	f043 0201 	orr.w	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7fe fca1 	bl	8000c00 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f06f 0212 	mvn.w	r2, #18
 80022c6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d057      	beq.n	800238e <HAL_ADC_IRQHandler+0x190>
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d054      	beq.n	800238e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	f003 0310 	and.w	r3, r3, #16
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d105      	bne.n	80022fc <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d139      	bne.n	800237e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002310:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002314:	2b00      	cmp	r3, #0
 8002316:	d006      	beq.n	8002326 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002322:	2b00      	cmp	r3, #0
 8002324:	d12b      	bne.n	800237e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002330:	2b00      	cmp	r3, #0
 8002332:	d124      	bne.n	800237e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800233e:	2b00      	cmp	r3, #0
 8002340:	d11d      	bne.n	800237e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002346:	2b00      	cmp	r3, #0
 8002348:	d119      	bne.n	800237e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002358:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d105      	bne.n	800237e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	f043 0201 	orr.w	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fc10 	bl	8002ba4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 020c 	mvn.w	r2, #12
 800238c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800239c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d017      	beq.n	80023d4 <HAL_ADC_IRQHandler+0x1d6>
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d014      	beq.n	80023d4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d10d      	bne.n	80023d4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f929 	bl	800261c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f06f 0201 	mvn.w	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 0320 	and.w	r3, r3, #32
 80023da:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023e2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d015      	beq.n	8002416 <HAL_ADC_IRQHandler+0x218>
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d012      	beq.n	8002416 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f4:	f043 0202 	orr.w	r2, r3, #2
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0220 	mvn.w	r2, #32
 8002404:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f912 	bl	8002630 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0220 	mvn.w	r2, #32
 8002414:	601a      	str	r2, [r3, #0]
  }
}
 8002416:	bf00      	nop
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_ADC_Start_DMA+0x22>
 800243e:	2302      	movs	r3, #2
 8002440:	e0d0      	b.n	80025e4 <HAL_ADC_Start_DMA+0x1c4>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b01      	cmp	r3, #1
 8002456:	d018      	beq.n	800248a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002468:	4b60      	ldr	r3, [pc, #384]	@ (80025ec <HAL_ADC_Start_DMA+0x1cc>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a60      	ldr	r2, [pc, #384]	@ (80025f0 <HAL_ADC_Start_DMA+0x1d0>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	0c9a      	lsrs	r2, r3, #18
 8002474:	4613      	mov	r3, r2
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4413      	add	r3, r2
 800247a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800247c:	e002      	b.n	8002484 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	3b01      	subs	r3, #1
 8002482:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f9      	bne.n	800247e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002498:	d107      	bne.n	80024aa <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024a8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	f040 8088 	bne.w	80025ca <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80024c2:	f023 0301 	bic.w	r3, r3, #1
 80024c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024f8:	d106      	bne.n	8002508 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fe:	f023 0206 	bic.w	r2, r3, #6
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	645a      	str	r2, [r3, #68]	@ 0x44
 8002506:	e002      	b.n	800250e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002516:	4b37      	ldr	r3, [pc, #220]	@ (80025f4 <HAL_ADC_Start_DMA+0x1d4>)
 8002518:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800251e:	4a36      	ldr	r2, [pc, #216]	@ (80025f8 <HAL_ADC_Start_DMA+0x1d8>)
 8002520:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002526:	4a35      	ldr	r2, [pc, #212]	@ (80025fc <HAL_ADC_Start_DMA+0x1dc>)
 8002528:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800252e:	4a34      	ldr	r2, [pc, #208]	@ (8002600 <HAL_ADC_Start_DMA+0x1e0>)
 8002530:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800253a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800254a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800255a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	334c      	adds	r3, #76	@ 0x4c
 8002566:	4619      	mov	r1, r3
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f000 fcb4 	bl	8002ed8 <HAL_DMA_Start_IT>
 8002570:	4603      	mov	r3, r0
 8002572:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10f      	bne.n	80025a0 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d129      	bne.n	80025e2 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800259c:	609a      	str	r2, [r3, #8]
 800259e:	e020      	b.n	80025e2 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a17      	ldr	r2, [pc, #92]	@ (8002604 <HAL_ADC_Start_DMA+0x1e4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d11b      	bne.n	80025e2 <HAL_ADC_Start_DMA+0x1c2>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d114      	bne.n	80025e2 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	e00b      	b.n	80025e2 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	f043 0210 	orr.w	r2, r3, #16
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025da:	f043 0201 	orr.w	r2, r3, #1
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80025e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3720      	adds	r7, #32
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20000094 	.word	0x20000094
 80025f0:	431bde83 	.word	0x431bde83
 80025f4:	40012300 	.word	0x40012300
 80025f8:	08002aa1 	.word	0x08002aa1
 80025fc:	08002b5b 	.word	0x08002b5b
 8002600:	08002b77 	.word	0x08002b77
 8002604:	40012000 	.word	0x40012000

08002608 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x1c>
 800265c:	2302      	movs	r3, #2
 800265e:	e113      	b.n	8002888 <HAL_ADC_ConfigChannel+0x244>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b09      	cmp	r3, #9
 800266e:	d925      	bls.n	80026bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68d9      	ldr	r1, [r3, #12]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	4613      	mov	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4413      	add	r3, r2
 8002684:	3b1e      	subs	r3, #30
 8002686:	2207      	movs	r2, #7
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43da      	mvns	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	400a      	ands	r2, r1
 8002694:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68d9      	ldr	r1, [r3, #12]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	4618      	mov	r0, r3
 80026a8:	4603      	mov	r3, r0
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4403      	add	r3, r0
 80026ae:	3b1e      	subs	r3, #30
 80026b0:	409a      	lsls	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	e022      	b.n	8002702 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6919      	ldr	r1, [r3, #16]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	4613      	mov	r3, r2
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4413      	add	r3, r2
 80026d0:	2207      	movs	r2, #7
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43da      	mvns	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	400a      	ands	r2, r1
 80026de:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6919      	ldr	r1, [r3, #16]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	4618      	mov	r0, r3
 80026f2:	4603      	mov	r3, r0
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4403      	add	r3, r0
 80026f8:	409a      	lsls	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b06      	cmp	r3, #6
 8002708:	d824      	bhi.n	8002754 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	3b05      	subs	r3, #5
 800271c:	221f      	movs	r2, #31
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43da      	mvns	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	400a      	ands	r2, r1
 800272a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	b29b      	uxth	r3, r3
 8002738:	4618      	mov	r0, r3
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	3b05      	subs	r3, #5
 8002746:	fa00 f203 	lsl.w	r2, r0, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	635a      	str	r2, [r3, #52]	@ 0x34
 8002752:	e04c      	b.n	80027ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b0c      	cmp	r3, #12
 800275a:	d824      	bhi.n	80027a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	3b23      	subs	r3, #35	@ 0x23
 800276e:	221f      	movs	r2, #31
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43da      	mvns	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	400a      	ands	r2, r1
 800277c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	b29b      	uxth	r3, r3
 800278a:	4618      	mov	r0, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	3b23      	subs	r3, #35	@ 0x23
 8002798:	fa00 f203 	lsl.w	r2, r0, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80027a4:	e023      	b.n	80027ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	3b41      	subs	r3, #65	@ 0x41
 80027b8:	221f      	movs	r2, #31
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43da      	mvns	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	400a      	ands	r2, r1
 80027c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	4618      	mov	r0, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	3b41      	subs	r3, #65	@ 0x41
 80027e2:	fa00 f203 	lsl.w	r2, r0, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ee:	4b29      	ldr	r3, [pc, #164]	@ (8002894 <HAL_ADC_ConfigChannel+0x250>)
 80027f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a28      	ldr	r2, [pc, #160]	@ (8002898 <HAL_ADC_ConfigChannel+0x254>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d10f      	bne.n	800281c <HAL_ADC_ConfigChannel+0x1d8>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b12      	cmp	r3, #18
 8002802:	d10b      	bne.n	800281c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a1d      	ldr	r2, [pc, #116]	@ (8002898 <HAL_ADC_ConfigChannel+0x254>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d12b      	bne.n	800287e <HAL_ADC_ConfigChannel+0x23a>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a1c      	ldr	r2, [pc, #112]	@ (800289c <HAL_ADC_ConfigChannel+0x258>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d003      	beq.n	8002838 <HAL_ADC_ConfigChannel+0x1f4>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b11      	cmp	r3, #17
 8002836:	d122      	bne.n	800287e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a11      	ldr	r2, [pc, #68]	@ (800289c <HAL_ADC_ConfigChannel+0x258>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d111      	bne.n	800287e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800285a:	4b11      	ldr	r3, [pc, #68]	@ (80028a0 <HAL_ADC_ConfigChannel+0x25c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a11      	ldr	r2, [pc, #68]	@ (80028a4 <HAL_ADC_ConfigChannel+0x260>)
 8002860:	fba2 2303 	umull	r2, r3, r2, r3
 8002864:	0c9a      	lsrs	r2, r3, #18
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002870:	e002      	b.n	8002878 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	3b01      	subs	r3, #1
 8002876:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f9      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	40012300 	.word	0x40012300
 8002898:	40012000 	.word	0x40012000
 800289c:	10000012 	.word	0x10000012
 80028a0:	20000094 	.word	0x20000094
 80028a4:	431bde83 	.word	0x431bde83

080028a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028b0:	4b79      	ldr	r3, [pc, #484]	@ (8002a98 <ADC_Init+0x1f0>)
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	431a      	orrs	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	021a      	lsls	r2, r3, #8
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002900:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002922:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6899      	ldr	r1, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293a:	4a58      	ldr	r2, [pc, #352]	@ (8002a9c <ADC_Init+0x1f4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d022      	beq.n	8002986 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800294e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6899      	ldr	r1, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002970:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6899      	ldr	r1, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	e00f      	b.n	80029a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002994:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0202 	bic.w	r2, r2, #2
 80029b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6899      	ldr	r1, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	7e1b      	ldrb	r3, [r3, #24]
 80029c0:	005a      	lsls	r2, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01b      	beq.n	8002a0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029e2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80029f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6859      	ldr	r1, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fe:	3b01      	subs	r3, #1
 8002a00:	035a      	lsls	r2, r3, #13
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	e007      	b.n	8002a1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a1a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	051a      	lsls	r2, r3, #20
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6899      	ldr	r1, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a5e:	025a      	lsls	r2, r3, #9
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6899      	ldr	r1, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	029a      	lsls	r2, r3, #10
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	609a      	str	r2, [r3, #8]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	40012300 	.word	0x40012300
 8002a9c:	0f000001 	.word	0x0f000001

08002aa0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d13c      	bne.n	8002b34 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d12b      	bne.n	8002b2c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d127      	bne.n	8002b2c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d006      	beq.n	8002af8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d119      	bne.n	8002b2c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0220 	bic.w	r2, r2, #32
 8002b06:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b24:	f043 0201 	orr.w	r2, r3, #1
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f7fe f867 	bl	8000c00 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b32:	e00e      	b.n	8002b52 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f7ff fd75 	bl	8002630 <HAL_ADC_ErrorCallback>
}
 8002b46:	e004      	b.n	8002b52 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	4798      	blx	r3
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b66:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7ff fd4d 	bl	8002608 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b82:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2240      	movs	r2, #64	@ 0x40
 8002b88:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	f043 0204 	orr.w	r2, r3, #4
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f7ff fd4a 	bl	8002630 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b9c:	bf00      	nop
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bfc <__NVIC_SetPriorityGrouping+0x44>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bea:	4a04      	ldr	r2, [pc, #16]	@ (8002bfc <__NVIC_SetPriorityGrouping+0x44>)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	60d3      	str	r3, [r2, #12]
}
 8002bf0:	bf00      	nop
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c04:	4b04      	ldr	r3, [pc, #16]	@ (8002c18 <__NVIC_GetPriorityGrouping+0x18>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	0a1b      	lsrs	r3, r3, #8
 8002c0a:	f003 0307 	and.w	r3, r3, #7
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	db0b      	blt.n	8002c46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	f003 021f 	and.w	r2, r3, #31
 8002c34:	4907      	ldr	r1, [pc, #28]	@ (8002c54 <__NVIC_EnableIRQ+0x38>)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000e100 	.word	0xe000e100

08002c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	6039      	str	r1, [r7, #0]
 8002c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	db0a      	blt.n	8002c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	490c      	ldr	r1, [pc, #48]	@ (8002ca4 <__NVIC_SetPriority+0x4c>)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	0112      	lsls	r2, r2, #4
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c80:	e00a      	b.n	8002c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	4908      	ldr	r1, [pc, #32]	@ (8002ca8 <__NVIC_SetPriority+0x50>)
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	3b04      	subs	r3, #4
 8002c90:	0112      	lsls	r2, r2, #4
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	440b      	add	r3, r1
 8002c96:	761a      	strb	r2, [r3, #24]
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000e100 	.word	0xe000e100
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b089      	sub	sp, #36	@ 0x24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f1c3 0307 	rsb	r3, r3, #7
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	bf28      	it	cs
 8002cca:	2304      	movcs	r3, #4
 8002ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	2b06      	cmp	r3, #6
 8002cd4:	d902      	bls.n	8002cdc <NVIC_EncodePriority+0x30>
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3b03      	subs	r3, #3
 8002cda:	e000      	b.n	8002cde <NVIC_EncodePriority+0x32>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43da      	mvns	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	401a      	ands	r2, r3
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfe:	43d9      	mvns	r1, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d04:	4313      	orrs	r3, r2
         );
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3724      	adds	r7, #36	@ 0x24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff ff4c 	bl	8002bb8 <__NVIC_SetPriorityGrouping>
}
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d3a:	f7ff ff61 	bl	8002c00 <__NVIC_GetPriorityGrouping>
 8002d3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	6978      	ldr	r0, [r7, #20]
 8002d46:	f7ff ffb1 	bl	8002cac <NVIC_EncodePriority>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff ff80 	bl	8002c58 <__NVIC_SetPriority>
}
 8002d58:	bf00      	nop
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ff54 	bl	8002c1c <__NVIC_EnableIRQ>
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d88:	f7ff f9c6 	bl	8002118 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e099      	b.n	8002ecc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002db8:	e00f      	b.n	8002dda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dba:	f7ff f9ad 	bl	8002118 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b05      	cmp	r3, #5
 8002dc6:	d908      	bls.n	8002dda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e078      	b.n	8002ecc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1e8      	bne.n	8002dba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4b38      	ldr	r3, [pc, #224]	@ (8002ed4 <HAL_DMA_Init+0x158>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d107      	bne.n	8002e44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f023 0307 	bic.w	r3, r3, #7
 8002e5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d117      	bne.n	8002e9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00e      	beq.n	8002e9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 fa6f 	bl	8003364 <DMA_CheckFifoParam>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2240      	movs	r2, #64	@ 0x40
 8002e90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e016      	b.n	8002ecc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fa26 	bl	80032f8 <DMA_CalcBaseAndBitshift>
 8002eac:	4603      	mov	r3, r0
 8002eae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb4:	223f      	movs	r2, #63	@ 0x3f
 8002eb6:	409a      	lsls	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	f010803f 	.word	0xf010803f

08002ed8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_DMA_Start_IT+0x26>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e040      	b.n	8002f80 <HAL_DMA_Start_IT+0xa8>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d12f      	bne.n	8002f72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2202      	movs	r2, #2
 8002f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f9b8 	bl	800329c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f30:	223f      	movs	r2, #63	@ 0x3f
 8002f32:	409a      	lsls	r2, r3
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0216 	orr.w	r2, r2, #22
 8002f46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d007      	beq.n	8002f60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0208 	orr.w	r2, r2, #8
 8002f5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	e005      	b.n	8002f7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f94:	4b8e      	ldr	r3, [pc, #568]	@ (80031d0 <HAL_DMA_IRQHandler+0x248>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a8e      	ldr	r2, [pc, #568]	@ (80031d4 <HAL_DMA_IRQHandler+0x24c>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	0a9b      	lsrs	r3, r3, #10
 8002fa0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb2:	2208      	movs	r2, #8
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d01a      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d013      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0204 	bic.w	r2, r2, #4
 8002fda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fec:	f043 0201 	orr.w	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d012      	beq.n	800302a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003016:	2201      	movs	r2, #1
 8003018:	409a      	lsls	r2, r3
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003022:	f043 0202 	orr.w	r2, r3, #2
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302e:	2204      	movs	r2, #4
 8003030:	409a      	lsls	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4013      	ands	r3, r2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d012      	beq.n	8003060 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00b      	beq.n	8003060 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304c:	2204      	movs	r2, #4
 800304e:	409a      	lsls	r2, r3
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003058:	f043 0204 	orr.w	r2, r3, #4
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003064:	2210      	movs	r2, #16
 8003066:	409a      	lsls	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d043      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d03c      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003082:	2210      	movs	r2, #16
 8003084:	409a      	lsls	r2, r3
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d018      	beq.n	80030ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d108      	bne.n	80030b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d024      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	4798      	blx	r3
 80030b6:	e01f      	b.n	80030f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d01b      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	4798      	blx	r3
 80030c8:	e016      	b.n	80030f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d107      	bne.n	80030e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0208 	bic.w	r2, r2, #8
 80030e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fc:	2220      	movs	r2, #32
 80030fe:	409a      	lsls	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4013      	ands	r3, r2
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 808f 	beq.w	8003228 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8087 	beq.w	8003228 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311e:	2220      	movs	r2, #32
 8003120:	409a      	lsls	r2, r3
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b05      	cmp	r3, #5
 8003130:	d136      	bne.n	80031a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0216 	bic.w	r2, r2, #22
 8003140:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003150:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d103      	bne.n	8003162 <HAL_DMA_IRQHandler+0x1da>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0208 	bic.w	r2, r2, #8
 8003170:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003176:	223f      	movs	r2, #63	@ 0x3f
 8003178:	409a      	lsls	r2, r3
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003192:	2b00      	cmp	r3, #0
 8003194:	d07e      	beq.n	8003294 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	4798      	blx	r3
        }
        return;
 800319e:	e079      	b.n	8003294 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d01d      	beq.n	80031ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10d      	bne.n	80031d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d031      	beq.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4798      	blx	r3
 80031cc:	e02c      	b.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
 80031ce:	bf00      	nop
 80031d0:	20000094 	.word	0x20000094
 80031d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d023      	beq.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
 80031e8:	e01e      	b.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10f      	bne.n	8003218 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0210 	bic.w	r2, r2, #16
 8003206:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322c:	2b00      	cmp	r3, #0
 800322e:	d032      	beq.n	8003296 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d022      	beq.n	8003282 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2205      	movs	r2, #5
 8003240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0201 	bic.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	3301      	adds	r3, #1
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	429a      	cmp	r2, r3
 800325e:	d307      	bcc.n	8003270 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f2      	bne.n	8003254 <HAL_DMA_IRQHandler+0x2cc>
 800326e:	e000      	b.n	8003272 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003270:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
 8003292:	e000      	b.n	8003296 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003294:	bf00      	nop
    }
  }
}
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80032b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b40      	cmp	r3, #64	@ 0x40
 80032c8:	d108      	bne.n	80032dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032da:	e007      	b.n	80032ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	60da      	str	r2, [r3, #12]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	3b10      	subs	r3, #16
 8003308:	4a14      	ldr	r2, [pc, #80]	@ (800335c <DMA_CalcBaseAndBitshift+0x64>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	091b      	lsrs	r3, r3, #4
 8003310:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003312:	4a13      	ldr	r2, [pc, #76]	@ (8003360 <DMA_CalcBaseAndBitshift+0x68>)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4413      	add	r3, r2
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b03      	cmp	r3, #3
 8003324:	d909      	bls.n	800333a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800332e:	f023 0303 	bic.w	r3, r3, #3
 8003332:	1d1a      	adds	r2, r3, #4
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	659a      	str	r2, [r3, #88]	@ 0x58
 8003338:	e007      	b.n	800334a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003342:	f023 0303 	bic.w	r3, r3, #3
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	aaaaaaab 	.word	0xaaaaaaab
 8003360:	08008624 	.word	0x08008624

08003364 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003374:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d11f      	bne.n	80033be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b03      	cmp	r3, #3
 8003382:	d856      	bhi.n	8003432 <DMA_CheckFifoParam+0xce>
 8003384:	a201      	add	r2, pc, #4	@ (adr r2, 800338c <DMA_CheckFifoParam+0x28>)
 8003386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338a:	bf00      	nop
 800338c:	0800339d 	.word	0x0800339d
 8003390:	080033af 	.word	0x080033af
 8003394:	0800339d 	.word	0x0800339d
 8003398:	08003433 	.word	0x08003433
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d046      	beq.n	8003436 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ac:	e043      	b.n	8003436 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033b6:	d140      	bne.n	800343a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033bc:	e03d      	b.n	800343a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033c6:	d121      	bne.n	800340c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d837      	bhi.n	800343e <DMA_CheckFifoParam+0xda>
 80033ce:	a201      	add	r2, pc, #4	@ (adr r2, 80033d4 <DMA_CheckFifoParam+0x70>)
 80033d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d4:	080033e5 	.word	0x080033e5
 80033d8:	080033eb 	.word	0x080033eb
 80033dc:	080033e5 	.word	0x080033e5
 80033e0:	080033fd 	.word	0x080033fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
      break;
 80033e8:	e030      	b.n	800344c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d025      	beq.n	8003442 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033fa:	e022      	b.n	8003442 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003400:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003404:	d11f      	bne.n	8003446 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800340a:	e01c      	b.n	8003446 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d903      	bls.n	800341a <DMA_CheckFifoParam+0xb6>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b03      	cmp	r3, #3
 8003416:	d003      	beq.n	8003420 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003418:	e018      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
      break;
 800341e:	e015      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003424:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00e      	beq.n	800344a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      break;
 8003430:	e00b      	b.n	800344a <DMA_CheckFifoParam+0xe6>
      break;
 8003432:	bf00      	nop
 8003434:	e00a      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 8003436:	bf00      	nop
 8003438:	e008      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 800343a:	bf00      	nop
 800343c:	e006      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 800343e:	bf00      	nop
 8003440:	e004      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 8003442:	bf00      	nop
 8003444:	e002      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;   
 8003446:	bf00      	nop
 8003448:	e000      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 800344a:	bf00      	nop
    }
  } 
  
  return status; 
 800344c:	7bfb      	ldrb	r3, [r7, #15]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop

0800345c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800345c:	b480      	push	{r7}
 800345e:	b089      	sub	sp, #36	@ 0x24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800346e:	2300      	movs	r3, #0
 8003470:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	e159      	b.n	800372c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003478:	2201      	movs	r2, #1
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4013      	ands	r3, r2
 800348a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	429a      	cmp	r2, r3
 8003492:	f040 8148 	bne.w	8003726 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d005      	beq.n	80034ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d130      	bne.n	8003510 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	2203      	movs	r2, #3
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4013      	ands	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034e4:	2201      	movs	r2, #1
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	091b      	lsrs	r3, r3, #4
 80034fa:	f003 0201 	and.w	r2, r3, #1
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	2b03      	cmp	r3, #3
 800351a:	d017      	beq.n	800354c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	2203      	movs	r2, #3
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4313      	orrs	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d123      	bne.n	80035a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	08da      	lsrs	r2, r3, #3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3208      	adds	r2, #8
 8003560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003564:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	220f      	movs	r2, #15
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	08da      	lsrs	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3208      	adds	r2, #8
 800359a:	69b9      	ldr	r1, [r7, #24]
 800359c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	2203      	movs	r2, #3
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 0203 	and.w	r2, r3, #3
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80a2 	beq.w	8003726 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	4b57      	ldr	r3, [pc, #348]	@ (8003744 <HAL_GPIO_Init+0x2e8>)
 80035e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ea:	4a56      	ldr	r2, [pc, #344]	@ (8003744 <HAL_GPIO_Init+0x2e8>)
 80035ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80035f2:	4b54      	ldr	r3, [pc, #336]	@ (8003744 <HAL_GPIO_Init+0x2e8>)
 80035f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035fe:	4a52      	ldr	r2, [pc, #328]	@ (8003748 <HAL_GPIO_Init+0x2ec>)
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	089b      	lsrs	r3, r3, #2
 8003604:	3302      	adds	r3, #2
 8003606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	220f      	movs	r2, #15
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a49      	ldr	r2, [pc, #292]	@ (800374c <HAL_GPIO_Init+0x2f0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d019      	beq.n	800365e <HAL_GPIO_Init+0x202>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a48      	ldr	r2, [pc, #288]	@ (8003750 <HAL_GPIO_Init+0x2f4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d013      	beq.n	800365a <HAL_GPIO_Init+0x1fe>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a47      	ldr	r2, [pc, #284]	@ (8003754 <HAL_GPIO_Init+0x2f8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00d      	beq.n	8003656 <HAL_GPIO_Init+0x1fa>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a46      	ldr	r2, [pc, #280]	@ (8003758 <HAL_GPIO_Init+0x2fc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d007      	beq.n	8003652 <HAL_GPIO_Init+0x1f6>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a45      	ldr	r2, [pc, #276]	@ (800375c <HAL_GPIO_Init+0x300>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d101      	bne.n	800364e <HAL_GPIO_Init+0x1f2>
 800364a:	2304      	movs	r3, #4
 800364c:	e008      	b.n	8003660 <HAL_GPIO_Init+0x204>
 800364e:	2307      	movs	r3, #7
 8003650:	e006      	b.n	8003660 <HAL_GPIO_Init+0x204>
 8003652:	2303      	movs	r3, #3
 8003654:	e004      	b.n	8003660 <HAL_GPIO_Init+0x204>
 8003656:	2302      	movs	r3, #2
 8003658:	e002      	b.n	8003660 <HAL_GPIO_Init+0x204>
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <HAL_GPIO_Init+0x204>
 800365e:	2300      	movs	r3, #0
 8003660:	69fa      	ldr	r2, [r7, #28]
 8003662:	f002 0203 	and.w	r2, r2, #3
 8003666:	0092      	lsls	r2, r2, #2
 8003668:	4093      	lsls	r3, r2
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4313      	orrs	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003670:	4935      	ldr	r1, [pc, #212]	@ (8003748 <HAL_GPIO_Init+0x2ec>)
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	089b      	lsrs	r3, r3, #2
 8003676:	3302      	adds	r3, #2
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800367e:	4b38      	ldr	r3, [pc, #224]	@ (8003760 <HAL_GPIO_Init+0x304>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	43db      	mvns	r3, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4013      	ands	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003760 <HAL_GPIO_Init+0x304>)
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003760 <HAL_GPIO_Init+0x304>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036cc:	4a24      	ldr	r2, [pc, #144]	@ (8003760 <HAL_GPIO_Init+0x304>)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036d2:	4b23      	ldr	r3, [pc, #140]	@ (8003760 <HAL_GPIO_Init+0x304>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	43db      	mvns	r3, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4013      	ands	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003760 <HAL_GPIO_Init+0x304>)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036fc:	4b18      	ldr	r3, [pc, #96]	@ (8003760 <HAL_GPIO_Init+0x304>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003720:	4a0f      	ldr	r2, [pc, #60]	@ (8003760 <HAL_GPIO_Init+0x304>)
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	3301      	adds	r3, #1
 800372a:	61fb      	str	r3, [r7, #28]
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	2b0f      	cmp	r3, #15
 8003730:	f67f aea2 	bls.w	8003478 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop
 8003738:	3724      	adds	r7, #36	@ 0x24
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800
 8003748:	40013800 	.word	0x40013800
 800374c:	40020000 	.word	0x40020000
 8003750:	40020400 	.word	0x40020400
 8003754:	40020800 	.word	0x40020800
 8003758:	40020c00 	.word	0x40020c00
 800375c:	40021000 	.word	0x40021000
 8003760:	40013c00 	.word	0x40013c00

08003764 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	887b      	ldrh	r3, [r7, #2]
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
 8003780:	e001      	b.n	8003786 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003782:	2300      	movs	r3, #0
 8003784:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003786:	7bfb      	ldrb	r3, [r7, #15]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	807b      	strh	r3, [r7, #2]
 80037a0:	4613      	mov	r3, r2
 80037a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037a4:	787b      	ldrb	r3, [r7, #1]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037aa:	887a      	ldrh	r2, [r7, #2]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037b0:	e003      	b.n	80037ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037b2:	887b      	ldrh	r3, [r7, #2]
 80037b4:	041a      	lsls	r2, r3, #16
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	619a      	str	r2, [r3, #24]
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037d2:	4b08      	ldr	r3, [pc, #32]	@ (80037f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	4013      	ands	r3, r2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d006      	beq.n	80037ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037de:	4a05      	ldr	r2, [pc, #20]	@ (80037f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037e0:	88fb      	ldrh	r3, [r7, #6]
 80037e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fd f9b2 	bl	8000b50 <HAL_GPIO_EXTI_Callback>
  }
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40013c00 	.word	0x40013c00

080037f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e12b      	b.n	8003a62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fe fa8c 	bl	8001d3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2224      	movs	r2, #36	@ 0x24
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0201 	bic.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800384a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800385a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800385c:	f001 f89a 	bl	8004994 <HAL_RCC_GetPCLK1Freq>
 8003860:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4a81      	ldr	r2, [pc, #516]	@ (8003a6c <HAL_I2C_Init+0x274>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d807      	bhi.n	800387c <HAL_I2C_Init+0x84>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4a80      	ldr	r2, [pc, #512]	@ (8003a70 <HAL_I2C_Init+0x278>)
 8003870:	4293      	cmp	r3, r2
 8003872:	bf94      	ite	ls
 8003874:	2301      	movls	r3, #1
 8003876:	2300      	movhi	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	e006      	b.n	800388a <HAL_I2C_Init+0x92>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4a7d      	ldr	r2, [pc, #500]	@ (8003a74 <HAL_I2C_Init+0x27c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	bf94      	ite	ls
 8003884:	2301      	movls	r3, #1
 8003886:	2300      	movhi	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e0e7      	b.n	8003a62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4a78      	ldr	r2, [pc, #480]	@ (8003a78 <HAL_I2C_Init+0x280>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	0c9b      	lsrs	r3, r3, #18
 800389c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4a6a      	ldr	r2, [pc, #424]	@ (8003a6c <HAL_I2C_Init+0x274>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d802      	bhi.n	80038cc <HAL_I2C_Init+0xd4>
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	3301      	adds	r3, #1
 80038ca:	e009      	b.n	80038e0 <HAL_I2C_Init+0xe8>
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80038d2:	fb02 f303 	mul.w	r3, r2, r3
 80038d6:	4a69      	ldr	r2, [pc, #420]	@ (8003a7c <HAL_I2C_Init+0x284>)
 80038d8:	fba2 2303 	umull	r2, r3, r2, r3
 80038dc:	099b      	lsrs	r3, r3, #6
 80038de:	3301      	adds	r3, #1
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	430b      	orrs	r3, r1
 80038e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	495c      	ldr	r1, [pc, #368]	@ (8003a6c <HAL_I2C_Init+0x274>)
 80038fc:	428b      	cmp	r3, r1
 80038fe:	d819      	bhi.n	8003934 <HAL_I2C_Init+0x13c>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1e59      	subs	r1, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	fbb1 f3f3 	udiv	r3, r1, r3
 800390e:	1c59      	adds	r1, r3, #1
 8003910:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003914:	400b      	ands	r3, r1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <HAL_I2C_Init+0x138>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1e59      	subs	r1, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	fbb1 f3f3 	udiv	r3, r1, r3
 8003928:	3301      	adds	r3, #1
 800392a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392e:	e051      	b.n	80039d4 <HAL_I2C_Init+0x1dc>
 8003930:	2304      	movs	r3, #4
 8003932:	e04f      	b.n	80039d4 <HAL_I2C_Init+0x1dc>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d111      	bne.n	8003960 <HAL_I2C_Init+0x168>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	1e58      	subs	r0, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6859      	ldr	r1, [r3, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	440b      	add	r3, r1
 800394a:	fbb0 f3f3 	udiv	r3, r0, r3
 800394e:	3301      	adds	r3, #1
 8003950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003954:	2b00      	cmp	r3, #0
 8003956:	bf0c      	ite	eq
 8003958:	2301      	moveq	r3, #1
 800395a:	2300      	movne	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	e012      	b.n	8003986 <HAL_I2C_Init+0x18e>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	1e58      	subs	r0, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6859      	ldr	r1, [r3, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	0099      	lsls	r1, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	fbb0 f3f3 	udiv	r3, r0, r3
 8003976:	3301      	adds	r3, #1
 8003978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800397c:	2b00      	cmp	r3, #0
 800397e:	bf0c      	ite	eq
 8003980:	2301      	moveq	r3, #1
 8003982:	2300      	movne	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_Init+0x196>
 800398a:	2301      	movs	r3, #1
 800398c:	e022      	b.n	80039d4 <HAL_I2C_Init+0x1dc>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10e      	bne.n	80039b4 <HAL_I2C_Init+0x1bc>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1e58      	subs	r0, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6859      	ldr	r1, [r3, #4]
 800399e:	460b      	mov	r3, r1
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	440b      	add	r3, r1
 80039a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a8:	3301      	adds	r3, #1
 80039aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039b2:	e00f      	b.n	80039d4 <HAL_I2C_Init+0x1dc>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1e58      	subs	r0, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6859      	ldr	r1, [r3, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	0099      	lsls	r1, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ca:	3301      	adds	r3, #1
 80039cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	6809      	ldr	r1, [r1, #0]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69da      	ldr	r2, [r3, #28]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6911      	ldr	r1, [r2, #16]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68d2      	ldr	r2, [r2, #12]
 8003a0e:	4311      	orrs	r1, r2
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	430b      	orrs	r3, r1
 8003a16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	000186a0 	.word	0x000186a0
 8003a70:	001e847f 	.word	0x001e847f
 8003a74:	003d08ff 	.word	0x003d08ff
 8003a78:	431bde83 	.word	0x431bde83
 8003a7c:	10624dd3 	.word	0x10624dd3

08003a80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	817b      	strh	r3, [r7, #10]
 8003a90:	4613      	mov	r3, r2
 8003a92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a94:	f7fe fb40 	bl	8002118 <HAL_GetTick>
 8003a98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	f040 80e0 	bne.w	8003c68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	2319      	movs	r3, #25
 8003aae:	2201      	movs	r2, #1
 8003ab0:	4970      	ldr	r1, [pc, #448]	@ (8003c74 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f964 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e0d3      	b.n	8003c6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_I2C_Master_Transmit+0x50>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e0cc      	b.n	8003c6a <HAL_I2C_Master_Transmit+0x1ea>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d007      	beq.n	8003af6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0201 	orr.w	r2, r2, #1
 8003af4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2221      	movs	r2, #33	@ 0x21
 8003b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2210      	movs	r2, #16
 8003b12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	893a      	ldrh	r2, [r7, #8]
 8003b26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4a50      	ldr	r2, [pc, #320]	@ (8003c78 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b38:	8979      	ldrh	r1, [r7, #10]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	6a3a      	ldr	r2, [r7, #32]
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f89c 	bl	8003c7c <I2C_MasterRequestWrite>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e08d      	b.n	8003c6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4e:	2300      	movs	r3, #0
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b64:	e066      	b.n	8003c34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	6a39      	ldr	r1, [r7, #32]
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fa22 	bl	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00d      	beq.n	8003b92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d107      	bne.n	8003b8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e06b      	b.n	8003c6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b96:	781a      	ldrb	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d11b      	bne.n	8003c08 <HAL_I2C_Master_Transmit+0x188>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d017      	beq.n	8003c08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bdc:	781a      	ldrb	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	6a39      	ldr	r1, [r7, #32]
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 fa19 	bl	8004044 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00d      	beq.n	8003c34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d107      	bne.n	8003c30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e01a      	b.n	8003c6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d194      	bne.n	8003b66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e000      	b.n	8003c6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c68:	2302      	movs	r3, #2
  }
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	00100002 	.word	0x00100002
 8003c78:	ffff0000 	.word	0xffff0000

08003c7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	607a      	str	r2, [r7, #4]
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d006      	beq.n	8003ca6 <I2C_MasterRequestWrite+0x2a>
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d003      	beq.n	8003ca6 <I2C_MasterRequestWrite+0x2a>
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ca4:	d108      	bne.n	8003cb8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	e00b      	b.n	8003cd0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbc:	2b12      	cmp	r3, #18
 8003cbe:	d107      	bne.n	8003cd0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 f84f 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00d      	beq.n	8003d04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cf6:	d103      	bne.n	8003d00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cfe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e035      	b.n	8003d70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d0c:	d108      	bne.n	8003d20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d0e:	897b      	ldrh	r3, [r7, #10]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d1c:	611a      	str	r2, [r3, #16]
 8003d1e:	e01b      	b.n	8003d58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d20:	897b      	ldrh	r3, [r7, #10]
 8003d22:	11db      	asrs	r3, r3, #7
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f003 0306 	and.w	r3, r3, #6
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	f063 030f 	orn	r3, r3, #15
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	490e      	ldr	r1, [pc, #56]	@ (8003d78 <I2C_MasterRequestWrite+0xfc>)
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f898 	bl	8003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e010      	b.n	8003d70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d4e:	897b      	ldrh	r3, [r7, #10]
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	4907      	ldr	r1, [pc, #28]	@ (8003d7c <I2C_MasterRequestWrite+0x100>)
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f888 	bl	8003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	00010008 	.word	0x00010008
 8003d7c:	00010002 	.word	0x00010002

08003d80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	603b      	str	r3, [r7, #0]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d90:	e048      	b.n	8003e24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d98:	d044      	beq.n	8003e24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9a:	f7fe f9bd 	bl	8002118 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d302      	bcc.n	8003db0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d139      	bne.n	8003e24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	0c1b      	lsrs	r3, r3, #16
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d10d      	bne.n	8003dd6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	43da      	mvns	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bf0c      	ite	eq
 8003dcc:	2301      	moveq	r3, #1
 8003dce:	2300      	movne	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	e00c      	b.n	8003df0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	43da      	mvns	r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	4013      	ands	r3, r2
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf0c      	ite	eq
 8003de8:	2301      	moveq	r3, #1
 8003dea:	2300      	movne	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	461a      	mov	r2, r3
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d116      	bne.n	8003e24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	f043 0220 	orr.w	r2, r3, #32
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e023      	b.n	8003e6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	0c1b      	lsrs	r3, r3, #16
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d10d      	bne.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	43da      	mvns	r2, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	bf0c      	ite	eq
 8003e40:	2301      	moveq	r3, #1
 8003e42:	2300      	movne	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	461a      	mov	r2, r3
 8003e48:	e00c      	b.n	8003e64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	43da      	mvns	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4013      	ands	r3, r2
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bf0c      	ite	eq
 8003e5c:	2301      	moveq	r3, #1
 8003e5e:	2300      	movne	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d093      	beq.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e82:	e071      	b.n	8003f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e92:	d123      	bne.n	8003edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ea2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003eac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec8:	f043 0204 	orr.w	r2, r3, #4
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e067      	b.n	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee2:	d041      	beq.n	8003f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee4:	f7fe f918 	bl	8002118 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d302      	bcc.n	8003efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d136      	bne.n	8003f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	0c1b      	lsrs	r3, r3, #16
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d10c      	bne.n	8003f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	43da      	mvns	r2, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	bf14      	ite	ne
 8003f16:	2301      	movne	r3, #1
 8003f18:	2300      	moveq	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	e00b      	b.n	8003f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	43da      	mvns	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf14      	ite	ne
 8003f30:	2301      	movne	r3, #1
 8003f32:	2300      	moveq	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d016      	beq.n	8003f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f54:	f043 0220 	orr.w	r2, r3, #32
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e021      	b.n	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	0c1b      	lsrs	r3, r3, #16
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d10c      	bne.n	8003f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	43da      	mvns	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	e00b      	b.n	8003fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	43da      	mvns	r2, r3
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	4013      	ands	r3, r2
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	bf14      	ite	ne
 8003f9e:	2301      	movne	r3, #1
 8003fa0:	2300      	moveq	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f47f af6d 	bne.w	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fc0:	e034      	b.n	800402c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 f886 	bl	80040d4 <I2C_IsAcknowledgeFailed>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e034      	b.n	800403c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd8:	d028      	beq.n	800402c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fda:	f7fe f89d 	bl	8002118 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d302      	bcc.n	8003ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d11d      	bne.n	800402c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffa:	2b80      	cmp	r3, #128	@ 0x80
 8003ffc:	d016      	beq.n	800402c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004018:	f043 0220 	orr.w	r2, r3, #32
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e007      	b.n	800403c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004036:	2b80      	cmp	r3, #128	@ 0x80
 8004038:	d1c3      	bne.n	8003fc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004050:	e034      	b.n	80040bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 f83e 	bl	80040d4 <I2C_IsAcknowledgeFailed>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e034      	b.n	80040cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004068:	d028      	beq.n	80040bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800406a:	f7fe f855 	bl	8002118 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	429a      	cmp	r2, r3
 8004078:	d302      	bcc.n	8004080 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d11d      	bne.n	80040bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b04      	cmp	r3, #4
 800408c:	d016      	beq.n	80040bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a8:	f043 0220 	orr.w	r2, r3, #32
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e007      	b.n	80040cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f003 0304 	and.w	r3, r3, #4
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d1c3      	bne.n	8004052 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ea:	d11b      	bne.n	8004124 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004110:	f043 0204 	orr.w	r2, r3, #4
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
	...

08004134 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e267      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d075      	beq.n	800423e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004152:	4b88      	ldr	r3, [pc, #544]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
 800415a:	2b04      	cmp	r3, #4
 800415c:	d00c      	beq.n	8004178 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800415e:	4b85      	ldr	r3, [pc, #532]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004166:	2b08      	cmp	r3, #8
 8004168:	d112      	bne.n	8004190 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800416a:	4b82      	ldr	r3, [pc, #520]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004172:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004176:	d10b      	bne.n	8004190 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004178:	4b7e      	ldr	r3, [pc, #504]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d05b      	beq.n	800423c <HAL_RCC_OscConfig+0x108>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d157      	bne.n	800423c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e242      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004198:	d106      	bne.n	80041a8 <HAL_RCC_OscConfig+0x74>
 800419a:	4b76      	ldr	r3, [pc, #472]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a75      	ldr	r2, [pc, #468]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 80041a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	e01d      	b.n	80041e4 <HAL_RCC_OscConfig+0xb0>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041b0:	d10c      	bne.n	80041cc <HAL_RCC_OscConfig+0x98>
 80041b2:	4b70      	ldr	r3, [pc, #448]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a6f      	ldr	r2, [pc, #444]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 80041b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	4b6d      	ldr	r3, [pc, #436]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a6c      	ldr	r2, [pc, #432]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 80041c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	e00b      	b.n	80041e4 <HAL_RCC_OscConfig+0xb0>
 80041cc:	4b69      	ldr	r3, [pc, #420]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a68      	ldr	r2, [pc, #416]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 80041d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	4b66      	ldr	r3, [pc, #408]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a65      	ldr	r2, [pc, #404]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 80041de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d013      	beq.n	8004214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ec:	f7fd ff94 	bl	8002118 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041f4:	f7fd ff90 	bl	8002118 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b64      	cmp	r3, #100	@ 0x64
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e207      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004206:	4b5b      	ldr	r3, [pc, #364]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0xc0>
 8004212:	e014      	b.n	800423e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004214:	f7fd ff80 	bl	8002118 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800421c:	f7fd ff7c 	bl	8002118 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b64      	cmp	r3, #100	@ 0x64
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e1f3      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800422e:	4b51      	ldr	r3, [pc, #324]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0xe8>
 800423a:	e000      	b.n	800423e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800423c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d063      	beq.n	8004312 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800424a:	4b4a      	ldr	r3, [pc, #296]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 030c 	and.w	r3, r3, #12
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00b      	beq.n	800426e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004256:	4b47      	ldr	r3, [pc, #284]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800425e:	2b08      	cmp	r3, #8
 8004260:	d11c      	bne.n	800429c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004262:	4b44      	ldr	r3, [pc, #272]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d116      	bne.n	800429c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800426e:	4b41      	ldr	r3, [pc, #260]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d005      	beq.n	8004286 <HAL_RCC_OscConfig+0x152>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d001      	beq.n	8004286 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e1c7      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004286:	4b3b      	ldr	r3, [pc, #236]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	4937      	ldr	r1, [pc, #220]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 8004296:	4313      	orrs	r3, r2
 8004298:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800429a:	e03a      	b.n	8004312 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d020      	beq.n	80042e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042a4:	4b34      	ldr	r3, [pc, #208]	@ (8004378 <HAL_RCC_OscConfig+0x244>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042aa:	f7fd ff35 	bl	8002118 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b2:	f7fd ff31 	bl	8002118 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e1a8      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0f0      	beq.n	80042b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d0:	4b28      	ldr	r3, [pc, #160]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	4925      	ldr	r1, [pc, #148]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	600b      	str	r3, [r1, #0]
 80042e4:	e015      	b.n	8004312 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042e6:	4b24      	ldr	r3, [pc, #144]	@ (8004378 <HAL_RCC_OscConfig+0x244>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7fd ff14 	bl	8002118 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f4:	f7fd ff10 	bl	8002118 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e187      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004306:	4b1b      	ldr	r3, [pc, #108]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b00      	cmp	r3, #0
 800431c:	d036      	beq.n	800438c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d016      	beq.n	8004354 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004326:	4b15      	ldr	r3, [pc, #84]	@ (800437c <HAL_RCC_OscConfig+0x248>)
 8004328:	2201      	movs	r2, #1
 800432a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432c:	f7fd fef4 	bl	8002118 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004334:	f7fd fef0 	bl	8002118 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e167      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004346:	4b0b      	ldr	r3, [pc, #44]	@ (8004374 <HAL_RCC_OscConfig+0x240>)
 8004348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f0      	beq.n	8004334 <HAL_RCC_OscConfig+0x200>
 8004352:	e01b      	b.n	800438c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004354:	4b09      	ldr	r3, [pc, #36]	@ (800437c <HAL_RCC_OscConfig+0x248>)
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800435a:	f7fd fedd 	bl	8002118 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004360:	e00e      	b.n	8004380 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004362:	f7fd fed9 	bl	8002118 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d907      	bls.n	8004380 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e150      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
 8004374:	40023800 	.word	0x40023800
 8004378:	42470000 	.word	0x42470000
 800437c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004380:	4b88      	ldr	r3, [pc, #544]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1ea      	bne.n	8004362 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 8097 	beq.w	80044c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800439a:	2300      	movs	r3, #0
 800439c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800439e:	4b81      	ldr	r3, [pc, #516]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10f      	bne.n	80043ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043aa:	2300      	movs	r3, #0
 80043ac:	60bb      	str	r3, [r7, #8]
 80043ae:	4b7d      	ldr	r3, [pc, #500]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 80043b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b2:	4a7c      	ldr	r2, [pc, #496]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 80043b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80043ba:	4b7a      	ldr	r3, [pc, #488]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043c2:	60bb      	str	r3, [r7, #8]
 80043c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043c6:	2301      	movs	r3, #1
 80043c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ca:	4b77      	ldr	r3, [pc, #476]	@ (80045a8 <HAL_RCC_OscConfig+0x474>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d118      	bne.n	8004408 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043d6:	4b74      	ldr	r3, [pc, #464]	@ (80045a8 <HAL_RCC_OscConfig+0x474>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a73      	ldr	r2, [pc, #460]	@ (80045a8 <HAL_RCC_OscConfig+0x474>)
 80043dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043e2:	f7fd fe99 	bl	8002118 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ea:	f7fd fe95 	bl	8002118 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e10c      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fc:	4b6a      	ldr	r3, [pc, #424]	@ (80045a8 <HAL_RCC_OscConfig+0x474>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0f0      	beq.n	80043ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d106      	bne.n	800441e <HAL_RCC_OscConfig+0x2ea>
 8004410:	4b64      	ldr	r3, [pc, #400]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004414:	4a63      	ldr	r2, [pc, #396]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004416:	f043 0301 	orr.w	r3, r3, #1
 800441a:	6713      	str	r3, [r2, #112]	@ 0x70
 800441c:	e01c      	b.n	8004458 <HAL_RCC_OscConfig+0x324>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2b05      	cmp	r3, #5
 8004424:	d10c      	bne.n	8004440 <HAL_RCC_OscConfig+0x30c>
 8004426:	4b5f      	ldr	r3, [pc, #380]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442a:	4a5e      	ldr	r2, [pc, #376]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 800442c:	f043 0304 	orr.w	r3, r3, #4
 8004430:	6713      	str	r3, [r2, #112]	@ 0x70
 8004432:	4b5c      	ldr	r3, [pc, #368]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004436:	4a5b      	ldr	r2, [pc, #364]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	6713      	str	r3, [r2, #112]	@ 0x70
 800443e:	e00b      	b.n	8004458 <HAL_RCC_OscConfig+0x324>
 8004440:	4b58      	ldr	r3, [pc, #352]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004444:	4a57      	ldr	r2, [pc, #348]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004446:	f023 0301 	bic.w	r3, r3, #1
 800444a:	6713      	str	r3, [r2, #112]	@ 0x70
 800444c:	4b55      	ldr	r3, [pc, #340]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 800444e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004450:	4a54      	ldr	r2, [pc, #336]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004452:	f023 0304 	bic.w	r3, r3, #4
 8004456:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d015      	beq.n	800448c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004460:	f7fd fe5a 	bl	8002118 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004466:	e00a      	b.n	800447e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004468:	f7fd fe56 	bl	8002118 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e0cb      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800447e:	4b49      	ldr	r3, [pc, #292]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0ee      	beq.n	8004468 <HAL_RCC_OscConfig+0x334>
 800448a:	e014      	b.n	80044b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800448c:	f7fd fe44 	bl	8002118 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004492:	e00a      	b.n	80044aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004494:	f7fd fe40 	bl	8002118 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e0b5      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044aa:	4b3e      	ldr	r3, [pc, #248]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1ee      	bne.n	8004494 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044b6:	7dfb      	ldrb	r3, [r7, #23]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d105      	bne.n	80044c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044bc:	4b39      	ldr	r3, [pc, #228]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 80044be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c0:	4a38      	ldr	r2, [pc, #224]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 80044c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 80a1 	beq.w	8004614 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044d2:	4b34      	ldr	r3, [pc, #208]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 030c 	and.w	r3, r3, #12
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d05c      	beq.n	8004598 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d141      	bne.n	800456a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e6:	4b31      	ldr	r3, [pc, #196]	@ (80045ac <HAL_RCC_OscConfig+0x478>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ec:	f7fd fe14 	bl	8002118 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fd fe10 	bl	8002118 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e087      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004506:	4b27      	ldr	r3, [pc, #156]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69da      	ldr	r2, [r3, #28]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	019b      	lsls	r3, r3, #6
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	3b01      	subs	r3, #1
 800452c:	041b      	lsls	r3, r3, #16
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004534:	061b      	lsls	r3, r3, #24
 8004536:	491b      	ldr	r1, [pc, #108]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004538:	4313      	orrs	r3, r2
 800453a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800453c:	4b1b      	ldr	r3, [pc, #108]	@ (80045ac <HAL_RCC_OscConfig+0x478>)
 800453e:	2201      	movs	r2, #1
 8004540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004542:	f7fd fde9 	bl	8002118 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454a:	f7fd fde5 	bl	8002118 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e05c      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800455c:	4b11      	ldr	r3, [pc, #68]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0f0      	beq.n	800454a <HAL_RCC_OscConfig+0x416>
 8004568:	e054      	b.n	8004614 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800456a:	4b10      	ldr	r3, [pc, #64]	@ (80045ac <HAL_RCC_OscConfig+0x478>)
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004570:	f7fd fdd2 	bl	8002118 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004578:	f7fd fdce 	bl	8002118 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e045      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458a:	4b06      	ldr	r3, [pc, #24]	@ (80045a4 <HAL_RCC_OscConfig+0x470>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCC_OscConfig+0x444>
 8004596:	e03d      	b.n	8004614 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d107      	bne.n	80045b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e038      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
 80045a4:	40023800 	.word	0x40023800
 80045a8:	40007000 	.word	0x40007000
 80045ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004620 <HAL_RCC_OscConfig+0x4ec>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d028      	beq.n	8004610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d121      	bne.n	8004610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d11a      	bne.n	8004610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045e0:	4013      	ands	r3, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d111      	bne.n	8004610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f6:	085b      	lsrs	r3, r3, #1
 80045f8:	3b01      	subs	r3, #1
 80045fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d107      	bne.n	8004610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800460c:	429a      	cmp	r2, r3
 800460e:	d001      	beq.n	8004614 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e000      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40023800 	.word	0x40023800

08004624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e0cc      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004638:	4b68      	ldr	r3, [pc, #416]	@ (80047dc <HAL_RCC_ClockConfig+0x1b8>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d90c      	bls.n	8004660 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004646:	4b65      	ldr	r3, [pc, #404]	@ (80047dc <HAL_RCC_ClockConfig+0x1b8>)
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800464e:	4b63      	ldr	r3, [pc, #396]	@ (80047dc <HAL_RCC_ClockConfig+0x1b8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	429a      	cmp	r2, r3
 800465a:	d001      	beq.n	8004660 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0b8      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d020      	beq.n	80046ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004678:	4b59      	ldr	r3, [pc, #356]	@ (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	4a58      	ldr	r2, [pc, #352]	@ (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004682:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004690:	4b53      	ldr	r3, [pc, #332]	@ (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	4a52      	ldr	r2, [pc, #328]	@ (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800469a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800469c:	4b50      	ldr	r3, [pc, #320]	@ (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	494d      	ldr	r1, [pc, #308]	@ (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d044      	beq.n	8004744 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d107      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c2:	4b47      	ldr	r3, [pc, #284]	@ (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d119      	bne.n	8004702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e07f      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d003      	beq.n	80046e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d107      	bne.n	80046f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e2:	4b3f      	ldr	r3, [pc, #252]	@ (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d109      	bne.n	8004702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e06f      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f2:	4b3b      	ldr	r3, [pc, #236]	@ (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e067      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004702:	4b37      	ldr	r3, [pc, #220]	@ (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f023 0203 	bic.w	r2, r3, #3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	4934      	ldr	r1, [pc, #208]	@ (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004710:	4313      	orrs	r3, r2
 8004712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004714:	f7fd fd00 	bl	8002118 <HAL_GetTick>
 8004718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471a:	e00a      	b.n	8004732 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800471c:	f7fd fcfc 	bl	8002118 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800472a:	4293      	cmp	r3, r2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e04f      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004732:	4b2b      	ldr	r3, [pc, #172]	@ (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 020c 	and.w	r2, r3, #12
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	429a      	cmp	r2, r3
 8004742:	d1eb      	bne.n	800471c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004744:	4b25      	ldr	r3, [pc, #148]	@ (80047dc <HAL_RCC_ClockConfig+0x1b8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d20c      	bcs.n	800476c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004752:	4b22      	ldr	r3, [pc, #136]	@ (80047dc <HAL_RCC_ClockConfig+0x1b8>)
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800475a:	4b20      	ldr	r3, [pc, #128]	@ (80047dc <HAL_RCC_ClockConfig+0x1b8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	429a      	cmp	r2, r3
 8004766:	d001      	beq.n	800476c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e032      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d008      	beq.n	800478a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004778:	4b19      	ldr	r3, [pc, #100]	@ (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	4916      	ldr	r1, [pc, #88]	@ (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	4313      	orrs	r3, r2
 8004788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d009      	beq.n	80047aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004796:	4b12      	ldr	r3, [pc, #72]	@ (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	490e      	ldr	r1, [pc, #56]	@ (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047aa:	f000 f821 	bl	80047f0 <HAL_RCC_GetSysClockFreq>
 80047ae:	4602      	mov	r2, r0
 80047b0:	4b0b      	ldr	r3, [pc, #44]	@ (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	091b      	lsrs	r3, r3, #4
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	490a      	ldr	r1, [pc, #40]	@ (80047e4 <HAL_RCC_ClockConfig+0x1c0>)
 80047bc:	5ccb      	ldrb	r3, [r1, r3]
 80047be:	fa22 f303 	lsr.w	r3, r2, r3
 80047c2:	4a09      	ldr	r2, [pc, #36]	@ (80047e8 <HAL_RCC_ClockConfig+0x1c4>)
 80047c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80047c6:	4b09      	ldr	r3, [pc, #36]	@ (80047ec <HAL_RCC_ClockConfig+0x1c8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fd fb66 	bl	8001e9c <HAL_InitTick>

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40023c00 	.word	0x40023c00
 80047e0:	40023800 	.word	0x40023800
 80047e4:	0800860c 	.word	0x0800860c
 80047e8:	20000094 	.word	0x20000094
 80047ec:	20000098 	.word	0x20000098

080047f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047f4:	b090      	sub	sp, #64	@ 0x40
 80047f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004808:	4b59      	ldr	r3, [pc, #356]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x180>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 030c 	and.w	r3, r3, #12
 8004810:	2b08      	cmp	r3, #8
 8004812:	d00d      	beq.n	8004830 <HAL_RCC_GetSysClockFreq+0x40>
 8004814:	2b08      	cmp	r3, #8
 8004816:	f200 80a1 	bhi.w	800495c <HAL_RCC_GetSysClockFreq+0x16c>
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <HAL_RCC_GetSysClockFreq+0x34>
 800481e:	2b04      	cmp	r3, #4
 8004820:	d003      	beq.n	800482a <HAL_RCC_GetSysClockFreq+0x3a>
 8004822:	e09b      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004824:	4b53      	ldr	r3, [pc, #332]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x184>)
 8004826:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004828:	e09b      	b.n	8004962 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800482a:	4b53      	ldr	r3, [pc, #332]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x188>)
 800482c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800482e:	e098      	b.n	8004962 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004830:	4b4f      	ldr	r3, [pc, #316]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x180>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004838:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800483a:	4b4d      	ldr	r3, [pc, #308]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x180>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d028      	beq.n	8004898 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004846:	4b4a      	ldr	r3, [pc, #296]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x180>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	099b      	lsrs	r3, r3, #6
 800484c:	2200      	movs	r2, #0
 800484e:	623b      	str	r3, [r7, #32]
 8004850:	627a      	str	r2, [r7, #36]	@ 0x24
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004858:	2100      	movs	r1, #0
 800485a:	4b47      	ldr	r3, [pc, #284]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x188>)
 800485c:	fb03 f201 	mul.w	r2, r3, r1
 8004860:	2300      	movs	r3, #0
 8004862:	fb00 f303 	mul.w	r3, r0, r3
 8004866:	4413      	add	r3, r2
 8004868:	4a43      	ldr	r2, [pc, #268]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x188>)
 800486a:	fba0 1202 	umull	r1, r2, r0, r2
 800486e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004870:	460a      	mov	r2, r1
 8004872:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004874:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004876:	4413      	add	r3, r2
 8004878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800487a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800487c:	2200      	movs	r2, #0
 800487e:	61bb      	str	r3, [r7, #24]
 8004880:	61fa      	str	r2, [r7, #28]
 8004882:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004886:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800488a:	f7fb fcb1 	bl	80001f0 <__aeabi_uldivmod>
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	4613      	mov	r3, r2
 8004894:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004896:	e053      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004898:	4b35      	ldr	r3, [pc, #212]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x180>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	099b      	lsrs	r3, r3, #6
 800489e:	2200      	movs	r2, #0
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	617a      	str	r2, [r7, #20]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80048aa:	f04f 0b00 	mov.w	fp, #0
 80048ae:	4652      	mov	r2, sl
 80048b0:	465b      	mov	r3, fp
 80048b2:	f04f 0000 	mov.w	r0, #0
 80048b6:	f04f 0100 	mov.w	r1, #0
 80048ba:	0159      	lsls	r1, r3, #5
 80048bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048c0:	0150      	lsls	r0, r2, #5
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	ebb2 080a 	subs.w	r8, r2, sl
 80048ca:	eb63 090b 	sbc.w	r9, r3, fp
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80048da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80048de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80048e2:	ebb2 0408 	subs.w	r4, r2, r8
 80048e6:	eb63 0509 	sbc.w	r5, r3, r9
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	00eb      	lsls	r3, r5, #3
 80048f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048f8:	00e2      	lsls	r2, r4, #3
 80048fa:	4614      	mov	r4, r2
 80048fc:	461d      	mov	r5, r3
 80048fe:	eb14 030a 	adds.w	r3, r4, sl
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	eb45 030b 	adc.w	r3, r5, fp
 8004908:	607b      	str	r3, [r7, #4]
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	f04f 0300 	mov.w	r3, #0
 8004912:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004916:	4629      	mov	r1, r5
 8004918:	028b      	lsls	r3, r1, #10
 800491a:	4621      	mov	r1, r4
 800491c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004920:	4621      	mov	r1, r4
 8004922:	028a      	lsls	r2, r1, #10
 8004924:	4610      	mov	r0, r2
 8004926:	4619      	mov	r1, r3
 8004928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800492a:	2200      	movs	r2, #0
 800492c:	60bb      	str	r3, [r7, #8]
 800492e:	60fa      	str	r2, [r7, #12]
 8004930:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004934:	f7fb fc5c 	bl	80001f0 <__aeabi_uldivmod>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	4613      	mov	r3, r2
 800493e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004940:	4b0b      	ldr	r3, [pc, #44]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x180>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	0c1b      	lsrs	r3, r3, #16
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	3301      	adds	r3, #1
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004950:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800495a:	e002      	b.n	8004962 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800495c:	4b05      	ldr	r3, [pc, #20]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x184>)
 800495e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004964:	4618      	mov	r0, r3
 8004966:	3740      	adds	r7, #64	@ 0x40
 8004968:	46bd      	mov	sp, r7
 800496a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800496e:	bf00      	nop
 8004970:	40023800 	.word	0x40023800
 8004974:	00f42400 	.word	0x00f42400
 8004978:	017d7840 	.word	0x017d7840

0800497c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004980:	4b03      	ldr	r3, [pc, #12]	@ (8004990 <HAL_RCC_GetHCLKFreq+0x14>)
 8004982:	681b      	ldr	r3, [r3, #0]
}
 8004984:	4618      	mov	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	20000094 	.word	0x20000094

08004994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004998:	f7ff fff0 	bl	800497c <HAL_RCC_GetHCLKFreq>
 800499c:	4602      	mov	r2, r0
 800499e:	4b05      	ldr	r3, [pc, #20]	@ (80049b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	0a9b      	lsrs	r3, r3, #10
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	4903      	ldr	r1, [pc, #12]	@ (80049b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049aa:	5ccb      	ldrb	r3, [r1, r3]
 80049ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40023800 	.word	0x40023800
 80049b8:	0800861c 	.word	0x0800861c

080049bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049c0:	f7ff ffdc 	bl	800497c <HAL_RCC_GetHCLKFreq>
 80049c4:	4602      	mov	r2, r0
 80049c6:	4b05      	ldr	r3, [pc, #20]	@ (80049dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	0b5b      	lsrs	r3, r3, #13
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	4903      	ldr	r1, [pc, #12]	@ (80049e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049d2:	5ccb      	ldrb	r3, [r1, r3]
 80049d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049d8:	4618      	mov	r0, r3
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40023800 	.word	0x40023800
 80049e0:	0800861c 	.word	0x0800861c

080049e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	220f      	movs	r2, #15
 80049f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049f4:	4b12      	ldr	r3, [pc, #72]	@ (8004a40 <HAL_RCC_GetClockConfig+0x5c>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 0203 	and.w	r2, r3, #3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a00:	4b0f      	ldr	r3, [pc, #60]	@ (8004a40 <HAL_RCC_GetClockConfig+0x5c>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a40 <HAL_RCC_GetClockConfig+0x5c>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a18:	4b09      	ldr	r3, [pc, #36]	@ (8004a40 <HAL_RCC_GetClockConfig+0x5c>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	08db      	lsrs	r3, r3, #3
 8004a1e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a26:	4b07      	ldr	r3, [pc, #28]	@ (8004a44 <HAL_RCC_GetClockConfig+0x60>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0207 	and.w	r2, r3, #7
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	601a      	str	r2, [r3, #0]
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40023800 	.word	0x40023800
 8004a44:	40023c00 	.word	0x40023c00

08004a48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e07b      	b.n	8004b52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d108      	bne.n	8004a74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a6a:	d009      	beq.n	8004a80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	61da      	str	r2, [r3, #28]
 8004a72:	e005      	b.n	8004a80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fd f996 	bl	8001dcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ab6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b04:	ea42 0103 	orr.w	r1, r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	0c1b      	lsrs	r3, r3, #16
 8004b1e:	f003 0104 	and.w	r1, r3, #4
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b26:	f003 0210 	and.w	r2, r3, #16
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b088      	sub	sp, #32
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	60f8      	str	r0, [r7, #12]
 8004b62:	60b9      	str	r1, [r7, #8]
 8004b64:	603b      	str	r3, [r7, #0]
 8004b66:	4613      	mov	r3, r2
 8004b68:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b6a:	f7fd fad5 	bl	8002118 <HAL_GetTick>
 8004b6e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004b70:	88fb      	ldrh	r3, [r7, #6]
 8004b72:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d001      	beq.n	8004b84 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004b80:	2302      	movs	r3, #2
 8004b82:	e12a      	b.n	8004dda <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <HAL_SPI_Transmit+0x36>
 8004b8a:	88fb      	ldrh	r3, [r7, #6]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e122      	b.n	8004dda <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_SPI_Transmit+0x48>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e11b      	b.n	8004dda <HAL_SPI_Transmit+0x280>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2203      	movs	r2, #3
 8004bae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	88fa      	ldrh	r2, [r7, #6]
 8004bc2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	88fa      	ldrh	r2, [r7, #6]
 8004bc8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bf0:	d10f      	bne.n	8004c12 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c1c:	2b40      	cmp	r3, #64	@ 0x40
 8004c1e:	d007      	beq.n	8004c30 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c38:	d152      	bne.n	8004ce0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <HAL_SPI_Transmit+0xee>
 8004c42:	8b7b      	ldrh	r3, [r7, #26]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d145      	bne.n	8004cd4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4c:	881a      	ldrh	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c58:	1c9a      	adds	r2, r3, #2
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c6c:	e032      	b.n	8004cd4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d112      	bne.n	8004ca2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c80:	881a      	ldrh	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8c:	1c9a      	adds	r2, r3, #2
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004ca0:	e018      	b.n	8004cd4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ca2:	f7fd fa39 	bl	8002118 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d803      	bhi.n	8004cba <HAL_SPI_Transmit+0x160>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d102      	bne.n	8004cc0 <HAL_SPI_Transmit+0x166>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d109      	bne.n	8004cd4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e082      	b.n	8004dda <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1c7      	bne.n	8004c6e <HAL_SPI_Transmit+0x114>
 8004cde:	e053      	b.n	8004d88 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <HAL_SPI_Transmit+0x194>
 8004ce8:	8b7b      	ldrh	r3, [r7, #26]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d147      	bne.n	8004d7e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	330c      	adds	r3, #12
 8004cf8:	7812      	ldrb	r2, [r2, #0]
 8004cfa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d14:	e033      	b.n	8004d7e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d113      	bne.n	8004d4c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	330c      	adds	r3, #12
 8004d2e:	7812      	ldrb	r2, [r2, #0]
 8004d30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004d4a:	e018      	b.n	8004d7e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d4c:	f7fd f9e4 	bl	8002118 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d803      	bhi.n	8004d64 <HAL_SPI_Transmit+0x20a>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d62:	d102      	bne.n	8004d6a <HAL_SPI_Transmit+0x210>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d109      	bne.n	8004d7e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e02d      	b.n	8004dda <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1c6      	bne.n	8004d16 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d88:	69fa      	ldr	r2, [r7, #28]
 8004d8a:	6839      	ldr	r1, [r7, #0]
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 fbd9 	bl	8005544 <SPI_EndRxTxTransaction>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10a      	bne.n	8004dbc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004da6:	2300      	movs	r3, #0
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
  }
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3720      	adds	r7, #32
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b088      	sub	sp, #32
 8004de6:	af02      	add	r7, sp, #8
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	603b      	str	r3, [r7, #0]
 8004dee:	4613      	mov	r3, r2
 8004df0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d001      	beq.n	8004e02 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e104      	b.n	800500c <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <HAL_SPI_Receive+0x2c>
 8004e08:	88fb      	ldrh	r3, [r7, #6]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e0fc      	b.n	800500c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e1a:	d112      	bne.n	8004e42 <HAL_SPI_Receive+0x60>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10e      	bne.n	8004e42 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2204      	movs	r2, #4
 8004e28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e2c:	88fa      	ldrh	r2, [r7, #6]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	4613      	mov	r3, r2
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	68b9      	ldr	r1, [r7, #8]
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f8eb 	bl	8005014 <HAL_SPI_TransmitReceive>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	e0e4      	b.n	800500c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e42:	f7fd f969 	bl	8002118 <HAL_GetTick>
 8004e46:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_SPI_Receive+0x74>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e0da      	b.n	800500c <HAL_SPI_Receive+0x22a>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2204      	movs	r2, #4
 8004e62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	88fa      	ldrh	r2, [r7, #6]
 8004e76:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	88fa      	ldrh	r2, [r7, #6]
 8004e7c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ea4:	d10f      	bne.n	8004ec6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ec4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed0:	2b40      	cmp	r3, #64	@ 0x40
 8004ed2:	d007      	beq.n	8004ee4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ee2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d170      	bne.n	8004fce <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004eec:	e035      	b.n	8004f5a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d115      	bne.n	8004f28 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f103 020c 	add.w	r2, r3, #12
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f08:	7812      	ldrb	r2, [r2, #0]
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f26:	e018      	b.n	8004f5a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f28:	f7fd f8f6 	bl	8002118 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d803      	bhi.n	8004f40 <HAL_SPI_Receive+0x15e>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3e:	d102      	bne.n	8004f46 <HAL_SPI_Receive+0x164>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d109      	bne.n	8004f5a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e058      	b.n	800500c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1c4      	bne.n	8004eee <HAL_SPI_Receive+0x10c>
 8004f64:	e038      	b.n	8004fd8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d113      	bne.n	8004f9c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7e:	b292      	uxth	r2, r2
 8004f80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f86:	1c9a      	adds	r2, r3, #2
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f9a:	e018      	b.n	8004fce <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f9c:	f7fd f8bc 	bl	8002118 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d803      	bhi.n	8004fb4 <HAL_SPI_Receive+0x1d2>
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb2:	d102      	bne.n	8004fba <HAL_SPI_Receive+0x1d8>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e01e      	b.n	800500c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1c6      	bne.n	8004f66 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	6839      	ldr	r1, [r7, #0]
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 fa4b 	bl	8005478 <SPI_EndRxTransaction>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2220      	movs	r2, #32
 8004fec:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800500a:	2300      	movs	r3, #0
  }
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b08a      	sub	sp, #40	@ 0x28
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005022:	2301      	movs	r3, #1
 8005024:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005026:	f7fd f877 	bl	8002118 <HAL_GetTick>
 800502a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005032:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800503a:	887b      	ldrh	r3, [r7, #2]
 800503c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800503e:	7ffb      	ldrb	r3, [r7, #31]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d00c      	beq.n	800505e <HAL_SPI_TransmitReceive+0x4a>
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800504a:	d106      	bne.n	800505a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d102      	bne.n	800505a <HAL_SPI_TransmitReceive+0x46>
 8005054:	7ffb      	ldrb	r3, [r7, #31]
 8005056:	2b04      	cmp	r3, #4
 8005058:	d001      	beq.n	800505e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800505a:	2302      	movs	r3, #2
 800505c:	e17f      	b.n	800535e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <HAL_SPI_TransmitReceive+0x5c>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <HAL_SPI_TransmitReceive+0x5c>
 800506a:	887b      	ldrh	r3, [r7, #2]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e174      	b.n	800535e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_SPI_TransmitReceive+0x6e>
 800507e:	2302      	movs	r3, #2
 8005080:	e16d      	b.n	800535e <HAL_SPI_TransmitReceive+0x34a>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b04      	cmp	r3, #4
 8005094:	d003      	beq.n	800509e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2205      	movs	r2, #5
 800509a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	887a      	ldrh	r2, [r7, #2]
 80050ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	887a      	ldrh	r2, [r7, #2]
 80050b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	887a      	ldrh	r2, [r7, #2]
 80050c0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	887a      	ldrh	r2, [r7, #2]
 80050c6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050de:	2b40      	cmp	r3, #64	@ 0x40
 80050e0:	d007      	beq.n	80050f2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050fa:	d17e      	bne.n	80051fa <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <HAL_SPI_TransmitReceive+0xf6>
 8005104:	8afb      	ldrh	r3, [r7, #22]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d16c      	bne.n	80051e4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510e:	881a      	ldrh	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511a:	1c9a      	adds	r2, r3, #2
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800512e:	e059      	b.n	80051e4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b02      	cmp	r3, #2
 800513c:	d11b      	bne.n	8005176 <HAL_SPI_TransmitReceive+0x162>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005142:	b29b      	uxth	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d016      	beq.n	8005176 <HAL_SPI_TransmitReceive+0x162>
 8005148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514a:	2b01      	cmp	r3, #1
 800514c:	d113      	bne.n	8005176 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005152:	881a      	ldrh	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515e:	1c9a      	adds	r2, r3, #2
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005168:	b29b      	uxth	r3, r3
 800516a:	3b01      	subs	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b01      	cmp	r3, #1
 8005182:	d119      	bne.n	80051b8 <HAL_SPI_TransmitReceive+0x1a4>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005188:	b29b      	uxth	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d014      	beq.n	80051b8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005198:	b292      	uxth	r2, r2
 800519a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a0:	1c9a      	adds	r2, r3, #2
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051b4:	2301      	movs	r3, #1
 80051b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051b8:	f7fc ffae 	bl	8002118 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d80d      	bhi.n	80051e4 <HAL_SPI_TransmitReceive+0x1d0>
 80051c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ce:	d009      	beq.n	80051e4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e0bc      	b.n	800535e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1a0      	bne.n	8005130 <HAL_SPI_TransmitReceive+0x11c>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d19b      	bne.n	8005130 <HAL_SPI_TransmitReceive+0x11c>
 80051f8:	e082      	b.n	8005300 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <HAL_SPI_TransmitReceive+0x1f4>
 8005202:	8afb      	ldrh	r3, [r7, #22]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d171      	bne.n	80052ec <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	330c      	adds	r3, #12
 8005212:	7812      	ldrb	r2, [r2, #0]
 8005214:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005224:	b29b      	uxth	r3, r3
 8005226:	3b01      	subs	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800522e:	e05d      	b.n	80052ec <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b02      	cmp	r3, #2
 800523c:	d11c      	bne.n	8005278 <HAL_SPI_TransmitReceive+0x264>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d017      	beq.n	8005278 <HAL_SPI_TransmitReceive+0x264>
 8005248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524a:	2b01      	cmp	r3, #1
 800524c:	d114      	bne.n	8005278 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	330c      	adds	r3, #12
 8005258:	7812      	ldrb	r2, [r2, #0]
 800525a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b01      	cmp	r3, #1
 8005284:	d119      	bne.n	80052ba <HAL_SPI_TransmitReceive+0x2a6>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d014      	beq.n	80052ba <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052b6:	2301      	movs	r3, #1
 80052b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052ba:	f7fc ff2d 	bl	8002118 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d803      	bhi.n	80052d2 <HAL_SPI_TransmitReceive+0x2be>
 80052ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d0:	d102      	bne.n	80052d8 <HAL_SPI_TransmitReceive+0x2c4>
 80052d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d109      	bne.n	80052ec <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e038      	b.n	800535e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d19c      	bne.n	8005230 <HAL_SPI_TransmitReceive+0x21c>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d197      	bne.n	8005230 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005300:	6a3a      	ldr	r2, [r7, #32]
 8005302:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f91d 	bl	8005544 <SPI_EndRxTxTransaction>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d008      	beq.n	8005322 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2220      	movs	r2, #32
 8005314:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e01d      	b.n	800535e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800532a:	2300      	movs	r3, #0
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	613b      	str	r3, [r7, #16]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e000      	b.n	800535e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800535c:	2300      	movs	r3, #0
  }
}
 800535e:	4618      	mov	r0, r3
 8005360:	3728      	adds	r7, #40	@ 0x28
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	4613      	mov	r3, r2
 8005376:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005378:	f7fc fece 	bl	8002118 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005380:	1a9b      	subs	r3, r3, r2
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	4413      	add	r3, r2
 8005386:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005388:	f7fc fec6 	bl	8002118 <HAL_GetTick>
 800538c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800538e:	4b39      	ldr	r3, [pc, #228]	@ (8005474 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	015b      	lsls	r3, r3, #5
 8005394:	0d1b      	lsrs	r3, r3, #20
 8005396:	69fa      	ldr	r2, [r7, #28]
 8005398:	fb02 f303 	mul.w	r3, r2, r3
 800539c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800539e:	e055      	b.n	800544c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a6:	d051      	beq.n	800544c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053a8:	f7fc feb6 	bl	8002118 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	69fa      	ldr	r2, [r7, #28]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d902      	bls.n	80053be <SPI_WaitFlagStateUntilTimeout+0x56>
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d13d      	bne.n	800543a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053d6:	d111      	bne.n	80053fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053e0:	d004      	beq.n	80053ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ea:	d107      	bne.n	80053fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005400:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005404:	d10f      	bne.n	8005426 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005424:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e018      	b.n	800546c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d102      	bne.n	8005446 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	61fb      	str	r3, [r7, #28]
 8005444:	e002      	b.n	800544c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	3b01      	subs	r3, #1
 800544a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	4013      	ands	r3, r2
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	429a      	cmp	r2, r3
 800545a:	bf0c      	ite	eq
 800545c:	2301      	moveq	r3, #1
 800545e:	2300      	movne	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	461a      	mov	r2, r3
 8005464:	79fb      	ldrb	r3, [r7, #7]
 8005466:	429a      	cmp	r2, r3
 8005468:	d19a      	bne.n	80053a0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3720      	adds	r7, #32
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	20000094 	.word	0x20000094

08005478 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af02      	add	r7, sp, #8
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800548c:	d111      	bne.n	80054b2 <SPI_EndRxTransaction+0x3a>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005496:	d004      	beq.n	80054a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054a0:	d107      	bne.n	80054b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054b0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054ba:	d12a      	bne.n	8005512 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054c4:	d012      	beq.n	80054ec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2200      	movs	r2, #0
 80054ce:	2180      	movs	r1, #128	@ 0x80
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f7ff ff49 	bl	8005368 <SPI_WaitFlagStateUntilTimeout>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d02d      	beq.n	8005538 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e0:	f043 0220 	orr.w	r2, r3, #32
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e026      	b.n	800553a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2200      	movs	r2, #0
 80054f4:	2101      	movs	r1, #1
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f7ff ff36 	bl	8005368 <SPI_WaitFlagStateUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01a      	beq.n	8005538 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005506:	f043 0220 	orr.w	r2, r3, #32
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e013      	b.n	800553a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2200      	movs	r2, #0
 800551a:	2101      	movs	r1, #1
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f7ff ff23 	bl	8005368 <SPI_WaitFlagStateUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d007      	beq.n	8005538 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800552c:	f043 0220 	orr.w	r2, r3, #32
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e000      	b.n	800553a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
	...

08005544 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af02      	add	r7, sp, #8
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2201      	movs	r2, #1
 8005558:	2102      	movs	r1, #2
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f7ff ff04 	bl	8005368 <SPI_WaitFlagStateUntilTimeout>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d007      	beq.n	8005576 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800556a:	f043 0220 	orr.w	r2, r3, #32
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e032      	b.n	80055dc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005576:	4b1b      	ldr	r3, [pc, #108]	@ (80055e4 <SPI_EndRxTxTransaction+0xa0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a1b      	ldr	r2, [pc, #108]	@ (80055e8 <SPI_EndRxTxTransaction+0xa4>)
 800557c:	fba2 2303 	umull	r2, r3, r2, r3
 8005580:	0d5b      	lsrs	r3, r3, #21
 8005582:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005586:	fb02 f303 	mul.w	r3, r2, r3
 800558a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005594:	d112      	bne.n	80055bc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2200      	movs	r2, #0
 800559e:	2180      	movs	r1, #128	@ 0x80
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f7ff fee1 	bl	8005368 <SPI_WaitFlagStateUntilTimeout>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d016      	beq.n	80055da <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b0:	f043 0220 	orr.w	r2, r3, #32
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e00f      	b.n	80055dc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d2:	2b80      	cmp	r3, #128	@ 0x80
 80055d4:	d0f2      	beq.n	80055bc <SPI_EndRxTxTransaction+0x78>
 80055d6:	e000      	b.n	80055da <SPI_EndRxTxTransaction+0x96>
        break;
 80055d8:	bf00      	nop
  }

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20000094 	.word	0x20000094
 80055e8:	165e9f81 	.word	0x165e9f81

080055ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e041      	b.n	8005682 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f839 	bl	800568a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3304      	adds	r3, #4
 8005628:	4619      	mov	r1, r3
 800562a:	4610      	mov	r0, r2
 800562c:	f000 f9b2 	bl	8005994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d001      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e044      	b.n	8005742 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1e      	ldr	r2, [pc, #120]	@ (8005750 <HAL_TIM_Base_Start_IT+0xb0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d018      	beq.n	800570c <HAL_TIM_Base_Start_IT+0x6c>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e2:	d013      	beq.n	800570c <HAL_TIM_Base_Start_IT+0x6c>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a1a      	ldr	r2, [pc, #104]	@ (8005754 <HAL_TIM_Base_Start_IT+0xb4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00e      	beq.n	800570c <HAL_TIM_Base_Start_IT+0x6c>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a19      	ldr	r2, [pc, #100]	@ (8005758 <HAL_TIM_Base_Start_IT+0xb8>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d009      	beq.n	800570c <HAL_TIM_Base_Start_IT+0x6c>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a17      	ldr	r2, [pc, #92]	@ (800575c <HAL_TIM_Base_Start_IT+0xbc>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d004      	beq.n	800570c <HAL_TIM_Base_Start_IT+0x6c>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a16      	ldr	r2, [pc, #88]	@ (8005760 <HAL_TIM_Base_Start_IT+0xc0>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d111      	bne.n	8005730 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b06      	cmp	r3, #6
 800571c:	d010      	beq.n	8005740 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f042 0201 	orr.w	r2, r2, #1
 800572c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572e:	e007      	b.n	8005740 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0201 	orr.w	r2, r2, #1
 800573e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	40010000 	.word	0x40010000
 8005754:	40000400 	.word	0x40000400
 8005758:	40000800 	.word	0x40000800
 800575c:	40000c00 	.word	0x40000c00
 8005760:	40014000 	.word	0x40014000

08005764 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d020      	beq.n	80057c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01b      	beq.n	80057c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0202 	mvn.w	r2, #2
 8005798:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f8d2 	bl	8005958 <HAL_TIM_IC_CaptureCallback>
 80057b4:	e005      	b.n	80057c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f8c4 	bl	8005944 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f8d5 	bl	800596c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d020      	beq.n	8005814 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d01b      	beq.n	8005814 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f06f 0204 	mvn.w	r2, #4
 80057e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2202      	movs	r2, #2
 80057ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f8ac 	bl	8005958 <HAL_TIM_IC_CaptureCallback>
 8005800:	e005      	b.n	800580e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f89e 	bl	8005944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f8af 	bl	800596c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b00      	cmp	r3, #0
 800581c:	d020      	beq.n	8005860 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f003 0308 	and.w	r3, r3, #8
 8005824:	2b00      	cmp	r3, #0
 8005826:	d01b      	beq.n	8005860 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f06f 0208 	mvn.w	r2, #8
 8005830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2204      	movs	r2, #4
 8005836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f886 	bl	8005958 <HAL_TIM_IC_CaptureCallback>
 800584c:	e005      	b.n	800585a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f878 	bl	8005944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f889 	bl	800596c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f003 0310 	and.w	r3, r3, #16
 8005866:	2b00      	cmp	r3, #0
 8005868:	d020      	beq.n	80058ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	2b00      	cmp	r3, #0
 8005872:	d01b      	beq.n	80058ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0210 	mvn.w	r2, #16
 800587c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2208      	movs	r2, #8
 8005882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f860 	bl	8005958 <HAL_TIM_IC_CaptureCallback>
 8005898:	e005      	b.n	80058a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f852 	bl	8005944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f863 	bl	800596c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00c      	beq.n	80058d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d007      	beq.n	80058d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0201 	mvn.w	r2, #1
 80058c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7fb fd06 	bl	80012dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00c      	beq.n	80058f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d007      	beq.n	80058f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80058ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f8e0 	bl	8005ab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00c      	beq.n	8005918 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005904:	2b00      	cmp	r3, #0
 8005906:	d007      	beq.n	8005918 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f834 	bl	8005980 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00c      	beq.n	800593c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	2b00      	cmp	r3, #0
 800592a:	d007      	beq.n	800593c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0220 	mvn.w	r2, #32
 8005934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f8b2 	bl	8005aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800593c:	bf00      	nop
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a37      	ldr	r2, [pc, #220]	@ (8005a84 <TIM_Base_SetConfig+0xf0>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00f      	beq.n	80059cc <TIM_Base_SetConfig+0x38>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059b2:	d00b      	beq.n	80059cc <TIM_Base_SetConfig+0x38>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a34      	ldr	r2, [pc, #208]	@ (8005a88 <TIM_Base_SetConfig+0xf4>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d007      	beq.n	80059cc <TIM_Base_SetConfig+0x38>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a33      	ldr	r2, [pc, #204]	@ (8005a8c <TIM_Base_SetConfig+0xf8>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d003      	beq.n	80059cc <TIM_Base_SetConfig+0x38>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a32      	ldr	r2, [pc, #200]	@ (8005a90 <TIM_Base_SetConfig+0xfc>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d108      	bne.n	80059de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a28      	ldr	r2, [pc, #160]	@ (8005a84 <TIM_Base_SetConfig+0xf0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d01b      	beq.n	8005a1e <TIM_Base_SetConfig+0x8a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ec:	d017      	beq.n	8005a1e <TIM_Base_SetConfig+0x8a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a25      	ldr	r2, [pc, #148]	@ (8005a88 <TIM_Base_SetConfig+0xf4>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d013      	beq.n	8005a1e <TIM_Base_SetConfig+0x8a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a24      	ldr	r2, [pc, #144]	@ (8005a8c <TIM_Base_SetConfig+0xf8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00f      	beq.n	8005a1e <TIM_Base_SetConfig+0x8a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a23      	ldr	r2, [pc, #140]	@ (8005a90 <TIM_Base_SetConfig+0xfc>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00b      	beq.n	8005a1e <TIM_Base_SetConfig+0x8a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a22      	ldr	r2, [pc, #136]	@ (8005a94 <TIM_Base_SetConfig+0x100>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d007      	beq.n	8005a1e <TIM_Base_SetConfig+0x8a>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a21      	ldr	r2, [pc, #132]	@ (8005a98 <TIM_Base_SetConfig+0x104>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d003      	beq.n	8005a1e <TIM_Base_SetConfig+0x8a>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a20      	ldr	r2, [pc, #128]	@ (8005a9c <TIM_Base_SetConfig+0x108>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d108      	bne.n	8005a30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	689a      	ldr	r2, [r3, #8]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a0c      	ldr	r2, [pc, #48]	@ (8005a84 <TIM_Base_SetConfig+0xf0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d103      	bne.n	8005a5e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f043 0204 	orr.w	r2, r3, #4
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	601a      	str	r2, [r3, #0]
}
 8005a76:	bf00      	nop
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40010000 	.word	0x40010000
 8005a88:	40000400 	.word	0x40000400
 8005a8c:	40000800 	.word	0x40000800
 8005a90:	40000c00 	.word	0x40000c00
 8005a94:	40014000 	.word	0x40014000
 8005a98:	40014400 	.word	0x40014400
 8005a9c:	40014800 	.word	0x40014800

08005aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	4603      	mov	r3, r0
 8005ad0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ada:	2b84      	cmp	r3, #132	@ 0x84
 8005adc:	d005      	beq.n	8005aea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005ade:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	3303      	adds	r3, #3
 8005ae8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005aea:	68fb      	ldr	r3, [r7, #12]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005afc:	f001 f86e 	bl	8006bdc <vTaskStartScheduler>
  
  return osOK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005b06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b08:	b089      	sub	sp, #36	@ 0x24
 8005b0a:	af04      	add	r7, sp, #16
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d020      	beq.n	8005b5a <osThreadCreate+0x54>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d01c      	beq.n	8005b5a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685c      	ldr	r4, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691e      	ldr	r6, [r3, #16]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff ffc8 	bl	8005ac8 <makeFreeRtosPriority>
 8005b38:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b42:	9202      	str	r2, [sp, #8]
 8005b44:	9301      	str	r3, [sp, #4]
 8005b46:	9100      	str	r1, [sp, #0]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	4632      	mov	r2, r6
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f000 fe5e 	bl	8006810 <xTaskCreateStatic>
 8005b54:	4603      	mov	r3, r0
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	e01c      	b.n	8005b94 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685c      	ldr	r4, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b66:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7ff ffaa 	bl	8005ac8 <makeFreeRtosPriority>
 8005b74:	4602      	mov	r2, r0
 8005b76:	f107 030c 	add.w	r3, r7, #12
 8005b7a:	9301      	str	r3, [sp, #4]
 8005b7c:	9200      	str	r2, [sp, #0]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	4632      	mov	r2, r6
 8005b82:	4629      	mov	r1, r5
 8005b84:	4620      	mov	r0, r4
 8005b86:	f000 fea3 	bl	80068d0 <xTaskCreate>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d001      	beq.n	8005b94 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005b90:	2300      	movs	r3, #0
 8005b92:	e000      	b.n	8005b96 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005b94:	68fb      	ldr	r3, [r7, #12]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b9e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b084      	sub	sp, #16
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <osDelay+0x16>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	e000      	b.n	8005bb6 <osDelay+0x18>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 ffda 	bl	8006b70 <vTaskDelay>
  
  return osOK;
 8005bbc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f103 0208 	add.w	r2, r3, #8
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f04f 32ff 	mov.w	r2, #4294967295
 8005bde:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f103 0208 	add.w	r2, r3, #8
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f103 0208 	add.w	r2, r3, #8
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689a      	ldr	r2, [r3, #8]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	601a      	str	r2, [r3, #0]
}
 8005c5c:	bf00      	nop
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7e:	d103      	bne.n	8005c88 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	e00c      	b.n	8005ca2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	e002      	b.n	8005c96 <vListInsert+0x2e>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d2f6      	bcs.n	8005c90 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	601a      	str	r2, [r3, #0]
}
 8005cce:	bf00      	nop
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b085      	sub	sp, #20
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6892      	ldr	r2, [r2, #8]
 8005cf0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6852      	ldr	r2, [r2, #4]
 8005cfa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d103      	bne.n	8005d0e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	1e5a      	subs	r2, r3, #1
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
	...

08005d30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10b      	bne.n	8005d5c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d56:	bf00      	nop
 8005d58:	bf00      	nop
 8005d5a:	e7fd      	b.n	8005d58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005d5c:	f001 ff94 	bl	8007c88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d68:	68f9      	ldr	r1, [r7, #12]
 8005d6a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005d6c:	fb01 f303 	mul.w	r3, r1, r3
 8005d70:	441a      	add	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	68f9      	ldr	r1, [r7, #12]
 8005d90:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005d92:	fb01 f303 	mul.w	r3, r1, r3
 8005d96:	441a      	add	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	22ff      	movs	r2, #255	@ 0xff
 8005da0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	22ff      	movs	r2, #255	@ 0xff
 8005da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d114      	bne.n	8005ddc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d01a      	beq.n	8005df0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	3310      	adds	r3, #16
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f001 f966 	bl	8007090 <xTaskRemoveFromEventList>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d012      	beq.n	8005df0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005dca:	4b0d      	ldr	r3, [pc, #52]	@ (8005e00 <xQueueGenericReset+0xd0>)
 8005dcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	e009      	b.n	8005df0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3310      	adds	r3, #16
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7ff fef0 	bl	8005bc6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3324      	adds	r3, #36	@ 0x24
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff feeb 	bl	8005bc6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005df0:	f001 ff7c 	bl	8007cec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005df4:	2301      	movs	r3, #1
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	e000ed04 	.word	0xe000ed04

08005e04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08a      	sub	sp, #40	@ 0x28
 8005e08:	af02      	add	r7, sp, #8
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10b      	bne.n	8005e30 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	613b      	str	r3, [r7, #16]
}
 8005e2a:	bf00      	nop
 8005e2c:	bf00      	nop
 8005e2e:	e7fd      	b.n	8005e2c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	fb02 f303 	mul.w	r3, r2, r3
 8005e38:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	3348      	adds	r3, #72	@ 0x48
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f002 f844 	bl	8007ecc <pvPortMalloc>
 8005e44:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d011      	beq.n	8005e70 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	3348      	adds	r3, #72	@ 0x48
 8005e54:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e5e:	79fa      	ldrb	r2, [r7, #7]
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	4613      	mov	r3, r2
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	68b9      	ldr	r1, [r7, #8]
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 f805 	bl	8005e7a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e70:	69bb      	ldr	r3, [r7, #24]
	}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3720      	adds	r7, #32
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b084      	sub	sp, #16
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	60f8      	str	r0, [r7, #12]
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	607a      	str	r2, [r7, #4]
 8005e86:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d103      	bne.n	8005e96 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	e002      	b.n	8005e9c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	69b8      	ldr	r0, [r7, #24]
 8005eac:	f7ff ff40 	bl	8005d30 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005eb0:	bf00      	nop
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08e      	sub	sp, #56	@ 0x38
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10b      	bne.n	8005eec <xQueueGenericSend+0x34>
	__asm volatile
 8005ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ee6:	bf00      	nop
 8005ee8:	bf00      	nop
 8005eea:	e7fd      	b.n	8005ee8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d103      	bne.n	8005efa <xQueueGenericSend+0x42>
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <xQueueGenericSend+0x46>
 8005efa:	2301      	movs	r3, #1
 8005efc:	e000      	b.n	8005f00 <xQueueGenericSend+0x48>
 8005efe:	2300      	movs	r3, #0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10b      	bne.n	8005f1c <xQueueGenericSend+0x64>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f16:	bf00      	nop
 8005f18:	bf00      	nop
 8005f1a:	e7fd      	b.n	8005f18 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d103      	bne.n	8005f2a <xQueueGenericSend+0x72>
 8005f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d101      	bne.n	8005f2e <xQueueGenericSend+0x76>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e000      	b.n	8005f30 <xQueueGenericSend+0x78>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10b      	bne.n	8005f4c <xQueueGenericSend+0x94>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	623b      	str	r3, [r7, #32]
}
 8005f46:	bf00      	nop
 8005f48:	bf00      	nop
 8005f4a:	e7fd      	b.n	8005f48 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f4c:	f001 fa66 	bl	800741c <xTaskGetSchedulerState>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d102      	bne.n	8005f5c <xQueueGenericSend+0xa4>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <xQueueGenericSend+0xa8>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e000      	b.n	8005f62 <xQueueGenericSend+0xaa>
 8005f60:	2300      	movs	r3, #0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10b      	bne.n	8005f7e <xQueueGenericSend+0xc6>
	__asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	61fb      	str	r3, [r7, #28]
}
 8005f78:	bf00      	nop
 8005f7a:	bf00      	nop
 8005f7c:	e7fd      	b.n	8005f7a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f7e:	f001 fe83 	bl	8007c88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d302      	bcc.n	8005f94 <xQueueGenericSend+0xdc>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d129      	bne.n	8005fe8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	68b9      	ldr	r1, [r7, #8]
 8005f98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f9a:	f000 fb29 	bl	80065f0 <prvCopyDataToQueue>
 8005f9e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d010      	beq.n	8005fca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005faa:	3324      	adds	r3, #36	@ 0x24
 8005fac:	4618      	mov	r0, r3
 8005fae:	f001 f86f 	bl	8007090 <xTaskRemoveFromEventList>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d013      	beq.n	8005fe0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005fb8:	4b3f      	ldr	r3, [pc, #252]	@ (80060b8 <xQueueGenericSend+0x200>)
 8005fba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	e00a      	b.n	8005fe0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d007      	beq.n	8005fe0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005fd0:	4b39      	ldr	r3, [pc, #228]	@ (80060b8 <xQueueGenericSend+0x200>)
 8005fd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005fe0:	f001 fe84 	bl	8007cec <vPortExitCritical>
				return pdPASS;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e063      	b.n	80060b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d103      	bne.n	8005ff6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fee:	f001 fe7d 	bl	8007cec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	e05c      	b.n	80060b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d106      	bne.n	800600a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ffc:	f107 0314 	add.w	r3, r7, #20
 8006000:	4618      	mov	r0, r3
 8006002:	f001 f8a9 	bl	8007158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006006:	2301      	movs	r3, #1
 8006008:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800600a:	f001 fe6f 	bl	8007cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800600e:	f000 fe4f 	bl	8006cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006012:	f001 fe39 	bl	8007c88 <vPortEnterCritical>
 8006016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006018:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800601c:	b25b      	sxtb	r3, r3
 800601e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006022:	d103      	bne.n	800602c <xQueueGenericSend+0x174>
 8006024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800602c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006032:	b25b      	sxtb	r3, r3
 8006034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006038:	d103      	bne.n	8006042 <xQueueGenericSend+0x18a>
 800603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006042:	f001 fe53 	bl	8007cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006046:	1d3a      	adds	r2, r7, #4
 8006048:	f107 0314 	add.w	r3, r7, #20
 800604c:	4611      	mov	r1, r2
 800604e:	4618      	mov	r0, r3
 8006050:	f001 f898 	bl	8007184 <xTaskCheckForTimeOut>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d124      	bne.n	80060a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800605a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800605c:	f000 fbc0 	bl	80067e0 <prvIsQueueFull>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d018      	beq.n	8006098 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006068:	3310      	adds	r3, #16
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	4611      	mov	r1, r2
 800606e:	4618      	mov	r0, r3
 8006070:	f000 ffe8 	bl	8007044 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006074:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006076:	f000 fb4b 	bl	8006710 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800607a:	f000 fe27 	bl	8006ccc <xTaskResumeAll>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	f47f af7c 	bne.w	8005f7e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006086:	4b0c      	ldr	r3, [pc, #48]	@ (80060b8 <xQueueGenericSend+0x200>)
 8006088:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	e772      	b.n	8005f7e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006098:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800609a:	f000 fb39 	bl	8006710 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800609e:	f000 fe15 	bl	8006ccc <xTaskResumeAll>
 80060a2:	e76c      	b.n	8005f7e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060a6:	f000 fb33 	bl	8006710 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060aa:	f000 fe0f 	bl	8006ccc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3738      	adds	r7, #56	@ 0x38
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	e000ed04 	.word	0xe000ed04

080060bc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08e      	sub	sp, #56	@ 0x38
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80060ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10b      	bne.n	80060e8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	623b      	str	r3, [r7, #32]
}
 80060e2:	bf00      	nop
 80060e4:	bf00      	nop
 80060e6:	e7fd      	b.n	80060e4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80060e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00b      	beq.n	8006108 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	61fb      	str	r3, [r7, #28]
}
 8006102:	bf00      	nop
 8006104:	bf00      	nop
 8006106:	e7fd      	b.n	8006104 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d103      	bne.n	8006118 <xQueueGiveFromISR+0x5c>
 8006110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <xQueueGiveFromISR+0x60>
 8006118:	2301      	movs	r3, #1
 800611a:	e000      	b.n	800611e <xQueueGiveFromISR+0x62>
 800611c:	2300      	movs	r3, #0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10b      	bne.n	800613a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	61bb      	str	r3, [r7, #24]
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop
 8006138:	e7fd      	b.n	8006136 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800613a:	f001 fe85 	bl	8007e48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800613e:	f3ef 8211 	mrs	r2, BASEPRI
 8006142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	617a      	str	r2, [r7, #20]
 8006154:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006156:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006158:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006164:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006166:	429a      	cmp	r2, r3
 8006168:	d22b      	bcs.n	80061c2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800616a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006170:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800617c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006184:	d112      	bne.n	80061ac <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618a:	2b00      	cmp	r3, #0
 800618c:	d016      	beq.n	80061bc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800618e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006190:	3324      	adds	r3, #36	@ 0x24
 8006192:	4618      	mov	r0, r3
 8006194:	f000 ff7c 	bl	8007090 <xTaskRemoveFromEventList>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00e      	beq.n	80061bc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00b      	beq.n	80061bc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	2201      	movs	r2, #1
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	e007      	b.n	80061bc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061b0:	3301      	adds	r3, #1
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	b25a      	sxtb	r2, r3
 80061b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80061bc:	2301      	movs	r3, #1
 80061be:	637b      	str	r3, [r7, #52]	@ 0x34
 80061c0:	e001      	b.n	80061c6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80061c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3738      	adds	r7, #56	@ 0x38
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08c      	sub	sp, #48	@ 0x30
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061e8:	2300      	movs	r3, #0
 80061ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10b      	bne.n	800620e <xQueueReceive+0x32>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	623b      	str	r3, [r7, #32]
}
 8006208:	bf00      	nop
 800620a:	bf00      	nop
 800620c:	e7fd      	b.n	800620a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d103      	bne.n	800621c <xQueueReceive+0x40>
 8006214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <xQueueReceive+0x44>
 800621c:	2301      	movs	r3, #1
 800621e:	e000      	b.n	8006222 <xQueueReceive+0x46>
 8006220:	2300      	movs	r3, #0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10b      	bne.n	800623e <xQueueReceive+0x62>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	61fb      	str	r3, [r7, #28]
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop
 800623c:	e7fd      	b.n	800623a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800623e:	f001 f8ed 	bl	800741c <xTaskGetSchedulerState>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d102      	bne.n	800624e <xQueueReceive+0x72>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <xQueueReceive+0x76>
 800624e:	2301      	movs	r3, #1
 8006250:	e000      	b.n	8006254 <xQueueReceive+0x78>
 8006252:	2300      	movs	r3, #0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10b      	bne.n	8006270 <xQueueReceive+0x94>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	61bb      	str	r3, [r7, #24]
}
 800626a:	bf00      	nop
 800626c:	bf00      	nop
 800626e:	e7fd      	b.n	800626c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006270:	f001 fd0a 	bl	8007c88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006278:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627c:	2b00      	cmp	r3, #0
 800627e:	d01f      	beq.n	80062c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006280:	68b9      	ldr	r1, [r7, #8]
 8006282:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006284:	f000 fa1e 	bl	80066c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628a:	1e5a      	subs	r2, r3, #1
 800628c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00f      	beq.n	80062b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800629a:	3310      	adds	r3, #16
 800629c:	4618      	mov	r0, r3
 800629e:	f000 fef7 	bl	8007090 <xTaskRemoveFromEventList>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d007      	beq.n	80062b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062a8:	4b3c      	ldr	r3, [pc, #240]	@ (800639c <xQueueReceive+0x1c0>)
 80062aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062b8:	f001 fd18 	bl	8007cec <vPortExitCritical>
				return pdPASS;
 80062bc:	2301      	movs	r3, #1
 80062be:	e069      	b.n	8006394 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d103      	bne.n	80062ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062c6:	f001 fd11 	bl	8007cec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062ca:	2300      	movs	r3, #0
 80062cc:	e062      	b.n	8006394 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d106      	bne.n	80062e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062d4:	f107 0310 	add.w	r3, r7, #16
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 ff3d 	bl	8007158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062de:	2301      	movs	r3, #1
 80062e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062e2:	f001 fd03 	bl	8007cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062e6:	f000 fce3 	bl	8006cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062ea:	f001 fccd 	bl	8007c88 <vPortEnterCritical>
 80062ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062f4:	b25b      	sxtb	r3, r3
 80062f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fa:	d103      	bne.n	8006304 <xQueueReceive+0x128>
 80062fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006306:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800630a:	b25b      	sxtb	r3, r3
 800630c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006310:	d103      	bne.n	800631a <xQueueReceive+0x13e>
 8006312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800631a:	f001 fce7 	bl	8007cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800631e:	1d3a      	adds	r2, r7, #4
 8006320:	f107 0310 	add.w	r3, r7, #16
 8006324:	4611      	mov	r1, r2
 8006326:	4618      	mov	r0, r3
 8006328:	f000 ff2c 	bl	8007184 <xTaskCheckForTimeOut>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d123      	bne.n	800637a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006332:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006334:	f000 fa3e 	bl	80067b4 <prvIsQueueEmpty>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d017      	beq.n	800636e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800633e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006340:	3324      	adds	r3, #36	@ 0x24
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	4611      	mov	r1, r2
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fe7c 	bl	8007044 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800634c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800634e:	f000 f9df 	bl	8006710 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006352:	f000 fcbb 	bl	8006ccc <xTaskResumeAll>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d189      	bne.n	8006270 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800635c:	4b0f      	ldr	r3, [pc, #60]	@ (800639c <xQueueReceive+0x1c0>)
 800635e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	e780      	b.n	8006270 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800636e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006370:	f000 f9ce 	bl	8006710 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006374:	f000 fcaa 	bl	8006ccc <xTaskResumeAll>
 8006378:	e77a      	b.n	8006270 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800637a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800637c:	f000 f9c8 	bl	8006710 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006380:	f000 fca4 	bl	8006ccc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006384:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006386:	f000 fa15 	bl	80067b4 <prvIsQueueEmpty>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	f43f af6f 	beq.w	8006270 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006392:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006394:	4618      	mov	r0, r3
 8006396:	3730      	adds	r7, #48	@ 0x30
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	e000ed04 	.word	0xe000ed04

080063a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08e      	sub	sp, #56	@ 0x38
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80063aa:	2300      	movs	r3, #0
 80063ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80063b2:	2300      	movs	r3, #0
 80063b4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10b      	bne.n	80063d4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	623b      	str	r3, [r7, #32]
}
 80063ce:	bf00      	nop
 80063d0:	bf00      	nop
 80063d2:	e7fd      	b.n	80063d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80063d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00b      	beq.n	80063f4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	61fb      	str	r3, [r7, #28]
}
 80063ee:	bf00      	nop
 80063f0:	bf00      	nop
 80063f2:	e7fd      	b.n	80063f0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063f4:	f001 f812 	bl	800741c <xTaskGetSchedulerState>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d102      	bne.n	8006404 <xQueueSemaphoreTake+0x64>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <xQueueSemaphoreTake+0x68>
 8006404:	2301      	movs	r3, #1
 8006406:	e000      	b.n	800640a <xQueueSemaphoreTake+0x6a>
 8006408:	2300      	movs	r3, #0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10b      	bne.n	8006426 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	61bb      	str	r3, [r7, #24]
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	e7fd      	b.n	8006422 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006426:	f001 fc2f 	bl	8007c88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800642a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006432:	2b00      	cmp	r3, #0
 8006434:	d024      	beq.n	8006480 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006438:	1e5a      	subs	r2, r3, #1
 800643a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800643c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800643e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d104      	bne.n	8006450 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006446:	f001 f995 	bl	8007774 <pvTaskIncrementMutexHeldCount>
 800644a:	4602      	mov	r2, r0
 800644c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00f      	beq.n	8006478 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800645a:	3310      	adds	r3, #16
 800645c:	4618      	mov	r0, r3
 800645e:	f000 fe17 	bl	8007090 <xTaskRemoveFromEventList>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d007      	beq.n	8006478 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006468:	4b54      	ldr	r3, [pc, #336]	@ (80065bc <xQueueSemaphoreTake+0x21c>)
 800646a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006478:	f001 fc38 	bl	8007cec <vPortExitCritical>
				return pdPASS;
 800647c:	2301      	movs	r3, #1
 800647e:	e098      	b.n	80065b2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d112      	bne.n	80064ac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00b      	beq.n	80064a4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	617b      	str	r3, [r7, #20]
}
 800649e:	bf00      	nop
 80064a0:	bf00      	nop
 80064a2:	e7fd      	b.n	80064a0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80064a4:	f001 fc22 	bl	8007cec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064a8:	2300      	movs	r3, #0
 80064aa:	e082      	b.n	80065b2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d106      	bne.n	80064c0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064b2:	f107 030c 	add.w	r3, r7, #12
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 fe4e 	bl	8007158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064bc:	2301      	movs	r3, #1
 80064be:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064c0:	f001 fc14 	bl	8007cec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064c4:	f000 fbf4 	bl	8006cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064c8:	f001 fbde 	bl	8007c88 <vPortEnterCritical>
 80064cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064d2:	b25b      	sxtb	r3, r3
 80064d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d8:	d103      	bne.n	80064e2 <xQueueSemaphoreTake+0x142>
 80064da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064e8:	b25b      	sxtb	r3, r3
 80064ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ee:	d103      	bne.n	80064f8 <xQueueSemaphoreTake+0x158>
 80064f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064f8:	f001 fbf8 	bl	8007cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064fc:	463a      	mov	r2, r7
 80064fe:	f107 030c 	add.w	r3, r7, #12
 8006502:	4611      	mov	r1, r2
 8006504:	4618      	mov	r0, r3
 8006506:	f000 fe3d 	bl	8007184 <xTaskCheckForTimeOut>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d132      	bne.n	8006576 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006510:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006512:	f000 f94f 	bl	80067b4 <prvIsQueueEmpty>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d026      	beq.n	800656a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800651c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d109      	bne.n	8006538 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006524:	f001 fbb0 	bl	8007c88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	4618      	mov	r0, r3
 800652e:	f000 ff93 	bl	8007458 <xTaskPriorityInherit>
 8006532:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006534:	f001 fbda 	bl	8007cec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800653a:	3324      	adds	r3, #36	@ 0x24
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	4611      	mov	r1, r2
 8006540:	4618      	mov	r0, r3
 8006542:	f000 fd7f 	bl	8007044 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006546:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006548:	f000 f8e2 	bl	8006710 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800654c:	f000 fbbe 	bl	8006ccc <xTaskResumeAll>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	f47f af67 	bne.w	8006426 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006558:	4b18      	ldr	r3, [pc, #96]	@ (80065bc <xQueueSemaphoreTake+0x21c>)
 800655a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	e75d      	b.n	8006426 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800656a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800656c:	f000 f8d0 	bl	8006710 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006570:	f000 fbac 	bl	8006ccc <xTaskResumeAll>
 8006574:	e757      	b.n	8006426 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006576:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006578:	f000 f8ca 	bl	8006710 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800657c:	f000 fba6 	bl	8006ccc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006580:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006582:	f000 f917 	bl	80067b4 <prvIsQueueEmpty>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	f43f af4c 	beq.w	8006426 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800658e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00d      	beq.n	80065b0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006594:	f001 fb78 	bl	8007c88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006598:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800659a:	f000 f811 	bl	80065c0 <prvGetDisinheritPriorityAfterTimeout>
 800659e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80065a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065a6:	4618      	mov	r0, r3
 80065a8:	f001 f854 	bl	8007654 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80065ac:	f001 fb9e 	bl	8007cec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3738      	adds	r7, #56	@ 0x38
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	e000ed04 	.word	0xe000ed04

080065c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d006      	beq.n	80065de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f1c3 0307 	rsb	r3, r3, #7
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	e001      	b.n	80065e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80065de:	2300      	movs	r3, #0
 80065e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80065e2:	68fb      	ldr	r3, [r7, #12]
	}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80065fc:	2300      	movs	r3, #0
 80065fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006604:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10d      	bne.n	800662a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d14d      	bne.n	80066b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	4618      	mov	r0, r3
 800661c:	f000 ff92 	bl	8007544 <xTaskPriorityDisinherit>
 8006620:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	609a      	str	r2, [r3, #8]
 8006628:	e043      	b.n	80066b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d119      	bne.n	8006664 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6858      	ldr	r0, [r3, #4]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006638:	461a      	mov	r2, r3
 800663a:	68b9      	ldr	r1, [r7, #8]
 800663c:	f001 fec0 	bl	80083c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006648:	441a      	add	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	429a      	cmp	r2, r3
 8006658:	d32b      	bcc.n	80066b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	605a      	str	r2, [r3, #4]
 8006662:	e026      	b.n	80066b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	68d8      	ldr	r0, [r3, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666c:	461a      	mov	r2, r3
 800666e:	68b9      	ldr	r1, [r7, #8]
 8006670:	f001 fea6 	bl	80083c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667c:	425b      	negs	r3, r3
 800667e:	441a      	add	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	429a      	cmp	r2, r3
 800668e:	d207      	bcs.n	80066a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006698:	425b      	negs	r3, r3
 800669a:	441a      	add	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d105      	bne.n	80066b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1c5a      	adds	r2, r3, #1
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80066ba:	697b      	ldr	r3, [r7, #20]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d018      	beq.n	8006708 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066de:	441a      	add	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68da      	ldr	r2, [r3, #12]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d303      	bcc.n	80066f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68d9      	ldr	r1, [r3, #12]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006700:	461a      	mov	r2, r3
 8006702:	6838      	ldr	r0, [r7, #0]
 8006704:	f001 fe5c 	bl	80083c0 <memcpy>
	}
}
 8006708:	bf00      	nop
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006718:	f001 fab6 	bl	8007c88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006722:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006724:	e011      	b.n	800674a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672a:	2b00      	cmp	r3, #0
 800672c:	d012      	beq.n	8006754 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3324      	adds	r3, #36	@ 0x24
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fcac 	bl	8007090 <xTaskRemoveFromEventList>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800673e:	f000 fd85 	bl	800724c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006742:	7bfb      	ldrb	r3, [r7, #15]
 8006744:	3b01      	subs	r3, #1
 8006746:	b2db      	uxtb	r3, r3
 8006748:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800674a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800674e:	2b00      	cmp	r3, #0
 8006750:	dce9      	bgt.n	8006726 <prvUnlockQueue+0x16>
 8006752:	e000      	b.n	8006756 <prvUnlockQueue+0x46>
					break;
 8006754:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	22ff      	movs	r2, #255	@ 0xff
 800675a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800675e:	f001 fac5 	bl	8007cec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006762:	f001 fa91 	bl	8007c88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800676c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800676e:	e011      	b.n	8006794 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d012      	beq.n	800679e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3310      	adds	r3, #16
 800677c:	4618      	mov	r0, r3
 800677e:	f000 fc87 	bl	8007090 <xTaskRemoveFromEventList>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006788:	f000 fd60 	bl	800724c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800678c:	7bbb      	ldrb	r3, [r7, #14]
 800678e:	3b01      	subs	r3, #1
 8006790:	b2db      	uxtb	r3, r3
 8006792:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006798:	2b00      	cmp	r3, #0
 800679a:	dce9      	bgt.n	8006770 <prvUnlockQueue+0x60>
 800679c:	e000      	b.n	80067a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800679e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	22ff      	movs	r2, #255	@ 0xff
 80067a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80067a8:	f001 faa0 	bl	8007cec <vPortExitCritical>
}
 80067ac:	bf00      	nop
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067bc:	f001 fa64 	bl	8007c88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d102      	bne.n	80067ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80067c8:	2301      	movs	r3, #1
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	e001      	b.n	80067d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067d2:	f001 fa8b 	bl	8007cec <vPortExitCritical>

	return xReturn;
 80067d6:	68fb      	ldr	r3, [r7, #12]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067e8:	f001 fa4e 	bl	8007c88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d102      	bne.n	80067fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80067f8:	2301      	movs	r3, #1
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	e001      	b.n	8006802 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006802:	f001 fa73 	bl	8007cec <vPortExitCritical>

	return xReturn;
 8006806:	68fb      	ldr	r3, [r7, #12]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08e      	sub	sp, #56	@ 0x38
 8006814:	af04      	add	r7, sp, #16
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
 800681c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800681e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10b      	bne.n	800683c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	623b      	str	r3, [r7, #32]
}
 8006836:	bf00      	nop
 8006838:	bf00      	nop
 800683a:	e7fd      	b.n	8006838 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800683c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10b      	bne.n	800685a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	61fb      	str	r3, [r7, #28]
}
 8006854:	bf00      	nop
 8006856:	bf00      	nop
 8006858:	e7fd      	b.n	8006856 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800685a:	23a0      	movs	r3, #160	@ 0xa0
 800685c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	2ba0      	cmp	r3, #160	@ 0xa0
 8006862:	d00b      	beq.n	800687c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	61bb      	str	r3, [r7, #24]
}
 8006876:	bf00      	nop
 8006878:	bf00      	nop
 800687a:	e7fd      	b.n	8006878 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800687c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800687e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006880:	2b00      	cmp	r3, #0
 8006882:	d01e      	beq.n	80068c2 <xTaskCreateStatic+0xb2>
 8006884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006886:	2b00      	cmp	r3, #0
 8006888:	d01b      	beq.n	80068c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800688a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800688c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006892:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006896:	2202      	movs	r2, #2
 8006898:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800689c:	2300      	movs	r3, #0
 800689e:	9303      	str	r3, [sp, #12]
 80068a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a2:	9302      	str	r3, [sp, #8]
 80068a4:	f107 0314 	add.w	r3, r7, #20
 80068a8:	9301      	str	r3, [sp, #4]
 80068aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	68b9      	ldr	r1, [r7, #8]
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f000 f851 	bl	800695c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80068bc:	f000 f8ee 	bl	8006a9c <prvAddNewTaskToReadyList>
 80068c0:	e001      	b.n	80068c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068c6:	697b      	ldr	r3, [r7, #20]
	}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3728      	adds	r7, #40	@ 0x28
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08c      	sub	sp, #48	@ 0x30
 80068d4:	af04      	add	r7, sp, #16
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	603b      	str	r3, [r7, #0]
 80068dc:	4613      	mov	r3, r2
 80068de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068e0:	88fb      	ldrh	r3, [r7, #6]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4618      	mov	r0, r3
 80068e6:	f001 faf1 	bl	8007ecc <pvPortMalloc>
 80068ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00e      	beq.n	8006910 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068f2:	20a0      	movs	r0, #160	@ 0xa0
 80068f4:	f001 faea 	bl	8007ecc <pvPortMalloc>
 80068f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	631a      	str	r2, [r3, #48]	@ 0x30
 8006906:	e005      	b.n	8006914 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006908:	6978      	ldr	r0, [r7, #20]
 800690a:	f001 fbad 	bl	8008068 <vPortFree>
 800690e:	e001      	b.n	8006914 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006910:	2300      	movs	r3, #0
 8006912:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d017      	beq.n	800694a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006922:	88fa      	ldrh	r2, [r7, #6]
 8006924:	2300      	movs	r3, #0
 8006926:	9303      	str	r3, [sp, #12]
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	9302      	str	r3, [sp, #8]
 800692c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800692e:	9301      	str	r3, [sp, #4]
 8006930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	68b9      	ldr	r1, [r7, #8]
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 f80f 	bl	800695c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800693e:	69f8      	ldr	r0, [r7, #28]
 8006940:	f000 f8ac 	bl	8006a9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006944:	2301      	movs	r3, #1
 8006946:	61bb      	str	r3, [r7, #24]
 8006948:	e002      	b.n	8006950 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800694a:	f04f 33ff 	mov.w	r3, #4294967295
 800694e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006950:	69bb      	ldr	r3, [r7, #24]
	}
 8006952:	4618      	mov	r0, r3
 8006954:	3720      	adds	r7, #32
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
	...

0800695c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b088      	sub	sp, #32
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800696a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006974:	3b01      	subs	r3, #1
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	f023 0307 	bic.w	r3, r3, #7
 8006982:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	f003 0307 	and.w	r3, r3, #7
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00b      	beq.n	80069a6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	617b      	str	r3, [r7, #20]
}
 80069a0:	bf00      	nop
 80069a2:	bf00      	nop
 80069a4:	e7fd      	b.n	80069a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d01f      	beq.n	80069ec <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069ac:	2300      	movs	r3, #0
 80069ae:	61fb      	str	r3, [r7, #28]
 80069b0:	e012      	b.n	80069d8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	4413      	add	r3, r2
 80069b8:	7819      	ldrb	r1, [r3, #0]
 80069ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	4413      	add	r3, r2
 80069c0:	3334      	adds	r3, #52	@ 0x34
 80069c2:	460a      	mov	r2, r1
 80069c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	4413      	add	r3, r2
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d006      	beq.n	80069e0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	3301      	adds	r3, #1
 80069d6:	61fb      	str	r3, [r7, #28]
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	2b0f      	cmp	r3, #15
 80069dc:	d9e9      	bls.n	80069b2 <prvInitialiseNewTask+0x56>
 80069de:	e000      	b.n	80069e2 <prvInitialiseNewTask+0x86>
			{
				break;
 80069e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80069ea:	e003      	b.n	80069f4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f6:	2b06      	cmp	r3, #6
 80069f8:	d901      	bls.n	80069fe <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069fa:	2306      	movs	r3, #6
 80069fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a02:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a08:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a12:	3304      	adds	r3, #4
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff f8f6 	bl	8005c06 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1c:	3318      	adds	r3, #24
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7ff f8f1 	bl	8005c06 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a28:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2c:	f1c3 0207 	rsb	r2, r3, #7
 8006a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a32:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a38:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4c:	334c      	adds	r3, #76	@ 0x4c
 8006a4e:	224c      	movs	r2, #76	@ 0x4c
 8006a50:	2100      	movs	r1, #0
 8006a52:	4618      	mov	r0, r3
 8006a54:	f001 fc28 	bl	80082a8 <memset>
 8006a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5a:	4a0d      	ldr	r2, [pc, #52]	@ (8006a90 <prvInitialiseNewTask+0x134>)
 8006a5c:	651a      	str	r2, [r3, #80]	@ 0x50
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a60:	4a0c      	ldr	r2, [pc, #48]	@ (8006a94 <prvInitialiseNewTask+0x138>)
 8006a62:	655a      	str	r2, [r3, #84]	@ 0x54
 8006a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a66:	4a0c      	ldr	r2, [pc, #48]	@ (8006a98 <prvInitialiseNewTask+0x13c>)
 8006a68:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	68f9      	ldr	r1, [r7, #12]
 8006a6e:	69b8      	ldr	r0, [r7, #24]
 8006a70:	f000 ffdc 	bl	8007a2c <pxPortInitialiseStack>
 8006a74:	4602      	mov	r2, r0
 8006a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a86:	bf00      	nop
 8006a88:	3720      	adds	r7, #32
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	2000433c 	.word	0x2000433c
 8006a94:	200043a4 	.word	0x200043a4
 8006a98:	2000440c 	.word	0x2000440c

08006a9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006aa4:	f001 f8f0 	bl	8007c88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8006b54 <prvAddNewTaskToReadyList+0xb8>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3301      	adds	r3, #1
 8006aae:	4a29      	ldr	r2, [pc, #164]	@ (8006b54 <prvAddNewTaskToReadyList+0xb8>)
 8006ab0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ab2:	4b29      	ldr	r3, [pc, #164]	@ (8006b58 <prvAddNewTaskToReadyList+0xbc>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d109      	bne.n	8006ace <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006aba:	4a27      	ldr	r2, [pc, #156]	@ (8006b58 <prvAddNewTaskToReadyList+0xbc>)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ac0:	4b24      	ldr	r3, [pc, #144]	@ (8006b54 <prvAddNewTaskToReadyList+0xb8>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d110      	bne.n	8006aea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ac8:	f000 fbe4 	bl	8007294 <prvInitialiseTaskLists>
 8006acc:	e00d      	b.n	8006aea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ace:	4b23      	ldr	r3, [pc, #140]	@ (8006b5c <prvAddNewTaskToReadyList+0xc0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d109      	bne.n	8006aea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ad6:	4b20      	ldr	r3, [pc, #128]	@ (8006b58 <prvAddNewTaskToReadyList+0xbc>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d802      	bhi.n	8006aea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8006b58 <prvAddNewTaskToReadyList+0xbc>)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006aea:	4b1d      	ldr	r3, [pc, #116]	@ (8006b60 <prvAddNewTaskToReadyList+0xc4>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3301      	adds	r3, #1
 8006af0:	4a1b      	ldr	r2, [pc, #108]	@ (8006b60 <prvAddNewTaskToReadyList+0xc4>)
 8006af2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af8:	2201      	movs	r2, #1
 8006afa:	409a      	lsls	r2, r3
 8006afc:	4b19      	ldr	r3, [pc, #100]	@ (8006b64 <prvAddNewTaskToReadyList+0xc8>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	4a18      	ldr	r2, [pc, #96]	@ (8006b64 <prvAddNewTaskToReadyList+0xc8>)
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4a15      	ldr	r2, [pc, #84]	@ (8006b68 <prvAddNewTaskToReadyList+0xcc>)
 8006b14:	441a      	add	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	3304      	adds	r3, #4
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	f7ff f87f 	bl	8005c20 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b22:	f001 f8e3 	bl	8007cec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b26:	4b0d      	ldr	r3, [pc, #52]	@ (8006b5c <prvAddNewTaskToReadyList+0xc0>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00e      	beq.n	8006b4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b58 <prvAddNewTaskToReadyList+0xbc>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d207      	bcs.n	8006b4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b6c <prvAddNewTaskToReadyList+0xd0>)
 8006b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b4c:	bf00      	nop
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	200006e8 	.word	0x200006e8
 8006b58:	200005e8 	.word	0x200005e8
 8006b5c:	200006f4 	.word	0x200006f4
 8006b60:	20000704 	.word	0x20000704
 8006b64:	200006f0 	.word	0x200006f0
 8006b68:	200005ec 	.word	0x200005ec
 8006b6c:	e000ed04 	.word	0xe000ed04

08006b70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d018      	beq.n	8006bb4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b82:	4b14      	ldr	r3, [pc, #80]	@ (8006bd4 <vTaskDelay+0x64>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00b      	beq.n	8006ba2 <vTaskDelay+0x32>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	60bb      	str	r3, [r7, #8]
}
 8006b9c:	bf00      	nop
 8006b9e:	bf00      	nop
 8006ba0:	e7fd      	b.n	8006b9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ba2:	f000 f885 	bl	8006cb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fed9 	bl	8007960 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006bae:	f000 f88d 	bl	8006ccc <xTaskResumeAll>
 8006bb2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d107      	bne.n	8006bca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006bba:	4b07      	ldr	r3, [pc, #28]	@ (8006bd8 <vTaskDelay+0x68>)
 8006bbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bca:	bf00      	nop
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20000710 	.word	0x20000710
 8006bd8:	e000ed04 	.word	0xe000ed04

08006bdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08a      	sub	sp, #40	@ 0x28
 8006be0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006be2:	2300      	movs	r3, #0
 8006be4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006be6:	2300      	movs	r3, #0
 8006be8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bea:	463a      	mov	r2, r7
 8006bec:	1d39      	adds	r1, r7, #4
 8006bee:	f107 0308 	add.w	r3, r7, #8
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7f9 fc92 	bl	800051c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	9202      	str	r2, [sp, #8]
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	2300      	movs	r3, #0
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	2300      	movs	r3, #0
 8006c08:	460a      	mov	r2, r1
 8006c0a:	4921      	ldr	r1, [pc, #132]	@ (8006c90 <vTaskStartScheduler+0xb4>)
 8006c0c:	4821      	ldr	r0, [pc, #132]	@ (8006c94 <vTaskStartScheduler+0xb8>)
 8006c0e:	f7ff fdff 	bl	8006810 <xTaskCreateStatic>
 8006c12:	4603      	mov	r3, r0
 8006c14:	4a20      	ldr	r2, [pc, #128]	@ (8006c98 <vTaskStartScheduler+0xbc>)
 8006c16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c18:	4b1f      	ldr	r3, [pc, #124]	@ (8006c98 <vTaskStartScheduler+0xbc>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c20:	2301      	movs	r3, #1
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	e001      	b.n	8006c2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c26:	2300      	movs	r3, #0
 8006c28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d11b      	bne.n	8006c68 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	613b      	str	r3, [r7, #16]
}
 8006c42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c44:	4b15      	ldr	r3, [pc, #84]	@ (8006c9c <vTaskStartScheduler+0xc0>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	334c      	adds	r3, #76	@ 0x4c
 8006c4a:	4a15      	ldr	r2, [pc, #84]	@ (8006ca0 <vTaskStartScheduler+0xc4>)
 8006c4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c4e:	4b15      	ldr	r3, [pc, #84]	@ (8006ca4 <vTaskStartScheduler+0xc8>)
 8006c50:	f04f 32ff 	mov.w	r2, #4294967295
 8006c54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c56:	4b14      	ldr	r3, [pc, #80]	@ (8006ca8 <vTaskStartScheduler+0xcc>)
 8006c58:	2201      	movs	r2, #1
 8006c5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c5c:	4b13      	ldr	r3, [pc, #76]	@ (8006cac <vTaskStartScheduler+0xd0>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c62:	f000 ff6d 	bl	8007b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c66:	e00f      	b.n	8006c88 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6e:	d10b      	bne.n	8006c88 <vTaskStartScheduler+0xac>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	60fb      	str	r3, [r7, #12]
}
 8006c82:	bf00      	nop
 8006c84:	bf00      	nop
 8006c86:	e7fd      	b.n	8006c84 <vTaskStartScheduler+0xa8>
}
 8006c88:	bf00      	nop
 8006c8a:	3718      	adds	r7, #24
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	08008604 	.word	0x08008604
 8006c94:	08007265 	.word	0x08007265
 8006c98:	2000070c 	.word	0x2000070c
 8006c9c:	200005e8 	.word	0x200005e8
 8006ca0:	200000a4 	.word	0x200000a4
 8006ca4:	20000708 	.word	0x20000708
 8006ca8:	200006f4 	.word	0x200006f4
 8006cac:	200006ec 	.word	0x200006ec

08006cb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006cb4:	4b04      	ldr	r3, [pc, #16]	@ (8006cc8 <vTaskSuspendAll+0x18>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	4a03      	ldr	r2, [pc, #12]	@ (8006cc8 <vTaskSuspendAll+0x18>)
 8006cbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006cbe:	bf00      	nop
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	20000710 	.word	0x20000710

08006ccc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006cda:	4b42      	ldr	r3, [pc, #264]	@ (8006de4 <xTaskResumeAll+0x118>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10b      	bne.n	8006cfa <xTaskResumeAll+0x2e>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	603b      	str	r3, [r7, #0]
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop
 8006cf8:	e7fd      	b.n	8006cf6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006cfa:	f000 ffc5 	bl	8007c88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006cfe:	4b39      	ldr	r3, [pc, #228]	@ (8006de4 <xTaskResumeAll+0x118>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3b01      	subs	r3, #1
 8006d04:	4a37      	ldr	r2, [pc, #220]	@ (8006de4 <xTaskResumeAll+0x118>)
 8006d06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d08:	4b36      	ldr	r3, [pc, #216]	@ (8006de4 <xTaskResumeAll+0x118>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d161      	bne.n	8006dd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d10:	4b35      	ldr	r3, [pc, #212]	@ (8006de8 <xTaskResumeAll+0x11c>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d05d      	beq.n	8006dd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d18:	e02e      	b.n	8006d78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d1a:	4b34      	ldr	r3, [pc, #208]	@ (8006dec <xTaskResumeAll+0x120>)
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	3318      	adds	r3, #24
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fe ffd7 	bl	8005cda <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3304      	adds	r3, #4
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fe ffd2 	bl	8005cda <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	409a      	lsls	r2, r3
 8006d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8006df0 <xTaskResumeAll+0x124>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	4a2a      	ldr	r2, [pc, #168]	@ (8006df0 <xTaskResumeAll+0x124>)
 8006d46:	6013      	str	r3, [r2, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4a27      	ldr	r2, [pc, #156]	@ (8006df4 <xTaskResumeAll+0x128>)
 8006d56:	441a      	add	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4610      	mov	r0, r2
 8006d60:	f7fe ff5e 	bl	8005c20 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d68:	4b23      	ldr	r3, [pc, #140]	@ (8006df8 <xTaskResumeAll+0x12c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d302      	bcc.n	8006d78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006d72:	4b22      	ldr	r3, [pc, #136]	@ (8006dfc <xTaskResumeAll+0x130>)
 8006d74:	2201      	movs	r2, #1
 8006d76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d78:	4b1c      	ldr	r3, [pc, #112]	@ (8006dec <xTaskResumeAll+0x120>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1cc      	bne.n	8006d1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d86:	f000 fb29 	bl	80073dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006e00 <xTaskResumeAll+0x134>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d010      	beq.n	8006db8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d96:	f000 f837 	bl	8006e08 <xTaskIncrementTick>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006da0:	4b16      	ldr	r3, [pc, #88]	@ (8006dfc <xTaskResumeAll+0x130>)
 8006da2:	2201      	movs	r2, #1
 8006da4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1f1      	bne.n	8006d96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006db2:	4b13      	ldr	r3, [pc, #76]	@ (8006e00 <xTaskResumeAll+0x134>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006db8:	4b10      	ldr	r3, [pc, #64]	@ (8006dfc <xTaskResumeAll+0x130>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d009      	beq.n	8006dd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8006e04 <xTaskResumeAll+0x138>)
 8006dc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006dd4:	f000 ff8a 	bl	8007cec <vPortExitCritical>

	return xAlreadyYielded;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	20000710 	.word	0x20000710
 8006de8:	200006e8 	.word	0x200006e8
 8006dec:	200006a8 	.word	0x200006a8
 8006df0:	200006f0 	.word	0x200006f0
 8006df4:	200005ec 	.word	0x200005ec
 8006df8:	200005e8 	.word	0x200005e8
 8006dfc:	200006fc 	.word	0x200006fc
 8006e00:	200006f8 	.word	0x200006f8
 8006e04:	e000ed04 	.word	0xe000ed04

08006e08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e12:	4b4f      	ldr	r3, [pc, #316]	@ (8006f50 <xTaskIncrementTick+0x148>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f040 808f 	bne.w	8006f3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e1c:	4b4d      	ldr	r3, [pc, #308]	@ (8006f54 <xTaskIncrementTick+0x14c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3301      	adds	r3, #1
 8006e22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e24:	4a4b      	ldr	r2, [pc, #300]	@ (8006f54 <xTaskIncrementTick+0x14c>)
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d121      	bne.n	8006e74 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e30:	4b49      	ldr	r3, [pc, #292]	@ (8006f58 <xTaskIncrementTick+0x150>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00b      	beq.n	8006e52 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	603b      	str	r3, [r7, #0]
}
 8006e4c:	bf00      	nop
 8006e4e:	bf00      	nop
 8006e50:	e7fd      	b.n	8006e4e <xTaskIncrementTick+0x46>
 8006e52:	4b41      	ldr	r3, [pc, #260]	@ (8006f58 <xTaskIncrementTick+0x150>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	60fb      	str	r3, [r7, #12]
 8006e58:	4b40      	ldr	r3, [pc, #256]	@ (8006f5c <xTaskIncrementTick+0x154>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a3e      	ldr	r2, [pc, #248]	@ (8006f58 <xTaskIncrementTick+0x150>)
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	4a3e      	ldr	r2, [pc, #248]	@ (8006f5c <xTaskIncrementTick+0x154>)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	4b3e      	ldr	r3, [pc, #248]	@ (8006f60 <xTaskIncrementTick+0x158>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	4a3c      	ldr	r2, [pc, #240]	@ (8006f60 <xTaskIncrementTick+0x158>)
 8006e6e:	6013      	str	r3, [r2, #0]
 8006e70:	f000 fab4 	bl	80073dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e74:	4b3b      	ldr	r3, [pc, #236]	@ (8006f64 <xTaskIncrementTick+0x15c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d348      	bcc.n	8006f10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e7e:	4b36      	ldr	r3, [pc, #216]	@ (8006f58 <xTaskIncrementTick+0x150>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d104      	bne.n	8006e92 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e88:	4b36      	ldr	r3, [pc, #216]	@ (8006f64 <xTaskIncrementTick+0x15c>)
 8006e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e8e:	601a      	str	r2, [r3, #0]
					break;
 8006e90:	e03e      	b.n	8006f10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e92:	4b31      	ldr	r3, [pc, #196]	@ (8006f58 <xTaskIncrementTick+0x150>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d203      	bcs.n	8006eb2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006eaa:	4a2e      	ldr	r2, [pc, #184]	@ (8006f64 <xTaskIncrementTick+0x15c>)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006eb0:	e02e      	b.n	8006f10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe ff0f 	bl	8005cda <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d004      	beq.n	8006ece <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	3318      	adds	r3, #24
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fe ff06 	bl	8005cda <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	409a      	lsls	r2, r3
 8006ed6:	4b24      	ldr	r3, [pc, #144]	@ (8006f68 <xTaskIncrementTick+0x160>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	4a22      	ldr	r2, [pc, #136]	@ (8006f68 <xTaskIncrementTick+0x160>)
 8006ede:	6013      	str	r3, [r2, #0]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4a1f      	ldr	r2, [pc, #124]	@ (8006f6c <xTaskIncrementTick+0x164>)
 8006eee:	441a      	add	r2, r3
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	4610      	mov	r0, r2
 8006ef8:	f7fe fe92 	bl	8005c20 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f00:	4b1b      	ldr	r3, [pc, #108]	@ (8006f70 <xTaskIncrementTick+0x168>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d3b9      	bcc.n	8006e7e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f0e:	e7b6      	b.n	8006e7e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f10:	4b17      	ldr	r3, [pc, #92]	@ (8006f70 <xTaskIncrementTick+0x168>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f16:	4915      	ldr	r1, [pc, #84]	@ (8006f6c <xTaskIncrementTick+0x164>)
 8006f18:	4613      	mov	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d901      	bls.n	8006f2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f2c:	4b11      	ldr	r3, [pc, #68]	@ (8006f74 <xTaskIncrementTick+0x16c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d007      	beq.n	8006f44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006f34:	2301      	movs	r3, #1
 8006f36:	617b      	str	r3, [r7, #20]
 8006f38:	e004      	b.n	8006f44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f78 <xTaskIncrementTick+0x170>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	4a0d      	ldr	r2, [pc, #52]	@ (8006f78 <xTaskIncrementTick+0x170>)
 8006f42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f44:	697b      	ldr	r3, [r7, #20]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	20000710 	.word	0x20000710
 8006f54:	200006ec 	.word	0x200006ec
 8006f58:	200006a0 	.word	0x200006a0
 8006f5c:	200006a4 	.word	0x200006a4
 8006f60:	20000700 	.word	0x20000700
 8006f64:	20000708 	.word	0x20000708
 8006f68:	200006f0 	.word	0x200006f0
 8006f6c:	200005ec 	.word	0x200005ec
 8006f70:	200005e8 	.word	0x200005e8
 8006f74:	200006fc 	.word	0x200006fc
 8006f78:	200006f8 	.word	0x200006f8

08006f7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f82:	4b2a      	ldr	r3, [pc, #168]	@ (800702c <vTaskSwitchContext+0xb0>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f8a:	4b29      	ldr	r3, [pc, #164]	@ (8007030 <vTaskSwitchContext+0xb4>)
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f90:	e045      	b.n	800701e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006f92:	4b27      	ldr	r3, [pc, #156]	@ (8007030 <vTaskSwitchContext+0xb4>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f98:	4b26      	ldr	r3, [pc, #152]	@ (8007034 <vTaskSwitchContext+0xb8>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	fab3 f383 	clz	r3, r3
 8006fa4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006fa6:	7afb      	ldrb	r3, [r7, #11]
 8006fa8:	f1c3 031f 	rsb	r3, r3, #31
 8006fac:	617b      	str	r3, [r7, #20]
 8006fae:	4922      	ldr	r1, [pc, #136]	@ (8007038 <vTaskSwitchContext+0xbc>)
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	440b      	add	r3, r1
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10b      	bne.n	8006fda <vTaskSwitchContext+0x5e>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	607b      	str	r3, [r7, #4]
}
 8006fd4:	bf00      	nop
 8006fd6:	bf00      	nop
 8006fd8:	e7fd      	b.n	8006fd6 <vTaskSwitchContext+0x5a>
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4a14      	ldr	r2, [pc, #80]	@ (8007038 <vTaskSwitchContext+0xbc>)
 8006fe6:	4413      	add	r3, r2
 8006fe8:	613b      	str	r3, [r7, #16]
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	605a      	str	r2, [r3, #4]
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d104      	bne.n	800700a <vTaskSwitchContext+0x8e>
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	605a      	str	r2, [r3, #4]
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	4a0a      	ldr	r2, [pc, #40]	@ (800703c <vTaskSwitchContext+0xc0>)
 8007012:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007014:	4b09      	ldr	r3, [pc, #36]	@ (800703c <vTaskSwitchContext+0xc0>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	334c      	adds	r3, #76	@ 0x4c
 800701a:	4a09      	ldr	r2, [pc, #36]	@ (8007040 <vTaskSwitchContext+0xc4>)
 800701c:	6013      	str	r3, [r2, #0]
}
 800701e:	bf00      	nop
 8007020:	371c      	adds	r7, #28
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	20000710 	.word	0x20000710
 8007030:	200006fc 	.word	0x200006fc
 8007034:	200006f0 	.word	0x200006f0
 8007038:	200005ec 	.word	0x200005ec
 800703c:	200005e8 	.word	0x200005e8
 8007040:	200000a4 	.word	0x200000a4

08007044 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10b      	bne.n	800706c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	60fb      	str	r3, [r7, #12]
}
 8007066:	bf00      	nop
 8007068:	bf00      	nop
 800706a:	e7fd      	b.n	8007068 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800706c:	4b07      	ldr	r3, [pc, #28]	@ (800708c <vTaskPlaceOnEventList+0x48>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3318      	adds	r3, #24
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7fe fdf7 	bl	8005c68 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800707a:	2101      	movs	r1, #1
 800707c:	6838      	ldr	r0, [r7, #0]
 800707e:	f000 fc6f 	bl	8007960 <prvAddCurrentTaskToDelayedList>
}
 8007082:	bf00      	nop
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	200005e8 	.word	0x200005e8

08007090 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10b      	bne.n	80070be <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	60fb      	str	r3, [r7, #12]
}
 80070b8:	bf00      	nop
 80070ba:	bf00      	nop
 80070bc:	e7fd      	b.n	80070ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	3318      	adds	r3, #24
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fe09 	bl	8005cda <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070c8:	4b1d      	ldr	r3, [pc, #116]	@ (8007140 <xTaskRemoveFromEventList+0xb0>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d11c      	bne.n	800710a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	3304      	adds	r3, #4
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7fe fe00 	bl	8005cda <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070de:	2201      	movs	r2, #1
 80070e0:	409a      	lsls	r2, r3
 80070e2:	4b18      	ldr	r3, [pc, #96]	@ (8007144 <xTaskRemoveFromEventList+0xb4>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	4a16      	ldr	r2, [pc, #88]	@ (8007144 <xTaskRemoveFromEventList+0xb4>)
 80070ea:	6013      	str	r3, [r2, #0]
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070f0:	4613      	mov	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4413      	add	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4a13      	ldr	r2, [pc, #76]	@ (8007148 <xTaskRemoveFromEventList+0xb8>)
 80070fa:	441a      	add	r2, r3
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	3304      	adds	r3, #4
 8007100:	4619      	mov	r1, r3
 8007102:	4610      	mov	r0, r2
 8007104:	f7fe fd8c 	bl	8005c20 <vListInsertEnd>
 8007108:	e005      	b.n	8007116 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	3318      	adds	r3, #24
 800710e:	4619      	mov	r1, r3
 8007110:	480e      	ldr	r0, [pc, #56]	@ (800714c <xTaskRemoveFromEventList+0xbc>)
 8007112:	f7fe fd85 	bl	8005c20 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800711a:	4b0d      	ldr	r3, [pc, #52]	@ (8007150 <xTaskRemoveFromEventList+0xc0>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007120:	429a      	cmp	r2, r3
 8007122:	d905      	bls.n	8007130 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007124:	2301      	movs	r3, #1
 8007126:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007128:	4b0a      	ldr	r3, [pc, #40]	@ (8007154 <xTaskRemoveFromEventList+0xc4>)
 800712a:	2201      	movs	r2, #1
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	e001      	b.n	8007134 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007130:	2300      	movs	r3, #0
 8007132:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007134:	697b      	ldr	r3, [r7, #20]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	20000710 	.word	0x20000710
 8007144:	200006f0 	.word	0x200006f0
 8007148:	200005ec 	.word	0x200005ec
 800714c:	200006a8 	.word	0x200006a8
 8007150:	200005e8 	.word	0x200005e8
 8007154:	200006fc 	.word	0x200006fc

08007158 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007160:	4b06      	ldr	r3, [pc, #24]	@ (800717c <vTaskInternalSetTimeOutState+0x24>)
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007168:	4b05      	ldr	r3, [pc, #20]	@ (8007180 <vTaskInternalSetTimeOutState+0x28>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	605a      	str	r2, [r3, #4]
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	20000700 	.word	0x20000700
 8007180:	200006ec 	.word	0x200006ec

08007184 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b088      	sub	sp, #32
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10b      	bne.n	80071ac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	613b      	str	r3, [r7, #16]
}
 80071a6:	bf00      	nop
 80071a8:	bf00      	nop
 80071aa:	e7fd      	b.n	80071a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10b      	bne.n	80071ca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	60fb      	str	r3, [r7, #12]
}
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop
 80071c8:	e7fd      	b.n	80071c6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80071ca:	f000 fd5d 	bl	8007c88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071ce:	4b1d      	ldr	r3, [pc, #116]	@ (8007244 <xTaskCheckForTimeOut+0xc0>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e6:	d102      	bne.n	80071ee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071e8:	2300      	movs	r3, #0
 80071ea:	61fb      	str	r3, [r7, #28]
 80071ec:	e023      	b.n	8007236 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	4b15      	ldr	r3, [pc, #84]	@ (8007248 <xTaskCheckForTimeOut+0xc4>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d007      	beq.n	800720a <xTaskCheckForTimeOut+0x86>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	429a      	cmp	r2, r3
 8007202:	d302      	bcc.n	800720a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007204:	2301      	movs	r3, #1
 8007206:	61fb      	str	r3, [r7, #28]
 8007208:	e015      	b.n	8007236 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	429a      	cmp	r2, r3
 8007212:	d20b      	bcs.n	800722c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	1ad2      	subs	r2, r2, r3
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7ff ff99 	bl	8007158 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007226:	2300      	movs	r3, #0
 8007228:	61fb      	str	r3, [r7, #28]
 800722a:	e004      	b.n	8007236 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2200      	movs	r2, #0
 8007230:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007232:	2301      	movs	r3, #1
 8007234:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007236:	f000 fd59 	bl	8007cec <vPortExitCritical>

	return xReturn;
 800723a:	69fb      	ldr	r3, [r7, #28]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3720      	adds	r7, #32
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	200006ec 	.word	0x200006ec
 8007248:	20000700 	.word	0x20000700

0800724c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800724c:	b480      	push	{r7}
 800724e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007250:	4b03      	ldr	r3, [pc, #12]	@ (8007260 <vTaskMissedYield+0x14>)
 8007252:	2201      	movs	r2, #1
 8007254:	601a      	str	r2, [r3, #0]
}
 8007256:	bf00      	nop
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	200006fc 	.word	0x200006fc

08007264 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800726c:	f000 f852 	bl	8007314 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007270:	4b06      	ldr	r3, [pc, #24]	@ (800728c <prvIdleTask+0x28>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d9f9      	bls.n	800726c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007278:	4b05      	ldr	r3, [pc, #20]	@ (8007290 <prvIdleTask+0x2c>)
 800727a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800727e:	601a      	str	r2, [r3, #0]
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007288:	e7f0      	b.n	800726c <prvIdleTask+0x8>
 800728a:	bf00      	nop
 800728c:	200005ec 	.word	0x200005ec
 8007290:	e000ed04 	.word	0xe000ed04

08007294 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800729a:	2300      	movs	r3, #0
 800729c:	607b      	str	r3, [r7, #4]
 800729e:	e00c      	b.n	80072ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	4613      	mov	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4a12      	ldr	r2, [pc, #72]	@ (80072f4 <prvInitialiseTaskLists+0x60>)
 80072ac:	4413      	add	r3, r2
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fe fc89 	bl	8005bc6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3301      	adds	r3, #1
 80072b8:	607b      	str	r3, [r7, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b06      	cmp	r3, #6
 80072be:	d9ef      	bls.n	80072a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072c0:	480d      	ldr	r0, [pc, #52]	@ (80072f8 <prvInitialiseTaskLists+0x64>)
 80072c2:	f7fe fc80 	bl	8005bc6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072c6:	480d      	ldr	r0, [pc, #52]	@ (80072fc <prvInitialiseTaskLists+0x68>)
 80072c8:	f7fe fc7d 	bl	8005bc6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072cc:	480c      	ldr	r0, [pc, #48]	@ (8007300 <prvInitialiseTaskLists+0x6c>)
 80072ce:	f7fe fc7a 	bl	8005bc6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072d2:	480c      	ldr	r0, [pc, #48]	@ (8007304 <prvInitialiseTaskLists+0x70>)
 80072d4:	f7fe fc77 	bl	8005bc6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072d8:	480b      	ldr	r0, [pc, #44]	@ (8007308 <prvInitialiseTaskLists+0x74>)
 80072da:	f7fe fc74 	bl	8005bc6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072de:	4b0b      	ldr	r3, [pc, #44]	@ (800730c <prvInitialiseTaskLists+0x78>)
 80072e0:	4a05      	ldr	r2, [pc, #20]	@ (80072f8 <prvInitialiseTaskLists+0x64>)
 80072e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007310 <prvInitialiseTaskLists+0x7c>)
 80072e6:	4a05      	ldr	r2, [pc, #20]	@ (80072fc <prvInitialiseTaskLists+0x68>)
 80072e8:	601a      	str	r2, [r3, #0]
}
 80072ea:	bf00      	nop
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	200005ec 	.word	0x200005ec
 80072f8:	20000678 	.word	0x20000678
 80072fc:	2000068c 	.word	0x2000068c
 8007300:	200006a8 	.word	0x200006a8
 8007304:	200006bc 	.word	0x200006bc
 8007308:	200006d4 	.word	0x200006d4
 800730c:	200006a0 	.word	0x200006a0
 8007310:	200006a4 	.word	0x200006a4

08007314 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800731a:	e019      	b.n	8007350 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800731c:	f000 fcb4 	bl	8007c88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007320:	4b10      	ldr	r3, [pc, #64]	@ (8007364 <prvCheckTasksWaitingTermination+0x50>)
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	3304      	adds	r3, #4
 800732c:	4618      	mov	r0, r3
 800732e:	f7fe fcd4 	bl	8005cda <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007332:	4b0d      	ldr	r3, [pc, #52]	@ (8007368 <prvCheckTasksWaitingTermination+0x54>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3b01      	subs	r3, #1
 8007338:	4a0b      	ldr	r2, [pc, #44]	@ (8007368 <prvCheckTasksWaitingTermination+0x54>)
 800733a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800733c:	4b0b      	ldr	r3, [pc, #44]	@ (800736c <prvCheckTasksWaitingTermination+0x58>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	3b01      	subs	r3, #1
 8007342:	4a0a      	ldr	r2, [pc, #40]	@ (800736c <prvCheckTasksWaitingTermination+0x58>)
 8007344:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007346:	f000 fcd1 	bl	8007cec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f810 	bl	8007370 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007350:	4b06      	ldr	r3, [pc, #24]	@ (800736c <prvCheckTasksWaitingTermination+0x58>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e1      	bne.n	800731c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007358:	bf00      	nop
 800735a:	bf00      	nop
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	200006bc 	.word	0x200006bc
 8007368:	200006e8 	.word	0x200006e8
 800736c:	200006d0 	.word	0x200006d0

08007370 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	334c      	adds	r3, #76	@ 0x4c
 800737c:	4618      	mov	r0, r3
 800737e:	f000 ff9b 	bl	80082b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007388:	2b00      	cmp	r3, #0
 800738a:	d108      	bne.n	800739e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007390:	4618      	mov	r0, r3
 8007392:	f000 fe69 	bl	8008068 <vPortFree>
				vPortFree( pxTCB );
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fe66 	bl	8008068 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800739c:	e019      	b.n	80073d2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d103      	bne.n	80073b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fe5d 	bl	8008068 <vPortFree>
	}
 80073ae:	e010      	b.n	80073d2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d00b      	beq.n	80073d2 <prvDeleteTCB+0x62>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	60fb      	str	r3, [r7, #12]
}
 80073cc:	bf00      	nop
 80073ce:	bf00      	nop
 80073d0:	e7fd      	b.n	80073ce <prvDeleteTCB+0x5e>
	}
 80073d2:	bf00      	nop
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007414 <prvResetNextTaskUnblockTime+0x38>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d104      	bne.n	80073f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007418 <prvResetNextTaskUnblockTime+0x3c>)
 80073ee:	f04f 32ff 	mov.w	r2, #4294967295
 80073f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073f4:	e008      	b.n	8007408 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f6:	4b07      	ldr	r3, [pc, #28]	@ (8007414 <prvResetNextTaskUnblockTime+0x38>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	4a04      	ldr	r2, [pc, #16]	@ (8007418 <prvResetNextTaskUnblockTime+0x3c>)
 8007406:	6013      	str	r3, [r2, #0]
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	200006a0 	.word	0x200006a0
 8007418:	20000708 	.word	0x20000708

0800741c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007422:	4b0b      	ldr	r3, [pc, #44]	@ (8007450 <xTaskGetSchedulerState+0x34>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d102      	bne.n	8007430 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800742a:	2301      	movs	r3, #1
 800742c:	607b      	str	r3, [r7, #4]
 800742e:	e008      	b.n	8007442 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007430:	4b08      	ldr	r3, [pc, #32]	@ (8007454 <xTaskGetSchedulerState+0x38>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d102      	bne.n	800743e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007438:	2302      	movs	r3, #2
 800743a:	607b      	str	r3, [r7, #4]
 800743c:	e001      	b.n	8007442 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800743e:	2300      	movs	r3, #0
 8007440:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007442:	687b      	ldr	r3, [r7, #4]
	}
 8007444:	4618      	mov	r0, r3
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	200006f4 	.word	0x200006f4
 8007454:	20000710 	.word	0x20000710

08007458 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007464:	2300      	movs	r3, #0
 8007466:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d05e      	beq.n	800752c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007472:	4b31      	ldr	r3, [pc, #196]	@ (8007538 <xTaskPriorityInherit+0xe0>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007478:	429a      	cmp	r2, r3
 800747a:	d24e      	bcs.n	800751a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	2b00      	cmp	r3, #0
 8007482:	db06      	blt.n	8007492 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007484:	4b2c      	ldr	r3, [pc, #176]	@ (8007538 <xTaskPriorityInherit+0xe0>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748a:	f1c3 0207 	rsb	r2, r3, #7
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	6959      	ldr	r1, [r3, #20]
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800749a:	4613      	mov	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4a26      	ldr	r2, [pc, #152]	@ (800753c <xTaskPriorityInherit+0xe4>)
 80074a4:	4413      	add	r3, r2
 80074a6:	4299      	cmp	r1, r3
 80074a8:	d12f      	bne.n	800750a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	3304      	adds	r3, #4
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fe fc13 	bl	8005cda <uxListRemove>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10a      	bne.n	80074d0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074be:	2201      	movs	r2, #1
 80074c0:	fa02 f303 	lsl.w	r3, r2, r3
 80074c4:	43da      	mvns	r2, r3
 80074c6:	4b1e      	ldr	r3, [pc, #120]	@ (8007540 <xTaskPriorityInherit+0xe8>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4013      	ands	r3, r2
 80074cc:	4a1c      	ldr	r2, [pc, #112]	@ (8007540 <xTaskPriorityInherit+0xe8>)
 80074ce:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074d0:	4b19      	ldr	r3, [pc, #100]	@ (8007538 <xTaskPriorityInherit+0xe0>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074de:	2201      	movs	r2, #1
 80074e0:	409a      	lsls	r2, r3
 80074e2:	4b17      	ldr	r3, [pc, #92]	@ (8007540 <xTaskPriorityInherit+0xe8>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	4a15      	ldr	r2, [pc, #84]	@ (8007540 <xTaskPriorityInherit+0xe8>)
 80074ea:	6013      	str	r3, [r2, #0]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074f0:	4613      	mov	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4a10      	ldr	r2, [pc, #64]	@ (800753c <xTaskPriorityInherit+0xe4>)
 80074fa:	441a      	add	r2, r3
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	3304      	adds	r3, #4
 8007500:	4619      	mov	r1, r3
 8007502:	4610      	mov	r0, r2
 8007504:	f7fe fb8c 	bl	8005c20 <vListInsertEnd>
 8007508:	e004      	b.n	8007514 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800750a:	4b0b      	ldr	r3, [pc, #44]	@ (8007538 <xTaskPriorityInherit+0xe0>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007514:	2301      	movs	r3, #1
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	e008      	b.n	800752c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800751e:	4b06      	ldr	r3, [pc, #24]	@ (8007538 <xTaskPriorityInherit+0xe0>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007524:	429a      	cmp	r2, r3
 8007526:	d201      	bcs.n	800752c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007528:	2301      	movs	r3, #1
 800752a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800752c:	68fb      	ldr	r3, [r7, #12]
	}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	200005e8 	.word	0x200005e8
 800753c:	200005ec 	.word	0x200005ec
 8007540:	200006f0 	.word	0x200006f0

08007544 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007550:	2300      	movs	r3, #0
 8007552:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d070      	beq.n	800763c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800755a:	4b3b      	ldr	r3, [pc, #236]	@ (8007648 <xTaskPriorityDisinherit+0x104>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	429a      	cmp	r2, r3
 8007562:	d00b      	beq.n	800757c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	60fb      	str	r3, [r7, #12]
}
 8007576:	bf00      	nop
 8007578:	bf00      	nop
 800757a:	e7fd      	b.n	8007578 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10b      	bne.n	800759c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	60bb      	str	r3, [r7, #8]
}
 8007596:	bf00      	nop
 8007598:	bf00      	nop
 800759a:	e7fd      	b.n	8007598 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075a0:	1e5a      	subs	r2, r3, #1
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d044      	beq.n	800763c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d140      	bne.n	800763c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	3304      	adds	r3, #4
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fe fb8b 	bl	8005cda <uxListRemove>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d115      	bne.n	80075f6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ce:	491f      	ldr	r1, [pc, #124]	@ (800764c <xTaskPriorityDisinherit+0x108>)
 80075d0:	4613      	mov	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	440b      	add	r3, r1
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10a      	bne.n	80075f6 <xTaskPriorityDisinherit+0xb2>
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e4:	2201      	movs	r2, #1
 80075e6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ea:	43da      	mvns	r2, r3
 80075ec:	4b18      	ldr	r3, [pc, #96]	@ (8007650 <xTaskPriorityDisinherit+0x10c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4013      	ands	r3, r2
 80075f2:	4a17      	ldr	r2, [pc, #92]	@ (8007650 <xTaskPriorityDisinherit+0x10c>)
 80075f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007602:	f1c3 0207 	rsb	r2, r3, #7
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760e:	2201      	movs	r2, #1
 8007610:	409a      	lsls	r2, r3
 8007612:	4b0f      	ldr	r3, [pc, #60]	@ (8007650 <xTaskPriorityDisinherit+0x10c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4313      	orrs	r3, r2
 8007618:	4a0d      	ldr	r2, [pc, #52]	@ (8007650 <xTaskPriorityDisinherit+0x10c>)
 800761a:	6013      	str	r3, [r2, #0]
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007620:	4613      	mov	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4a08      	ldr	r2, [pc, #32]	@ (800764c <xTaskPriorityDisinherit+0x108>)
 800762a:	441a      	add	r2, r3
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	3304      	adds	r3, #4
 8007630:	4619      	mov	r1, r3
 8007632:	4610      	mov	r0, r2
 8007634:	f7fe faf4 	bl	8005c20 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007638:	2301      	movs	r3, #1
 800763a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800763c:	697b      	ldr	r3, [r7, #20]
	}
 800763e:	4618      	mov	r0, r3
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	200005e8 	.word	0x200005e8
 800764c:	200005ec 	.word	0x200005ec
 8007650:	200006f0 	.word	0x200006f0

08007654 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007662:	2301      	movs	r3, #1
 8007664:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d079      	beq.n	8007760 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10b      	bne.n	800768c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	60fb      	str	r3, [r7, #12]
}
 8007686:	bf00      	nop
 8007688:	bf00      	nop
 800768a:	e7fd      	b.n	8007688 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	429a      	cmp	r2, r3
 8007694:	d902      	bls.n	800769c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	61fb      	str	r3, [r7, #28]
 800769a:	e002      	b.n	80076a2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076a0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a6:	69fa      	ldr	r2, [r7, #28]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d059      	beq.n	8007760 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d154      	bne.n	8007760 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80076b6:	4b2c      	ldr	r3, [pc, #176]	@ (8007768 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d10b      	bne.n	80076d8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80076c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	60bb      	str	r3, [r7, #8]
}
 80076d2:	bf00      	nop
 80076d4:	bf00      	nop
 80076d6:	e7fd      	b.n	80076d4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	69fa      	ldr	r2, [r7, #28]
 80076e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	db04      	blt.n	80076f6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	f1c3 0207 	rsb	r2, r3, #7
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	6959      	ldr	r1, [r3, #20]
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	4613      	mov	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4a19      	ldr	r2, [pc, #100]	@ (800776c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007706:	4413      	add	r3, r2
 8007708:	4299      	cmp	r1, r3
 800770a:	d129      	bne.n	8007760 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	3304      	adds	r3, #4
 8007710:	4618      	mov	r0, r3
 8007712:	f7fe fae2 	bl	8005cda <uxListRemove>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007720:	2201      	movs	r2, #1
 8007722:	fa02 f303 	lsl.w	r3, r2, r3
 8007726:	43da      	mvns	r2, r3
 8007728:	4b11      	ldr	r3, [pc, #68]	@ (8007770 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4013      	ands	r3, r2
 800772e:	4a10      	ldr	r2, [pc, #64]	@ (8007770 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007730:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007736:	2201      	movs	r2, #1
 8007738:	409a      	lsls	r2, r3
 800773a:	4b0d      	ldr	r3, [pc, #52]	@ (8007770 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4313      	orrs	r3, r2
 8007740:	4a0b      	ldr	r2, [pc, #44]	@ (8007770 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007742:	6013      	str	r3, [r2, #0]
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007748:	4613      	mov	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4413      	add	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4a06      	ldr	r2, [pc, #24]	@ (800776c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007752:	441a      	add	r2, r3
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	3304      	adds	r3, #4
 8007758:	4619      	mov	r1, r3
 800775a:	4610      	mov	r0, r2
 800775c:	f7fe fa60 	bl	8005c20 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007760:	bf00      	nop
 8007762:	3720      	adds	r7, #32
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	200005e8 	.word	0x200005e8
 800776c:	200005ec 	.word	0x200005ec
 8007770:	200006f0 	.word	0x200006f0

08007774 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007774:	b480      	push	{r7}
 8007776:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007778:	4b07      	ldr	r3, [pc, #28]	@ (8007798 <pvTaskIncrementMutexHeldCount+0x24>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d004      	beq.n	800778a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007780:	4b05      	ldr	r3, [pc, #20]	@ (8007798 <pvTaskIncrementMutexHeldCount+0x24>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007786:	3201      	adds	r2, #1
 8007788:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800778a:	4b03      	ldr	r3, [pc, #12]	@ (8007798 <pvTaskIncrementMutexHeldCount+0x24>)
 800778c:	681b      	ldr	r3, [r3, #0]
	}
 800778e:	4618      	mov	r0, r3
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr
 8007798:	200005e8 	.word	0x200005e8

0800779c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80077a6:	f000 fa6f 	bl	8007c88 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80077aa:	4b20      	ldr	r3, [pc, #128]	@ (800782c <ulTaskNotifyTake+0x90>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d113      	bne.n	80077de <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80077b6:	4b1d      	ldr	r3, [pc, #116]	@ (800782c <ulTaskNotifyTake+0x90>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00b      	beq.n	80077de <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077c6:	2101      	movs	r1, #1
 80077c8:	6838      	ldr	r0, [r7, #0]
 80077ca:	f000 f8c9 	bl	8007960 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80077ce:	4b18      	ldr	r3, [pc, #96]	@ (8007830 <ulTaskNotifyTake+0x94>)
 80077d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	f3bf 8f4f 	dsb	sy
 80077da:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80077de:	f000 fa85 	bl	8007cec <vPortExitCritical>

		taskENTER_CRITICAL();
 80077e2:	f000 fa51 	bl	8007c88 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80077e6:	4b11      	ldr	r3, [pc, #68]	@ (800782c <ulTaskNotifyTake+0x90>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077ee:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00e      	beq.n	8007814 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d005      	beq.n	8007808 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80077fc:	4b0b      	ldr	r3, [pc, #44]	@ (800782c <ulTaskNotifyTake+0x90>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2200      	movs	r2, #0
 8007802:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8007806:	e005      	b.n	8007814 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8007808:	4b08      	ldr	r3, [pc, #32]	@ (800782c <ulTaskNotifyTake+0x90>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	3a01      	subs	r2, #1
 8007810:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007814:	4b05      	ldr	r3, [pc, #20]	@ (800782c <ulTaskNotifyTake+0x90>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 800781e:	f000 fa65 	bl	8007cec <vPortExitCritical>

		return ulReturn;
 8007822:	68fb      	ldr	r3, [r7, #12]
	}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	200005e8 	.word	0x200005e8
 8007830:	e000ed04 	.word	0xe000ed04

08007834 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007834:	b580      	push	{r7, lr}
 8007836:	b08a      	sub	sp, #40	@ 0x28
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10b      	bne.n	800785c <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	61bb      	str	r3, [r7, #24]
}
 8007856:	bf00      	nop
 8007858:	bf00      	nop
 800785a:	e7fd      	b.n	8007858 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800785c:	f000 faf4 	bl	8007e48 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8007864:	f3ef 8211 	mrs	r2, BASEPRI
 8007868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	617a      	str	r2, [r7, #20]
 800787a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800787c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800787e:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007882:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8007886:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788a:	2202      	movs	r2, #2
 800788c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8007890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007892:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007896:	1c5a      	adds	r2, r3, #1
 8007898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800789e:	7ffb      	ldrb	r3, [r7, #31]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d146      	bne.n	8007932 <vTaskNotifyGiveFromISR+0xfe>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80078a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00b      	beq.n	80078c4 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	60fb      	str	r3, [r7, #12]
}
 80078be:	bf00      	nop
 80078c0:	bf00      	nop
 80078c2:	e7fd      	b.n	80078c0 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078c4:	4b20      	ldr	r3, [pc, #128]	@ (8007948 <vTaskNotifyGiveFromISR+0x114>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d11c      	bne.n	8007906 <vTaskNotifyGiveFromISR+0xd2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ce:	3304      	adds	r3, #4
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7fe fa02 	bl	8005cda <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078da:	2201      	movs	r2, #1
 80078dc:	409a      	lsls	r2, r3
 80078de:	4b1b      	ldr	r3, [pc, #108]	@ (800794c <vTaskNotifyGiveFromISR+0x118>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	4a19      	ldr	r2, [pc, #100]	@ (800794c <vTaskNotifyGiveFromISR+0x118>)
 80078e6:	6013      	str	r3, [r2, #0]
 80078e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078ec:	4613      	mov	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4413      	add	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4a16      	ldr	r2, [pc, #88]	@ (8007950 <vTaskNotifyGiveFromISR+0x11c>)
 80078f6:	441a      	add	r2, r3
 80078f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fa:	3304      	adds	r3, #4
 80078fc:	4619      	mov	r1, r3
 80078fe:	4610      	mov	r0, r2
 8007900:	f7fe f98e 	bl	8005c20 <vListInsertEnd>
 8007904:	e005      	b.n	8007912 <vTaskNotifyGiveFromISR+0xde>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007908:	3318      	adds	r3, #24
 800790a:	4619      	mov	r1, r3
 800790c:	4811      	ldr	r0, [pc, #68]	@ (8007954 <vTaskNotifyGiveFromISR+0x120>)
 800790e:	f7fe f987 	bl	8005c20 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007916:	4b10      	ldr	r3, [pc, #64]	@ (8007958 <vTaskNotifyGiveFromISR+0x124>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800791c:	429a      	cmp	r2, r3
 800791e:	d908      	bls.n	8007932 <vTaskNotifyGiveFromISR+0xfe>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <vTaskNotifyGiveFromISR+0xf8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2201      	movs	r2, #1
 800792a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800792c:	4b0b      	ldr	r3, [pc, #44]	@ (800795c <vTaskNotifyGiveFromISR+0x128>)
 800792e:	2201      	movs	r2, #1
 8007930:	601a      	str	r2, [r3, #0]
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	f383 8811 	msr	BASEPRI, r3
}
 800793c:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800793e:	bf00      	nop
 8007940:	3728      	adds	r7, #40	@ 0x28
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	20000710 	.word	0x20000710
 800794c:	200006f0 	.word	0x200006f0
 8007950:	200005ec 	.word	0x200005ec
 8007954:	200006a8 	.word	0x200006a8
 8007958:	200005e8 	.word	0x200005e8
 800795c:	200006fc 	.word	0x200006fc

08007960 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800796a:	4b29      	ldr	r3, [pc, #164]	@ (8007a10 <prvAddCurrentTaskToDelayedList+0xb0>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007970:	4b28      	ldr	r3, [pc, #160]	@ (8007a14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3304      	adds	r3, #4
 8007976:	4618      	mov	r0, r3
 8007978:	f7fe f9af 	bl	8005cda <uxListRemove>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10b      	bne.n	800799a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007982:	4b24      	ldr	r3, [pc, #144]	@ (8007a14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007988:	2201      	movs	r2, #1
 800798a:	fa02 f303 	lsl.w	r3, r2, r3
 800798e:	43da      	mvns	r2, r3
 8007990:	4b21      	ldr	r3, [pc, #132]	@ (8007a18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4013      	ands	r3, r2
 8007996:	4a20      	ldr	r2, [pc, #128]	@ (8007a18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007998:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a0:	d10a      	bne.n	80079b8 <prvAddCurrentTaskToDelayedList+0x58>
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d007      	beq.n	80079b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079a8:	4b1a      	ldr	r3, [pc, #104]	@ (8007a14 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3304      	adds	r3, #4
 80079ae:	4619      	mov	r1, r3
 80079b0:	481a      	ldr	r0, [pc, #104]	@ (8007a1c <prvAddCurrentTaskToDelayedList+0xbc>)
 80079b2:	f7fe f935 	bl	8005c20 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079b6:	e026      	b.n	8007a06 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4413      	add	r3, r2
 80079be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079c0:	4b14      	ldr	r3, [pc, #80]	@ (8007a14 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d209      	bcs.n	80079e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079d0:	4b13      	ldr	r3, [pc, #76]	@ (8007a20 <prvAddCurrentTaskToDelayedList+0xc0>)
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007a14 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3304      	adds	r3, #4
 80079da:	4619      	mov	r1, r3
 80079dc:	4610      	mov	r0, r2
 80079de:	f7fe f943 	bl	8005c68 <vListInsert>
}
 80079e2:	e010      	b.n	8007a06 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007a24 <prvAddCurrentTaskToDelayedList+0xc4>)
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007a14 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3304      	adds	r3, #4
 80079ee:	4619      	mov	r1, r3
 80079f0:	4610      	mov	r0, r2
 80079f2:	f7fe f939 	bl	8005c68 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80079f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007a28 <prvAddCurrentTaskToDelayedList+0xc8>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d202      	bcs.n	8007a06 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007a00:	4a09      	ldr	r2, [pc, #36]	@ (8007a28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	6013      	str	r3, [r2, #0]
}
 8007a06:	bf00      	nop
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	200006ec 	.word	0x200006ec
 8007a14:	200005e8 	.word	0x200005e8
 8007a18:	200006f0 	.word	0x200006f0
 8007a1c:	200006d4 	.word	0x200006d4
 8007a20:	200006a4 	.word	0x200006a4
 8007a24:	200006a0 	.word	0x200006a0
 8007a28:	20000708 	.word	0x20000708

08007a2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	3b04      	subs	r3, #4
 8007a3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007a44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	3b04      	subs	r3, #4
 8007a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f023 0201 	bic.w	r2, r3, #1
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	3b04      	subs	r3, #4
 8007a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a5c:	4a0c      	ldr	r2, [pc, #48]	@ (8007a90 <pxPortInitialiseStack+0x64>)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	3b14      	subs	r3, #20
 8007a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3b04      	subs	r3, #4
 8007a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f06f 0202 	mvn.w	r2, #2
 8007a7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	3b20      	subs	r3, #32
 8007a80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a82:	68fb      	ldr	r3, [r7, #12]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	08007a95 	.word	0x08007a95

08007a94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a9e:	4b13      	ldr	r3, [pc, #76]	@ (8007aec <prvTaskExitError+0x58>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa6:	d00b      	beq.n	8007ac0 <prvTaskExitError+0x2c>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	60fb      	str	r3, [r7, #12]
}
 8007aba:	bf00      	nop
 8007abc:	bf00      	nop
 8007abe:	e7fd      	b.n	8007abc <prvTaskExitError+0x28>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	60bb      	str	r3, [r7, #8]
}
 8007ad2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ad4:	bf00      	nop
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d0fc      	beq.n	8007ad6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007adc:	bf00      	nop
 8007ade:	bf00      	nop
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	200000a0 	.word	0x200000a0

08007af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007af0:	4b07      	ldr	r3, [pc, #28]	@ (8007b10 <pxCurrentTCBConst2>)
 8007af2:	6819      	ldr	r1, [r3, #0]
 8007af4:	6808      	ldr	r0, [r1, #0]
 8007af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007afa:	f380 8809 	msr	PSP, r0
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f04f 0000 	mov.w	r0, #0
 8007b06:	f380 8811 	msr	BASEPRI, r0
 8007b0a:	4770      	bx	lr
 8007b0c:	f3af 8000 	nop.w

08007b10 <pxCurrentTCBConst2>:
 8007b10:	200005e8 	.word	0x200005e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop

08007b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b18:	4808      	ldr	r0, [pc, #32]	@ (8007b3c <prvPortStartFirstTask+0x24>)
 8007b1a:	6800      	ldr	r0, [r0, #0]
 8007b1c:	6800      	ldr	r0, [r0, #0]
 8007b1e:	f380 8808 	msr	MSP, r0
 8007b22:	f04f 0000 	mov.w	r0, #0
 8007b26:	f380 8814 	msr	CONTROL, r0
 8007b2a:	b662      	cpsie	i
 8007b2c:	b661      	cpsie	f
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	df00      	svc	0
 8007b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b3a:	bf00      	nop
 8007b3c:	e000ed08 	.word	0xe000ed08

08007b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b46:	4b47      	ldr	r3, [pc, #284]	@ (8007c64 <xPortStartScheduler+0x124>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a47      	ldr	r2, [pc, #284]	@ (8007c68 <xPortStartScheduler+0x128>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d10b      	bne.n	8007b68 <xPortStartScheduler+0x28>
	__asm volatile
 8007b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	60fb      	str	r3, [r7, #12]
}
 8007b62:	bf00      	nop
 8007b64:	bf00      	nop
 8007b66:	e7fd      	b.n	8007b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b68:	4b3e      	ldr	r3, [pc, #248]	@ (8007c64 <xPortStartScheduler+0x124>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a3f      	ldr	r2, [pc, #252]	@ (8007c6c <xPortStartScheduler+0x12c>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d10b      	bne.n	8007b8a <xPortStartScheduler+0x4a>
	__asm volatile
 8007b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	613b      	str	r3, [r7, #16]
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop
 8007b88:	e7fd      	b.n	8007b86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b8a:	4b39      	ldr	r3, [pc, #228]	@ (8007c70 <xPortStartScheduler+0x130>)
 8007b8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	22ff      	movs	r2, #255	@ 0xff
 8007b9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ba4:	78fb      	ldrb	r3, [r7, #3]
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	4b31      	ldr	r3, [pc, #196]	@ (8007c74 <xPortStartScheduler+0x134>)
 8007bb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bb2:	4b31      	ldr	r3, [pc, #196]	@ (8007c78 <xPortStartScheduler+0x138>)
 8007bb4:	2207      	movs	r2, #7
 8007bb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bb8:	e009      	b.n	8007bce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007bba:	4b2f      	ldr	r3, [pc, #188]	@ (8007c78 <xPortStartScheduler+0x138>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	4a2d      	ldr	r2, [pc, #180]	@ (8007c78 <xPortStartScheduler+0x138>)
 8007bc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007bc4:	78fb      	ldrb	r3, [r7, #3]
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bce:	78fb      	ldrb	r3, [r7, #3]
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bd6:	2b80      	cmp	r3, #128	@ 0x80
 8007bd8:	d0ef      	beq.n	8007bba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007bda:	4b27      	ldr	r3, [pc, #156]	@ (8007c78 <xPortStartScheduler+0x138>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f1c3 0307 	rsb	r3, r3, #7
 8007be2:	2b04      	cmp	r3, #4
 8007be4:	d00b      	beq.n	8007bfe <xPortStartScheduler+0xbe>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	60bb      	str	r3, [r7, #8]
}
 8007bf8:	bf00      	nop
 8007bfa:	bf00      	nop
 8007bfc:	e7fd      	b.n	8007bfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8007c78 <xPortStartScheduler+0x138>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	021b      	lsls	r3, r3, #8
 8007c04:	4a1c      	ldr	r2, [pc, #112]	@ (8007c78 <xPortStartScheduler+0x138>)
 8007c06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c08:	4b1b      	ldr	r3, [pc, #108]	@ (8007c78 <xPortStartScheduler+0x138>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007c10:	4a19      	ldr	r2, [pc, #100]	@ (8007c78 <xPortStartScheduler+0x138>)
 8007c12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c1c:	4b17      	ldr	r3, [pc, #92]	@ (8007c7c <xPortStartScheduler+0x13c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a16      	ldr	r2, [pc, #88]	@ (8007c7c <xPortStartScheduler+0x13c>)
 8007c22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007c26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c28:	4b14      	ldr	r3, [pc, #80]	@ (8007c7c <xPortStartScheduler+0x13c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a13      	ldr	r2, [pc, #76]	@ (8007c7c <xPortStartScheduler+0x13c>)
 8007c2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007c32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c34:	f000 f8da 	bl	8007dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c38:	4b11      	ldr	r3, [pc, #68]	@ (8007c80 <xPortStartScheduler+0x140>)
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c3e:	f000 f8f9 	bl	8007e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c42:	4b10      	ldr	r3, [pc, #64]	@ (8007c84 <xPortStartScheduler+0x144>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a0f      	ldr	r2, [pc, #60]	@ (8007c84 <xPortStartScheduler+0x144>)
 8007c48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007c4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c4e:	f7ff ff63 	bl	8007b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c52:	f7ff f993 	bl	8006f7c <vTaskSwitchContext>
	prvTaskExitError();
 8007c56:	f7ff ff1d 	bl	8007a94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3718      	adds	r7, #24
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	e000ed00 	.word	0xe000ed00
 8007c68:	410fc271 	.word	0x410fc271
 8007c6c:	410fc270 	.word	0x410fc270
 8007c70:	e000e400 	.word	0xe000e400
 8007c74:	20000714 	.word	0x20000714
 8007c78:	20000718 	.word	0x20000718
 8007c7c:	e000ed20 	.word	0xe000ed20
 8007c80:	200000a0 	.word	0x200000a0
 8007c84:	e000ef34 	.word	0xe000ef34

08007c88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	607b      	str	r3, [r7, #4]
}
 8007ca0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ca2:	4b10      	ldr	r3, [pc, #64]	@ (8007ce4 <vPortEnterCritical+0x5c>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	4a0e      	ldr	r2, [pc, #56]	@ (8007ce4 <vPortEnterCritical+0x5c>)
 8007caa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007cac:	4b0d      	ldr	r3, [pc, #52]	@ (8007ce4 <vPortEnterCritical+0x5c>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d110      	bne.n	8007cd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce8 <vPortEnterCritical+0x60>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00b      	beq.n	8007cd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	603b      	str	r3, [r7, #0]
}
 8007cd0:	bf00      	nop
 8007cd2:	bf00      	nop
 8007cd4:	e7fd      	b.n	8007cd2 <vPortEnterCritical+0x4a>
	}
}
 8007cd6:	bf00      	nop
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	200000a0 	.word	0x200000a0
 8007ce8:	e000ed04 	.word	0xe000ed04

08007cec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007cf2:	4b12      	ldr	r3, [pc, #72]	@ (8007d3c <vPortExitCritical+0x50>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10b      	bne.n	8007d12 <vPortExitCritical+0x26>
	__asm volatile
 8007cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	607b      	str	r3, [r7, #4]
}
 8007d0c:	bf00      	nop
 8007d0e:	bf00      	nop
 8007d10:	e7fd      	b.n	8007d0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d12:	4b0a      	ldr	r3, [pc, #40]	@ (8007d3c <vPortExitCritical+0x50>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	4a08      	ldr	r2, [pc, #32]	@ (8007d3c <vPortExitCritical+0x50>)
 8007d1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d1c:	4b07      	ldr	r3, [pc, #28]	@ (8007d3c <vPortExitCritical+0x50>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d105      	bne.n	8007d30 <vPortExitCritical+0x44>
 8007d24:	2300      	movs	r3, #0
 8007d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	f383 8811 	msr	BASEPRI, r3
}
 8007d2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	200000a0 	.word	0x200000a0

08007d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d40:	f3ef 8009 	mrs	r0, PSP
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	4b15      	ldr	r3, [pc, #84]	@ (8007da0 <pxCurrentTCBConst>)
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	f01e 0f10 	tst.w	lr, #16
 8007d50:	bf08      	it	eq
 8007d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d5a:	6010      	str	r0, [r2, #0]
 8007d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007d64:	f380 8811 	msr	BASEPRI, r0
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f7ff f904 	bl	8006f7c <vTaskSwitchContext>
 8007d74:	f04f 0000 	mov.w	r0, #0
 8007d78:	f380 8811 	msr	BASEPRI, r0
 8007d7c:	bc09      	pop	{r0, r3}
 8007d7e:	6819      	ldr	r1, [r3, #0]
 8007d80:	6808      	ldr	r0, [r1, #0]
 8007d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d86:	f01e 0f10 	tst.w	lr, #16
 8007d8a:	bf08      	it	eq
 8007d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d90:	f380 8809 	msr	PSP, r0
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	f3af 8000 	nop.w

08007da0 <pxCurrentTCBConst>:
 8007da0:	200005e8 	.word	0x200005e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007da4:	bf00      	nop
 8007da6:	bf00      	nop

08007da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
	__asm volatile
 8007dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	607b      	str	r3, [r7, #4]
}
 8007dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007dc2:	f7ff f821 	bl	8006e08 <xTaskIncrementTick>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d003      	beq.n	8007dd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007dcc:	4b06      	ldr	r3, [pc, #24]	@ (8007de8 <SysTick_Handler+0x40>)
 8007dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	f383 8811 	msr	BASEPRI, r3
}
 8007dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007de0:	bf00      	nop
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	e000ed04 	.word	0xe000ed04

08007dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007dec:	b480      	push	{r7}
 8007dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007df0:	4b0b      	ldr	r3, [pc, #44]	@ (8007e20 <vPortSetupTimerInterrupt+0x34>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007df6:	4b0b      	ldr	r3, [pc, #44]	@ (8007e24 <vPortSetupTimerInterrupt+0x38>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8007e28 <vPortSetupTimerInterrupt+0x3c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a0a      	ldr	r2, [pc, #40]	@ (8007e2c <vPortSetupTimerInterrupt+0x40>)
 8007e02:	fba2 2303 	umull	r2, r3, r2, r3
 8007e06:	099b      	lsrs	r3, r3, #6
 8007e08:	4a09      	ldr	r2, [pc, #36]	@ (8007e30 <vPortSetupTimerInterrupt+0x44>)
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e0e:	4b04      	ldr	r3, [pc, #16]	@ (8007e20 <vPortSetupTimerInterrupt+0x34>)
 8007e10:	2207      	movs	r2, #7
 8007e12:	601a      	str	r2, [r3, #0]
}
 8007e14:	bf00      	nop
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	e000e010 	.word	0xe000e010
 8007e24:	e000e018 	.word	0xe000e018
 8007e28:	20000094 	.word	0x20000094
 8007e2c:	10624dd3 	.word	0x10624dd3
 8007e30:	e000e014 	.word	0xe000e014

08007e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007e44 <vPortEnableVFP+0x10>
 8007e38:	6801      	ldr	r1, [r0, #0]
 8007e3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007e3e:	6001      	str	r1, [r0, #0]
 8007e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e42:	bf00      	nop
 8007e44:	e000ed88 	.word	0xe000ed88

08007e48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e4e:	f3ef 8305 	mrs	r3, IPSR
 8007e52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2b0f      	cmp	r3, #15
 8007e58:	d915      	bls.n	8007e86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e5a:	4a18      	ldr	r2, [pc, #96]	@ (8007ebc <vPortValidateInterruptPriority+0x74>)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	4413      	add	r3, r2
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e64:	4b16      	ldr	r3, [pc, #88]	@ (8007ec0 <vPortValidateInterruptPriority+0x78>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	7afa      	ldrb	r2, [r7, #11]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d20b      	bcs.n	8007e86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	607b      	str	r3, [r7, #4]
}
 8007e80:	bf00      	nop
 8007e82:	bf00      	nop
 8007e84:	e7fd      	b.n	8007e82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e86:	4b0f      	ldr	r3, [pc, #60]	@ (8007ec4 <vPortValidateInterruptPriority+0x7c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ec8 <vPortValidateInterruptPriority+0x80>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d90b      	bls.n	8007eae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e9a:	f383 8811 	msr	BASEPRI, r3
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	603b      	str	r3, [r7, #0]
}
 8007ea8:	bf00      	nop
 8007eaa:	bf00      	nop
 8007eac:	e7fd      	b.n	8007eaa <vPortValidateInterruptPriority+0x62>
	}
 8007eae:	bf00      	nop
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	e000e3f0 	.word	0xe000e3f0
 8007ec0:	20000714 	.word	0x20000714
 8007ec4:	e000ed0c 	.word	0xe000ed0c
 8007ec8:	20000718 	.word	0x20000718

08007ecc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b08a      	sub	sp, #40	@ 0x28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ed8:	f7fe feea 	bl	8006cb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007edc:	4b5c      	ldr	r3, [pc, #368]	@ (8008050 <pvPortMalloc+0x184>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ee4:	f000 f924 	bl	8008130 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ee8:	4b5a      	ldr	r3, [pc, #360]	@ (8008054 <pvPortMalloc+0x188>)
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4013      	ands	r3, r2
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f040 8095 	bne.w	8008020 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d01e      	beq.n	8007f3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007efc:	2208      	movs	r2, #8
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4413      	add	r3, r2
 8007f02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f003 0307 	and.w	r3, r3, #7
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d015      	beq.n	8007f3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f023 0307 	bic.w	r3, r3, #7
 8007f14:	3308      	adds	r3, #8
 8007f16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f003 0307 	and.w	r3, r3, #7
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00b      	beq.n	8007f3a <pvPortMalloc+0x6e>
	__asm volatile
 8007f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	617b      	str	r3, [r7, #20]
}
 8007f34:	bf00      	nop
 8007f36:	bf00      	nop
 8007f38:	e7fd      	b.n	8007f36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d06f      	beq.n	8008020 <pvPortMalloc+0x154>
 8007f40:	4b45      	ldr	r3, [pc, #276]	@ (8008058 <pvPortMalloc+0x18c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d86a      	bhi.n	8008020 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f4a:	4b44      	ldr	r3, [pc, #272]	@ (800805c <pvPortMalloc+0x190>)
 8007f4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f4e:	4b43      	ldr	r3, [pc, #268]	@ (800805c <pvPortMalloc+0x190>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f54:	e004      	b.n	8007f60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d903      	bls.n	8007f72 <pvPortMalloc+0xa6>
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1f1      	bne.n	8007f56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f72:	4b37      	ldr	r3, [pc, #220]	@ (8008050 <pvPortMalloc+0x184>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d051      	beq.n	8008020 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f7c:	6a3b      	ldr	r3, [r7, #32]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2208      	movs	r2, #8
 8007f82:	4413      	add	r3, r2
 8007f84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	1ad2      	subs	r2, r2, r3
 8007f96:	2308      	movs	r3, #8
 8007f98:	005b      	lsls	r3, r3, #1
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d920      	bls.n	8007fe0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	f003 0307 	and.w	r3, r3, #7
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00b      	beq.n	8007fc8 <pvPortMalloc+0xfc>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	613b      	str	r3, [r7, #16]
}
 8007fc2:	bf00      	nop
 8007fc4:	bf00      	nop
 8007fc6:	e7fd      	b.n	8007fc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	1ad2      	subs	r2, r2, r3
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007fda:	69b8      	ldr	r0, [r7, #24]
 8007fdc:	f000 f90a 	bl	80081f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8008058 <pvPortMalloc+0x18c>)
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	4a1b      	ldr	r2, [pc, #108]	@ (8008058 <pvPortMalloc+0x18c>)
 8007fec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007fee:	4b1a      	ldr	r3, [pc, #104]	@ (8008058 <pvPortMalloc+0x18c>)
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8008060 <pvPortMalloc+0x194>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d203      	bcs.n	8008002 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ffa:	4b17      	ldr	r3, [pc, #92]	@ (8008058 <pvPortMalloc+0x18c>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a18      	ldr	r2, [pc, #96]	@ (8008060 <pvPortMalloc+0x194>)
 8008000:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	4b13      	ldr	r3, [pc, #76]	@ (8008054 <pvPortMalloc+0x188>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	431a      	orrs	r2, r3
 800800c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008012:	2200      	movs	r2, #0
 8008014:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008016:	4b13      	ldr	r3, [pc, #76]	@ (8008064 <pvPortMalloc+0x198>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3301      	adds	r3, #1
 800801c:	4a11      	ldr	r2, [pc, #68]	@ (8008064 <pvPortMalloc+0x198>)
 800801e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008020:	f7fe fe54 	bl	8006ccc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	f003 0307 	and.w	r3, r3, #7
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00b      	beq.n	8008046 <pvPortMalloc+0x17a>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	60fb      	str	r3, [r7, #12]
}
 8008040:	bf00      	nop
 8008042:	bf00      	nop
 8008044:	e7fd      	b.n	8008042 <pvPortMalloc+0x176>
	return pvReturn;
 8008046:	69fb      	ldr	r3, [r7, #28]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3728      	adds	r7, #40	@ 0x28
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	20004324 	.word	0x20004324
 8008054:	20004338 	.word	0x20004338
 8008058:	20004328 	.word	0x20004328
 800805c:	2000431c 	.word	0x2000431c
 8008060:	2000432c 	.word	0x2000432c
 8008064:	20004330 	.word	0x20004330

08008068 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b086      	sub	sp, #24
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d04f      	beq.n	800811a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800807a:	2308      	movs	r3, #8
 800807c:	425b      	negs	r3, r3
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	4413      	add	r3, r2
 8008082:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	4b25      	ldr	r3, [pc, #148]	@ (8008124 <vPortFree+0xbc>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4013      	ands	r3, r2
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10b      	bne.n	80080ae <vPortFree+0x46>
	__asm volatile
 8008096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	60fb      	str	r3, [r7, #12]
}
 80080a8:	bf00      	nop
 80080aa:	bf00      	nop
 80080ac:	e7fd      	b.n	80080aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00b      	beq.n	80080ce <vPortFree+0x66>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	60bb      	str	r3, [r7, #8]
}
 80080c8:	bf00      	nop
 80080ca:	bf00      	nop
 80080cc:	e7fd      	b.n	80080ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	685a      	ldr	r2, [r3, #4]
 80080d2:	4b14      	ldr	r3, [pc, #80]	@ (8008124 <vPortFree+0xbc>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4013      	ands	r3, r2
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d01e      	beq.n	800811a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d11a      	bne.n	800811a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	685a      	ldr	r2, [r3, #4]
 80080e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008124 <vPortFree+0xbc>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	43db      	mvns	r3, r3
 80080ee:	401a      	ands	r2, r3
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80080f4:	f7fe fddc 	bl	8006cb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008128 <vPortFree+0xc0>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4413      	add	r3, r2
 8008102:	4a09      	ldr	r2, [pc, #36]	@ (8008128 <vPortFree+0xc0>)
 8008104:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008106:	6938      	ldr	r0, [r7, #16]
 8008108:	f000 f874 	bl	80081f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800810c:	4b07      	ldr	r3, [pc, #28]	@ (800812c <vPortFree+0xc4>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3301      	adds	r3, #1
 8008112:	4a06      	ldr	r2, [pc, #24]	@ (800812c <vPortFree+0xc4>)
 8008114:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008116:	f7fe fdd9 	bl	8006ccc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800811a:	bf00      	nop
 800811c:	3718      	adds	r7, #24
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	20004338 	.word	0x20004338
 8008128:	20004328 	.word	0x20004328
 800812c:	20004334 	.word	0x20004334

08008130 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008136:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800813a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800813c:	4b27      	ldr	r3, [pc, #156]	@ (80081dc <prvHeapInit+0xac>)
 800813e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f003 0307 	and.w	r3, r3, #7
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00c      	beq.n	8008164 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	3307      	adds	r3, #7
 800814e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f023 0307 	bic.w	r3, r3, #7
 8008156:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	4a1f      	ldr	r2, [pc, #124]	@ (80081dc <prvHeapInit+0xac>)
 8008160:	4413      	add	r3, r2
 8008162:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008168:	4a1d      	ldr	r2, [pc, #116]	@ (80081e0 <prvHeapInit+0xb0>)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800816e:	4b1c      	ldr	r3, [pc, #112]	@ (80081e0 <prvHeapInit+0xb0>)
 8008170:	2200      	movs	r2, #0
 8008172:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	4413      	add	r3, r2
 800817a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800817c:	2208      	movs	r2, #8
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	1a9b      	subs	r3, r3, r2
 8008182:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f023 0307 	bic.w	r3, r3, #7
 800818a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4a15      	ldr	r2, [pc, #84]	@ (80081e4 <prvHeapInit+0xb4>)
 8008190:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008192:	4b14      	ldr	r3, [pc, #80]	@ (80081e4 <prvHeapInit+0xb4>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2200      	movs	r2, #0
 8008198:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800819a:	4b12      	ldr	r3, [pc, #72]	@ (80081e4 <prvHeapInit+0xb4>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2200      	movs	r2, #0
 80081a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	1ad2      	subs	r2, r2, r3
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081b0:	4b0c      	ldr	r3, [pc, #48]	@ (80081e4 <prvHeapInit+0xb4>)
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	4a0a      	ldr	r2, [pc, #40]	@ (80081e8 <prvHeapInit+0xb8>)
 80081be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	4a09      	ldr	r2, [pc, #36]	@ (80081ec <prvHeapInit+0xbc>)
 80081c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081c8:	4b09      	ldr	r3, [pc, #36]	@ (80081f0 <prvHeapInit+0xc0>)
 80081ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80081ce:	601a      	str	r2, [r3, #0]
}
 80081d0:	bf00      	nop
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	2000071c 	.word	0x2000071c
 80081e0:	2000431c 	.word	0x2000431c
 80081e4:	20004324 	.word	0x20004324
 80081e8:	2000432c 	.word	0x2000432c
 80081ec:	20004328 	.word	0x20004328
 80081f0:	20004338 	.word	0x20004338

080081f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80081fc:	4b28      	ldr	r3, [pc, #160]	@ (80082a0 <prvInsertBlockIntoFreeList+0xac>)
 80081fe:	60fb      	str	r3, [r7, #12]
 8008200:	e002      	b.n	8008208 <prvInsertBlockIntoFreeList+0x14>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	429a      	cmp	r2, r3
 8008210:	d8f7      	bhi.n	8008202 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	4413      	add	r3, r2
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	429a      	cmp	r2, r3
 8008222:	d108      	bne.n	8008236 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	685a      	ldr	r2, [r3, #4]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	441a      	add	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	441a      	add	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	429a      	cmp	r2, r3
 8008248:	d118      	bne.n	800827c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	4b15      	ldr	r3, [pc, #84]	@ (80082a4 <prvInsertBlockIntoFreeList+0xb0>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	429a      	cmp	r2, r3
 8008254:	d00d      	beq.n	8008272 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	441a      	add	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	e008      	b.n	8008284 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008272:	4b0c      	ldr	r3, [pc, #48]	@ (80082a4 <prvInsertBlockIntoFreeList+0xb0>)
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	e003      	b.n	8008284 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	429a      	cmp	r2, r3
 800828a:	d002      	beq.n	8008292 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008292:	bf00      	nop
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	2000431c 	.word	0x2000431c
 80082a4:	20004324 	.word	0x20004324

080082a8 <memset>:
 80082a8:	4402      	add	r2, r0
 80082aa:	4603      	mov	r3, r0
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d100      	bne.n	80082b2 <memset+0xa>
 80082b0:	4770      	bx	lr
 80082b2:	f803 1b01 	strb.w	r1, [r3], #1
 80082b6:	e7f9      	b.n	80082ac <memset+0x4>

080082b8 <_reclaim_reent>:
 80082b8:	4b2d      	ldr	r3, [pc, #180]	@ (8008370 <_reclaim_reent+0xb8>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4283      	cmp	r3, r0
 80082be:	b570      	push	{r4, r5, r6, lr}
 80082c0:	4604      	mov	r4, r0
 80082c2:	d053      	beq.n	800836c <_reclaim_reent+0xb4>
 80082c4:	69c3      	ldr	r3, [r0, #28]
 80082c6:	b31b      	cbz	r3, 8008310 <_reclaim_reent+0x58>
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	b163      	cbz	r3, 80082e6 <_reclaim_reent+0x2e>
 80082cc:	2500      	movs	r5, #0
 80082ce:	69e3      	ldr	r3, [r4, #28]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	5959      	ldr	r1, [r3, r5]
 80082d4:	b9b1      	cbnz	r1, 8008304 <_reclaim_reent+0x4c>
 80082d6:	3504      	adds	r5, #4
 80082d8:	2d80      	cmp	r5, #128	@ 0x80
 80082da:	d1f8      	bne.n	80082ce <_reclaim_reent+0x16>
 80082dc:	69e3      	ldr	r3, [r4, #28]
 80082de:	4620      	mov	r0, r4
 80082e0:	68d9      	ldr	r1, [r3, #12]
 80082e2:	f000 f87b 	bl	80083dc <_free_r>
 80082e6:	69e3      	ldr	r3, [r4, #28]
 80082e8:	6819      	ldr	r1, [r3, #0]
 80082ea:	b111      	cbz	r1, 80082f2 <_reclaim_reent+0x3a>
 80082ec:	4620      	mov	r0, r4
 80082ee:	f000 f875 	bl	80083dc <_free_r>
 80082f2:	69e3      	ldr	r3, [r4, #28]
 80082f4:	689d      	ldr	r5, [r3, #8]
 80082f6:	b15d      	cbz	r5, 8008310 <_reclaim_reent+0x58>
 80082f8:	4629      	mov	r1, r5
 80082fa:	4620      	mov	r0, r4
 80082fc:	682d      	ldr	r5, [r5, #0]
 80082fe:	f000 f86d 	bl	80083dc <_free_r>
 8008302:	e7f8      	b.n	80082f6 <_reclaim_reent+0x3e>
 8008304:	680e      	ldr	r6, [r1, #0]
 8008306:	4620      	mov	r0, r4
 8008308:	f000 f868 	bl	80083dc <_free_r>
 800830c:	4631      	mov	r1, r6
 800830e:	e7e1      	b.n	80082d4 <_reclaim_reent+0x1c>
 8008310:	6961      	ldr	r1, [r4, #20]
 8008312:	b111      	cbz	r1, 800831a <_reclaim_reent+0x62>
 8008314:	4620      	mov	r0, r4
 8008316:	f000 f861 	bl	80083dc <_free_r>
 800831a:	69e1      	ldr	r1, [r4, #28]
 800831c:	b111      	cbz	r1, 8008324 <_reclaim_reent+0x6c>
 800831e:	4620      	mov	r0, r4
 8008320:	f000 f85c 	bl	80083dc <_free_r>
 8008324:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008326:	b111      	cbz	r1, 800832e <_reclaim_reent+0x76>
 8008328:	4620      	mov	r0, r4
 800832a:	f000 f857 	bl	80083dc <_free_r>
 800832e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008330:	b111      	cbz	r1, 8008338 <_reclaim_reent+0x80>
 8008332:	4620      	mov	r0, r4
 8008334:	f000 f852 	bl	80083dc <_free_r>
 8008338:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800833a:	b111      	cbz	r1, 8008342 <_reclaim_reent+0x8a>
 800833c:	4620      	mov	r0, r4
 800833e:	f000 f84d 	bl	80083dc <_free_r>
 8008342:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008344:	b111      	cbz	r1, 800834c <_reclaim_reent+0x94>
 8008346:	4620      	mov	r0, r4
 8008348:	f000 f848 	bl	80083dc <_free_r>
 800834c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800834e:	b111      	cbz	r1, 8008356 <_reclaim_reent+0x9e>
 8008350:	4620      	mov	r0, r4
 8008352:	f000 f843 	bl	80083dc <_free_r>
 8008356:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008358:	b111      	cbz	r1, 8008360 <_reclaim_reent+0xa8>
 800835a:	4620      	mov	r0, r4
 800835c:	f000 f83e 	bl	80083dc <_free_r>
 8008360:	6a23      	ldr	r3, [r4, #32]
 8008362:	b11b      	cbz	r3, 800836c <_reclaim_reent+0xb4>
 8008364:	4620      	mov	r0, r4
 8008366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800836a:	4718      	bx	r3
 800836c:	bd70      	pop	{r4, r5, r6, pc}
 800836e:	bf00      	nop
 8008370:	200000a4 	.word	0x200000a4

08008374 <__libc_init_array>:
 8008374:	b570      	push	{r4, r5, r6, lr}
 8008376:	4d0d      	ldr	r5, [pc, #52]	@ (80083ac <__libc_init_array+0x38>)
 8008378:	4c0d      	ldr	r4, [pc, #52]	@ (80083b0 <__libc_init_array+0x3c>)
 800837a:	1b64      	subs	r4, r4, r5
 800837c:	10a4      	asrs	r4, r4, #2
 800837e:	2600      	movs	r6, #0
 8008380:	42a6      	cmp	r6, r4
 8008382:	d109      	bne.n	8008398 <__libc_init_array+0x24>
 8008384:	4d0b      	ldr	r5, [pc, #44]	@ (80083b4 <__libc_init_array+0x40>)
 8008386:	4c0c      	ldr	r4, [pc, #48]	@ (80083b8 <__libc_init_array+0x44>)
 8008388:	f000 f87e 	bl	8008488 <_init>
 800838c:	1b64      	subs	r4, r4, r5
 800838e:	10a4      	asrs	r4, r4, #2
 8008390:	2600      	movs	r6, #0
 8008392:	42a6      	cmp	r6, r4
 8008394:	d105      	bne.n	80083a2 <__libc_init_array+0x2e>
 8008396:	bd70      	pop	{r4, r5, r6, pc}
 8008398:	f855 3b04 	ldr.w	r3, [r5], #4
 800839c:	4798      	blx	r3
 800839e:	3601      	adds	r6, #1
 80083a0:	e7ee      	b.n	8008380 <__libc_init_array+0xc>
 80083a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a6:	4798      	blx	r3
 80083a8:	3601      	adds	r6, #1
 80083aa:	e7f2      	b.n	8008392 <__libc_init_array+0x1e>
 80083ac:	08008634 	.word	0x08008634
 80083b0:	08008634 	.word	0x08008634
 80083b4:	08008634 	.word	0x08008634
 80083b8:	08008638 	.word	0x08008638

080083bc <__retarget_lock_acquire_recursive>:
 80083bc:	4770      	bx	lr

080083be <__retarget_lock_release_recursive>:
 80083be:	4770      	bx	lr

080083c0 <memcpy>:
 80083c0:	440a      	add	r2, r1
 80083c2:	4291      	cmp	r1, r2
 80083c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083c8:	d100      	bne.n	80083cc <memcpy+0xc>
 80083ca:	4770      	bx	lr
 80083cc:	b510      	push	{r4, lr}
 80083ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083d6:	4291      	cmp	r1, r2
 80083d8:	d1f9      	bne.n	80083ce <memcpy+0xe>
 80083da:	bd10      	pop	{r4, pc}

080083dc <_free_r>:
 80083dc:	b538      	push	{r3, r4, r5, lr}
 80083de:	4605      	mov	r5, r0
 80083e0:	2900      	cmp	r1, #0
 80083e2:	d041      	beq.n	8008468 <_free_r+0x8c>
 80083e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083e8:	1f0c      	subs	r4, r1, #4
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	bfb8      	it	lt
 80083ee:	18e4      	addlt	r4, r4, r3
 80083f0:	f000 f83e 	bl	8008470 <__malloc_lock>
 80083f4:	4a1d      	ldr	r2, [pc, #116]	@ (800846c <_free_r+0x90>)
 80083f6:	6813      	ldr	r3, [r2, #0]
 80083f8:	b933      	cbnz	r3, 8008408 <_free_r+0x2c>
 80083fa:	6063      	str	r3, [r4, #4]
 80083fc:	6014      	str	r4, [r2, #0]
 80083fe:	4628      	mov	r0, r5
 8008400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008404:	f000 b83a 	b.w	800847c <__malloc_unlock>
 8008408:	42a3      	cmp	r3, r4
 800840a:	d908      	bls.n	800841e <_free_r+0x42>
 800840c:	6820      	ldr	r0, [r4, #0]
 800840e:	1821      	adds	r1, r4, r0
 8008410:	428b      	cmp	r3, r1
 8008412:	bf01      	itttt	eq
 8008414:	6819      	ldreq	r1, [r3, #0]
 8008416:	685b      	ldreq	r3, [r3, #4]
 8008418:	1809      	addeq	r1, r1, r0
 800841a:	6021      	streq	r1, [r4, #0]
 800841c:	e7ed      	b.n	80083fa <_free_r+0x1e>
 800841e:	461a      	mov	r2, r3
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	b10b      	cbz	r3, 8008428 <_free_r+0x4c>
 8008424:	42a3      	cmp	r3, r4
 8008426:	d9fa      	bls.n	800841e <_free_r+0x42>
 8008428:	6811      	ldr	r1, [r2, #0]
 800842a:	1850      	adds	r0, r2, r1
 800842c:	42a0      	cmp	r0, r4
 800842e:	d10b      	bne.n	8008448 <_free_r+0x6c>
 8008430:	6820      	ldr	r0, [r4, #0]
 8008432:	4401      	add	r1, r0
 8008434:	1850      	adds	r0, r2, r1
 8008436:	4283      	cmp	r3, r0
 8008438:	6011      	str	r1, [r2, #0]
 800843a:	d1e0      	bne.n	80083fe <_free_r+0x22>
 800843c:	6818      	ldr	r0, [r3, #0]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	6053      	str	r3, [r2, #4]
 8008442:	4408      	add	r0, r1
 8008444:	6010      	str	r0, [r2, #0]
 8008446:	e7da      	b.n	80083fe <_free_r+0x22>
 8008448:	d902      	bls.n	8008450 <_free_r+0x74>
 800844a:	230c      	movs	r3, #12
 800844c:	602b      	str	r3, [r5, #0]
 800844e:	e7d6      	b.n	80083fe <_free_r+0x22>
 8008450:	6820      	ldr	r0, [r4, #0]
 8008452:	1821      	adds	r1, r4, r0
 8008454:	428b      	cmp	r3, r1
 8008456:	bf04      	itt	eq
 8008458:	6819      	ldreq	r1, [r3, #0]
 800845a:	685b      	ldreq	r3, [r3, #4]
 800845c:	6063      	str	r3, [r4, #4]
 800845e:	bf04      	itt	eq
 8008460:	1809      	addeq	r1, r1, r0
 8008462:	6021      	streq	r1, [r4, #0]
 8008464:	6054      	str	r4, [r2, #4]
 8008466:	e7ca      	b.n	80083fe <_free_r+0x22>
 8008468:	bd38      	pop	{r3, r4, r5, pc}
 800846a:	bf00      	nop
 800846c:	20004478 	.word	0x20004478

08008470 <__malloc_lock>:
 8008470:	4801      	ldr	r0, [pc, #4]	@ (8008478 <__malloc_lock+0x8>)
 8008472:	f7ff bfa3 	b.w	80083bc <__retarget_lock_acquire_recursive>
 8008476:	bf00      	nop
 8008478:	20004474 	.word	0x20004474

0800847c <__malloc_unlock>:
 800847c:	4801      	ldr	r0, [pc, #4]	@ (8008484 <__malloc_unlock+0x8>)
 800847e:	f7ff bf9e 	b.w	80083be <__retarget_lock_release_recursive>
 8008482:	bf00      	nop
 8008484:	20004474 	.word	0x20004474

08008488 <_init>:
 8008488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848a:	bf00      	nop
 800848c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800848e:	bc08      	pop	{r3}
 8008490:	469e      	mov	lr, r3
 8008492:	4770      	bx	lr

08008494 <_fini>:
 8008494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008496:	bf00      	nop
 8008498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800849a:	bc08      	pop	{r3}
 800849c:	469e      	mov	lr, r3
 800849e:	4770      	bx	lr
