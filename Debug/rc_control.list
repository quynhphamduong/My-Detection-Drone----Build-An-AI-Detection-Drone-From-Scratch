
rc_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089dc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08008b7c  08008b7c  00009b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d40  08008d40  0000a12c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008d40  08008d40  00009d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d48  08008d48  0000a12c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d48  08008d48  00009d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d4c  08008d4c  00009d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000012c  20000000  08008d50  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043ec  2000012c  08008e7c  0000a12c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004518  08008e7c  0000a518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aff0  00000000  00000000  0000a15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004097  00000000  00000000  0002514c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c0  00000000  00000000  000291e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000132b  00000000  00000000  0002aaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1d6  00000000  00000000  0002bdd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d460  00000000  00000000  00046fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6273  00000000  00000000  00064409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a67c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ccc  00000000  00000000  0010a6c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0011138c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000012c 	.word	0x2000012c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008b64 	.word	0x08008b64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000130 	.word	0x20000130
 80001dc:	08008b64 	.word	0x08008b64

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	@ (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	@ 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000148 	.word	0x20000148
 80005ec:	200001e8 	.word	0x200001e8

080005f0 <render_menu>:
gpsSettingsValue gpsSettings;
uint8_t cursor = 0;
uint8_t buzzer_state = 0; // OFF

void render_menu(I2C_HandleTypeDef *hi2c)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    lcd_clear(hi2c);
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 fade 	bl	8000bba <lcd_clear>

    for (int i = 0; i < currentMenu->item_count; i++)
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	e049      	b.n	8000698 <render_menu+0xa8>
    {
        uint8_t line;
        if (currentMenu == &mainMenu)
 8000604:	4b36      	ldr	r3, [pc, #216]	@ (80006e0 <render_menu+0xf0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a36      	ldr	r2, [pc, #216]	@ (80006e4 <render_menu+0xf4>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d10b      	bne.n	8000626 <render_menu+0x36>
        {
            if (i == 0)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d102      	bne.n	800061a <render_menu+0x2a>
            {
                line = LINE3;
 8000614:	2394      	movs	r3, #148	@ 0x94
 8000616:	72fb      	strb	r3, [r7, #11]
 8000618:	e01c      	b.n	8000654 <render_menu+0x64>
            }
            else if (i == 1)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d119      	bne.n	8000654 <render_menu+0x64>
            {
                line = LINE4;
 8000620:	23d4      	movs	r3, #212	@ 0xd4
 8000622:	72fb      	strb	r3, [r7, #11]
 8000624:	e016      	b.n	8000654 <render_menu+0x64>
            }
        }
        else
        {
            if (i == 0)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d102      	bne.n	8000632 <render_menu+0x42>
            {
                line = LINE1;
 800062c:	2380      	movs	r3, #128	@ 0x80
 800062e:	72fb      	strb	r3, [r7, #11]
 8000630:	e010      	b.n	8000654 <render_menu+0x64>
            }
            else if (i == 1)
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d102      	bne.n	800063e <render_menu+0x4e>
            {
                line = LINE2;
 8000638:	23c0      	movs	r3, #192	@ 0xc0
 800063a:	72fb      	strb	r3, [r7, #11]
 800063c:	e00a      	b.n	8000654 <render_menu+0x64>
            }
            else if (i == 2)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b02      	cmp	r3, #2
 8000642:	d102      	bne.n	800064a <render_menu+0x5a>
            {
                line = LINE3;
 8000644:	2394      	movs	r3, #148	@ 0x94
 8000646:	72fb      	strb	r3, [r7, #11]
 8000648:	e004      	b.n	8000654 <render_menu+0x64>
            }
            else if (i == 3)
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	2b03      	cmp	r3, #3
 800064e:	d101      	bne.n	8000654 <render_menu+0x64>
            {
                line = LINE4;
 8000650:	23d4      	movs	r3, #212	@ 0xd4
 8000652:	72fb      	strb	r3, [r7, #11]
            }
        }

        if (i == cursor)
 8000654:	4b24      	ldr	r3, [pc, #144]	@ (80006e8 <render_menu+0xf8>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	4293      	cmp	r3, r2
 800065e:	d106      	bne.n	800066e <render_menu+0x7e>
        {
            lcd_send_string(hi2c, line, POS0, ">");
 8000660:	7af9      	ldrb	r1, [r7, #11]
 8000662:	4b22      	ldr	r3, [pc, #136]	@ (80006ec <render_menu+0xfc>)
 8000664:	2200      	movs	r2, #0
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f000 fa77 	bl	8000b5a <lcd_send_string>
 800066c:	e005      	b.n	800067a <render_menu+0x8a>
        }
        else
        {
            lcd_send_string(hi2c, line, POS0, " ");
 800066e:	7af9      	ldrb	r1, [r7, #11]
 8000670:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <render_menu+0x100>)
 8000672:	2200      	movs	r2, #0
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f000 fa70 	bl	8000b5a <lcd_send_string>
        }
        lcd_send_string(hi2c, line, POS2, (char *)currentMenu->items[i]);
 800067a:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <render_menu+0xf0>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	685a      	ldr	r2, [r3, #4]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	7af9      	ldrb	r1, [r7, #11]
 800068a:	2202      	movs	r2, #2
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f000 fa64 	bl	8000b5a <lcd_send_string>
    for (int i = 0; i < currentMenu->item_count; i++)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	3301      	adds	r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <render_menu+0xf0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	7a1b      	ldrb	r3, [r3, #8]
 800069e:	461a      	mov	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4293      	cmp	r3, r2
 80006a4:	dbae      	blt.n	8000604 <render_menu+0x14>
    }
    if (currentMenu == &mainMenu)
 80006a6:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <render_menu+0xf0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a0e      	ldr	r2, [pc, #56]	@ (80006e4 <render_menu+0xf4>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d113      	bne.n	80006d8 <render_menu+0xe8>
    {
        lcd_send_string(hi2c, LINE1, POS0, (char *)currentMenu->title);
 80006b0:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <render_menu+0xf0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2200      	movs	r2, #0
 80006b8:	2180      	movs	r1, #128	@ 0x80
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f000 fa4d 	bl	8000b5a <lcd_send_string>
        lcd_send_string(hi2c, LINE1, POS12, "TX:*****");
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <render_menu+0x104>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	2180      	movs	r1, #128	@ 0x80
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 fa47 	bl	8000b5a <lcd_send_string>
        lcd_send_string(hi2c, LINE2, POS12, "RX:*****");
 80006cc:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <render_menu+0x108>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	21c0      	movs	r1, #192	@ 0xc0
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f000 fa41 	bl	8000b5a <lcd_send_string>
    }
}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200003e8 	.word	0x200003e8
 80006e4:	2000001c 	.word	0x2000001c
 80006e8:	200003ec 	.word	0x200003ec
 80006ec:	08008bf0 	.word	0x08008bf0
 80006f0:	08008bf4 	.word	0x08008bf4
 80006f4:	08008bf8 	.word	0x08008bf8
 80006f8:	08008c04 	.word	0x08008c04

080006fc <menu_init>:

void menu_init(I2C_HandleTypeDef *hi2c)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
    currentMenu = &mainMenu;
 8000704:	4b04      	ldr	r3, [pc, #16]	@ (8000718 <menu_init+0x1c>)
 8000706:	4a05      	ldr	r2, [pc, #20]	@ (800071c <menu_init+0x20>)
 8000708:	601a      	str	r2, [r3, #0]
    render_menu(hi2c);
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ff70 	bl	80005f0 <render_menu>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200003e8 	.word	0x200003e8
 800071c:	2000001c 	.word	0x2000001c

08000720 <on_up>:

void on_up(I2C_HandleTypeDef *hi2c)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
    if (cursor > 0)
 8000728:	4b08      	ldr	r3, [pc, #32]	@ (800074c <on_up+0x2c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d005      	beq.n	800073c <on_up+0x1c>
        cursor--;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <on_up+0x2c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	3b01      	subs	r3, #1
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <on_up+0x2c>)
 800073a:	701a      	strb	r2, [r3, #0]
    render_menu(hi2c);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff ff57 	bl	80005f0 <render_menu>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200003ec 	.word	0x200003ec

08000750 <on_down>:

void on_down(I2C_HandleTypeDef *hi2c)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    if (cursor < currentMenu->item_count - 1)
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <on_down+0x34>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <on_down+0x38>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	7a1b      	ldrb	r3, [r3, #8]
 8000764:	3b01      	subs	r3, #1
 8000766:	429a      	cmp	r2, r3
 8000768:	da05      	bge.n	8000776 <on_down+0x26>
        cursor++;
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <on_down+0x34>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b04      	ldr	r3, [pc, #16]	@ (8000784 <on_down+0x34>)
 8000774:	701a      	strb	r2, [r3, #0]
    render_menu(hi2c);
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff ff3a 	bl	80005f0 <render_menu>
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200003ec 	.word	0x200003ec
 8000788:	200003e8 	.word	0x200003e8

0800078c <on_select>:

void on_select(I2C_HandleTypeDef *hi2c)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
    currentMenu->select_callback(hi2c, cursor);
 8000794:	4b05      	ldr	r3, [pc, #20]	@ (80007ac <on_select+0x20>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	4a05      	ldr	r2, [pc, #20]	@ (80007b0 <on_select+0x24>)
 800079c:	7812      	ldrb	r2, [r2, #0]
 800079e:	4611      	mov	r1, r2
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	4798      	blx	r3
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200003e8 	.word	0x200003e8
 80007b0:	200003ec 	.word	0x200003ec

080007b4 <on_back>:

void on_back(I2C_HandleTypeDef *hi2c)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
    if (currentMenu->back_link != NULL)
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <on_back+0x30>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	691b      	ldr	r3, [r3, #16]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00a      	beq.n	80007dc <on_back+0x28>
    {
        currentMenu = currentMenu->back_link;
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <on_back+0x30>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	4a05      	ldr	r2, [pc, #20]	@ (80007e4 <on_back+0x30>)
 80007ce:	6013      	str	r3, [r2, #0]
        cursor = 0;
 80007d0:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <on_back+0x34>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
        render_menu(hi2c);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff ff0a 	bl	80005f0 <render_menu>
    }
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200003e8 	.word	0x200003e8
 80007e8:	200003ec 	.word	0x200003ec

080007ec <mainMenuCallback>:

void mainMenuCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
    if (index == 0)
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d106      	bne.n	800080c <mainMenuCallback+0x20>
    {
        currentMenu = &menuMenu;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <mainMenuCallback+0x40>)
 8000800:	4a0b      	ldr	r2, [pc, #44]	@ (8000830 <mainMenuCallback+0x44>)
 8000802:	601a      	str	r2, [r3, #0]
        cursor = 0;
 8000804:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <mainMenuCallback+0x48>)
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]
 800080a:	e008      	b.n	800081e <mainMenuCallback+0x32>
    }
    else if (index == 1)
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d105      	bne.n	800081e <mainMenuCallback+0x32>
    {
        currentMenu = &settingsMenu;
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <mainMenuCallback+0x40>)
 8000814:	4a08      	ldr	r2, [pc, #32]	@ (8000838 <mainMenuCallback+0x4c>)
 8000816:	601a      	str	r2, [r3, #0]
        cursor = 0;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <mainMenuCallback+0x48>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
    }
    render_menu(hi2c);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff fee6 	bl	80005f0 <render_menu>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200003e8 	.word	0x200003e8
 8000830:	20000030 	.word	0x20000030
 8000834:	200003ec 	.word	0x200003ec
 8000838:	20000044 	.word	0x20000044

0800083c <menuCallback>:

void menuCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	70fb      	strb	r3, [r7, #3]
    if (index == 0)
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d10a      	bne.n	8000864 <menuCallback+0x28>
    {
        currentMenu = &flightStatusMenu;
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <menuCallback+0x4c>)
 8000850:	4a0e      	ldr	r2, [pc, #56]	@ (800088c <menuCallback+0x50>)
 8000852:	601a      	str	r2, [r3, #0]
        currentMenu->select_callback(hi2c, index);
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <menuCallback+0x4c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	78fa      	ldrb	r2, [r7, #3]
 800085c:	4611      	mov	r1, r2
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	4798      	blx	r3
    else if (index == 1)
    {
        currentMenu = &settingsMenu;
        currentMenu->select_callback(hi2c, index);
    }
}
 8000862:	e00c      	b.n	800087e <menuCallback+0x42>
    else if (index == 1)
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d109      	bne.n	800087e <menuCallback+0x42>
        currentMenu = &settingsMenu;
 800086a:	4b07      	ldr	r3, [pc, #28]	@ (8000888 <menuCallback+0x4c>)
 800086c:	4a08      	ldr	r2, [pc, #32]	@ (8000890 <menuCallback+0x54>)
 800086e:	601a      	str	r2, [r3, #0]
        currentMenu->select_callback(hi2c, index);
 8000870:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <menuCallback+0x4c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	68db      	ldr	r3, [r3, #12]
 8000876:	78fa      	ldrb	r2, [r7, #3]
 8000878:	4611      	mov	r1, r2
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	4798      	blx	r3
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200003e8 	.word	0x200003e8
 800088c:	2000006c 	.word	0x2000006c
 8000890:	20000044 	.word	0x20000044

08000894 <settingsCallback>:

void settingsCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]
    if (index == 0)
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d11d      	bne.n	80008e2 <settingsCallback+0x4e>
    {
        currentMenu = &buzzerMenu;
 80008a6:	4b17      	ldr	r3, [pc, #92]	@ (8000904 <settingsCallback+0x70>)
 80008a8:	4a17      	ldr	r2, [pc, #92]	@ (8000908 <settingsCallback+0x74>)
 80008aa:	601a      	str	r2, [r3, #0]
        cursor = 0;
 80008ac:	4b17      	ldr	r3, [pc, #92]	@ (800090c <settingsCallback+0x78>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
        if (buzzer_state == 0)
 80008b2:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <settingsCallback+0x7c>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d109      	bne.n	80008ce <settingsCallback+0x3a>
        {
            lcd_clear(hi2c);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f000 f97d 	bl	8000bba <lcd_clear>
            lcd_send_string(hi2c, LINE1, POS0, "OFF");
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <settingsCallback+0x80>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	2180      	movs	r1, #128	@ 0x80
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f000 f947 	bl	8000b5a <lcd_send_string>
    }
    else if (index==2)
    {

    }
}
 80008cc:	e015      	b.n	80008fa <settingsCallback+0x66>
            lcd_clear(hi2c);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f000 f973 	bl	8000bba <lcd_clear>
            lcd_send_string(hi2c, LINE1, POS0, "ON");
 80008d4:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <settingsCallback+0x84>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	2180      	movs	r1, #128	@ 0x80
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f93d 	bl	8000b5a <lcd_send_string>
}
 80008e0:	e00b      	b.n	80008fa <settingsCallback+0x66>
    else if (index == 1)
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d108      	bne.n	80008fa <settingsCallback+0x66>
        currentMenu = &gpsSettingsMenu;
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <settingsCallback+0x70>)
 80008ea:	4a0c      	ldr	r2, [pc, #48]	@ (800091c <settingsCallback+0x88>)
 80008ec:	601a      	str	r2, [r3, #0]
        cursor = 0;
 80008ee:	4b07      	ldr	r3, [pc, #28]	@ (800090c <settingsCallback+0x78>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
        render_menu(hi2c);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fe7b 	bl	80005f0 <render_menu>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200003e8 	.word	0x200003e8
 8000908:	20000058 	.word	0x20000058
 800090c:	200003ec 	.word	0x200003ec
 8000910:	200003ed 	.word	0x200003ed
 8000914:	08008c10 	.word	0x08008c10
 8000918:	08008c14 	.word	0x08008c14
 800091c:	20000080 	.word	0x20000080

08000920 <buzzerCallback>:


void buzzerCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	70fb      	strb	r3, [r7, #3]
    buzzer_state = buzzer_state ^ 1;
 800092c:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <buzzerCallback+0x50>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	f083 0301 	eor.w	r3, r3, #1
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <buzzerCallback+0x50>)
 8000938:	701a      	strb	r2, [r3, #0]
    if (buzzer_state == 0)
 800093a:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <buzzerCallback+0x50>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d109      	bne.n	8000956 <buzzerCallback+0x36>
    {
        lcd_clear(hi2c);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 f939 	bl	8000bba <lcd_clear>
        lcd_send_string(hi2c, LINE1, POS0, "OFF");
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <buzzerCallback+0x54>)
 800094a:	2200      	movs	r2, #0
 800094c:	2180      	movs	r1, #128	@ 0x80
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f000 f903 	bl	8000b5a <lcd_send_string>
    else
    {
        lcd_clear(hi2c);
        lcd_send_string(hi2c, LINE1, POS0, "ON");
    }
}
 8000954:	e008      	b.n	8000968 <buzzerCallback+0x48>
        lcd_clear(hi2c);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f000 f92f 	bl	8000bba <lcd_clear>
        lcd_send_string(hi2c, LINE1, POS0, "ON");
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <buzzerCallback+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	2180      	movs	r1, #128	@ 0x80
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 f8f9 	bl	8000b5a <lcd_send_string>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200003ed 	.word	0x200003ed
 8000974:	08008c10 	.word	0x08008c10
 8000978:	08008c14 	.word	0x08008c14

0800097c <flightStatusCallback>:

void flightStatusCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]
    lcd_clear(hi2c);
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f000 f916 	bl	8000bba <lcd_clear>
    lcd_send_string(hi2c, LINE1, POS0, "Roll:");
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <flightStatusCallback+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	2180      	movs	r1, #128	@ 0x80
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f000 f8e0 	bl	8000b5a <lcd_send_string>
    lcd_send_string(hi2c, LINE2, POS0, "Pitch:");
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <flightStatusCallback+0x50>)
 800099c:	2200      	movs	r2, #0
 800099e:	21c0      	movs	r1, #192	@ 0xc0
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 f8da 	bl	8000b5a <lcd_send_string>
    lcd_send_string(hi2c, LINE3, POS0, "Yaw:");
 80009a6:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <flightStatusCallback+0x54>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	2194      	movs	r1, #148	@ 0x94
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f000 f8d4 	bl	8000b5a <lcd_send_string>
    lcd_send_string(hi2c, LINE3, POS0, "Altitude:");
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <flightStatusCallback+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	2194      	movs	r1, #148	@ 0x94
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f000 f8ce 	bl	8000b5a <lcd_send_string>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	08008c18 	.word	0x08008c18
 80009cc:	08008c20 	.word	0x08008c20
 80009d0:	08008c28 	.word	0x08008c28
 80009d4:	08008c30 	.word	0x08008c30

080009d8 <gpsSettingsCallback>:
    lcd_send_string(hi2c, LINE1, POS0, "Longtitude:");
    lcd_send_string(hi2c, LINE2, POS0, "Latitude:");
}

void gpsSettingsCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	70fb      	strb	r3, [r7, #3]
    lcd_clear(hi2c);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f000 f8e8 	bl	8000bba <lcd_clear>
    lcd_send_string(hi2c, LINE1, POS0, "Longtitude:");
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <gpsSettingsCallback+0x34>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	2180      	movs	r1, #128	@ 0x80
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f000 f8b2 	bl	8000b5a <lcd_send_string>
    lcd_send_string(hi2c, LINE2, POS0, "Latitude:");
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <gpsSettingsCallback+0x38>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	21c0      	movs	r1, #192	@ 0xc0
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 f8ac 	bl	8000b5a <lcd_send_string>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	08008bcc 	.word	0x08008bcc
 8000a10:	08008c3c 	.word	0x08008c3c

08000a14 <lcd_init>:

/*
 * @brief This is init function, only use it in super loop
 */
void lcd_init(I2C_HandleTypeDef *hi2c)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	// 4 bit initialisation
	HAL_Delay(50); // wait for >40ms
 8000a1c:	2032      	movs	r0, #50	@ 0x32
 8000a1e:	f001 fbed 	bl	80021fc <HAL_Delay>
	lcd_send_cmd(hi2c, 0x30);
 8000a22:	2130      	movs	r1, #48	@ 0x30
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f000 f83c 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(5); // wait for >4.1ms
 8000a2a:	2005      	movs	r0, #5
 8000a2c:	f001 fbe6 	bl	80021fc <HAL_Delay>
	lcd_send_cmd(hi2c, 0x30);
 8000a30:	2130      	movs	r1, #48	@ 0x30
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f000 f835 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(1); // wait for >100us
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f001 fbdf 	bl	80021fc <HAL_Delay>
	lcd_send_cmd(hi2c, 0x30);
 8000a3e:	2130      	movs	r1, #48	@ 0x30
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f000 f82e 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(10);
 8000a46:	200a      	movs	r0, #10
 8000a48:	f001 fbd8 	bl	80021fc <HAL_Delay>
	lcd_send_cmd(hi2c, 0x20); // 4bit mode
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f000 f827 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(10);
 8000a54:	200a      	movs	r0, #10
 8000a56:	f001 fbd1 	bl	80021fc <HAL_Delay>

	// dislay initialisation
	lcd_send_cmd(hi2c, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000a5a:	2128      	movs	r1, #40	@ 0x28
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f000 f820 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(1);
 8000a62:	2001      	movs	r0, #1
 8000a64:	f001 fbca 	bl	80021fc <HAL_Delay>
	lcd_send_cmd(hi2c, 0x08); // Display on/off control --> D=0,C=0, B=0  ---> display off
 8000a68:	2108      	movs	r1, #8
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f000 f819 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(1);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f001 fbc3 	bl	80021fc <HAL_Delay>
	lcd_send_cmd(hi2c, 0x01); // clear display
 8000a76:	2101      	movs	r1, #1
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f000 f812 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(2);
 8000a7e:	2002      	movs	r0, #2
 8000a80:	f001 fbbc 	bl	80021fc <HAL_Delay>
	lcd_send_cmd(hi2c, 0x06); // Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000a84:	2106      	movs	r1, #6
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f000 f80b 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(1);
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f001 fbb5 	bl	80021fc <HAL_Delay>
	lcd_send_cmd(hi2c, 0x0C); // Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000a92:	210c      	movs	r1, #12
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f000 f804 	bl	8000aa2 <lcd_send_cmd>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <lcd_send_cmd>:

void lcd_send_cmd(I2C_HandleTypeDef *hi2c, char cmd)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af02      	add	r7, sp, #8
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000aae:	78fb      	ldrb	r3, [r7, #3]
 8000ab0:	f023 030f 	bic.w	r3, r3, #15
 8000ab4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8000ab6:	78fb      	ldrb	r3, [r7, #3]
 8000ab8:	011b      	lsls	r3, r3, #4
 8000aba:	73bb      	strb	r3, [r7, #14]
	//rs = 0 : send cmd
	data_t[0] = data_u | 0x0C; // en=1, rs=0 -> send 4 bit high, enable
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	f043 030c 	orr.w	r3, r3, #12
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08; // en=0, rs=0 -> unenable
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C; // en=1, rs=0 -> send 4 bit low, enable
 8000ad0:	7bbb      	ldrb	r3, [r7, #14]
 8000ad2:	f043 030c 	orr.w	r3, r3, #12
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08; // en=0, rs=0 ->
 8000ada:	7bbb      	ldrb	r3, [r7, #14]
 8000adc:	f043 0308 	orr.w	r3, r3, #8
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000ae4:	f107 0208 	add.w	r2, r7, #8
 8000ae8:	2364      	movs	r3, #100	@ 0x64
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2304      	movs	r3, #4
 8000aee:	214e      	movs	r1, #78	@ 0x4e
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f003 f82b 	bl	8003b4c <HAL_I2C_Master_Transmit>
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <lcd_send_data>:

void lcd_send_data(I2C_HandleTypeDef *hi2c, unsigned char data)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af02      	add	r7, sp, #8
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	460b      	mov	r3, r1
 8000b08:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8000b0a:	78fb      	ldrb	r3, [r7, #3]
 8000b0c:	f023 030f 	bic.w	r3, r3, #15
 8000b10:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8000b12:	78fb      	ldrb	r3, [r7, #3]
 8000b14:	011b      	lsls	r3, r3, #4
 8000b16:	73bb      	strb	r3, [r7, #14]
	//rs = 1 : send data
	data_t[0] = data_u | 0x0D; // en=1, rs=1
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	f043 030d 	orr.w	r3, r3, #13
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09; // en=0, rs=1
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	f043 0309 	orr.w	r3, r3, #9
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D; // en=1, rs=1
 8000b2c:	7bbb      	ldrb	r3, [r7, #14]
 8000b2e:	f043 030d 	orr.w	r3, r3, #13
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09; // en=0, rs=1
 8000b36:	7bbb      	ldrb	r3, [r7, #14]
 8000b38:	f043 0309 	orr.w	r3, r3, #9
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000b40:	f107 0208 	add.w	r2, r7, #8
 8000b44:	2364      	movs	r3, #100	@ 0x64
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2304      	movs	r3, #4
 8000b4a:	214e      	movs	r1, #78	@ 0x4e
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f002 fffd 	bl	8003b4c <HAL_I2C_Master_Transmit>
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <lcd_send_string>:

void lcd_send_string(I2C_HandleTypeDef *hi2c, char line, char pos, char *str)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	72fb      	strb	r3, [r7, #11]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	72bb      	strb	r3, [r7, #10]
	uint16_t length = (uint16_t)strlen(str);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff fb37 	bl	80001e0 <strlen>
 8000b72:	4603      	mov	r3, r0
 8000b74:	827b      	strh	r3, [r7, #18]
	lcd_send_cmd(hi2c, line + pos);
 8000b76:	7afa      	ldrb	r2, [r7, #11]
 8000b78:	7abb      	ldrb	r3, [r7, #10]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4619      	mov	r1, r3
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f7ff ff8e 	bl	8000aa2 <lcd_send_cmd>

	#if USING_RTOS == 0
	HAL_Delay(1);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f001 fb38 	bl	80021fc <HAL_Delay>
	#else
	vTaskDelay(pdMS_TO_TICKS(1));
	#endif

	for (int i = 0; i < length; i++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	e00a      	b.n	8000ba8 <lcd_send_string+0x4e>
	{
		lcd_send_data(hi2c, *(str + i));
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	4413      	add	r3, r2
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f7ff ffae 	bl	8000afe <lcd_send_data>
	for (int i = 0; i < length; i++)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	8a7b      	ldrh	r3, [r7, #18]
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dbf0      	blt.n	8000b92 <lcd_send_string+0x38>
	}
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <lcd_clear>:
		lcd_send_data(hi2c, *(str + i));
	}
}

void lcd_clear(I2C_HandleTypeDef *hi2c)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
	lcd_send_cmd(hi2c,0x01);
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ff6c 	bl	8000aa2 <lcd_send_cmd>
	for (int i = 0; i < 80; i++)
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	e006      	b.n	8000bde <lcd_clear+0x24>
	{
		lcd_send_data(hi2c,' ');
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff ff93 	bl	8000afe <lcd_send_data>
	for (int i = 0; i < 80; i++)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	2b4f      	cmp	r3, #79	@ 0x4f
 8000be2:	ddf5      	ble.n	8000bd0 <lcd_clear+0x16>
	}
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  switch (GPIO_Pin)
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c04:	d02a      	beq.n	8000c5c <HAL_GPIO_EXTI_Callback+0x6c>
 8000c06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c0a:	dc30      	bgt.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
 8000c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c10:	d009      	beq.n	8000c26 <HAL_GPIO_EXTI_Callback+0x36>
 8000c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c16:	dc2a      	bgt.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
 8000c18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c1c:	d015      	beq.n	8000c4a <HAL_GPIO_EXTI_Callback+0x5a>
 8000c1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c22:	d009      	beq.n	8000c38 <HAL_GPIO_EXTI_Callback+0x48>
 8000c24:	e023      	b.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
  {
  case UP_Pin:
	  //UP_Pin_flag=1;
	  xSemaphoreGiveFromISR(xUpSem, &xHigherPriorityTaskWoken);
 8000c26:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <HAL_GPIO_EXTI_Callback+0x9c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f107 020c 	add.w	r2, r7, #12
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f005 faa9 	bl	8006188 <xQueueGiveFromISR>
    break;
 8000c36:	e01a      	b.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
  case DOWN_Pin:
	  //DOWN_Pin_flag=1;
	  xSemaphoreGiveFromISR(xDownSem, &xHigherPriorityTaskWoken);
 8000c38:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f107 020c 	add.w	r2, r7, #12
 8000c40:	4611      	mov	r1, r2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f005 faa0 	bl	8006188 <xQueueGiveFromISR>
    break;
 8000c48:	e011      	b.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
  case SELECT_Pin:
	  //SELECT_Pin_flag=1;
	  xSemaphoreGiveFromISR(xSelectSem, &xHigherPriorityTaskWoken);
 8000c4a:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f107 020c 	add.w	r2, r7, #12
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f005 fa97 	bl	8006188 <xQueueGiveFromISR>
    break;
 8000c5a:	e008      	b.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
  case BACK_Pin:
	  //BACK_Pin_flag=1;
	  xSemaphoreGiveFromISR(xBackSem, &xHigherPriorityTaskWoken);
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f107 020c 	add.w	r2, r7, #12
 8000c64:	4611      	mov	r1, r2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f005 fa8e 	bl	8006188 <xQueueGiveFromISR>
    break;
 8000c6c:	bf00      	nop
  }
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d007      	beq.n	8000c84 <HAL_GPIO_EXTI_Callback+0x94>
 8000c74:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <HAL_GPIO_EXTI_Callback+0xac>)
 8000c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	f3bf 8f4f 	dsb	sy
 8000c80:	f3bf 8f6f 	isb	sy
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200005ac 	.word	0x200005ac
 8000c90:	200005b0 	.word	0x200005b0
 8000c94:	200005b4 	.word	0x200005b4
 8000c98:	200005b8 	.word	0x200005b8
 8000c9c:	e000ed04 	.word	0xe000ed04

08000ca0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce4 <HAL_ADC_ConvCpltCallback+0x44>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d114      	bne.n	8000cdc <HAL_ADC_ConvCpltCallback+0x3c>
        // Notify a FreeRTOS task
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
        vTaskNotifyGiveFromISR(ADC_Handle, &xHigherPriorityTaskWoken);
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <HAL_ADC_ConvCpltCallback+0x48>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f107 020c 	add.w	r2, r7, #12
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f006 fd15 	bl	80076f0 <vTaskNotifyGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d007      	beq.n	8000cdc <HAL_ADC_ConvCpltCallback+0x3c>
 8000ccc:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <HAL_ADC_ConvCpltCallback+0x4c>)
 8000cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	f3bf 8f4f 	dsb	sy
 8000cd8:	f3bf 8f6f 	isb	sy
    }
}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40012000 	.word	0x40012000
 8000ce8:	200005e4 	.word	0x200005e4
 8000cec:	e000ed04 	.word	0xe000ed04

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b5b0      	push	{r4, r5, r7, lr}
 8000cf2:	b08a      	sub	sp, #40	@ 0x28
 8000cf4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf6:	f001 fa3f 	bl	8002178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfa:	f000 f8b1 	bl	8000e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfe:	f000 fa4d 	bl	800119c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d02:	f000 fa2b 	bl	800115c <MX_DMA_Init>
  MX_I2C1_Init();
 8000d06:	f000 f98f 	bl	8001028 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d0a:	f000 f9bb 	bl	8001084 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000d0e:	f000 f90f 	bl	8000f30 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000d12:	f000 f9ed 	bl	80010f0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_CHANNEL_COUNT);
 8000d16:	2204      	movs	r2, #4
 8000d18:	493b      	ldr	r1, [pc, #236]	@ (8000e08 <main+0x118>)
 8000d1a:	483c      	ldr	r0, [pc, #240]	@ (8000e0c <main+0x11c>)
 8000d1c:	f001 fbe6 	bl	80024ec <HAL_ADC_Start_DMA>
  lcd_init(&hi2c1);
 8000d20:	483b      	ldr	r0, [pc, #236]	@ (8000e10 <main+0x120>)
 8000d22:	f7ff fe77 	bl	8000a14 <lcd_init>
  menu_init(&hi2c1);
 8000d26:	483a      	ldr	r0, [pc, #232]	@ (8000e10 <main+0x120>)
 8000d28:	f7ff fce8 	bl	80006fc <menu_init>
  TX_Enhanced_ShockBurst_Config(&nrf1, 0XA2A2A2A2A2);
 8000d2c:	f04f 32a2 	mov.w	r2, #2728567458	@ 0xa2a2a2a2
 8000d30:	f04f 03a2 	mov.w	r3, #162	@ 0xa2
 8000d34:	4837      	ldr	r0, [pc, #220]	@ (8000e14 <main+0x124>)
 8000d36:	f000 fced 	bl	8001714 <TX_Enhanced_ShockBurst_Config>
  RX_Enhanced_ShockBurst_Config(&nrf2, 0xD2D2D2D2D2);
 8000d3a:	f04f 32d2 	mov.w	r2, #3537031890	@ 0xd2d2d2d2
 8000d3e:	f04f 03d2 	mov.w	r3, #210	@ 0xd2
 8000d42:	4835      	ldr	r0, [pc, #212]	@ (8000e18 <main+0x128>)
 8000d44:	f000 fd17 	bl	8001776 <RX_Enhanced_ShockBurst_Config>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  xUpSem     = xSemaphoreCreateBinary();
 8000d48:	2203      	movs	r2, #3
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f005 f8bf 	bl	8005ed0 <xQueueGenericCreate>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4a31      	ldr	r2, [pc, #196]	@ (8000e1c <main+0x12c>)
 8000d56:	6013      	str	r3, [r2, #0]
  xDownSem   = xSemaphoreCreateBinary();
 8000d58:	2203      	movs	r2, #3
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f005 f8b7 	bl	8005ed0 <xQueueGenericCreate>
 8000d62:	4603      	mov	r3, r0
 8000d64:	4a2e      	ldr	r2, [pc, #184]	@ (8000e20 <main+0x130>)
 8000d66:	6013      	str	r3, [r2, #0]
  xSelectSem = xSemaphoreCreateBinary();
 8000d68:	2203      	movs	r2, #3
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f005 f8af 	bl	8005ed0 <xQueueGenericCreate>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4a2b      	ldr	r2, [pc, #172]	@ (8000e24 <main+0x134>)
 8000d76:	6013      	str	r3, [r2, #0]
  xBackSem   = xSemaphoreCreateBinary();
 8000d78:	2203      	movs	r2, #3
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f005 f8a7 	bl	8005ed0 <xQueueGenericCreate>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a28      	ldr	r2, [pc, #160]	@ (8000e28 <main+0x138>)
 8000d86:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000d88:	4b28      	ldr	r3, [pc, #160]	@ (8000e2c <main+0x13c>)
 8000d8a:	1d3c      	adds	r4, r7, #4
 8000d8c:	461d      	mov	r5, r3
 8000d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f004 ff17 	bl	8005bd2 <osThreadCreate>
 8000da4:	4603      	mov	r3, r0
 8000da6:	4a22      	ldr	r2, [pc, #136]	@ (8000e30 <main+0x140>)
 8000da8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(LCD_Task, "LCD", 256, NULL, 0, &LCD_Handle);
 8000daa:	4b22      	ldr	r3, [pc, #136]	@ (8000e34 <main+0x144>)
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	2300      	movs	r3, #0
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	2300      	movs	r3, #0
 8000db4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000db8:	491f      	ldr	r1, [pc, #124]	@ (8000e38 <main+0x148>)
 8000dba:	4820      	ldr	r0, [pc, #128]	@ (8000e3c <main+0x14c>)
 8000dbc:	f005 fce6 	bl	800678c <xTaskCreate>
  xTaskCreate(NRF_Task, "NRF", 256, NULL, 0, &NRF_Handle);
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e40 <main+0x150>)
 8000dc2:	9301      	str	r3, [sp, #4]
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dce:	491d      	ldr	r1, [pc, #116]	@ (8000e44 <main+0x154>)
 8000dd0:	481d      	ldr	r0, [pc, #116]	@ (8000e48 <main+0x158>)
 8000dd2:	f005 fcdb 	bl	800678c <xTaskCreate>
  xTaskCreate(Button_Task, "BTN", 256, NULL, 1, NULL);
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	9301      	str	r3, [sp, #4]
 8000dda:	2301      	movs	r3, #1
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	2300      	movs	r3, #0
 8000de0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000de4:	4919      	ldr	r1, [pc, #100]	@ (8000e4c <main+0x15c>)
 8000de6:	481a      	ldr	r0, [pc, #104]	@ (8000e50 <main+0x160>)
 8000de8:	f005 fcd0 	bl	800678c <xTaskCreate>
  xTaskCreate(ADC_Task, "ADC", 128, NULL, 2, &ADC_Handle);
 8000dec:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <main+0x164>)
 8000dee:	9301      	str	r3, [sp, #4]
 8000df0:	2302      	movs	r3, #2
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	2300      	movs	r3, #0
 8000df6:	2280      	movs	r2, #128	@ 0x80
 8000df8:	4917      	ldr	r1, [pc, #92]	@ (8000e58 <main+0x168>)
 8000dfa:	4818      	ldr	r0, [pc, #96]	@ (8000e5c <main+0x16c>)
 8000dfc:	f005 fcc6 	bl	800678c <xTaskCreate>


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e00:	f004 fee0 	bl	8005bc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <main+0x114>
 8000e08:	200003f0 	.word	0x200003f0
 8000e0c:	200003f8 	.word	0x200003f8
 8000e10:	200004a0 	.word	0x200004a0
 8000e14:	20000094 	.word	0x20000094
 8000e18:	200000b0 	.word	0x200000b0
 8000e1c:	200005ac 	.word	0x200005ac
 8000e20:	200005b0 	.word	0x200005b0
 8000e24:	200005b4 	.word	0x200005b4
 8000e28:	200005b8 	.word	0x200005b8
 8000e2c:	08008c64 	.word	0x08008c64
 8000e30:	200005a4 	.word	0x200005a4
 8000e34:	200005dc 	.word	0x200005dc
 8000e38:	08008c48 	.word	0x08008c48
 8000e3c:	08001335 	.word	0x08001335
 8000e40:	200005e0 	.word	0x200005e0
 8000e44:	08008c4c 	.word	0x08008c4c
 8000e48:	08001301 	.word	0x08001301
 8000e4c:	08008c50 	.word	0x08008c50
 8000e50:	08001345 	.word	0x08001345
 8000e54:	200005e4 	.word	0x200005e4
 8000e58:	08008c54 	.word	0x08008c54
 8000e5c:	080013d1 	.word	0x080013d1

08000e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b094      	sub	sp, #80	@ 0x50
 8000e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e66:	f107 0320 	add.w	r3, r7, #32
 8000e6a:	2230      	movs	r2, #48	@ 0x30
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f007 f99c 	bl	80081ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	4b27      	ldr	r3, [pc, #156]	@ (8000f28 <SystemClock_Config+0xc8>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8c:	4a26      	ldr	r2, [pc, #152]	@ (8000f28 <SystemClock_Config+0xc8>)
 8000e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e94:	4b24      	ldr	r3, [pc, #144]	@ (8000f28 <SystemClock_Config+0xc8>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	4b21      	ldr	r3, [pc, #132]	@ (8000f2c <SystemClock_Config+0xcc>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a20      	ldr	r2, [pc, #128]	@ (8000f2c <SystemClock_Config+0xcc>)
 8000eaa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f2c <SystemClock_Config+0xcc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ed0:	2319      	movs	r3, #25
 8000ed2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ed4:	23a8      	movs	r3, #168	@ 0xa8
 8000ed6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000edc:	2304      	movs	r3, #4
 8000ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee0:	f107 0320 	add.w	r3, r7, #32
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f003 f98b 	bl	8004200 <HAL_RCC_OscConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ef0:	f000 fab2 	bl	8001458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	2102      	movs	r1, #2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f003 fbed 	bl	80046f0 <HAL_RCC_ClockConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f1c:	f000 fa9c 	bl	8001458 <Error_Handler>
  }
}
 8000f20:	bf00      	nop
 8000f22:	3750      	adds	r7, #80	@ 0x50
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40007000 	.word	0x40007000

08000f30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f36:	463b      	mov	r3, r7
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f42:	4b36      	ldr	r3, [pc, #216]	@ (800101c <MX_ADC1_Init+0xec>)
 8000f44:	4a36      	ldr	r2, [pc, #216]	@ (8001020 <MX_ADC1_Init+0xf0>)
 8000f46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f48:	4b34      	ldr	r3, [pc, #208]	@ (800101c <MX_ADC1_Init+0xec>)
 8000f4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f50:	4b32      	ldr	r3, [pc, #200]	@ (800101c <MX_ADC1_Init+0xec>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f56:	4b31      	ldr	r3, [pc, #196]	@ (800101c <MX_ADC1_Init+0xec>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f5c:	4b2f      	ldr	r3, [pc, #188]	@ (800101c <MX_ADC1_Init+0xec>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f62:	4b2e      	ldr	r3, [pc, #184]	@ (800101c <MX_ADC1_Init+0xec>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f6a:	4b2c      	ldr	r3, [pc, #176]	@ (800101c <MX_ADC1_Init+0xec>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f70:	4b2a      	ldr	r3, [pc, #168]	@ (800101c <MX_ADC1_Init+0xec>)
 8000f72:	4a2c      	ldr	r2, [pc, #176]	@ (8001024 <MX_ADC1_Init+0xf4>)
 8000f74:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f76:	4b29      	ldr	r3, [pc, #164]	@ (800101c <MX_ADC1_Init+0xec>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000f7c:	4b27      	ldr	r3, [pc, #156]	@ (800101c <MX_ADC1_Init+0xec>)
 8000f7e:	2204      	movs	r2, #4
 8000f80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f82:	4b26      	ldr	r3, [pc, #152]	@ (800101c <MX_ADC1_Init+0xec>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f8a:	4b24      	ldr	r3, [pc, #144]	@ (800101c <MX_ADC1_Init+0xec>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f90:	4822      	ldr	r0, [pc, #136]	@ (800101c <MX_ADC1_Init+0xec>)
 8000f92:	f001 f957 	bl	8002244 <HAL_ADC_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f9c:	f000 fa5c 	bl	8001458 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fac:	463b      	mov	r3, r7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	481a      	ldr	r0, [pc, #104]	@ (800101c <MX_ADC1_Init+0xec>)
 8000fb2:	f001 fbad 	bl	8002710 <HAL_ADC_ConfigChannel>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fbc:	f000 fa4c 	bl	8001458 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4813      	ldr	r0, [pc, #76]	@ (800101c <MX_ADC1_Init+0xec>)
 8000fce:	f001 fb9f 	bl	8002710 <HAL_ADC_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fd8:	f000 fa3e 	bl	8001458 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fdc:	2305      	movs	r3, #5
 8000fde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480c      	ldr	r0, [pc, #48]	@ (800101c <MX_ADC1_Init+0xec>)
 8000fea:	f001 fb91 	bl	8002710 <HAL_ADC_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000ff4:	f000 fa30 	bl	8001458 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ff8:	2306      	movs	r3, #6
 8000ffa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001000:	463b      	mov	r3, r7
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	@ (800101c <MX_ADC1_Init+0xec>)
 8001006:	f001 fb83 	bl	8002710 <HAL_ADC_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001010:	f000 fa22 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200003f8 	.word	0x200003f8
 8001020:	40012000 	.word	0x40012000
 8001024:	0f000001 	.word	0x0f000001

08001028 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <MX_I2C1_Init+0x50>)
 800102e:	4a13      	ldr	r2, [pc, #76]	@ (800107c <MX_I2C1_Init+0x54>)
 8001030:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001032:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <MX_I2C1_Init+0x50>)
 8001034:	4a12      	ldr	r2, [pc, #72]	@ (8001080 <MX_I2C1_Init+0x58>)
 8001036:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001038:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <MX_I2C1_Init+0x50>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <MX_I2C1_Init+0x50>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <MX_I2C1_Init+0x50>)
 8001046:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800104a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800104c:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <MX_I2C1_Init+0x50>)
 800104e:	2200      	movs	r2, #0
 8001050:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <MX_I2C1_Init+0x50>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001058:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <MX_I2C1_Init+0x50>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <MX_I2C1_Init+0x50>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	@ (8001078 <MX_I2C1_Init+0x50>)
 8001066:	f002 fc2d 	bl	80038c4 <HAL_I2C_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001070:	f000 f9f2 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200004a0 	.word	0x200004a0
 800107c:	40005400 	.word	0x40005400
 8001080:	000186a0 	.word	0x000186a0

08001084 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001088:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <MX_SPI1_Init+0x64>)
 800108a:	4a18      	ldr	r2, [pc, #96]	@ (80010ec <MX_SPI1_Init+0x68>)
 800108c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800108e:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <MX_SPI1_Init+0x64>)
 8001090:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001094:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001096:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <MX_SPI1_Init+0x64>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <MX_SPI1_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010b6:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010b8:	2210      	movs	r2, #16
 80010ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010be:	2200      	movs	r2, #0
 80010c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010c8:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010d0:	220a      	movs	r2, #10
 80010d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010d6:	f003 fd1d 	bl	8004b14 <HAL_SPI_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010e0:	f000 f9ba 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200004f4 	.word	0x200004f4
 80010ec:	40013000 	.word	0x40013000

080010f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80010f4:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <MX_SPI3_Init+0x64>)
 80010f6:	4a18      	ldr	r2, [pc, #96]	@ (8001158 <MX_SPI3_Init+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010fa:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <MX_SPI3_Init+0x64>)
 80010fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001100:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001102:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <MX_SPI3_Init+0x64>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <MX_SPI3_Init+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_SPI3_Init+0x64>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001114:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_SPI3_Init+0x64>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <MX_SPI3_Init+0x64>)
 800111c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001120:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001122:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <MX_SPI3_Init+0x64>)
 8001124:	2208      	movs	r2, #8
 8001126:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001128:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <MX_SPI3_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800112e:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <MX_SPI3_Init+0x64>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001134:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <MX_SPI3_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_SPI3_Init+0x64>)
 800113c:	220a      	movs	r2, #10
 800113e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	@ (8001154 <MX_SPI3_Init+0x64>)
 8001142:	f003 fce7 	bl	8004b14 <HAL_SPI_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800114c:	f000 f984 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000054c 	.word	0x2000054c
 8001158:	40003c00 	.word	0x40003c00

0800115c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <MX_DMA_Init+0x3c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a0b      	ldr	r2, [pc, #44]	@ (8001198 <MX_DMA_Init+0x3c>)
 800116c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <MX_DMA_Init+0x3c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2105      	movs	r1, #5
 8001182:	2038      	movs	r0, #56	@ 0x38
 8001184:	f001 fe36 	bl	8002df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001188:	2038      	movs	r0, #56	@ 0x38
 800118a:	f001 fe4f 	bl	8002e2c <HAL_NVIC_EnableIRQ>

}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800

0800119c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	@ 0x28
 80011a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	4b4e      	ldr	r3, [pc, #312]	@ (80012f0 <MX_GPIO_Init+0x154>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a4d      	ldr	r2, [pc, #308]	@ (80012f0 <MX_GPIO_Init+0x154>)
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b4b      	ldr	r3, [pc, #300]	@ (80012f0 <MX_GPIO_Init+0x154>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b47      	ldr	r3, [pc, #284]	@ (80012f0 <MX_GPIO_Init+0x154>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a46      	ldr	r2, [pc, #280]	@ (80012f0 <MX_GPIO_Init+0x154>)
 80011d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b44      	ldr	r3, [pc, #272]	@ (80012f0 <MX_GPIO_Init+0x154>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	4b40      	ldr	r3, [pc, #256]	@ (80012f0 <MX_GPIO_Init+0x154>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a3f      	ldr	r2, [pc, #252]	@ (80012f0 <MX_GPIO_Init+0x154>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b3d      	ldr	r3, [pc, #244]	@ (80012f0 <MX_GPIO_Init+0x154>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	4b39      	ldr	r3, [pc, #228]	@ (80012f0 <MX_GPIO_Init+0x154>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a38      	ldr	r2, [pc, #224]	@ (80012f0 <MX_GPIO_Init+0x154>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b36      	ldr	r3, [pc, #216]	@ (80012f0 <MX_GPIO_Init+0x154>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001228:	4832      	ldr	r0, [pc, #200]	@ (80012f4 <MX_GPIO_Init+0x158>)
 800122a:	f002 fb19 	bl	8003860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|CE_Pin|CS2_Pin|CE2_Pin
 800122e:	2200      	movs	r2, #0
 8001230:	f241 5103 	movw	r1, #5379	@ 0x1503
 8001234:	4830      	ldr	r0, [pc, #192]	@ (80012f8 <MX_GPIO_Init+0x15c>)
 8001236:	f002 fb13 	bl	8003860 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800123a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	4828      	ldr	r0, [pc, #160]	@ (80012f4 <MX_GPIO_Init+0x158>)
 8001254:	f002 f968 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin CE_Pin CS2_Pin CE2_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = CS_Pin|CE_Pin|CS2_Pin|CE2_Pin
 8001258:	f241 5303 	movw	r3, #5379	@ 0x1503
 800125c:	617b      	str	r3, [r7, #20]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125e:	2301      	movs	r3, #1
 8001260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	4821      	ldr	r0, [pc, #132]	@ (80012f8 <MX_GPIO_Init+0x15c>)
 8001272:	f002 f959 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : IRQ_Pin IRQ2_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin|IRQ2_Pin;
 8001276:	f242 0304 	movw	r3, #8196	@ 0x2004
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127c:	2300      	movs	r3, #0
 800127e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	481b      	ldr	r0, [pc, #108]	@ (80012f8 <MX_GPIO_Init+0x15c>)
 800128c:	f002 f94c 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 BACK_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|BACK_Pin;
 8001290:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001296:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800129a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800129c:	2301      	movs	r3, #1
 800129e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4814      	ldr	r0, [pc, #80]	@ (80012f8 <MX_GPIO_Init+0x15c>)
 80012a8:	f002 f93e 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : SELECT_Pin DOWN_Pin UP_Pin HOME_Pin */
  GPIO_InitStruct.Pin = SELECT_Pin|DOWN_Pin|UP_Pin|HOME_Pin;
 80012ac:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	480e      	ldr	r0, [pc, #56]	@ (80012fc <MX_GPIO_Init+0x160>)
 80012c4:	f002 f930 	bl	8003528 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2105      	movs	r1, #5
 80012cc:	2017      	movs	r0, #23
 80012ce:	f001 fd91 	bl	8002df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012d2:	2017      	movs	r0, #23
 80012d4:	f001 fdaa 	bl	8002e2c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	2105      	movs	r1, #5
 80012dc:	2028      	movs	r0, #40	@ 0x28
 80012de:	f001 fd89 	bl	8002df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012e2:	2028      	movs	r0, #40	@ 0x28
 80012e4:	f001 fda2 	bl	8002e2c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	@ 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020400 	.word	0x40020400
 80012fc:	40020000 	.word	0x40020000

08001300 <NRF_Task>:

/* USER CODE BEGIN 4 */
void NRF_Task(void *argument)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	@ 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	char cmdBuf[32];
	while(1)
	{
		sprintf((char*)spi_tx,"%s",cmdBuf);
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	461a      	mov	r2, r3
 800130e:	4906      	ldr	r1, [pc, #24]	@ (8001328 <NRF_Task+0x28>)
 8001310:	4806      	ldr	r0, [pc, #24]	@ (800132c <NRF_Task+0x2c>)
 8001312:	f006 ff29 	bl	8008168 <siprintf>
		TX_Communication(&nrf1, spi_tx);
 8001316:	4905      	ldr	r1, [pc, #20]	@ (800132c <NRF_Task+0x2c>)
 8001318:	4805      	ldr	r0, [pc, #20]	@ (8001330 <NRF_Task+0x30>)
 800131a:	f000 fa66 	bl	80017ea <TX_Communication>
		vTaskDelay(pdMS_TO_TICKS(10));
 800131e:	200a      	movs	r0, #10
 8001320:	f005 fb84 	bl	8006a2c <vTaskDelay>
		sprintf((char*)spi_tx,"%s",cmdBuf);
 8001324:	bf00      	nop
 8001326:	e7ef      	b.n	8001308 <NRF_Task+0x8>
 8001328:	08008c80 	.word	0x08008c80
 800132c:	200005bc 	.word	0x200005bc
 8001330:	20000094 	.word	0x20000094

08001334 <LCD_Task>:
	}
}

void LCD_Task(void *argument)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		vTaskDelay(pdMS_TO_TICKS(1));
 800133c:	2001      	movs	r0, #1
 800133e:	f005 fb75 	bl	8006a2c <vTaskDelay>
 8001342:	e7fb      	b.n	800133c <LCD_Task+0x8>

08001344 <Button_Task>:
	}
}

void Button_Task(void *argument)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
	         if(xSemaphoreTake(xUpSem, 0) == pdTRUE)
 800134c:	4b1b      	ldr	r3, [pc, #108]	@ (80013bc <Button_Task+0x78>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f004 ffa8 	bl	80062a8 <xQueueSemaphoreTake>
 8001358:	4603      	mov	r3, r0
 800135a:	2b01      	cmp	r3, #1
 800135c:	d103      	bne.n	8001366 <Button_Task+0x22>
		  	  {
		  		  on_up(&hi2c1);
 800135e:	4818      	ldr	r0, [pc, #96]	@ (80013c0 <Button_Task+0x7c>)
 8001360:	f7ff f9de 	bl	8000720 <on_up>
 8001364:	e025      	b.n	80013b2 <Button_Task+0x6e>

		  	  }
		  	  else if(xSemaphoreTake(xDownSem, 0) == pdTRUE)
 8001366:	4b17      	ldr	r3, [pc, #92]	@ (80013c4 <Button_Task+0x80>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f004 ff9b 	bl	80062a8 <xQueueSemaphoreTake>
 8001372:	4603      	mov	r3, r0
 8001374:	2b01      	cmp	r3, #1
 8001376:	d103      	bne.n	8001380 <Button_Task+0x3c>
		  	  {
		  		  on_down(&hi2c1);
 8001378:	4811      	ldr	r0, [pc, #68]	@ (80013c0 <Button_Task+0x7c>)
 800137a:	f7ff f9e9 	bl	8000750 <on_down>
 800137e:	e018      	b.n	80013b2 <Button_Task+0x6e>

		  	  }
		  	  else if(xSemaphoreTake(xBackSem, 0) == pdTRUE)
 8001380:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <Button_Task+0x84>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f004 ff8e 	bl	80062a8 <xQueueSemaphoreTake>
 800138c:	4603      	mov	r3, r0
 800138e:	2b01      	cmp	r3, #1
 8001390:	d103      	bne.n	800139a <Button_Task+0x56>
		  	  {
		  		  on_back(&hi2c1);
 8001392:	480b      	ldr	r0, [pc, #44]	@ (80013c0 <Button_Task+0x7c>)
 8001394:	f7ff fa0e 	bl	80007b4 <on_back>
 8001398:	e00b      	b.n	80013b2 <Button_Task+0x6e>

		  	  }
		  	  else if(xSemaphoreTake(xSelectSem, 0) == pdTRUE)
 800139a:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <Button_Task+0x88>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f004 ff81 	bl	80062a8 <xQueueSemaphoreTake>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d102      	bne.n	80013b2 <Button_Task+0x6e>
		  	  {
		  		  on_select(&hi2c1);
 80013ac:	4804      	ldr	r0, [pc, #16]	@ (80013c0 <Button_Task+0x7c>)
 80013ae:	f7ff f9ed 	bl	800078c <on_select>

		  	  }
	         vTaskDelay(pdMS_TO_TICKS(20)); // debounce
 80013b2:	2014      	movs	r0, #20
 80013b4:	f005 fb3a 	bl	8006a2c <vTaskDelay>
	         if(xSemaphoreTake(xUpSem, 0) == pdTRUE)
 80013b8:	e7c8      	b.n	800134c <Button_Task+0x8>
 80013ba:	bf00      	nop
 80013bc:	200005ac 	.word	0x200005ac
 80013c0:	200004a0 	.word	0x200004a0
 80013c4:	200005b0 	.word	0x200005b0
 80013c8:	200005b8 	.word	0x200005b8
 80013cc:	200005b4 	.word	0x200005b4

080013d0 <ADC_Task>:
	}
}

void ADC_Task(void *pvParameters)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
    for (;;) {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);  // Wait for DMA complete
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	2001      	movs	r0, #1
 80013de:	f006 f93b 	bl	8007658 <ulTaskNotifyTake>
        RC_Input_t input;

        // Use adc_buffer[] safely here
        input.throttle = adc_buffer[0];
 80013e2:	4b0e      	ldr	r3, [pc, #56]	@ (800141c <ADC_Task+0x4c>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	81bb      	strh	r3, [r7, #12]
        input.yaw      = adc_buffer[1];
 80013e8:	4b0c      	ldr	r3, [pc, #48]	@ (800141c <ADC_Task+0x4c>)
 80013ea:	885b      	ldrh	r3, [r3, #2]
 80013ec:	81fb      	strh	r3, [r7, #14]
        input.pitch    = adc_buffer[2];
 80013ee:	4b0b      	ldr	r3, [pc, #44]	@ (800141c <ADC_Task+0x4c>)
 80013f0:	889b      	ldrh	r3, [r3, #4]
 80013f2:	823b      	strh	r3, [r7, #16]
        input.roll     = adc_buffer[3];
 80013f4:	4b09      	ldr	r3, [pc, #36]	@ (800141c <ADC_Task+0x4c>)
 80013f6:	88db      	ldrh	r3, [r3, #6]
 80013f8:	827b      	strh	r3, [r7, #18]


        //rccommand_process(&input);
        const char *cmdStr = rccommand_process(&input);
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 fab8 	bl	8001974 <rccommand_process>
 8001404:	6178      	str	r0, [r7, #20]
        if (cmdStr != NULL)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0e5      	beq.n	80013d8 <ADC_Task+0x8>
        {
          // Gửi chuỗi vào queue
             xQueueOverwrite(commandQueue, cmdStr);
 800140c:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <ADC_Task+0x50>)
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	2302      	movs	r3, #2
 8001412:	2200      	movs	r2, #0
 8001414:	6979      	ldr	r1, [r7, #20]
 8001416:	f004 fdb5 	bl	8005f84 <xQueueGenericSend>
    for (;;) {
 800141a:	e7dd      	b.n	80013d8 <ADC_Task+0x8>
 800141c:	200003f0 	.word	0x200003f0
 8001420:	200005a8 	.word	0x200005a8

08001424 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800142c:	2001      	movs	r0, #1
 800142e:	f004 fc1c 	bl	8005c6a <osDelay>
 8001432:	e7fb      	b.n	800142c <StartDefaultTask+0x8>

08001434 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a04      	ldr	r2, [pc, #16]	@ (8001454 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d101      	bne.n	800144a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001446:	f000 feb9 	bl	80021bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40010000 	.word	0x40010000

08001458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
}
 800145e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <Error_Handler+0x8>

08001464 <Chip_Select>:

#include "nRF24L01.h"
#include "main.h"

void Chip_Select(NRF_HandleTypeDef *nrf)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CS_GPIO, nrf->CS_PIN, 0);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	899b      	ldrh	r3, [r3, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	4619      	mov	r1, r3
 8001478:	f002 f9f2 	bl	8003860 <HAL_GPIO_WritePin>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <Chip_Deselect>:

void Chip_Deselect(NRF_HandleTypeDef *nrf)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CS_GPIO, nrf->CS_PIN, 1);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	899b      	ldrh	r3, [r3, #12]
 8001494:	2201      	movs	r2, #1
 8001496:	4619      	mov	r1, r3
 8001498:	f002 f9e2 	bl	8003860 <HAL_GPIO_WritePin>
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <Set_CE_High>:

void Set_CE_High(NRF_HandleTypeDef *nrf)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CE_GPIO, nrf->CE_PIN, 1);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6858      	ldr	r0, [r3, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	89db      	ldrh	r3, [r3, #14]
 80014b4:	2201      	movs	r2, #1
 80014b6:	4619      	mov	r1, r3
 80014b8:	f002 f9d2 	bl	8003860 <HAL_GPIO_WritePin>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <Set_CE_Low>:

void Set_CE_Low(NRF_HandleTypeDef *nrf)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CE_GPIO, nrf->CE_PIN, 0);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6858      	ldr	r0, [r3, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	89db      	ldrh	r3, [r3, #14]
 80014d4:	2200      	movs	r2, #0
 80014d6:	4619      	mov	r1, r3
 80014d8:	f002 f9c2 	bl	8003860 <HAL_GPIO_WritePin>
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <WaitForIRQ>:

void WaitForIRQ(NRF_HandleTypeDef *nrf)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	while (HAL_GPIO_ReadPin(nrf->IRQ_GPIO, nrf->IRQ_PIN) == 1)
 80014ec:	bf00      	nop
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	8a1b      	ldrh	r3, [r3, #16]
 80014f6:	4619      	mov	r1, r3
 80014f8:	4610      	mov	r0, r2
 80014fa:	f002 f999 	bl	8003830 <HAL_GPIO_ReadPin>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b01      	cmp	r3, #1
 8001502:	d0f4      	beq.n	80014ee <WaitForIRQ+0xa>
		;
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <nRF_WriteRegister>:

void nRF_WriteRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t *data, int size)
{
 800150e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001512:	b089      	sub	sp, #36	@ 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	460b      	mov	r3, r1
 800151e:	72fb      	strb	r3, [r7, #11]
 8001520:	466b      	mov	r3, sp
 8001522:	461e      	mov	r6, r3
	uint8_t buff[size + 1];
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	1c59      	adds	r1, r3, #1
 8001528:	1e4b      	subs	r3, r1, #1
 800152a:	61bb      	str	r3, [r7, #24]
 800152c:	460a      	mov	r2, r1
 800152e:	2300      	movs	r3, #0
 8001530:	4690      	mov	r8, r2
 8001532:	4699      	mov	r9, r3
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001540:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001544:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001548:	460a      	mov	r2, r1
 800154a:	2300      	movs	r3, #0
 800154c:	4614      	mov	r4, r2
 800154e:	461d      	mov	r5, r3
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	00eb      	lsls	r3, r5, #3
 800155a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800155e:	00e2      	lsls	r2, r4, #3
 8001560:	460b      	mov	r3, r1
 8001562:	3307      	adds	r3, #7
 8001564:	08db      	lsrs	r3, r3, #3
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	ebad 0d03 	sub.w	sp, sp, r3
 800156c:	466b      	mov	r3, sp
 800156e:	3300      	adds	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
	buff[0] = reg | (1 << 5);
 8001572:	7afb      	ldrb	r3, [r7, #11]
 8001574:	f043 0320 	orr.w	r3, r3, #32
 8001578:	b2da      	uxtb	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++)
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
 8001582:	e00a      	b.n	800159a <nRF_WriteRegister+0x8c>
	{
		buff[i + 1] = data[i];
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	441a      	add	r2, r3
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3301      	adds	r3, #1
 800158e:	7811      	ldrb	r1, [r2, #0]
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < size; i++)
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	3301      	adds	r3, #1
 8001598:	61fb      	str	r3, [r7, #28]
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	dbf0      	blt.n	8001584 <nRF_WriteRegister+0x76>
	}
	Chip_Select(nrf);
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f7ff ff5e 	bl	8001464 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, buff, (uint16_t)size + 1, NRF_SPI_TIMEOUT);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6958      	ldr	r0, [r3, #20]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	3301      	adds	r3, #1
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	2364      	movs	r3, #100	@ 0x64
 80015b6:	6979      	ldr	r1, [r7, #20]
 80015b8:	f003 fb35 	bl	8004c26 <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f7ff ff61 	bl	8001484 <Chip_Deselect>
 80015c2:	46b5      	mov	sp, r6
}
 80015c4:	bf00      	nop
 80015c6:	3724      	adds	r7, #36	@ 0x24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080015ce <nRF_WriteOneRegister>:

void nRF_WriteOneRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t data)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	460b      	mov	r3, r1
 80015d8:	70fb      	strb	r3, [r7, #3]
 80015da:	4613      	mov	r3, r2
 80015dc:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2];
	buff[0] = reg | (1 << 5);
 80015de:	78fb      	ldrb	r3, [r7, #3]
 80015e0:	f043 0320 	orr.w	r3, r3, #32
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	733b      	strb	r3, [r7, #12]
	buff[1] = data;
 80015e8:	78bb      	ldrb	r3, [r7, #2]
 80015ea:	737b      	strb	r3, [r7, #13]
	Chip_Select(nrf);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ff39 	bl	8001464 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, buff, 2, NRF_SPI_TIMEOUT);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6958      	ldr	r0, [r3, #20]
 80015f6:	f107 010c 	add.w	r1, r7, #12
 80015fa:	2364      	movs	r3, #100	@ 0x64
 80015fc:	2202      	movs	r2, #2
 80015fe:	f003 fb12 	bl	8004c26 <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ff3e 	bl	8001484 <Chip_Deselect>
}
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <nRF_ReadOneRegister>:
	HAL_SPI_Receive(nrf->hspi, receive_data, size, NRF_SPI_TIMEOUT * 10);
	Chip_Deselect(nrf);
}

void nRF_ReadOneRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t *receive_data)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	460b      	mov	r3, r1
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	72fb      	strb	r3, [r7, #11]

	uint8_t buff = reg;
 800161e:	7afb      	ldrb	r3, [r7, #11]
 8001620:	75fb      	strb	r3, [r7, #23]
	Chip_Select(nrf);
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f7ff ff1e 	bl	8001464 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6958      	ldr	r0, [r3, #20]
 800162c:	f107 0117 	add.w	r1, r7, #23
 8001630:	2364      	movs	r3, #100	@ 0x64
 8001632:	2201      	movs	r2, #1
 8001634:	f003 faf7 	bl	8004c26 <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->hspi, receive_data, 1, NRF_SPI_TIMEOUT);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6958      	ldr	r0, [r3, #20]
 800163c:	2364      	movs	r3, #100	@ 0x64
 800163e:	2201      	movs	r2, #1
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	f003 fc34 	bl	8004eae <HAL_SPI_Receive>
	Chip_Deselect(nrf);
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f7ff ff1c 	bl	8001484 <Chip_Deselect>
}
 800164c:	bf00      	nop
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <nRF_SendCmd>:
void nRF_SendCmd(NRF_HandleTypeDef *nrf, uint8_t cmd)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	70fb      	strb	r3, [r7, #3]

	uint8_t buff = cmd;
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	73fb      	strb	r3, [r7, #15]
	Chip_Select(nrf);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff fefd 	bl	8001464 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6958      	ldr	r0, [r3, #20]
 800166e:	f107 010f 	add.w	r1, r7, #15
 8001672:	2364      	movs	r3, #100	@ 0x64
 8001674:	2201      	movs	r2, #1
 8001676:	f003 fad6 	bl	8004c26 <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ff02 	bl	8001484 <Chip_Deselect>
}
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <nRF_GetStatus>:

uint8_t nRF_GetStatus(NRF_HandleTypeDef *nrf)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

	uint8_t buff = STATUS;
 8001690:	2307      	movs	r3, #7
 8001692:	73fb      	strb	r3, [r7, #15]
	uint8_t rx_data = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	73bb      	strb	r3, [r7, #14]
	Chip_Select(nrf);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fee3 	bl	8001464 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6958      	ldr	r0, [r3, #20]
 80016a2:	f107 010f 	add.w	r1, r7, #15
 80016a6:	2364      	movs	r3, #100	@ 0x64
 80016a8:	2201      	movs	r2, #1
 80016aa:	f003 fabc 	bl	8004c26 <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->hspi, &rx_data, 1, NRF_SPI_TIMEOUT * 10);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6958      	ldr	r0, [r3, #20]
 80016b2:	f107 010e 	add.w	r1, r7, #14
 80016b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ba:	2201      	movs	r2, #1
 80016bc:	f003 fbf7 	bl	8004eae <HAL_SPI_Receive>
	Chip_Deselect(nrf);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fedf 	bl	8001484 <Chip_Deselect>
	return rx_data;
 80016c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <nRF_TX_Payload>:

void nRF_TX_Payload(NRF_HandleTypeDef *nrf, uint8_t *data, uint16_t size)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	4613      	mov	r3, r2
 80016dc:	80fb      	strh	r3, [r7, #6]
	Chip_Select(nrf);
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f7ff fec0 	bl	8001464 <Chip_Select>
	uint8_t buff = W_TX_PAYLOAD;
 80016e4:	23a0      	movs	r3, #160	@ 0xa0
 80016e6:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6958      	ldr	r0, [r3, #20]
 80016ec:	f107 0117 	add.w	r1, r7, #23
 80016f0:	2364      	movs	r3, #100	@ 0x64
 80016f2:	2201      	movs	r2, #1
 80016f4:	f003 fa97 	bl	8004c26 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf->hspi, data, size, NRF_SPI_TIMEOUT);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6958      	ldr	r0, [r3, #20]
 80016fc:	88fa      	ldrh	r2, [r7, #6]
 80016fe:	2364      	movs	r3, #100	@ 0x64
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	f003 fa90 	bl	8004c26 <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f7ff febc 	bl	8001484 <Chip_Deselect>
}
 800170c:	bf00      	nop
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <TX_Enhanced_ShockBurst_Config>:
	HAL_SPI_Receive(nrf->hspi, rx_data, size, NRF_SPI_TIMEOUT * 10);
	Chip_Deselect(nrf);
}

void TX_Enhanced_ShockBurst_Config(NRF_HandleTypeDef *nrf,uint64_t tx_addr)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t buff = 0x0a;
 8001720:	230a      	movs	r3, #10
 8001722:	75fb      	strb	r3, [r7, #23]
	Set_CE_Low(nrf);
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f7ff fecd 	bl	80014c4 <Set_CE_Low>
	TX_ADDR_Write(nrf, tx_addr);
 800172a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f000 f8ed 	bl	800190e <TX_ADDR_Write>
	nRF_WriteOneRegister(nrf, EN_AA, 0x00);
 8001734:	2200      	movs	r2, #0
 8001736:	2101      	movs	r1, #1
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f7ff ff48 	bl	80015ce <nRF_WriteOneRegister>
	nRF_WriteOneRegister(nrf, RX_PW_P0, 32);
 800173e:	2220      	movs	r2, #32
 8001740:	2111      	movs	r1, #17
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f7ff ff43 	bl	80015ce <nRF_WriteOneRegister>
	nRF_WriteOneRegister(nrf, RF_SETUP, 0x7);
 8001748:	2207      	movs	r2, #7
 800174a:	2106      	movs	r1, #6
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f7ff ff3e 	bl	80015ce <nRF_WriteOneRegister>
	CONFIG_REG_Write(nrf, buff);
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	4619      	mov	r1, r3
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 f88b 	bl	8001872 <CONFIG_REG_Write>
	Set_CE_High(nrf);
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f7ff fea1 	bl	80014a4 <Set_CE_High>
	HAL_Delay(2);
 8001762:	2002      	movs	r0, #2
 8001764:	f000 fd4a 	bl	80021fc <HAL_Delay>
	nrf->nrfmode = MODE_TX;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2200      	movs	r2, #0
 800176c:	761a      	strb	r2, [r3, #24]
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <RX_Enhanced_ShockBurst_Config>:
	HAL_Delay(2);
	nrf->nrfmode = MODE_TX;
}

void RX_Enhanced_ShockBurst_Config(NRF_HandleTypeDef *nrf,uint64_t rx_addr)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	60f8      	str	r0, [r7, #12]
 800177e:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t buff = 0xb;
 8001782:	230b      	movs	r3, #11
 8001784:	75fb      	strb	r3, [r7, #23]
	Set_CE_Low(nrf);
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f7ff fe9c 	bl	80014c4 <Set_CE_Low>
	RX_ADDR_P0_Write(nrf,rx_addr);
 800178c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f000 f88a 	bl	80018aa <RX_ADDR_P0_Write>
	nRF_WriteOneRegister(nrf, EN_RXADDR, 0x01);
 8001796:	2201      	movs	r2, #1
 8001798:	2102      	movs	r1, #2
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f7ff ff17 	bl	80015ce <nRF_WriteOneRegister>
	nRF_WriteOneRegister(nrf, RX_PW_P0, 32);
 80017a0:	2220      	movs	r2, #32
 80017a2:	2111      	movs	r1, #17
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f7ff ff12 	bl	80015ce <nRF_WriteOneRegister>
	nRF_WriteOneRegister(nrf, EN_AA, 0x00);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2101      	movs	r1, #1
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f7ff ff0d 	bl	80015ce <nRF_WriteOneRegister>
	nRF_WriteOneRegister(nrf, RF_SETUP, 0x7);
 80017b4:	2207      	movs	r2, #7
 80017b6:	2106      	movs	r1, #6
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f7ff ff08 	bl	80015ce <nRF_WriteOneRegister>
	CONFIG_REG_Write(nrf, buff);
 80017be:	7dfb      	ldrb	r3, [r7, #23]
 80017c0:	4619      	mov	r1, r3
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 f855 	bl	8001872 <CONFIG_REG_Write>
	Set_CE_High(nrf);
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f7ff fe6b 	bl	80014a4 <Set_CE_High>
	HAL_Delay(2);
 80017ce:	2002      	movs	r0, #2
 80017d0:	f000 fd14 	bl	80021fc <HAL_Delay>
	nRF_SendCmd(nrf, FLUSH_RX);
 80017d4:	21e2      	movs	r1, #226	@ 0xe2
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f7ff ff3c 	bl	8001654 <nRF_SendCmd>
	nrf->nrfmode = MODE_RX;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2201      	movs	r2, #1
 80017e0:	761a      	strb	r2, [r3, #24]
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <TX_Communication>:
	Set_CE_High(nrf);
	HAL_Delay(2);
}

uint8_t TX_Communication(NRF_HandleTypeDef *nrf, uint8_t *data)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
	if (nrf->nrfmode == MODE_TX)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7e1b      	ldrb	r3, [r3, #24]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d135      	bne.n	8001868 <TX_Communication+0x7e>
	{
		nRF_TX_Payload(nrf, data, 32);
 80017fc:	2220      	movs	r2, #32
 80017fe:	6839      	ldr	r1, [r7, #0]
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff65 	bl	80016d0 <nRF_TX_Payload>
		Set_CE_High(nrf);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fe4c 	bl	80014a4 <Set_CE_High>
		WaitForIRQ(nrf);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff fe69 	bl	80014e4 <WaitForIRQ>
		nRF_SendCmd(nrf, FLUSH_TX);
 8001812:	21e1      	movs	r1, #225	@ 0xe1
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff1d 	bl	8001654 <nRF_SendCmd>
		uint8_t status = nRF_GetStatus(nrf);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ff34 	bl	8001688 <nRF_GetStatus>
 8001820:	4603      	mov	r3, r0
 8001822:	73fb      	strb	r3, [r7, #15]
		if ((status & (1 << MAX_RT)) != 0)
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00b      	beq.n	8001846 <TX_Communication+0x5c>
		{
			status |= ((1 << MAX_RT) | (1 << TX_FULL));
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	f043 0311 	orr.w	r3, r3, #17
 8001834:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(nrf, STATUS, status);
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	461a      	mov	r2, r3
 800183a:	2107      	movs	r1, #7
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fec6 	bl	80015ce <nRF_WriteOneRegister>
			return STATUS_TX_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e011      	b.n	800186a <TX_Communication+0x80>
		}
		else if ((status & (1 << 5)) != 0)
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	f003 0320 	and.w	r3, r3, #32
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00b      	beq.n	8001868 <TX_Communication+0x7e>
		{
			status |= ((1 << TX_DS) | (1 << TX_FULL));
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 8001856:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(nrf, STATUS, status);
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	461a      	mov	r2, r3
 800185c:	2107      	movs	r1, #7
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff feb5 	bl	80015ce <nRF_WriteOneRegister>
			return STATUS_TX_OK;
 8001864:	2302      	movs	r3, #2
 8001866:	e000      	b.n	800186a <TX_Communication+0x80>
		}
	}
	return STATUS_TX_NONDEFINE;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <CONFIG_REG_Write>:
}



void CONFIG_REG_Write(NRF_HandleTypeDef *nrf, uint8_t data)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	460b      	mov	r3, r1
 800187c:	70fb      	strb	r3, [r7, #3]
	uint8_t read_reg;
	do
	{
		nRF_WriteOneRegister(nrf, CONFIG, data);
 800187e:	78fb      	ldrb	r3, [r7, #3]
 8001880:	461a      	mov	r2, r3
 8001882:	2100      	movs	r1, #0
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff fea2 	bl	80015ce <nRF_WriteOneRegister>
		nRF_ReadOneRegister(nrf, CONFIG, &read_reg);
 800188a:	f107 030f 	add.w	r3, r7, #15
 800188e:	461a      	mov	r2, r3
 8001890:	2100      	movs	r1, #0
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff febc 	bl	8001610 <nRF_ReadOneRegister>
	} while (read_reg != data);
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	429a      	cmp	r2, r3
 800189e:	d1ee      	bne.n	800187e <CONFIG_REG_Write+0xc>
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <RX_ADDR_P0_Write>:
{
	nRF_WriteOneRegister(nrf, EN_AA, pipe & 0x3F);
}

void RX_ADDR_P0_Write(NRF_HandleTypeDef *nrf, uint64_t data)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b08a      	sub	sp, #40	@ 0x28
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t buff[5];
	uint64_t temp = data;
 80018b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
 80018c2:	e016      	b.n	80018f2 <RX_ADDR_P0_Write+0x48>
	{
		buff[i] = (uint8_t)((temp) & 0xff);
 80018c4:	f897 1020 	ldrb.w	r1, [r7, #32]
 80018c8:	f107 0214 	add.w	r2, r7, #20
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	4413      	add	r3, r2
 80018d0:	460a      	mov	r2, r1
 80018d2:	701a      	strb	r2, [r3, #0]
		temp = temp >> 8;
 80018d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	0a02      	lsrs	r2, r0, #8
 80018e2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80018e6:	0a0b      	lsrs	r3, r1, #8
 80018e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	3301      	adds	r3, #1
 80018f0:	61fb      	str	r3, [r7, #28]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	dde5      	ble.n	80018c4 <RX_ADDR_P0_Write+0x1a>
	}
	nRF_WriteRegister(nrf, RX_ADDR_P0, buff, 5);
 80018f8:	f107 0214 	add.w	r2, r7, #20
 80018fc:	2305      	movs	r3, #5
 80018fe:	210a      	movs	r1, #10
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f7ff fe04 	bl	800150e <nRF_WriteRegister>
}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	@ 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <TX_ADDR_Write>:
	}
	nRF_WriteOneRegister(nrf, reg, data);
}

void TX_ADDR_Write(NRF_HandleTypeDef *nrf, uint64_t data)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b08a      	sub	sp, #40	@ 0x28
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t buff[5];
	uint64_t temp = data;
 800191a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800191e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	e016      	b.n	8001956 <TX_ADDR_Write+0x48>
	{
		buff[i] = (uint8_t)((temp) & 0xff);
 8001928:	f897 1020 	ldrb.w	r1, [r7, #32]
 800192c:	f107 0214 	add.w	r2, r7, #20
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	4413      	add	r3, r2
 8001934:	460a      	mov	r2, r1
 8001936:	701a      	strb	r2, [r3, #0]
		temp = temp >> 8;
 8001938:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	0a02      	lsrs	r2, r0, #8
 8001946:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800194a:	0a0b      	lsrs	r3, r1, #8
 800194c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	3301      	adds	r3, #1
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	2b04      	cmp	r3, #4
 800195a:	dde5      	ble.n	8001928 <TX_ADDR_Write+0x1a>
	}
	nRF_WriteRegister(nrf, TX_ADDR, buff, 5);
 800195c:	f107 0214 	add.w	r2, r7, #20
 8001960:	2305      	movs	r3, #5
 8001962:	2110      	movs	r1, #16
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f7ff fdd2 	bl	800150e <nRF_WriteRegister>
}
 800196a:	bf00      	nop
 800196c:	3728      	adds	r7, #40	@ 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <rccommand_process>:
{
    lastCmd = RC_CMD_NONE;
}

const char* rccommand_process(const RC_Input_t *input)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
    RC_Command_t cmd = RC_CMD_NONE;
 800197c:	2300      	movs	r3, #0
 800197e:	73fb      	strb	r3, [r7, #15]

    // Throttle (UP/DOWN)
    if (input->throttle > CENTER + THRESHOLD)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	f640 122c 	movw	r2, #2348	@ 0x92c
 8001988:	4293      	cmp	r3, r2
 800198a:	d904      	bls.n	8001996 <rccommand_process+0x22>
        cmd |= RC_CMD_UP;
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	e009      	b.n	80019aa <rccommand_process+0x36>
    else if (input->throttle < CENTER - THRESHOLD)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	f240 62d3 	movw	r2, #1747	@ 0x6d3
 800199e:	4293      	cmp	r3, r2
 80019a0:	d803      	bhi.n	80019aa <rccommand_process+0x36>
        cmd |= RC_CMD_DOWN;
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	73fb      	strb	r3, [r7, #15]

    // Yaw (rotate)
    if (input->yaw > CENTER + THRESHOLD)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	885b      	ldrh	r3, [r3, #2]
 80019ae:	f640 122c 	movw	r2, #2348	@ 0x92c
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d904      	bls.n	80019c0 <rccommand_process+0x4c>
        cmd |= RC_CMD_YAW_RIGHT;
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019bc:	73fb      	strb	r3, [r7, #15]
 80019be:	e009      	b.n	80019d4 <rccommand_process+0x60>
    else if (input->yaw < CENTER - THRESHOLD)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	885b      	ldrh	r3, [r3, #2]
 80019c4:	f240 62d3 	movw	r2, #1747	@ 0x6d3
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d803      	bhi.n	80019d4 <rccommand_process+0x60>
        cmd |= RC_CMD_YAW_LEFT;
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019d2:	73fb      	strb	r3, [r7, #15]

    // Pitch (FORWARD/BACKWARD)
    if (input->pitch > CENTER + THRESHOLD)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	889b      	ldrh	r3, [r3, #4]
 80019d8:	f640 122c 	movw	r2, #2348	@ 0x92c
 80019dc:	4293      	cmp	r3, r2
 80019de:	d904      	bls.n	80019ea <rccommand_process+0x76>
        cmd |= RC_CMD_FORWARD;
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	f043 0310 	orr.w	r3, r3, #16
 80019e6:	73fb      	strb	r3, [r7, #15]
 80019e8:	e009      	b.n	80019fe <rccommand_process+0x8a>
    else if (input->pitch < CENTER - THRESHOLD)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	889b      	ldrh	r3, [r3, #4]
 80019ee:	f240 62d3 	movw	r2, #1747	@ 0x6d3
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d803      	bhi.n	80019fe <rccommand_process+0x8a>
        cmd |= RC_CMD_BACKWARD;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	f043 0320 	orr.w	r3, r3, #32
 80019fc:	73fb      	strb	r3, [r7, #15]

    // Roll (LEFT/RIGHT)
    if (input->roll > CENTER + THRESHOLD)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	88db      	ldrh	r3, [r3, #6]
 8001a02:	f640 122c 	movw	r2, #2348	@ 0x92c
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d904      	bls.n	8001a14 <rccommand_process+0xa0>
        cmd |= RC_CMD_RIGHT;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	f043 0308 	orr.w	r3, r3, #8
 8001a10:	73fb      	strb	r3, [r7, #15]
 8001a12:	e009      	b.n	8001a28 <rccommand_process+0xb4>
    else if (input->roll < CENTER - THRESHOLD)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	88db      	ldrh	r3, [r3, #6]
 8001a18:	f240 62d3 	movw	r2, #1747	@ 0x6d3
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d803      	bhi.n	8001a28 <rccommand_process+0xb4>
        cmd |= RC_CMD_LEFT;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	73fb      	strb	r3, [r7, #15]

    static char buf[64];
        buf[0] = '\0';
 8001a28:	4b6e      	ldr	r3, [pc, #440]	@ (8001be4 <rccommand_process+0x270>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
        strcat(buf, "CMD:");
 8001a2e:	486d      	ldr	r0, [pc, #436]	@ (8001be4 <rccommand_process+0x270>)
 8001a30:	f7fe fbd6 	bl	80001e0 <strlen>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b6a      	ldr	r3, [pc, #424]	@ (8001be4 <rccommand_process+0x270>)
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a6a      	ldr	r2, [pc, #424]	@ (8001be8 <rccommand_process+0x274>)
 8001a3e:	6810      	ldr	r0, [r2, #0]
 8001a40:	6018      	str	r0, [r3, #0]
 8001a42:	7912      	ldrb	r2, [r2, #4]
 8001a44:	711a      	strb	r2, [r3, #4]

        if (cmd == RC_CMD_NONE) {
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10c      	bne.n	8001a66 <rccommand_process+0xf2>
            strcat(buf, "STOP");
 8001a4c:	4865      	ldr	r0, [pc, #404]	@ (8001be4 <rccommand_process+0x270>)
 8001a4e:	f7fe fbc7 	bl	80001e0 <strlen>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b63      	ldr	r3, [pc, #396]	@ (8001be4 <rccommand_process+0x270>)
 8001a58:	4413      	add	r3, r2
 8001a5a:	4a64      	ldr	r2, [pc, #400]	@ (8001bec <rccommand_process+0x278>)
 8001a5c:	6810      	ldr	r0, [r2, #0]
 8001a5e:	6018      	str	r0, [r3, #0]
 8001a60:	7912      	ldrb	r2, [r2, #4]
 8001a62:	711a      	strb	r2, [r3, #4]
 8001a64:	e0a3      	b.n	8001bae <rccommand_process+0x23a>
        } else {
            if (cmd & RC_CMD_UP)         strcat(buf, "UP|");
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d009      	beq.n	8001a84 <rccommand_process+0x110>
 8001a70:	485c      	ldr	r0, [pc, #368]	@ (8001be4 <rccommand_process+0x270>)
 8001a72:	f7fe fbb5 	bl	80001e0 <strlen>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b5a      	ldr	r3, [pc, #360]	@ (8001be4 <rccommand_process+0x270>)
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4a5c      	ldr	r2, [pc, #368]	@ (8001bf0 <rccommand_process+0x27c>)
 8001a80:	6810      	ldr	r0, [r2, #0]
 8001a82:	6018      	str	r0, [r3, #0]
            if (cmd & RC_CMD_DOWN)       strcat(buf, "DOWN|");
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00b      	beq.n	8001aa6 <rccommand_process+0x132>
 8001a8e:	4855      	ldr	r0, [pc, #340]	@ (8001be4 <rccommand_process+0x270>)
 8001a90:	f7fe fba6 	bl	80001e0 <strlen>
 8001a94:	4603      	mov	r3, r0
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b52      	ldr	r3, [pc, #328]	@ (8001be4 <rccommand_process+0x270>)
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4a55      	ldr	r2, [pc, #340]	@ (8001bf4 <rccommand_process+0x280>)
 8001a9e:	6810      	ldr	r0, [r2, #0]
 8001aa0:	6018      	str	r0, [r3, #0]
 8001aa2:	8892      	ldrh	r2, [r2, #4]
 8001aa4:	809a      	strh	r2, [r3, #4]
            if (cmd & RC_CMD_LEFT)       strcat(buf, "LEFT|");
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00b      	beq.n	8001ac8 <rccommand_process+0x154>
 8001ab0:	484c      	ldr	r0, [pc, #304]	@ (8001be4 <rccommand_process+0x270>)
 8001ab2:	f7fe fb95 	bl	80001e0 <strlen>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b4a      	ldr	r3, [pc, #296]	@ (8001be4 <rccommand_process+0x270>)
 8001abc:	4413      	add	r3, r2
 8001abe:	4a4e      	ldr	r2, [pc, #312]	@ (8001bf8 <rccommand_process+0x284>)
 8001ac0:	6810      	ldr	r0, [r2, #0]
 8001ac2:	6018      	str	r0, [r3, #0]
 8001ac4:	8892      	ldrh	r2, [r2, #4]
 8001ac6:	809a      	strh	r2, [r3, #4]
            if (cmd & RC_CMD_RIGHT)      strcat(buf, "RIGHT|");
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00d      	beq.n	8001aee <rccommand_process+0x17a>
 8001ad2:	4844      	ldr	r0, [pc, #272]	@ (8001be4 <rccommand_process+0x270>)
 8001ad4:	f7fe fb84 	bl	80001e0 <strlen>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	4b41      	ldr	r3, [pc, #260]	@ (8001be4 <rccommand_process+0x270>)
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a46      	ldr	r2, [pc, #280]	@ (8001bfc <rccommand_process+0x288>)
 8001ae2:	6810      	ldr	r0, [r2, #0]
 8001ae4:	6018      	str	r0, [r3, #0]
 8001ae6:	8891      	ldrh	r1, [r2, #4]
 8001ae8:	7992      	ldrb	r2, [r2, #6]
 8001aea:	8099      	strh	r1, [r3, #4]
 8001aec:	719a      	strb	r2, [r3, #6]
            if (cmd & RC_CMD_FORWARD)    strcat(buf, "FORWARD|");
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00e      	beq.n	8001b16 <rccommand_process+0x1a2>
 8001af8:	483a      	ldr	r0, [pc, #232]	@ (8001be4 <rccommand_process+0x270>)
 8001afa:	f7fe fb71 	bl	80001e0 <strlen>
 8001afe:	4603      	mov	r3, r0
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b38      	ldr	r3, [pc, #224]	@ (8001be4 <rccommand_process+0x270>)
 8001b04:	4413      	add	r3, r2
 8001b06:	493e      	ldr	r1, [pc, #248]	@ (8001c00 <rccommand_process+0x28c>)
 8001b08:	461a      	mov	r2, r3
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	cb03      	ldmia	r3!, {r0, r1}
 8001b0e:	6010      	str	r0, [r2, #0]
 8001b10:	6051      	str	r1, [r2, #4]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	7213      	strb	r3, [r2, #8]
            if (cmd & RC_CMD_BACKWARD)   strcat(buf, "BACKWARD|");
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	f003 0320 	and.w	r3, r3, #32
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00e      	beq.n	8001b3e <rccommand_process+0x1ca>
 8001b20:	4830      	ldr	r0, [pc, #192]	@ (8001be4 <rccommand_process+0x270>)
 8001b22:	f7fe fb5d 	bl	80001e0 <strlen>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001be4 <rccommand_process+0x270>)
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4935      	ldr	r1, [pc, #212]	@ (8001c04 <rccommand_process+0x290>)
 8001b30:	461a      	mov	r2, r3
 8001b32:	460b      	mov	r3, r1
 8001b34:	cb03      	ldmia	r3!, {r0, r1}
 8001b36:	6010      	str	r0, [r2, #0]
 8001b38:	6051      	str	r1, [r2, #4]
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	8113      	strh	r3, [r2, #8]
            if (cmd & RC_CMD_YAW_LEFT)   strcat(buf, "YAW_LEFT|");
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00e      	beq.n	8001b66 <rccommand_process+0x1f2>
 8001b48:	4826      	ldr	r0, [pc, #152]	@ (8001be4 <rccommand_process+0x270>)
 8001b4a:	f7fe fb49 	bl	80001e0 <strlen>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b24      	ldr	r3, [pc, #144]	@ (8001be4 <rccommand_process+0x270>)
 8001b54:	4413      	add	r3, r2
 8001b56:	492c      	ldr	r1, [pc, #176]	@ (8001c08 <rccommand_process+0x294>)
 8001b58:	461a      	mov	r2, r3
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	cb03      	ldmia	r3!, {r0, r1}
 8001b5e:	6010      	str	r0, [r2, #0]
 8001b60:	6051      	str	r1, [r2, #4]
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	8113      	strh	r3, [r2, #8]
            if (cmd & RC_CMD_YAW_RIGHT)  strcat(buf, "YAW_RIGHT|");
 8001b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	da10      	bge.n	8001b90 <rccommand_process+0x21c>
 8001b6e:	481d      	ldr	r0, [pc, #116]	@ (8001be4 <rccommand_process+0x270>)
 8001b70:	f7fe fb36 	bl	80001e0 <strlen>
 8001b74:	4603      	mov	r3, r0
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <rccommand_process+0x270>)
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4923      	ldr	r1, [pc, #140]	@ (8001c0c <rccommand_process+0x298>)
 8001b7e:	461a      	mov	r2, r3
 8001b80:	460b      	mov	r3, r1
 8001b82:	cb03      	ldmia	r3!, {r0, r1}
 8001b84:	6010      	str	r0, [r2, #0]
 8001b86:	6051      	str	r1, [r2, #4]
 8001b88:	8819      	ldrh	r1, [r3, #0]
 8001b8a:	789b      	ldrb	r3, [r3, #2]
 8001b8c:	8111      	strh	r1, [r2, #8]
 8001b8e:	7293      	strb	r3, [r2, #10]

            size_t len = strlen(buf);
 8001b90:	4814      	ldr	r0, [pc, #80]	@ (8001be4 <rccommand_process+0x270>)
 8001b92:	f7fe fb25 	bl	80001e0 <strlen>
 8001b96:	60b8      	str	r0, [r7, #8]
            if (buf[len - 1] == '|') buf[len - 1] = '\0';
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	4a11      	ldr	r2, [pc, #68]	@ (8001be4 <rccommand_process+0x270>)
 8001b9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ba0:	2b7c      	cmp	r3, #124	@ 0x7c
 8001ba2:	d104      	bne.n	8001bae <rccommand_process+0x23a>
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	4a0e      	ldr	r2, [pc, #56]	@ (8001be4 <rccommand_process+0x270>)
 8001baa:	2100      	movs	r1, #0
 8001bac:	54d1      	strb	r1, [r2, r3]
        }

        strcat(buf, "\n");
 8001bae:	480d      	ldr	r0, [pc, #52]	@ (8001be4 <rccommand_process+0x270>)
 8001bb0:	f7fe fb16 	bl	80001e0 <strlen>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <rccommand_process+0x270>)
 8001bba:	4413      	add	r3, r2
 8001bbc:	4914      	ldr	r1, [pc, #80]	@ (8001c10 <rccommand_process+0x29c>)
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	8013      	strh	r3, [r2, #0]

        // Chỉ trả chuỗi nếu có thay đổi
        if (cmd != lastCmd)
 8001bc6:	4b13      	ldr	r3, [pc, #76]	@ (8001c14 <rccommand_process+0x2a0>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d004      	beq.n	8001bda <rccommand_process+0x266>
        {
            lastCmd = cmd;
 8001bd0:	4a10      	ldr	r2, [pc, #64]	@ (8001c14 <rccommand_process+0x2a0>)
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	7013      	strb	r3, [r2, #0]
            return buf;
 8001bd6:	4b03      	ldr	r3, [pc, #12]	@ (8001be4 <rccommand_process+0x270>)
 8001bd8:	e000      	b.n	8001bdc <rccommand_process+0x268>
        }
        else
        {
            return NULL;
 8001bda:	2300      	movs	r3, #0
        }
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200005ec 	.word	0x200005ec
 8001be8:	08008c84 	.word	0x08008c84
 8001bec:	08008c8c 	.word	0x08008c8c
 8001bf0:	08008c94 	.word	0x08008c94
 8001bf4:	08008c98 	.word	0x08008c98
 8001bf8:	08008ca0 	.word	0x08008ca0
 8001bfc:	08008ca8 	.word	0x08008ca8
 8001c00:	08008cb0 	.word	0x08008cb0
 8001c04:	08008cbc 	.word	0x08008cbc
 8001c08:	08008cc8 	.word	0x08008cc8
 8001c0c:	08008cd4 	.word	0x08008cd4
 8001c10:	08008ce0 	.word	0x08008ce0
 8001c14:	200005e8 	.word	0x200005e8

08001c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <HAL_MspInit+0x54>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	4a11      	ldr	r2, [pc, #68]	@ (8001c6c <HAL_MspInit+0x54>)
 8001c28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <HAL_MspInit+0x54>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	603b      	str	r3, [r7, #0]
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <HAL_MspInit+0x54>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	4a0a      	ldr	r2, [pc, #40]	@ (8001c6c <HAL_MspInit+0x54>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4a:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <HAL_MspInit+0x54>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	210f      	movs	r1, #15
 8001c5a:	f06f 0001 	mvn.w	r0, #1
 8001c5e:	f001 f8c9 	bl	8002df4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800

08001c70 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	@ 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a33      	ldr	r2, [pc, #204]	@ (8001d5c <HAL_ADC_MspInit+0xec>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d15f      	bne.n	8001d52 <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	4b32      	ldr	r3, [pc, #200]	@ (8001d60 <HAL_ADC_MspInit+0xf0>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	4a31      	ldr	r2, [pc, #196]	@ (8001d60 <HAL_ADC_MspInit+0xf0>)
 8001c9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d60 <HAL_ADC_MspInit+0xf0>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d60 <HAL_ADC_MspInit+0xf0>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8001d60 <HAL_ADC_MspInit+0xf0>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cbe:	4b28      	ldr	r3, [pc, #160]	@ (8001d60 <HAL_ADC_MspInit+0xf0>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001cca:	231f      	movs	r3, #31
 8001ccc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4821      	ldr	r0, [pc, #132]	@ (8001d64 <HAL_ADC_MspInit+0xf4>)
 8001cde:	f001 fc23 	bl	8003528 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ce2:	4b21      	ldr	r3, [pc, #132]	@ (8001d68 <HAL_ADC_MspInit+0xf8>)
 8001ce4:	4a21      	ldr	r2, [pc, #132]	@ (8001d6c <HAL_ADC_MspInit+0xfc>)
 8001ce6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d68 <HAL_ADC_MspInit+0xf8>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cee:	4b1e      	ldr	r3, [pc, #120]	@ (8001d68 <HAL_ADC_MspInit+0xf8>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d68 <HAL_ADC_MspInit+0xf8>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001d68 <HAL_ADC_MspInit+0xf8>)
 8001cfc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d00:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d02:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <HAL_ADC_MspInit+0xf8>)
 8001d04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d08:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d0a:	4b17      	ldr	r3, [pc, #92]	@ (8001d68 <HAL_ADC_MspInit+0xf8>)
 8001d0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <HAL_ADC_MspInit+0xf8>)
 8001d14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d18:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d1a:	4b13      	ldr	r3, [pc, #76]	@ (8001d68 <HAL_ADC_MspInit+0xf8>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d20:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <HAL_ADC_MspInit+0xf8>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d26:	4810      	ldr	r0, [pc, #64]	@ (8001d68 <HAL_ADC_MspInit+0xf8>)
 8001d28:	f001 f88e 	bl	8002e48 <HAL_DMA_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001d32:	f7ff fb91 	bl	8001458 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a0b      	ldr	r2, [pc, #44]	@ (8001d68 <HAL_ADC_MspInit+0xf8>)
 8001d3a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d68 <HAL_ADC_MspInit+0xf8>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2105      	movs	r1, #5
 8001d46:	2012      	movs	r0, #18
 8001d48:	f001 f854 	bl	8002df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d4c:	2012      	movs	r0, #18
 8001d4e:	f001 f86d 	bl	8002e2c <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d52:	bf00      	nop
 8001d54:	3728      	adds	r7, #40	@ 0x28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40012000 	.word	0x40012000
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40020000 	.word	0x40020000
 8001d68:	20000440 	.word	0x20000440
 8001d6c:	40026410 	.word	0x40026410

08001d70 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08a      	sub	sp, #40	@ 0x28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a19      	ldr	r2, [pc, #100]	@ (8001df4 <HAL_I2C_MspInit+0x84>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d12b      	bne.n	8001dea <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	4b18      	ldr	r3, [pc, #96]	@ (8001df8 <HAL_I2C_MspInit+0x88>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a17      	ldr	r2, [pc, #92]	@ (8001df8 <HAL_I2C_MspInit+0x88>)
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b15      	ldr	r3, [pc, #84]	@ (8001df8 <HAL_I2C_MspInit+0x88>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dae:	23c0      	movs	r3, #192	@ 0xc0
 8001db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db2:	2312      	movs	r3, #18
 8001db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	480c      	ldr	r0, [pc, #48]	@ (8001dfc <HAL_I2C_MspInit+0x8c>)
 8001dca:	f001 fbad 	bl	8003528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b09      	ldr	r3, [pc, #36]	@ (8001df8 <HAL_I2C_MspInit+0x88>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	4a08      	ldr	r2, [pc, #32]	@ (8001df8 <HAL_I2C_MspInit+0x88>)
 8001dd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dde:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <HAL_I2C_MspInit+0x88>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001dea:	bf00      	nop
 8001dec:	3728      	adds	r7, #40	@ 0x28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40005400 	.word	0x40005400
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40020400 	.word	0x40020400

08001e00 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	@ 0x30
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a32      	ldr	r2, [pc, #200]	@ (8001ee8 <HAL_SPI_MspInit+0xe8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d12c      	bne.n	8001e7c <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
 8001e26:	4b31      	ldr	r3, [pc, #196]	@ (8001eec <HAL_SPI_MspInit+0xec>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	4a30      	ldr	r2, [pc, #192]	@ (8001eec <HAL_SPI_MspInit+0xec>)
 8001e2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e32:	4b2e      	ldr	r3, [pc, #184]	@ (8001eec <HAL_SPI_MspInit+0xec>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e3a:	61bb      	str	r3, [r7, #24]
 8001e3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	4b2a      	ldr	r3, [pc, #168]	@ (8001eec <HAL_SPI_MspInit+0xec>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	4a29      	ldr	r2, [pc, #164]	@ (8001eec <HAL_SPI_MspInit+0xec>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4e:	4b27      	ldr	r3, [pc, #156]	@ (8001eec <HAL_SPI_MspInit+0xec>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e5a:	23e0      	movs	r3, #224	@ 0xe0
 8001e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e6a:	2305      	movs	r3, #5
 8001e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	4619      	mov	r1, r3
 8001e74:	481e      	ldr	r0, [pc, #120]	@ (8001ef0 <HAL_SPI_MspInit+0xf0>)
 8001e76:	f001 fb57 	bl	8003528 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e7a:	e030      	b.n	8001ede <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI3)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef4 <HAL_SPI_MspInit+0xf4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d12b      	bne.n	8001ede <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	4b18      	ldr	r3, [pc, #96]	@ (8001eec <HAL_SPI_MspInit+0xec>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	4a17      	ldr	r2, [pc, #92]	@ (8001eec <HAL_SPI_MspInit+0xec>)
 8001e90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e96:	4b15      	ldr	r3, [pc, #84]	@ (8001eec <HAL_SPI_MspInit+0xec>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <HAL_SPI_MspInit+0xec>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	4a10      	ldr	r2, [pc, #64]	@ (8001eec <HAL_SPI_MspInit+0xec>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001eec <HAL_SPI_MspInit+0xec>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001ebe:	2338      	movs	r3, #56	@ 0x38
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ece:	2306      	movs	r3, #6
 8001ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4807      	ldr	r0, [pc, #28]	@ (8001ef8 <HAL_SPI_MspInit+0xf8>)
 8001eda:	f001 fb25 	bl	8003528 <HAL_GPIO_Init>
}
 8001ede:	bf00      	nop
 8001ee0:	3730      	adds	r7, #48	@ 0x30
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40013000 	.word	0x40013000
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	40003c00 	.word	0x40003c00
 8001ef8:	40020400 	.word	0x40020400

08001efc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08c      	sub	sp, #48	@ 0x30
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	4b2e      	ldr	r3, [pc, #184]	@ (8001fcc <HAL_InitTick+0xd0>)
 8001f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f14:	4a2d      	ldr	r2, [pc, #180]	@ (8001fcc <HAL_InitTick+0xd0>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fcc <HAL_InitTick+0xd0>)
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f28:	f107 020c 	add.w	r2, r7, #12
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f002 fdbc 	bl	8004ab0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f38:	f002 fda6 	bl	8004a88 <HAL_RCC_GetPCLK2Freq>
 8001f3c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f40:	4a23      	ldr	r2, [pc, #140]	@ (8001fd0 <HAL_InitTick+0xd4>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	0c9b      	lsrs	r3, r3, #18
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f4c:	4b21      	ldr	r3, [pc, #132]	@ (8001fd4 <HAL_InitTick+0xd8>)
 8001f4e:	4a22      	ldr	r2, [pc, #136]	@ (8001fd8 <HAL_InitTick+0xdc>)
 8001f50:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f52:	4b20      	ldr	r3, [pc, #128]	@ (8001fd4 <HAL_InitTick+0xd8>)
 8001f54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f58:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd4 <HAL_InitTick+0xd8>)
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f60:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd4 <HAL_InitTick+0xd8>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f66:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd4 <HAL_InitTick+0xd8>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6c:	4b19      	ldr	r3, [pc, #100]	@ (8001fd4 <HAL_InitTick+0xd8>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001f72:	4818      	ldr	r0, [pc, #96]	@ (8001fd4 <HAL_InitTick+0xd8>)
 8001f74:	f003 fba0 	bl	80056b8 <HAL_TIM_Base_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001f7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d11b      	bne.n	8001fbe <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001f86:	4813      	ldr	r0, [pc, #76]	@ (8001fd4 <HAL_InitTick+0xd8>)
 8001f88:	f003 fbf0 	bl	800576c <HAL_TIM_Base_Start_IT>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001f92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d111      	bne.n	8001fbe <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f9a:	2019      	movs	r0, #25
 8001f9c:	f000 ff46 	bl	8002e2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b0f      	cmp	r3, #15
 8001fa4:	d808      	bhi.n	8001fb8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	2019      	movs	r0, #25
 8001fac:	f000 ff22 	bl	8002df4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001fdc <HAL_InitTick+0xe0>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e002      	b.n	8001fbe <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001fbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3730      	adds	r7, #48	@ 0x30
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	431bde83 	.word	0x431bde83
 8001fd4:	2000062c 	.word	0x2000062c
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	200000d0 	.word	0x200000d0

08001fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <NMI_Handler+0x4>

08001fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <HardFault_Handler+0x4>

08001ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <MemManage_Handler+0x4>

08001ff8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <BusFault_Handler+0x4>

08002000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <UsageFault_Handler+0x4>

08002008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800201c:	4802      	ldr	r0, [pc, #8]	@ (8002028 <ADC_IRQHandler+0x10>)
 800201e:	f000 f954 	bl	80022ca <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200003f8 	.word	0x200003f8

0800202c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SELECT_Pin);
 8002030:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002034:	f001 fc2e 	bl	8003894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_Pin);
 8002038:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800203c:	f001 fc2a 	bl	8003894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}

08002044 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002048:	4802      	ldr	r0, [pc, #8]	@ (8002054 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800204a:	f003 fbf1 	bl	8005830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	2000062c 	.word	0x2000062c

08002058 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_Pin);
 800205c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002060:	f001 fc18 	bl	8003894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HOME_Pin);
 8002064:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002068:	f001 fc14 	bl	8003894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800206c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002070:	f001 fc10 	bl	8003894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BACK_Pin);
 8002074:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002078:	f001 fc0c 	bl	8003894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}

08002080 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002084:	4802      	ldr	r0, [pc, #8]	@ (8002090 <DMA2_Stream0_IRQHandler+0x10>)
 8002086:	f000 ffe5 	bl	8003054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000440 	.word	0x20000440

08002094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800209c:	4a14      	ldr	r2, [pc, #80]	@ (80020f0 <_sbrk+0x5c>)
 800209e:	4b15      	ldr	r3, [pc, #84]	@ (80020f4 <_sbrk+0x60>)
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a8:	4b13      	ldr	r3, [pc, #76]	@ (80020f8 <_sbrk+0x64>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b0:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <_sbrk+0x64>)
 80020b2:	4a12      	ldr	r2, [pc, #72]	@ (80020fc <_sbrk+0x68>)
 80020b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020b6:	4b10      	ldr	r3, [pc, #64]	@ (80020f8 <_sbrk+0x64>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d207      	bcs.n	80020d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c4:	f006 f8d8 	bl	8008278 <__errno>
 80020c8:	4603      	mov	r3, r0
 80020ca:	220c      	movs	r2, #12
 80020cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
 80020d2:	e009      	b.n	80020e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d4:	4b08      	ldr	r3, [pc, #32]	@ (80020f8 <_sbrk+0x64>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020da:	4b07      	ldr	r3, [pc, #28]	@ (80020f8 <_sbrk+0x64>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	4a05      	ldr	r2, [pc, #20]	@ (80020f8 <_sbrk+0x64>)
 80020e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020e6:	68fb      	ldr	r3, [r7, #12]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20020000 	.word	0x20020000
 80020f4:	00000400 	.word	0x00000400
 80020f8:	20000674 	.word	0x20000674
 80020fc:	20004518 	.word	0x20004518

08002100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002104:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <SystemInit+0x20>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210a:	4a05      	ldr	r2, [pc, #20]	@ (8002120 <SystemInit+0x20>)
 800210c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002110:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002124:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800215c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002128:	f7ff ffea 	bl	8002100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800212c:	480c      	ldr	r0, [pc, #48]	@ (8002160 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800212e:	490d      	ldr	r1, [pc, #52]	@ (8002164 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002130:	4a0d      	ldr	r2, [pc, #52]	@ (8002168 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002134:	e002      	b.n	800213c <LoopCopyDataInit>

08002136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800213a:	3304      	adds	r3, #4

0800213c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800213c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800213e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002140:	d3f9      	bcc.n	8002136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002142:	4a0a      	ldr	r2, [pc, #40]	@ (800216c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002144:	4c0a      	ldr	r4, [pc, #40]	@ (8002170 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002148:	e001      	b.n	800214e <LoopFillZerobss>

0800214a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800214a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800214c:	3204      	adds	r2, #4

0800214e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800214e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002150:	d3fb      	bcc.n	800214a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002152:	f006 f897 	bl	8008284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002156:	f7fe fdcb 	bl	8000cf0 <main>
  bx  lr    
 800215a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800215c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002164:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8002168:	08008d50 	.word	0x08008d50
  ldr r2, =_sbss
 800216c:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8002170:	20004518 	.word	0x20004518

08002174 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002174:	e7fe      	b.n	8002174 <DMA1_Stream0_IRQHandler>
	...

08002178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800217c:	4b0e      	ldr	r3, [pc, #56]	@ (80021b8 <HAL_Init+0x40>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0d      	ldr	r2, [pc, #52]	@ (80021b8 <HAL_Init+0x40>)
 8002182:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002188:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <HAL_Init+0x40>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <HAL_Init+0x40>)
 800218e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002194:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <HAL_Init+0x40>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a07      	ldr	r2, [pc, #28]	@ (80021b8 <HAL_Init+0x40>)
 800219a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800219e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a0:	2003      	movs	r0, #3
 80021a2:	f000 fe1c 	bl	8002dde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a6:	200f      	movs	r0, #15
 80021a8:	f7ff fea8 	bl	8001efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ac:	f7ff fd34 	bl	8001c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023c00 	.word	0x40023c00

080021bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <HAL_IncTick+0x20>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <HAL_IncTick+0x24>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	4a04      	ldr	r2, [pc, #16]	@ (80021e0 <HAL_IncTick+0x24>)
 80021ce:	6013      	str	r3, [r2, #0]
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	200000d4 	.word	0x200000d4
 80021e0:	20000678 	.word	0x20000678

080021e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return uwTick;
 80021e8:	4b03      	ldr	r3, [pc, #12]	@ (80021f8 <HAL_GetTick+0x14>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000678 	.word	0x20000678

080021fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002204:	f7ff ffee 	bl	80021e4 <HAL_GetTick>
 8002208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002214:	d005      	beq.n	8002222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002216:	4b0a      	ldr	r3, [pc, #40]	@ (8002240 <HAL_Delay+0x44>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002222:	bf00      	nop
 8002224:	f7ff ffde 	bl	80021e4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	429a      	cmp	r2, r3
 8002232:	d8f7      	bhi.n	8002224 <HAL_Delay+0x28>
  {
  }
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200000d4 	.word	0x200000d4

08002244 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e033      	b.n	80022c2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	2b00      	cmp	r3, #0
 8002260:	d109      	bne.n	8002276 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff fd04 	bl	8001c70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	2b00      	cmp	r3, #0
 8002280:	d118      	bne.n	80022b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800228a:	f023 0302 	bic.w	r3, r3, #2
 800228e:	f043 0202 	orr.w	r2, r3, #2
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 fb6c 	bl	8002974 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	f023 0303 	bic.w	r3, r3, #3
 80022aa:	f043 0201 	orr.w	r2, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80022b2:	e001      	b.n	80022b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d049      	beq.n	8002394 <HAL_ADC_IRQHandler+0xca>
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d046      	beq.n	8002394 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	2b00      	cmp	r3, #0
 8002310:	d105      	bne.n	800231e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d12b      	bne.n	8002384 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002330:	2b00      	cmp	r3, #0
 8002332:	d127      	bne.n	8002384 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800233e:	2b00      	cmp	r3, #0
 8002340:	d006      	beq.n	8002350 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800234c:	2b00      	cmp	r3, #0
 800234e:	d119      	bne.n	8002384 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0220 	bic.w	r2, r2, #32
 800235e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d105      	bne.n	8002384 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	f043 0201 	orr.w	r2, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7fe fc8b 	bl	8000ca0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f06f 0212 	mvn.w	r2, #18
 8002392:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023a2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d057      	beq.n	800245a <HAL_ADC_IRQHandler+0x190>
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d054      	beq.n	800245a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d105      	bne.n	80023c8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d139      	bne.n	800244a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023dc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d006      	beq.n	80023f2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d12b      	bne.n	800244a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d124      	bne.n	800244a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800240a:	2b00      	cmp	r3, #0
 800240c:	d11d      	bne.n	800244a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002412:	2b00      	cmp	r3, #0
 8002414:	d119      	bne.n	800244a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002424:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243a:	2b00      	cmp	r3, #0
 800243c:	d105      	bne.n	800244a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	f043 0201 	orr.w	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fc10 	bl	8002c70 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 020c 	mvn.w	r2, #12
 8002458:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002468:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d017      	beq.n	80024a0 <HAL_ADC_IRQHandler+0x1d6>
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d014      	beq.n	80024a0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b01      	cmp	r3, #1
 8002482:	d10d      	bne.n	80024a0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002488:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f929 	bl	80026e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f06f 0201 	mvn.w	r2, #1
 800249e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 0320 	and.w	r3, r3, #32
 80024a6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024ae:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d015      	beq.n	80024e2 <HAL_ADC_IRQHandler+0x218>
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d012      	beq.n	80024e2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c0:	f043 0202 	orr.w	r2, r3, #2
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f06f 0220 	mvn.w	r2, #32
 80024d0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f912 	bl	80026fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0220 	mvn.w	r2, #32
 80024e0:	601a      	str	r2, [r3, #0]
  }
}
 80024e2:	bf00      	nop
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_ADC_Start_DMA+0x22>
 800250a:	2302      	movs	r3, #2
 800250c:	e0d0      	b.n	80026b0 <HAL_ADC_Start_DMA+0x1c4>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d018      	beq.n	8002556 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002534:	4b60      	ldr	r3, [pc, #384]	@ (80026b8 <HAL_ADC_Start_DMA+0x1cc>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a60      	ldr	r2, [pc, #384]	@ (80026bc <HAL_ADC_Start_DMA+0x1d0>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	0c9a      	lsrs	r2, r3, #18
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002548:	e002      	b.n	8002550 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	3b01      	subs	r3, #1
 800254e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f9      	bne.n	800254a <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002560:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002564:	d107      	bne.n	8002576 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002574:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b01      	cmp	r3, #1
 8002582:	f040 8088 	bne.w	8002696 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800258e:	f023 0301 	bic.w	r3, r3, #1
 8002592:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025c4:	d106      	bne.n	80025d4 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ca:	f023 0206 	bic.w	r2, r3, #6
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	645a      	str	r2, [r3, #68]	@ 0x44
 80025d2:	e002      	b.n	80025da <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025e2:	4b37      	ldr	r3, [pc, #220]	@ (80026c0 <HAL_ADC_Start_DMA+0x1d4>)
 80025e4:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ea:	4a36      	ldr	r2, [pc, #216]	@ (80026c4 <HAL_ADC_Start_DMA+0x1d8>)
 80025ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f2:	4a35      	ldr	r2, [pc, #212]	@ (80026c8 <HAL_ADC_Start_DMA+0x1dc>)
 80025f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025fa:	4a34      	ldr	r2, [pc, #208]	@ (80026cc <HAL_ADC_Start_DMA+0x1e0>)
 80025fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002606:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002616:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002626:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	334c      	adds	r3, #76	@ 0x4c
 8002632:	4619      	mov	r1, r3
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f000 fcb4 	bl	8002fa4 <HAL_DMA_Start_IT>
 800263c:	4603      	mov	r3, r0
 800263e:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10f      	bne.n	800266c <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d129      	bne.n	80026ae <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	e020      	b.n	80026ae <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a17      	ldr	r2, [pc, #92]	@ (80026d0 <HAL_ADC_Start_DMA+0x1e4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d11b      	bne.n	80026ae <HAL_ADC_Start_DMA+0x1c2>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d114      	bne.n	80026ae <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	e00b      	b.n	80026ae <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	f043 0210 	orr.w	r2, r3, #16
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a6:	f043 0201 	orr.w	r2, r3, #1
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80026ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3720      	adds	r7, #32
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	200000cc 	.word	0x200000cc
 80026bc:	431bde83 	.word	0x431bde83
 80026c0:	40012300 	.word	0x40012300
 80026c4:	08002b6d 	.word	0x08002b6d
 80026c8:	08002c27 	.word	0x08002c27
 80026cc:	08002c43 	.word	0x08002c43
 80026d0:	40012000 	.word	0x40012000

080026d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_ADC_ConfigChannel+0x1c>
 8002728:	2302      	movs	r3, #2
 800272a:	e113      	b.n	8002954 <HAL_ADC_ConfigChannel+0x244>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b09      	cmp	r3, #9
 800273a:	d925      	bls.n	8002788 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68d9      	ldr	r1, [r3, #12]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	b29b      	uxth	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	4613      	mov	r3, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	4413      	add	r3, r2
 8002750:	3b1e      	subs	r3, #30
 8002752:	2207      	movs	r2, #7
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43da      	mvns	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	400a      	ands	r2, r1
 8002760:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68d9      	ldr	r1, [r3, #12]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	b29b      	uxth	r3, r3
 8002772:	4618      	mov	r0, r3
 8002774:	4603      	mov	r3, r0
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4403      	add	r3, r0
 800277a:	3b1e      	subs	r3, #30
 800277c:	409a      	lsls	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	e022      	b.n	80027ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6919      	ldr	r1, [r3, #16]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	2207      	movs	r2, #7
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43da      	mvns	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	400a      	ands	r2, r1
 80027aa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6919      	ldr	r1, [r3, #16]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	4618      	mov	r0, r3
 80027be:	4603      	mov	r3, r0
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	4403      	add	r3, r0
 80027c4:	409a      	lsls	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b06      	cmp	r3, #6
 80027d4:	d824      	bhi.n	8002820 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	3b05      	subs	r3, #5
 80027e8:	221f      	movs	r2, #31
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43da      	mvns	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	400a      	ands	r2, r1
 80027f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	4618      	mov	r0, r3
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	3b05      	subs	r3, #5
 8002812:	fa00 f203 	lsl.w	r2, r0, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	635a      	str	r2, [r3, #52]	@ 0x34
 800281e:	e04c      	b.n	80028ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b0c      	cmp	r3, #12
 8002826:	d824      	bhi.n	8002872 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	3b23      	subs	r3, #35	@ 0x23
 800283a:	221f      	movs	r2, #31
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43da      	mvns	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	400a      	ands	r2, r1
 8002848:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	b29b      	uxth	r3, r3
 8002856:	4618      	mov	r0, r3
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	3b23      	subs	r3, #35	@ 0x23
 8002864:	fa00 f203 	lsl.w	r2, r0, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002870:	e023      	b.n	80028ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	3b41      	subs	r3, #65	@ 0x41
 8002884:	221f      	movs	r2, #31
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43da      	mvns	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	400a      	ands	r2, r1
 8002892:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	4618      	mov	r0, r3
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	3b41      	subs	r3, #65	@ 0x41
 80028ae:	fa00 f203 	lsl.w	r2, r0, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028ba:	4b29      	ldr	r3, [pc, #164]	@ (8002960 <HAL_ADC_ConfigChannel+0x250>)
 80028bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a28      	ldr	r2, [pc, #160]	@ (8002964 <HAL_ADC_ConfigChannel+0x254>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d10f      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x1d8>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b12      	cmp	r3, #18
 80028ce:	d10b      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002964 <HAL_ADC_ConfigChannel+0x254>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d12b      	bne.n	800294a <HAL_ADC_ConfigChannel+0x23a>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002968 <HAL_ADC_ConfigChannel+0x258>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d003      	beq.n	8002904 <HAL_ADC_ConfigChannel+0x1f4>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b11      	cmp	r3, #17
 8002902:	d122      	bne.n	800294a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a11      	ldr	r2, [pc, #68]	@ (8002968 <HAL_ADC_ConfigChannel+0x258>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d111      	bne.n	800294a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002926:	4b11      	ldr	r3, [pc, #68]	@ (800296c <HAL_ADC_ConfigChannel+0x25c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a11      	ldr	r2, [pc, #68]	@ (8002970 <HAL_ADC_ConfigChannel+0x260>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	0c9a      	lsrs	r2, r3, #18
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800293c:	e002      	b.n	8002944 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	3b01      	subs	r3, #1
 8002942:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f9      	bne.n	800293e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	40012300 	.word	0x40012300
 8002964:	40012000 	.word	0x40012000
 8002968:	10000012 	.word	0x10000012
 800296c:	200000cc 	.word	0x200000cc
 8002970:	431bde83 	.word	0x431bde83

08002974 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800297c:	4b79      	ldr	r3, [pc, #484]	@ (8002b64 <ADC_Init+0x1f0>)
 800297e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	431a      	orrs	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6859      	ldr	r1, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	021a      	lsls	r2, r3, #8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80029cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6859      	ldr	r1, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6899      	ldr	r1, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a06:	4a58      	ldr	r2, [pc, #352]	@ (8002b68 <ADC_Init+0x1f4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d022      	beq.n	8002a52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6899      	ldr	r1, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6899      	ldr	r1, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	e00f      	b.n	8002a72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a70:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0202 	bic.w	r2, r2, #2
 8002a80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6899      	ldr	r1, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	7e1b      	ldrb	r3, [r3, #24]
 8002a8c:	005a      	lsls	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d01b      	beq.n	8002ad8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002aae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002abe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6859      	ldr	r1, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aca:	3b01      	subs	r3, #1
 8002acc:	035a      	lsls	r2, r3, #13
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	e007      	b.n	8002ae8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ae6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002af6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	051a      	lsls	r2, r3, #20
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6899      	ldr	r1, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b2a:	025a      	lsls	r2, r3, #9
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6899      	ldr	r1, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	029a      	lsls	r2, r3, #10
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	609a      	str	r2, [r3, #8]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	40012300 	.word	0x40012300
 8002b68:	0f000001 	.word	0x0f000001

08002b6c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b78:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d13c      	bne.n	8002c00 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d12b      	bne.n	8002bf8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d127      	bne.n	8002bf8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bae:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d006      	beq.n	8002bc4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d119      	bne.n	8002bf8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0220 	bic.w	r2, r2, #32
 8002bd2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d105      	bne.n	8002bf8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf0:	f043 0201 	orr.w	r2, r3, #1
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f7fe f851 	bl	8000ca0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002bfe:	e00e      	b.n	8002c1e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f7ff fd75 	bl	80026fc <HAL_ADC_ErrorCallback>
}
 8002c12:	e004      	b.n	8002c1e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	4798      	blx	r3
}
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c32:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f7ff fd4d 	bl	80026d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c3a:	bf00      	nop
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2240      	movs	r2, #64	@ 0x40
 8002c54:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5a:	f043 0204 	orr.w	r2, r3, #4
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f7ff fd4a 	bl	80026fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c68:	bf00      	nop
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c94:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cb6:	4a04      	ldr	r2, [pc, #16]	@ (8002cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	60d3      	str	r3, [r2, #12]
}
 8002cbc:	bf00      	nop
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd0:	4b04      	ldr	r3, [pc, #16]	@ (8002ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	0a1b      	lsrs	r3, r3, #8
 8002cd6:	f003 0307 	and.w	r3, r3, #7
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	db0b      	blt.n	8002d12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	f003 021f 	and.w	r2, r3, #31
 8002d00:	4907      	ldr	r1, [pc, #28]	@ (8002d20 <__NVIC_EnableIRQ+0x38>)
 8002d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	2001      	movs	r0, #1
 8002d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000e100 	.word	0xe000e100

08002d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	6039      	str	r1, [r7, #0]
 8002d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	db0a      	blt.n	8002d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	490c      	ldr	r1, [pc, #48]	@ (8002d70 <__NVIC_SetPriority+0x4c>)
 8002d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d42:	0112      	lsls	r2, r2, #4
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	440b      	add	r3, r1
 8002d48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d4c:	e00a      	b.n	8002d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4908      	ldr	r1, [pc, #32]	@ (8002d74 <__NVIC_SetPriority+0x50>)
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	3b04      	subs	r3, #4
 8002d5c:	0112      	lsls	r2, r2, #4
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	440b      	add	r3, r1
 8002d62:	761a      	strb	r2, [r3, #24]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000e100 	.word	0xe000e100
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b089      	sub	sp, #36	@ 0x24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f1c3 0307 	rsb	r3, r3, #7
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	bf28      	it	cs
 8002d96:	2304      	movcs	r3, #4
 8002d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	2b06      	cmp	r3, #6
 8002da0:	d902      	bls.n	8002da8 <NVIC_EncodePriority+0x30>
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3b03      	subs	r3, #3
 8002da6:	e000      	b.n	8002daa <NVIC_EncodePriority+0x32>
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dac:	f04f 32ff 	mov.w	r2, #4294967295
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43da      	mvns	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	401a      	ands	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dca:	43d9      	mvns	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd0:	4313      	orrs	r3, r2
         );
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3724      	adds	r7, #36	@ 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ff4c 	bl	8002c84 <__NVIC_SetPriorityGrouping>
}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e06:	f7ff ff61 	bl	8002ccc <__NVIC_GetPriorityGrouping>
 8002e0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	6978      	ldr	r0, [r7, #20]
 8002e12:	f7ff ffb1 	bl	8002d78 <NVIC_EncodePriority>
 8002e16:	4602      	mov	r2, r0
 8002e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff ff80 	bl	8002d24 <__NVIC_SetPriority>
}
 8002e24:	bf00      	nop
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ff54 	bl	8002ce8 <__NVIC_EnableIRQ>
}
 8002e40:	bf00      	nop
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e54:	f7ff f9c6 	bl	80021e4 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e099      	b.n	8002f98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e84:	e00f      	b.n	8002ea6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e86:	f7ff f9ad 	bl	80021e4 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b05      	cmp	r3, #5
 8002e92:	d908      	bls.n	8002ea6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e078      	b.n	8002f98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1e8      	bne.n	8002e86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	4b38      	ldr	r3, [pc, #224]	@ (8002fa0 <HAL_DMA_Init+0x158>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d107      	bne.n	8002f10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f023 0307 	bic.w	r3, r3, #7
 8002f26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d117      	bne.n	8002f6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00e      	beq.n	8002f6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fa6f 	bl	8003430 <DMA_CheckFifoParam>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2240      	movs	r2, #64	@ 0x40
 8002f5c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f66:	2301      	movs	r3, #1
 8002f68:	e016      	b.n	8002f98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fa26 	bl	80033c4 <DMA_CalcBaseAndBitshift>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f80:	223f      	movs	r2, #63	@ 0x3f
 8002f82:	409a      	lsls	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	f010803f 	.word	0xf010803f

08002fa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_DMA_Start_IT+0x26>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e040      	b.n	800304c <HAL_DMA_Start_IT+0xa8>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d12f      	bne.n	800303e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f9b8 	bl	8003368 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffc:	223f      	movs	r2, #63	@ 0x3f
 8002ffe:	409a      	lsls	r2, r3
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0216 	orr.w	r2, r2, #22
 8003012:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003018:	2b00      	cmp	r3, #0
 800301a:	d007      	beq.n	800302c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0208 	orr.w	r2, r2, #8
 800302a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	e005      	b.n	800304a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003046:	2302      	movs	r3, #2
 8003048:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800304a:	7dfb      	ldrb	r3, [r7, #23]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003060:	4b8e      	ldr	r3, [pc, #568]	@ (800329c <HAL_DMA_IRQHandler+0x248>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a8e      	ldr	r2, [pc, #568]	@ (80032a0 <HAL_DMA_IRQHandler+0x24c>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	0a9b      	lsrs	r3, r3, #10
 800306c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003072:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307e:	2208      	movs	r2, #8
 8003080:	409a      	lsls	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4013      	ands	r3, r2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d01a      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d013      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0204 	bic.w	r2, r2, #4
 80030a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ac:	2208      	movs	r2, #8
 80030ae:	409a      	lsls	r2, r3
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b8:	f043 0201 	orr.w	r2, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c4:	2201      	movs	r2, #1
 80030c6:	409a      	lsls	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d012      	beq.n	80030f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00b      	beq.n	80030f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e2:	2201      	movs	r2, #1
 80030e4:	409a      	lsls	r2, r3
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ee:	f043 0202 	orr.w	r2, r3, #2
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fa:	2204      	movs	r2, #4
 80030fc:	409a      	lsls	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4013      	ands	r3, r2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d012      	beq.n	800312c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00b      	beq.n	800312c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003118:	2204      	movs	r2, #4
 800311a:	409a      	lsls	r2, r3
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003124:	f043 0204 	orr.w	r2, r3, #4
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003130:	2210      	movs	r2, #16
 8003132:	409a      	lsls	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4013      	ands	r3, r2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d043      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d03c      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314e:	2210      	movs	r2, #16
 8003150:	409a      	lsls	r2, r3
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d018      	beq.n	8003196 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d108      	bne.n	8003184 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d024      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4798      	blx	r3
 8003182:	e01f      	b.n	80031c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003188:	2b00      	cmp	r3, #0
 800318a:	d01b      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	4798      	blx	r3
 8003194:	e016      	b.n	80031c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d107      	bne.n	80031b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0208 	bic.w	r2, r2, #8
 80031b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c8:	2220      	movs	r2, #32
 80031ca:	409a      	lsls	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 808f 	beq.w	80032f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 8087 	beq.w	80032f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ea:	2220      	movs	r2, #32
 80031ec:	409a      	lsls	r2, r3
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b05      	cmp	r3, #5
 80031fc:	d136      	bne.n	800326c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0216 	bic.w	r2, r2, #22
 800320c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800321c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	d103      	bne.n	800322e <HAL_DMA_IRQHandler+0x1da>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0208 	bic.w	r2, r2, #8
 800323c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003242:	223f      	movs	r2, #63	@ 0x3f
 8003244:	409a      	lsls	r2, r3
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800325e:	2b00      	cmp	r3, #0
 8003260:	d07e      	beq.n	8003360 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	4798      	blx	r3
        }
        return;
 800326a:	e079      	b.n	8003360 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d01d      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10d      	bne.n	80032a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328c:	2b00      	cmp	r3, #0
 800328e:	d031      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	4798      	blx	r3
 8003298:	e02c      	b.n	80032f4 <HAL_DMA_IRQHandler+0x2a0>
 800329a:	bf00      	nop
 800329c:	200000cc 	.word	0x200000cc
 80032a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d023      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	4798      	blx	r3
 80032b4:	e01e      	b.n	80032f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10f      	bne.n	80032e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0210 	bic.w	r2, r2, #16
 80032d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d032      	beq.n	8003362 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d022      	beq.n	800334e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2205      	movs	r2, #5
 800330c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0201 	bic.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	3301      	adds	r3, #1
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	429a      	cmp	r2, r3
 800332a:	d307      	bcc.n	800333c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f2      	bne.n	8003320 <HAL_DMA_IRQHandler+0x2cc>
 800333a:	e000      	b.n	800333e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800333c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003352:	2b00      	cmp	r3, #0
 8003354:	d005      	beq.n	8003362 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	4798      	blx	r3
 800335e:	e000      	b.n	8003362 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003360:	bf00      	nop
    }
  }
}
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003384:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b40      	cmp	r3, #64	@ 0x40
 8003394:	d108      	bne.n	80033a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033a6:	e007      	b.n	80033b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	60da      	str	r2, [r3, #12]
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	3b10      	subs	r3, #16
 80033d4:	4a14      	ldr	r2, [pc, #80]	@ (8003428 <DMA_CalcBaseAndBitshift+0x64>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033de:	4a13      	ldr	r2, [pc, #76]	@ (800342c <DMA_CalcBaseAndBitshift+0x68>)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d909      	bls.n	8003406 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033fa:	f023 0303 	bic.w	r3, r3, #3
 80033fe:	1d1a      	adds	r2, r3, #4
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	659a      	str	r2, [r3, #88]	@ 0x58
 8003404:	e007      	b.n	8003416 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800340e:	f023 0303 	bic.w	r3, r3, #3
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	aaaaaaab 	.word	0xaaaaaaab
 800342c:	08008d04 	.word	0x08008d04

08003430 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003440:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d11f      	bne.n	800348a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b03      	cmp	r3, #3
 800344e:	d856      	bhi.n	80034fe <DMA_CheckFifoParam+0xce>
 8003450:	a201      	add	r2, pc, #4	@ (adr r2, 8003458 <DMA_CheckFifoParam+0x28>)
 8003452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003456:	bf00      	nop
 8003458:	08003469 	.word	0x08003469
 800345c:	0800347b 	.word	0x0800347b
 8003460:	08003469 	.word	0x08003469
 8003464:	080034ff 	.word	0x080034ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d046      	beq.n	8003502 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003478:	e043      	b.n	8003502 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003482:	d140      	bne.n	8003506 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003488:	e03d      	b.n	8003506 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003492:	d121      	bne.n	80034d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b03      	cmp	r3, #3
 8003498:	d837      	bhi.n	800350a <DMA_CheckFifoParam+0xda>
 800349a:	a201      	add	r2, pc, #4	@ (adr r2, 80034a0 <DMA_CheckFifoParam+0x70>)
 800349c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a0:	080034b1 	.word	0x080034b1
 80034a4:	080034b7 	.word	0x080034b7
 80034a8:	080034b1 	.word	0x080034b1
 80034ac:	080034c9 	.word	0x080034c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
      break;
 80034b4:	e030      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d025      	beq.n	800350e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c6:	e022      	b.n	800350e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034d0:	d11f      	bne.n	8003512 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034d6:	e01c      	b.n	8003512 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d903      	bls.n	80034e6 <DMA_CheckFifoParam+0xb6>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d003      	beq.n	80034ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034e4:	e018      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	73fb      	strb	r3, [r7, #15]
      break;
 80034ea:	e015      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00e      	beq.n	8003516 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]
      break;
 80034fc:	e00b      	b.n	8003516 <DMA_CheckFifoParam+0xe6>
      break;
 80034fe:	bf00      	nop
 8003500:	e00a      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      break;
 8003502:	bf00      	nop
 8003504:	e008      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      break;
 8003506:	bf00      	nop
 8003508:	e006      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      break;
 800350a:	bf00      	nop
 800350c:	e004      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      break;
 800350e:	bf00      	nop
 8003510:	e002      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      break;   
 8003512:	bf00      	nop
 8003514:	e000      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      break;
 8003516:	bf00      	nop
    }
  } 
  
  return status; 
 8003518:	7bfb      	ldrb	r3, [r7, #15]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop

08003528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003528:	b480      	push	{r7}
 800352a:	b089      	sub	sp, #36	@ 0x24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800353a:	2300      	movs	r3, #0
 800353c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	e159      	b.n	80037f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003544:	2201      	movs	r2, #1
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4013      	ands	r3, r2
 8003556:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	429a      	cmp	r2, r3
 800355e:	f040 8148 	bne.w	80037f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	2b01      	cmp	r3, #1
 800356c:	d005      	beq.n	800357a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003576:	2b02      	cmp	r3, #2
 8003578:	d130      	bne.n	80035dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	2203      	movs	r2, #3
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43db      	mvns	r3, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4013      	ands	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035b0:	2201      	movs	r2, #1
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	091b      	lsrs	r3, r3, #4
 80035c6:	f003 0201 	and.w	r2, r3, #1
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d017      	beq.n	8003618 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	2203      	movs	r2, #3
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d123      	bne.n	800366c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	08da      	lsrs	r2, r3, #3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3208      	adds	r2, #8
 800362c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003630:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	220f      	movs	r2, #15
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	08da      	lsrs	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3208      	adds	r2, #8
 8003666:	69b9      	ldr	r1, [r7, #24]
 8003668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	2203      	movs	r2, #3
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 0203 	and.w	r2, r3, #3
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80a2 	beq.w	80037f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	4b57      	ldr	r3, [pc, #348]	@ (8003810 <HAL_GPIO_Init+0x2e8>)
 80036b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b6:	4a56      	ldr	r2, [pc, #344]	@ (8003810 <HAL_GPIO_Init+0x2e8>)
 80036b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80036be:	4b54      	ldr	r3, [pc, #336]	@ (8003810 <HAL_GPIO_Init+0x2e8>)
 80036c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ca:	4a52      	ldr	r2, [pc, #328]	@ (8003814 <HAL_GPIO_Init+0x2ec>)
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	089b      	lsrs	r3, r3, #2
 80036d0:	3302      	adds	r3, #2
 80036d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	220f      	movs	r2, #15
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a49      	ldr	r2, [pc, #292]	@ (8003818 <HAL_GPIO_Init+0x2f0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d019      	beq.n	800372a <HAL_GPIO_Init+0x202>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a48      	ldr	r2, [pc, #288]	@ (800381c <HAL_GPIO_Init+0x2f4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d013      	beq.n	8003726 <HAL_GPIO_Init+0x1fe>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a47      	ldr	r2, [pc, #284]	@ (8003820 <HAL_GPIO_Init+0x2f8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00d      	beq.n	8003722 <HAL_GPIO_Init+0x1fa>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a46      	ldr	r2, [pc, #280]	@ (8003824 <HAL_GPIO_Init+0x2fc>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d007      	beq.n	800371e <HAL_GPIO_Init+0x1f6>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a45      	ldr	r2, [pc, #276]	@ (8003828 <HAL_GPIO_Init+0x300>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d101      	bne.n	800371a <HAL_GPIO_Init+0x1f2>
 8003716:	2304      	movs	r3, #4
 8003718:	e008      	b.n	800372c <HAL_GPIO_Init+0x204>
 800371a:	2307      	movs	r3, #7
 800371c:	e006      	b.n	800372c <HAL_GPIO_Init+0x204>
 800371e:	2303      	movs	r3, #3
 8003720:	e004      	b.n	800372c <HAL_GPIO_Init+0x204>
 8003722:	2302      	movs	r3, #2
 8003724:	e002      	b.n	800372c <HAL_GPIO_Init+0x204>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <HAL_GPIO_Init+0x204>
 800372a:	2300      	movs	r3, #0
 800372c:	69fa      	ldr	r2, [r7, #28]
 800372e:	f002 0203 	and.w	r2, r2, #3
 8003732:	0092      	lsls	r2, r2, #2
 8003734:	4093      	lsls	r3, r2
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4313      	orrs	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800373c:	4935      	ldr	r1, [pc, #212]	@ (8003814 <HAL_GPIO_Init+0x2ec>)
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	089b      	lsrs	r3, r3, #2
 8003742:	3302      	adds	r3, #2
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800374a:	4b38      	ldr	r3, [pc, #224]	@ (800382c <HAL_GPIO_Init+0x304>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	43db      	mvns	r3, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4013      	ands	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800376e:	4a2f      	ldr	r2, [pc, #188]	@ (800382c <HAL_GPIO_Init+0x304>)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003774:	4b2d      	ldr	r3, [pc, #180]	@ (800382c <HAL_GPIO_Init+0x304>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003798:	4a24      	ldr	r2, [pc, #144]	@ (800382c <HAL_GPIO_Init+0x304>)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800379e:	4b23      	ldr	r3, [pc, #140]	@ (800382c <HAL_GPIO_Init+0x304>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	43db      	mvns	r3, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4013      	ands	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037c2:	4a1a      	ldr	r2, [pc, #104]	@ (800382c <HAL_GPIO_Init+0x304>)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037c8:	4b18      	ldr	r3, [pc, #96]	@ (800382c <HAL_GPIO_Init+0x304>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037ec:	4a0f      	ldr	r2, [pc, #60]	@ (800382c <HAL_GPIO_Init+0x304>)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	3301      	adds	r3, #1
 80037f6:	61fb      	str	r3, [r7, #28]
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	2b0f      	cmp	r3, #15
 80037fc:	f67f aea2 	bls.w	8003544 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003800:	bf00      	nop
 8003802:	bf00      	nop
 8003804:	3724      	adds	r7, #36	@ 0x24
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40023800 	.word	0x40023800
 8003814:	40013800 	.word	0x40013800
 8003818:	40020000 	.word	0x40020000
 800381c:	40020400 	.word	0x40020400
 8003820:	40020800 	.word	0x40020800
 8003824:	40020c00 	.word	0x40020c00
 8003828:	40021000 	.word	0x40021000
 800382c:	40013c00 	.word	0x40013c00

08003830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	887b      	ldrh	r3, [r7, #2]
 8003842:	4013      	ands	r3, r2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003848:	2301      	movs	r3, #1
 800384a:	73fb      	strb	r3, [r7, #15]
 800384c:	e001      	b.n	8003852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800384e:	2300      	movs	r3, #0
 8003850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003852:	7bfb      	ldrb	r3, [r7, #15]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	807b      	strh	r3, [r7, #2]
 800386c:	4613      	mov	r3, r2
 800386e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003870:	787b      	ldrb	r3, [r7, #1]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003876:	887a      	ldrh	r2, [r7, #2]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800387c:	e003      	b.n	8003886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800387e:	887b      	ldrh	r3, [r7, #2]
 8003880:	041a      	lsls	r2, r3, #16
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	619a      	str	r2, [r3, #24]
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
	...

08003894 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800389e:	4b08      	ldr	r3, [pc, #32]	@ (80038c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d006      	beq.n	80038b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038aa:	4a05      	ldr	r2, [pc, #20]	@ (80038c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038ac:	88fb      	ldrh	r3, [r7, #6]
 80038ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fd f99c 	bl	8000bf0 <HAL_GPIO_EXTI_Callback>
  }
}
 80038b8:	bf00      	nop
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40013c00 	.word	0x40013c00

080038c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e12b      	b.n	8003b2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fe fa40 	bl	8001d70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2224      	movs	r2, #36	@ 0x24
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003916:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003926:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003928:	f001 f89a 	bl	8004a60 <HAL_RCC_GetPCLK1Freq>
 800392c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4a81      	ldr	r2, [pc, #516]	@ (8003b38 <HAL_I2C_Init+0x274>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d807      	bhi.n	8003948 <HAL_I2C_Init+0x84>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4a80      	ldr	r2, [pc, #512]	@ (8003b3c <HAL_I2C_Init+0x278>)
 800393c:	4293      	cmp	r3, r2
 800393e:	bf94      	ite	ls
 8003940:	2301      	movls	r3, #1
 8003942:	2300      	movhi	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	e006      	b.n	8003956 <HAL_I2C_Init+0x92>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a7d      	ldr	r2, [pc, #500]	@ (8003b40 <HAL_I2C_Init+0x27c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	bf94      	ite	ls
 8003950:	2301      	movls	r3, #1
 8003952:	2300      	movhi	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e0e7      	b.n	8003b2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4a78      	ldr	r2, [pc, #480]	@ (8003b44 <HAL_I2C_Init+0x280>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	0c9b      	lsrs	r3, r3, #18
 8003968:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	4a6a      	ldr	r2, [pc, #424]	@ (8003b38 <HAL_I2C_Init+0x274>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d802      	bhi.n	8003998 <HAL_I2C_Init+0xd4>
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	3301      	adds	r3, #1
 8003996:	e009      	b.n	80039ac <HAL_I2C_Init+0xe8>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800399e:	fb02 f303 	mul.w	r3, r2, r3
 80039a2:	4a69      	ldr	r2, [pc, #420]	@ (8003b48 <HAL_I2C_Init+0x284>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	099b      	lsrs	r3, r3, #6
 80039aa:	3301      	adds	r3, #1
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	430b      	orrs	r3, r1
 80039b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	495c      	ldr	r1, [pc, #368]	@ (8003b38 <HAL_I2C_Init+0x274>)
 80039c8:	428b      	cmp	r3, r1
 80039ca:	d819      	bhi.n	8003a00 <HAL_I2C_Init+0x13c>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	1e59      	subs	r1, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039da:	1c59      	adds	r1, r3, #1
 80039dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80039e0:	400b      	ands	r3, r1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_I2C_Init+0x138>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1e59      	subs	r1, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80039f4:	3301      	adds	r3, #1
 80039f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fa:	e051      	b.n	8003aa0 <HAL_I2C_Init+0x1dc>
 80039fc:	2304      	movs	r3, #4
 80039fe:	e04f      	b.n	8003aa0 <HAL_I2C_Init+0x1dc>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d111      	bne.n	8003a2c <HAL_I2C_Init+0x168>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1e58      	subs	r0, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	440b      	add	r3, r1
 8003a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bf0c      	ite	eq
 8003a24:	2301      	moveq	r3, #1
 8003a26:	2300      	movne	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	e012      	b.n	8003a52 <HAL_I2C_Init+0x18e>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1e58      	subs	r0, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6859      	ldr	r1, [r3, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	0099      	lsls	r1, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a42:	3301      	adds	r3, #1
 8003a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf0c      	ite	eq
 8003a4c:	2301      	moveq	r3, #1
 8003a4e:	2300      	movne	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_I2C_Init+0x196>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e022      	b.n	8003aa0 <HAL_I2C_Init+0x1dc>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10e      	bne.n	8003a80 <HAL_I2C_Init+0x1bc>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	1e58      	subs	r0, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6859      	ldr	r1, [r3, #4]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	440b      	add	r3, r1
 8003a70:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a74:	3301      	adds	r3, #1
 8003a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a7e:	e00f      	b.n	8003aa0 <HAL_I2C_Init+0x1dc>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	1e58      	subs	r0, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	0099      	lsls	r1, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a96:	3301      	adds	r3, #1
 8003a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	6809      	ldr	r1, [r1, #0]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69da      	ldr	r2, [r3, #28]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ace:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6911      	ldr	r1, [r2, #16]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68d2      	ldr	r2, [r2, #12]
 8003ada:	4311      	orrs	r1, r2
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695a      	ldr	r2, [r3, #20]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	000186a0 	.word	0x000186a0
 8003b3c:	001e847f 	.word	0x001e847f
 8003b40:	003d08ff 	.word	0x003d08ff
 8003b44:	431bde83 	.word	0x431bde83
 8003b48:	10624dd3 	.word	0x10624dd3

08003b4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	461a      	mov	r2, r3
 8003b58:	460b      	mov	r3, r1
 8003b5a:	817b      	strh	r3, [r7, #10]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b60:	f7fe fb40 	bl	80021e4 <HAL_GetTick>
 8003b64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	f040 80e0 	bne.w	8003d34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	2319      	movs	r3, #25
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	4970      	ldr	r1, [pc, #448]	@ (8003d40 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 f964 	bl	8003e4c <I2C_WaitOnFlagUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e0d3      	b.n	8003d36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_I2C_Master_Transmit+0x50>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e0cc      	b.n	8003d36 <HAL_I2C_Master_Transmit+0x1ea>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d007      	beq.n	8003bc2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0201 	orr.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2221      	movs	r2, #33	@ 0x21
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2210      	movs	r2, #16
 8003bde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	893a      	ldrh	r2, [r7, #8]
 8003bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4a50      	ldr	r2, [pc, #320]	@ (8003d44 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c02:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c04:	8979      	ldrh	r1, [r7, #10]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	6a3a      	ldr	r2, [r7, #32]
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 f89c 	bl	8003d48 <I2C_MasterRequestWrite>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e08d      	b.n	8003d36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c30:	e066      	b.n	8003d00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	6a39      	ldr	r1, [r7, #32]
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 fa22 	bl	8004080 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00d      	beq.n	8003c5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d107      	bne.n	8003c5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e06b      	b.n	8003d36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c62:	781a      	ldrb	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d11b      	bne.n	8003cd4 <HAL_I2C_Master_Transmit+0x188>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d017      	beq.n	8003cd4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	781a      	ldrb	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	6a39      	ldr	r1, [r7, #32]
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 fa19 	bl	8004110 <I2C_WaitOnBTFFlagUntilTimeout>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00d      	beq.n	8003d00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d107      	bne.n	8003cfc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cfa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e01a      	b.n	8003d36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d194      	bne.n	8003c32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	e000      	b.n	8003d36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d34:	2302      	movs	r3, #2
  }
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	00100002 	.word	0x00100002
 8003d44:	ffff0000 	.word	0xffff0000

08003d48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	607a      	str	r2, [r7, #4]
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	460b      	mov	r3, r1
 8003d56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d006      	beq.n	8003d72 <I2C_MasterRequestWrite+0x2a>
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d003      	beq.n	8003d72 <I2C_MasterRequestWrite+0x2a>
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d70:	d108      	bne.n	8003d84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	e00b      	b.n	8003d9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d88:	2b12      	cmp	r3, #18
 8003d8a:	d107      	bne.n	8003d9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f84f 	bl	8003e4c <I2C_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00d      	beq.n	8003dd0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dc2:	d103      	bne.n	8003dcc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e035      	b.n	8003e3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dd8:	d108      	bne.n	8003dec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dda:	897b      	ldrh	r3, [r7, #10]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003de8:	611a      	str	r2, [r3, #16]
 8003dea:	e01b      	b.n	8003e24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003dec:	897b      	ldrh	r3, [r7, #10]
 8003dee:	11db      	asrs	r3, r3, #7
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	f003 0306 	and.w	r3, r3, #6
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	f063 030f 	orn	r3, r3, #15
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	490e      	ldr	r1, [pc, #56]	@ (8003e44 <I2C_MasterRequestWrite+0xfc>)
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f898 	bl	8003f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e010      	b.n	8003e3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e1a:	897b      	ldrh	r3, [r7, #10]
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	4907      	ldr	r1, [pc, #28]	@ (8003e48 <I2C_MasterRequestWrite+0x100>)
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 f888 	bl	8003f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	00010008 	.word	0x00010008
 8003e48:	00010002 	.word	0x00010002

08003e4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e5c:	e048      	b.n	8003ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e64:	d044      	beq.n	8003ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e66:	f7fe f9bd 	bl	80021e4 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d302      	bcc.n	8003e7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d139      	bne.n	8003ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	0c1b      	lsrs	r3, r3, #16
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d10d      	bne.n	8003ea2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	43da      	mvns	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4013      	ands	r3, r2
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	bf0c      	ite	eq
 8003e98:	2301      	moveq	r3, #1
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	e00c      	b.n	8003ebc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	43da      	mvns	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	4013      	ands	r3, r2
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2301      	moveq	r3, #1
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	461a      	mov	r2, r3
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d116      	bne.n	8003ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003edc:	f043 0220 	orr.w	r2, r3, #32
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e023      	b.n	8003f38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	0c1b      	lsrs	r3, r3, #16
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d10d      	bne.n	8003f16 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	43da      	mvns	r2, r3
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	4013      	ands	r3, r2
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	bf0c      	ite	eq
 8003f0c:	2301      	moveq	r3, #1
 8003f0e:	2300      	movne	r3, #0
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	461a      	mov	r2, r3
 8003f14:	e00c      	b.n	8003f30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	43da      	mvns	r2, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	4013      	ands	r3, r2
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	bf0c      	ite	eq
 8003f28:	2301      	moveq	r3, #1
 8003f2a:	2300      	movne	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	461a      	mov	r2, r3
 8003f30:	79fb      	ldrb	r3, [r7, #7]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d093      	beq.n	8003e5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f4e:	e071      	b.n	8004034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f5e:	d123      	bne.n	8003fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f94:	f043 0204 	orr.w	r2, r3, #4
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e067      	b.n	8004078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fae:	d041      	beq.n	8004034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb0:	f7fe f918 	bl	80021e4 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d302      	bcc.n	8003fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d136      	bne.n	8004034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	0c1b      	lsrs	r3, r3, #16
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d10c      	bne.n	8003fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	43da      	mvns	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	bf14      	ite	ne
 8003fe2:	2301      	movne	r3, #1
 8003fe4:	2300      	moveq	r3, #0
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	e00b      	b.n	8004002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	43da      	mvns	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf14      	ite	ne
 8003ffc:	2301      	movne	r3, #1
 8003ffe:	2300      	moveq	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d016      	beq.n	8004034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004020:	f043 0220 	orr.w	r2, r3, #32
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e021      	b.n	8004078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	0c1b      	lsrs	r3, r3, #16
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b01      	cmp	r3, #1
 800403c:	d10c      	bne.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	43da      	mvns	r2, r3
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	4013      	ands	r3, r2
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	bf14      	ite	ne
 8004050:	2301      	movne	r3, #1
 8004052:	2300      	moveq	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	e00b      	b.n	8004070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	43da      	mvns	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4013      	ands	r3, r2
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	bf14      	ite	ne
 800406a:	2301      	movne	r3, #1
 800406c:	2300      	moveq	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	f47f af6d 	bne.w	8003f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800408c:	e034      	b.n	80040f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 f886 	bl	80041a0 <I2C_IsAcknowledgeFailed>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e034      	b.n	8004108 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a4:	d028      	beq.n	80040f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a6:	f7fe f89d 	bl	80021e4 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d302      	bcc.n	80040bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d11d      	bne.n	80040f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c6:	2b80      	cmp	r3, #128	@ 0x80
 80040c8:	d016      	beq.n	80040f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e4:	f043 0220 	orr.w	r2, r3, #32
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e007      	b.n	8004108 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004102:	2b80      	cmp	r3, #128	@ 0x80
 8004104:	d1c3      	bne.n	800408e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800411c:	e034      	b.n	8004188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f83e 	bl	80041a0 <I2C_IsAcknowledgeFailed>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e034      	b.n	8004198 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004134:	d028      	beq.n	8004188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004136:	f7fe f855 	bl	80021e4 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	429a      	cmp	r2, r3
 8004144:	d302      	bcc.n	800414c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d11d      	bne.n	8004188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	2b04      	cmp	r3, #4
 8004158:	d016      	beq.n	8004188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004174:	f043 0220 	orr.w	r2, r3, #32
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e007      	b.n	8004198 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b04      	cmp	r3, #4
 8004194:	d1c3      	bne.n	800411e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b6:	d11b      	bne.n	80041f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041dc:	f043 0204 	orr.w	r2, r3, #4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e267      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d075      	beq.n	800430a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800421e:	4b88      	ldr	r3, [pc, #544]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 030c 	and.w	r3, r3, #12
 8004226:	2b04      	cmp	r3, #4
 8004228:	d00c      	beq.n	8004244 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800422a:	4b85      	ldr	r3, [pc, #532]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004232:	2b08      	cmp	r3, #8
 8004234:	d112      	bne.n	800425c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004236:	4b82      	ldr	r3, [pc, #520]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800423e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004242:	d10b      	bne.n	800425c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004244:	4b7e      	ldr	r3, [pc, #504]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d05b      	beq.n	8004308 <HAL_RCC_OscConfig+0x108>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d157      	bne.n	8004308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e242      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004264:	d106      	bne.n	8004274 <HAL_RCC_OscConfig+0x74>
 8004266:	4b76      	ldr	r3, [pc, #472]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a75      	ldr	r2, [pc, #468]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 800426c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	e01d      	b.n	80042b0 <HAL_RCC_OscConfig+0xb0>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800427c:	d10c      	bne.n	8004298 <HAL_RCC_OscConfig+0x98>
 800427e:	4b70      	ldr	r3, [pc, #448]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a6f      	ldr	r2, [pc, #444]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 8004284:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	4b6d      	ldr	r3, [pc, #436]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a6c      	ldr	r2, [pc, #432]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 8004290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	e00b      	b.n	80042b0 <HAL_RCC_OscConfig+0xb0>
 8004298:	4b69      	ldr	r3, [pc, #420]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a68      	ldr	r2, [pc, #416]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 800429e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	4b66      	ldr	r3, [pc, #408]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a65      	ldr	r2, [pc, #404]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 80042aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d013      	beq.n	80042e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b8:	f7fd ff94 	bl	80021e4 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c0:	f7fd ff90 	bl	80021e4 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b64      	cmp	r3, #100	@ 0x64
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e207      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d2:	4b5b      	ldr	r3, [pc, #364]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCC_OscConfig+0xc0>
 80042de:	e014      	b.n	800430a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e0:	f7fd ff80 	bl	80021e4 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e8:	f7fd ff7c 	bl	80021e4 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	@ 0x64
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e1f3      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042fa:	4b51      	ldr	r3, [pc, #324]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0xe8>
 8004306:	e000      	b.n	800430a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d063      	beq.n	80043de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004316:	4b4a      	ldr	r3, [pc, #296]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 030c 	and.w	r3, r3, #12
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00b      	beq.n	800433a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004322:	4b47      	ldr	r3, [pc, #284]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800432a:	2b08      	cmp	r3, #8
 800432c:	d11c      	bne.n	8004368 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800432e:	4b44      	ldr	r3, [pc, #272]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d116      	bne.n	8004368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800433a:	4b41      	ldr	r3, [pc, #260]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d005      	beq.n	8004352 <HAL_RCC_OscConfig+0x152>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d001      	beq.n	8004352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e1c7      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004352:	4b3b      	ldr	r3, [pc, #236]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	4937      	ldr	r1, [pc, #220]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 8004362:	4313      	orrs	r3, r2
 8004364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004366:	e03a      	b.n	80043de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d020      	beq.n	80043b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004370:	4b34      	ldr	r3, [pc, #208]	@ (8004444 <HAL_RCC_OscConfig+0x244>)
 8004372:	2201      	movs	r2, #1
 8004374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004376:	f7fd ff35 	bl	80021e4 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800437e:	f7fd ff31 	bl	80021e4 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e1a8      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004390:	4b2b      	ldr	r3, [pc, #172]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f0      	beq.n	800437e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439c:	4b28      	ldr	r3, [pc, #160]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	4925      	ldr	r1, [pc, #148]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	600b      	str	r3, [r1, #0]
 80043b0:	e015      	b.n	80043de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043b2:	4b24      	ldr	r3, [pc, #144]	@ (8004444 <HAL_RCC_OscConfig+0x244>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fd ff14 	bl	80021e4 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c0:	f7fd ff10 	bl	80021e4 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e187      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d036      	beq.n	8004458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d016      	beq.n	8004420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043f2:	4b15      	ldr	r3, [pc, #84]	@ (8004448 <HAL_RCC_OscConfig+0x248>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f8:	f7fd fef4 	bl	80021e4 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004400:	f7fd fef0 	bl	80021e4 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e167      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004412:	4b0b      	ldr	r3, [pc, #44]	@ (8004440 <HAL_RCC_OscConfig+0x240>)
 8004414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0x200>
 800441e:	e01b      	b.n	8004458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004420:	4b09      	ldr	r3, [pc, #36]	@ (8004448 <HAL_RCC_OscConfig+0x248>)
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004426:	f7fd fedd 	bl	80021e4 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800442c:	e00e      	b.n	800444c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800442e:	f7fd fed9 	bl	80021e4 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d907      	bls.n	800444c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e150      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
 8004440:	40023800 	.word	0x40023800
 8004444:	42470000 	.word	0x42470000
 8004448:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800444c:	4b88      	ldr	r3, [pc, #544]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 800444e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1ea      	bne.n	800442e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 8097 	beq.w	8004594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004466:	2300      	movs	r3, #0
 8004468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800446a:	4b81      	ldr	r3, [pc, #516]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10f      	bne.n	8004496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004476:	2300      	movs	r3, #0
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	4b7d      	ldr	r3, [pc, #500]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 800447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447e:	4a7c      	ldr	r2, [pc, #496]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 8004480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004484:	6413      	str	r3, [r2, #64]	@ 0x40
 8004486:	4b7a      	ldr	r3, [pc, #488]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800448e:	60bb      	str	r3, [r7, #8]
 8004490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004492:	2301      	movs	r3, #1
 8004494:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004496:	4b77      	ldr	r3, [pc, #476]	@ (8004674 <HAL_RCC_OscConfig+0x474>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d118      	bne.n	80044d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044a2:	4b74      	ldr	r3, [pc, #464]	@ (8004674 <HAL_RCC_OscConfig+0x474>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a73      	ldr	r2, [pc, #460]	@ (8004674 <HAL_RCC_OscConfig+0x474>)
 80044a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ae:	f7fd fe99 	bl	80021e4 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b6:	f7fd fe95 	bl	80021e4 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e10c      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c8:	4b6a      	ldr	r3, [pc, #424]	@ (8004674 <HAL_RCC_OscConfig+0x474>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f0      	beq.n	80044b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d106      	bne.n	80044ea <HAL_RCC_OscConfig+0x2ea>
 80044dc:	4b64      	ldr	r3, [pc, #400]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e0:	4a63      	ldr	r2, [pc, #396]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044e8:	e01c      	b.n	8004524 <HAL_RCC_OscConfig+0x324>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2b05      	cmp	r3, #5
 80044f0:	d10c      	bne.n	800450c <HAL_RCC_OscConfig+0x30c>
 80044f2:	4b5f      	ldr	r3, [pc, #380]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 80044f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f6:	4a5e      	ldr	r2, [pc, #376]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 80044f8:	f043 0304 	orr.w	r3, r3, #4
 80044fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80044fe:	4b5c      	ldr	r3, [pc, #368]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004502:	4a5b      	ldr	r2, [pc, #364]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	6713      	str	r3, [r2, #112]	@ 0x70
 800450a:	e00b      	b.n	8004524 <HAL_RCC_OscConfig+0x324>
 800450c:	4b58      	ldr	r3, [pc, #352]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004510:	4a57      	ldr	r2, [pc, #348]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 8004512:	f023 0301 	bic.w	r3, r3, #1
 8004516:	6713      	str	r3, [r2, #112]	@ 0x70
 8004518:	4b55      	ldr	r3, [pc, #340]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800451c:	4a54      	ldr	r2, [pc, #336]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 800451e:	f023 0304 	bic.w	r3, r3, #4
 8004522:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d015      	beq.n	8004558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452c:	f7fd fe5a 	bl	80021e4 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004532:	e00a      	b.n	800454a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004534:	f7fd fe56 	bl	80021e4 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e0cb      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454a:	4b49      	ldr	r3, [pc, #292]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0ee      	beq.n	8004534 <HAL_RCC_OscConfig+0x334>
 8004556:	e014      	b.n	8004582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004558:	f7fd fe44 	bl	80021e4 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800455e:	e00a      	b.n	8004576 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004560:	f7fd fe40 	bl	80021e4 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800456e:	4293      	cmp	r3, r2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e0b5      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004576:	4b3e      	ldr	r3, [pc, #248]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 8004578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1ee      	bne.n	8004560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004582:	7dfb      	ldrb	r3, [r7, #23]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d105      	bne.n	8004594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004588:	4b39      	ldr	r3, [pc, #228]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 800458a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458c:	4a38      	ldr	r2, [pc, #224]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 800458e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004592:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80a1 	beq.w	80046e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800459e:	4b34      	ldr	r3, [pc, #208]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 030c 	and.w	r3, r3, #12
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d05c      	beq.n	8004664 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d141      	bne.n	8004636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b2:	4b31      	ldr	r3, [pc, #196]	@ (8004678 <HAL_RCC_OscConfig+0x478>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b8:	f7fd fe14 	bl	80021e4 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c0:	f7fd fe10 	bl	80021e4 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e087      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d2:	4b27      	ldr	r3, [pc, #156]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f0      	bne.n	80045c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69da      	ldr	r2, [r3, #28]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	019b      	lsls	r3, r3, #6
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f4:	085b      	lsrs	r3, r3, #1
 80045f6:	3b01      	subs	r3, #1
 80045f8:	041b      	lsls	r3, r3, #16
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004600:	061b      	lsls	r3, r3, #24
 8004602:	491b      	ldr	r1, [pc, #108]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 8004604:	4313      	orrs	r3, r2
 8004606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004608:	4b1b      	ldr	r3, [pc, #108]	@ (8004678 <HAL_RCC_OscConfig+0x478>)
 800460a:	2201      	movs	r2, #1
 800460c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460e:	f7fd fde9 	bl	80021e4 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004616:	f7fd fde5 	bl	80021e4 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e05c      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004628:	4b11      	ldr	r3, [pc, #68]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <HAL_RCC_OscConfig+0x416>
 8004634:	e054      	b.n	80046e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004636:	4b10      	ldr	r3, [pc, #64]	@ (8004678 <HAL_RCC_OscConfig+0x478>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463c:	f7fd fdd2 	bl	80021e4 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004644:	f7fd fdce 	bl	80021e4 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e045      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004656:	4b06      	ldr	r3, [pc, #24]	@ (8004670 <HAL_RCC_OscConfig+0x470>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f0      	bne.n	8004644 <HAL_RCC_OscConfig+0x444>
 8004662:	e03d      	b.n	80046e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d107      	bne.n	800467c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e038      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
 8004670:	40023800 	.word	0x40023800
 8004674:	40007000 	.word	0x40007000
 8004678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800467c:	4b1b      	ldr	r3, [pc, #108]	@ (80046ec <HAL_RCC_OscConfig+0x4ec>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d028      	beq.n	80046dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d121      	bne.n	80046dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d11a      	bne.n	80046dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80046ac:	4013      	ands	r3, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d111      	bne.n	80046dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c2:	085b      	lsrs	r3, r3, #1
 80046c4:	3b01      	subs	r3, #1
 80046c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d107      	bne.n	80046dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046d8:	429a      	cmp	r2, r3
 80046da:	d001      	beq.n	80046e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e000      	b.n	80046e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40023800 	.word	0x40023800

080046f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0cc      	b.n	800489e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004704:	4b68      	ldr	r3, [pc, #416]	@ (80048a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d90c      	bls.n	800472c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004712:	4b65      	ldr	r3, [pc, #404]	@ (80048a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800471a:	4b63      	ldr	r3, [pc, #396]	@ (80048a8 <HAL_RCC_ClockConfig+0x1b8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d001      	beq.n	800472c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0b8      	b.n	800489e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d020      	beq.n	800477a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004744:	4b59      	ldr	r3, [pc, #356]	@ (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	4a58      	ldr	r2, [pc, #352]	@ (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800474e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800475c:	4b53      	ldr	r3, [pc, #332]	@ (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	4a52      	ldr	r2, [pc, #328]	@ (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004768:	4b50      	ldr	r3, [pc, #320]	@ (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	494d      	ldr	r1, [pc, #308]	@ (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	4313      	orrs	r3, r2
 8004778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d044      	beq.n	8004810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d107      	bne.n	800479e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478e:	4b47      	ldr	r3, [pc, #284]	@ (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d119      	bne.n	80047ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e07f      	b.n	800489e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d003      	beq.n	80047ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	d107      	bne.n	80047be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ae:	4b3f      	ldr	r3, [pc, #252]	@ (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d109      	bne.n	80047ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e06f      	b.n	800489e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047be:	4b3b      	ldr	r3, [pc, #236]	@ (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e067      	b.n	800489e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ce:	4b37      	ldr	r3, [pc, #220]	@ (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f023 0203 	bic.w	r2, r3, #3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	4934      	ldr	r1, [pc, #208]	@ (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047e0:	f7fd fd00 	bl	80021e4 <HAL_GetTick>
 80047e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e6:	e00a      	b.n	80047fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e8:	f7fd fcfc 	bl	80021e4 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e04f      	b.n	800489e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fe:	4b2b      	ldr	r3, [pc, #172]	@ (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 020c 	and.w	r2, r3, #12
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	429a      	cmp	r2, r3
 800480e:	d1eb      	bne.n	80047e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004810:	4b25      	ldr	r3, [pc, #148]	@ (80048a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d20c      	bcs.n	8004838 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481e:	4b22      	ldr	r3, [pc, #136]	@ (80048a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004826:	4b20      	ldr	r3, [pc, #128]	@ (80048a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d001      	beq.n	8004838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e032      	b.n	800489e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d008      	beq.n	8004856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004844:	4b19      	ldr	r3, [pc, #100]	@ (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4916      	ldr	r1, [pc, #88]	@ (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	4313      	orrs	r3, r2
 8004854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d009      	beq.n	8004876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004862:	4b12      	ldr	r3, [pc, #72]	@ (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	490e      	ldr	r1, [pc, #56]	@ (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	4313      	orrs	r3, r2
 8004874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004876:	f000 f821 	bl	80048bc <HAL_RCC_GetSysClockFreq>
 800487a:	4602      	mov	r2, r0
 800487c:	4b0b      	ldr	r3, [pc, #44]	@ (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	091b      	lsrs	r3, r3, #4
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	490a      	ldr	r1, [pc, #40]	@ (80048b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004888:	5ccb      	ldrb	r3, [r1, r3]
 800488a:	fa22 f303 	lsr.w	r3, r2, r3
 800488e:	4a09      	ldr	r2, [pc, #36]	@ (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004892:	4b09      	ldr	r3, [pc, #36]	@ (80048b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f7fd fb30 	bl	8001efc <HAL_InitTick>

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40023c00 	.word	0x40023c00
 80048ac:	40023800 	.word	0x40023800
 80048b0:	08008cec 	.word	0x08008cec
 80048b4:	200000cc 	.word	0x200000cc
 80048b8:	200000d0 	.word	0x200000d0

080048bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c0:	b090      	sub	sp, #64	@ 0x40
 80048c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048d4:	4b59      	ldr	r3, [pc, #356]	@ (8004a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 030c 	and.w	r3, r3, #12
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d00d      	beq.n	80048fc <HAL_RCC_GetSysClockFreq+0x40>
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	f200 80a1 	bhi.w	8004a28 <HAL_RCC_GetSysClockFreq+0x16c>
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <HAL_RCC_GetSysClockFreq+0x34>
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d003      	beq.n	80048f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ee:	e09b      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048f0:	4b53      	ldr	r3, [pc, #332]	@ (8004a40 <HAL_RCC_GetSysClockFreq+0x184>)
 80048f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048f4:	e09b      	b.n	8004a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048f6:	4b53      	ldr	r3, [pc, #332]	@ (8004a44 <HAL_RCC_GetSysClockFreq+0x188>)
 80048f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048fa:	e098      	b.n	8004a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048fc:	4b4f      	ldr	r3, [pc, #316]	@ (8004a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004904:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004906:	4b4d      	ldr	r3, [pc, #308]	@ (8004a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d028      	beq.n	8004964 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004912:	4b4a      	ldr	r3, [pc, #296]	@ (8004a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	099b      	lsrs	r3, r3, #6
 8004918:	2200      	movs	r2, #0
 800491a:	623b      	str	r3, [r7, #32]
 800491c:	627a      	str	r2, [r7, #36]	@ 0x24
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004924:	2100      	movs	r1, #0
 8004926:	4b47      	ldr	r3, [pc, #284]	@ (8004a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8004928:	fb03 f201 	mul.w	r2, r3, r1
 800492c:	2300      	movs	r3, #0
 800492e:	fb00 f303 	mul.w	r3, r0, r3
 8004932:	4413      	add	r3, r2
 8004934:	4a43      	ldr	r2, [pc, #268]	@ (8004a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8004936:	fba0 1202 	umull	r1, r2, r0, r2
 800493a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800493c:	460a      	mov	r2, r1
 800493e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004942:	4413      	add	r3, r2
 8004944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004948:	2200      	movs	r2, #0
 800494a:	61bb      	str	r3, [r7, #24]
 800494c:	61fa      	str	r2, [r7, #28]
 800494e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004952:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004956:	f7fb fc9b 	bl	8000290 <__aeabi_uldivmod>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	4613      	mov	r3, r2
 8004960:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004962:	e053      	b.n	8004a0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004964:	4b35      	ldr	r3, [pc, #212]	@ (8004a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	099b      	lsrs	r3, r3, #6
 800496a:	2200      	movs	r2, #0
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	617a      	str	r2, [r7, #20]
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004976:	f04f 0b00 	mov.w	fp, #0
 800497a:	4652      	mov	r2, sl
 800497c:	465b      	mov	r3, fp
 800497e:	f04f 0000 	mov.w	r0, #0
 8004982:	f04f 0100 	mov.w	r1, #0
 8004986:	0159      	lsls	r1, r3, #5
 8004988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800498c:	0150      	lsls	r0, r2, #5
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	ebb2 080a 	subs.w	r8, r2, sl
 8004996:	eb63 090b 	sbc.w	r9, r3, fp
 800499a:	f04f 0200 	mov.w	r2, #0
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80049a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80049aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80049ae:	ebb2 0408 	subs.w	r4, r2, r8
 80049b2:	eb63 0509 	sbc.w	r5, r3, r9
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	00eb      	lsls	r3, r5, #3
 80049c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049c4:	00e2      	lsls	r2, r4, #3
 80049c6:	4614      	mov	r4, r2
 80049c8:	461d      	mov	r5, r3
 80049ca:	eb14 030a 	adds.w	r3, r4, sl
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	eb45 030b 	adc.w	r3, r5, fp
 80049d4:	607b      	str	r3, [r7, #4]
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049e2:	4629      	mov	r1, r5
 80049e4:	028b      	lsls	r3, r1, #10
 80049e6:	4621      	mov	r1, r4
 80049e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049ec:	4621      	mov	r1, r4
 80049ee:	028a      	lsls	r2, r1, #10
 80049f0:	4610      	mov	r0, r2
 80049f2:	4619      	mov	r1, r3
 80049f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f6:	2200      	movs	r2, #0
 80049f8:	60bb      	str	r3, [r7, #8]
 80049fa:	60fa      	str	r2, [r7, #12]
 80049fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a00:	f7fb fc46 	bl	8000290 <__aeabi_uldivmod>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4613      	mov	r3, r2
 8004a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	0c1b      	lsrs	r3, r3, #16
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	3301      	adds	r3, #1
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004a1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a26:	e002      	b.n	8004a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a28:	4b05      	ldr	r3, [pc, #20]	@ (8004a40 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3740      	adds	r7, #64	@ 0x40
 8004a34:	46bd      	mov	sp, r7
 8004a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	00f42400 	.word	0x00f42400
 8004a44:	017d7840 	.word	0x017d7840

08004a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a4c:	4b03      	ldr	r3, [pc, #12]	@ (8004a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	200000cc 	.word	0x200000cc

08004a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a64:	f7ff fff0 	bl	8004a48 <HAL_RCC_GetHCLKFreq>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	4b05      	ldr	r3, [pc, #20]	@ (8004a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	0a9b      	lsrs	r3, r3, #10
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	4903      	ldr	r1, [pc, #12]	@ (8004a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a76:	5ccb      	ldrb	r3, [r1, r3]
 8004a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40023800 	.word	0x40023800
 8004a84:	08008cfc 	.word	0x08008cfc

08004a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a8c:	f7ff ffdc 	bl	8004a48 <HAL_RCC_GetHCLKFreq>
 8004a90:	4602      	mov	r2, r0
 8004a92:	4b05      	ldr	r3, [pc, #20]	@ (8004aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	0b5b      	lsrs	r3, r3, #13
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	4903      	ldr	r1, [pc, #12]	@ (8004aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a9e:	5ccb      	ldrb	r3, [r1, r3]
 8004aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	08008cfc 	.word	0x08008cfc

08004ab0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	220f      	movs	r2, #15
 8004abe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ac0:	4b12      	ldr	r3, [pc, #72]	@ (8004b0c <HAL_RCC_GetClockConfig+0x5c>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0203 	and.w	r2, r3, #3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004acc:	4b0f      	ldr	r3, [pc, #60]	@ (8004b0c <HAL_RCC_GetClockConfig+0x5c>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8004b0c <HAL_RCC_GetClockConfig+0x5c>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ae4:	4b09      	ldr	r3, [pc, #36]	@ (8004b0c <HAL_RCC_GetClockConfig+0x5c>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	08db      	lsrs	r3, r3, #3
 8004aea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004af2:	4b07      	ldr	r3, [pc, #28]	@ (8004b10 <HAL_RCC_GetClockConfig+0x60>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0207 	and.w	r2, r3, #7
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	601a      	str	r2, [r3, #0]
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	40023c00 	.word	0x40023c00

08004b14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e07b      	b.n	8004c1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d108      	bne.n	8004b40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b36:	d009      	beq.n	8004b4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	61da      	str	r2, [r3, #28]
 8004b3e:	e005      	b.n	8004b4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fd f94a 	bl	8001e00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd0:	ea42 0103 	orr.w	r1, r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	0c1b      	lsrs	r3, r3, #16
 8004bea:	f003 0104 	and.w	r1, r3, #4
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf2:	f003 0210 	and.w	r2, r3, #16
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b088      	sub	sp, #32
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	60f8      	str	r0, [r7, #12]
 8004c2e:	60b9      	str	r1, [r7, #8]
 8004c30:	603b      	str	r3, [r7, #0]
 8004c32:	4613      	mov	r3, r2
 8004c34:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c36:	f7fd fad5 	bl	80021e4 <HAL_GetTick>
 8004c3a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004c3c:	88fb      	ldrh	r3, [r7, #6]
 8004c3e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d001      	beq.n	8004c50 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e12a      	b.n	8004ea6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <HAL_SPI_Transmit+0x36>
 8004c56:	88fb      	ldrh	r3, [r7, #6]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e122      	b.n	8004ea6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_SPI_Transmit+0x48>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e11b      	b.n	8004ea6 <HAL_SPI_Transmit+0x280>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2203      	movs	r2, #3
 8004c7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	88fa      	ldrh	r2, [r7, #6]
 8004c8e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	88fa      	ldrh	r2, [r7, #6]
 8004c94:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cbc:	d10f      	bne.n	8004cde <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ccc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cdc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce8:	2b40      	cmp	r3, #64	@ 0x40
 8004cea:	d007      	beq.n	8004cfc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d04:	d152      	bne.n	8004dac <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <HAL_SPI_Transmit+0xee>
 8004d0e:	8b7b      	ldrh	r3, [r7, #26]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d145      	bne.n	8004da0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d18:	881a      	ldrh	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d24:	1c9a      	adds	r2, r3, #2
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d38:	e032      	b.n	8004da0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d112      	bne.n	8004d6e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4c:	881a      	ldrh	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d58:	1c9a      	adds	r2, r3, #2
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004d6c:	e018      	b.n	8004da0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d6e:	f7fd fa39 	bl	80021e4 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d803      	bhi.n	8004d86 <HAL_SPI_Transmit+0x160>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d84:	d102      	bne.n	8004d8c <HAL_SPI_Transmit+0x166>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d109      	bne.n	8004da0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e082      	b.n	8004ea6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1c7      	bne.n	8004d3a <HAL_SPI_Transmit+0x114>
 8004daa:	e053      	b.n	8004e54 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_SPI_Transmit+0x194>
 8004db4:	8b7b      	ldrh	r3, [r7, #26]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d147      	bne.n	8004e4a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	330c      	adds	r3, #12
 8004dc4:	7812      	ldrb	r2, [r2, #0]
 8004dc6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dcc:	1c5a      	adds	r2, r3, #1
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004de0:	e033      	b.n	8004e4a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d113      	bne.n	8004e18 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	330c      	adds	r3, #12
 8004dfa:	7812      	ldrb	r2, [r2, #0]
 8004dfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e16:	e018      	b.n	8004e4a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e18:	f7fd f9e4 	bl	80021e4 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d803      	bhi.n	8004e30 <HAL_SPI_Transmit+0x20a>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2e:	d102      	bne.n	8004e36 <HAL_SPI_Transmit+0x210>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d109      	bne.n	8004e4a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e02d      	b.n	8004ea6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1c6      	bne.n	8004de2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e54:	69fa      	ldr	r2, [r7, #28]
 8004e56:	6839      	ldr	r1, [r7, #0]
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 fbd9 	bl	8005610 <SPI_EndRxTxTransaction>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10a      	bne.n	8004e88 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e000      	b.n	8004ea6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
  }
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3720      	adds	r7, #32
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b088      	sub	sp, #32
 8004eb2:	af02      	add	r7, sp, #8
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	603b      	str	r3, [r7, #0]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d001      	beq.n	8004ece <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e104      	b.n	80050d8 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <HAL_SPI_Receive+0x2c>
 8004ed4:	88fb      	ldrh	r3, [r7, #6]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e0fc      	b.n	80050d8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ee6:	d112      	bne.n	8004f0e <HAL_SPI_Receive+0x60>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10e      	bne.n	8004f0e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ef8:	88fa      	ldrh	r2, [r7, #6]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	4613      	mov	r3, r2
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	68b9      	ldr	r1, [r7, #8]
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 f8eb 	bl	80050e0 <HAL_SPI_TransmitReceive>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	e0e4      	b.n	80050d8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f0e:	f7fd f969 	bl	80021e4 <HAL_GetTick>
 8004f12:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_SPI_Receive+0x74>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e0da      	b.n	80050d8 <HAL_SPI_Receive+0x22a>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2204      	movs	r2, #4
 8004f2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	88fa      	ldrh	r2, [r7, #6]
 8004f42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	88fa      	ldrh	r2, [r7, #6]
 8004f48:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f70:	d10f      	bne.n	8004f92 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f90:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f9c:	2b40      	cmp	r3, #64	@ 0x40
 8004f9e:	d007      	beq.n	8004fb0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d170      	bne.n	800509a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004fb8:	e035      	b.n	8005026 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d115      	bne.n	8004ff4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f103 020c 	add.w	r2, r3, #12
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd4:	7812      	ldrb	r2, [r2, #0]
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ff2:	e018      	b.n	8005026 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ff4:	f7fd f8f6 	bl	80021e4 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d803      	bhi.n	800500c <HAL_SPI_Receive+0x15e>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500a:	d102      	bne.n	8005012 <HAL_SPI_Receive+0x164>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d109      	bne.n	8005026 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e058      	b.n	80050d8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800502a:	b29b      	uxth	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1c4      	bne.n	8004fba <HAL_SPI_Receive+0x10c>
 8005030:	e038      	b.n	80050a4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b01      	cmp	r3, #1
 800503e:	d113      	bne.n	8005068 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504a:	b292      	uxth	r2, r2
 800504c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005052:	1c9a      	adds	r2, r3, #2
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800505c:	b29b      	uxth	r3, r3
 800505e:	3b01      	subs	r3, #1
 8005060:	b29a      	uxth	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005066:	e018      	b.n	800509a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005068:	f7fd f8bc 	bl	80021e4 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d803      	bhi.n	8005080 <HAL_SPI_Receive+0x1d2>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507e:	d102      	bne.n	8005086 <HAL_SPI_Receive+0x1d8>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e01e      	b.n	80050d8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1c6      	bne.n	8005032 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	6839      	ldr	r1, [r7, #0]
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 fa4b 	bl	8005544 <SPI_EndRxTransaction>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80050d6:	2300      	movs	r3, #0
  }
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b08a      	sub	sp, #40	@ 0x28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050ee:	2301      	movs	r3, #1
 80050f0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050f2:	f7fd f877 	bl	80021e4 <HAL_GetTick>
 80050f6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050fe:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005106:	887b      	ldrh	r3, [r7, #2]
 8005108:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800510a:	7ffb      	ldrb	r3, [r7, #31]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d00c      	beq.n	800512a <HAL_SPI_TransmitReceive+0x4a>
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005116:	d106      	bne.n	8005126 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d102      	bne.n	8005126 <HAL_SPI_TransmitReceive+0x46>
 8005120:	7ffb      	ldrb	r3, [r7, #31]
 8005122:	2b04      	cmp	r3, #4
 8005124:	d001      	beq.n	800512a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005126:	2302      	movs	r3, #2
 8005128:	e17f      	b.n	800542a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <HAL_SPI_TransmitReceive+0x5c>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d002      	beq.n	800513c <HAL_SPI_TransmitReceive+0x5c>
 8005136:	887b      	ldrh	r3, [r7, #2]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e174      	b.n	800542a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005146:	2b01      	cmp	r3, #1
 8005148:	d101      	bne.n	800514e <HAL_SPI_TransmitReceive+0x6e>
 800514a:	2302      	movs	r3, #2
 800514c:	e16d      	b.n	800542a <HAL_SPI_TransmitReceive+0x34a>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b04      	cmp	r3, #4
 8005160:	d003      	beq.n	800516a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2205      	movs	r2, #5
 8005166:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	887a      	ldrh	r2, [r7, #2]
 800517a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	887a      	ldrh	r2, [r7, #2]
 8005180:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	887a      	ldrh	r2, [r7, #2]
 800518c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	887a      	ldrh	r2, [r7, #2]
 8005192:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051aa:	2b40      	cmp	r3, #64	@ 0x40
 80051ac:	d007      	beq.n	80051be <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051c6:	d17e      	bne.n	80052c6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <HAL_SPI_TransmitReceive+0xf6>
 80051d0:	8afb      	ldrh	r3, [r7, #22]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d16c      	bne.n	80052b0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051da:	881a      	ldrh	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e6:	1c9a      	adds	r2, r3, #2
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051fa:	e059      	b.n	80052b0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b02      	cmp	r3, #2
 8005208:	d11b      	bne.n	8005242 <HAL_SPI_TransmitReceive+0x162>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800520e:	b29b      	uxth	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d016      	beq.n	8005242 <HAL_SPI_TransmitReceive+0x162>
 8005214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005216:	2b01      	cmp	r3, #1
 8005218:	d113      	bne.n	8005242 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521e:	881a      	ldrh	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522a:	1c9a      	adds	r2, r3, #2
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005234:	b29b      	uxth	r3, r3
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b01      	cmp	r3, #1
 800524e:	d119      	bne.n	8005284 <HAL_SPI_TransmitReceive+0x1a4>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005254:	b29b      	uxth	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d014      	beq.n	8005284 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005264:	b292      	uxth	r2, r2
 8005266:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526c:	1c9a      	adds	r2, r3, #2
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005280:	2301      	movs	r3, #1
 8005282:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005284:	f7fc ffae 	bl	80021e4 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005290:	429a      	cmp	r2, r3
 8005292:	d80d      	bhi.n	80052b0 <HAL_SPI_TransmitReceive+0x1d0>
 8005294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529a:	d009      	beq.n	80052b0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e0bc      	b.n	800542a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1a0      	bne.n	80051fc <HAL_SPI_TransmitReceive+0x11c>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d19b      	bne.n	80051fc <HAL_SPI_TransmitReceive+0x11c>
 80052c4:	e082      	b.n	80053cc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <HAL_SPI_TransmitReceive+0x1f4>
 80052ce:	8afb      	ldrh	r3, [r7, #22]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d171      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	7812      	ldrb	r2, [r2, #0]
 80052e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052fa:	e05d      	b.n	80053b8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b02      	cmp	r3, #2
 8005308:	d11c      	bne.n	8005344 <HAL_SPI_TransmitReceive+0x264>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d017      	beq.n	8005344 <HAL_SPI_TransmitReceive+0x264>
 8005314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005316:	2b01      	cmp	r3, #1
 8005318:	d114      	bne.n	8005344 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	330c      	adds	r3, #12
 8005324:	7812      	ldrb	r2, [r2, #0]
 8005326:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b01      	cmp	r3, #1
 8005350:	d119      	bne.n	8005386 <HAL_SPI_TransmitReceive+0x2a6>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005356:	b29b      	uxth	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d014      	beq.n	8005386 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005382:	2301      	movs	r3, #1
 8005384:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005386:	f7fc ff2d 	bl	80021e4 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005392:	429a      	cmp	r2, r3
 8005394:	d803      	bhi.n	800539e <HAL_SPI_TransmitReceive+0x2be>
 8005396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539c:	d102      	bne.n	80053a4 <HAL_SPI_TransmitReceive+0x2c4>
 800539e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d109      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e038      	b.n	800542a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d19c      	bne.n	80052fc <HAL_SPI_TransmitReceive+0x21c>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d197      	bne.n	80052fc <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053cc:	6a3a      	ldr	r2, [r7, #32]
 80053ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f91d 	bl	8005610 <SPI_EndRxTxTransaction>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d008      	beq.n	80053ee <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2220      	movs	r2, #32
 80053e0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e01d      	b.n	800542a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10a      	bne.n	800540c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053f6:	2300      	movs	r3, #0
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005428:	2300      	movs	r3, #0
  }
}
 800542a:	4618      	mov	r0, r3
 800542c:	3728      	adds	r7, #40	@ 0x28
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	4613      	mov	r3, r2
 8005442:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005444:	f7fc fece 	bl	80021e4 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544c:	1a9b      	subs	r3, r3, r2
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	4413      	add	r3, r2
 8005452:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005454:	f7fc fec6 	bl	80021e4 <HAL_GetTick>
 8005458:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800545a:	4b39      	ldr	r3, [pc, #228]	@ (8005540 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	015b      	lsls	r3, r3, #5
 8005460:	0d1b      	lsrs	r3, r3, #20
 8005462:	69fa      	ldr	r2, [r7, #28]
 8005464:	fb02 f303 	mul.w	r3, r2, r3
 8005468:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800546a:	e055      	b.n	8005518 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005472:	d051      	beq.n	8005518 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005474:	f7fc feb6 	bl	80021e4 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	69fa      	ldr	r2, [r7, #28]
 8005480:	429a      	cmp	r2, r3
 8005482:	d902      	bls.n	800548a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d13d      	bne.n	8005506 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005498:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054a2:	d111      	bne.n	80054c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054ac:	d004      	beq.n	80054b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054b6:	d107      	bne.n	80054c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054d0:	d10f      	bne.n	80054f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e018      	b.n	8005538 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d102      	bne.n	8005512 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	e002      	b.n	8005518 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	3b01      	subs	r3, #1
 8005516:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	4013      	ands	r3, r2
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	429a      	cmp	r2, r3
 8005526:	bf0c      	ite	eq
 8005528:	2301      	moveq	r3, #1
 800552a:	2300      	movne	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	461a      	mov	r2, r3
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	429a      	cmp	r2, r3
 8005534:	d19a      	bne.n	800546c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3720      	adds	r7, #32
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	200000cc 	.word	0x200000cc

08005544 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af02      	add	r7, sp, #8
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005558:	d111      	bne.n	800557e <SPI_EndRxTransaction+0x3a>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005562:	d004      	beq.n	800556e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800556c:	d107      	bne.n	800557e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800557c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005586:	d12a      	bne.n	80055de <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005590:	d012      	beq.n	80055b8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2200      	movs	r2, #0
 800559a:	2180      	movs	r1, #128	@ 0x80
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f7ff ff49 	bl	8005434 <SPI_WaitFlagStateUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d02d      	beq.n	8005604 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ac:	f043 0220 	orr.w	r2, r3, #32
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e026      	b.n	8005606 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2200      	movs	r2, #0
 80055c0:	2101      	movs	r1, #1
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f7ff ff36 	bl	8005434 <SPI_WaitFlagStateUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01a      	beq.n	8005604 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d2:	f043 0220 	orr.w	r2, r3, #32
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e013      	b.n	8005606 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2200      	movs	r2, #0
 80055e6:	2101      	movs	r1, #1
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7ff ff23 	bl	8005434 <SPI_WaitFlagStateUntilTimeout>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d007      	beq.n	8005604 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f8:	f043 0220 	orr.w	r2, r3, #32
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e000      	b.n	8005606 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
	...

08005610 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af02      	add	r7, sp, #8
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2201      	movs	r2, #1
 8005624:	2102      	movs	r1, #2
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f7ff ff04 	bl	8005434 <SPI_WaitFlagStateUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d007      	beq.n	8005642 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005636:	f043 0220 	orr.w	r2, r3, #32
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e032      	b.n	80056a8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005642:	4b1b      	ldr	r3, [pc, #108]	@ (80056b0 <SPI_EndRxTxTransaction+0xa0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a1b      	ldr	r2, [pc, #108]	@ (80056b4 <SPI_EndRxTxTransaction+0xa4>)
 8005648:	fba2 2303 	umull	r2, r3, r2, r3
 800564c:	0d5b      	lsrs	r3, r3, #21
 800564e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005652:	fb02 f303 	mul.w	r3, r2, r3
 8005656:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005660:	d112      	bne.n	8005688 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2200      	movs	r2, #0
 800566a:	2180      	movs	r1, #128	@ 0x80
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7ff fee1 	bl	8005434 <SPI_WaitFlagStateUntilTimeout>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d016      	beq.n	80056a6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800567c:	f043 0220 	orr.w	r2, r3, #32
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e00f      	b.n	80056a8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	3b01      	subs	r3, #1
 8005692:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800569e:	2b80      	cmp	r3, #128	@ 0x80
 80056a0:	d0f2      	beq.n	8005688 <SPI_EndRxTxTransaction+0x78>
 80056a2:	e000      	b.n	80056a6 <SPI_EndRxTxTransaction+0x96>
        break;
 80056a4:	bf00      	nop
  }

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	200000cc 	.word	0x200000cc
 80056b4:	165e9f81 	.word	0x165e9f81

080056b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e041      	b.n	800574e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f839 	bl	8005756 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3304      	adds	r3, #4
 80056f4:	4619      	mov	r1, r3
 80056f6:	4610      	mov	r0, r2
 80056f8:	f000 f9b2 	bl	8005a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
	...

0800576c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	d001      	beq.n	8005784 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e044      	b.n	800580e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1e      	ldr	r2, [pc, #120]	@ (800581c <HAL_TIM_Base_Start_IT+0xb0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d018      	beq.n	80057d8 <HAL_TIM_Base_Start_IT+0x6c>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ae:	d013      	beq.n	80057d8 <HAL_TIM_Base_Start_IT+0x6c>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1a      	ldr	r2, [pc, #104]	@ (8005820 <HAL_TIM_Base_Start_IT+0xb4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00e      	beq.n	80057d8 <HAL_TIM_Base_Start_IT+0x6c>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a19      	ldr	r2, [pc, #100]	@ (8005824 <HAL_TIM_Base_Start_IT+0xb8>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d009      	beq.n	80057d8 <HAL_TIM_Base_Start_IT+0x6c>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a17      	ldr	r2, [pc, #92]	@ (8005828 <HAL_TIM_Base_Start_IT+0xbc>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d004      	beq.n	80057d8 <HAL_TIM_Base_Start_IT+0x6c>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a16      	ldr	r2, [pc, #88]	@ (800582c <HAL_TIM_Base_Start_IT+0xc0>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d111      	bne.n	80057fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b06      	cmp	r3, #6
 80057e8:	d010      	beq.n	800580c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0201 	orr.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fa:	e007      	b.n	800580c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0201 	orr.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	40010000 	.word	0x40010000
 8005820:	40000400 	.word	0x40000400
 8005824:	40000800 	.word	0x40000800
 8005828:	40000c00 	.word	0x40000c00
 800582c:	40014000 	.word	0x40014000

08005830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d020      	beq.n	8005894 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01b      	beq.n	8005894 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0202 	mvn.w	r2, #2
 8005864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f8d2 	bl	8005a24 <HAL_TIM_IC_CaptureCallback>
 8005880:	e005      	b.n	800588e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f8c4 	bl	8005a10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f8d5 	bl	8005a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b00      	cmp	r3, #0
 800589c:	d020      	beq.n	80058e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01b      	beq.n	80058e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0204 	mvn.w	r2, #4
 80058b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2202      	movs	r2, #2
 80058b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f8ac 	bl	8005a24 <HAL_TIM_IC_CaptureCallback>
 80058cc:	e005      	b.n	80058da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f89e 	bl	8005a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f8af 	bl	8005a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d020      	beq.n	800592c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d01b      	beq.n	800592c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f06f 0208 	mvn.w	r2, #8
 80058fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2204      	movs	r2, #4
 8005902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f886 	bl	8005a24 <HAL_TIM_IC_CaptureCallback>
 8005918:	e005      	b.n	8005926 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f878 	bl	8005a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f889 	bl	8005a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f003 0310 	and.w	r3, r3, #16
 8005932:	2b00      	cmp	r3, #0
 8005934:	d020      	beq.n	8005978 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f003 0310 	and.w	r3, r3, #16
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01b      	beq.n	8005978 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f06f 0210 	mvn.w	r2, #16
 8005948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2208      	movs	r2, #8
 800594e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f860 	bl	8005a24 <HAL_TIM_IC_CaptureCallback>
 8005964:	e005      	b.n	8005972 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f852 	bl	8005a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f863 	bl	8005a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00c      	beq.n	800599c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	d007      	beq.n	800599c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0201 	mvn.w	r2, #1
 8005994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fb fd4c 	bl	8001434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00c      	beq.n	80059c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d007      	beq.n	80059c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80059b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f8e0 	bl	8005b80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00c      	beq.n	80059e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d007      	beq.n	80059e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80059dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f834 	bl	8005a4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f003 0320 	and.w	r3, r3, #32
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00c      	beq.n	8005a08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f003 0320 	and.w	r3, r3, #32
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d007      	beq.n	8005a08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f06f 0220 	mvn.w	r2, #32
 8005a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f8b2 	bl	8005b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a08:	bf00      	nop
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a37      	ldr	r2, [pc, #220]	@ (8005b50 <TIM_Base_SetConfig+0xf0>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d00f      	beq.n	8005a98 <TIM_Base_SetConfig+0x38>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a7e:	d00b      	beq.n	8005a98 <TIM_Base_SetConfig+0x38>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a34      	ldr	r2, [pc, #208]	@ (8005b54 <TIM_Base_SetConfig+0xf4>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d007      	beq.n	8005a98 <TIM_Base_SetConfig+0x38>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a33      	ldr	r2, [pc, #204]	@ (8005b58 <TIM_Base_SetConfig+0xf8>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d003      	beq.n	8005a98 <TIM_Base_SetConfig+0x38>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a32      	ldr	r2, [pc, #200]	@ (8005b5c <TIM_Base_SetConfig+0xfc>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d108      	bne.n	8005aaa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a28      	ldr	r2, [pc, #160]	@ (8005b50 <TIM_Base_SetConfig+0xf0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d01b      	beq.n	8005aea <TIM_Base_SetConfig+0x8a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab8:	d017      	beq.n	8005aea <TIM_Base_SetConfig+0x8a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a25      	ldr	r2, [pc, #148]	@ (8005b54 <TIM_Base_SetConfig+0xf4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d013      	beq.n	8005aea <TIM_Base_SetConfig+0x8a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a24      	ldr	r2, [pc, #144]	@ (8005b58 <TIM_Base_SetConfig+0xf8>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d00f      	beq.n	8005aea <TIM_Base_SetConfig+0x8a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a23      	ldr	r2, [pc, #140]	@ (8005b5c <TIM_Base_SetConfig+0xfc>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d00b      	beq.n	8005aea <TIM_Base_SetConfig+0x8a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a22      	ldr	r2, [pc, #136]	@ (8005b60 <TIM_Base_SetConfig+0x100>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d007      	beq.n	8005aea <TIM_Base_SetConfig+0x8a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a21      	ldr	r2, [pc, #132]	@ (8005b64 <TIM_Base_SetConfig+0x104>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d003      	beq.n	8005aea <TIM_Base_SetConfig+0x8a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a20      	ldr	r2, [pc, #128]	@ (8005b68 <TIM_Base_SetConfig+0x108>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d108      	bne.n	8005afc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8005b50 <TIM_Base_SetConfig+0xf0>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d103      	bne.n	8005b2a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	691a      	ldr	r2, [r3, #16]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f043 0204 	orr.w	r2, r3, #4
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	601a      	str	r2, [r3, #0]
}
 8005b42:	bf00      	nop
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40010000 	.word	0x40010000
 8005b54:	40000400 	.word	0x40000400
 8005b58:	40000800 	.word	0x40000800
 8005b5c:	40000c00 	.word	0x40000c00
 8005b60:	40014000 	.word	0x40014000
 8005b64:	40014400 	.word	0x40014400
 8005b68:	40014800 	.word	0x40014800

08005b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005ba2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ba6:	2b84      	cmp	r3, #132	@ 0x84
 8005ba8:	d005      	beq.n	8005bb6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005baa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	3303      	adds	r3, #3
 8005bb4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005bc8:	f000 ff66 	bl	8006a98 <vTaskStartScheduler>
  
  return osOK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bd4:	b089      	sub	sp, #36	@ 0x24
 8005bd6:	af04      	add	r7, sp, #16
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d020      	beq.n	8005c26 <osThreadCreate+0x54>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d01c      	beq.n	8005c26 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685c      	ldr	r4, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691e      	ldr	r6, [r3, #16]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7ff ffc8 	bl	8005b94 <makeFreeRtosPriority>
 8005c04:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c0e:	9202      	str	r2, [sp, #8]
 8005c10:	9301      	str	r3, [sp, #4]
 8005c12:	9100      	str	r1, [sp, #0]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	4632      	mov	r2, r6
 8005c18:	4629      	mov	r1, r5
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	f000 fd56 	bl	80066cc <xTaskCreateStatic>
 8005c20:	4603      	mov	r3, r0
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	e01c      	b.n	8005c60 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685c      	ldr	r4, [r3, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c32:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff ffaa 	bl	8005b94 <makeFreeRtosPriority>
 8005c40:	4602      	mov	r2, r0
 8005c42:	f107 030c 	add.w	r3, r7, #12
 8005c46:	9301      	str	r3, [sp, #4]
 8005c48:	9200      	str	r2, [sp, #0]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	4632      	mov	r2, r6
 8005c4e:	4629      	mov	r1, r5
 8005c50:	4620      	mov	r0, r4
 8005c52:	f000 fd9b 	bl	800678c <xTaskCreate>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d001      	beq.n	8005c60 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	e000      	b.n	8005c62 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005c60:	68fb      	ldr	r3, [r7, #12]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c6a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b084      	sub	sp, #16
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <osDelay+0x16>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	e000      	b.n	8005c82 <osDelay+0x18>
 8005c80:	2301      	movs	r3, #1
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 fed2 	bl	8006a2c <vTaskDelay>
  
  return osOK;
 8005c88:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f103 0208 	add.w	r2, r3, #8
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8005caa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f103 0208 	add.w	r2, r3, #8
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f103 0208 	add.w	r2, r3, #8
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	601a      	str	r2, [r3, #0]
}
 8005d28:	bf00      	nop
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4a:	d103      	bne.n	8005d54 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	e00c      	b.n	8005d6e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3308      	adds	r3, #8
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	e002      	b.n	8005d62 <vListInsert+0x2e>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d2f6      	bcs.n	8005d5c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	1c5a      	adds	r2, r3, #1
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	601a      	str	r2, [r3, #0]
}
 8005d9a:	bf00      	nop
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005da6:	b480      	push	{r7}
 8005da8:	b085      	sub	sp, #20
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6892      	ldr	r2, [r2, #8]
 8005dbc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6852      	ldr	r2, [r2, #4]
 8005dc6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d103      	bne.n	8005dda <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	1e5a      	subs	r2, r3, #1
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
	...

08005dfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10b      	bne.n	8005e28 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
 8005e26:	e7fd      	b.n	8005e24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e28:	f001 fe8e 	bl	8007b48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e34:	68f9      	ldr	r1, [r7, #12]
 8005e36:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e38:	fb01 f303 	mul.w	r3, r1, r3
 8005e3c:	441a      	add	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	68f9      	ldr	r1, [r7, #12]
 8005e5c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e5e:	fb01 f303 	mul.w	r3, r1, r3
 8005e62:	441a      	add	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	22ff      	movs	r2, #255	@ 0xff
 8005e6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	22ff      	movs	r2, #255	@ 0xff
 8005e74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d114      	bne.n	8005ea8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d01a      	beq.n	8005ebc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3310      	adds	r3, #16
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f001 f85e 	bl	8006f4c <xTaskRemoveFromEventList>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d012      	beq.n	8005ebc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e96:	4b0d      	ldr	r3, [pc, #52]	@ (8005ecc <xQueueGenericReset+0xd0>)
 8005e98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	e009      	b.n	8005ebc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3310      	adds	r3, #16
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff fef0 	bl	8005c92 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3324      	adds	r3, #36	@ 0x24
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff feeb 	bl	8005c92 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ebc:	f001 fe76 	bl	8007bac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ec0:	2301      	movs	r3, #1
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	e000ed04 	.word	0xe000ed04

08005ed0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08a      	sub	sp, #40	@ 0x28
 8005ed4:	af02      	add	r7, sp, #8
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	4613      	mov	r3, r2
 8005edc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10b      	bne.n	8005efc <xQueueGenericCreate+0x2c>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	613b      	str	r3, [r7, #16]
}
 8005ef6:	bf00      	nop
 8005ef8:	bf00      	nop
 8005efa:	e7fd      	b.n	8005ef8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	fb02 f303 	mul.w	r3, r2, r3
 8005f04:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	3348      	adds	r3, #72	@ 0x48
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f001 ff3e 	bl	8007d8c <pvPortMalloc>
 8005f10:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d011      	beq.n	8005f3c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	3348      	adds	r3, #72	@ 0x48
 8005f20:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f2a:	79fa      	ldrb	r2, [r7, #7]
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	4613      	mov	r3, r2
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 f805 	bl	8005f46 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f3c:	69bb      	ldr	r3, [r7, #24]
	}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3720      	adds	r7, #32
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	607a      	str	r2, [r7, #4]
 8005f52:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d103      	bne.n	8005f62 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	e002      	b.n	8005f68 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f74:	2101      	movs	r1, #1
 8005f76:	69b8      	ldr	r0, [r7, #24]
 8005f78:	f7ff ff40 	bl	8005dfc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f7c:	bf00      	nop
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08e      	sub	sp, #56	@ 0x38
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f92:	2300      	movs	r3, #0
 8005f94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10b      	bne.n	8005fb8 <xQueueGenericSend+0x34>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005fb2:	bf00      	nop
 8005fb4:	bf00      	nop
 8005fb6:	e7fd      	b.n	8005fb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d103      	bne.n	8005fc6 <xQueueGenericSend+0x42>
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <xQueueGenericSend+0x46>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e000      	b.n	8005fcc <xQueueGenericSend+0x48>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10b      	bne.n	8005fe8 <xQueueGenericSend+0x64>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005fe2:	bf00      	nop
 8005fe4:	bf00      	nop
 8005fe6:	e7fd      	b.n	8005fe4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d103      	bne.n	8005ff6 <xQueueGenericSend+0x72>
 8005fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <xQueueGenericSend+0x76>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <xQueueGenericSend+0x78>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10b      	bne.n	8006018 <xQueueGenericSend+0x94>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	623b      	str	r3, [r7, #32]
}
 8006012:	bf00      	nop
 8006014:	bf00      	nop
 8006016:	e7fd      	b.n	8006014 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006018:	f001 f95e 	bl	80072d8 <xTaskGetSchedulerState>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d102      	bne.n	8006028 <xQueueGenericSend+0xa4>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <xQueueGenericSend+0xa8>
 8006028:	2301      	movs	r3, #1
 800602a:	e000      	b.n	800602e <xQueueGenericSend+0xaa>
 800602c:	2300      	movs	r3, #0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10b      	bne.n	800604a <xQueueGenericSend+0xc6>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	61fb      	str	r3, [r7, #28]
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	e7fd      	b.n	8006046 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800604a:	f001 fd7d 	bl	8007b48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800604e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006050:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006056:	429a      	cmp	r2, r3
 8006058:	d302      	bcc.n	8006060 <xQueueGenericSend+0xdc>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d129      	bne.n	80060b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006066:	f000 fa47 	bl	80064f8 <prvCopyDataToQueue>
 800606a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800606c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006070:	2b00      	cmp	r3, #0
 8006072:	d010      	beq.n	8006096 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006076:	3324      	adds	r3, #36	@ 0x24
 8006078:	4618      	mov	r0, r3
 800607a:	f000 ff67 	bl	8006f4c <xTaskRemoveFromEventList>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d013      	beq.n	80060ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006084:	4b3f      	ldr	r3, [pc, #252]	@ (8006184 <xQueueGenericSend+0x200>)
 8006086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	e00a      	b.n	80060ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006098:	2b00      	cmp	r3, #0
 800609a:	d007      	beq.n	80060ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800609c:	4b39      	ldr	r3, [pc, #228]	@ (8006184 <xQueueGenericSend+0x200>)
 800609e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80060ac:	f001 fd7e 	bl	8007bac <vPortExitCritical>
				return pdPASS;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e063      	b.n	800617c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d103      	bne.n	80060c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060ba:	f001 fd77 	bl	8007bac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	e05c      	b.n	800617c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d106      	bne.n	80060d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060c8:	f107 0314 	add.w	r3, r7, #20
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 ffa1 	bl	8007014 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060d2:	2301      	movs	r3, #1
 80060d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060d6:	f001 fd69 	bl	8007bac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060da:	f000 fd47 	bl	8006b6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060de:	f001 fd33 	bl	8007b48 <vPortEnterCritical>
 80060e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060e8:	b25b      	sxtb	r3, r3
 80060ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ee:	d103      	bne.n	80060f8 <xQueueGenericSend+0x174>
 80060f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060fe:	b25b      	sxtb	r3, r3
 8006100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006104:	d103      	bne.n	800610e <xQueueGenericSend+0x18a>
 8006106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800610e:	f001 fd4d 	bl	8007bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006112:	1d3a      	adds	r2, r7, #4
 8006114:	f107 0314 	add.w	r3, r7, #20
 8006118:	4611      	mov	r1, r2
 800611a:	4618      	mov	r0, r3
 800611c:	f000 ff90 	bl	8007040 <xTaskCheckForTimeOut>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d124      	bne.n	8006170 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006126:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006128:	f000 fab8 	bl	800669c <prvIsQueueFull>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d018      	beq.n	8006164 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006134:	3310      	adds	r3, #16
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	4611      	mov	r1, r2
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fee0 	bl	8006f00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006140:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006142:	f000 fa43 	bl	80065cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006146:	f000 fd1f 	bl	8006b88 <xTaskResumeAll>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	f47f af7c 	bne.w	800604a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006152:	4b0c      	ldr	r3, [pc, #48]	@ (8006184 <xQueueGenericSend+0x200>)
 8006154:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	e772      	b.n	800604a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006164:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006166:	f000 fa31 	bl	80065cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800616a:	f000 fd0d 	bl	8006b88 <xTaskResumeAll>
 800616e:	e76c      	b.n	800604a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006170:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006172:	f000 fa2b 	bl	80065cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006176:	f000 fd07 	bl	8006b88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800617a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800617c:	4618      	mov	r0, r3
 800617e:	3738      	adds	r7, #56	@ 0x38
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	e000ed04 	.word	0xe000ed04

08006188 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08e      	sub	sp, #56	@ 0x38
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10b      	bne.n	80061b4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800619c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	623b      	str	r3, [r7, #32]
}
 80061ae:	bf00      	nop
 80061b0:	bf00      	nop
 80061b2:	e7fd      	b.n	80061b0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80061b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00b      	beq.n	80061d4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	61fb      	str	r3, [r7, #28]
}
 80061ce:	bf00      	nop
 80061d0:	bf00      	nop
 80061d2:	e7fd      	b.n	80061d0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80061d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d103      	bne.n	80061e4 <xQueueGiveFromISR+0x5c>
 80061dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <xQueueGiveFromISR+0x60>
 80061e4:	2301      	movs	r3, #1
 80061e6:	e000      	b.n	80061ea <xQueueGiveFromISR+0x62>
 80061e8:	2300      	movs	r3, #0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10b      	bne.n	8006206 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	61bb      	str	r3, [r7, #24]
}
 8006200:	bf00      	nop
 8006202:	bf00      	nop
 8006204:	e7fd      	b.n	8006202 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006206:	f001 fd7f 	bl	8007d08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800620a:	f3ef 8211 	mrs	r2, BASEPRI
 800620e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	617a      	str	r2, [r7, #20]
 8006220:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006222:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006224:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800622c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006230:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006232:	429a      	cmp	r2, r3
 8006234:	d22b      	bcs.n	800628e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006238:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800623c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006246:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006248:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800624c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006250:	d112      	bne.n	8006278 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006256:	2b00      	cmp	r3, #0
 8006258:	d016      	beq.n	8006288 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800625a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625c:	3324      	adds	r3, #36	@ 0x24
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fe74 	bl	8006f4c <xTaskRemoveFromEventList>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00e      	beq.n	8006288 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00b      	beq.n	8006288 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	2201      	movs	r2, #1
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	e007      	b.n	8006288 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006278:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800627c:	3301      	adds	r3, #1
 800627e:	b2db      	uxtb	r3, r3
 8006280:	b25a      	sxtb	r2, r3
 8006282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006284:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006288:	2301      	movs	r3, #1
 800628a:	637b      	str	r3, [r7, #52]	@ 0x34
 800628c:	e001      	b.n	8006292 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800628e:	2300      	movs	r3, #0
 8006290:	637b      	str	r3, [r7, #52]	@ 0x34
 8006292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006294:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800629c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800629e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3738      	adds	r7, #56	@ 0x38
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08e      	sub	sp, #56	@ 0x38
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80062b2:	2300      	movs	r3, #0
 80062b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80062ba:	2300      	movs	r3, #0
 80062bc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80062be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10b      	bne.n	80062dc <xQueueSemaphoreTake+0x34>
	__asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	623b      	str	r3, [r7, #32]
}
 80062d6:	bf00      	nop
 80062d8:	bf00      	nop
 80062da:	e7fd      	b.n	80062d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80062dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00b      	beq.n	80062fc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80062e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	61fb      	str	r3, [r7, #28]
}
 80062f6:	bf00      	nop
 80062f8:	bf00      	nop
 80062fa:	e7fd      	b.n	80062f8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062fc:	f000 ffec 	bl	80072d8 <xTaskGetSchedulerState>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d102      	bne.n	800630c <xQueueSemaphoreTake+0x64>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <xQueueSemaphoreTake+0x68>
 800630c:	2301      	movs	r3, #1
 800630e:	e000      	b.n	8006312 <xQueueSemaphoreTake+0x6a>
 8006310:	2300      	movs	r3, #0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10b      	bne.n	800632e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	61bb      	str	r3, [r7, #24]
}
 8006328:	bf00      	nop
 800632a:	bf00      	nop
 800632c:	e7fd      	b.n	800632a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800632e:	f001 fc0b 	bl	8007b48 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006336:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800633a:	2b00      	cmp	r3, #0
 800633c:	d024      	beq.n	8006388 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800633e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006340:	1e5a      	subs	r2, r3, #1
 8006342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006344:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d104      	bne.n	8006358 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800634e:	f001 f96f 	bl	8007630 <pvTaskIncrementMutexHeldCount>
 8006352:	4602      	mov	r2, r0
 8006354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006356:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00f      	beq.n	8006380 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006362:	3310      	adds	r3, #16
 8006364:	4618      	mov	r0, r3
 8006366:	f000 fdf1 	bl	8006f4c <xTaskRemoveFromEventList>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006370:	4b54      	ldr	r3, [pc, #336]	@ (80064c4 <xQueueSemaphoreTake+0x21c>)
 8006372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006376:	601a      	str	r2, [r3, #0]
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006380:	f001 fc14 	bl	8007bac <vPortExitCritical>
				return pdPASS;
 8006384:	2301      	movs	r3, #1
 8006386:	e098      	b.n	80064ba <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d112      	bne.n	80063b4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800638e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00b      	beq.n	80063ac <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	617b      	str	r3, [r7, #20]
}
 80063a6:	bf00      	nop
 80063a8:	bf00      	nop
 80063aa:	e7fd      	b.n	80063a8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80063ac:	f001 fbfe 	bl	8007bac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80063b0:	2300      	movs	r3, #0
 80063b2:	e082      	b.n	80064ba <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d106      	bne.n	80063c8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063ba:	f107 030c 	add.w	r3, r7, #12
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fe28 	bl	8007014 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063c4:	2301      	movs	r3, #1
 80063c6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063c8:	f001 fbf0 	bl	8007bac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063cc:	f000 fbce 	bl	8006b6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063d0:	f001 fbba 	bl	8007b48 <vPortEnterCritical>
 80063d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063da:	b25b      	sxtb	r3, r3
 80063dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e0:	d103      	bne.n	80063ea <xQueueSemaphoreTake+0x142>
 80063e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063f0:	b25b      	sxtb	r3, r3
 80063f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f6:	d103      	bne.n	8006400 <xQueueSemaphoreTake+0x158>
 80063f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006400:	f001 fbd4 	bl	8007bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006404:	463a      	mov	r2, r7
 8006406:	f107 030c 	add.w	r3, r7, #12
 800640a:	4611      	mov	r1, r2
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fe17 	bl	8007040 <xTaskCheckForTimeOut>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d132      	bne.n	800647e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006418:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800641a:	f000 f929 	bl	8006670 <prvIsQueueEmpty>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d026      	beq.n	8006472 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d109      	bne.n	8006440 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800642c:	f001 fb8c 	bl	8007b48 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	4618      	mov	r0, r3
 8006436:	f000 ff6d 	bl	8007314 <xTaskPriorityInherit>
 800643a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800643c:	f001 fbb6 	bl	8007bac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006442:	3324      	adds	r3, #36	@ 0x24
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	4611      	mov	r1, r2
 8006448:	4618      	mov	r0, r3
 800644a:	f000 fd59 	bl	8006f00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800644e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006450:	f000 f8bc 	bl	80065cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006454:	f000 fb98 	bl	8006b88 <xTaskResumeAll>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	f47f af67 	bne.w	800632e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006460:	4b18      	ldr	r3, [pc, #96]	@ (80064c4 <xQueueSemaphoreTake+0x21c>)
 8006462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	e75d      	b.n	800632e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006472:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006474:	f000 f8aa 	bl	80065cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006478:	f000 fb86 	bl	8006b88 <xTaskResumeAll>
 800647c:	e757      	b.n	800632e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800647e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006480:	f000 f8a4 	bl	80065cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006484:	f000 fb80 	bl	8006b88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006488:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800648a:	f000 f8f1 	bl	8006670 <prvIsQueueEmpty>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	f43f af4c 	beq.w	800632e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00d      	beq.n	80064b8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800649c:	f001 fb54 	bl	8007b48 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80064a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064a2:	f000 f811 	bl	80064c8 <prvGetDisinheritPriorityAfterTimeout>
 80064a6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80064a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 f82e 	bl	8007510 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80064b4:	f001 fb7a 	bl	8007bac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80064b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3738      	adds	r7, #56	@ 0x38
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	e000ed04 	.word	0xe000ed04

080064c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d006      	beq.n	80064e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f1c3 0307 	rsb	r3, r3, #7
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	e001      	b.n	80064ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80064ea:	68fb      	ldr	r3, [r7, #12]
	}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006504:	2300      	movs	r3, #0
 8006506:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10d      	bne.n	8006532 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d14d      	bne.n	80065ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	4618      	mov	r0, r3
 8006524:	f000 ff6c 	bl	8007400 <xTaskPriorityDisinherit>
 8006528:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	609a      	str	r2, [r3, #8]
 8006530:	e043      	b.n	80065ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d119      	bne.n	800656c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6858      	ldr	r0, [r3, #4]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006540:	461a      	mov	r2, r3
 8006542:	68b9      	ldr	r1, [r7, #8]
 8006544:	f001 fec4 	bl	80082d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006550:	441a      	add	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	429a      	cmp	r2, r3
 8006560:	d32b      	bcc.n	80065ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	605a      	str	r2, [r3, #4]
 800656a:	e026      	b.n	80065ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	68d8      	ldr	r0, [r3, #12]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006574:	461a      	mov	r2, r3
 8006576:	68b9      	ldr	r1, [r7, #8]
 8006578:	f001 feaa 	bl	80082d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006584:	425b      	negs	r3, r3
 8006586:	441a      	add	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	68da      	ldr	r2, [r3, #12]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	429a      	cmp	r2, r3
 8006596:	d207      	bcs.n	80065a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a0:	425b      	negs	r3, r3
 80065a2:	441a      	add	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d105      	bne.n	80065ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1c5a      	adds	r2, r3, #1
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80065c2:	697b      	ldr	r3, [r7, #20]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80065d4:	f001 fab8 	bl	8007b48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065e0:	e011      	b.n	8006606 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d012      	beq.n	8006610 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3324      	adds	r3, #36	@ 0x24
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 fcac 	bl	8006f4c <xTaskRemoveFromEventList>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80065fa:	f000 fd85 	bl	8007108 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
 8006600:	3b01      	subs	r3, #1
 8006602:	b2db      	uxtb	r3, r3
 8006604:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800660a:	2b00      	cmp	r3, #0
 800660c:	dce9      	bgt.n	80065e2 <prvUnlockQueue+0x16>
 800660e:	e000      	b.n	8006612 <prvUnlockQueue+0x46>
					break;
 8006610:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	22ff      	movs	r2, #255	@ 0xff
 8006616:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800661a:	f001 fac7 	bl	8007bac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800661e:	f001 fa93 	bl	8007b48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006628:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800662a:	e011      	b.n	8006650 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d012      	beq.n	800665a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3310      	adds	r3, #16
 8006638:	4618      	mov	r0, r3
 800663a:	f000 fc87 	bl	8006f4c <xTaskRemoveFromEventList>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006644:	f000 fd60 	bl	8007108 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006648:	7bbb      	ldrb	r3, [r7, #14]
 800664a:	3b01      	subs	r3, #1
 800664c:	b2db      	uxtb	r3, r3
 800664e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006654:	2b00      	cmp	r3, #0
 8006656:	dce9      	bgt.n	800662c <prvUnlockQueue+0x60>
 8006658:	e000      	b.n	800665c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800665a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	22ff      	movs	r2, #255	@ 0xff
 8006660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006664:	f001 faa2 	bl	8007bac <vPortExitCritical>
}
 8006668:	bf00      	nop
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006678:	f001 fa66 	bl	8007b48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006680:	2b00      	cmp	r3, #0
 8006682:	d102      	bne.n	800668a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006684:	2301      	movs	r3, #1
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	e001      	b.n	800668e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800668e:	f001 fa8d 	bl	8007bac <vPortExitCritical>

	return xReturn;
 8006692:	68fb      	ldr	r3, [r7, #12]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066a4:	f001 fa50 	bl	8007b48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d102      	bne.n	80066ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80066b4:	2301      	movs	r3, #1
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	e001      	b.n	80066be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066be:	f001 fa75 	bl	8007bac <vPortExitCritical>

	return xReturn;
 80066c2:	68fb      	ldr	r3, [r7, #12]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08e      	sub	sp, #56	@ 0x38
 80066d0:	af04      	add	r7, sp, #16
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
 80066d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80066da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10b      	bne.n	80066f8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	623b      	str	r3, [r7, #32]
}
 80066f2:	bf00      	nop
 80066f4:	bf00      	nop
 80066f6:	e7fd      	b.n	80066f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10b      	bne.n	8006716 <xTaskCreateStatic+0x4a>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	61fb      	str	r3, [r7, #28]
}
 8006710:	bf00      	nop
 8006712:	bf00      	nop
 8006714:	e7fd      	b.n	8006712 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006716:	23a0      	movs	r3, #160	@ 0xa0
 8006718:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	2ba0      	cmp	r3, #160	@ 0xa0
 800671e:	d00b      	beq.n	8006738 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	61bb      	str	r3, [r7, #24]
}
 8006732:	bf00      	nop
 8006734:	bf00      	nop
 8006736:	e7fd      	b.n	8006734 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006738:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800673a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673c:	2b00      	cmp	r3, #0
 800673e:	d01e      	beq.n	800677e <xTaskCreateStatic+0xb2>
 8006740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006742:	2b00      	cmp	r3, #0
 8006744:	d01b      	beq.n	800677e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006748:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800674e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006752:	2202      	movs	r2, #2
 8006754:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006758:	2300      	movs	r3, #0
 800675a:	9303      	str	r3, [sp, #12]
 800675c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675e:	9302      	str	r3, [sp, #8]
 8006760:	f107 0314 	add.w	r3, r7, #20
 8006764:	9301      	str	r3, [sp, #4]
 8006766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 f851 	bl	8006818 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006776:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006778:	f000 f8ee 	bl	8006958 <prvAddNewTaskToReadyList>
 800677c:	e001      	b.n	8006782 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800677e:	2300      	movs	r3, #0
 8006780:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006782:	697b      	ldr	r3, [r7, #20]
	}
 8006784:	4618      	mov	r0, r3
 8006786:	3728      	adds	r7, #40	@ 0x28
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800678c:	b580      	push	{r7, lr}
 800678e:	b08c      	sub	sp, #48	@ 0x30
 8006790:	af04      	add	r7, sp, #16
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	603b      	str	r3, [r7, #0]
 8006798:	4613      	mov	r3, r2
 800679a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800679c:	88fb      	ldrh	r3, [r7, #6]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4618      	mov	r0, r3
 80067a2:	f001 faf3 	bl	8007d8c <pvPortMalloc>
 80067a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00e      	beq.n	80067cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80067ae:	20a0      	movs	r0, #160	@ 0xa0
 80067b0:	f001 faec 	bl	8007d8c <pvPortMalloc>
 80067b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d003      	beq.n	80067c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80067c2:	e005      	b.n	80067d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80067c4:	6978      	ldr	r0, [r7, #20]
 80067c6:	f001 fbaf 	bl	8007f28 <vPortFree>
 80067ca:	e001      	b.n	80067d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067cc:	2300      	movs	r3, #0
 80067ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d017      	beq.n	8006806 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067de:	88fa      	ldrh	r2, [r7, #6]
 80067e0:	2300      	movs	r3, #0
 80067e2:	9303      	str	r3, [sp, #12]
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	9302      	str	r3, [sp, #8]
 80067e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ea:	9301      	str	r3, [sp, #4]
 80067ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	68b9      	ldr	r1, [r7, #8]
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 f80f 	bl	8006818 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067fa:	69f8      	ldr	r0, [r7, #28]
 80067fc:	f000 f8ac 	bl	8006958 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006800:	2301      	movs	r3, #1
 8006802:	61bb      	str	r3, [r7, #24]
 8006804:	e002      	b.n	800680c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006806:	f04f 33ff 	mov.w	r3, #4294967295
 800680a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800680c:	69bb      	ldr	r3, [r7, #24]
	}
 800680e:	4618      	mov	r0, r3
 8006810:	3720      	adds	r7, #32
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006828:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006830:	3b01      	subs	r3, #1
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	f023 0307 	bic.w	r3, r3, #7
 800683e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	f003 0307 	and.w	r3, r3, #7
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00b      	beq.n	8006862 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	617b      	str	r3, [r7, #20]
}
 800685c:	bf00      	nop
 800685e:	bf00      	nop
 8006860:	e7fd      	b.n	800685e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01f      	beq.n	80068a8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006868:	2300      	movs	r3, #0
 800686a:	61fb      	str	r3, [r7, #28]
 800686c:	e012      	b.n	8006894 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	4413      	add	r3, r2
 8006874:	7819      	ldrb	r1, [r3, #0]
 8006876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	4413      	add	r3, r2
 800687c:	3334      	adds	r3, #52	@ 0x34
 800687e:	460a      	mov	r2, r1
 8006880:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	4413      	add	r3, r2
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d006      	beq.n	800689c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	3301      	adds	r3, #1
 8006892:	61fb      	str	r3, [r7, #28]
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	2b0f      	cmp	r3, #15
 8006898:	d9e9      	bls.n	800686e <prvInitialiseNewTask+0x56>
 800689a:	e000      	b.n	800689e <prvInitialiseNewTask+0x86>
			{
				break;
 800689c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800689e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068a6:	e003      	b.n	80068b0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80068a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b2:	2b06      	cmp	r3, #6
 80068b4:	d901      	bls.n	80068ba <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068b6:	2306      	movs	r3, #6
 80068b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068be:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80068c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068c4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80068c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c8:	2200      	movs	r2, #0
 80068ca:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80068cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ce:	3304      	adds	r3, #4
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7ff f9fe 	bl	8005cd2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d8:	3318      	adds	r3, #24
 80068da:	4618      	mov	r0, r3
 80068dc:	f7ff f9f9 	bl	8005cd2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e8:	f1c3 0207 	rsb	r2, r3, #7
 80068ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068f4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f8:	2200      	movs	r2, #0
 80068fa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	2200      	movs	r2, #0
 8006902:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	334c      	adds	r3, #76	@ 0x4c
 800690a:	224c      	movs	r2, #76	@ 0x4c
 800690c:	2100      	movs	r1, #0
 800690e:	4618      	mov	r0, r3
 8006910:	f001 fc4c 	bl	80081ac <memset>
 8006914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006916:	4a0d      	ldr	r2, [pc, #52]	@ (800694c <prvInitialiseNewTask+0x134>)
 8006918:	651a      	str	r2, [r3, #80]	@ 0x50
 800691a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691c:	4a0c      	ldr	r2, [pc, #48]	@ (8006950 <prvInitialiseNewTask+0x138>)
 800691e:	655a      	str	r2, [r3, #84]	@ 0x54
 8006920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006922:	4a0c      	ldr	r2, [pc, #48]	@ (8006954 <prvInitialiseNewTask+0x13c>)
 8006924:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	68f9      	ldr	r1, [r7, #12]
 800692a:	69b8      	ldr	r0, [r7, #24]
 800692c:	f000 ffdc 	bl	80078e8 <pxPortInitialiseStack>
 8006930:	4602      	mov	r2, r0
 8006932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006934:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800693c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006940:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006942:	bf00      	nop
 8006944:	3720      	adds	r7, #32
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	200043d0 	.word	0x200043d0
 8006950:	20004438 	.word	0x20004438
 8006954:	200044a0 	.word	0x200044a0

08006958 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006960:	f001 f8f2 	bl	8007b48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006964:	4b2a      	ldr	r3, [pc, #168]	@ (8006a10 <prvAddNewTaskToReadyList+0xb8>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3301      	adds	r3, #1
 800696a:	4a29      	ldr	r2, [pc, #164]	@ (8006a10 <prvAddNewTaskToReadyList+0xb8>)
 800696c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800696e:	4b29      	ldr	r3, [pc, #164]	@ (8006a14 <prvAddNewTaskToReadyList+0xbc>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d109      	bne.n	800698a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006976:	4a27      	ldr	r2, [pc, #156]	@ (8006a14 <prvAddNewTaskToReadyList+0xbc>)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800697c:	4b24      	ldr	r3, [pc, #144]	@ (8006a10 <prvAddNewTaskToReadyList+0xb8>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d110      	bne.n	80069a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006984:	f000 fbe4 	bl	8007150 <prvInitialiseTaskLists>
 8006988:	e00d      	b.n	80069a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800698a:	4b23      	ldr	r3, [pc, #140]	@ (8006a18 <prvAddNewTaskToReadyList+0xc0>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d109      	bne.n	80069a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006992:	4b20      	ldr	r3, [pc, #128]	@ (8006a14 <prvAddNewTaskToReadyList+0xbc>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699c:	429a      	cmp	r2, r3
 800699e:	d802      	bhi.n	80069a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069a0:	4a1c      	ldr	r2, [pc, #112]	@ (8006a14 <prvAddNewTaskToReadyList+0xbc>)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069a6:	4b1d      	ldr	r3, [pc, #116]	@ (8006a1c <prvAddNewTaskToReadyList+0xc4>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3301      	adds	r3, #1
 80069ac:	4a1b      	ldr	r2, [pc, #108]	@ (8006a1c <prvAddNewTaskToReadyList+0xc4>)
 80069ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b4:	2201      	movs	r2, #1
 80069b6:	409a      	lsls	r2, r3
 80069b8:	4b19      	ldr	r3, [pc, #100]	@ (8006a20 <prvAddNewTaskToReadyList+0xc8>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4313      	orrs	r3, r2
 80069be:	4a18      	ldr	r2, [pc, #96]	@ (8006a20 <prvAddNewTaskToReadyList+0xc8>)
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069c6:	4613      	mov	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4a15      	ldr	r2, [pc, #84]	@ (8006a24 <prvAddNewTaskToReadyList+0xcc>)
 80069d0:	441a      	add	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	3304      	adds	r3, #4
 80069d6:	4619      	mov	r1, r3
 80069d8:	4610      	mov	r0, r2
 80069da:	f7ff f987 	bl	8005cec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069de:	f001 f8e5 	bl	8007bac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a18 <prvAddNewTaskToReadyList+0xc0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00e      	beq.n	8006a08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006a14 <prvAddNewTaskToReadyList+0xbc>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d207      	bcs.n	8006a08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006a28 <prvAddNewTaskToReadyList+0xd0>)
 80069fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a08:	bf00      	nop
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	2000077c 	.word	0x2000077c
 8006a14:	2000067c 	.word	0x2000067c
 8006a18:	20000788 	.word	0x20000788
 8006a1c:	20000798 	.word	0x20000798
 8006a20:	20000784 	.word	0x20000784
 8006a24:	20000680 	.word	0x20000680
 8006a28:	e000ed04 	.word	0xe000ed04

08006a2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a34:	2300      	movs	r3, #0
 8006a36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d018      	beq.n	8006a70 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a3e:	4b14      	ldr	r3, [pc, #80]	@ (8006a90 <vTaskDelay+0x64>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00b      	beq.n	8006a5e <vTaskDelay+0x32>
	__asm volatile
 8006a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	60bb      	str	r3, [r7, #8]
}
 8006a58:	bf00      	nop
 8006a5a:	bf00      	nop
 8006a5c:	e7fd      	b.n	8006a5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a5e:	f000 f885 	bl	8006b6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a62:	2100      	movs	r1, #0
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fed9 	bl	800781c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a6a:	f000 f88d 	bl	8006b88 <xTaskResumeAll>
 8006a6e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d107      	bne.n	8006a86 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006a76:	4b07      	ldr	r3, [pc, #28]	@ (8006a94 <vTaskDelay+0x68>)
 8006a78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a86:	bf00      	nop
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	200007a4 	.word	0x200007a4
 8006a94:	e000ed04 	.word	0xe000ed04

08006a98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08a      	sub	sp, #40	@ 0x28
 8006a9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006aa6:	463a      	mov	r2, r7
 8006aa8:	1d39      	adds	r1, r7, #4
 8006aaa:	f107 0308 	add.w	r3, r7, #8
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7f9 fd84 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ab4:	6839      	ldr	r1, [r7, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	9202      	str	r2, [sp, #8]
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	2300      	movs	r3, #0
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	460a      	mov	r2, r1
 8006ac6:	4921      	ldr	r1, [pc, #132]	@ (8006b4c <vTaskStartScheduler+0xb4>)
 8006ac8:	4821      	ldr	r0, [pc, #132]	@ (8006b50 <vTaskStartScheduler+0xb8>)
 8006aca:	f7ff fdff 	bl	80066cc <xTaskCreateStatic>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	4a20      	ldr	r2, [pc, #128]	@ (8006b54 <vTaskStartScheduler+0xbc>)
 8006ad2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8006b54 <vTaskStartScheduler+0xbc>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d002      	beq.n	8006ae2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006adc:	2301      	movs	r3, #1
 8006ade:	617b      	str	r3, [r7, #20]
 8006ae0:	e001      	b.n	8006ae6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d11b      	bne.n	8006b24 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	613b      	str	r3, [r7, #16]
}
 8006afe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b00:	4b15      	ldr	r3, [pc, #84]	@ (8006b58 <vTaskStartScheduler+0xc0>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	334c      	adds	r3, #76	@ 0x4c
 8006b06:	4a15      	ldr	r2, [pc, #84]	@ (8006b5c <vTaskStartScheduler+0xc4>)
 8006b08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b0a:	4b15      	ldr	r3, [pc, #84]	@ (8006b60 <vTaskStartScheduler+0xc8>)
 8006b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b12:	4b14      	ldr	r3, [pc, #80]	@ (8006b64 <vTaskStartScheduler+0xcc>)
 8006b14:	2201      	movs	r2, #1
 8006b16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b18:	4b13      	ldr	r3, [pc, #76]	@ (8006b68 <vTaskStartScheduler+0xd0>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b1e:	f000 ff6f 	bl	8007a00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b22:	e00f      	b.n	8006b44 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2a:	d10b      	bne.n	8006b44 <vTaskStartScheduler+0xac>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	60fb      	str	r3, [r7, #12]
}
 8006b3e:	bf00      	nop
 8006b40:	bf00      	nop
 8006b42:	e7fd      	b.n	8006b40 <vTaskStartScheduler+0xa8>
}
 8006b44:	bf00      	nop
 8006b46:	3718      	adds	r7, #24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	08008ce4 	.word	0x08008ce4
 8006b50:	08007121 	.word	0x08007121
 8006b54:	200007a0 	.word	0x200007a0
 8006b58:	2000067c 	.word	0x2000067c
 8006b5c:	200000dc 	.word	0x200000dc
 8006b60:	2000079c 	.word	0x2000079c
 8006b64:	20000788 	.word	0x20000788
 8006b68:	20000780 	.word	0x20000780

08006b6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b70:	4b04      	ldr	r3, [pc, #16]	@ (8006b84 <vTaskSuspendAll+0x18>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3301      	adds	r3, #1
 8006b76:	4a03      	ldr	r2, [pc, #12]	@ (8006b84 <vTaskSuspendAll+0x18>)
 8006b78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b7a:	bf00      	nop
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	200007a4 	.word	0x200007a4

08006b88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b96:	4b42      	ldr	r3, [pc, #264]	@ (8006ca0 <xTaskResumeAll+0x118>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10b      	bne.n	8006bb6 <xTaskResumeAll+0x2e>
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	603b      	str	r3, [r7, #0]
}
 8006bb0:	bf00      	nop
 8006bb2:	bf00      	nop
 8006bb4:	e7fd      	b.n	8006bb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006bb6:	f000 ffc7 	bl	8007b48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006bba:	4b39      	ldr	r3, [pc, #228]	@ (8006ca0 <xTaskResumeAll+0x118>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	4a37      	ldr	r2, [pc, #220]	@ (8006ca0 <xTaskResumeAll+0x118>)
 8006bc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bc4:	4b36      	ldr	r3, [pc, #216]	@ (8006ca0 <xTaskResumeAll+0x118>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d161      	bne.n	8006c90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006bcc:	4b35      	ldr	r3, [pc, #212]	@ (8006ca4 <xTaskResumeAll+0x11c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d05d      	beq.n	8006c90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bd4:	e02e      	b.n	8006c34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bd6:	4b34      	ldr	r3, [pc, #208]	@ (8006ca8 <xTaskResumeAll+0x120>)
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3318      	adds	r3, #24
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff f8df 	bl	8005da6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	3304      	adds	r3, #4
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7ff f8da 	bl	8005da6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	409a      	lsls	r2, r3
 8006bfa:	4b2c      	ldr	r3, [pc, #176]	@ (8006cac <xTaskResumeAll+0x124>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	4a2a      	ldr	r2, [pc, #168]	@ (8006cac <xTaskResumeAll+0x124>)
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c08:	4613      	mov	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4a27      	ldr	r2, [pc, #156]	@ (8006cb0 <xTaskResumeAll+0x128>)
 8006c12:	441a      	add	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3304      	adds	r3, #4
 8006c18:	4619      	mov	r1, r3
 8006c1a:	4610      	mov	r0, r2
 8006c1c:	f7ff f866 	bl	8005cec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c24:	4b23      	ldr	r3, [pc, #140]	@ (8006cb4 <xTaskResumeAll+0x12c>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d302      	bcc.n	8006c34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006c2e:	4b22      	ldr	r3, [pc, #136]	@ (8006cb8 <xTaskResumeAll+0x130>)
 8006c30:	2201      	movs	r2, #1
 8006c32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c34:	4b1c      	ldr	r3, [pc, #112]	@ (8006ca8 <xTaskResumeAll+0x120>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1cc      	bne.n	8006bd6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c42:	f000 fb29 	bl	8007298 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c46:	4b1d      	ldr	r3, [pc, #116]	@ (8006cbc <xTaskResumeAll+0x134>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d010      	beq.n	8006c74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c52:	f000 f837 	bl	8006cc4 <xTaskIncrementTick>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d002      	beq.n	8006c62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006c5c:	4b16      	ldr	r3, [pc, #88]	@ (8006cb8 <xTaskResumeAll+0x130>)
 8006c5e:	2201      	movs	r2, #1
 8006c60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	3b01      	subs	r3, #1
 8006c66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1f1      	bne.n	8006c52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006c6e:	4b13      	ldr	r3, [pc, #76]	@ (8006cbc <xTaskResumeAll+0x134>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c74:	4b10      	ldr	r3, [pc, #64]	@ (8006cb8 <xTaskResumeAll+0x130>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d009      	beq.n	8006c90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c80:	4b0f      	ldr	r3, [pc, #60]	@ (8006cc0 <xTaskResumeAll+0x138>)
 8006c82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c90:	f000 ff8c 	bl	8007bac <vPortExitCritical>

	return xAlreadyYielded;
 8006c94:	68bb      	ldr	r3, [r7, #8]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	200007a4 	.word	0x200007a4
 8006ca4:	2000077c 	.word	0x2000077c
 8006ca8:	2000073c 	.word	0x2000073c
 8006cac:	20000784 	.word	0x20000784
 8006cb0:	20000680 	.word	0x20000680
 8006cb4:	2000067c 	.word	0x2000067c
 8006cb8:	20000790 	.word	0x20000790
 8006cbc:	2000078c 	.word	0x2000078c
 8006cc0:	e000ed04 	.word	0xe000ed04

08006cc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cce:	4b4f      	ldr	r3, [pc, #316]	@ (8006e0c <xTaskIncrementTick+0x148>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f040 808f 	bne.w	8006df6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8006e10 <xTaskIncrementTick+0x14c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ce0:	4a4b      	ldr	r2, [pc, #300]	@ (8006e10 <xTaskIncrementTick+0x14c>)
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d121      	bne.n	8006d30 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006cec:	4b49      	ldr	r3, [pc, #292]	@ (8006e14 <xTaskIncrementTick+0x150>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00b      	beq.n	8006d0e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	603b      	str	r3, [r7, #0]
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <xTaskIncrementTick+0x46>
 8006d0e:	4b41      	ldr	r3, [pc, #260]	@ (8006e14 <xTaskIncrementTick+0x150>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	4b40      	ldr	r3, [pc, #256]	@ (8006e18 <xTaskIncrementTick+0x154>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a3e      	ldr	r2, [pc, #248]	@ (8006e14 <xTaskIncrementTick+0x150>)
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	4a3e      	ldr	r2, [pc, #248]	@ (8006e18 <xTaskIncrementTick+0x154>)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6013      	str	r3, [r2, #0]
 8006d22:	4b3e      	ldr	r3, [pc, #248]	@ (8006e1c <xTaskIncrementTick+0x158>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3301      	adds	r3, #1
 8006d28:	4a3c      	ldr	r2, [pc, #240]	@ (8006e1c <xTaskIncrementTick+0x158>)
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	f000 fab4 	bl	8007298 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d30:	4b3b      	ldr	r3, [pc, #236]	@ (8006e20 <xTaskIncrementTick+0x15c>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d348      	bcc.n	8006dcc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d3a:	4b36      	ldr	r3, [pc, #216]	@ (8006e14 <xTaskIncrementTick+0x150>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d104      	bne.n	8006d4e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d44:	4b36      	ldr	r3, [pc, #216]	@ (8006e20 <xTaskIncrementTick+0x15c>)
 8006d46:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4a:	601a      	str	r2, [r3, #0]
					break;
 8006d4c:	e03e      	b.n	8006dcc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d4e:	4b31      	ldr	r3, [pc, #196]	@ (8006e14 <xTaskIncrementTick+0x150>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d203      	bcs.n	8006d6e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d66:	4a2e      	ldr	r2, [pc, #184]	@ (8006e20 <xTaskIncrementTick+0x15c>)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d6c:	e02e      	b.n	8006dcc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	3304      	adds	r3, #4
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff f817 	bl	8005da6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d004      	beq.n	8006d8a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	3318      	adds	r3, #24
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7ff f80e 	bl	8005da6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d8e:	2201      	movs	r2, #1
 8006d90:	409a      	lsls	r2, r3
 8006d92:	4b24      	ldr	r3, [pc, #144]	@ (8006e24 <xTaskIncrementTick+0x160>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	4a22      	ldr	r2, [pc, #136]	@ (8006e24 <xTaskIncrementTick+0x160>)
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006da0:	4613      	mov	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4a1f      	ldr	r2, [pc, #124]	@ (8006e28 <xTaskIncrementTick+0x164>)
 8006daa:	441a      	add	r2, r3
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	3304      	adds	r3, #4
 8006db0:	4619      	mov	r1, r3
 8006db2:	4610      	mov	r0, r2
 8006db4:	f7fe ff9a 	bl	8005cec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8006e2c <xTaskIncrementTick+0x168>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d3b9      	bcc.n	8006d3a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dca:	e7b6      	b.n	8006d3a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006dcc:	4b17      	ldr	r3, [pc, #92]	@ (8006e2c <xTaskIncrementTick+0x168>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dd2:	4915      	ldr	r1, [pc, #84]	@ (8006e28 <xTaskIncrementTick+0x164>)
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	440b      	add	r3, r1
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d901      	bls.n	8006de8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006de4:	2301      	movs	r3, #1
 8006de6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006de8:	4b11      	ldr	r3, [pc, #68]	@ (8006e30 <xTaskIncrementTick+0x16c>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d007      	beq.n	8006e00 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006df0:	2301      	movs	r3, #1
 8006df2:	617b      	str	r3, [r7, #20]
 8006df4:	e004      	b.n	8006e00 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006df6:	4b0f      	ldr	r3, [pc, #60]	@ (8006e34 <xTaskIncrementTick+0x170>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8006e34 <xTaskIncrementTick+0x170>)
 8006dfe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006e00:	697b      	ldr	r3, [r7, #20]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	200007a4 	.word	0x200007a4
 8006e10:	20000780 	.word	0x20000780
 8006e14:	20000734 	.word	0x20000734
 8006e18:	20000738 	.word	0x20000738
 8006e1c:	20000794 	.word	0x20000794
 8006e20:	2000079c 	.word	0x2000079c
 8006e24:	20000784 	.word	0x20000784
 8006e28:	20000680 	.word	0x20000680
 8006e2c:	2000067c 	.word	0x2000067c
 8006e30:	20000790 	.word	0x20000790
 8006e34:	2000078c 	.word	0x2000078c

08006e38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8006ee8 <vTaskSwitchContext+0xb0>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e46:	4b29      	ldr	r3, [pc, #164]	@ (8006eec <vTaskSwitchContext+0xb4>)
 8006e48:	2201      	movs	r2, #1
 8006e4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e4c:	e045      	b.n	8006eda <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006e4e:	4b27      	ldr	r3, [pc, #156]	@ (8006eec <vTaskSwitchContext+0xb4>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e54:	4b26      	ldr	r3, [pc, #152]	@ (8006ef0 <vTaskSwitchContext+0xb8>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	fab3 f383 	clz	r3, r3
 8006e60:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006e62:	7afb      	ldrb	r3, [r7, #11]
 8006e64:	f1c3 031f 	rsb	r3, r3, #31
 8006e68:	617b      	str	r3, [r7, #20]
 8006e6a:	4922      	ldr	r1, [pc, #136]	@ (8006ef4 <vTaskSwitchContext+0xbc>)
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	440b      	add	r3, r1
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10b      	bne.n	8006e96 <vTaskSwitchContext+0x5e>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	607b      	str	r3, [r7, #4]
}
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop
 8006e94:	e7fd      	b.n	8006e92 <vTaskSwitchContext+0x5a>
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4a14      	ldr	r2, [pc, #80]	@ (8006ef4 <vTaskSwitchContext+0xbc>)
 8006ea2:	4413      	add	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	605a      	str	r2, [r3, #4]
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	685a      	ldr	r2, [r3, #4]
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	3308      	adds	r3, #8
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d104      	bne.n	8006ec6 <vTaskSwitchContext+0x8e>
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	605a      	str	r2, [r3, #4]
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8006ef8 <vTaskSwitchContext+0xc0>)
 8006ece:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ed0:	4b09      	ldr	r3, [pc, #36]	@ (8006ef8 <vTaskSwitchContext+0xc0>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	334c      	adds	r3, #76	@ 0x4c
 8006ed6:	4a09      	ldr	r2, [pc, #36]	@ (8006efc <vTaskSwitchContext+0xc4>)
 8006ed8:	6013      	str	r3, [r2, #0]
}
 8006eda:	bf00      	nop
 8006edc:	371c      	adds	r7, #28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	200007a4 	.word	0x200007a4
 8006eec:	20000790 	.word	0x20000790
 8006ef0:	20000784 	.word	0x20000784
 8006ef4:	20000680 	.word	0x20000680
 8006ef8:	2000067c 	.word	0x2000067c
 8006efc:	200000dc 	.word	0x200000dc

08006f00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10b      	bne.n	8006f28 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	60fb      	str	r3, [r7, #12]
}
 8006f22:	bf00      	nop
 8006f24:	bf00      	nop
 8006f26:	e7fd      	b.n	8006f24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f28:	4b07      	ldr	r3, [pc, #28]	@ (8006f48 <vTaskPlaceOnEventList+0x48>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3318      	adds	r3, #24
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7fe feff 	bl	8005d34 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f36:	2101      	movs	r1, #1
 8006f38:	6838      	ldr	r0, [r7, #0]
 8006f3a:	f000 fc6f 	bl	800781c <prvAddCurrentTaskToDelayedList>
}
 8006f3e:	bf00      	nop
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	2000067c 	.word	0x2000067c

08006f4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b086      	sub	sp, #24
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10b      	bne.n	8006f7a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	60fb      	str	r3, [r7, #12]
}
 8006f74:	bf00      	nop
 8006f76:	bf00      	nop
 8006f78:	e7fd      	b.n	8006f76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	3318      	adds	r3, #24
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fe ff11 	bl	8005da6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f84:	4b1d      	ldr	r3, [pc, #116]	@ (8006ffc <xTaskRemoveFromEventList+0xb0>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d11c      	bne.n	8006fc6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	3304      	adds	r3, #4
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fe ff08 	bl	8005da6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	409a      	lsls	r2, r3
 8006f9e:	4b18      	ldr	r3, [pc, #96]	@ (8007000 <xTaskRemoveFromEventList+0xb4>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	4a16      	ldr	r2, [pc, #88]	@ (8007000 <xTaskRemoveFromEventList+0xb4>)
 8006fa6:	6013      	str	r3, [r2, #0]
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fac:	4613      	mov	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4a13      	ldr	r2, [pc, #76]	@ (8007004 <xTaskRemoveFromEventList+0xb8>)
 8006fb6:	441a      	add	r2, r3
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	3304      	adds	r3, #4
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	f7fe fe94 	bl	8005cec <vListInsertEnd>
 8006fc4:	e005      	b.n	8006fd2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	3318      	adds	r3, #24
 8006fca:	4619      	mov	r1, r3
 8006fcc:	480e      	ldr	r0, [pc, #56]	@ (8007008 <xTaskRemoveFromEventList+0xbc>)
 8006fce:	f7fe fe8d 	bl	8005cec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800700c <xTaskRemoveFromEventList+0xc0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d905      	bls.n	8006fec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8007010 <xTaskRemoveFromEventList+0xc4>)
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	e001      	b.n	8006ff0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006fec:	2300      	movs	r3, #0
 8006fee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ff0:	697b      	ldr	r3, [r7, #20]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	200007a4 	.word	0x200007a4
 8007000:	20000784 	.word	0x20000784
 8007004:	20000680 	.word	0x20000680
 8007008:	2000073c 	.word	0x2000073c
 800700c:	2000067c 	.word	0x2000067c
 8007010:	20000790 	.word	0x20000790

08007014 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800701c:	4b06      	ldr	r3, [pc, #24]	@ (8007038 <vTaskInternalSetTimeOutState+0x24>)
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007024:	4b05      	ldr	r3, [pc, #20]	@ (800703c <vTaskInternalSetTimeOutState+0x28>)
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	605a      	str	r2, [r3, #4]
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	20000794 	.word	0x20000794
 800703c:	20000780 	.word	0x20000780

08007040 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b088      	sub	sp, #32
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10b      	bne.n	8007068 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	613b      	str	r3, [r7, #16]
}
 8007062:	bf00      	nop
 8007064:	bf00      	nop
 8007066:	e7fd      	b.n	8007064 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10b      	bne.n	8007086 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	60fb      	str	r3, [r7, #12]
}
 8007080:	bf00      	nop
 8007082:	bf00      	nop
 8007084:	e7fd      	b.n	8007082 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007086:	f000 fd5f 	bl	8007b48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800708a:	4b1d      	ldr	r3, [pc, #116]	@ (8007100 <xTaskCheckForTimeOut+0xc0>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a2:	d102      	bne.n	80070aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80070a4:	2300      	movs	r3, #0
 80070a6:	61fb      	str	r3, [r7, #28]
 80070a8:	e023      	b.n	80070f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	4b15      	ldr	r3, [pc, #84]	@ (8007104 <xTaskCheckForTimeOut+0xc4>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d007      	beq.n	80070c6 <xTaskCheckForTimeOut+0x86>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d302      	bcc.n	80070c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070c0:	2301      	movs	r3, #1
 80070c2:	61fb      	str	r3, [r7, #28]
 80070c4:	e015      	b.n	80070f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d20b      	bcs.n	80070e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	1ad2      	subs	r2, r2, r3
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff ff99 	bl	8007014 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070e2:	2300      	movs	r3, #0
 80070e4:	61fb      	str	r3, [r7, #28]
 80070e6:	e004      	b.n	80070f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2200      	movs	r2, #0
 80070ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070ee:	2301      	movs	r3, #1
 80070f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070f2:	f000 fd5b 	bl	8007bac <vPortExitCritical>

	return xReturn;
 80070f6:	69fb      	ldr	r3, [r7, #28]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3720      	adds	r7, #32
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	20000780 	.word	0x20000780
 8007104:	20000794 	.word	0x20000794

08007108 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800710c:	4b03      	ldr	r3, [pc, #12]	@ (800711c <vTaskMissedYield+0x14>)
 800710e:	2201      	movs	r2, #1
 8007110:	601a      	str	r2, [r3, #0]
}
 8007112:	bf00      	nop
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	20000790 	.word	0x20000790

08007120 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007128:	f000 f852 	bl	80071d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800712c:	4b06      	ldr	r3, [pc, #24]	@ (8007148 <prvIdleTask+0x28>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d9f9      	bls.n	8007128 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007134:	4b05      	ldr	r3, [pc, #20]	@ (800714c <prvIdleTask+0x2c>)
 8007136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007144:	e7f0      	b.n	8007128 <prvIdleTask+0x8>
 8007146:	bf00      	nop
 8007148:	20000680 	.word	0x20000680
 800714c:	e000ed04 	.word	0xe000ed04

08007150 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007156:	2300      	movs	r3, #0
 8007158:	607b      	str	r3, [r7, #4]
 800715a:	e00c      	b.n	8007176 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	4613      	mov	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4413      	add	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4a12      	ldr	r2, [pc, #72]	@ (80071b0 <prvInitialiseTaskLists+0x60>)
 8007168:	4413      	add	r3, r2
 800716a:	4618      	mov	r0, r3
 800716c:	f7fe fd91 	bl	8005c92 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3301      	adds	r3, #1
 8007174:	607b      	str	r3, [r7, #4]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b06      	cmp	r3, #6
 800717a:	d9ef      	bls.n	800715c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800717c:	480d      	ldr	r0, [pc, #52]	@ (80071b4 <prvInitialiseTaskLists+0x64>)
 800717e:	f7fe fd88 	bl	8005c92 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007182:	480d      	ldr	r0, [pc, #52]	@ (80071b8 <prvInitialiseTaskLists+0x68>)
 8007184:	f7fe fd85 	bl	8005c92 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007188:	480c      	ldr	r0, [pc, #48]	@ (80071bc <prvInitialiseTaskLists+0x6c>)
 800718a:	f7fe fd82 	bl	8005c92 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800718e:	480c      	ldr	r0, [pc, #48]	@ (80071c0 <prvInitialiseTaskLists+0x70>)
 8007190:	f7fe fd7f 	bl	8005c92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007194:	480b      	ldr	r0, [pc, #44]	@ (80071c4 <prvInitialiseTaskLists+0x74>)
 8007196:	f7fe fd7c 	bl	8005c92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800719a:	4b0b      	ldr	r3, [pc, #44]	@ (80071c8 <prvInitialiseTaskLists+0x78>)
 800719c:	4a05      	ldr	r2, [pc, #20]	@ (80071b4 <prvInitialiseTaskLists+0x64>)
 800719e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071a0:	4b0a      	ldr	r3, [pc, #40]	@ (80071cc <prvInitialiseTaskLists+0x7c>)
 80071a2:	4a05      	ldr	r2, [pc, #20]	@ (80071b8 <prvInitialiseTaskLists+0x68>)
 80071a4:	601a      	str	r2, [r3, #0]
}
 80071a6:	bf00      	nop
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	20000680 	.word	0x20000680
 80071b4:	2000070c 	.word	0x2000070c
 80071b8:	20000720 	.word	0x20000720
 80071bc:	2000073c 	.word	0x2000073c
 80071c0:	20000750 	.word	0x20000750
 80071c4:	20000768 	.word	0x20000768
 80071c8:	20000734 	.word	0x20000734
 80071cc:	20000738 	.word	0x20000738

080071d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071d6:	e019      	b.n	800720c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071d8:	f000 fcb6 	bl	8007b48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071dc:	4b10      	ldr	r3, [pc, #64]	@ (8007220 <prvCheckTasksWaitingTermination+0x50>)
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3304      	adds	r3, #4
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fe fddc 	bl	8005da6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007224 <prvCheckTasksWaitingTermination+0x54>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	4a0b      	ldr	r2, [pc, #44]	@ (8007224 <prvCheckTasksWaitingTermination+0x54>)
 80071f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007228 <prvCheckTasksWaitingTermination+0x58>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	4a0a      	ldr	r2, [pc, #40]	@ (8007228 <prvCheckTasksWaitingTermination+0x58>)
 8007200:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007202:	f000 fcd3 	bl	8007bac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f810 	bl	800722c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800720c:	4b06      	ldr	r3, [pc, #24]	@ (8007228 <prvCheckTasksWaitingTermination+0x58>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e1      	bne.n	80071d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	20000750 	.word	0x20000750
 8007224:	2000077c 	.word	0x2000077c
 8007228:	20000764 	.word	0x20000764

0800722c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	334c      	adds	r3, #76	@ 0x4c
 8007238:	4618      	mov	r0, r3
 800723a:	f000 ffbf 	bl	80081bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007244:	2b00      	cmp	r3, #0
 8007246:	d108      	bne.n	800725a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800724c:	4618      	mov	r0, r3
 800724e:	f000 fe6b 	bl	8007f28 <vPortFree>
				vPortFree( pxTCB );
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fe68 	bl	8007f28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007258:	e019      	b.n	800728e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007260:	2b01      	cmp	r3, #1
 8007262:	d103      	bne.n	800726c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fe5f 	bl	8007f28 <vPortFree>
	}
 800726a:	e010      	b.n	800728e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007272:	2b02      	cmp	r3, #2
 8007274:	d00b      	beq.n	800728e <prvDeleteTCB+0x62>
	__asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	60fb      	str	r3, [r7, #12]
}
 8007288:	bf00      	nop
 800728a:	bf00      	nop
 800728c:	e7fd      	b.n	800728a <prvDeleteTCB+0x5e>
	}
 800728e:	bf00      	nop
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
	...

08007298 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800729e:	4b0c      	ldr	r3, [pc, #48]	@ (80072d0 <prvResetNextTaskUnblockTime+0x38>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d104      	bne.n	80072b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80072a8:	4b0a      	ldr	r3, [pc, #40]	@ (80072d4 <prvResetNextTaskUnblockTime+0x3c>)
 80072aa:	f04f 32ff 	mov.w	r2, #4294967295
 80072ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80072b0:	e008      	b.n	80072c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b2:	4b07      	ldr	r3, [pc, #28]	@ (80072d0 <prvResetNextTaskUnblockTime+0x38>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	4a04      	ldr	r2, [pc, #16]	@ (80072d4 <prvResetNextTaskUnblockTime+0x3c>)
 80072c2:	6013      	str	r3, [r2, #0]
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	20000734 	.word	0x20000734
 80072d4:	2000079c 	.word	0x2000079c

080072d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072de:	4b0b      	ldr	r3, [pc, #44]	@ (800730c <xTaskGetSchedulerState+0x34>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d102      	bne.n	80072ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072e6:	2301      	movs	r3, #1
 80072e8:	607b      	str	r3, [r7, #4]
 80072ea:	e008      	b.n	80072fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072ec:	4b08      	ldr	r3, [pc, #32]	@ (8007310 <xTaskGetSchedulerState+0x38>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d102      	bne.n	80072fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072f4:	2302      	movs	r3, #2
 80072f6:	607b      	str	r3, [r7, #4]
 80072f8:	e001      	b.n	80072fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072fa:	2300      	movs	r3, #0
 80072fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072fe:	687b      	ldr	r3, [r7, #4]
	}
 8007300:	4618      	mov	r0, r3
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	20000788 	.word	0x20000788
 8007310:	200007a4 	.word	0x200007a4

08007314 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007320:	2300      	movs	r3, #0
 8007322:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d05e      	beq.n	80073e8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800732e:	4b31      	ldr	r3, [pc, #196]	@ (80073f4 <xTaskPriorityInherit+0xe0>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007334:	429a      	cmp	r2, r3
 8007336:	d24e      	bcs.n	80073d6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	2b00      	cmp	r3, #0
 800733e:	db06      	blt.n	800734e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007340:	4b2c      	ldr	r3, [pc, #176]	@ (80073f4 <xTaskPriorityInherit+0xe0>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007346:	f1c3 0207 	rsb	r2, r3, #7
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	6959      	ldr	r1, [r3, #20]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007356:	4613      	mov	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4413      	add	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4a26      	ldr	r2, [pc, #152]	@ (80073f8 <xTaskPriorityInherit+0xe4>)
 8007360:	4413      	add	r3, r2
 8007362:	4299      	cmp	r1, r3
 8007364:	d12f      	bne.n	80073c6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	3304      	adds	r3, #4
 800736a:	4618      	mov	r0, r3
 800736c:	f7fe fd1b 	bl	8005da6 <uxListRemove>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10a      	bne.n	800738c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737a:	2201      	movs	r2, #1
 800737c:	fa02 f303 	lsl.w	r3, r2, r3
 8007380:	43da      	mvns	r2, r3
 8007382:	4b1e      	ldr	r3, [pc, #120]	@ (80073fc <xTaskPriorityInherit+0xe8>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4013      	ands	r3, r2
 8007388:	4a1c      	ldr	r2, [pc, #112]	@ (80073fc <xTaskPriorityInherit+0xe8>)
 800738a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800738c:	4b19      	ldr	r3, [pc, #100]	@ (80073f4 <xTaskPriorityInherit+0xe0>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800739a:	2201      	movs	r2, #1
 800739c:	409a      	lsls	r2, r3
 800739e:	4b17      	ldr	r3, [pc, #92]	@ (80073fc <xTaskPriorityInherit+0xe8>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	4a15      	ldr	r2, [pc, #84]	@ (80073fc <xTaskPriorityInherit+0xe8>)
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ac:	4613      	mov	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4a10      	ldr	r2, [pc, #64]	@ (80073f8 <xTaskPriorityInherit+0xe4>)
 80073b6:	441a      	add	r2, r3
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	3304      	adds	r3, #4
 80073bc:	4619      	mov	r1, r3
 80073be:	4610      	mov	r0, r2
 80073c0:	f7fe fc94 	bl	8005cec <vListInsertEnd>
 80073c4:	e004      	b.n	80073d0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80073c6:	4b0b      	ldr	r3, [pc, #44]	@ (80073f4 <xTaskPriorityInherit+0xe0>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80073d0:	2301      	movs	r3, #1
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	e008      	b.n	80073e8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073da:	4b06      	ldr	r3, [pc, #24]	@ (80073f4 <xTaskPriorityInherit+0xe0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d201      	bcs.n	80073e8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80073e4:	2301      	movs	r3, #1
 80073e6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073e8:	68fb      	ldr	r3, [r7, #12]
	}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	2000067c 	.word	0x2000067c
 80073f8:	20000680 	.word	0x20000680
 80073fc:	20000784 	.word	0x20000784

08007400 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800740c:	2300      	movs	r3, #0
 800740e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d070      	beq.n	80074f8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007416:	4b3b      	ldr	r3, [pc, #236]	@ (8007504 <xTaskPriorityDisinherit+0x104>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	429a      	cmp	r2, r3
 800741e:	d00b      	beq.n	8007438 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	60fb      	str	r3, [r7, #12]
}
 8007432:	bf00      	nop
 8007434:	bf00      	nop
 8007436:	e7fd      	b.n	8007434 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10b      	bne.n	8007458 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	60bb      	str	r3, [r7, #8]
}
 8007452:	bf00      	nop
 8007454:	bf00      	nop
 8007456:	e7fd      	b.n	8007454 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800745c:	1e5a      	subs	r2, r3, #1
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800746a:	429a      	cmp	r2, r3
 800746c:	d044      	beq.n	80074f8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007472:	2b00      	cmp	r3, #0
 8007474:	d140      	bne.n	80074f8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	3304      	adds	r3, #4
 800747a:	4618      	mov	r0, r3
 800747c:	f7fe fc93 	bl	8005da6 <uxListRemove>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d115      	bne.n	80074b2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800748a:	491f      	ldr	r1, [pc, #124]	@ (8007508 <xTaskPriorityDisinherit+0x108>)
 800748c:	4613      	mov	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	440b      	add	r3, r1
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10a      	bne.n	80074b2 <xTaskPriorityDisinherit+0xb2>
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a0:	2201      	movs	r2, #1
 80074a2:	fa02 f303 	lsl.w	r3, r2, r3
 80074a6:	43da      	mvns	r2, r3
 80074a8:	4b18      	ldr	r3, [pc, #96]	@ (800750c <xTaskPriorityDisinherit+0x10c>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4013      	ands	r3, r2
 80074ae:	4a17      	ldr	r2, [pc, #92]	@ (800750c <xTaskPriorityDisinherit+0x10c>)
 80074b0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074be:	f1c3 0207 	rsb	r2, r3, #7
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ca:	2201      	movs	r2, #1
 80074cc:	409a      	lsls	r2, r3
 80074ce:	4b0f      	ldr	r3, [pc, #60]	@ (800750c <xTaskPriorityDisinherit+0x10c>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	4a0d      	ldr	r2, [pc, #52]	@ (800750c <xTaskPriorityDisinherit+0x10c>)
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074dc:	4613      	mov	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4413      	add	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4a08      	ldr	r2, [pc, #32]	@ (8007508 <xTaskPriorityDisinherit+0x108>)
 80074e6:	441a      	add	r2, r3
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	3304      	adds	r3, #4
 80074ec:	4619      	mov	r1, r3
 80074ee:	4610      	mov	r0, r2
 80074f0:	f7fe fbfc 	bl	8005cec <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80074f4:	2301      	movs	r3, #1
 80074f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074f8:	697b      	ldr	r3, [r7, #20]
	}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3718      	adds	r7, #24
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	2000067c 	.word	0x2000067c
 8007508:	20000680 	.word	0x20000680
 800750c:	20000784 	.word	0x20000784

08007510 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800751e:	2301      	movs	r3, #1
 8007520:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d079      	beq.n	800761c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10b      	bne.n	8007548 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	60fb      	str	r3, [r7, #12]
}
 8007542:	bf00      	nop
 8007544:	bf00      	nop
 8007546:	e7fd      	b.n	8007544 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800754c:	683a      	ldr	r2, [r7, #0]
 800754e:	429a      	cmp	r2, r3
 8007550:	d902      	bls.n	8007558 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	61fb      	str	r3, [r7, #28]
 8007556:	e002      	b.n	800755e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800755c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007562:	69fa      	ldr	r2, [r7, #28]
 8007564:	429a      	cmp	r2, r3
 8007566:	d059      	beq.n	800761c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	429a      	cmp	r2, r3
 8007570:	d154      	bne.n	800761c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007572:	4b2c      	ldr	r3, [pc, #176]	@ (8007624 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	429a      	cmp	r2, r3
 800757a:	d10b      	bne.n	8007594 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800757c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007580:	f383 8811 	msr	BASEPRI, r3
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	60bb      	str	r3, [r7, #8]
}
 800758e:	bf00      	nop
 8007590:	bf00      	nop
 8007592:	e7fd      	b.n	8007590 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007598:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	69fa      	ldr	r2, [r7, #28]
 800759e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	db04      	blt.n	80075b2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	f1c3 0207 	rsb	r2, r3, #7
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	6959      	ldr	r1, [r3, #20]
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	4613      	mov	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4413      	add	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4a19      	ldr	r2, [pc, #100]	@ (8007628 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80075c2:	4413      	add	r3, r2
 80075c4:	4299      	cmp	r1, r3
 80075c6:	d129      	bne.n	800761c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	3304      	adds	r3, #4
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fe fbea 	bl	8005da6 <uxListRemove>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10a      	bne.n	80075ee <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075dc:	2201      	movs	r2, #1
 80075de:	fa02 f303 	lsl.w	r3, r2, r3
 80075e2:	43da      	mvns	r2, r3
 80075e4:	4b11      	ldr	r3, [pc, #68]	@ (800762c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4013      	ands	r3, r2
 80075ea:	4a10      	ldr	r2, [pc, #64]	@ (800762c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80075ec:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f2:	2201      	movs	r2, #1
 80075f4:	409a      	lsls	r2, r3
 80075f6:	4b0d      	ldr	r3, [pc, #52]	@ (800762c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	4a0b      	ldr	r2, [pc, #44]	@ (800762c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80075fe:	6013      	str	r3, [r2, #0]
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007604:	4613      	mov	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4413      	add	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4a06      	ldr	r2, [pc, #24]	@ (8007628 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800760e:	441a      	add	r2, r3
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	3304      	adds	r3, #4
 8007614:	4619      	mov	r1, r3
 8007616:	4610      	mov	r0, r2
 8007618:	f7fe fb68 	bl	8005cec <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800761c:	bf00      	nop
 800761e:	3720      	adds	r7, #32
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	2000067c 	.word	0x2000067c
 8007628:	20000680 	.word	0x20000680
 800762c:	20000784 	.word	0x20000784

08007630 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007634:	4b07      	ldr	r3, [pc, #28]	@ (8007654 <pvTaskIncrementMutexHeldCount+0x24>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d004      	beq.n	8007646 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800763c:	4b05      	ldr	r3, [pc, #20]	@ (8007654 <pvTaskIncrementMutexHeldCount+0x24>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007642:	3201      	adds	r2, #1
 8007644:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8007646:	4b03      	ldr	r3, [pc, #12]	@ (8007654 <pvTaskIncrementMutexHeldCount+0x24>)
 8007648:	681b      	ldr	r3, [r3, #0]
	}
 800764a:	4618      	mov	r0, r3
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	2000067c 	.word	0x2000067c

08007658 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007662:	f000 fa71 	bl	8007b48 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007666:	4b20      	ldr	r3, [pc, #128]	@ (80076e8 <ulTaskNotifyTake+0x90>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800766e:	2b00      	cmp	r3, #0
 8007670:	d113      	bne.n	800769a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007672:	4b1d      	ldr	r3, [pc, #116]	@ (80076e8 <ulTaskNotifyTake+0x90>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00b      	beq.n	800769a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007682:	2101      	movs	r1, #1
 8007684:	6838      	ldr	r0, [r7, #0]
 8007686:	f000 f8c9 	bl	800781c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800768a:	4b18      	ldr	r3, [pc, #96]	@ (80076ec <ulTaskNotifyTake+0x94>)
 800768c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800769a:	f000 fa87 	bl	8007bac <vPortExitCritical>

		taskENTER_CRITICAL();
 800769e:	f000 fa53 	bl	8007b48 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80076a2:	4b11      	ldr	r3, [pc, #68]	@ (80076e8 <ulTaskNotifyTake+0x90>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80076aa:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00e      	beq.n	80076d0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d005      	beq.n	80076c4 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80076b8:	4b0b      	ldr	r3, [pc, #44]	@ (80076e8 <ulTaskNotifyTake+0x90>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2200      	movs	r2, #0
 80076be:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80076c2:	e005      	b.n	80076d0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80076c4:	4b08      	ldr	r3, [pc, #32]	@ (80076e8 <ulTaskNotifyTake+0x90>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	3a01      	subs	r2, #1
 80076cc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076d0:	4b05      	ldr	r3, [pc, #20]	@ (80076e8 <ulTaskNotifyTake+0x90>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 80076da:	f000 fa67 	bl	8007bac <vPortExitCritical>

		return ulReturn;
 80076de:	68fb      	ldr	r3, [r7, #12]
	}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	2000067c 	.word	0x2000067c
 80076ec:	e000ed04 	.word	0xe000ed04

080076f0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b08a      	sub	sp, #40	@ 0x28
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10b      	bne.n	8007718 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	61bb      	str	r3, [r7, #24]
}
 8007712:	bf00      	nop
 8007714:	bf00      	nop
 8007716:	e7fd      	b.n	8007714 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007718:	f000 faf6 	bl	8007d08 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8007720:	f3ef 8211 	mrs	r2, BASEPRI
 8007724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	617a      	str	r2, [r7, #20]
 8007736:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007738:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800773a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800773c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773e:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8007742:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007746:	2202      	movs	r2, #2
 8007748:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800774c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007756:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800775a:	7ffb      	ldrb	r3, [r7, #31]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d146      	bne.n	80077ee <vTaskNotifyGiveFromISR+0xfe>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	60fb      	str	r3, [r7, #12]
}
 800777a:	bf00      	nop
 800777c:	bf00      	nop
 800777e:	e7fd      	b.n	800777c <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007780:	4b20      	ldr	r3, [pc, #128]	@ (8007804 <vTaskNotifyGiveFromISR+0x114>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d11c      	bne.n	80077c2 <vTaskNotifyGiveFromISR+0xd2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778a:	3304      	adds	r3, #4
 800778c:	4618      	mov	r0, r3
 800778e:	f7fe fb0a 	bl	8005da6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007796:	2201      	movs	r2, #1
 8007798:	409a      	lsls	r2, r3
 800779a:	4b1b      	ldr	r3, [pc, #108]	@ (8007808 <vTaskNotifyGiveFromISR+0x118>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4313      	orrs	r3, r2
 80077a0:	4a19      	ldr	r2, [pc, #100]	@ (8007808 <vTaskNotifyGiveFromISR+0x118>)
 80077a2:	6013      	str	r3, [r2, #0]
 80077a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077a8:	4613      	mov	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4a16      	ldr	r2, [pc, #88]	@ (800780c <vTaskNotifyGiveFromISR+0x11c>)
 80077b2:	441a      	add	r2, r3
 80077b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b6:	3304      	adds	r3, #4
 80077b8:	4619      	mov	r1, r3
 80077ba:	4610      	mov	r0, r2
 80077bc:	f7fe fa96 	bl	8005cec <vListInsertEnd>
 80077c0:	e005      	b.n	80077ce <vTaskNotifyGiveFromISR+0xde>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80077c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c4:	3318      	adds	r3, #24
 80077c6:	4619      	mov	r1, r3
 80077c8:	4811      	ldr	r0, [pc, #68]	@ (8007810 <vTaskNotifyGiveFromISR+0x120>)
 80077ca:	f7fe fa8f 	bl	8005cec <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80077ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077d2:	4b10      	ldr	r3, [pc, #64]	@ (8007814 <vTaskNotifyGiveFromISR+0x124>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d8:	429a      	cmp	r2, r3
 80077da:	d908      	bls.n	80077ee <vTaskNotifyGiveFromISR+0xfe>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d002      	beq.n	80077e8 <vTaskNotifyGiveFromISR+0xf8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2201      	movs	r2, #1
 80077e6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80077e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007818 <vTaskNotifyGiveFromISR+0x128>)
 80077ea:	2201      	movs	r2, #1
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	f383 8811 	msr	BASEPRI, r3
}
 80077f8:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80077fa:	bf00      	nop
 80077fc:	3728      	adds	r7, #40	@ 0x28
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	200007a4 	.word	0x200007a4
 8007808:	20000784 	.word	0x20000784
 800780c:	20000680 	.word	0x20000680
 8007810:	2000073c 	.word	0x2000073c
 8007814:	2000067c 	.word	0x2000067c
 8007818:	20000790 	.word	0x20000790

0800781c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007826:	4b29      	ldr	r3, [pc, #164]	@ (80078cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800782c:	4b28      	ldr	r3, [pc, #160]	@ (80078d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3304      	adds	r3, #4
 8007832:	4618      	mov	r0, r3
 8007834:	f7fe fab7 	bl	8005da6 <uxListRemove>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10b      	bne.n	8007856 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800783e:	4b24      	ldr	r3, [pc, #144]	@ (80078d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007844:	2201      	movs	r2, #1
 8007846:	fa02 f303 	lsl.w	r3, r2, r3
 800784a:	43da      	mvns	r2, r3
 800784c:	4b21      	ldr	r3, [pc, #132]	@ (80078d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4013      	ands	r3, r2
 8007852:	4a20      	ldr	r2, [pc, #128]	@ (80078d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007854:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785c:	d10a      	bne.n	8007874 <prvAddCurrentTaskToDelayedList+0x58>
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d007      	beq.n	8007874 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007864:	4b1a      	ldr	r3, [pc, #104]	@ (80078d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	3304      	adds	r3, #4
 800786a:	4619      	mov	r1, r3
 800786c:	481a      	ldr	r0, [pc, #104]	@ (80078d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800786e:	f7fe fa3d 	bl	8005cec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007872:	e026      	b.n	80078c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4413      	add	r3, r2
 800787a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800787c:	4b14      	ldr	r3, [pc, #80]	@ (80078d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	429a      	cmp	r2, r3
 800788a:	d209      	bcs.n	80078a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800788c:	4b13      	ldr	r3, [pc, #76]	@ (80078dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	4b0f      	ldr	r3, [pc, #60]	@ (80078d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3304      	adds	r3, #4
 8007896:	4619      	mov	r1, r3
 8007898:	4610      	mov	r0, r2
 800789a:	f7fe fa4b 	bl	8005d34 <vListInsert>
}
 800789e:	e010      	b.n	80078c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078a0:	4b0f      	ldr	r3, [pc, #60]	@ (80078e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	4b0a      	ldr	r3, [pc, #40]	@ (80078d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3304      	adds	r3, #4
 80078aa:	4619      	mov	r1, r3
 80078ac:	4610      	mov	r0, r2
 80078ae:	f7fe fa41 	bl	8005d34 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078b2:	4b0c      	ldr	r3, [pc, #48]	@ (80078e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d202      	bcs.n	80078c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80078bc:	4a09      	ldr	r2, [pc, #36]	@ (80078e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	6013      	str	r3, [r2, #0]
}
 80078c2:	bf00      	nop
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20000780 	.word	0x20000780
 80078d0:	2000067c 	.word	0x2000067c
 80078d4:	20000784 	.word	0x20000784
 80078d8:	20000768 	.word	0x20000768
 80078dc:	20000738 	.word	0x20000738
 80078e0:	20000734 	.word	0x20000734
 80078e4:	2000079c 	.word	0x2000079c

080078e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	3b04      	subs	r3, #4
 80078f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007900:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3b04      	subs	r3, #4
 8007906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f023 0201 	bic.w	r2, r3, #1
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	3b04      	subs	r3, #4
 8007916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007918:	4a0c      	ldr	r2, [pc, #48]	@ (800794c <pxPortInitialiseStack+0x64>)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3b14      	subs	r3, #20
 8007922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	3b04      	subs	r3, #4
 800792e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f06f 0202 	mvn.w	r2, #2
 8007936:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	3b20      	subs	r3, #32
 800793c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800793e:	68fb      	ldr	r3, [r7, #12]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	08007951 	.word	0x08007951

08007950 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007956:	2300      	movs	r3, #0
 8007958:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800795a:	4b13      	ldr	r3, [pc, #76]	@ (80079a8 <prvTaskExitError+0x58>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007962:	d00b      	beq.n	800797c <prvTaskExitError+0x2c>
	__asm volatile
 8007964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	60fb      	str	r3, [r7, #12]
}
 8007976:	bf00      	nop
 8007978:	bf00      	nop
 800797a:	e7fd      	b.n	8007978 <prvTaskExitError+0x28>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	60bb      	str	r3, [r7, #8]
}
 800798e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007990:	bf00      	nop
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d0fc      	beq.n	8007992 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007998:	bf00      	nop
 800799a:	bf00      	nop
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	200000d8 	.word	0x200000d8
 80079ac:	00000000 	.word	0x00000000

080079b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079b0:	4b07      	ldr	r3, [pc, #28]	@ (80079d0 <pxCurrentTCBConst2>)
 80079b2:	6819      	ldr	r1, [r3, #0]
 80079b4:	6808      	ldr	r0, [r1, #0]
 80079b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ba:	f380 8809 	msr	PSP, r0
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f04f 0000 	mov.w	r0, #0
 80079c6:	f380 8811 	msr	BASEPRI, r0
 80079ca:	4770      	bx	lr
 80079cc:	f3af 8000 	nop.w

080079d0 <pxCurrentTCBConst2>:
 80079d0:	2000067c 	.word	0x2000067c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop

080079d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079d8:	4808      	ldr	r0, [pc, #32]	@ (80079fc <prvPortStartFirstTask+0x24>)
 80079da:	6800      	ldr	r0, [r0, #0]
 80079dc:	6800      	ldr	r0, [r0, #0]
 80079de:	f380 8808 	msr	MSP, r0
 80079e2:	f04f 0000 	mov.w	r0, #0
 80079e6:	f380 8814 	msr	CONTROL, r0
 80079ea:	b662      	cpsie	i
 80079ec:	b661      	cpsie	f
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	df00      	svc	0
 80079f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079fa:	bf00      	nop
 80079fc:	e000ed08 	.word	0xe000ed08

08007a00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a06:	4b47      	ldr	r3, [pc, #284]	@ (8007b24 <xPortStartScheduler+0x124>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a47      	ldr	r2, [pc, #284]	@ (8007b28 <xPortStartScheduler+0x128>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d10b      	bne.n	8007a28 <xPortStartScheduler+0x28>
	__asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	60fb      	str	r3, [r7, #12]
}
 8007a22:	bf00      	nop
 8007a24:	bf00      	nop
 8007a26:	e7fd      	b.n	8007a24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a28:	4b3e      	ldr	r3, [pc, #248]	@ (8007b24 <xPortStartScheduler+0x124>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a3f      	ldr	r2, [pc, #252]	@ (8007b2c <xPortStartScheduler+0x12c>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d10b      	bne.n	8007a4a <xPortStartScheduler+0x4a>
	__asm volatile
 8007a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	613b      	str	r3, [r7, #16]
}
 8007a44:	bf00      	nop
 8007a46:	bf00      	nop
 8007a48:	e7fd      	b.n	8007a46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a4a:	4b39      	ldr	r3, [pc, #228]	@ (8007b30 <xPortStartScheduler+0x130>)
 8007a4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	22ff      	movs	r2, #255	@ 0xff
 8007a5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a64:	78fb      	ldrb	r3, [r7, #3]
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	4b31      	ldr	r3, [pc, #196]	@ (8007b34 <xPortStartScheduler+0x134>)
 8007a70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a72:	4b31      	ldr	r3, [pc, #196]	@ (8007b38 <xPortStartScheduler+0x138>)
 8007a74:	2207      	movs	r2, #7
 8007a76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a78:	e009      	b.n	8007a8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8007b38 <xPortStartScheduler+0x138>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	4a2d      	ldr	r2, [pc, #180]	@ (8007b38 <xPortStartScheduler+0x138>)
 8007a82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a84:	78fb      	ldrb	r3, [r7, #3]
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a8e:	78fb      	ldrb	r3, [r7, #3]
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a96:	2b80      	cmp	r3, #128	@ 0x80
 8007a98:	d0ef      	beq.n	8007a7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a9a:	4b27      	ldr	r3, [pc, #156]	@ (8007b38 <xPortStartScheduler+0x138>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f1c3 0307 	rsb	r3, r3, #7
 8007aa2:	2b04      	cmp	r3, #4
 8007aa4:	d00b      	beq.n	8007abe <xPortStartScheduler+0xbe>
	__asm volatile
 8007aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	60bb      	str	r3, [r7, #8]
}
 8007ab8:	bf00      	nop
 8007aba:	bf00      	nop
 8007abc:	e7fd      	b.n	8007aba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007abe:	4b1e      	ldr	r3, [pc, #120]	@ (8007b38 <xPortStartScheduler+0x138>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	021b      	lsls	r3, r3, #8
 8007ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8007b38 <xPortStartScheduler+0x138>)
 8007ac6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8007b38 <xPortStartScheduler+0x138>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ad0:	4a19      	ldr	r2, [pc, #100]	@ (8007b38 <xPortStartScheduler+0x138>)
 8007ad2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007adc:	4b17      	ldr	r3, [pc, #92]	@ (8007b3c <xPortStartScheduler+0x13c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a16      	ldr	r2, [pc, #88]	@ (8007b3c <xPortStartScheduler+0x13c>)
 8007ae2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007ae6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ae8:	4b14      	ldr	r3, [pc, #80]	@ (8007b3c <xPortStartScheduler+0x13c>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a13      	ldr	r2, [pc, #76]	@ (8007b3c <xPortStartScheduler+0x13c>)
 8007aee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007af2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007af4:	f000 f8da 	bl	8007cac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007af8:	4b11      	ldr	r3, [pc, #68]	@ (8007b40 <xPortStartScheduler+0x140>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007afe:	f000 f8f9 	bl	8007cf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b02:	4b10      	ldr	r3, [pc, #64]	@ (8007b44 <xPortStartScheduler+0x144>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a0f      	ldr	r2, [pc, #60]	@ (8007b44 <xPortStartScheduler+0x144>)
 8007b08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007b0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b0e:	f7ff ff63 	bl	80079d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b12:	f7ff f991 	bl	8006e38 <vTaskSwitchContext>
	prvTaskExitError();
 8007b16:	f7ff ff1b 	bl	8007950 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3718      	adds	r7, #24
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	e000ed00 	.word	0xe000ed00
 8007b28:	410fc271 	.word	0x410fc271
 8007b2c:	410fc270 	.word	0x410fc270
 8007b30:	e000e400 	.word	0xe000e400
 8007b34:	200007a8 	.word	0x200007a8
 8007b38:	200007ac 	.word	0x200007ac
 8007b3c:	e000ed20 	.word	0xe000ed20
 8007b40:	200000d8 	.word	0x200000d8
 8007b44:	e000ef34 	.word	0xe000ef34

08007b48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	607b      	str	r3, [r7, #4]
}
 8007b60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b62:	4b10      	ldr	r3, [pc, #64]	@ (8007ba4 <vPortEnterCritical+0x5c>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	3301      	adds	r3, #1
 8007b68:	4a0e      	ldr	r2, [pc, #56]	@ (8007ba4 <vPortEnterCritical+0x5c>)
 8007b6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8007ba4 <vPortEnterCritical+0x5c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d110      	bne.n	8007b96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b74:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba8 <vPortEnterCritical+0x60>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00b      	beq.n	8007b96 <vPortEnterCritical+0x4e>
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	603b      	str	r3, [r7, #0]
}
 8007b90:	bf00      	nop
 8007b92:	bf00      	nop
 8007b94:	e7fd      	b.n	8007b92 <vPortEnterCritical+0x4a>
	}
}
 8007b96:	bf00      	nop
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	200000d8 	.word	0x200000d8
 8007ba8:	e000ed04 	.word	0xe000ed04

08007bac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007bb2:	4b12      	ldr	r3, [pc, #72]	@ (8007bfc <vPortExitCritical+0x50>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10b      	bne.n	8007bd2 <vPortExitCritical+0x26>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	607b      	str	r3, [r7, #4]
}
 8007bcc:	bf00      	nop
 8007bce:	bf00      	nop
 8007bd0:	e7fd      	b.n	8007bce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8007bfc <vPortExitCritical+0x50>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	4a08      	ldr	r2, [pc, #32]	@ (8007bfc <vPortExitCritical+0x50>)
 8007bda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007bdc:	4b07      	ldr	r3, [pc, #28]	@ (8007bfc <vPortExitCritical+0x50>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d105      	bne.n	8007bf0 <vPortExitCritical+0x44>
 8007be4:	2300      	movs	r3, #0
 8007be6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	f383 8811 	msr	BASEPRI, r3
}
 8007bee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	200000d8 	.word	0x200000d8

08007c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c00:	f3ef 8009 	mrs	r0, PSP
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	4b15      	ldr	r3, [pc, #84]	@ (8007c60 <pxCurrentTCBConst>)
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	f01e 0f10 	tst.w	lr, #16
 8007c10:	bf08      	it	eq
 8007c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1a:	6010      	str	r0, [r2, #0]
 8007c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007c24:	f380 8811 	msr	BASEPRI, r0
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f7ff f902 	bl	8006e38 <vTaskSwitchContext>
 8007c34:	f04f 0000 	mov.w	r0, #0
 8007c38:	f380 8811 	msr	BASEPRI, r0
 8007c3c:	bc09      	pop	{r0, r3}
 8007c3e:	6819      	ldr	r1, [r3, #0]
 8007c40:	6808      	ldr	r0, [r1, #0]
 8007c42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c46:	f01e 0f10 	tst.w	lr, #16
 8007c4a:	bf08      	it	eq
 8007c4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c50:	f380 8809 	msr	PSP, r0
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	f3af 8000 	nop.w

08007c60 <pxCurrentTCBConst>:
 8007c60:	2000067c 	.word	0x2000067c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop

08007c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	607b      	str	r3, [r7, #4]
}
 8007c80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c82:	f7ff f81f 	bl	8006cc4 <xTaskIncrementTick>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d003      	beq.n	8007c94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c8c:	4b06      	ldr	r3, [pc, #24]	@ (8007ca8 <SysTick_Handler+0x40>)
 8007c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	2300      	movs	r3, #0
 8007c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	f383 8811 	msr	BASEPRI, r3
}
 8007c9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	e000ed04 	.word	0xe000ed04

08007cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007cac:	b480      	push	{r7}
 8007cae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ce0 <vPortSetupTimerInterrupt+0x34>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ce4 <vPortSetupTimerInterrupt+0x38>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ce8 <vPortSetupTimerInterrupt+0x3c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8007cec <vPortSetupTimerInterrupt+0x40>)
 8007cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc6:	099b      	lsrs	r3, r3, #6
 8007cc8:	4a09      	ldr	r2, [pc, #36]	@ (8007cf0 <vPortSetupTimerInterrupt+0x44>)
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cce:	4b04      	ldr	r3, [pc, #16]	@ (8007ce0 <vPortSetupTimerInterrupt+0x34>)
 8007cd0:	2207      	movs	r2, #7
 8007cd2:	601a      	str	r2, [r3, #0]
}
 8007cd4:	bf00      	nop
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	e000e010 	.word	0xe000e010
 8007ce4:	e000e018 	.word	0xe000e018
 8007ce8:	200000cc 	.word	0x200000cc
 8007cec:	10624dd3 	.word	0x10624dd3
 8007cf0:	e000e014 	.word	0xe000e014

08007cf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007d04 <vPortEnableVFP+0x10>
 8007cf8:	6801      	ldr	r1, [r0, #0]
 8007cfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007cfe:	6001      	str	r1, [r0, #0]
 8007d00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d02:	bf00      	nop
 8007d04:	e000ed88 	.word	0xe000ed88

08007d08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d0e:	f3ef 8305 	mrs	r3, IPSR
 8007d12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2b0f      	cmp	r3, #15
 8007d18:	d915      	bls.n	8007d46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d1a:	4a18      	ldr	r2, [pc, #96]	@ (8007d7c <vPortValidateInterruptPriority+0x74>)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4413      	add	r3, r2
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d24:	4b16      	ldr	r3, [pc, #88]	@ (8007d80 <vPortValidateInterruptPriority+0x78>)
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	7afa      	ldrb	r2, [r7, #11]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d20b      	bcs.n	8007d46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	607b      	str	r3, [r7, #4]
}
 8007d40:	bf00      	nop
 8007d42:	bf00      	nop
 8007d44:	e7fd      	b.n	8007d42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d46:	4b0f      	ldr	r3, [pc, #60]	@ (8007d84 <vPortValidateInterruptPriority+0x7c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8007d88 <vPortValidateInterruptPriority+0x80>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d90b      	bls.n	8007d6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	603b      	str	r3, [r7, #0]
}
 8007d68:	bf00      	nop
 8007d6a:	bf00      	nop
 8007d6c:	e7fd      	b.n	8007d6a <vPortValidateInterruptPriority+0x62>
	}
 8007d6e:	bf00      	nop
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	e000e3f0 	.word	0xe000e3f0
 8007d80:	200007a8 	.word	0x200007a8
 8007d84:	e000ed0c 	.word	0xe000ed0c
 8007d88:	200007ac 	.word	0x200007ac

08007d8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b08a      	sub	sp, #40	@ 0x28
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d94:	2300      	movs	r3, #0
 8007d96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d98:	f7fe fee8 	bl	8006b6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d9c:	4b5c      	ldr	r3, [pc, #368]	@ (8007f10 <pvPortMalloc+0x184>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007da4:	f000 f924 	bl	8007ff0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007da8:	4b5a      	ldr	r3, [pc, #360]	@ (8007f14 <pvPortMalloc+0x188>)
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4013      	ands	r3, r2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f040 8095 	bne.w	8007ee0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d01e      	beq.n	8007dfa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007dbc:	2208      	movs	r2, #8
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f003 0307 	and.w	r3, r3, #7
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d015      	beq.n	8007dfa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f023 0307 	bic.w	r3, r3, #7
 8007dd4:	3308      	adds	r3, #8
 8007dd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f003 0307 	and.w	r3, r3, #7
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00b      	beq.n	8007dfa <pvPortMalloc+0x6e>
	__asm volatile
 8007de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de6:	f383 8811 	msr	BASEPRI, r3
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	f3bf 8f4f 	dsb	sy
 8007df2:	617b      	str	r3, [r7, #20]
}
 8007df4:	bf00      	nop
 8007df6:	bf00      	nop
 8007df8:	e7fd      	b.n	8007df6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d06f      	beq.n	8007ee0 <pvPortMalloc+0x154>
 8007e00:	4b45      	ldr	r3, [pc, #276]	@ (8007f18 <pvPortMalloc+0x18c>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d86a      	bhi.n	8007ee0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e0a:	4b44      	ldr	r3, [pc, #272]	@ (8007f1c <pvPortMalloc+0x190>)
 8007e0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e0e:	4b43      	ldr	r3, [pc, #268]	@ (8007f1c <pvPortMalloc+0x190>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e14:	e004      	b.n	8007e20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d903      	bls.n	8007e32 <pvPortMalloc+0xa6>
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1f1      	bne.n	8007e16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e32:	4b37      	ldr	r3, [pc, #220]	@ (8007f10 <pvPortMalloc+0x184>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d051      	beq.n	8007ee0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2208      	movs	r2, #8
 8007e42:	4413      	add	r3, r2
 8007e44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e50:	685a      	ldr	r2, [r3, #4]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	1ad2      	subs	r2, r2, r3
 8007e56:	2308      	movs	r3, #8
 8007e58:	005b      	lsls	r3, r3, #1
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d920      	bls.n	8007ea0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4413      	add	r3, r2
 8007e64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	f003 0307 	and.w	r3, r3, #7
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00b      	beq.n	8007e88 <pvPortMalloc+0xfc>
	__asm volatile
 8007e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	613b      	str	r3, [r7, #16]
}
 8007e82:	bf00      	nop
 8007e84:	bf00      	nop
 8007e86:	e7fd      	b.n	8007e84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	1ad2      	subs	r2, r2, r3
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e9a:	69b8      	ldr	r0, [r7, #24]
 8007e9c:	f000 f90a 	bl	80080b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8007f18 <pvPortMalloc+0x18c>)
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8007f18 <pvPortMalloc+0x18c>)
 8007eac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007eae:	4b1a      	ldr	r3, [pc, #104]	@ (8007f18 <pvPortMalloc+0x18c>)
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8007f20 <pvPortMalloc+0x194>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d203      	bcs.n	8007ec2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007eba:	4b17      	ldr	r3, [pc, #92]	@ (8007f18 <pvPortMalloc+0x18c>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a18      	ldr	r2, [pc, #96]	@ (8007f20 <pvPortMalloc+0x194>)
 8007ec0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec4:	685a      	ldr	r2, [r3, #4]
 8007ec6:	4b13      	ldr	r3, [pc, #76]	@ (8007f14 <pvPortMalloc+0x188>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ece:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007ed6:	4b13      	ldr	r3, [pc, #76]	@ (8007f24 <pvPortMalloc+0x198>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3301      	adds	r3, #1
 8007edc:	4a11      	ldr	r2, [pc, #68]	@ (8007f24 <pvPortMalloc+0x198>)
 8007ede:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ee0:	f7fe fe52 	bl	8006b88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	f003 0307 	and.w	r3, r3, #7
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00b      	beq.n	8007f06 <pvPortMalloc+0x17a>
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	60fb      	str	r3, [r7, #12]
}
 8007f00:	bf00      	nop
 8007f02:	bf00      	nop
 8007f04:	e7fd      	b.n	8007f02 <pvPortMalloc+0x176>
	return pvReturn;
 8007f06:	69fb      	ldr	r3, [r7, #28]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3728      	adds	r7, #40	@ 0x28
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	200043b8 	.word	0x200043b8
 8007f14:	200043cc 	.word	0x200043cc
 8007f18:	200043bc 	.word	0x200043bc
 8007f1c:	200043b0 	.word	0x200043b0
 8007f20:	200043c0 	.word	0x200043c0
 8007f24:	200043c4 	.word	0x200043c4

08007f28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d04f      	beq.n	8007fda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f3a:	2308      	movs	r3, #8
 8007f3c:	425b      	negs	r3, r3
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	4413      	add	r3, r2
 8007f42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	4b25      	ldr	r3, [pc, #148]	@ (8007fe4 <vPortFree+0xbc>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4013      	ands	r3, r2
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10b      	bne.n	8007f6e <vPortFree+0x46>
	__asm volatile
 8007f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f5a:	f383 8811 	msr	BASEPRI, r3
 8007f5e:	f3bf 8f6f 	isb	sy
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	60fb      	str	r3, [r7, #12]
}
 8007f68:	bf00      	nop
 8007f6a:	bf00      	nop
 8007f6c:	e7fd      	b.n	8007f6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00b      	beq.n	8007f8e <vPortFree+0x66>
	__asm volatile
 8007f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f7a:	f383 8811 	msr	BASEPRI, r3
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	60bb      	str	r3, [r7, #8]
}
 8007f88:	bf00      	nop
 8007f8a:	bf00      	nop
 8007f8c:	e7fd      	b.n	8007f8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	4b14      	ldr	r3, [pc, #80]	@ (8007fe4 <vPortFree+0xbc>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4013      	ands	r3, r2
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d01e      	beq.n	8007fda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d11a      	bne.n	8007fda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8007fe4 <vPortFree+0xbc>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	43db      	mvns	r3, r3
 8007fae:	401a      	ands	r2, r3
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007fb4:	f7fe fdda 	bl	8006b6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8007fe8 <vPortFree+0xc0>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	4a09      	ldr	r2, [pc, #36]	@ (8007fe8 <vPortFree+0xc0>)
 8007fc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007fc6:	6938      	ldr	r0, [r7, #16]
 8007fc8:	f000 f874 	bl	80080b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007fcc:	4b07      	ldr	r3, [pc, #28]	@ (8007fec <vPortFree+0xc4>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	4a06      	ldr	r2, [pc, #24]	@ (8007fec <vPortFree+0xc4>)
 8007fd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007fd6:	f7fe fdd7 	bl	8006b88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007fda:	bf00      	nop
 8007fdc:	3718      	adds	r7, #24
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	200043cc 	.word	0x200043cc
 8007fe8:	200043bc 	.word	0x200043bc
 8007fec:	200043c8 	.word	0x200043c8

08007ff0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ff6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007ffa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ffc:	4b27      	ldr	r3, [pc, #156]	@ (800809c <prvHeapInit+0xac>)
 8007ffe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f003 0307 	and.w	r3, r3, #7
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00c      	beq.n	8008024 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3307      	adds	r3, #7
 800800e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f023 0307 	bic.w	r3, r3, #7
 8008016:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	4a1f      	ldr	r2, [pc, #124]	@ (800809c <prvHeapInit+0xac>)
 8008020:	4413      	add	r3, r2
 8008022:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008028:	4a1d      	ldr	r2, [pc, #116]	@ (80080a0 <prvHeapInit+0xb0>)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800802e:	4b1c      	ldr	r3, [pc, #112]	@ (80080a0 <prvHeapInit+0xb0>)
 8008030:	2200      	movs	r2, #0
 8008032:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	4413      	add	r3, r2
 800803a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800803c:	2208      	movs	r2, #8
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	1a9b      	subs	r3, r3, r2
 8008042:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f023 0307 	bic.w	r3, r3, #7
 800804a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4a15      	ldr	r2, [pc, #84]	@ (80080a4 <prvHeapInit+0xb4>)
 8008050:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008052:	4b14      	ldr	r3, [pc, #80]	@ (80080a4 <prvHeapInit+0xb4>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2200      	movs	r2, #0
 8008058:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800805a:	4b12      	ldr	r3, [pc, #72]	@ (80080a4 <prvHeapInit+0xb4>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2200      	movs	r2, #0
 8008060:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	1ad2      	subs	r2, r2, r3
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008070:	4b0c      	ldr	r3, [pc, #48]	@ (80080a4 <prvHeapInit+0xb4>)
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	4a0a      	ldr	r2, [pc, #40]	@ (80080a8 <prvHeapInit+0xb8>)
 800807e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	4a09      	ldr	r2, [pc, #36]	@ (80080ac <prvHeapInit+0xbc>)
 8008086:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008088:	4b09      	ldr	r3, [pc, #36]	@ (80080b0 <prvHeapInit+0xc0>)
 800808a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800808e:	601a      	str	r2, [r3, #0]
}
 8008090:	bf00      	nop
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	200007b0 	.word	0x200007b0
 80080a0:	200043b0 	.word	0x200043b0
 80080a4:	200043b8 	.word	0x200043b8
 80080a8:	200043c0 	.word	0x200043c0
 80080ac:	200043bc 	.word	0x200043bc
 80080b0:	200043cc 	.word	0x200043cc

080080b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080bc:	4b28      	ldr	r3, [pc, #160]	@ (8008160 <prvInsertBlockIntoFreeList+0xac>)
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	e002      	b.n	80080c8 <prvInsertBlockIntoFreeList+0x14>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60fb      	str	r3, [r7, #12]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d8f7      	bhi.n	80080c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	4413      	add	r3, r2
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d108      	bne.n	80080f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	685a      	ldr	r2, [r3, #4]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	441a      	add	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	441a      	add	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	429a      	cmp	r2, r3
 8008108:	d118      	bne.n	800813c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	4b15      	ldr	r3, [pc, #84]	@ (8008164 <prvInsertBlockIntoFreeList+0xb0>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	429a      	cmp	r2, r3
 8008114:	d00d      	beq.n	8008132 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	441a      	add	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	601a      	str	r2, [r3, #0]
 8008130:	e008      	b.n	8008144 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008132:	4b0c      	ldr	r3, [pc, #48]	@ (8008164 <prvInsertBlockIntoFreeList+0xb0>)
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	e003      	b.n	8008144 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	429a      	cmp	r2, r3
 800814a:	d002      	beq.n	8008152 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008152:	bf00      	nop
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	200043b0 	.word	0x200043b0
 8008164:	200043b8 	.word	0x200043b8

08008168 <siprintf>:
 8008168:	b40e      	push	{r1, r2, r3}
 800816a:	b510      	push	{r4, lr}
 800816c:	b09d      	sub	sp, #116	@ 0x74
 800816e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008170:	9002      	str	r0, [sp, #8]
 8008172:	9006      	str	r0, [sp, #24]
 8008174:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008178:	480a      	ldr	r0, [pc, #40]	@ (80081a4 <siprintf+0x3c>)
 800817a:	9107      	str	r1, [sp, #28]
 800817c:	9104      	str	r1, [sp, #16]
 800817e:	490a      	ldr	r1, [pc, #40]	@ (80081a8 <siprintf+0x40>)
 8008180:	f853 2b04 	ldr.w	r2, [r3], #4
 8008184:	9105      	str	r1, [sp, #20]
 8008186:	2400      	movs	r4, #0
 8008188:	a902      	add	r1, sp, #8
 800818a:	6800      	ldr	r0, [r0, #0]
 800818c:	9301      	str	r3, [sp, #4]
 800818e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008190:	f000 fa00 	bl	8008594 <_svfiprintf_r>
 8008194:	9b02      	ldr	r3, [sp, #8]
 8008196:	701c      	strb	r4, [r3, #0]
 8008198:	b01d      	add	sp, #116	@ 0x74
 800819a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800819e:	b003      	add	sp, #12
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	200000dc 	.word	0x200000dc
 80081a8:	ffff0208 	.word	0xffff0208

080081ac <memset>:
 80081ac:	4402      	add	r2, r0
 80081ae:	4603      	mov	r3, r0
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d100      	bne.n	80081b6 <memset+0xa>
 80081b4:	4770      	bx	lr
 80081b6:	f803 1b01 	strb.w	r1, [r3], #1
 80081ba:	e7f9      	b.n	80081b0 <memset+0x4>

080081bc <_reclaim_reent>:
 80081bc:	4b2d      	ldr	r3, [pc, #180]	@ (8008274 <_reclaim_reent+0xb8>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4283      	cmp	r3, r0
 80081c2:	b570      	push	{r4, r5, r6, lr}
 80081c4:	4604      	mov	r4, r0
 80081c6:	d053      	beq.n	8008270 <_reclaim_reent+0xb4>
 80081c8:	69c3      	ldr	r3, [r0, #28]
 80081ca:	b31b      	cbz	r3, 8008214 <_reclaim_reent+0x58>
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	b163      	cbz	r3, 80081ea <_reclaim_reent+0x2e>
 80081d0:	2500      	movs	r5, #0
 80081d2:	69e3      	ldr	r3, [r4, #28]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	5959      	ldr	r1, [r3, r5]
 80081d8:	b9b1      	cbnz	r1, 8008208 <_reclaim_reent+0x4c>
 80081da:	3504      	adds	r5, #4
 80081dc:	2d80      	cmp	r5, #128	@ 0x80
 80081de:	d1f8      	bne.n	80081d2 <_reclaim_reent+0x16>
 80081e0:	69e3      	ldr	r3, [r4, #28]
 80081e2:	4620      	mov	r0, r4
 80081e4:	68d9      	ldr	r1, [r3, #12]
 80081e6:	f000 f881 	bl	80082ec <_free_r>
 80081ea:	69e3      	ldr	r3, [r4, #28]
 80081ec:	6819      	ldr	r1, [r3, #0]
 80081ee:	b111      	cbz	r1, 80081f6 <_reclaim_reent+0x3a>
 80081f0:	4620      	mov	r0, r4
 80081f2:	f000 f87b 	bl	80082ec <_free_r>
 80081f6:	69e3      	ldr	r3, [r4, #28]
 80081f8:	689d      	ldr	r5, [r3, #8]
 80081fa:	b15d      	cbz	r5, 8008214 <_reclaim_reent+0x58>
 80081fc:	4629      	mov	r1, r5
 80081fe:	4620      	mov	r0, r4
 8008200:	682d      	ldr	r5, [r5, #0]
 8008202:	f000 f873 	bl	80082ec <_free_r>
 8008206:	e7f8      	b.n	80081fa <_reclaim_reent+0x3e>
 8008208:	680e      	ldr	r6, [r1, #0]
 800820a:	4620      	mov	r0, r4
 800820c:	f000 f86e 	bl	80082ec <_free_r>
 8008210:	4631      	mov	r1, r6
 8008212:	e7e1      	b.n	80081d8 <_reclaim_reent+0x1c>
 8008214:	6961      	ldr	r1, [r4, #20]
 8008216:	b111      	cbz	r1, 800821e <_reclaim_reent+0x62>
 8008218:	4620      	mov	r0, r4
 800821a:	f000 f867 	bl	80082ec <_free_r>
 800821e:	69e1      	ldr	r1, [r4, #28]
 8008220:	b111      	cbz	r1, 8008228 <_reclaim_reent+0x6c>
 8008222:	4620      	mov	r0, r4
 8008224:	f000 f862 	bl	80082ec <_free_r>
 8008228:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800822a:	b111      	cbz	r1, 8008232 <_reclaim_reent+0x76>
 800822c:	4620      	mov	r0, r4
 800822e:	f000 f85d 	bl	80082ec <_free_r>
 8008232:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008234:	b111      	cbz	r1, 800823c <_reclaim_reent+0x80>
 8008236:	4620      	mov	r0, r4
 8008238:	f000 f858 	bl	80082ec <_free_r>
 800823c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800823e:	b111      	cbz	r1, 8008246 <_reclaim_reent+0x8a>
 8008240:	4620      	mov	r0, r4
 8008242:	f000 f853 	bl	80082ec <_free_r>
 8008246:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008248:	b111      	cbz	r1, 8008250 <_reclaim_reent+0x94>
 800824a:	4620      	mov	r0, r4
 800824c:	f000 f84e 	bl	80082ec <_free_r>
 8008250:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008252:	b111      	cbz	r1, 800825a <_reclaim_reent+0x9e>
 8008254:	4620      	mov	r0, r4
 8008256:	f000 f849 	bl	80082ec <_free_r>
 800825a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800825c:	b111      	cbz	r1, 8008264 <_reclaim_reent+0xa8>
 800825e:	4620      	mov	r0, r4
 8008260:	f000 f844 	bl	80082ec <_free_r>
 8008264:	6a23      	ldr	r3, [r4, #32]
 8008266:	b11b      	cbz	r3, 8008270 <_reclaim_reent+0xb4>
 8008268:	4620      	mov	r0, r4
 800826a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800826e:	4718      	bx	r3
 8008270:	bd70      	pop	{r4, r5, r6, pc}
 8008272:	bf00      	nop
 8008274:	200000dc 	.word	0x200000dc

08008278 <__errno>:
 8008278:	4b01      	ldr	r3, [pc, #4]	@ (8008280 <__errno+0x8>)
 800827a:	6818      	ldr	r0, [r3, #0]
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	200000dc 	.word	0x200000dc

08008284 <__libc_init_array>:
 8008284:	b570      	push	{r4, r5, r6, lr}
 8008286:	4d0d      	ldr	r5, [pc, #52]	@ (80082bc <__libc_init_array+0x38>)
 8008288:	4c0d      	ldr	r4, [pc, #52]	@ (80082c0 <__libc_init_array+0x3c>)
 800828a:	1b64      	subs	r4, r4, r5
 800828c:	10a4      	asrs	r4, r4, #2
 800828e:	2600      	movs	r6, #0
 8008290:	42a6      	cmp	r6, r4
 8008292:	d109      	bne.n	80082a8 <__libc_init_array+0x24>
 8008294:	4d0b      	ldr	r5, [pc, #44]	@ (80082c4 <__libc_init_array+0x40>)
 8008296:	4c0c      	ldr	r4, [pc, #48]	@ (80082c8 <__libc_init_array+0x44>)
 8008298:	f000 fc64 	bl	8008b64 <_init>
 800829c:	1b64      	subs	r4, r4, r5
 800829e:	10a4      	asrs	r4, r4, #2
 80082a0:	2600      	movs	r6, #0
 80082a2:	42a6      	cmp	r6, r4
 80082a4:	d105      	bne.n	80082b2 <__libc_init_array+0x2e>
 80082a6:	bd70      	pop	{r4, r5, r6, pc}
 80082a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ac:	4798      	blx	r3
 80082ae:	3601      	adds	r6, #1
 80082b0:	e7ee      	b.n	8008290 <__libc_init_array+0xc>
 80082b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082b6:	4798      	blx	r3
 80082b8:	3601      	adds	r6, #1
 80082ba:	e7f2      	b.n	80082a2 <__libc_init_array+0x1e>
 80082bc:	08008d48 	.word	0x08008d48
 80082c0:	08008d48 	.word	0x08008d48
 80082c4:	08008d48 	.word	0x08008d48
 80082c8:	08008d4c 	.word	0x08008d4c

080082cc <__retarget_lock_acquire_recursive>:
 80082cc:	4770      	bx	lr

080082ce <__retarget_lock_release_recursive>:
 80082ce:	4770      	bx	lr

080082d0 <memcpy>:
 80082d0:	440a      	add	r2, r1
 80082d2:	4291      	cmp	r1, r2
 80082d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80082d8:	d100      	bne.n	80082dc <memcpy+0xc>
 80082da:	4770      	bx	lr
 80082dc:	b510      	push	{r4, lr}
 80082de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082e6:	4291      	cmp	r1, r2
 80082e8:	d1f9      	bne.n	80082de <memcpy+0xe>
 80082ea:	bd10      	pop	{r4, pc}

080082ec <_free_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	4605      	mov	r5, r0
 80082f0:	2900      	cmp	r1, #0
 80082f2:	d041      	beq.n	8008378 <_free_r+0x8c>
 80082f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082f8:	1f0c      	subs	r4, r1, #4
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	bfb8      	it	lt
 80082fe:	18e4      	addlt	r4, r4, r3
 8008300:	f000 f8e0 	bl	80084c4 <__malloc_lock>
 8008304:	4a1d      	ldr	r2, [pc, #116]	@ (800837c <_free_r+0x90>)
 8008306:	6813      	ldr	r3, [r2, #0]
 8008308:	b933      	cbnz	r3, 8008318 <_free_r+0x2c>
 800830a:	6063      	str	r3, [r4, #4]
 800830c:	6014      	str	r4, [r2, #0]
 800830e:	4628      	mov	r0, r5
 8008310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008314:	f000 b8dc 	b.w	80084d0 <__malloc_unlock>
 8008318:	42a3      	cmp	r3, r4
 800831a:	d908      	bls.n	800832e <_free_r+0x42>
 800831c:	6820      	ldr	r0, [r4, #0]
 800831e:	1821      	adds	r1, r4, r0
 8008320:	428b      	cmp	r3, r1
 8008322:	bf01      	itttt	eq
 8008324:	6819      	ldreq	r1, [r3, #0]
 8008326:	685b      	ldreq	r3, [r3, #4]
 8008328:	1809      	addeq	r1, r1, r0
 800832a:	6021      	streq	r1, [r4, #0]
 800832c:	e7ed      	b.n	800830a <_free_r+0x1e>
 800832e:	461a      	mov	r2, r3
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	b10b      	cbz	r3, 8008338 <_free_r+0x4c>
 8008334:	42a3      	cmp	r3, r4
 8008336:	d9fa      	bls.n	800832e <_free_r+0x42>
 8008338:	6811      	ldr	r1, [r2, #0]
 800833a:	1850      	adds	r0, r2, r1
 800833c:	42a0      	cmp	r0, r4
 800833e:	d10b      	bne.n	8008358 <_free_r+0x6c>
 8008340:	6820      	ldr	r0, [r4, #0]
 8008342:	4401      	add	r1, r0
 8008344:	1850      	adds	r0, r2, r1
 8008346:	4283      	cmp	r3, r0
 8008348:	6011      	str	r1, [r2, #0]
 800834a:	d1e0      	bne.n	800830e <_free_r+0x22>
 800834c:	6818      	ldr	r0, [r3, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	6053      	str	r3, [r2, #4]
 8008352:	4408      	add	r0, r1
 8008354:	6010      	str	r0, [r2, #0]
 8008356:	e7da      	b.n	800830e <_free_r+0x22>
 8008358:	d902      	bls.n	8008360 <_free_r+0x74>
 800835a:	230c      	movs	r3, #12
 800835c:	602b      	str	r3, [r5, #0]
 800835e:	e7d6      	b.n	800830e <_free_r+0x22>
 8008360:	6820      	ldr	r0, [r4, #0]
 8008362:	1821      	adds	r1, r4, r0
 8008364:	428b      	cmp	r3, r1
 8008366:	bf04      	itt	eq
 8008368:	6819      	ldreq	r1, [r3, #0]
 800836a:	685b      	ldreq	r3, [r3, #4]
 800836c:	6063      	str	r3, [r4, #4]
 800836e:	bf04      	itt	eq
 8008370:	1809      	addeq	r1, r1, r0
 8008372:	6021      	streq	r1, [r4, #0]
 8008374:	6054      	str	r4, [r2, #4]
 8008376:	e7ca      	b.n	800830e <_free_r+0x22>
 8008378:	bd38      	pop	{r3, r4, r5, pc}
 800837a:	bf00      	nop
 800837c:	20004514 	.word	0x20004514

08008380 <sbrk_aligned>:
 8008380:	b570      	push	{r4, r5, r6, lr}
 8008382:	4e0f      	ldr	r6, [pc, #60]	@ (80083c0 <sbrk_aligned+0x40>)
 8008384:	460c      	mov	r4, r1
 8008386:	6831      	ldr	r1, [r6, #0]
 8008388:	4605      	mov	r5, r0
 800838a:	b911      	cbnz	r1, 8008392 <sbrk_aligned+0x12>
 800838c:	f000 fba4 	bl	8008ad8 <_sbrk_r>
 8008390:	6030      	str	r0, [r6, #0]
 8008392:	4621      	mov	r1, r4
 8008394:	4628      	mov	r0, r5
 8008396:	f000 fb9f 	bl	8008ad8 <_sbrk_r>
 800839a:	1c43      	adds	r3, r0, #1
 800839c:	d103      	bne.n	80083a6 <sbrk_aligned+0x26>
 800839e:	f04f 34ff 	mov.w	r4, #4294967295
 80083a2:	4620      	mov	r0, r4
 80083a4:	bd70      	pop	{r4, r5, r6, pc}
 80083a6:	1cc4      	adds	r4, r0, #3
 80083a8:	f024 0403 	bic.w	r4, r4, #3
 80083ac:	42a0      	cmp	r0, r4
 80083ae:	d0f8      	beq.n	80083a2 <sbrk_aligned+0x22>
 80083b0:	1a21      	subs	r1, r4, r0
 80083b2:	4628      	mov	r0, r5
 80083b4:	f000 fb90 	bl	8008ad8 <_sbrk_r>
 80083b8:	3001      	adds	r0, #1
 80083ba:	d1f2      	bne.n	80083a2 <sbrk_aligned+0x22>
 80083bc:	e7ef      	b.n	800839e <sbrk_aligned+0x1e>
 80083be:	bf00      	nop
 80083c0:	20004510 	.word	0x20004510

080083c4 <_malloc_r>:
 80083c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083c8:	1ccd      	adds	r5, r1, #3
 80083ca:	f025 0503 	bic.w	r5, r5, #3
 80083ce:	3508      	adds	r5, #8
 80083d0:	2d0c      	cmp	r5, #12
 80083d2:	bf38      	it	cc
 80083d4:	250c      	movcc	r5, #12
 80083d6:	2d00      	cmp	r5, #0
 80083d8:	4606      	mov	r6, r0
 80083da:	db01      	blt.n	80083e0 <_malloc_r+0x1c>
 80083dc:	42a9      	cmp	r1, r5
 80083de:	d904      	bls.n	80083ea <_malloc_r+0x26>
 80083e0:	230c      	movs	r3, #12
 80083e2:	6033      	str	r3, [r6, #0]
 80083e4:	2000      	movs	r0, #0
 80083e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084c0 <_malloc_r+0xfc>
 80083ee:	f000 f869 	bl	80084c4 <__malloc_lock>
 80083f2:	f8d8 3000 	ldr.w	r3, [r8]
 80083f6:	461c      	mov	r4, r3
 80083f8:	bb44      	cbnz	r4, 800844c <_malloc_r+0x88>
 80083fa:	4629      	mov	r1, r5
 80083fc:	4630      	mov	r0, r6
 80083fe:	f7ff ffbf 	bl	8008380 <sbrk_aligned>
 8008402:	1c43      	adds	r3, r0, #1
 8008404:	4604      	mov	r4, r0
 8008406:	d158      	bne.n	80084ba <_malloc_r+0xf6>
 8008408:	f8d8 4000 	ldr.w	r4, [r8]
 800840c:	4627      	mov	r7, r4
 800840e:	2f00      	cmp	r7, #0
 8008410:	d143      	bne.n	800849a <_malloc_r+0xd6>
 8008412:	2c00      	cmp	r4, #0
 8008414:	d04b      	beq.n	80084ae <_malloc_r+0xea>
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	4639      	mov	r1, r7
 800841a:	4630      	mov	r0, r6
 800841c:	eb04 0903 	add.w	r9, r4, r3
 8008420:	f000 fb5a 	bl	8008ad8 <_sbrk_r>
 8008424:	4581      	cmp	r9, r0
 8008426:	d142      	bne.n	80084ae <_malloc_r+0xea>
 8008428:	6821      	ldr	r1, [r4, #0]
 800842a:	1a6d      	subs	r5, r5, r1
 800842c:	4629      	mov	r1, r5
 800842e:	4630      	mov	r0, r6
 8008430:	f7ff ffa6 	bl	8008380 <sbrk_aligned>
 8008434:	3001      	adds	r0, #1
 8008436:	d03a      	beq.n	80084ae <_malloc_r+0xea>
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	442b      	add	r3, r5
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	f8d8 3000 	ldr.w	r3, [r8]
 8008442:	685a      	ldr	r2, [r3, #4]
 8008444:	bb62      	cbnz	r2, 80084a0 <_malloc_r+0xdc>
 8008446:	f8c8 7000 	str.w	r7, [r8]
 800844a:	e00f      	b.n	800846c <_malloc_r+0xa8>
 800844c:	6822      	ldr	r2, [r4, #0]
 800844e:	1b52      	subs	r2, r2, r5
 8008450:	d420      	bmi.n	8008494 <_malloc_r+0xd0>
 8008452:	2a0b      	cmp	r2, #11
 8008454:	d917      	bls.n	8008486 <_malloc_r+0xc2>
 8008456:	1961      	adds	r1, r4, r5
 8008458:	42a3      	cmp	r3, r4
 800845a:	6025      	str	r5, [r4, #0]
 800845c:	bf18      	it	ne
 800845e:	6059      	strne	r1, [r3, #4]
 8008460:	6863      	ldr	r3, [r4, #4]
 8008462:	bf08      	it	eq
 8008464:	f8c8 1000 	streq.w	r1, [r8]
 8008468:	5162      	str	r2, [r4, r5]
 800846a:	604b      	str	r3, [r1, #4]
 800846c:	4630      	mov	r0, r6
 800846e:	f000 f82f 	bl	80084d0 <__malloc_unlock>
 8008472:	f104 000b 	add.w	r0, r4, #11
 8008476:	1d23      	adds	r3, r4, #4
 8008478:	f020 0007 	bic.w	r0, r0, #7
 800847c:	1ac2      	subs	r2, r0, r3
 800847e:	bf1c      	itt	ne
 8008480:	1a1b      	subne	r3, r3, r0
 8008482:	50a3      	strne	r3, [r4, r2]
 8008484:	e7af      	b.n	80083e6 <_malloc_r+0x22>
 8008486:	6862      	ldr	r2, [r4, #4]
 8008488:	42a3      	cmp	r3, r4
 800848a:	bf0c      	ite	eq
 800848c:	f8c8 2000 	streq.w	r2, [r8]
 8008490:	605a      	strne	r2, [r3, #4]
 8008492:	e7eb      	b.n	800846c <_malloc_r+0xa8>
 8008494:	4623      	mov	r3, r4
 8008496:	6864      	ldr	r4, [r4, #4]
 8008498:	e7ae      	b.n	80083f8 <_malloc_r+0x34>
 800849a:	463c      	mov	r4, r7
 800849c:	687f      	ldr	r7, [r7, #4]
 800849e:	e7b6      	b.n	800840e <_malloc_r+0x4a>
 80084a0:	461a      	mov	r2, r3
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	42a3      	cmp	r3, r4
 80084a6:	d1fb      	bne.n	80084a0 <_malloc_r+0xdc>
 80084a8:	2300      	movs	r3, #0
 80084aa:	6053      	str	r3, [r2, #4]
 80084ac:	e7de      	b.n	800846c <_malloc_r+0xa8>
 80084ae:	230c      	movs	r3, #12
 80084b0:	6033      	str	r3, [r6, #0]
 80084b2:	4630      	mov	r0, r6
 80084b4:	f000 f80c 	bl	80084d0 <__malloc_unlock>
 80084b8:	e794      	b.n	80083e4 <_malloc_r+0x20>
 80084ba:	6005      	str	r5, [r0, #0]
 80084bc:	e7d6      	b.n	800846c <_malloc_r+0xa8>
 80084be:	bf00      	nop
 80084c0:	20004514 	.word	0x20004514

080084c4 <__malloc_lock>:
 80084c4:	4801      	ldr	r0, [pc, #4]	@ (80084cc <__malloc_lock+0x8>)
 80084c6:	f7ff bf01 	b.w	80082cc <__retarget_lock_acquire_recursive>
 80084ca:	bf00      	nop
 80084cc:	2000450c 	.word	0x2000450c

080084d0 <__malloc_unlock>:
 80084d0:	4801      	ldr	r0, [pc, #4]	@ (80084d8 <__malloc_unlock+0x8>)
 80084d2:	f7ff befc 	b.w	80082ce <__retarget_lock_release_recursive>
 80084d6:	bf00      	nop
 80084d8:	2000450c 	.word	0x2000450c

080084dc <__ssputs_r>:
 80084dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e0:	688e      	ldr	r6, [r1, #8]
 80084e2:	461f      	mov	r7, r3
 80084e4:	42be      	cmp	r6, r7
 80084e6:	680b      	ldr	r3, [r1, #0]
 80084e8:	4682      	mov	sl, r0
 80084ea:	460c      	mov	r4, r1
 80084ec:	4690      	mov	r8, r2
 80084ee:	d82d      	bhi.n	800854c <__ssputs_r+0x70>
 80084f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084f8:	d026      	beq.n	8008548 <__ssputs_r+0x6c>
 80084fa:	6965      	ldr	r5, [r4, #20]
 80084fc:	6909      	ldr	r1, [r1, #16]
 80084fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008502:	eba3 0901 	sub.w	r9, r3, r1
 8008506:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800850a:	1c7b      	adds	r3, r7, #1
 800850c:	444b      	add	r3, r9
 800850e:	106d      	asrs	r5, r5, #1
 8008510:	429d      	cmp	r5, r3
 8008512:	bf38      	it	cc
 8008514:	461d      	movcc	r5, r3
 8008516:	0553      	lsls	r3, r2, #21
 8008518:	d527      	bpl.n	800856a <__ssputs_r+0x8e>
 800851a:	4629      	mov	r1, r5
 800851c:	f7ff ff52 	bl	80083c4 <_malloc_r>
 8008520:	4606      	mov	r6, r0
 8008522:	b360      	cbz	r0, 800857e <__ssputs_r+0xa2>
 8008524:	6921      	ldr	r1, [r4, #16]
 8008526:	464a      	mov	r2, r9
 8008528:	f7ff fed2 	bl	80082d0 <memcpy>
 800852c:	89a3      	ldrh	r3, [r4, #12]
 800852e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008536:	81a3      	strh	r3, [r4, #12]
 8008538:	6126      	str	r6, [r4, #16]
 800853a:	6165      	str	r5, [r4, #20]
 800853c:	444e      	add	r6, r9
 800853e:	eba5 0509 	sub.w	r5, r5, r9
 8008542:	6026      	str	r6, [r4, #0]
 8008544:	60a5      	str	r5, [r4, #8]
 8008546:	463e      	mov	r6, r7
 8008548:	42be      	cmp	r6, r7
 800854a:	d900      	bls.n	800854e <__ssputs_r+0x72>
 800854c:	463e      	mov	r6, r7
 800854e:	6820      	ldr	r0, [r4, #0]
 8008550:	4632      	mov	r2, r6
 8008552:	4641      	mov	r1, r8
 8008554:	f000 faa6 	bl	8008aa4 <memmove>
 8008558:	68a3      	ldr	r3, [r4, #8]
 800855a:	1b9b      	subs	r3, r3, r6
 800855c:	60a3      	str	r3, [r4, #8]
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	4433      	add	r3, r6
 8008562:	6023      	str	r3, [r4, #0]
 8008564:	2000      	movs	r0, #0
 8008566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800856a:	462a      	mov	r2, r5
 800856c:	f000 fac4 	bl	8008af8 <_realloc_r>
 8008570:	4606      	mov	r6, r0
 8008572:	2800      	cmp	r0, #0
 8008574:	d1e0      	bne.n	8008538 <__ssputs_r+0x5c>
 8008576:	6921      	ldr	r1, [r4, #16]
 8008578:	4650      	mov	r0, sl
 800857a:	f7ff feb7 	bl	80082ec <_free_r>
 800857e:	230c      	movs	r3, #12
 8008580:	f8ca 3000 	str.w	r3, [sl]
 8008584:	89a3      	ldrh	r3, [r4, #12]
 8008586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800858a:	81a3      	strh	r3, [r4, #12]
 800858c:	f04f 30ff 	mov.w	r0, #4294967295
 8008590:	e7e9      	b.n	8008566 <__ssputs_r+0x8a>
	...

08008594 <_svfiprintf_r>:
 8008594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008598:	4698      	mov	r8, r3
 800859a:	898b      	ldrh	r3, [r1, #12]
 800859c:	061b      	lsls	r3, r3, #24
 800859e:	b09d      	sub	sp, #116	@ 0x74
 80085a0:	4607      	mov	r7, r0
 80085a2:	460d      	mov	r5, r1
 80085a4:	4614      	mov	r4, r2
 80085a6:	d510      	bpl.n	80085ca <_svfiprintf_r+0x36>
 80085a8:	690b      	ldr	r3, [r1, #16]
 80085aa:	b973      	cbnz	r3, 80085ca <_svfiprintf_r+0x36>
 80085ac:	2140      	movs	r1, #64	@ 0x40
 80085ae:	f7ff ff09 	bl	80083c4 <_malloc_r>
 80085b2:	6028      	str	r0, [r5, #0]
 80085b4:	6128      	str	r0, [r5, #16]
 80085b6:	b930      	cbnz	r0, 80085c6 <_svfiprintf_r+0x32>
 80085b8:	230c      	movs	r3, #12
 80085ba:	603b      	str	r3, [r7, #0]
 80085bc:	f04f 30ff 	mov.w	r0, #4294967295
 80085c0:	b01d      	add	sp, #116	@ 0x74
 80085c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c6:	2340      	movs	r3, #64	@ 0x40
 80085c8:	616b      	str	r3, [r5, #20]
 80085ca:	2300      	movs	r3, #0
 80085cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80085ce:	2320      	movs	r3, #32
 80085d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80085d8:	2330      	movs	r3, #48	@ 0x30
 80085da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008778 <_svfiprintf_r+0x1e4>
 80085de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085e2:	f04f 0901 	mov.w	r9, #1
 80085e6:	4623      	mov	r3, r4
 80085e8:	469a      	mov	sl, r3
 80085ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085ee:	b10a      	cbz	r2, 80085f4 <_svfiprintf_r+0x60>
 80085f0:	2a25      	cmp	r2, #37	@ 0x25
 80085f2:	d1f9      	bne.n	80085e8 <_svfiprintf_r+0x54>
 80085f4:	ebba 0b04 	subs.w	fp, sl, r4
 80085f8:	d00b      	beq.n	8008612 <_svfiprintf_r+0x7e>
 80085fa:	465b      	mov	r3, fp
 80085fc:	4622      	mov	r2, r4
 80085fe:	4629      	mov	r1, r5
 8008600:	4638      	mov	r0, r7
 8008602:	f7ff ff6b 	bl	80084dc <__ssputs_r>
 8008606:	3001      	adds	r0, #1
 8008608:	f000 80a7 	beq.w	800875a <_svfiprintf_r+0x1c6>
 800860c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800860e:	445a      	add	r2, fp
 8008610:	9209      	str	r2, [sp, #36]	@ 0x24
 8008612:	f89a 3000 	ldrb.w	r3, [sl]
 8008616:	2b00      	cmp	r3, #0
 8008618:	f000 809f 	beq.w	800875a <_svfiprintf_r+0x1c6>
 800861c:	2300      	movs	r3, #0
 800861e:	f04f 32ff 	mov.w	r2, #4294967295
 8008622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008626:	f10a 0a01 	add.w	sl, sl, #1
 800862a:	9304      	str	r3, [sp, #16]
 800862c:	9307      	str	r3, [sp, #28]
 800862e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008632:	931a      	str	r3, [sp, #104]	@ 0x68
 8008634:	4654      	mov	r4, sl
 8008636:	2205      	movs	r2, #5
 8008638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800863c:	484e      	ldr	r0, [pc, #312]	@ (8008778 <_svfiprintf_r+0x1e4>)
 800863e:	f7f7 fdd7 	bl	80001f0 <memchr>
 8008642:	9a04      	ldr	r2, [sp, #16]
 8008644:	b9d8      	cbnz	r0, 800867e <_svfiprintf_r+0xea>
 8008646:	06d0      	lsls	r0, r2, #27
 8008648:	bf44      	itt	mi
 800864a:	2320      	movmi	r3, #32
 800864c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008650:	0711      	lsls	r1, r2, #28
 8008652:	bf44      	itt	mi
 8008654:	232b      	movmi	r3, #43	@ 0x2b
 8008656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800865a:	f89a 3000 	ldrb.w	r3, [sl]
 800865e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008660:	d015      	beq.n	800868e <_svfiprintf_r+0xfa>
 8008662:	9a07      	ldr	r2, [sp, #28]
 8008664:	4654      	mov	r4, sl
 8008666:	2000      	movs	r0, #0
 8008668:	f04f 0c0a 	mov.w	ip, #10
 800866c:	4621      	mov	r1, r4
 800866e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008672:	3b30      	subs	r3, #48	@ 0x30
 8008674:	2b09      	cmp	r3, #9
 8008676:	d94b      	bls.n	8008710 <_svfiprintf_r+0x17c>
 8008678:	b1b0      	cbz	r0, 80086a8 <_svfiprintf_r+0x114>
 800867a:	9207      	str	r2, [sp, #28]
 800867c:	e014      	b.n	80086a8 <_svfiprintf_r+0x114>
 800867e:	eba0 0308 	sub.w	r3, r0, r8
 8008682:	fa09 f303 	lsl.w	r3, r9, r3
 8008686:	4313      	orrs	r3, r2
 8008688:	9304      	str	r3, [sp, #16]
 800868a:	46a2      	mov	sl, r4
 800868c:	e7d2      	b.n	8008634 <_svfiprintf_r+0xa0>
 800868e:	9b03      	ldr	r3, [sp, #12]
 8008690:	1d19      	adds	r1, r3, #4
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	9103      	str	r1, [sp, #12]
 8008696:	2b00      	cmp	r3, #0
 8008698:	bfbb      	ittet	lt
 800869a:	425b      	neglt	r3, r3
 800869c:	f042 0202 	orrlt.w	r2, r2, #2
 80086a0:	9307      	strge	r3, [sp, #28]
 80086a2:	9307      	strlt	r3, [sp, #28]
 80086a4:	bfb8      	it	lt
 80086a6:	9204      	strlt	r2, [sp, #16]
 80086a8:	7823      	ldrb	r3, [r4, #0]
 80086aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80086ac:	d10a      	bne.n	80086c4 <_svfiprintf_r+0x130>
 80086ae:	7863      	ldrb	r3, [r4, #1]
 80086b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80086b2:	d132      	bne.n	800871a <_svfiprintf_r+0x186>
 80086b4:	9b03      	ldr	r3, [sp, #12]
 80086b6:	1d1a      	adds	r2, r3, #4
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	9203      	str	r2, [sp, #12]
 80086bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086c0:	3402      	adds	r4, #2
 80086c2:	9305      	str	r3, [sp, #20]
 80086c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008788 <_svfiprintf_r+0x1f4>
 80086c8:	7821      	ldrb	r1, [r4, #0]
 80086ca:	2203      	movs	r2, #3
 80086cc:	4650      	mov	r0, sl
 80086ce:	f7f7 fd8f 	bl	80001f0 <memchr>
 80086d2:	b138      	cbz	r0, 80086e4 <_svfiprintf_r+0x150>
 80086d4:	9b04      	ldr	r3, [sp, #16]
 80086d6:	eba0 000a 	sub.w	r0, r0, sl
 80086da:	2240      	movs	r2, #64	@ 0x40
 80086dc:	4082      	lsls	r2, r0
 80086de:	4313      	orrs	r3, r2
 80086e0:	3401      	adds	r4, #1
 80086e2:	9304      	str	r3, [sp, #16]
 80086e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086e8:	4824      	ldr	r0, [pc, #144]	@ (800877c <_svfiprintf_r+0x1e8>)
 80086ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086ee:	2206      	movs	r2, #6
 80086f0:	f7f7 fd7e 	bl	80001f0 <memchr>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d036      	beq.n	8008766 <_svfiprintf_r+0x1d2>
 80086f8:	4b21      	ldr	r3, [pc, #132]	@ (8008780 <_svfiprintf_r+0x1ec>)
 80086fa:	bb1b      	cbnz	r3, 8008744 <_svfiprintf_r+0x1b0>
 80086fc:	9b03      	ldr	r3, [sp, #12]
 80086fe:	3307      	adds	r3, #7
 8008700:	f023 0307 	bic.w	r3, r3, #7
 8008704:	3308      	adds	r3, #8
 8008706:	9303      	str	r3, [sp, #12]
 8008708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800870a:	4433      	add	r3, r6
 800870c:	9309      	str	r3, [sp, #36]	@ 0x24
 800870e:	e76a      	b.n	80085e6 <_svfiprintf_r+0x52>
 8008710:	fb0c 3202 	mla	r2, ip, r2, r3
 8008714:	460c      	mov	r4, r1
 8008716:	2001      	movs	r0, #1
 8008718:	e7a8      	b.n	800866c <_svfiprintf_r+0xd8>
 800871a:	2300      	movs	r3, #0
 800871c:	3401      	adds	r4, #1
 800871e:	9305      	str	r3, [sp, #20]
 8008720:	4619      	mov	r1, r3
 8008722:	f04f 0c0a 	mov.w	ip, #10
 8008726:	4620      	mov	r0, r4
 8008728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800872c:	3a30      	subs	r2, #48	@ 0x30
 800872e:	2a09      	cmp	r2, #9
 8008730:	d903      	bls.n	800873a <_svfiprintf_r+0x1a6>
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0c6      	beq.n	80086c4 <_svfiprintf_r+0x130>
 8008736:	9105      	str	r1, [sp, #20]
 8008738:	e7c4      	b.n	80086c4 <_svfiprintf_r+0x130>
 800873a:	fb0c 2101 	mla	r1, ip, r1, r2
 800873e:	4604      	mov	r4, r0
 8008740:	2301      	movs	r3, #1
 8008742:	e7f0      	b.n	8008726 <_svfiprintf_r+0x192>
 8008744:	ab03      	add	r3, sp, #12
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	462a      	mov	r2, r5
 800874a:	4b0e      	ldr	r3, [pc, #56]	@ (8008784 <_svfiprintf_r+0x1f0>)
 800874c:	a904      	add	r1, sp, #16
 800874e:	4638      	mov	r0, r7
 8008750:	f3af 8000 	nop.w
 8008754:	1c42      	adds	r2, r0, #1
 8008756:	4606      	mov	r6, r0
 8008758:	d1d6      	bne.n	8008708 <_svfiprintf_r+0x174>
 800875a:	89ab      	ldrh	r3, [r5, #12]
 800875c:	065b      	lsls	r3, r3, #25
 800875e:	f53f af2d 	bmi.w	80085bc <_svfiprintf_r+0x28>
 8008762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008764:	e72c      	b.n	80085c0 <_svfiprintf_r+0x2c>
 8008766:	ab03      	add	r3, sp, #12
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	462a      	mov	r2, r5
 800876c:	4b05      	ldr	r3, [pc, #20]	@ (8008784 <_svfiprintf_r+0x1f0>)
 800876e:	a904      	add	r1, sp, #16
 8008770:	4638      	mov	r0, r7
 8008772:	f000 f879 	bl	8008868 <_printf_i>
 8008776:	e7ed      	b.n	8008754 <_svfiprintf_r+0x1c0>
 8008778:	08008d0c 	.word	0x08008d0c
 800877c:	08008d16 	.word	0x08008d16
 8008780:	00000000 	.word	0x00000000
 8008784:	080084dd 	.word	0x080084dd
 8008788:	08008d12 	.word	0x08008d12

0800878c <_printf_common>:
 800878c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008790:	4616      	mov	r6, r2
 8008792:	4698      	mov	r8, r3
 8008794:	688a      	ldr	r2, [r1, #8]
 8008796:	690b      	ldr	r3, [r1, #16]
 8008798:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800879c:	4293      	cmp	r3, r2
 800879e:	bfb8      	it	lt
 80087a0:	4613      	movlt	r3, r2
 80087a2:	6033      	str	r3, [r6, #0]
 80087a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80087a8:	4607      	mov	r7, r0
 80087aa:	460c      	mov	r4, r1
 80087ac:	b10a      	cbz	r2, 80087b2 <_printf_common+0x26>
 80087ae:	3301      	adds	r3, #1
 80087b0:	6033      	str	r3, [r6, #0]
 80087b2:	6823      	ldr	r3, [r4, #0]
 80087b4:	0699      	lsls	r1, r3, #26
 80087b6:	bf42      	ittt	mi
 80087b8:	6833      	ldrmi	r3, [r6, #0]
 80087ba:	3302      	addmi	r3, #2
 80087bc:	6033      	strmi	r3, [r6, #0]
 80087be:	6825      	ldr	r5, [r4, #0]
 80087c0:	f015 0506 	ands.w	r5, r5, #6
 80087c4:	d106      	bne.n	80087d4 <_printf_common+0x48>
 80087c6:	f104 0a19 	add.w	sl, r4, #25
 80087ca:	68e3      	ldr	r3, [r4, #12]
 80087cc:	6832      	ldr	r2, [r6, #0]
 80087ce:	1a9b      	subs	r3, r3, r2
 80087d0:	42ab      	cmp	r3, r5
 80087d2:	dc26      	bgt.n	8008822 <_printf_common+0x96>
 80087d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087d8:	6822      	ldr	r2, [r4, #0]
 80087da:	3b00      	subs	r3, #0
 80087dc:	bf18      	it	ne
 80087de:	2301      	movne	r3, #1
 80087e0:	0692      	lsls	r2, r2, #26
 80087e2:	d42b      	bmi.n	800883c <_printf_common+0xb0>
 80087e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087e8:	4641      	mov	r1, r8
 80087ea:	4638      	mov	r0, r7
 80087ec:	47c8      	blx	r9
 80087ee:	3001      	adds	r0, #1
 80087f0:	d01e      	beq.n	8008830 <_printf_common+0xa4>
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	6922      	ldr	r2, [r4, #16]
 80087f6:	f003 0306 	and.w	r3, r3, #6
 80087fa:	2b04      	cmp	r3, #4
 80087fc:	bf02      	ittt	eq
 80087fe:	68e5      	ldreq	r5, [r4, #12]
 8008800:	6833      	ldreq	r3, [r6, #0]
 8008802:	1aed      	subeq	r5, r5, r3
 8008804:	68a3      	ldr	r3, [r4, #8]
 8008806:	bf0c      	ite	eq
 8008808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800880c:	2500      	movne	r5, #0
 800880e:	4293      	cmp	r3, r2
 8008810:	bfc4      	itt	gt
 8008812:	1a9b      	subgt	r3, r3, r2
 8008814:	18ed      	addgt	r5, r5, r3
 8008816:	2600      	movs	r6, #0
 8008818:	341a      	adds	r4, #26
 800881a:	42b5      	cmp	r5, r6
 800881c:	d11a      	bne.n	8008854 <_printf_common+0xc8>
 800881e:	2000      	movs	r0, #0
 8008820:	e008      	b.n	8008834 <_printf_common+0xa8>
 8008822:	2301      	movs	r3, #1
 8008824:	4652      	mov	r2, sl
 8008826:	4641      	mov	r1, r8
 8008828:	4638      	mov	r0, r7
 800882a:	47c8      	blx	r9
 800882c:	3001      	adds	r0, #1
 800882e:	d103      	bne.n	8008838 <_printf_common+0xac>
 8008830:	f04f 30ff 	mov.w	r0, #4294967295
 8008834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008838:	3501      	adds	r5, #1
 800883a:	e7c6      	b.n	80087ca <_printf_common+0x3e>
 800883c:	18e1      	adds	r1, r4, r3
 800883e:	1c5a      	adds	r2, r3, #1
 8008840:	2030      	movs	r0, #48	@ 0x30
 8008842:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008846:	4422      	add	r2, r4
 8008848:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800884c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008850:	3302      	adds	r3, #2
 8008852:	e7c7      	b.n	80087e4 <_printf_common+0x58>
 8008854:	2301      	movs	r3, #1
 8008856:	4622      	mov	r2, r4
 8008858:	4641      	mov	r1, r8
 800885a:	4638      	mov	r0, r7
 800885c:	47c8      	blx	r9
 800885e:	3001      	adds	r0, #1
 8008860:	d0e6      	beq.n	8008830 <_printf_common+0xa4>
 8008862:	3601      	adds	r6, #1
 8008864:	e7d9      	b.n	800881a <_printf_common+0x8e>
	...

08008868 <_printf_i>:
 8008868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800886c:	7e0f      	ldrb	r7, [r1, #24]
 800886e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008870:	2f78      	cmp	r7, #120	@ 0x78
 8008872:	4691      	mov	r9, r2
 8008874:	4680      	mov	r8, r0
 8008876:	460c      	mov	r4, r1
 8008878:	469a      	mov	sl, r3
 800887a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800887e:	d807      	bhi.n	8008890 <_printf_i+0x28>
 8008880:	2f62      	cmp	r7, #98	@ 0x62
 8008882:	d80a      	bhi.n	800889a <_printf_i+0x32>
 8008884:	2f00      	cmp	r7, #0
 8008886:	f000 80d1 	beq.w	8008a2c <_printf_i+0x1c4>
 800888a:	2f58      	cmp	r7, #88	@ 0x58
 800888c:	f000 80b8 	beq.w	8008a00 <_printf_i+0x198>
 8008890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008894:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008898:	e03a      	b.n	8008910 <_printf_i+0xa8>
 800889a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800889e:	2b15      	cmp	r3, #21
 80088a0:	d8f6      	bhi.n	8008890 <_printf_i+0x28>
 80088a2:	a101      	add	r1, pc, #4	@ (adr r1, 80088a8 <_printf_i+0x40>)
 80088a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088a8:	08008901 	.word	0x08008901
 80088ac:	08008915 	.word	0x08008915
 80088b0:	08008891 	.word	0x08008891
 80088b4:	08008891 	.word	0x08008891
 80088b8:	08008891 	.word	0x08008891
 80088bc:	08008891 	.word	0x08008891
 80088c0:	08008915 	.word	0x08008915
 80088c4:	08008891 	.word	0x08008891
 80088c8:	08008891 	.word	0x08008891
 80088cc:	08008891 	.word	0x08008891
 80088d0:	08008891 	.word	0x08008891
 80088d4:	08008a13 	.word	0x08008a13
 80088d8:	0800893f 	.word	0x0800893f
 80088dc:	080089cd 	.word	0x080089cd
 80088e0:	08008891 	.word	0x08008891
 80088e4:	08008891 	.word	0x08008891
 80088e8:	08008a35 	.word	0x08008a35
 80088ec:	08008891 	.word	0x08008891
 80088f0:	0800893f 	.word	0x0800893f
 80088f4:	08008891 	.word	0x08008891
 80088f8:	08008891 	.word	0x08008891
 80088fc:	080089d5 	.word	0x080089d5
 8008900:	6833      	ldr	r3, [r6, #0]
 8008902:	1d1a      	adds	r2, r3, #4
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6032      	str	r2, [r6, #0]
 8008908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800890c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008910:	2301      	movs	r3, #1
 8008912:	e09c      	b.n	8008a4e <_printf_i+0x1e6>
 8008914:	6833      	ldr	r3, [r6, #0]
 8008916:	6820      	ldr	r0, [r4, #0]
 8008918:	1d19      	adds	r1, r3, #4
 800891a:	6031      	str	r1, [r6, #0]
 800891c:	0606      	lsls	r6, r0, #24
 800891e:	d501      	bpl.n	8008924 <_printf_i+0xbc>
 8008920:	681d      	ldr	r5, [r3, #0]
 8008922:	e003      	b.n	800892c <_printf_i+0xc4>
 8008924:	0645      	lsls	r5, r0, #25
 8008926:	d5fb      	bpl.n	8008920 <_printf_i+0xb8>
 8008928:	f9b3 5000 	ldrsh.w	r5, [r3]
 800892c:	2d00      	cmp	r5, #0
 800892e:	da03      	bge.n	8008938 <_printf_i+0xd0>
 8008930:	232d      	movs	r3, #45	@ 0x2d
 8008932:	426d      	negs	r5, r5
 8008934:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008938:	4858      	ldr	r0, [pc, #352]	@ (8008a9c <_printf_i+0x234>)
 800893a:	230a      	movs	r3, #10
 800893c:	e011      	b.n	8008962 <_printf_i+0xfa>
 800893e:	6821      	ldr	r1, [r4, #0]
 8008940:	6833      	ldr	r3, [r6, #0]
 8008942:	0608      	lsls	r0, r1, #24
 8008944:	f853 5b04 	ldr.w	r5, [r3], #4
 8008948:	d402      	bmi.n	8008950 <_printf_i+0xe8>
 800894a:	0649      	lsls	r1, r1, #25
 800894c:	bf48      	it	mi
 800894e:	b2ad      	uxthmi	r5, r5
 8008950:	2f6f      	cmp	r7, #111	@ 0x6f
 8008952:	4852      	ldr	r0, [pc, #328]	@ (8008a9c <_printf_i+0x234>)
 8008954:	6033      	str	r3, [r6, #0]
 8008956:	bf14      	ite	ne
 8008958:	230a      	movne	r3, #10
 800895a:	2308      	moveq	r3, #8
 800895c:	2100      	movs	r1, #0
 800895e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008962:	6866      	ldr	r6, [r4, #4]
 8008964:	60a6      	str	r6, [r4, #8]
 8008966:	2e00      	cmp	r6, #0
 8008968:	db05      	blt.n	8008976 <_printf_i+0x10e>
 800896a:	6821      	ldr	r1, [r4, #0]
 800896c:	432e      	orrs	r6, r5
 800896e:	f021 0104 	bic.w	r1, r1, #4
 8008972:	6021      	str	r1, [r4, #0]
 8008974:	d04b      	beq.n	8008a0e <_printf_i+0x1a6>
 8008976:	4616      	mov	r6, r2
 8008978:	fbb5 f1f3 	udiv	r1, r5, r3
 800897c:	fb03 5711 	mls	r7, r3, r1, r5
 8008980:	5dc7      	ldrb	r7, [r0, r7]
 8008982:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008986:	462f      	mov	r7, r5
 8008988:	42bb      	cmp	r3, r7
 800898a:	460d      	mov	r5, r1
 800898c:	d9f4      	bls.n	8008978 <_printf_i+0x110>
 800898e:	2b08      	cmp	r3, #8
 8008990:	d10b      	bne.n	80089aa <_printf_i+0x142>
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	07df      	lsls	r7, r3, #31
 8008996:	d508      	bpl.n	80089aa <_printf_i+0x142>
 8008998:	6923      	ldr	r3, [r4, #16]
 800899a:	6861      	ldr	r1, [r4, #4]
 800899c:	4299      	cmp	r1, r3
 800899e:	bfde      	ittt	le
 80089a0:	2330      	movle	r3, #48	@ 0x30
 80089a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089aa:	1b92      	subs	r2, r2, r6
 80089ac:	6122      	str	r2, [r4, #16]
 80089ae:	f8cd a000 	str.w	sl, [sp]
 80089b2:	464b      	mov	r3, r9
 80089b4:	aa03      	add	r2, sp, #12
 80089b6:	4621      	mov	r1, r4
 80089b8:	4640      	mov	r0, r8
 80089ba:	f7ff fee7 	bl	800878c <_printf_common>
 80089be:	3001      	adds	r0, #1
 80089c0:	d14a      	bne.n	8008a58 <_printf_i+0x1f0>
 80089c2:	f04f 30ff 	mov.w	r0, #4294967295
 80089c6:	b004      	add	sp, #16
 80089c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	f043 0320 	orr.w	r3, r3, #32
 80089d2:	6023      	str	r3, [r4, #0]
 80089d4:	4832      	ldr	r0, [pc, #200]	@ (8008aa0 <_printf_i+0x238>)
 80089d6:	2778      	movs	r7, #120	@ 0x78
 80089d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089dc:	6823      	ldr	r3, [r4, #0]
 80089de:	6831      	ldr	r1, [r6, #0]
 80089e0:	061f      	lsls	r7, r3, #24
 80089e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80089e6:	d402      	bmi.n	80089ee <_printf_i+0x186>
 80089e8:	065f      	lsls	r7, r3, #25
 80089ea:	bf48      	it	mi
 80089ec:	b2ad      	uxthmi	r5, r5
 80089ee:	6031      	str	r1, [r6, #0]
 80089f0:	07d9      	lsls	r1, r3, #31
 80089f2:	bf44      	itt	mi
 80089f4:	f043 0320 	orrmi.w	r3, r3, #32
 80089f8:	6023      	strmi	r3, [r4, #0]
 80089fa:	b11d      	cbz	r5, 8008a04 <_printf_i+0x19c>
 80089fc:	2310      	movs	r3, #16
 80089fe:	e7ad      	b.n	800895c <_printf_i+0xf4>
 8008a00:	4826      	ldr	r0, [pc, #152]	@ (8008a9c <_printf_i+0x234>)
 8008a02:	e7e9      	b.n	80089d8 <_printf_i+0x170>
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	f023 0320 	bic.w	r3, r3, #32
 8008a0a:	6023      	str	r3, [r4, #0]
 8008a0c:	e7f6      	b.n	80089fc <_printf_i+0x194>
 8008a0e:	4616      	mov	r6, r2
 8008a10:	e7bd      	b.n	800898e <_printf_i+0x126>
 8008a12:	6833      	ldr	r3, [r6, #0]
 8008a14:	6825      	ldr	r5, [r4, #0]
 8008a16:	6961      	ldr	r1, [r4, #20]
 8008a18:	1d18      	adds	r0, r3, #4
 8008a1a:	6030      	str	r0, [r6, #0]
 8008a1c:	062e      	lsls	r6, r5, #24
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	d501      	bpl.n	8008a26 <_printf_i+0x1be>
 8008a22:	6019      	str	r1, [r3, #0]
 8008a24:	e002      	b.n	8008a2c <_printf_i+0x1c4>
 8008a26:	0668      	lsls	r0, r5, #25
 8008a28:	d5fb      	bpl.n	8008a22 <_printf_i+0x1ba>
 8008a2a:	8019      	strh	r1, [r3, #0]
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	6123      	str	r3, [r4, #16]
 8008a30:	4616      	mov	r6, r2
 8008a32:	e7bc      	b.n	80089ae <_printf_i+0x146>
 8008a34:	6833      	ldr	r3, [r6, #0]
 8008a36:	1d1a      	adds	r2, r3, #4
 8008a38:	6032      	str	r2, [r6, #0]
 8008a3a:	681e      	ldr	r6, [r3, #0]
 8008a3c:	6862      	ldr	r2, [r4, #4]
 8008a3e:	2100      	movs	r1, #0
 8008a40:	4630      	mov	r0, r6
 8008a42:	f7f7 fbd5 	bl	80001f0 <memchr>
 8008a46:	b108      	cbz	r0, 8008a4c <_printf_i+0x1e4>
 8008a48:	1b80      	subs	r0, r0, r6
 8008a4a:	6060      	str	r0, [r4, #4]
 8008a4c:	6863      	ldr	r3, [r4, #4]
 8008a4e:	6123      	str	r3, [r4, #16]
 8008a50:	2300      	movs	r3, #0
 8008a52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a56:	e7aa      	b.n	80089ae <_printf_i+0x146>
 8008a58:	6923      	ldr	r3, [r4, #16]
 8008a5a:	4632      	mov	r2, r6
 8008a5c:	4649      	mov	r1, r9
 8008a5e:	4640      	mov	r0, r8
 8008a60:	47d0      	blx	sl
 8008a62:	3001      	adds	r0, #1
 8008a64:	d0ad      	beq.n	80089c2 <_printf_i+0x15a>
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	079b      	lsls	r3, r3, #30
 8008a6a:	d413      	bmi.n	8008a94 <_printf_i+0x22c>
 8008a6c:	68e0      	ldr	r0, [r4, #12]
 8008a6e:	9b03      	ldr	r3, [sp, #12]
 8008a70:	4298      	cmp	r0, r3
 8008a72:	bfb8      	it	lt
 8008a74:	4618      	movlt	r0, r3
 8008a76:	e7a6      	b.n	80089c6 <_printf_i+0x15e>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	4632      	mov	r2, r6
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	4640      	mov	r0, r8
 8008a80:	47d0      	blx	sl
 8008a82:	3001      	adds	r0, #1
 8008a84:	d09d      	beq.n	80089c2 <_printf_i+0x15a>
 8008a86:	3501      	adds	r5, #1
 8008a88:	68e3      	ldr	r3, [r4, #12]
 8008a8a:	9903      	ldr	r1, [sp, #12]
 8008a8c:	1a5b      	subs	r3, r3, r1
 8008a8e:	42ab      	cmp	r3, r5
 8008a90:	dcf2      	bgt.n	8008a78 <_printf_i+0x210>
 8008a92:	e7eb      	b.n	8008a6c <_printf_i+0x204>
 8008a94:	2500      	movs	r5, #0
 8008a96:	f104 0619 	add.w	r6, r4, #25
 8008a9a:	e7f5      	b.n	8008a88 <_printf_i+0x220>
 8008a9c:	08008d1d 	.word	0x08008d1d
 8008aa0:	08008d2e 	.word	0x08008d2e

08008aa4 <memmove>:
 8008aa4:	4288      	cmp	r0, r1
 8008aa6:	b510      	push	{r4, lr}
 8008aa8:	eb01 0402 	add.w	r4, r1, r2
 8008aac:	d902      	bls.n	8008ab4 <memmove+0x10>
 8008aae:	4284      	cmp	r4, r0
 8008ab0:	4623      	mov	r3, r4
 8008ab2:	d807      	bhi.n	8008ac4 <memmove+0x20>
 8008ab4:	1e43      	subs	r3, r0, #1
 8008ab6:	42a1      	cmp	r1, r4
 8008ab8:	d008      	beq.n	8008acc <memmove+0x28>
 8008aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008abe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ac2:	e7f8      	b.n	8008ab6 <memmove+0x12>
 8008ac4:	4402      	add	r2, r0
 8008ac6:	4601      	mov	r1, r0
 8008ac8:	428a      	cmp	r2, r1
 8008aca:	d100      	bne.n	8008ace <memmove+0x2a>
 8008acc:	bd10      	pop	{r4, pc}
 8008ace:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ad2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ad6:	e7f7      	b.n	8008ac8 <memmove+0x24>

08008ad8 <_sbrk_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	4d06      	ldr	r5, [pc, #24]	@ (8008af4 <_sbrk_r+0x1c>)
 8008adc:	2300      	movs	r3, #0
 8008ade:	4604      	mov	r4, r0
 8008ae0:	4608      	mov	r0, r1
 8008ae2:	602b      	str	r3, [r5, #0]
 8008ae4:	f7f9 fad6 	bl	8002094 <_sbrk>
 8008ae8:	1c43      	adds	r3, r0, #1
 8008aea:	d102      	bne.n	8008af2 <_sbrk_r+0x1a>
 8008aec:	682b      	ldr	r3, [r5, #0]
 8008aee:	b103      	cbz	r3, 8008af2 <_sbrk_r+0x1a>
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	bd38      	pop	{r3, r4, r5, pc}
 8008af4:	20004508 	.word	0x20004508

08008af8 <_realloc_r>:
 8008af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008afc:	4607      	mov	r7, r0
 8008afe:	4614      	mov	r4, r2
 8008b00:	460d      	mov	r5, r1
 8008b02:	b921      	cbnz	r1, 8008b0e <_realloc_r+0x16>
 8008b04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b08:	4611      	mov	r1, r2
 8008b0a:	f7ff bc5b 	b.w	80083c4 <_malloc_r>
 8008b0e:	b92a      	cbnz	r2, 8008b1c <_realloc_r+0x24>
 8008b10:	f7ff fbec 	bl	80082ec <_free_r>
 8008b14:	4625      	mov	r5, r4
 8008b16:	4628      	mov	r0, r5
 8008b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b1c:	f000 f81a 	bl	8008b54 <_malloc_usable_size_r>
 8008b20:	4284      	cmp	r4, r0
 8008b22:	4606      	mov	r6, r0
 8008b24:	d802      	bhi.n	8008b2c <_realloc_r+0x34>
 8008b26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b2a:	d8f4      	bhi.n	8008b16 <_realloc_r+0x1e>
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	4638      	mov	r0, r7
 8008b30:	f7ff fc48 	bl	80083c4 <_malloc_r>
 8008b34:	4680      	mov	r8, r0
 8008b36:	b908      	cbnz	r0, 8008b3c <_realloc_r+0x44>
 8008b38:	4645      	mov	r5, r8
 8008b3a:	e7ec      	b.n	8008b16 <_realloc_r+0x1e>
 8008b3c:	42b4      	cmp	r4, r6
 8008b3e:	4622      	mov	r2, r4
 8008b40:	4629      	mov	r1, r5
 8008b42:	bf28      	it	cs
 8008b44:	4632      	movcs	r2, r6
 8008b46:	f7ff fbc3 	bl	80082d0 <memcpy>
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	f7ff fbcd 	bl	80082ec <_free_r>
 8008b52:	e7f1      	b.n	8008b38 <_realloc_r+0x40>

08008b54 <_malloc_usable_size_r>:
 8008b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b58:	1f18      	subs	r0, r3, #4
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	bfbc      	itt	lt
 8008b5e:	580b      	ldrlt	r3, [r1, r0]
 8008b60:	18c0      	addlt	r0, r0, r3
 8008b62:	4770      	bx	lr

08008b64 <_init>:
 8008b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b66:	bf00      	nop
 8008b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b6a:	bc08      	pop	{r3}
 8008b6c:	469e      	mov	lr, r3
 8008b6e:	4770      	bx	lr

08008b70 <_fini>:
 8008b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b72:	bf00      	nop
 8008b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b76:	bc08      	pop	{r3}
 8008b78:	469e      	mov	lr, r3
 8008b7a:	4770      	bx	lr
