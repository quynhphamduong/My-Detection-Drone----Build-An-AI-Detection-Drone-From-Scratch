
rc_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000866c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  0800880c  0800880c  0000980c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089e0  080089e0  0000a110  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080089e0  080089e0  000099e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089e8  080089e8  0000a110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089e8  080089e8  000099e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089ec  080089ec  000099ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  080089f0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043b4  20000110  08008b00  0000a110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044c4  08008b00  0000a4c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001afcb  00000000  00000000  0000a140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040a6  00000000  00000000  0002510b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  000291b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001325  00000000  00000000  0002aa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1a6  00000000  00000000  0002bd95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d3ca  00000000  00000000  00046f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a61ea  00000000  00000000  00064305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a4ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cb0  00000000  00000000  0010a534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  001111e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000110 	.word	0x20000110
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080087f4 	.word	0x080087f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000114 	.word	0x20000114
 80001dc:	080087f4 	.word	0x080087f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	@ (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	@ 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	2000012c 	.word	0x2000012c
 80005ec:	200001cc 	.word	0x200001cc

080005f0 <render_menu>:
gpsSettingsValue gpsSettings;
uint8_t cursor = 0;
uint8_t buzzer_state = 0; // OFF

void render_menu(I2C_HandleTypeDef *hi2c)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    lcd_clear(hi2c);
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 fade 	bl	8000bba <lcd_clear>

    for (int i = 0; i < currentMenu->item_count; i++)
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	e049      	b.n	8000698 <render_menu+0xa8>
    {
        uint8_t line;
        if (currentMenu == &mainMenu)
 8000604:	4b36      	ldr	r3, [pc, #216]	@ (80006e0 <render_menu+0xf0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a36      	ldr	r2, [pc, #216]	@ (80006e4 <render_menu+0xf4>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d10b      	bne.n	8000626 <render_menu+0x36>
        {
            if (i == 0)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d102      	bne.n	800061a <render_menu+0x2a>
            {
                line = LINE3;
 8000614:	2394      	movs	r3, #148	@ 0x94
 8000616:	72fb      	strb	r3, [r7, #11]
 8000618:	e01c      	b.n	8000654 <render_menu+0x64>
            }
            else if (i == 1)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d119      	bne.n	8000654 <render_menu+0x64>
            {
                line = LINE4;
 8000620:	23d4      	movs	r3, #212	@ 0xd4
 8000622:	72fb      	strb	r3, [r7, #11]
 8000624:	e016      	b.n	8000654 <render_menu+0x64>
            }
        }
        else
        {
            if (i == 0)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d102      	bne.n	8000632 <render_menu+0x42>
            {
                line = LINE1;
 800062c:	2380      	movs	r3, #128	@ 0x80
 800062e:	72fb      	strb	r3, [r7, #11]
 8000630:	e010      	b.n	8000654 <render_menu+0x64>
            }
            else if (i == 1)
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d102      	bne.n	800063e <render_menu+0x4e>
            {
                line = LINE2;
 8000638:	23c0      	movs	r3, #192	@ 0xc0
 800063a:	72fb      	strb	r3, [r7, #11]
 800063c:	e00a      	b.n	8000654 <render_menu+0x64>
            }
            else if (i == 2)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b02      	cmp	r3, #2
 8000642:	d102      	bne.n	800064a <render_menu+0x5a>
            {
                line = LINE3;
 8000644:	2394      	movs	r3, #148	@ 0x94
 8000646:	72fb      	strb	r3, [r7, #11]
 8000648:	e004      	b.n	8000654 <render_menu+0x64>
            }
            else if (i == 3)
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	2b03      	cmp	r3, #3
 800064e:	d101      	bne.n	8000654 <render_menu+0x64>
            {
                line = LINE4;
 8000650:	23d4      	movs	r3, #212	@ 0xd4
 8000652:	72fb      	strb	r3, [r7, #11]
            }
        }

        if (i == cursor)
 8000654:	4b24      	ldr	r3, [pc, #144]	@ (80006e8 <render_menu+0xf8>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	4293      	cmp	r3, r2
 800065e:	d106      	bne.n	800066e <render_menu+0x7e>
        {
            lcd_send_string(hi2c, line, POS0, ">");
 8000660:	7af9      	ldrb	r1, [r7, #11]
 8000662:	4b22      	ldr	r3, [pc, #136]	@ (80006ec <render_menu+0xfc>)
 8000664:	2200      	movs	r2, #0
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f000 fa77 	bl	8000b5a <lcd_send_string>
 800066c:	e005      	b.n	800067a <render_menu+0x8a>
        }
        else
        {
            lcd_send_string(hi2c, line, POS0, " ");
 800066e:	7af9      	ldrb	r1, [r7, #11]
 8000670:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <render_menu+0x100>)
 8000672:	2200      	movs	r2, #0
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f000 fa70 	bl	8000b5a <lcd_send_string>
        }
        lcd_send_string(hi2c, line, POS2, (char *)currentMenu->items[i]);
 800067a:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <render_menu+0xf0>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	685a      	ldr	r2, [r3, #4]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	7af9      	ldrb	r1, [r7, #11]
 800068a:	2202      	movs	r2, #2
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f000 fa64 	bl	8000b5a <lcd_send_string>
    for (int i = 0; i < currentMenu->item_count; i++)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	3301      	adds	r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <render_menu+0xf0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	7a1b      	ldrb	r3, [r3, #8]
 800069e:	461a      	mov	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4293      	cmp	r3, r2
 80006a4:	dbae      	blt.n	8000604 <render_menu+0x14>
    }
    if (currentMenu == &mainMenu)
 80006a6:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <render_menu+0xf0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a0e      	ldr	r2, [pc, #56]	@ (80006e4 <render_menu+0xf4>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d113      	bne.n	80006d8 <render_menu+0xe8>
    {
        lcd_send_string(hi2c, LINE1, POS0, (char *)currentMenu->title);
 80006b0:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <render_menu+0xf0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2200      	movs	r2, #0
 80006b8:	2180      	movs	r1, #128	@ 0x80
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f000 fa4d 	bl	8000b5a <lcd_send_string>
        lcd_send_string(hi2c, LINE1, POS12, "TX:*****");
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <render_menu+0x104>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	2180      	movs	r1, #128	@ 0x80
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 fa47 	bl	8000b5a <lcd_send_string>
        lcd_send_string(hi2c, LINE2, POS12, "RX:*****");
 80006cc:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <render_menu+0x108>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	21c0      	movs	r1, #192	@ 0xc0
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f000 fa41 	bl	8000b5a <lcd_send_string>
    }
}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200003cc 	.word	0x200003cc
 80006e4:	2000001c 	.word	0x2000001c
 80006e8:	200003d0 	.word	0x200003d0
 80006ec:	08008880 	.word	0x08008880
 80006f0:	08008884 	.word	0x08008884
 80006f4:	08008888 	.word	0x08008888
 80006f8:	08008894 	.word	0x08008894

080006fc <menu_init>:

void menu_init(I2C_HandleTypeDef *hi2c)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
    currentMenu = &mainMenu;
 8000704:	4b04      	ldr	r3, [pc, #16]	@ (8000718 <menu_init+0x1c>)
 8000706:	4a05      	ldr	r2, [pc, #20]	@ (800071c <menu_init+0x20>)
 8000708:	601a      	str	r2, [r3, #0]
    render_menu(hi2c);
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ff70 	bl	80005f0 <render_menu>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200003cc 	.word	0x200003cc
 800071c:	2000001c 	.word	0x2000001c

08000720 <on_up>:

void on_up(I2C_HandleTypeDef *hi2c)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
    if (cursor > 0)
 8000728:	4b08      	ldr	r3, [pc, #32]	@ (800074c <on_up+0x2c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d005      	beq.n	800073c <on_up+0x1c>
        cursor--;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <on_up+0x2c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	3b01      	subs	r3, #1
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <on_up+0x2c>)
 800073a:	701a      	strb	r2, [r3, #0]
    render_menu(hi2c);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff ff57 	bl	80005f0 <render_menu>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200003d0 	.word	0x200003d0

08000750 <on_down>:

void on_down(I2C_HandleTypeDef *hi2c)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    if (cursor < currentMenu->item_count - 1)
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <on_down+0x34>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <on_down+0x38>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	7a1b      	ldrb	r3, [r3, #8]
 8000764:	3b01      	subs	r3, #1
 8000766:	429a      	cmp	r2, r3
 8000768:	da05      	bge.n	8000776 <on_down+0x26>
        cursor++;
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <on_down+0x34>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b04      	ldr	r3, [pc, #16]	@ (8000784 <on_down+0x34>)
 8000774:	701a      	strb	r2, [r3, #0]
    render_menu(hi2c);
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff ff3a 	bl	80005f0 <render_menu>
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200003d0 	.word	0x200003d0
 8000788:	200003cc 	.word	0x200003cc

0800078c <on_select>:

void on_select(I2C_HandleTypeDef *hi2c)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
    currentMenu->select_callback(hi2c, cursor);
 8000794:	4b05      	ldr	r3, [pc, #20]	@ (80007ac <on_select+0x20>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	4a05      	ldr	r2, [pc, #20]	@ (80007b0 <on_select+0x24>)
 800079c:	7812      	ldrb	r2, [r2, #0]
 800079e:	4611      	mov	r1, r2
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	4798      	blx	r3
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200003cc 	.word	0x200003cc
 80007b0:	200003d0 	.word	0x200003d0

080007b4 <on_back>:

void on_back(I2C_HandleTypeDef *hi2c)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
    if (currentMenu->back_link != NULL)
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <on_back+0x30>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	691b      	ldr	r3, [r3, #16]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00a      	beq.n	80007dc <on_back+0x28>
    {
        currentMenu = currentMenu->back_link;
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <on_back+0x30>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	4a05      	ldr	r2, [pc, #20]	@ (80007e4 <on_back+0x30>)
 80007ce:	6013      	str	r3, [r2, #0]
        cursor = 0;
 80007d0:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <on_back+0x34>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
        render_menu(hi2c);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff ff0a 	bl	80005f0 <render_menu>
    }
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200003cc 	.word	0x200003cc
 80007e8:	200003d0 	.word	0x200003d0

080007ec <mainMenuCallback>:

void mainMenuCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
    if (index == 0)
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d106      	bne.n	800080c <mainMenuCallback+0x20>
    {
        currentMenu = &menuMenu;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <mainMenuCallback+0x40>)
 8000800:	4a0b      	ldr	r2, [pc, #44]	@ (8000830 <mainMenuCallback+0x44>)
 8000802:	601a      	str	r2, [r3, #0]
        cursor = 0;
 8000804:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <mainMenuCallback+0x48>)
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]
 800080a:	e008      	b.n	800081e <mainMenuCallback+0x32>
    }
    else if (index == 1)
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d105      	bne.n	800081e <mainMenuCallback+0x32>
    {
        currentMenu = &settingsMenu;
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <mainMenuCallback+0x40>)
 8000814:	4a08      	ldr	r2, [pc, #32]	@ (8000838 <mainMenuCallback+0x4c>)
 8000816:	601a      	str	r2, [r3, #0]
        cursor = 0;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <mainMenuCallback+0x48>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
    }
    render_menu(hi2c);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff fee6 	bl	80005f0 <render_menu>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200003cc 	.word	0x200003cc
 8000830:	20000030 	.word	0x20000030
 8000834:	200003d0 	.word	0x200003d0
 8000838:	20000044 	.word	0x20000044

0800083c <menuCallback>:

void menuCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	70fb      	strb	r3, [r7, #3]
    if (index == 0)
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d10a      	bne.n	8000864 <menuCallback+0x28>
    {
        currentMenu = &flightStatusMenu;
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <menuCallback+0x4c>)
 8000850:	4a0e      	ldr	r2, [pc, #56]	@ (800088c <menuCallback+0x50>)
 8000852:	601a      	str	r2, [r3, #0]
        currentMenu->select_callback(hi2c, index);
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <menuCallback+0x4c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	78fa      	ldrb	r2, [r7, #3]
 800085c:	4611      	mov	r1, r2
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	4798      	blx	r3
    else if (index == 1)
    {
        currentMenu = &settingsMenu;
        currentMenu->select_callback(hi2c, index);
    }
}
 8000862:	e00c      	b.n	800087e <menuCallback+0x42>
    else if (index == 1)
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d109      	bne.n	800087e <menuCallback+0x42>
        currentMenu = &settingsMenu;
 800086a:	4b07      	ldr	r3, [pc, #28]	@ (8000888 <menuCallback+0x4c>)
 800086c:	4a08      	ldr	r2, [pc, #32]	@ (8000890 <menuCallback+0x54>)
 800086e:	601a      	str	r2, [r3, #0]
        currentMenu->select_callback(hi2c, index);
 8000870:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <menuCallback+0x4c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	68db      	ldr	r3, [r3, #12]
 8000876:	78fa      	ldrb	r2, [r7, #3]
 8000878:	4611      	mov	r1, r2
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	4798      	blx	r3
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200003cc 	.word	0x200003cc
 800088c:	2000006c 	.word	0x2000006c
 8000890:	20000044 	.word	0x20000044

08000894 <settingsCallback>:

void settingsCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]
    if (index == 0)
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d11d      	bne.n	80008e2 <settingsCallback+0x4e>
    {
        currentMenu = &buzzerMenu;
 80008a6:	4b17      	ldr	r3, [pc, #92]	@ (8000904 <settingsCallback+0x70>)
 80008a8:	4a17      	ldr	r2, [pc, #92]	@ (8000908 <settingsCallback+0x74>)
 80008aa:	601a      	str	r2, [r3, #0]
        cursor = 0;
 80008ac:	4b17      	ldr	r3, [pc, #92]	@ (800090c <settingsCallback+0x78>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
        if (buzzer_state == 0)
 80008b2:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <settingsCallback+0x7c>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d109      	bne.n	80008ce <settingsCallback+0x3a>
        {
            lcd_clear(hi2c);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f000 f97d 	bl	8000bba <lcd_clear>
            lcd_send_string(hi2c, LINE1, POS0, "OFF");
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <settingsCallback+0x80>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	2180      	movs	r1, #128	@ 0x80
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f000 f947 	bl	8000b5a <lcd_send_string>
    }
    else if (index==2)
    {

    }
}
 80008cc:	e015      	b.n	80008fa <settingsCallback+0x66>
            lcd_clear(hi2c);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f000 f973 	bl	8000bba <lcd_clear>
            lcd_send_string(hi2c, LINE1, POS0, "ON");
 80008d4:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <settingsCallback+0x84>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	2180      	movs	r1, #128	@ 0x80
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f93d 	bl	8000b5a <lcd_send_string>
}
 80008e0:	e00b      	b.n	80008fa <settingsCallback+0x66>
    else if (index == 1)
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d108      	bne.n	80008fa <settingsCallback+0x66>
        currentMenu = &gpsSettingsMenu;
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <settingsCallback+0x70>)
 80008ea:	4a0c      	ldr	r2, [pc, #48]	@ (800091c <settingsCallback+0x88>)
 80008ec:	601a      	str	r2, [r3, #0]
        cursor = 0;
 80008ee:	4b07      	ldr	r3, [pc, #28]	@ (800090c <settingsCallback+0x78>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
        render_menu(hi2c);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fe7b 	bl	80005f0 <render_menu>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200003cc 	.word	0x200003cc
 8000908:	20000058 	.word	0x20000058
 800090c:	200003d0 	.word	0x200003d0
 8000910:	200003d1 	.word	0x200003d1
 8000914:	080088a0 	.word	0x080088a0
 8000918:	080088a4 	.word	0x080088a4
 800091c:	20000080 	.word	0x20000080

08000920 <buzzerCallback>:


void buzzerCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	70fb      	strb	r3, [r7, #3]
    buzzer_state = buzzer_state ^ 1;
 800092c:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <buzzerCallback+0x50>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	f083 0301 	eor.w	r3, r3, #1
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <buzzerCallback+0x50>)
 8000938:	701a      	strb	r2, [r3, #0]
    if (buzzer_state == 0)
 800093a:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <buzzerCallback+0x50>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d109      	bne.n	8000956 <buzzerCallback+0x36>
    {
        lcd_clear(hi2c);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 f939 	bl	8000bba <lcd_clear>
        lcd_send_string(hi2c, LINE1, POS0, "OFF");
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <buzzerCallback+0x54>)
 800094a:	2200      	movs	r2, #0
 800094c:	2180      	movs	r1, #128	@ 0x80
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f000 f903 	bl	8000b5a <lcd_send_string>
    else
    {
        lcd_clear(hi2c);
        lcd_send_string(hi2c, LINE1, POS0, "ON");
    }
}
 8000954:	e008      	b.n	8000968 <buzzerCallback+0x48>
        lcd_clear(hi2c);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f000 f92f 	bl	8000bba <lcd_clear>
        lcd_send_string(hi2c, LINE1, POS0, "ON");
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <buzzerCallback+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	2180      	movs	r1, #128	@ 0x80
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 f8f9 	bl	8000b5a <lcd_send_string>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200003d1 	.word	0x200003d1
 8000974:	080088a0 	.word	0x080088a0
 8000978:	080088a4 	.word	0x080088a4

0800097c <flightStatusCallback>:

void flightStatusCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]
    lcd_clear(hi2c);
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f000 f916 	bl	8000bba <lcd_clear>
    lcd_send_string(hi2c, LINE1, POS0, "Roll:");
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <flightStatusCallback+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	2180      	movs	r1, #128	@ 0x80
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f000 f8e0 	bl	8000b5a <lcd_send_string>
    lcd_send_string(hi2c, LINE2, POS0, "Pitch:");
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <flightStatusCallback+0x50>)
 800099c:	2200      	movs	r2, #0
 800099e:	21c0      	movs	r1, #192	@ 0xc0
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 f8da 	bl	8000b5a <lcd_send_string>
    lcd_send_string(hi2c, LINE3, POS0, "Yaw:");
 80009a6:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <flightStatusCallback+0x54>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	2194      	movs	r1, #148	@ 0x94
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f000 f8d4 	bl	8000b5a <lcd_send_string>
    lcd_send_string(hi2c, LINE3, POS0, "Altitude:");
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <flightStatusCallback+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	2194      	movs	r1, #148	@ 0x94
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f000 f8ce 	bl	8000b5a <lcd_send_string>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	080088a8 	.word	0x080088a8
 80009cc:	080088b0 	.word	0x080088b0
 80009d0:	080088b8 	.word	0x080088b8
 80009d4:	080088c0 	.word	0x080088c0

080009d8 <gpsSettingsCallback>:
    lcd_send_string(hi2c, LINE1, POS0, "Longtitude:");
    lcd_send_string(hi2c, LINE2, POS0, "Latitude:");
}

void gpsSettingsCallback(I2C_HandleTypeDef *hi2c, uint8_t index)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	70fb      	strb	r3, [r7, #3]
    lcd_clear(hi2c);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f000 f8e8 	bl	8000bba <lcd_clear>
    lcd_send_string(hi2c, LINE1, POS0, "Longtitude:");
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <gpsSettingsCallback+0x34>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	2180      	movs	r1, #128	@ 0x80
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f000 f8b2 	bl	8000b5a <lcd_send_string>
    lcd_send_string(hi2c, LINE2, POS0, "Latitude:");
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <gpsSettingsCallback+0x38>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	21c0      	movs	r1, #192	@ 0xc0
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 f8ac 	bl	8000b5a <lcd_send_string>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	0800885c 	.word	0x0800885c
 8000a10:	080088cc 	.word	0x080088cc

08000a14 <lcd_init>:

/*
 * @brief This is init function, only use it in super loop
 */
void lcd_init(I2C_HandleTypeDef *hi2c)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	// 4 bit initialisation
	HAL_Delay(50); // wait for >40ms
 8000a1c:	2032      	movs	r0, #50	@ 0x32
 8000a1e:	f001 fc1d 	bl	800225c <HAL_Delay>
	lcd_send_cmd(hi2c, 0x30);
 8000a22:	2130      	movs	r1, #48	@ 0x30
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f000 f83c 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(5); // wait for >4.1ms
 8000a2a:	2005      	movs	r0, #5
 8000a2c:	f001 fc16 	bl	800225c <HAL_Delay>
	lcd_send_cmd(hi2c, 0x30);
 8000a30:	2130      	movs	r1, #48	@ 0x30
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f000 f835 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(1); // wait for >100us
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f001 fc0f 	bl	800225c <HAL_Delay>
	lcd_send_cmd(hi2c, 0x30);
 8000a3e:	2130      	movs	r1, #48	@ 0x30
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f000 f82e 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(10);
 8000a46:	200a      	movs	r0, #10
 8000a48:	f001 fc08 	bl	800225c <HAL_Delay>
	lcd_send_cmd(hi2c, 0x20); // 4bit mode
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f000 f827 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(10);
 8000a54:	200a      	movs	r0, #10
 8000a56:	f001 fc01 	bl	800225c <HAL_Delay>

	// dislay initialisation
	lcd_send_cmd(hi2c, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000a5a:	2128      	movs	r1, #40	@ 0x28
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f000 f820 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(1);
 8000a62:	2001      	movs	r0, #1
 8000a64:	f001 fbfa 	bl	800225c <HAL_Delay>
	lcd_send_cmd(hi2c, 0x08); // Display on/off control --> D=0,C=0, B=0  ---> display off
 8000a68:	2108      	movs	r1, #8
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f000 f819 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(1);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f001 fbf3 	bl	800225c <HAL_Delay>
	lcd_send_cmd(hi2c, 0x01); // clear display
 8000a76:	2101      	movs	r1, #1
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f000 f812 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(2);
 8000a7e:	2002      	movs	r0, #2
 8000a80:	f001 fbec 	bl	800225c <HAL_Delay>
	lcd_send_cmd(hi2c, 0x06); // Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000a84:	2106      	movs	r1, #6
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f000 f80b 	bl	8000aa2 <lcd_send_cmd>
	HAL_Delay(1);
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f001 fbe5 	bl	800225c <HAL_Delay>
	lcd_send_cmd(hi2c, 0x0C); // Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000a92:	210c      	movs	r1, #12
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f000 f804 	bl	8000aa2 <lcd_send_cmd>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <lcd_send_cmd>:

void lcd_send_cmd(I2C_HandleTypeDef *hi2c, char cmd)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af02      	add	r7, sp, #8
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000aae:	78fb      	ldrb	r3, [r7, #3]
 8000ab0:	f023 030f 	bic.w	r3, r3, #15
 8000ab4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8000ab6:	78fb      	ldrb	r3, [r7, #3]
 8000ab8:	011b      	lsls	r3, r3, #4
 8000aba:	73bb      	strb	r3, [r7, #14]
	//rs = 0 : send cmd
	data_t[0] = data_u | 0x0C; // en=1, rs=0 -> send 4 bit high, enable
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	f043 030c 	orr.w	r3, r3, #12
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08; // en=0, rs=0 -> unenable
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C; // en=1, rs=0 -> send 4 bit low, enable
 8000ad0:	7bbb      	ldrb	r3, [r7, #14]
 8000ad2:	f043 030c 	orr.w	r3, r3, #12
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08; // en=0, rs=0 ->
 8000ada:	7bbb      	ldrb	r3, [r7, #14]
 8000adc:	f043 0308 	orr.w	r3, r3, #8
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000ae4:	f107 0208 	add.w	r2, r7, #8
 8000ae8:	2364      	movs	r3, #100	@ 0x64
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2304      	movs	r3, #4
 8000aee:	214e      	movs	r1, #78	@ 0x4e
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f002 fe6f 	bl	80037d4 <HAL_I2C_Master_Transmit>
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <lcd_send_data>:

void lcd_send_data(I2C_HandleTypeDef *hi2c, unsigned char data)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af02      	add	r7, sp, #8
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	460b      	mov	r3, r1
 8000b08:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8000b0a:	78fb      	ldrb	r3, [r7, #3]
 8000b0c:	f023 030f 	bic.w	r3, r3, #15
 8000b10:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8000b12:	78fb      	ldrb	r3, [r7, #3]
 8000b14:	011b      	lsls	r3, r3, #4
 8000b16:	73bb      	strb	r3, [r7, #14]
	//rs = 1 : send data
	data_t[0] = data_u | 0x0D; // en=1, rs=1
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	f043 030d 	orr.w	r3, r3, #13
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09; // en=0, rs=1
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	f043 0309 	orr.w	r3, r3, #9
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D; // en=1, rs=1
 8000b2c:	7bbb      	ldrb	r3, [r7, #14]
 8000b2e:	f043 030d 	orr.w	r3, r3, #13
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09; // en=0, rs=1
 8000b36:	7bbb      	ldrb	r3, [r7, #14]
 8000b38:	f043 0309 	orr.w	r3, r3, #9
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000b40:	f107 0208 	add.w	r2, r7, #8
 8000b44:	2364      	movs	r3, #100	@ 0x64
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2304      	movs	r3, #4
 8000b4a:	214e      	movs	r1, #78	@ 0x4e
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f002 fe41 	bl	80037d4 <HAL_I2C_Master_Transmit>
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <lcd_send_string>:

void lcd_send_string(I2C_HandleTypeDef *hi2c, char line, char pos, char *str)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	72fb      	strb	r3, [r7, #11]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	72bb      	strb	r3, [r7, #10]
	uint16_t length = (uint16_t)strlen(str);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff fb37 	bl	80001e0 <strlen>
 8000b72:	4603      	mov	r3, r0
 8000b74:	827b      	strh	r3, [r7, #18]
	lcd_send_cmd(hi2c, line + pos);
 8000b76:	7afa      	ldrb	r2, [r7, #11]
 8000b78:	7abb      	ldrb	r3, [r7, #10]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4619      	mov	r1, r3
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f7ff ff8e 	bl	8000aa2 <lcd_send_cmd>

	#if USING_RTOS == 0
	HAL_Delay(1);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f001 fb68 	bl	800225c <HAL_Delay>
	#else
	vTaskDelay(pdMS_TO_TICKS(1));
	#endif

	for (int i = 0; i < length; i++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	e00a      	b.n	8000ba8 <lcd_send_string+0x4e>
	{
		lcd_send_data(hi2c, *(str + i));
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	4413      	add	r3, r2
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f7ff ffae 	bl	8000afe <lcd_send_data>
	for (int i = 0; i < length; i++)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	8a7b      	ldrh	r3, [r7, #18]
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dbf0      	blt.n	8000b92 <lcd_send_string+0x38>
	}
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <lcd_clear>:
		lcd_send_data(hi2c, *(str + i));
	}
}

void lcd_clear(I2C_HandleTypeDef *hi2c)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
	lcd_send_cmd(hi2c,0x01);
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ff6c 	bl	8000aa2 <lcd_send_cmd>
	for (int i = 0; i < 80; i++)
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	e006      	b.n	8000bde <lcd_clear+0x24>
	{
		lcd_send_data(hi2c,' ');
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff ff93 	bl	8000afe <lcd_send_data>
	for (int i = 0; i < 80; i++)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	2b4f      	cmp	r3, #79	@ 0x4f
 8000be2:	ddf5      	ble.n	8000bd0 <lcd_clear+0x16>
	}
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  switch (GPIO_Pin)
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c04:	d02a      	beq.n	8000c5c <HAL_GPIO_EXTI_Callback+0x6c>
 8000c06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c0a:	dc30      	bgt.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
 8000c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c10:	d009      	beq.n	8000c26 <HAL_GPIO_EXTI_Callback+0x36>
 8000c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c16:	dc2a      	bgt.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
 8000c18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c1c:	d015      	beq.n	8000c4a <HAL_GPIO_EXTI_Callback+0x5a>
 8000c1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c22:	d009      	beq.n	8000c38 <HAL_GPIO_EXTI_Callback+0x48>
 8000c24:	e023      	b.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
  {
  case UP_Pin:
	  //UP_Pin_flag=1;
	  xSemaphoreGiveFromISR(xUpSem, &xHigherPriorityTaskWoken);
 8000c26:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <HAL_GPIO_EXTI_Callback+0x9c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f107 020c 	add.w	r2, r7, #12
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f005 f8ed 	bl	8005e10 <xQueueGiveFromISR>
    break;
 8000c36:	e01a      	b.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
  case DOWN_Pin:
	  //DOWN_Pin_flag=1;
	  xSemaphoreGiveFromISR(xDownSem, &xHigherPriorityTaskWoken);
 8000c38:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f107 020c 	add.w	r2, r7, #12
 8000c40:	4611      	mov	r1, r2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f005 f8e4 	bl	8005e10 <xQueueGiveFromISR>
    break;
 8000c48:	e011      	b.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
  case SELECT_Pin:
	  //SELECT_Pin_flag=1;
	  xSemaphoreGiveFromISR(xSelectSem, &xHigherPriorityTaskWoken);
 8000c4a:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f107 020c 	add.w	r2, r7, #12
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f005 f8db 	bl	8005e10 <xQueueGiveFromISR>
    break;
 8000c5a:	e008      	b.n	8000c6e <HAL_GPIO_EXTI_Callback+0x7e>
  case BACK_Pin:
	  //BACK_Pin_flag=1;
	  xSemaphoreGiveFromISR(xBackSem, &xHigherPriorityTaskWoken);
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f107 020c 	add.w	r2, r7, #12
 8000c64:	4611      	mov	r1, r2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f005 f8d2 	bl	8005e10 <xQueueGiveFromISR>
    break;
 8000c6c:	bf00      	nop
  }
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d007      	beq.n	8000c84 <HAL_GPIO_EXTI_Callback+0x94>
 8000c74:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <HAL_GPIO_EXTI_Callback+0xac>)
 8000c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	f3bf 8f4f 	dsb	sy
 8000c80:	f3bf 8f6f 	isb	sy
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000584 	.word	0x20000584
 8000c90:	20000588 	.word	0x20000588
 8000c94:	2000058c 	.word	0x2000058c
 8000c98:	20000590 	.word	0x20000590
 8000c9c:	e000ed04 	.word	0xe000ed04

08000ca0 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce4 <HAL_ADC_ConvCpltCallback+0x44>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d114      	bne.n	8000cdc <HAL_ADC_ConvCpltCallback+0x3c>
        // Notify a FreeRTOS task
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
        vTaskNotifyGiveFromISR(ADC_Handle, &xHigherPriorityTaskWoken);
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <HAL_ADC_ConvCpltCallback+0x48>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f107 020c 	add.w	r2, r7, #12
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f006 fb59 	bl	8007378 <vTaskNotifyGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d007      	beq.n	8000cdc <HAL_ADC_ConvCpltCallback+0x3c>
 8000ccc:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <HAL_ADC_ConvCpltCallback+0x4c>)
 8000cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	f3bf 8f4f 	dsb	sy
 8000cd8:	f3bf 8f6f 	isb	sy
    }
}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40012000 	.word	0x40012000
 8000ce8:	2000057c 	.word	0x2000057c
 8000cec:	e000ed04 	.word	0xe000ed04

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b5b0      	push	{r4, r5, r7, lr}
 8000cf2:	b08a      	sub	sp, #40	@ 0x28
 8000cf4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf6:	f001 fa6f 	bl	80021d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfa:	f000 f8a3 	bl	8000e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfe:	f000 f9df 	bl	80010c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d02:	f000 f9bd 	bl	8001080 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d06:	f000 f957 	bl	8000fb8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d0a:	f000 f983 	bl	8001014 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000d0e:	f000 f901 	bl	8000f14 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(&hi2c1);
 8000d12:	4839      	ldr	r0, [pc, #228]	@ (8000df8 <main+0x108>)
 8000d14:	f7ff fe7e 	bl	8000a14 <lcd_init>
  menu_init(&hi2c1);
 8000d18:	4837      	ldr	r0, [pc, #220]	@ (8000df8 <main+0x108>)
 8000d1a:	f7ff fcef 	bl	80006fc <menu_init>
  Two_Way_Commuination_Pipe0_Config(&nrf1, 0xC5C5C5C5C5, 0xA2A2A2A2A2);
 8000d1e:	f04f 32a2 	mov.w	r2, #2728567458	@ 0xa2a2a2a2
 8000d22:	f04f 03a2 	mov.w	r3, #162	@ 0xa2
 8000d26:	e9cd 2300 	strd	r2, r3, [sp]
 8000d2a:	f04f 32c5 	mov.w	r2, #3318072773	@ 0xc5c5c5c5
 8000d2e:	f04f 03c5 	mov.w	r3, #197	@ 0xc5
 8000d32:	4832      	ldr	r0, [pc, #200]	@ (8000dfc <main+0x10c>)
 8000d34:	f000 fd07 	bl	8001746 <Two_Way_Commuination_Pipe0_Config>

  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
     xUpSem     = xSemaphoreCreateBinary();
 8000d38:	2203      	movs	r2, #3
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f004 ff0b 	bl	8005b58 <xQueueGenericCreate>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a2e      	ldr	r2, [pc, #184]	@ (8000e00 <main+0x110>)
 8000d46:	6013      	str	r3, [r2, #0]
     xDownSem   = xSemaphoreCreateBinary();
 8000d48:	2203      	movs	r2, #3
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f004 ff03 	bl	8005b58 <xQueueGenericCreate>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4a2b      	ldr	r2, [pc, #172]	@ (8000e04 <main+0x114>)
 8000d56:	6013      	str	r3, [r2, #0]
     xSelectSem = xSemaphoreCreateBinary();
 8000d58:	2203      	movs	r2, #3
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f004 fefb 	bl	8005b58 <xQueueGenericCreate>
 8000d62:	4603      	mov	r3, r0
 8000d64:	4a28      	ldr	r2, [pc, #160]	@ (8000e08 <main+0x118>)
 8000d66:	6013      	str	r3, [r2, #0]
     xBackSem   = xSemaphoreCreateBinary();
 8000d68:	2203      	movs	r2, #3
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f004 fef3 	bl	8005b58 <xQueueGenericCreate>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4a25      	ldr	r2, [pc, #148]	@ (8000e0c <main+0x11c>)
 8000d76:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000d78:	4b25      	ldr	r3, [pc, #148]	@ (8000e10 <main+0x120>)
 8000d7a:	1d3c      	adds	r4, r7, #4
 8000d7c:	461d      	mov	r5, r3
 8000d7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f004 fd63 	bl	800585a <osThreadCreate>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4a1f      	ldr	r2, [pc, #124]	@ (8000e14 <main+0x124>)
 8000d98:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(LCD_Task, "LCD", 256, NULL, 0, &LCD_Handle);
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e18 <main+0x128>)
 8000d9c:	9301      	str	r3, [sp, #4]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2300      	movs	r3, #0
 8000da4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000da8:	491c      	ldr	r1, [pc, #112]	@ (8000e1c <main+0x12c>)
 8000daa:	481d      	ldr	r0, [pc, #116]	@ (8000e20 <main+0x130>)
 8000dac:	f005 fb32 	bl	8006414 <xTaskCreate>
  xTaskCreate(NRF_Task, "NRF", 256, NULL, 0, &NRF_Handle);
 8000db0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e24 <main+0x134>)
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	2300      	movs	r3, #0
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2300      	movs	r3, #0
 8000dba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dbe:	491a      	ldr	r1, [pc, #104]	@ (8000e28 <main+0x138>)
 8000dc0:	481a      	ldr	r0, [pc, #104]	@ (8000e2c <main+0x13c>)
 8000dc2:	f005 fb27 	bl	8006414 <xTaskCreate>
  xTaskCreate(Button_Task, "BTN", 256, NULL, 1, NULL);
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	2301      	movs	r3, #1
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dd4:	4916      	ldr	r1, [pc, #88]	@ (8000e30 <main+0x140>)
 8000dd6:	4817      	ldr	r0, [pc, #92]	@ (8000e34 <main+0x144>)
 8000dd8:	f005 fb1c 	bl	8006414 <xTaskCreate>
  xTaskCreate(ADC_Task, "ADC", 128, NULL, 2, &ADC_Handle);
 8000ddc:	4b16      	ldr	r3, [pc, #88]	@ (8000e38 <main+0x148>)
 8000dde:	9301      	str	r3, [sp, #4]
 8000de0:	2302      	movs	r3, #2
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2300      	movs	r3, #0
 8000de6:	2280      	movs	r2, #128	@ 0x80
 8000de8:	4914      	ldr	r1, [pc, #80]	@ (8000e3c <main+0x14c>)
 8000dea:	4815      	ldr	r0, [pc, #84]	@ (8000e40 <main+0x150>)
 8000dec:	f005 fb12 	bl	8006414 <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000df0:	f004 fd2c 	bl	800584c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <main+0x104>
 8000df8:	20000484 	.word	0x20000484
 8000dfc:	20000094 	.word	0x20000094
 8000e00:	20000584 	.word	0x20000584
 8000e04:	20000588 	.word	0x20000588
 8000e08:	2000058c 	.word	0x2000058c
 8000e0c:	20000590 	.word	0x20000590
 8000e10:	080088f4 	.word	0x080088f4
 8000e14:	20000530 	.word	0x20000530
 8000e18:	20000574 	.word	0x20000574
 8000e1c:	080088d8 	.word	0x080088d8
 8000e20:	08001265 	.word	0x08001265
 8000e24:	20000578 	.word	0x20000578
 8000e28:	080088dc 	.word	0x080088dc
 8000e2c:	08001221 	.word	0x08001221
 8000e30:	080088e0 	.word	0x080088e0
 8000e34:	08001275 	.word	0x08001275
 8000e38:	2000057c 	.word	0x2000057c
 8000e3c:	080088e4 	.word	0x080088e4
 8000e40:	08001301 	.word	0x08001301

08000e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b094      	sub	sp, #80	@ 0x50
 8000e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4a:	f107 0320 	add.w	r3, r7, #32
 8000e4e:	2230      	movs	r2, #48	@ 0x30
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f006 fff2 	bl	8007e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	4b27      	ldr	r3, [pc, #156]	@ (8000f0c <SystemClock_Config+0xc8>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e70:	4a26      	ldr	r2, [pc, #152]	@ (8000f0c <SystemClock_Config+0xc8>)
 8000e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e78:	4b24      	ldr	r3, [pc, #144]	@ (8000f0c <SystemClock_Config+0xc8>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e84:	2300      	movs	r3, #0
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	4b21      	ldr	r3, [pc, #132]	@ (8000f10 <SystemClock_Config+0xcc>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a20      	ldr	r2, [pc, #128]	@ (8000f10 <SystemClock_Config+0xcc>)
 8000e8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	4b1e      	ldr	r3, [pc, #120]	@ (8000f10 <SystemClock_Config+0xcc>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000eb4:	2319      	movs	r3, #25
 8000eb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000eb8:	23a8      	movs	r3, #168	@ 0xa8
 8000eba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec4:	f107 0320 	add.w	r3, r7, #32
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f002 ffdd 	bl	8003e88 <HAL_RCC_OscConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ed4:	f000 fa62 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed8:	230f      	movs	r3, #15
 8000eda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000edc:	2302      	movs	r3, #2
 8000ede:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ee4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	2102      	movs	r1, #2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f003 fa3f 	bl	8004378 <HAL_RCC_ClockConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f00:	f000 fa4c 	bl	800139c <Error_Handler>
  }
}
 8000f04:	bf00      	nop
 8000f06:	3750      	adds	r7, #80	@ 0x50
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40007000 	.word	0x40007000

08000f14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f26:	4b21      	ldr	r3, [pc, #132]	@ (8000fac <MX_ADC1_Init+0x98>)
 8000f28:	4a21      	ldr	r2, [pc, #132]	@ (8000fb0 <MX_ADC1_Init+0x9c>)
 8000f2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <MX_ADC1_Init+0x98>)
 8000f2e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f32:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	@ (8000fac <MX_ADC1_Init+0x98>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <MX_ADC1_Init+0x98>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <MX_ADC1_Init+0x98>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f46:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <MX_ADC1_Init+0x98>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <MX_ADC1_Init+0x98>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f54:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <MX_ADC1_Init+0x98>)
 8000f56:	4a17      	ldr	r2, [pc, #92]	@ (8000fb4 <MX_ADC1_Init+0xa0>)
 8000f58:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f5a:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <MX_ADC1_Init+0x98>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <MX_ADC1_Init+0x98>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <MX_ADC1_Init+0x98>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <MX_ADC1_Init+0x98>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f74:	480d      	ldr	r0, [pc, #52]	@ (8000fac <MX_ADC1_Init+0x98>)
 8000f76:	f001 f995 	bl	80022a4 <HAL_ADC_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f80:	f000 fa0c 	bl	800139c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f90:	463b      	mov	r3, r7
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	@ (8000fac <MX_ADC1_Init+0x98>)
 8000f96:	f001 faed 	bl	8002574 <HAL_ADC_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fa0:	f000 f9fc 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200003dc 	.word	0x200003dc
 8000fb0:	40012000 	.word	0x40012000
 8000fb4:	0f000001 	.word	0x0f000001

08000fb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <MX_I2C1_Init+0x50>)
 8000fbe:	4a13      	ldr	r2, [pc, #76]	@ (800100c <MX_I2C1_Init+0x54>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <MX_I2C1_Init+0x50>)
 8000fc4:	4a12      	ldr	r2, [pc, #72]	@ (8001010 <MX_I2C1_Init+0x58>)
 8000fc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <MX_I2C1_Init+0x50>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <MX_I2C1_Init+0x50>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <MX_I2C1_Init+0x50>)
 8000fd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <MX_I2C1_Init+0x50>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe2:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <MX_I2C1_Init+0x50>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe8:	4b07      	ldr	r3, [pc, #28]	@ (8001008 <MX_I2C1_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fee:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <MX_I2C1_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	@ (8001008 <MX_I2C1_Init+0x50>)
 8000ff6:	f002 faa9 	bl	800354c <HAL_I2C_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001000:	f000 f9cc 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000484 	.word	0x20000484
 800100c:	40005400 	.word	0x40005400
 8001010:	000186a0 	.word	0x000186a0

08001014 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001018:	4b17      	ldr	r3, [pc, #92]	@ (8001078 <MX_SPI1_Init+0x64>)
 800101a:	4a18      	ldr	r2, [pc, #96]	@ (800107c <MX_SPI1_Init+0x68>)
 800101c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800101e:	4b16      	ldr	r3, [pc, #88]	@ (8001078 <MX_SPI1_Init+0x64>)
 8001020:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001024:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001026:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <MX_SPI1_Init+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <MX_SPI1_Init+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001032:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <MX_SPI1_Init+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001038:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <MX_SPI1_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <MX_SPI1_Init+0x64>)
 8001040:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001044:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <MX_SPI1_Init+0x64>)
 8001048:	2210      	movs	r2, #16
 800104a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800104c:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <MX_SPI1_Init+0x64>)
 800104e:	2200      	movs	r2, #0
 8001050:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <MX_SPI1_Init+0x64>)
 8001054:	2200      	movs	r2, #0
 8001056:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001058:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <MX_SPI1_Init+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <MX_SPI1_Init+0x64>)
 8001060:	220a      	movs	r2, #10
 8001062:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	@ (8001078 <MX_SPI1_Init+0x64>)
 8001066:	f003 fb99 	bl	800479c <HAL_SPI_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001070:	f000 f994 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200004d8 	.word	0x200004d8
 800107c:	40013000 	.word	0x40013000

08001080 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <MX_DMA_Init+0x3c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a0b      	ldr	r2, [pc, #44]	@ (80010bc <MX_DMA_Init+0x3c>)
 8001090:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <MX_DMA_Init+0x3c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2105      	movs	r1, #5
 80010a6:	2038      	movs	r0, #56	@ 0x38
 80010a8:	f001 fd54 	bl	8002b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010ac:	2038      	movs	r0, #56	@ 0x38
 80010ae:	f001 fd6d 	bl	8002b8c <HAL_NVIC_EnableIRQ>

}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800

080010c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	@ 0x28
 80010c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b4d      	ldr	r3, [pc, #308]	@ (8001210 <MX_GPIO_Init+0x150>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a4c      	ldr	r2, [pc, #304]	@ (8001210 <MX_GPIO_Init+0x150>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001210 <MX_GPIO_Init+0x150>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b46      	ldr	r3, [pc, #280]	@ (8001210 <MX_GPIO_Init+0x150>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	4a45      	ldr	r2, [pc, #276]	@ (8001210 <MX_GPIO_Init+0x150>)
 80010fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001100:	6313      	str	r3, [r2, #48]	@ 0x30
 8001102:	4b43      	ldr	r3, [pc, #268]	@ (8001210 <MX_GPIO_Init+0x150>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	4b3f      	ldr	r3, [pc, #252]	@ (8001210 <MX_GPIO_Init+0x150>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a3e      	ldr	r2, [pc, #248]	@ (8001210 <MX_GPIO_Init+0x150>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b3c      	ldr	r3, [pc, #240]	@ (8001210 <MX_GPIO_Init+0x150>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	4b38      	ldr	r3, [pc, #224]	@ (8001210 <MX_GPIO_Init+0x150>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a37      	ldr	r2, [pc, #220]	@ (8001210 <MX_GPIO_Init+0x150>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b35      	ldr	r3, [pc, #212]	@ (8001210 <MX_GPIO_Init+0x150>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800114c:	4831      	ldr	r0, [pc, #196]	@ (8001214 <MX_GPIO_Init+0x154>)
 800114e:	f002 f9b1 	bl	80034b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|CE_Pin, GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	2103      	movs	r1, #3
 8001156:	4830      	ldr	r0, [pc, #192]	@ (8001218 <MX_GPIO_Init+0x158>)
 8001158:	f002 f9ac 	bl	80034b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800115c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001162:	2301      	movs	r3, #1
 8001164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	4827      	ldr	r0, [pc, #156]	@ (8001214 <MX_GPIO_Init+0x154>)
 8001176:	f002 f801 	bl	800317c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin CE_Pin */
  GPIO_InitStruct.Pin = CS_Pin|CE_Pin;
 800117a:	2303      	movs	r3, #3
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117e:	2301      	movs	r3, #1
 8001180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4821      	ldr	r0, [pc, #132]	@ (8001218 <MX_GPIO_Init+0x158>)
 8001192:	f001 fff3 	bl	800317c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8001196:	2304      	movs	r3, #4
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	481b      	ldr	r0, [pc, #108]	@ (8001218 <MX_GPIO_Init+0x158>)
 80011aa:	f001 ffe7 	bl	800317c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 BACK_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|BACK_Pin;
 80011ae:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80011b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4814      	ldr	r0, [pc, #80]	@ (8001218 <MX_GPIO_Init+0x158>)
 80011c6:	f001 ffd9 	bl	800317c <HAL_GPIO_Init>

  /*Configure GPIO pins : SELECT_Pin DOWN_Pin UP_Pin HOME_Pin */
  GPIO_InitStruct.Pin = SELECT_Pin|DOWN_Pin|UP_Pin|HOME_Pin;
 80011ca:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80011ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	480e      	ldr	r0, [pc, #56]	@ (800121c <MX_GPIO_Init+0x15c>)
 80011e2:	f001 ffcb 	bl	800317c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2105      	movs	r1, #5
 80011ea:	2017      	movs	r0, #23
 80011ec:	f001 fcb2 	bl	8002b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011f0:	2017      	movs	r0, #23
 80011f2:	f001 fccb 	bl	8002b8c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2105      	movs	r1, #5
 80011fa:	2028      	movs	r0, #40	@ 0x28
 80011fc:	f001 fcaa 	bl	8002b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001200:	2028      	movs	r0, #40	@ 0x28
 8001202:	f001 fcc3 	bl	8002b8c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	@ 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40020800 	.word	0x40020800
 8001218:	40020400 	.word	0x40020400
 800121c:	40020000 	.word	0x40020000

08001220 <NRF_Task>:

/* USER CODE BEGIN 4 */
void NRF_Task(void *argument)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	//char cmdBuf[64];
	uint16_t i = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	81fb      	strh	r3, [r7, #14]
	while(1)
	{
		sprintf(spi_tx,"WHATISTHISSHIET %d",i);
 800122c:	89fb      	ldrh	r3, [r7, #14]
 800122e:	461a      	mov	r2, r3
 8001230:	4908      	ldr	r1, [pc, #32]	@ (8001254 <NRF_Task+0x34>)
 8001232:	4809      	ldr	r0, [pc, #36]	@ (8001258 <NRF_Task+0x38>)
 8001234:	f006 fde0 	bl	8007df8 <siprintf>
		Two_Way_Commuination_RTOS(&nrf1, spi_tx, spi_rx);
 8001238:	4a08      	ldr	r2, [pc, #32]	@ (800125c <NRF_Task+0x3c>)
 800123a:	4907      	ldr	r1, [pc, #28]	@ (8001258 <NRF_Task+0x38>)
 800123c:	4808      	ldr	r0, [pc, #32]	@ (8001260 <NRF_Task+0x40>)
 800123e:	f000 fa64 	bl	800170a <Two_Way_Commuination_RTOS>
		vTaskDelay(pdMS_TO_TICKS(10));
 8001242:	200a      	movs	r0, #10
 8001244:	f005 fa36 	bl	80066b4 <vTaskDelay>
		i++;
 8001248:	89fb      	ldrh	r3, [r7, #14]
 800124a:	3301      	adds	r3, #1
 800124c:	81fb      	strh	r3, [r7, #14]
		sprintf(spi_tx,"WHATISTHISSHIET %d",i);
 800124e:	bf00      	nop
 8001250:	e7ec      	b.n	800122c <NRF_Task+0xc>
 8001252:	bf00      	nop
 8001254:	08008910 	.word	0x08008910
 8001258:	20000534 	.word	0x20000534
 800125c:	20000554 	.word	0x20000554
 8001260:	20000094 	.word	0x20000094

08001264 <LCD_Task>:
		}*/
	}
}

void LCD_Task(void *argument)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		vTaskDelay(pdMS_TO_TICKS(1));
 800126c:	2001      	movs	r0, #1
 800126e:	f005 fa21 	bl	80066b4 <vTaskDelay>
 8001272:	e7fb      	b.n	800126c <LCD_Task+0x8>

08001274 <Button_Task>:
	}
}

void Button_Task(void *argument)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
	         if(xSemaphoreTake(xUpSem, 0) == pdTRUE)
 800127c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ec <Button_Task+0x78>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f004 fe54 	bl	8005f30 <xQueueSemaphoreTake>
 8001288:	4603      	mov	r3, r0
 800128a:	2b01      	cmp	r3, #1
 800128c:	d103      	bne.n	8001296 <Button_Task+0x22>
		  	  {
		  		  on_up(&hi2c1);
 800128e:	4818      	ldr	r0, [pc, #96]	@ (80012f0 <Button_Task+0x7c>)
 8001290:	f7ff fa46 	bl	8000720 <on_up>
 8001294:	e025      	b.n	80012e2 <Button_Task+0x6e>
		  	  }
		  	  else if(xSemaphoreTake(xDownSem, 0) == pdTRUE)
 8001296:	4b17      	ldr	r3, [pc, #92]	@ (80012f4 <Button_Task+0x80>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f004 fe47 	bl	8005f30 <xQueueSemaphoreTake>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d103      	bne.n	80012b0 <Button_Task+0x3c>
		  	  {
		  		  on_down(&hi2c1);
 80012a8:	4811      	ldr	r0, [pc, #68]	@ (80012f0 <Button_Task+0x7c>)
 80012aa:	f7ff fa51 	bl	8000750 <on_down>
 80012ae:	e018      	b.n	80012e2 <Button_Task+0x6e>
		  	  }
		  	  else if(xSemaphoreTake(xBackSem, 0) == pdTRUE)
 80012b0:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <Button_Task+0x84>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f004 fe3a 	bl	8005f30 <xQueueSemaphoreTake>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d103      	bne.n	80012ca <Button_Task+0x56>
		  	  {
		  		  on_back(&hi2c1);
 80012c2:	480b      	ldr	r0, [pc, #44]	@ (80012f0 <Button_Task+0x7c>)
 80012c4:	f7ff fa76 	bl	80007b4 <on_back>
 80012c8:	e00b      	b.n	80012e2 <Button_Task+0x6e>
		  	  }
		  	  else if(xSemaphoreTake(xSelectSem, 0) == pdTRUE)
 80012ca:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <Button_Task+0x88>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f004 fe2d 	bl	8005f30 <xQueueSemaphoreTake>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d102      	bne.n	80012e2 <Button_Task+0x6e>
		  	  {
		  		  on_select(&hi2c1);
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <Button_Task+0x7c>)
 80012de:	f7ff fa55 	bl	800078c <on_select>
		  	  }
	         vTaskDelay(pdMS_TO_TICKS(20)); // debounce
 80012e2:	2014      	movs	r0, #20
 80012e4:	f005 f9e6 	bl	80066b4 <vTaskDelay>
	         if(xSemaphoreTake(xUpSem, 0) == pdTRUE)
 80012e8:	e7c8      	b.n	800127c <Button_Task+0x8>
 80012ea:	bf00      	nop
 80012ec:	20000584 	.word	0x20000584
 80012f0:	20000484 	.word	0x20000484
 80012f4:	20000588 	.word	0x20000588
 80012f8:	20000590 	.word	0x20000590
 80012fc:	2000058c 	.word	0x2000058c

08001300 <ADC_Task>:
	}
}
void ADC_Task(void *pvParameters)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
    for (;;) {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);  // Wait for DMA complete
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	2001      	movs	r0, #1
 800130e:	f005 ffe7 	bl	80072e0 <ulTaskNotifyTake>
        RC_Input_t input;

        // Use adc_buffer[] safely here
        input.throttle = adc_buffer[0];
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <ADC_Task+0x4c>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	81bb      	strh	r3, [r7, #12]
        input.yaw      = adc_buffer[1];
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <ADC_Task+0x4c>)
 800131a:	885b      	ldrh	r3, [r3, #2]
 800131c:	81fb      	strh	r3, [r7, #14]
        input.pitch    = adc_buffer[2];
 800131e:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <ADC_Task+0x4c>)
 8001320:	889b      	ldrh	r3, [r3, #4]
 8001322:	823b      	strh	r3, [r7, #16]
        input.roll     = adc_buffer[3];
 8001324:	4b09      	ldr	r3, [pc, #36]	@ (800134c <ADC_Task+0x4c>)
 8001326:	88db      	ldrh	r3, [r3, #6]
 8001328:	827b      	strh	r3, [r7, #18]


        //rccommand_process(&input);
        const char *cmdStr = rccommand_process(&input);
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fb68 	bl	8001a04 <rccommand_process>
 8001334:	6178      	str	r0, [r7, #20]
        if (cmdStr != NULL)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0e5      	beq.n	8001308 <ADC_Task+0x8>
        {
          // Gửi chuỗi vào queue
             xQueueOverwrite(commandQueue, cmdStr);
 800133c:	4b04      	ldr	r3, [pc, #16]	@ (8001350 <ADC_Task+0x50>)
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	2302      	movs	r3, #2
 8001342:	2200      	movs	r2, #0
 8001344:	6979      	ldr	r1, [r7, #20]
 8001346:	f004 fc61 	bl	8005c0c <xQueueGenericSend>
    for (;;) {
 800134a:	e7dd      	b.n	8001308 <ADC_Task+0x8>
 800134c:	200003d4 	.word	0x200003d4
 8001350:	20000580 	.word	0x20000580

08001354 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800135c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001360:	4804      	ldr	r0, [pc, #16]	@ (8001374 <StartDefaultTask+0x20>)
 8001362:	f002 f8c0 	bl	80034e6 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8001366:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800136a:	f004 fac2 	bl	80058f2 <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800136e:	bf00      	nop
 8001370:	e7f4      	b.n	800135c <StartDefaultTask+0x8>
 8001372:	bf00      	nop
 8001374:	40020800 	.word	0x40020800

08001378 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a04      	ldr	r2, [pc, #16]	@ (8001398 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800138a:	f000 ff47 	bl	800221c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40010000 	.word	0x40010000

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <Error_Handler+0x8>

080013a8 <Chip_Select>:

#include "nRF24L01.h"
#include "main.h"

void Chip_Select(NRF_HandleTypeDef *nrf)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CS_GPIO, nrf->CS_PIN, 0);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6818      	ldr	r0, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	899b      	ldrh	r3, [r3, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	4619      	mov	r1, r3
 80013bc:	f002 f87a 	bl	80034b4 <HAL_GPIO_WritePin>
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <Chip_Deselect>:

void Chip_Deselect(NRF_HandleTypeDef *nrf)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CS_GPIO, nrf->CS_PIN, 1);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6818      	ldr	r0, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	899b      	ldrh	r3, [r3, #12]
 80013d8:	2201      	movs	r2, #1
 80013da:	4619      	mov	r1, r3
 80013dc:	f002 f86a 	bl	80034b4 <HAL_GPIO_WritePin>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <Set_CE_High>:

void Set_CE_High(NRF_HandleTypeDef *nrf)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CE_GPIO, nrf->CE_PIN, 1);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6858      	ldr	r0, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	89db      	ldrh	r3, [r3, #14]
 80013f8:	2201      	movs	r2, #1
 80013fa:	4619      	mov	r1, r3
 80013fc:	f002 f85a 	bl	80034b4 <HAL_GPIO_WritePin>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <Set_CE_Low>:

void Set_CE_Low(NRF_HandleTypeDef *nrf)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CE_GPIO, nrf->CE_PIN, 0);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6858      	ldr	r0, [r3, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	89db      	ldrh	r3, [r3, #14]
 8001418:	2200      	movs	r2, #0
 800141a:	4619      	mov	r1, r3
 800141c:	f002 f84a 	bl	80034b4 <HAL_GPIO_WritePin>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <WaitForIRQ>:

void WaitForIRQ(NRF_HandleTypeDef *nrf)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	while (HAL_GPIO_ReadPin(nrf->IRQ_GPIO, nrf->IRQ_PIN) == 1)
 8001430:	bf00      	nop
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	8a1b      	ldrh	r3, [r3, #16]
 800143a:	4619      	mov	r1, r3
 800143c:	4610      	mov	r0, r2
 800143e:	f002 f821 	bl	8003484 <HAL_GPIO_ReadPin>
 8001442:	4603      	mov	r3, r0
 8001444:	2b01      	cmp	r3, #1
 8001446:	d0f4      	beq.n	8001432 <WaitForIRQ+0xa>
		;
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <nRF_WriteRegister>:

void nRF_WriteRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t *data, int size)
{
 8001452:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001456:	b089      	sub	sp, #36	@ 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	460b      	mov	r3, r1
 8001462:	72fb      	strb	r3, [r7, #11]
 8001464:	466b      	mov	r3, sp
 8001466:	461e      	mov	r6, r3
	uint8_t buff[size + 1];
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	1c59      	adds	r1, r3, #1
 800146c:	1e4b      	subs	r3, r1, #1
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	460a      	mov	r2, r1
 8001472:	2300      	movs	r3, #0
 8001474:	4690      	mov	r8, r2
 8001476:	4699      	mov	r9, r3
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001484:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001488:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800148c:	460a      	mov	r2, r1
 800148e:	2300      	movs	r3, #0
 8001490:	4614      	mov	r4, r2
 8001492:	461d      	mov	r5, r3
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	00eb      	lsls	r3, r5, #3
 800149e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014a2:	00e2      	lsls	r2, r4, #3
 80014a4:	460b      	mov	r3, r1
 80014a6:	3307      	adds	r3, #7
 80014a8:	08db      	lsrs	r3, r3, #3
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	ebad 0d03 	sub.w	sp, sp, r3
 80014b0:	466b      	mov	r3, sp
 80014b2:	3300      	adds	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
	buff[0] = reg | (1 << 5);
 80014b6:	7afb      	ldrb	r3, [r7, #11]
 80014b8:	f043 0320 	orr.w	r3, r3, #32
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
 80014c6:	e00a      	b.n	80014de <nRF_WriteRegister+0x8c>
	{
		buff[i + 1] = data[i];
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	441a      	add	r2, r3
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3301      	adds	r3, #1
 80014d2:	7811      	ldrb	r1, [r2, #0]
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < size; i++)
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	3301      	adds	r3, #1
 80014dc:	61fb      	str	r3, [r7, #28]
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dbf0      	blt.n	80014c8 <nRF_WriteRegister+0x76>
	}
	Chip_Select(nrf);
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff ff5e 	bl	80013a8 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, buff, (uint16_t)size + 1, NRF_SPI_TIMEOUT);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6958      	ldr	r0, [r3, #20]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	3301      	adds	r3, #1
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	2364      	movs	r3, #100	@ 0x64
 80014fa:	6979      	ldr	r1, [r7, #20]
 80014fc:	f003 f9d7 	bl	80048ae <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f7ff ff61 	bl	80013c8 <Chip_Deselect>
 8001506:	46b5      	mov	sp, r6
}
 8001508:	bf00      	nop
 800150a:	3724      	adds	r7, #36	@ 0x24
 800150c:	46bd      	mov	sp, r7
 800150e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001512 <nRF_WriteOneRegister>:

void nRF_WriteOneRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t data)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	460b      	mov	r3, r1
 800151c:	70fb      	strb	r3, [r7, #3]
 800151e:	4613      	mov	r3, r2
 8001520:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2];
	buff[0] = reg | (1 << 5);
 8001522:	78fb      	ldrb	r3, [r7, #3]
 8001524:	f043 0320 	orr.w	r3, r3, #32
 8001528:	b2db      	uxtb	r3, r3
 800152a:	733b      	strb	r3, [r7, #12]
	buff[1] = data;
 800152c:	78bb      	ldrb	r3, [r7, #2]
 800152e:	737b      	strb	r3, [r7, #13]
	Chip_Select(nrf);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ff39 	bl	80013a8 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, buff, 2, NRF_SPI_TIMEOUT);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6958      	ldr	r0, [r3, #20]
 800153a:	f107 010c 	add.w	r1, r7, #12
 800153e:	2364      	movs	r3, #100	@ 0x64
 8001540:	2202      	movs	r2, #2
 8001542:	f003 f9b4 	bl	80048ae <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ff3e 	bl	80013c8 <Chip_Deselect>
}
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <nRF_ReadOneRegister>:
	HAL_SPI_Receive(nrf->hspi, receive_data, size, NRF_SPI_TIMEOUT * 10);
	Chip_Deselect(nrf);
}

void nRF_ReadOneRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t *receive_data)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	460b      	mov	r3, r1
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	72fb      	strb	r3, [r7, #11]

	uint8_t buff = reg;
 8001562:	7afb      	ldrb	r3, [r7, #11]
 8001564:	75fb      	strb	r3, [r7, #23]
	Chip_Select(nrf);
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f7ff ff1e 	bl	80013a8 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6958      	ldr	r0, [r3, #20]
 8001570:	f107 0117 	add.w	r1, r7, #23
 8001574:	2364      	movs	r3, #100	@ 0x64
 8001576:	2201      	movs	r2, #1
 8001578:	f003 f999 	bl	80048ae <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->hspi, receive_data, 1, NRF_SPI_TIMEOUT);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6958      	ldr	r0, [r3, #20]
 8001580:	2364      	movs	r3, #100	@ 0x64
 8001582:	2201      	movs	r2, #1
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	f003 fad6 	bl	8004b36 <HAL_SPI_Receive>
	Chip_Deselect(nrf);
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f7ff ff1c 	bl	80013c8 <Chip_Deselect>
}
 8001590:	bf00      	nop
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <nRF_SendCmd>:
void nRF_SendCmd(NRF_HandleTypeDef *nrf, uint8_t cmd)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	70fb      	strb	r3, [r7, #3]

	uint8_t buff = cmd;
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	73fb      	strb	r3, [r7, #15]
	Chip_Select(nrf);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff fefd 	bl	80013a8 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6958      	ldr	r0, [r3, #20]
 80015b2:	f107 010f 	add.w	r1, r7, #15
 80015b6:	2364      	movs	r3, #100	@ 0x64
 80015b8:	2201      	movs	r2, #1
 80015ba:	f003 f978 	bl	80048ae <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ff02 	bl	80013c8 <Chip_Deselect>
}
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <nRF_GetStatus>:

uint8_t nRF_GetStatus(NRF_HandleTypeDef *nrf)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

	uint8_t buff = STATUS;
 80015d4:	2307      	movs	r3, #7
 80015d6:	73fb      	strb	r3, [r7, #15]
	uint8_t rx_data = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	73bb      	strb	r3, [r7, #14]
	Chip_Select(nrf);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fee3 	bl	80013a8 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6958      	ldr	r0, [r3, #20]
 80015e6:	f107 010f 	add.w	r1, r7, #15
 80015ea:	2364      	movs	r3, #100	@ 0x64
 80015ec:	2201      	movs	r2, #1
 80015ee:	f003 f95e 	bl	80048ae <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->hspi, &rx_data, 1, NRF_SPI_TIMEOUT * 10);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6958      	ldr	r0, [r3, #20]
 80015f6:	f107 010e 	add.w	r1, r7, #14
 80015fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015fe:	2201      	movs	r2, #1
 8001600:	f003 fa99 	bl	8004b36 <HAL_SPI_Receive>
	Chip_Deselect(nrf);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fedf 	bl	80013c8 <Chip_Deselect>
	return rx_data;
 800160a:	7bbb      	ldrb	r3, [r7, #14]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <nRF_TX_Payload>:

void nRF_TX_Payload(NRF_HandleTypeDef *nrf, uint8_t *data, uint16_t size)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	4613      	mov	r3, r2
 8001620:	80fb      	strh	r3, [r7, #6]
	Chip_Select(nrf);
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f7ff fec0 	bl	80013a8 <Chip_Select>
	uint8_t buff = W_TX_PAYLOAD;
 8001628:	23a0      	movs	r3, #160	@ 0xa0
 800162a:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6958      	ldr	r0, [r3, #20]
 8001630:	f107 0117 	add.w	r1, r7, #23
 8001634:	2364      	movs	r3, #100	@ 0x64
 8001636:	2201      	movs	r2, #1
 8001638:	f003 f939 	bl	80048ae <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf->hspi, data, size, NRF_SPI_TIMEOUT);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6958      	ldr	r0, [r3, #20]
 8001640:	88fa      	ldrh	r2, [r7, #6]
 8001642:	2364      	movs	r3, #100	@ 0x64
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	f003 f932 	bl	80048ae <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f7ff febc 	bl	80013c8 <Chip_Deselect>
}
 8001650:	bf00      	nop
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <nRF_RX_Payload>:

void nRF_RX_Payload(NRF_HandleTypeDef *nrf, uint8_t *rx_data, uint16_t size)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	4613      	mov	r3, r2
 8001664:	80fb      	strh	r3, [r7, #6]
	Chip_Select(nrf);
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f7ff fe9e 	bl	80013a8 <Chip_Select>
	uint8_t buff = R_RX_PAYLOAD;
 800166c:	2361      	movs	r3, #97	@ 0x61
 800166e:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6958      	ldr	r0, [r3, #20]
 8001674:	f107 0117 	add.w	r1, r7, #23
 8001678:	2364      	movs	r3, #100	@ 0x64
 800167a:	2201      	movs	r2, #1
 800167c:	f003 f917 	bl	80048ae <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->hspi, rx_data, size, NRF_SPI_TIMEOUT * 10);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6958      	ldr	r0, [r3, #20]
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800168a:	68b9      	ldr	r1, [r7, #8]
 800168c:	f003 fa53 	bl	8004b36 <HAL_SPI_Receive>
	Chip_Deselect(nrf);
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f7ff fe99 	bl	80013c8 <Chip_Deselect>
}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <Select_Tx_Mode_RTOS>:
	vTaskDelay(pdMS_TO_TICKS(2));
	nrf->nrfmode = MODE_TX;
}

void Select_Tx_Mode_RTOS(NRF_HandleTypeDef *nrf)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
	uint8_t buff = 0x0a;
 80016a6:	230a      	movs	r3, #10
 80016a8:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low(nrf);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff feac 	bl	8001408 <Set_CE_Low>
	CONFIG_REG_Write(nrf, buff);
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	4619      	mov	r1, r3
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 f8ec 	bl	8001892 <CONFIG_REG_Write>
	Set_CE_High(nrf);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fe94 	bl	80013e8 <Set_CE_High>
	vTaskDelay(pdMS_TO_TICKS(2));
 80016c0:	2002      	movs	r0, #2
 80016c2:	f004 fff7 	bl	80066b4 <vTaskDelay>
	nrf->nrfmode = MODE_TX;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	761a      	strb	r2, [r3, #24]
}
 80016cc:	bf00      	nop
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <Select_Rx_Mode_RTOS>:
	nRF_SendCmd(nrf, FLUSH_RX);
	nrf->nrfmode = MODE_RX;
}

void Select_Rx_Mode_RTOS(NRF_HandleTypeDef *nrf)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	uint8_t buff = 0x0b;
 80016dc:	230b      	movs	r3, #11
 80016de:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low(nrf);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff fe91 	bl	8001408 <Set_CE_Low>
	CONFIG_REG_Write(nrf, buff);
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	4619      	mov	r1, r3
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f8d1 	bl	8001892 <CONFIG_REG_Write>
	Set_CE_High(nrf);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fe79 	bl	80013e8 <Set_CE_High>
	vTaskDelay(pdMS_TO_TICKS(2));
 80016f6:	2002      	movs	r0, #2
 80016f8:	f004 ffdc 	bl	80066b4 <vTaskDelay>
	nrf->nrfmode = MODE_RX;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	761a      	strb	r2, [r3, #24]
}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <Two_Way_Commuination_RTOS>:

void Two_Way_Commuination_RTOS(NRF_HandleTypeDef *nrf,uint8_t *tx_data,uint8_t *rx_data)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b084      	sub	sp, #16
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
	TX_Communication(nrf,tx_data);
 8001716:	68b9      	ldr	r1, [r7, #8]
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 f849 	bl	80017b0 <TX_Communication>
	Select_Rx_Mode_RTOS(nrf);
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f7ff ffd8 	bl	80016d4 <Select_Rx_Mode_RTOS>
	vTaskDelay(pdMS_TO_TICKS(50));
 8001724:	2032      	movs	r0, #50	@ 0x32
 8001726:	f004 ffc5 	bl	80066b4 <vTaskDelay>
	RX_Communication(nrf,rx_data);
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 f883 	bl	8001838 <RX_Communication>
	Select_Tx_Mode_RTOS(nrf);
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f7ff ffb3 	bl	800169e <Select_Tx_Mode_RTOS>
	vTaskDelay(pdMS_TO_TICKS(10));
 8001738:	200a      	movs	r0, #10
 800173a:	f004 ffbb 	bl	80066b4 <vTaskDelay>
}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <Two_Way_Commuination_Pipe0_Config>:

#endif

void Two_Way_Commuination_Pipe0_Config(NRF_HandleTypeDef *nrf, uint64_t tx_addr, uint64_t rx_addr)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	60f8      	str	r0, [r7, #12]
 800174e:	e9c7 2300 	strd	r2, r3, [r7]
	Set_CE_Low(nrf);
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f7ff fe58 	bl	8001408 <Set_CE_Low>
	RX_PW_P_NUM_Number_Of_Bytes(nrf, 0, 32);
 8001758:	2220      	movs	r2, #32
 800175a:	2100      	movs	r1, #0
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f000 f919 	bl	8001994 <RX_PW_P_NUM_Number_Of_Bytes>
	TX_ADDR_Write(nrf, tx_addr);
 8001762:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 f8e1 	bl	800192e <TX_ADDR_Write>
	RX_ADDR_P0_Write(nrf, rx_addr);
 800176c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 f8aa 	bl	80018ca <RX_ADDR_P0_Write>
	nRF_WriteOneRegister(nrf, EN_RXADDR, 1);
 8001776:	2201      	movs	r2, #1
 8001778:	2102      	movs	r1, #2
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f7ff fec9 	bl	8001512 <nRF_WriteOneRegister>
	nRF_WriteOneRegister(nrf, EN_AA, 0x00);
 8001780:	2200      	movs	r2, #0
 8001782:	2101      	movs	r1, #1
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f7ff fec4 	bl	8001512 <nRF_WriteOneRegister>
	nRF_WriteOneRegister(nrf, RF_SETUP, 0x7);
 800178a:	2207      	movs	r2, #7
 800178c:	2106      	movs	r1, #6
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f7ff febf 	bl	8001512 <nRF_WriteOneRegister>
	CONFIG_REG_Write(nrf, 0xa);
 8001794:	210a      	movs	r1, #10
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 f87b 	bl	8001892 <CONFIG_REG_Write>
	Set_CE_High(nrf);
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f7ff fe23 	bl	80013e8 <Set_CE_High>
	HAL_Delay(2);
 80017a2:	2002      	movs	r0, #2
 80017a4:	f000 fd5a 	bl	800225c <HAL_Delay>
}
 80017a8:	bf00      	nop
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <TX_Communication>:
	Set_CE_High(nrf);
	HAL_Delay(2);
}

uint8_t TX_Communication(NRF_HandleTypeDef *nrf, uint8_t *data)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
	if (nrf->nrfmode == MODE_TX)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7e1b      	ldrb	r3, [r3, #24]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d135      	bne.n	800182e <TX_Communication+0x7e>
	{
		nRF_TX_Payload(nrf, data, 32);
 80017c2:	2220      	movs	r2, #32
 80017c4:	6839      	ldr	r1, [r7, #0]
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ff24 	bl	8001614 <nRF_TX_Payload>
		Set_CE_High(nrf);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff fe0b 	bl	80013e8 <Set_CE_High>
		WaitForIRQ(nrf);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fe28 	bl	8001428 <WaitForIRQ>
		nRF_SendCmd(nrf, FLUSH_TX);
 80017d8:	21e1      	movs	r1, #225	@ 0xe1
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff fedc 	bl	8001598 <nRF_SendCmd>
		uint8_t status = nRF_GetStatus(nrf);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff fef3 	bl	80015cc <nRF_GetStatus>
 80017e6:	4603      	mov	r3, r0
 80017e8:	73fb      	strb	r3, [r7, #15]
		if ((status & (1 << MAX_RT)) != 0)
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00b      	beq.n	800180c <TX_Communication+0x5c>
		{
			status |= ((1 << MAX_RT) | (1 << TX_FULL));
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	f043 0311 	orr.w	r3, r3, #17
 80017fa:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(nrf, STATUS, status);
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	461a      	mov	r2, r3
 8001800:	2107      	movs	r1, #7
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff fe85 	bl	8001512 <nRF_WriteOneRegister>
			return STATUS_TX_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e011      	b.n	8001830 <TX_Communication+0x80>
		}
		else if ((status & (1 << 5)) != 0)
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	f003 0320 	and.w	r3, r3, #32
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00b      	beq.n	800182e <TX_Communication+0x7e>
		{
			status |= ((1 << TX_DS) | (1 << TX_FULL));
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 800181c:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(nrf, STATUS, status);
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	461a      	mov	r2, r3
 8001822:	2107      	movs	r1, #7
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff fe74 	bl	8001512 <nRF_WriteOneRegister>
			return STATUS_TX_OK;
 800182a:	2302      	movs	r3, #2
 800182c:	e000      	b.n	8001830 <TX_Communication+0x80>
		}
	}
	return STATUS_TX_NONDEFINE;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <RX_Communication>:

uint8_t RX_Communication(NRF_HandleTypeDef *nrf, uint8_t *rx_data)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
	if (nrf->nrfmode == MODE_RX)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	7e1b      	ldrb	r3, [r3, #24]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d11e      	bne.n	8001888 <RX_Communication+0x50>
	{
		Set_CE_High(nrf);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff fdcc 	bl	80013e8 <Set_CE_High>
		uint8_t status = nRF_GetStatus(nrf);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff febb 	bl	80015cc <nRF_GetStatus>
 8001856:	4603      	mov	r3, r0
 8001858:	73fb      	strb	r3, [r7, #15]
		if ((status & (1 << RX_DR)) != 0)
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00b      	beq.n	800187c <RX_Communication+0x44>
		{
			nRF_WriteOneRegister(nrf, STATUS, (1 << 6));
 8001864:	2240      	movs	r2, #64	@ 0x40
 8001866:	2107      	movs	r1, #7
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff fe52 	bl	8001512 <nRF_WriteOneRegister>
			nRF_RX_Payload(nrf, rx_data, 32);
 800186e:	2220      	movs	r2, #32
 8001870:	6839      	ldr	r1, [r7, #0]
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fef0 	bl	8001658 <nRF_RX_Payload>
			return STATUS_RX_OK;
 8001878:	2302      	movs	r3, #2
 800187a:	e006      	b.n	800188a <RX_Communication+0x52>
		}
		nRF_SendCmd(nrf, FLUSH_RX);
 800187c:	21e2      	movs	r1, #226	@ 0xe2
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fe8a 	bl	8001598 <nRF_SendCmd>
		return STATUS_RX_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <RX_Communication+0x52>
	}
	return STATUS_RX_NONEDEFINE;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <CONFIG_REG_Write>:
}



void CONFIG_REG_Write(NRF_HandleTypeDef *nrf, uint8_t data)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	70fb      	strb	r3, [r7, #3]
	uint8_t read_reg;
	do
	{
		nRF_WriteOneRegister(nrf, CONFIG, data);
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	461a      	mov	r2, r3
 80018a2:	2100      	movs	r1, #0
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff fe34 	bl	8001512 <nRF_WriteOneRegister>
		nRF_ReadOneRegister(nrf, CONFIG, &read_reg);
 80018aa:	f107 030f 	add.w	r3, r7, #15
 80018ae:	461a      	mov	r2, r3
 80018b0:	2100      	movs	r1, #0
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fe4e 	bl	8001554 <nRF_ReadOneRegister>
	} while (read_reg != data);
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	78fa      	ldrb	r2, [r7, #3]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d1ee      	bne.n	800189e <CONFIG_REG_Write+0xc>
}
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <RX_ADDR_P0_Write>:
{
	nRF_WriteOneRegister(nrf, EN_AA, pipe & 0x3F);
}

void RX_ADDR_P0_Write(NRF_HandleTypeDef *nrf, uint64_t data)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b08a      	sub	sp, #40	@ 0x28
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t buff[5];
	uint64_t temp = data;
 80018d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018da:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	e016      	b.n	8001912 <RX_ADDR_P0_Write+0x48>
	{
		buff[i] = (uint8_t)((temp) & 0xff);
 80018e4:	f897 1020 	ldrb.w	r1, [r7, #32]
 80018e8:	f107 0214 	add.w	r2, r7, #20
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	4413      	add	r3, r2
 80018f0:	460a      	mov	r2, r1
 80018f2:	701a      	strb	r2, [r3, #0]
		temp = temp >> 8;
 80018f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	0a02      	lsrs	r2, r0, #8
 8001902:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001906:	0a0b      	lsrs	r3, r1, #8
 8001908:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	3301      	adds	r3, #1
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	2b04      	cmp	r3, #4
 8001916:	dde5      	ble.n	80018e4 <RX_ADDR_P0_Write+0x1a>
	}
	nRF_WriteRegister(nrf, RX_ADDR_P0, buff, 5);
 8001918:	f107 0214 	add.w	r2, r7, #20
 800191c:	2305      	movs	r3, #5
 800191e:	210a      	movs	r1, #10
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f7ff fd96 	bl	8001452 <nRF_WriteRegister>
}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	@ 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <TX_ADDR_Write>:
	}
	nRF_WriteOneRegister(nrf, reg, data);
}

void TX_ADDR_Write(NRF_HandleTypeDef *nrf, uint64_t data)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b08a      	sub	sp, #40	@ 0x28
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t buff[5];
	uint64_t temp = data;
 800193a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800193e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	e016      	b.n	8001976 <TX_ADDR_Write+0x48>
	{
		buff[i] = (uint8_t)((temp) & 0xff);
 8001948:	f897 1020 	ldrb.w	r1, [r7, #32]
 800194c:	f107 0214 	add.w	r2, r7, #20
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	4413      	add	r3, r2
 8001954:	460a      	mov	r2, r1
 8001956:	701a      	strb	r2, [r3, #0]
		temp = temp >> 8;
 8001958:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	0a02      	lsrs	r2, r0, #8
 8001966:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800196a:	0a0b      	lsrs	r3, r1, #8
 800196c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	3301      	adds	r3, #1
 8001974:	61fb      	str	r3, [r7, #28]
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	2b04      	cmp	r3, #4
 800197a:	dde5      	ble.n	8001948 <TX_ADDR_Write+0x1a>
	}
	nRF_WriteRegister(nrf, TX_ADDR, buff, 5);
 800197c:	f107 0214 	add.w	r2, r7, #20
 8001980:	2305      	movs	r3, #5
 8001982:	2110      	movs	r1, #16
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f7ff fd64 	bl	8001452 <nRF_WriteRegister>
}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	@ 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <RX_PW_P_NUM_Number_Of_Bytes>:

void RX_PW_P_NUM_Number_Of_Bytes(NRF_HandleTypeDef *nrf, int num, uint8_t data)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	4613      	mov	r3, r2
 80019a0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	switch (num)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2b05      	cmp	r3, #5
 80019a6:	d828      	bhi.n	80019fa <RX_PW_P_NUM_Number_Of_Bytes+0x66>
 80019a8:	a201      	add	r2, pc, #4	@ (adr r2, 80019b0 <RX_PW_P_NUM_Number_Of_Bytes+0x1c>)
 80019aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ae:	bf00      	nop
 80019b0:	080019c9 	.word	0x080019c9
 80019b4:	080019cf 	.word	0x080019cf
 80019b8:	080019d5 	.word	0x080019d5
 80019bc:	080019db 	.word	0x080019db
 80019c0:	080019e1 	.word	0x080019e1
 80019c4:	080019e7 	.word	0x080019e7
	{
	case 0:
		reg = RX_PW_P0;
 80019c8:	2311      	movs	r3, #17
 80019ca:	75fb      	strb	r3, [r7, #23]
		break;
 80019cc:	e00e      	b.n	80019ec <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 1:
		reg = RX_PW_P1;
 80019ce:	2312      	movs	r3, #18
 80019d0:	75fb      	strb	r3, [r7, #23]
		break;
 80019d2:	e00b      	b.n	80019ec <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 2:
		reg = RX_PW_P2;
 80019d4:	2313      	movs	r3, #19
 80019d6:	75fb      	strb	r3, [r7, #23]
		break;
 80019d8:	e008      	b.n	80019ec <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 3:
		reg = RX_PW_P3;
 80019da:	2314      	movs	r3, #20
 80019dc:	75fb      	strb	r3, [r7, #23]
		break;
 80019de:	e005      	b.n	80019ec <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 4:
		reg = RX_PW_P4;
 80019e0:	2315      	movs	r3, #21
 80019e2:	75fb      	strb	r3, [r7, #23]
		break;
 80019e4:	e002      	b.n	80019ec <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 5:
		reg = RX_PW_P5;
 80019e6:	2316      	movs	r3, #22
 80019e8:	75fb      	strb	r3, [r7, #23]
		break;
 80019ea:	bf00      	nop
	default:
		return;
	}
	nRF_WriteOneRegister(nrf, reg, data);
 80019ec:	79fa      	ldrb	r2, [r7, #7]
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
 80019f0:	4619      	mov	r1, r3
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f7ff fd8d 	bl	8001512 <nRF_WriteOneRegister>
 80019f8:	e000      	b.n	80019fc <RX_PW_P_NUM_Number_Of_Bytes+0x68>
		return;
 80019fa:	bf00      	nop
}
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop

08001a04 <rccommand_process>:
{
    lastCmd = RC_CMD_NONE;
}

const char* rccommand_process(const RC_Input_t *input)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
    RC_Command_t cmd = RC_CMD_NONE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]

    // Throttle (UP/DOWN)
    if (input->throttle > CENTER + THRESHOLD)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	f640 122c 	movw	r2, #2348	@ 0x92c
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d904      	bls.n	8001a26 <rccommand_process+0x22>
        cmd |= RC_CMD_UP;
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	e009      	b.n	8001a3a <rccommand_process+0x36>
    else if (input->throttle < CENTER - THRESHOLD)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	f240 62d3 	movw	r2, #1747	@ 0x6d3
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d803      	bhi.n	8001a3a <rccommand_process+0x36>
        cmd |= RC_CMD_DOWN;
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	73fb      	strb	r3, [r7, #15]

    // Yaw (rotate)
    if (input->yaw > CENTER + THRESHOLD)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	885b      	ldrh	r3, [r3, #2]
 8001a3e:	f640 122c 	movw	r2, #2348	@ 0x92c
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d904      	bls.n	8001a50 <rccommand_process+0x4c>
        cmd |= RC_CMD_YAW_RIGHT;
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a4c:	73fb      	strb	r3, [r7, #15]
 8001a4e:	e009      	b.n	8001a64 <rccommand_process+0x60>
    else if (input->yaw < CENTER - THRESHOLD)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	885b      	ldrh	r3, [r3, #2]
 8001a54:	f240 62d3 	movw	r2, #1747	@ 0x6d3
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d803      	bhi.n	8001a64 <rccommand_process+0x60>
        cmd |= RC_CMD_YAW_LEFT;
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a62:	73fb      	strb	r3, [r7, #15]

    // Pitch (FORWARD/BACKWARD)
    if (input->pitch > CENTER + THRESHOLD)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	889b      	ldrh	r3, [r3, #4]
 8001a68:	f640 122c 	movw	r2, #2348	@ 0x92c
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d904      	bls.n	8001a7a <rccommand_process+0x76>
        cmd |= RC_CMD_FORWARD;
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	f043 0310 	orr.w	r3, r3, #16
 8001a76:	73fb      	strb	r3, [r7, #15]
 8001a78:	e009      	b.n	8001a8e <rccommand_process+0x8a>
    else if (input->pitch < CENTER - THRESHOLD)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	889b      	ldrh	r3, [r3, #4]
 8001a7e:	f240 62d3 	movw	r2, #1747	@ 0x6d3
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d803      	bhi.n	8001a8e <rccommand_process+0x8a>
        cmd |= RC_CMD_BACKWARD;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	f043 0320 	orr.w	r3, r3, #32
 8001a8c:	73fb      	strb	r3, [r7, #15]

    // Roll (LEFT/RIGHT)
    if (input->roll > CENTER + THRESHOLD)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	88db      	ldrh	r3, [r3, #6]
 8001a92:	f640 122c 	movw	r2, #2348	@ 0x92c
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d904      	bls.n	8001aa4 <rccommand_process+0xa0>
        cmd |= RC_CMD_RIGHT;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	f043 0308 	orr.w	r3, r3, #8
 8001aa0:	73fb      	strb	r3, [r7, #15]
 8001aa2:	e009      	b.n	8001ab8 <rccommand_process+0xb4>
    else if (input->roll < CENTER - THRESHOLD)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	88db      	ldrh	r3, [r3, #6]
 8001aa8:	f240 62d3 	movw	r2, #1747	@ 0x6d3
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d803      	bhi.n	8001ab8 <rccommand_process+0xb4>
        cmd |= RC_CMD_LEFT;
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	f043 0304 	orr.w	r3, r3, #4
 8001ab6:	73fb      	strb	r3, [r7, #15]

    static char buf[64];
        buf[0] = '\0';
 8001ab8:	4b6e      	ldr	r3, [pc, #440]	@ (8001c74 <rccommand_process+0x270>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
        strcat(buf, "CMD:");
 8001abe:	486d      	ldr	r0, [pc, #436]	@ (8001c74 <rccommand_process+0x270>)
 8001ac0:	f7fe fb8e 	bl	80001e0 <strlen>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4b6a      	ldr	r3, [pc, #424]	@ (8001c74 <rccommand_process+0x270>)
 8001aca:	4413      	add	r3, r2
 8001acc:	4a6a      	ldr	r2, [pc, #424]	@ (8001c78 <rccommand_process+0x274>)
 8001ace:	6810      	ldr	r0, [r2, #0]
 8001ad0:	6018      	str	r0, [r3, #0]
 8001ad2:	7912      	ldrb	r2, [r2, #4]
 8001ad4:	711a      	strb	r2, [r3, #4]

        if (cmd == RC_CMD_NONE) {
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10c      	bne.n	8001af6 <rccommand_process+0xf2>
            strcat(buf, "STOP");
 8001adc:	4865      	ldr	r0, [pc, #404]	@ (8001c74 <rccommand_process+0x270>)
 8001ade:	f7fe fb7f 	bl	80001e0 <strlen>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b63      	ldr	r3, [pc, #396]	@ (8001c74 <rccommand_process+0x270>)
 8001ae8:	4413      	add	r3, r2
 8001aea:	4a64      	ldr	r2, [pc, #400]	@ (8001c7c <rccommand_process+0x278>)
 8001aec:	6810      	ldr	r0, [r2, #0]
 8001aee:	6018      	str	r0, [r3, #0]
 8001af0:	7912      	ldrb	r2, [r2, #4]
 8001af2:	711a      	strb	r2, [r3, #4]
 8001af4:	e0a3      	b.n	8001c3e <rccommand_process+0x23a>
        } else {
            if (cmd & RC_CMD_UP)         strcat(buf, "UP|");
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d009      	beq.n	8001b14 <rccommand_process+0x110>
 8001b00:	485c      	ldr	r0, [pc, #368]	@ (8001c74 <rccommand_process+0x270>)
 8001b02:	f7fe fb6d 	bl	80001e0 <strlen>
 8001b06:	4603      	mov	r3, r0
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b5a      	ldr	r3, [pc, #360]	@ (8001c74 <rccommand_process+0x270>)
 8001b0c:	4413      	add	r3, r2
 8001b0e:	4a5c      	ldr	r2, [pc, #368]	@ (8001c80 <rccommand_process+0x27c>)
 8001b10:	6810      	ldr	r0, [r2, #0]
 8001b12:	6018      	str	r0, [r3, #0]
            if (cmd & RC_CMD_DOWN)       strcat(buf, "DOWN|");
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00b      	beq.n	8001b36 <rccommand_process+0x132>
 8001b1e:	4855      	ldr	r0, [pc, #340]	@ (8001c74 <rccommand_process+0x270>)
 8001b20:	f7fe fb5e 	bl	80001e0 <strlen>
 8001b24:	4603      	mov	r3, r0
 8001b26:	461a      	mov	r2, r3
 8001b28:	4b52      	ldr	r3, [pc, #328]	@ (8001c74 <rccommand_process+0x270>)
 8001b2a:	4413      	add	r3, r2
 8001b2c:	4a55      	ldr	r2, [pc, #340]	@ (8001c84 <rccommand_process+0x280>)
 8001b2e:	6810      	ldr	r0, [r2, #0]
 8001b30:	6018      	str	r0, [r3, #0]
 8001b32:	8892      	ldrh	r2, [r2, #4]
 8001b34:	809a      	strh	r2, [r3, #4]
            if (cmd & RC_CMD_LEFT)       strcat(buf, "LEFT|");
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00b      	beq.n	8001b58 <rccommand_process+0x154>
 8001b40:	484c      	ldr	r0, [pc, #304]	@ (8001c74 <rccommand_process+0x270>)
 8001b42:	f7fe fb4d 	bl	80001e0 <strlen>
 8001b46:	4603      	mov	r3, r0
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8001c74 <rccommand_process+0x270>)
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a4e      	ldr	r2, [pc, #312]	@ (8001c88 <rccommand_process+0x284>)
 8001b50:	6810      	ldr	r0, [r2, #0]
 8001b52:	6018      	str	r0, [r3, #0]
 8001b54:	8892      	ldrh	r2, [r2, #4]
 8001b56:	809a      	strh	r2, [r3, #4]
            if (cmd & RC_CMD_RIGHT)      strcat(buf, "RIGHT|");
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00d      	beq.n	8001b7e <rccommand_process+0x17a>
 8001b62:	4844      	ldr	r0, [pc, #272]	@ (8001c74 <rccommand_process+0x270>)
 8001b64:	f7fe fb3c 	bl	80001e0 <strlen>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b41      	ldr	r3, [pc, #260]	@ (8001c74 <rccommand_process+0x270>)
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a46      	ldr	r2, [pc, #280]	@ (8001c8c <rccommand_process+0x288>)
 8001b72:	6810      	ldr	r0, [r2, #0]
 8001b74:	6018      	str	r0, [r3, #0]
 8001b76:	8891      	ldrh	r1, [r2, #4]
 8001b78:	7992      	ldrb	r2, [r2, #6]
 8001b7a:	8099      	strh	r1, [r3, #4]
 8001b7c:	719a      	strb	r2, [r3, #6]
            if (cmd & RC_CMD_FORWARD)    strcat(buf, "FORWARD|");
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00e      	beq.n	8001ba6 <rccommand_process+0x1a2>
 8001b88:	483a      	ldr	r0, [pc, #232]	@ (8001c74 <rccommand_process+0x270>)
 8001b8a:	f7fe fb29 	bl	80001e0 <strlen>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b38      	ldr	r3, [pc, #224]	@ (8001c74 <rccommand_process+0x270>)
 8001b94:	4413      	add	r3, r2
 8001b96:	493e      	ldr	r1, [pc, #248]	@ (8001c90 <rccommand_process+0x28c>)
 8001b98:	461a      	mov	r2, r3
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	cb03      	ldmia	r3!, {r0, r1}
 8001b9e:	6010      	str	r0, [r2, #0]
 8001ba0:	6051      	str	r1, [r2, #4]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	7213      	strb	r3, [r2, #8]
            if (cmd & RC_CMD_BACKWARD)   strcat(buf, "BACKWARD|");
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00e      	beq.n	8001bce <rccommand_process+0x1ca>
 8001bb0:	4830      	ldr	r0, [pc, #192]	@ (8001c74 <rccommand_process+0x270>)
 8001bb2:	f7fe fb15 	bl	80001e0 <strlen>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b2e      	ldr	r3, [pc, #184]	@ (8001c74 <rccommand_process+0x270>)
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4935      	ldr	r1, [pc, #212]	@ (8001c94 <rccommand_process+0x290>)
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	cb03      	ldmia	r3!, {r0, r1}
 8001bc6:	6010      	str	r0, [r2, #0]
 8001bc8:	6051      	str	r1, [r2, #4]
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	8113      	strh	r3, [r2, #8]
            if (cmd & RC_CMD_YAW_LEFT)   strcat(buf, "YAW_LEFT|");
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00e      	beq.n	8001bf6 <rccommand_process+0x1f2>
 8001bd8:	4826      	ldr	r0, [pc, #152]	@ (8001c74 <rccommand_process+0x270>)
 8001bda:	f7fe fb01 	bl	80001e0 <strlen>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b24      	ldr	r3, [pc, #144]	@ (8001c74 <rccommand_process+0x270>)
 8001be4:	4413      	add	r3, r2
 8001be6:	492c      	ldr	r1, [pc, #176]	@ (8001c98 <rccommand_process+0x294>)
 8001be8:	461a      	mov	r2, r3
 8001bea:	460b      	mov	r3, r1
 8001bec:	cb03      	ldmia	r3!, {r0, r1}
 8001bee:	6010      	str	r0, [r2, #0]
 8001bf0:	6051      	str	r1, [r2, #4]
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	8113      	strh	r3, [r2, #8]
            if (cmd & RC_CMD_YAW_RIGHT)  strcat(buf, "YAW_RIGHT|");
 8001bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	da10      	bge.n	8001c20 <rccommand_process+0x21c>
 8001bfe:	481d      	ldr	r0, [pc, #116]	@ (8001c74 <rccommand_process+0x270>)
 8001c00:	f7fe faee 	bl	80001e0 <strlen>
 8001c04:	4603      	mov	r3, r0
 8001c06:	461a      	mov	r2, r3
 8001c08:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <rccommand_process+0x270>)
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4923      	ldr	r1, [pc, #140]	@ (8001c9c <rccommand_process+0x298>)
 8001c0e:	461a      	mov	r2, r3
 8001c10:	460b      	mov	r3, r1
 8001c12:	cb03      	ldmia	r3!, {r0, r1}
 8001c14:	6010      	str	r0, [r2, #0]
 8001c16:	6051      	str	r1, [r2, #4]
 8001c18:	8819      	ldrh	r1, [r3, #0]
 8001c1a:	789b      	ldrb	r3, [r3, #2]
 8001c1c:	8111      	strh	r1, [r2, #8]
 8001c1e:	7293      	strb	r3, [r2, #10]

            size_t len = strlen(buf);
 8001c20:	4814      	ldr	r0, [pc, #80]	@ (8001c74 <rccommand_process+0x270>)
 8001c22:	f7fe fadd 	bl	80001e0 <strlen>
 8001c26:	60b8      	str	r0, [r7, #8]
            if (buf[len - 1] == '|') buf[len - 1] = '\0';
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	4a11      	ldr	r2, [pc, #68]	@ (8001c74 <rccommand_process+0x270>)
 8001c2e:	5cd3      	ldrb	r3, [r2, r3]
 8001c30:	2b7c      	cmp	r3, #124	@ 0x7c
 8001c32:	d104      	bne.n	8001c3e <rccommand_process+0x23a>
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	4a0e      	ldr	r2, [pc, #56]	@ (8001c74 <rccommand_process+0x270>)
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	54d1      	strb	r1, [r2, r3]
        }

        strcat(buf, "\n");
 8001c3e:	480d      	ldr	r0, [pc, #52]	@ (8001c74 <rccommand_process+0x270>)
 8001c40:	f7fe face 	bl	80001e0 <strlen>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <rccommand_process+0x270>)
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4914      	ldr	r1, [pc, #80]	@ (8001ca0 <rccommand_process+0x29c>)
 8001c4e:	461a      	mov	r2, r3
 8001c50:	460b      	mov	r3, r1
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	8013      	strh	r3, [r2, #0]

        // Chỉ trả chuỗi nếu có thay đổi
        if (cmd != lastCmd)
 8001c56:	4b13      	ldr	r3, [pc, #76]	@ (8001ca4 <rccommand_process+0x2a0>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d004      	beq.n	8001c6a <rccommand_process+0x266>
        {
            lastCmd = cmd;
 8001c60:	4a10      	ldr	r2, [pc, #64]	@ (8001ca4 <rccommand_process+0x2a0>)
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	7013      	strb	r3, [r2, #0]
            return buf;
 8001c66:	4b03      	ldr	r3, [pc, #12]	@ (8001c74 <rccommand_process+0x270>)
 8001c68:	e000      	b.n	8001c6c <rccommand_process+0x268>
        }
        else
        {
            return NULL;
 8001c6a:	2300      	movs	r3, #0
        }
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000598 	.word	0x20000598
 8001c78:	08008924 	.word	0x08008924
 8001c7c:	0800892c 	.word	0x0800892c
 8001c80:	08008934 	.word	0x08008934
 8001c84:	08008938 	.word	0x08008938
 8001c88:	08008940 	.word	0x08008940
 8001c8c:	08008948 	.word	0x08008948
 8001c90:	08008950 	.word	0x08008950
 8001c94:	0800895c 	.word	0x0800895c
 8001c98:	08008968 	.word	0x08008968
 8001c9c:	08008974 	.word	0x08008974
 8001ca0:	08008980 	.word	0x08008980
 8001ca4:	20000594 	.word	0x20000594

08001ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	4b12      	ldr	r3, [pc, #72]	@ (8001cfc <HAL_MspInit+0x54>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb6:	4a11      	ldr	r2, [pc, #68]	@ (8001cfc <HAL_MspInit+0x54>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <HAL_MspInit+0x54>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <HAL_MspInit+0x54>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cfc <HAL_MspInit+0x54>)
 8001cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cda:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <HAL_MspInit+0x54>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	210f      	movs	r1, #15
 8001cea:	f06f 0001 	mvn.w	r0, #1
 8001cee:	f000 ff31 	bl	8002b54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800

08001d00 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	@ 0x28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a32      	ldr	r2, [pc, #200]	@ (8001de8 <HAL_ADC_MspInit+0xe8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d15e      	bne.n	8001de0 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	4b31      	ldr	r3, [pc, #196]	@ (8001dec <HAL_ADC_MspInit+0xec>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2a:	4a30      	ldr	r2, [pc, #192]	@ (8001dec <HAL_ADC_MspInit+0xec>)
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d32:	4b2e      	ldr	r3, [pc, #184]	@ (8001dec <HAL_ADC_MspInit+0xec>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b2a      	ldr	r3, [pc, #168]	@ (8001dec <HAL_ADC_MspInit+0xec>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	4a29      	ldr	r2, [pc, #164]	@ (8001dec <HAL_ADC_MspInit+0xec>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d4e:	4b27      	ldr	r3, [pc, #156]	@ (8001dec <HAL_ADC_MspInit+0xec>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6;
 8001d5a:	2363      	movs	r3, #99	@ 0x63
 8001d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4820      	ldr	r0, [pc, #128]	@ (8001df0 <HAL_ADC_MspInit+0xf0>)
 8001d6e:	f001 fa05 	bl	800317c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001d72:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <HAL_ADC_MspInit+0xf4>)
 8001d74:	4a20      	ldr	r2, [pc, #128]	@ (8001df8 <HAL_ADC_MspInit+0xf8>)
 8001d76:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001d78:	4b1e      	ldr	r3, [pc, #120]	@ (8001df4 <HAL_ADC_MspInit+0xf4>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001df4 <HAL_ADC_MspInit+0xf4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d84:	4b1b      	ldr	r3, [pc, #108]	@ (8001df4 <HAL_ADC_MspInit+0xf4>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <HAL_ADC_MspInit+0xf4>)
 8001d8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d90:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d92:	4b18      	ldr	r3, [pc, #96]	@ (8001df4 <HAL_ADC_MspInit+0xf4>)
 8001d94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d98:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d9a:	4b16      	ldr	r3, [pc, #88]	@ (8001df4 <HAL_ADC_MspInit+0xf4>)
 8001d9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001da0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001da2:	4b14      	ldr	r3, [pc, #80]	@ (8001df4 <HAL_ADC_MspInit+0xf4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001da8:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <HAL_ADC_MspInit+0xf4>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dae:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <HAL_ADC_MspInit+0xf4>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001db4:	480f      	ldr	r0, [pc, #60]	@ (8001df4 <HAL_ADC_MspInit+0xf4>)
 8001db6:	f000 fef7 	bl	8002ba8 <HAL_DMA_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001dc0:	f7ff faec 	bl	800139c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a0b      	ldr	r2, [pc, #44]	@ (8001df4 <HAL_ADC_MspInit+0xf4>)
 8001dc8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001dca:	4a0a      	ldr	r2, [pc, #40]	@ (8001df4 <HAL_ADC_MspInit+0xf4>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2105      	movs	r1, #5
 8001dd4:	2012      	movs	r0, #18
 8001dd6:	f000 febd 	bl	8002b54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001dda:	2012      	movs	r0, #18
 8001ddc:	f000 fed6 	bl	8002b8c <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	@ 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40012000 	.word	0x40012000
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020000 	.word	0x40020000
 8001df4:	20000424 	.word	0x20000424
 8001df8:	40026410 	.word	0x40026410

08001dfc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	@ 0x28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a19      	ldr	r2, [pc, #100]	@ (8001e80 <HAL_I2C_MspInit+0x84>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d12b      	bne.n	8001e76 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <HAL_I2C_MspInit+0x88>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	4a17      	ldr	r2, [pc, #92]	@ (8001e84 <HAL_I2C_MspInit+0x88>)
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2e:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <HAL_I2C_MspInit+0x88>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e3a:	23c0      	movs	r3, #192	@ 0xc0
 8001e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e3e:	2312      	movs	r3, #18
 8001e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4619      	mov	r1, r3
 8001e54:	480c      	ldr	r0, [pc, #48]	@ (8001e88 <HAL_I2C_MspInit+0x8c>)
 8001e56:	f001 f991 	bl	800317c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <HAL_I2C_MspInit+0x88>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	4a08      	ldr	r2, [pc, #32]	@ (8001e84 <HAL_I2C_MspInit+0x88>)
 8001e64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6a:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <HAL_I2C_MspInit+0x88>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e76:	bf00      	nop
 8001e78:	3728      	adds	r7, #40	@ 0x28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40005400 	.word	0x40005400
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020400 	.word	0x40020400

08001e8c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	@ 0x28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a28      	ldr	r2, [pc, #160]	@ (8001f4c <HAL_SPI_MspInit+0xc0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d149      	bne.n	8001f42 <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	4b27      	ldr	r3, [pc, #156]	@ (8001f50 <HAL_SPI_MspInit+0xc4>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb6:	4a26      	ldr	r2, [pc, #152]	@ (8001f50 <HAL_SPI_MspInit+0xc4>)
 8001eb8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ebe:	4b24      	ldr	r3, [pc, #144]	@ (8001f50 <HAL_SPI_MspInit+0xc4>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	4b20      	ldr	r3, [pc, #128]	@ (8001f50 <HAL_SPI_MspInit+0xc4>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f50 <HAL_SPI_MspInit+0xc4>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eda:	4b1d      	ldr	r3, [pc, #116]	@ (8001f50 <HAL_SPI_MspInit+0xc4>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	4b19      	ldr	r3, [pc, #100]	@ (8001f50 <HAL_SPI_MspInit+0xc4>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	4a18      	ldr	r2, [pc, #96]	@ (8001f50 <HAL_SPI_MspInit+0xc4>)
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef6:	4b16      	ldr	r3, [pc, #88]	@ (8001f50 <HAL_SPI_MspInit+0xc4>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f02:	2380      	movs	r3, #128	@ 0x80
 8001f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f12:	2305      	movs	r3, #5
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	480d      	ldr	r0, [pc, #52]	@ (8001f54 <HAL_SPI_MspInit+0xc8>)
 8001f1e:	f001 f92d 	bl	800317c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001f22:	2318      	movs	r3, #24
 8001f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f32:	2305      	movs	r3, #5
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4806      	ldr	r0, [pc, #24]	@ (8001f58 <HAL_SPI_MspInit+0xcc>)
 8001f3e:	f001 f91d 	bl	800317c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001f42:	bf00      	nop
 8001f44:	3728      	adds	r7, #40	@ 0x28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40013000 	.word	0x40013000
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020000 	.word	0x40020000
 8001f58:	40020400 	.word	0x40020400

08001f5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08c      	sub	sp, #48	@ 0x30
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	4b2e      	ldr	r3, [pc, #184]	@ (800202c <HAL_InitTick+0xd0>)
 8001f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f74:	4a2d      	ldr	r2, [pc, #180]	@ (800202c <HAL_InitTick+0xd0>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800202c <HAL_InitTick+0xd0>)
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f88:	f107 020c 	add.w	r2, r7, #12
 8001f8c:	f107 0310 	add.w	r3, r7, #16
 8001f90:	4611      	mov	r1, r2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f002 fbd0 	bl	8004738 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f98:	f002 fbba 	bl	8004710 <HAL_RCC_GetPCLK2Freq>
 8001f9c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fa0:	4a23      	ldr	r2, [pc, #140]	@ (8002030 <HAL_InitTick+0xd4>)
 8001fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa6:	0c9b      	lsrs	r3, r3, #18
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001fac:	4b21      	ldr	r3, [pc, #132]	@ (8002034 <HAL_InitTick+0xd8>)
 8001fae:	4a22      	ldr	r2, [pc, #136]	@ (8002038 <HAL_InitTick+0xdc>)
 8001fb0:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001fb2:	4b20      	ldr	r3, [pc, #128]	@ (8002034 <HAL_InitTick+0xd8>)
 8001fb4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fb8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001fba:	4a1e      	ldr	r2, [pc, #120]	@ (8002034 <HAL_InitTick+0xd8>)
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8002034 <HAL_InitTick+0xd8>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <HAL_InitTick+0xd8>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fcc:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <HAL_InitTick+0xd8>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001fd2:	4818      	ldr	r0, [pc, #96]	@ (8002034 <HAL_InitTick+0xd8>)
 8001fd4:	f003 f9b4 	bl	8005340 <HAL_TIM_Base_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001fde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d11b      	bne.n	800201e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001fe6:	4813      	ldr	r0, [pc, #76]	@ (8002034 <HAL_InitTick+0xd8>)
 8001fe8:	f003 fa04 	bl	80053f4 <HAL_TIM_Base_Start_IT>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001ff2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d111      	bne.n	800201e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ffa:	2019      	movs	r0, #25
 8001ffc:	f000 fdc6 	bl	8002b8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b0f      	cmp	r3, #15
 8002004:	d808      	bhi.n	8002018 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002006:	2200      	movs	r2, #0
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	2019      	movs	r0, #25
 800200c:	f000 fda2 	bl	8002b54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002010:	4a0a      	ldr	r2, [pc, #40]	@ (800203c <HAL_InitTick+0xe0>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e002      	b.n	800201e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800201e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002022:	4618      	mov	r0, r3
 8002024:	3730      	adds	r7, #48	@ 0x30
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800
 8002030:	431bde83 	.word	0x431bde83
 8002034:	200005d8 	.word	0x200005d8
 8002038:	40010000 	.word	0x40010000
 800203c:	200000b4 	.word	0x200000b4

08002040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <NMI_Handler+0x4>

08002048 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204c:	bf00      	nop
 800204e:	e7fd      	b.n	800204c <HardFault_Handler+0x4>

08002050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002054:	bf00      	nop
 8002056:	e7fd      	b.n	8002054 <MemManage_Handler+0x4>

08002058 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <BusFault_Handler+0x4>

08002060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002064:	bf00      	nop
 8002066:	e7fd      	b.n	8002064 <UsageFault_Handler+0x4>

08002068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800207c:	4802      	ldr	r0, [pc, #8]	@ (8002088 <ADC_IRQHandler+0x10>)
 800207e:	f000 f954 	bl	800232a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200003dc 	.word	0x200003dc

0800208c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SELECT_Pin);
 8002090:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002094:	f001 fa42 	bl	800351c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_Pin);
 8002098:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800209c:	f001 fa3e 	bl	800351c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020a8:	4802      	ldr	r0, [pc, #8]	@ (80020b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80020aa:	f003 fa05 	bl	80054b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200005d8 	.word	0x200005d8

080020b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_Pin);
 80020bc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80020c0:	f001 fa2c 	bl	800351c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HOME_Pin);
 80020c4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80020c8:	f001 fa28 	bl	800351c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80020cc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80020d0:	f001 fa24 	bl	800351c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BACK_Pin);
 80020d4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80020d8:	f001 fa20 	bl	800351c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}

080020e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020e4:	4802      	ldr	r0, [pc, #8]	@ (80020f0 <DMA2_Stream0_IRQHandler+0x10>)
 80020e6:	f000 fe0d 	bl	8002d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000424 	.word	0x20000424

080020f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020fc:	4a14      	ldr	r2, [pc, #80]	@ (8002150 <_sbrk+0x5c>)
 80020fe:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <_sbrk+0x60>)
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002108:	4b13      	ldr	r3, [pc, #76]	@ (8002158 <_sbrk+0x64>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002110:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <_sbrk+0x64>)
 8002112:	4a12      	ldr	r2, [pc, #72]	@ (800215c <_sbrk+0x68>)
 8002114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002116:	4b10      	ldr	r3, [pc, #64]	@ (8002158 <_sbrk+0x64>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	429a      	cmp	r2, r3
 8002122:	d207      	bcs.n	8002134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002124:	f005 fef0 	bl	8007f08 <__errno>
 8002128:	4603      	mov	r3, r0
 800212a:	220c      	movs	r2, #12
 800212c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
 8002132:	e009      	b.n	8002148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002134:	4b08      	ldr	r3, [pc, #32]	@ (8002158 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213a:	4b07      	ldr	r3, [pc, #28]	@ (8002158 <_sbrk+0x64>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	4a05      	ldr	r2, [pc, #20]	@ (8002158 <_sbrk+0x64>)
 8002144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002146:	68fb      	ldr	r3, [r7, #12]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20020000 	.word	0x20020000
 8002154:	00000400 	.word	0x00000400
 8002158:	20000620 	.word	0x20000620
 800215c:	200044c8 	.word	0x200044c8

08002160 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002164:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <SystemInit+0x20>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216a:	4a05      	ldr	r2, [pc, #20]	@ (8002180 <SystemInit+0x20>)
 800216c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002170:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002184:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002188:	f7ff ffea 	bl	8002160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800218c:	480c      	ldr	r0, [pc, #48]	@ (80021c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800218e:	490d      	ldr	r1, [pc, #52]	@ (80021c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002190:	4a0d      	ldr	r2, [pc, #52]	@ (80021c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002194:	e002      	b.n	800219c <LoopCopyDataInit>

08002196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219a:	3304      	adds	r3, #4

0800219c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800219c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a0:	d3f9      	bcc.n	8002196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a2:	4a0a      	ldr	r2, [pc, #40]	@ (80021cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021a4:	4c0a      	ldr	r4, [pc, #40]	@ (80021d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a8:	e001      	b.n	80021ae <LoopFillZerobss>

080021aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ac:	3204      	adds	r2, #4

080021ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b0:	d3fb      	bcc.n	80021aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021b2:	f005 feaf 	bl	8007f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021b6:	f7fe fd9b 	bl	8000cf0 <main>
  bx  lr    
 80021ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c4:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80021c8:	080089f0 	.word	0x080089f0
  ldr r2, =_sbss
 80021cc:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80021d0:	200044c4 	.word	0x200044c4

080021d4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d4:	e7fe      	b.n	80021d4 <DMA1_Stream0_IRQHandler>
	...

080021d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <HAL_Init+0x40>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002218 <HAL_Init+0x40>)
 80021e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <HAL_Init+0x40>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002218 <HAL_Init+0x40>)
 80021ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f4:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <HAL_Init+0x40>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a07      	ldr	r2, [pc, #28]	@ (8002218 <HAL_Init+0x40>)
 80021fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002200:	2003      	movs	r0, #3
 8002202:	f000 fc9c 	bl	8002b3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002206:	200f      	movs	r0, #15
 8002208:	f7ff fea8 	bl	8001f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800220c:	f7ff fd4c 	bl	8001ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023c00 	.word	0x40023c00

0800221c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_IncTick+0x20>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_IncTick+0x24>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4413      	add	r3, r2
 800222c:	4a04      	ldr	r2, [pc, #16]	@ (8002240 <HAL_IncTick+0x24>)
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	200000b8 	.word	0x200000b8
 8002240:	20000624 	.word	0x20000624

08002244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return uwTick;
 8002248:	4b03      	ldr	r3, [pc, #12]	@ (8002258 <HAL_GetTick+0x14>)
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	20000624 	.word	0x20000624

0800225c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff ffee 	bl	8002244 <HAL_GetTick>
 8002268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002274:	d005      	beq.n	8002282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002276:	4b0a      	ldr	r3, [pc, #40]	@ (80022a0 <HAL_Delay+0x44>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002282:	bf00      	nop
 8002284:	f7ff ffde 	bl	8002244 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	429a      	cmp	r2, r3
 8002292:	d8f7      	bhi.n	8002284 <HAL_Delay+0x28>
  {
  }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200000b8 	.word	0x200000b8

080022a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e033      	b.n	8002322 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff fd1c 	bl	8001d00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d118      	bne.n	8002314 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022ea:	f023 0302 	bic.w	r3, r3, #2
 80022ee:	f043 0202 	orr.w	r2, r3, #2
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fa6e 	bl	80027d8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	f023 0303 	bic.w	r3, r3, #3
 800230a:	f043 0201 	orr.w	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	641a      	str	r2, [r3, #64]	@ 0x40
 8002312:	e001      	b.n	8002318 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002320:	7bfb      	ldrb	r3, [r7, #15]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d049      	beq.n	80023f4 <HAL_ADC_IRQHandler+0xca>
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d046      	beq.n	80023f4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	2b00      	cmp	r3, #0
 8002370:	d105      	bne.n	800237e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d12b      	bne.n	80023e4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002390:	2b00      	cmp	r3, #0
 8002392:	d127      	bne.n	80023e4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d006      	beq.n	80023b0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d119      	bne.n	80023e4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0220 	bic.w	r2, r2, #32
 80023be:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d105      	bne.n	80023e4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023dc:	f043 0201 	orr.w	r2, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7fe fc5b 	bl	8000ca0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f06f 0212 	mvn.w	r2, #18
 80023f2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002402:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d057      	beq.n	80024ba <HAL_ADC_IRQHandler+0x190>
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d054      	beq.n	80024ba <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b00      	cmp	r3, #0
 800241a:	d105      	bne.n	8002428 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d139      	bne.n	80024aa <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800243c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002440:	2b00      	cmp	r3, #0
 8002442:	d006      	beq.n	8002452 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800244e:	2b00      	cmp	r3, #0
 8002450:	d12b      	bne.n	80024aa <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800245c:	2b00      	cmp	r3, #0
 800245e:	d124      	bne.n	80024aa <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800246a:	2b00      	cmp	r3, #0
 800246c:	d11d      	bne.n	80024aa <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002472:	2b00      	cmp	r3, #0
 8002474:	d119      	bne.n	80024aa <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002484:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d105      	bne.n	80024aa <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	f043 0201 	orr.w	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fa90 	bl	80029d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 020c 	mvn.w	r2, #12
 80024b8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d017      	beq.n	8002500 <HAL_ADC_IRQHandler+0x1d6>
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d014      	beq.n	8002500 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d10d      	bne.n	8002500 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f82a 	bl	800254a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f06f 0201 	mvn.w	r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 0320 	and.w	r3, r3, #32
 8002506:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800250e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d015      	beq.n	8002542 <HAL_ADC_IRQHandler+0x218>
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d012      	beq.n	8002542 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002520:	f043 0202 	orr.w	r2, r3, #2
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0220 	mvn.w	r2, #32
 8002530:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f813 	bl	800255e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0220 	mvn.w	r2, #32
 8002540:	601a      	str	r2, [r3, #0]
  }
}
 8002542:	bf00      	nop
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
	...

08002574 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x1c>
 800258c:	2302      	movs	r3, #2
 800258e:	e113      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x244>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b09      	cmp	r3, #9
 800259e:	d925      	bls.n	80025ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68d9      	ldr	r1, [r3, #12]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	4613      	mov	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4413      	add	r3, r2
 80025b4:	3b1e      	subs	r3, #30
 80025b6:	2207      	movs	r2, #7
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43da      	mvns	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	400a      	ands	r2, r1
 80025c4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68d9      	ldr	r1, [r3, #12]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	4618      	mov	r0, r3
 80025d8:	4603      	mov	r3, r0
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4403      	add	r3, r0
 80025de:	3b1e      	subs	r3, #30
 80025e0:	409a      	lsls	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	e022      	b.n	8002632 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6919      	ldr	r1, [r3, #16]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	2207      	movs	r2, #7
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43da      	mvns	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	400a      	ands	r2, r1
 800260e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6919      	ldr	r1, [r3, #16]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	b29b      	uxth	r3, r3
 8002620:	4618      	mov	r0, r3
 8002622:	4603      	mov	r3, r0
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	4403      	add	r3, r0
 8002628:	409a      	lsls	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b06      	cmp	r3, #6
 8002638:	d824      	bhi.n	8002684 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	3b05      	subs	r3, #5
 800264c:	221f      	movs	r2, #31
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	400a      	ands	r2, r1
 800265a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	b29b      	uxth	r3, r3
 8002668:	4618      	mov	r0, r3
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	3b05      	subs	r3, #5
 8002676:	fa00 f203 	lsl.w	r2, r0, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	635a      	str	r2, [r3, #52]	@ 0x34
 8002682:	e04c      	b.n	800271e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b0c      	cmp	r3, #12
 800268a:	d824      	bhi.n	80026d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	3b23      	subs	r3, #35	@ 0x23
 800269e:	221f      	movs	r2, #31
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43da      	mvns	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	400a      	ands	r2, r1
 80026ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	3b23      	subs	r3, #35	@ 0x23
 80026c8:	fa00 f203 	lsl.w	r2, r0, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80026d4:	e023      	b.n	800271e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	3b41      	subs	r3, #65	@ 0x41
 80026e8:	221f      	movs	r2, #31
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	400a      	ands	r2, r1
 80026f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	4618      	mov	r0, r3
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	3b41      	subs	r3, #65	@ 0x41
 8002712:	fa00 f203 	lsl.w	r2, r0, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800271e:	4b29      	ldr	r3, [pc, #164]	@ (80027c4 <HAL_ADC_ConfigChannel+0x250>)
 8002720:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a28      	ldr	r2, [pc, #160]	@ (80027c8 <HAL_ADC_ConfigChannel+0x254>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d10f      	bne.n	800274c <HAL_ADC_ConfigChannel+0x1d8>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b12      	cmp	r3, #18
 8002732:	d10b      	bne.n	800274c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a1d      	ldr	r2, [pc, #116]	@ (80027c8 <HAL_ADC_ConfigChannel+0x254>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d12b      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x23a>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1c      	ldr	r2, [pc, #112]	@ (80027cc <HAL_ADC_ConfigChannel+0x258>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d003      	beq.n	8002768 <HAL_ADC_ConfigChannel+0x1f4>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b11      	cmp	r3, #17
 8002766:	d122      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a11      	ldr	r2, [pc, #68]	@ (80027cc <HAL_ADC_ConfigChannel+0x258>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d111      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800278a:	4b11      	ldr	r3, [pc, #68]	@ (80027d0 <HAL_ADC_ConfigChannel+0x25c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a11      	ldr	r2, [pc, #68]	@ (80027d4 <HAL_ADC_ConfigChannel+0x260>)
 8002790:	fba2 2303 	umull	r2, r3, r2, r3
 8002794:	0c9a      	lsrs	r2, r3, #18
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80027a0:	e002      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f9      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	40012300 	.word	0x40012300
 80027c8:	40012000 	.word	0x40012000
 80027cc:	10000012 	.word	0x10000012
 80027d0:	200000b0 	.word	0x200000b0
 80027d4:	431bde83 	.word	0x431bde83

080027d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027e0:	4b79      	ldr	r3, [pc, #484]	@ (80029c8 <ADC_Init+0x1f0>)
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	431a      	orrs	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800280c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6859      	ldr	r1, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	021a      	lsls	r2, r3, #8
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002830:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002852:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6899      	ldr	r1, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286a:	4a58      	ldr	r2, [pc, #352]	@ (80029cc <ADC_Init+0x1f4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d022      	beq.n	80028b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800287e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6899      	ldr	r1, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6899      	ldr	r1, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	e00f      	b.n	80028d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0202 	bic.w	r2, r2, #2
 80028e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6899      	ldr	r1, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	7e1b      	ldrb	r3, [r3, #24]
 80028f0:	005a      	lsls	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d01b      	beq.n	800293c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002912:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002922:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6859      	ldr	r1, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292e:	3b01      	subs	r3, #1
 8002930:	035a      	lsls	r2, r3, #13
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	e007      	b.n	800294c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800294a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800295a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	3b01      	subs	r3, #1
 8002968:	051a      	lsls	r2, r3, #20
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002980:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6899      	ldr	r1, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800298e:	025a      	lsls	r2, r3, #9
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6899      	ldr	r1, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	029a      	lsls	r2, r3, #10
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	609a      	str	r2, [r3, #8]
}
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40012300 	.word	0x40012300
 80029cc:	0f000001 	.word	0x0f000001

080029d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a28 <__NVIC_SetPriorityGrouping+0x44>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a00:	4013      	ands	r3, r2
 8002a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a16:	4a04      	ldr	r2, [pc, #16]	@ (8002a28 <__NVIC_SetPriorityGrouping+0x44>)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	60d3      	str	r3, [r2, #12]
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a30:	4b04      	ldr	r3, [pc, #16]	@ (8002a44 <__NVIC_GetPriorityGrouping+0x18>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	0a1b      	lsrs	r3, r3, #8
 8002a36:	f003 0307 	and.w	r3, r3, #7
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	db0b      	blt.n	8002a72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	f003 021f 	and.w	r2, r3, #31
 8002a60:	4907      	ldr	r1, [pc, #28]	@ (8002a80 <__NVIC_EnableIRQ+0x38>)
 8002a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	2001      	movs	r0, #1
 8002a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	e000e100 	.word	0xe000e100

08002a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	6039      	str	r1, [r7, #0]
 8002a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	db0a      	blt.n	8002aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	490c      	ldr	r1, [pc, #48]	@ (8002ad0 <__NVIC_SetPriority+0x4c>)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	0112      	lsls	r2, r2, #4
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aac:	e00a      	b.n	8002ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4908      	ldr	r1, [pc, #32]	@ (8002ad4 <__NVIC_SetPriority+0x50>)
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	3b04      	subs	r3, #4
 8002abc:	0112      	lsls	r2, r2, #4
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	761a      	strb	r2, [r3, #24]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000e100 	.word	0xe000e100
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	@ 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f1c3 0307 	rsb	r3, r3, #7
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	bf28      	it	cs
 8002af6:	2304      	movcs	r3, #4
 8002af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d902      	bls.n	8002b08 <NVIC_EncodePriority+0x30>
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3b03      	subs	r3, #3
 8002b06:	e000      	b.n	8002b0a <NVIC_EncodePriority+0x32>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43da      	mvns	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b20:	f04f 31ff 	mov.w	r1, #4294967295
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2a:	43d9      	mvns	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	4313      	orrs	r3, r2
         );
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3724      	adds	r7, #36	@ 0x24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff ff4c 	bl	80029e4 <__NVIC_SetPriorityGrouping>
}
 8002b4c:	bf00      	nop
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b66:	f7ff ff61 	bl	8002a2c <__NVIC_GetPriorityGrouping>
 8002b6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	68b9      	ldr	r1, [r7, #8]
 8002b70:	6978      	ldr	r0, [r7, #20]
 8002b72:	f7ff ffb1 	bl	8002ad8 <NVIC_EncodePriority>
 8002b76:	4602      	mov	r2, r0
 8002b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff ff80 	bl	8002a84 <__NVIC_SetPriority>
}
 8002b84:	bf00      	nop
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff ff54 	bl	8002a48 <__NVIC_EnableIRQ>
}
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bb4:	f7ff fb46 	bl	8002244 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e099      	b.n	8002cf8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0201 	bic.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002be4:	e00f      	b.n	8002c06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002be6:	f7ff fb2d 	bl	8002244 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b05      	cmp	r3, #5
 8002bf2:	d908      	bls.n	8002c06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e078      	b.n	8002cf8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1e8      	bne.n	8002be6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	4b38      	ldr	r3, [pc, #224]	@ (8002d00 <HAL_DMA_Init+0x158>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d107      	bne.n	8002c70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f023 0307 	bic.w	r3, r3, #7
 8002c86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d117      	bne.n	8002cca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00e      	beq.n	8002cca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f9e9 	bl	8003084 <DMA_CheckFifoParam>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2240      	movs	r2, #64	@ 0x40
 8002cbc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e016      	b.n	8002cf8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f9a0 	bl	8003018 <DMA_CalcBaseAndBitshift>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce0:	223f      	movs	r2, #63	@ 0x3f
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	f010803f 	.word	0xf010803f

08002d04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d10:	4b8e      	ldr	r3, [pc, #568]	@ (8002f4c <HAL_DMA_IRQHandler+0x248>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a8e      	ldr	r2, [pc, #568]	@ (8002f50 <HAL_DMA_IRQHandler+0x24c>)
 8002d16:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1a:	0a9b      	lsrs	r3, r3, #10
 8002d1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2e:	2208      	movs	r2, #8
 8002d30:	409a      	lsls	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d01a      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d013      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0204 	bic.w	r2, r2, #4
 8002d56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	409a      	lsls	r2, r3
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d68:	f043 0201 	orr.w	r2, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d74:	2201      	movs	r2, #1
 8002d76:	409a      	lsls	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d012      	beq.n	8002da6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00b      	beq.n	8002da6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d92:	2201      	movs	r2, #1
 8002d94:	409a      	lsls	r2, r3
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9e:	f043 0202 	orr.w	r2, r3, #2
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002daa:	2204      	movs	r2, #4
 8002dac:	409a      	lsls	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d012      	beq.n	8002ddc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00b      	beq.n	8002ddc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc8:	2204      	movs	r2, #4
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd4:	f043 0204 	orr.w	r2, r3, #4
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de0:	2210      	movs	r2, #16
 8002de2:	409a      	lsls	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d043      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d03c      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfe:	2210      	movs	r2, #16
 8002e00:	409a      	lsls	r2, r3
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d018      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d108      	bne.n	8002e34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d024      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	4798      	blx	r3
 8002e32:	e01f      	b.n	8002e74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d01b      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	4798      	blx	r3
 8002e44:	e016      	b.n	8002e74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d107      	bne.n	8002e64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0208 	bic.w	r2, r2, #8
 8002e62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e78:	2220      	movs	r2, #32
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 808f 	beq.w	8002fa4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 8087 	beq.w	8002fa4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b05      	cmp	r3, #5
 8002eac:	d136      	bne.n	8002f1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0216 	bic.w	r2, r2, #22
 8002ebc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695a      	ldr	r2, [r3, #20]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ecc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d103      	bne.n	8002ede <HAL_DMA_IRQHandler+0x1da>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d007      	beq.n	8002eee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0208 	bic.w	r2, r2, #8
 8002eec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef2:	223f      	movs	r2, #63	@ 0x3f
 8002ef4:	409a      	lsls	r2, r3
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d07e      	beq.n	8003010 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4798      	blx	r3
        }
        return;
 8002f1a:	e079      	b.n	8003010 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d01d      	beq.n	8002f66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10d      	bne.n	8002f54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d031      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	4798      	blx	r3
 8002f48:	e02c      	b.n	8002fa4 <HAL_DMA_IRQHandler+0x2a0>
 8002f4a:	bf00      	nop
 8002f4c:	200000b0 	.word	0x200000b0
 8002f50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d023      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	4798      	blx	r3
 8002f64:	e01e      	b.n	8002fa4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10f      	bne.n	8002f94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0210 	bic.w	r2, r2, #16
 8002f82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d032      	beq.n	8003012 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d022      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2205      	movs	r2, #5
 8002fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d307      	bcc.n	8002fec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f2      	bne.n	8002fd0 <HAL_DMA_IRQHandler+0x2cc>
 8002fea:	e000      	b.n	8002fee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	4798      	blx	r3
 800300e:	e000      	b.n	8003012 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003010:	bf00      	nop
    }
  }
}
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	3b10      	subs	r3, #16
 8003028:	4a14      	ldr	r2, [pc, #80]	@ (800307c <DMA_CalcBaseAndBitshift+0x64>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003032:	4a13      	ldr	r2, [pc, #76]	@ (8003080 <DMA_CalcBaseAndBitshift+0x68>)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b03      	cmp	r3, #3
 8003044:	d909      	bls.n	800305a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800304e:	f023 0303 	bic.w	r3, r3, #3
 8003052:	1d1a      	adds	r2, r3, #4
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	659a      	str	r2, [r3, #88]	@ 0x58
 8003058:	e007      	b.n	800306a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003062:	f023 0303 	bic.w	r3, r3, #3
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	aaaaaaab 	.word	0xaaaaaaab
 8003080:	080089a4 	.word	0x080089a4

08003084 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003094:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d11f      	bne.n	80030de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d856      	bhi.n	8003152 <DMA_CheckFifoParam+0xce>
 80030a4:	a201      	add	r2, pc, #4	@ (adr r2, 80030ac <DMA_CheckFifoParam+0x28>)
 80030a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030aa:	bf00      	nop
 80030ac:	080030bd 	.word	0x080030bd
 80030b0:	080030cf 	.word	0x080030cf
 80030b4:	080030bd 	.word	0x080030bd
 80030b8:	08003153 	.word	0x08003153
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d046      	beq.n	8003156 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030cc:	e043      	b.n	8003156 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030d6:	d140      	bne.n	800315a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030dc:	e03d      	b.n	800315a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030e6:	d121      	bne.n	800312c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d837      	bhi.n	800315e <DMA_CheckFifoParam+0xda>
 80030ee:	a201      	add	r2, pc, #4	@ (adr r2, 80030f4 <DMA_CheckFifoParam+0x70>)
 80030f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f4:	08003105 	.word	0x08003105
 80030f8:	0800310b 	.word	0x0800310b
 80030fc:	08003105 	.word	0x08003105
 8003100:	0800311d 	.word	0x0800311d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
      break;
 8003108:	e030      	b.n	800316c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d025      	beq.n	8003162 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800311a:	e022      	b.n	8003162 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003120:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003124:	d11f      	bne.n	8003166 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800312a:	e01c      	b.n	8003166 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d903      	bls.n	800313a <DMA_CheckFifoParam+0xb6>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d003      	beq.n	8003140 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003138:	e018      	b.n	800316c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]
      break;
 800313e:	e015      	b.n	800316c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003144:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00e      	beq.n	800316a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
      break;
 8003150:	e00b      	b.n	800316a <DMA_CheckFifoParam+0xe6>
      break;
 8003152:	bf00      	nop
 8003154:	e00a      	b.n	800316c <DMA_CheckFifoParam+0xe8>
      break;
 8003156:	bf00      	nop
 8003158:	e008      	b.n	800316c <DMA_CheckFifoParam+0xe8>
      break;
 800315a:	bf00      	nop
 800315c:	e006      	b.n	800316c <DMA_CheckFifoParam+0xe8>
      break;
 800315e:	bf00      	nop
 8003160:	e004      	b.n	800316c <DMA_CheckFifoParam+0xe8>
      break;
 8003162:	bf00      	nop
 8003164:	e002      	b.n	800316c <DMA_CheckFifoParam+0xe8>
      break;   
 8003166:	bf00      	nop
 8003168:	e000      	b.n	800316c <DMA_CheckFifoParam+0xe8>
      break;
 800316a:	bf00      	nop
    }
  } 
  
  return status; 
 800316c:	7bfb      	ldrb	r3, [r7, #15]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop

0800317c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800317c:	b480      	push	{r7}
 800317e:	b089      	sub	sp, #36	@ 0x24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800318a:	2300      	movs	r3, #0
 800318c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800318e:	2300      	movs	r3, #0
 8003190:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
 8003196:	e159      	b.n	800344c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003198:	2201      	movs	r2, #1
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	f040 8148 	bne.w	8003446 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d005      	beq.n	80031ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d130      	bne.n	8003230 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	2203      	movs	r2, #3
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4013      	ands	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003204:	2201      	movs	r2, #1
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 0201 	and.w	r2, r3, #1
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	2b03      	cmp	r3, #3
 800323a:	d017      	beq.n	800326c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	2203      	movs	r2, #3
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d123      	bne.n	80032c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	08da      	lsrs	r2, r3, #3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3208      	adds	r2, #8
 8003280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003284:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	220f      	movs	r2, #15
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4013      	ands	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	08da      	lsrs	r2, r3, #3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3208      	adds	r2, #8
 80032ba:	69b9      	ldr	r1, [r7, #24]
 80032bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	2203      	movs	r2, #3
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 0203 	and.w	r2, r3, #3
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80a2 	beq.w	8003446 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	4b57      	ldr	r3, [pc, #348]	@ (8003464 <HAL_GPIO_Init+0x2e8>)
 8003308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330a:	4a56      	ldr	r2, [pc, #344]	@ (8003464 <HAL_GPIO_Init+0x2e8>)
 800330c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003310:	6453      	str	r3, [r2, #68]	@ 0x44
 8003312:	4b54      	ldr	r3, [pc, #336]	@ (8003464 <HAL_GPIO_Init+0x2e8>)
 8003314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800331e:	4a52      	ldr	r2, [pc, #328]	@ (8003468 <HAL_GPIO_Init+0x2ec>)
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	089b      	lsrs	r3, r3, #2
 8003324:	3302      	adds	r3, #2
 8003326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	220f      	movs	r2, #15
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4013      	ands	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a49      	ldr	r2, [pc, #292]	@ (800346c <HAL_GPIO_Init+0x2f0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d019      	beq.n	800337e <HAL_GPIO_Init+0x202>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a48      	ldr	r2, [pc, #288]	@ (8003470 <HAL_GPIO_Init+0x2f4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <HAL_GPIO_Init+0x1fe>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a47      	ldr	r2, [pc, #284]	@ (8003474 <HAL_GPIO_Init+0x2f8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00d      	beq.n	8003376 <HAL_GPIO_Init+0x1fa>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a46      	ldr	r2, [pc, #280]	@ (8003478 <HAL_GPIO_Init+0x2fc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <HAL_GPIO_Init+0x1f6>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a45      	ldr	r2, [pc, #276]	@ (800347c <HAL_GPIO_Init+0x300>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d101      	bne.n	800336e <HAL_GPIO_Init+0x1f2>
 800336a:	2304      	movs	r3, #4
 800336c:	e008      	b.n	8003380 <HAL_GPIO_Init+0x204>
 800336e:	2307      	movs	r3, #7
 8003370:	e006      	b.n	8003380 <HAL_GPIO_Init+0x204>
 8003372:	2303      	movs	r3, #3
 8003374:	e004      	b.n	8003380 <HAL_GPIO_Init+0x204>
 8003376:	2302      	movs	r3, #2
 8003378:	e002      	b.n	8003380 <HAL_GPIO_Init+0x204>
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <HAL_GPIO_Init+0x204>
 800337e:	2300      	movs	r3, #0
 8003380:	69fa      	ldr	r2, [r7, #28]
 8003382:	f002 0203 	and.w	r2, r2, #3
 8003386:	0092      	lsls	r2, r2, #2
 8003388:	4093      	lsls	r3, r2
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003390:	4935      	ldr	r1, [pc, #212]	@ (8003468 <HAL_GPIO_Init+0x2ec>)
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	089b      	lsrs	r3, r3, #2
 8003396:	3302      	adds	r3, #2
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800339e:	4b38      	ldr	r3, [pc, #224]	@ (8003480 <HAL_GPIO_Init+0x304>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033c2:	4a2f      	ldr	r2, [pc, #188]	@ (8003480 <HAL_GPIO_Init+0x304>)
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003480 <HAL_GPIO_Init+0x304>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033ec:	4a24      	ldr	r2, [pc, #144]	@ (8003480 <HAL_GPIO_Init+0x304>)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033f2:	4b23      	ldr	r3, [pc, #140]	@ (8003480 <HAL_GPIO_Init+0x304>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003416:	4a1a      	ldr	r2, [pc, #104]	@ (8003480 <HAL_GPIO_Init+0x304>)
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800341c:	4b18      	ldr	r3, [pc, #96]	@ (8003480 <HAL_GPIO_Init+0x304>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003440:	4a0f      	ldr	r2, [pc, #60]	@ (8003480 <HAL_GPIO_Init+0x304>)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	3301      	adds	r3, #1
 800344a:	61fb      	str	r3, [r7, #28]
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	2b0f      	cmp	r3, #15
 8003450:	f67f aea2 	bls.w	8003198 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	3724      	adds	r7, #36	@ 0x24
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40023800 	.word	0x40023800
 8003468:	40013800 	.word	0x40013800
 800346c:	40020000 	.word	0x40020000
 8003470:	40020400 	.word	0x40020400
 8003474:	40020800 	.word	0x40020800
 8003478:	40020c00 	.word	0x40020c00
 800347c:	40021000 	.word	0x40021000
 8003480:	40013c00 	.word	0x40013c00

08003484 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	887b      	ldrh	r3, [r7, #2]
 8003496:	4013      	ands	r3, r2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800349c:	2301      	movs	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
 80034a0:	e001      	b.n	80034a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034a2:	2300      	movs	r3, #0
 80034a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	807b      	strh	r3, [r7, #2]
 80034c0:	4613      	mov	r3, r2
 80034c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034c4:	787b      	ldrb	r3, [r7, #1]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ca:	887a      	ldrh	r2, [r7, #2]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034d0:	e003      	b.n	80034da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034d2:	887b      	ldrh	r3, [r7, #2]
 80034d4:	041a      	lsls	r2, r3, #16
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	619a      	str	r2, [r3, #24]
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b085      	sub	sp, #20
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	460b      	mov	r3, r1
 80034f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034f8:	887a      	ldrh	r2, [r7, #2]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4013      	ands	r3, r2
 80034fe:	041a      	lsls	r2, r3, #16
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	43d9      	mvns	r1, r3
 8003504:	887b      	ldrh	r3, [r7, #2]
 8003506:	400b      	ands	r3, r1
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	619a      	str	r2, [r3, #24]
}
 800350e:	bf00      	nop
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003526:	4b08      	ldr	r3, [pc, #32]	@ (8003548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003528:	695a      	ldr	r2, [r3, #20]
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	4013      	ands	r3, r2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d006      	beq.n	8003540 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003532:	4a05      	ldr	r2, [pc, #20]	@ (8003548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fd fb58 	bl	8000bf0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40013c00 	.word	0x40013c00

0800354c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e12b      	b.n	80037b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fe fc42 	bl	8001dfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2224      	movs	r2, #36	@ 0x24
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800359e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035b0:	f001 f89a 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 80035b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4a81      	ldr	r2, [pc, #516]	@ (80037c0 <HAL_I2C_Init+0x274>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d807      	bhi.n	80035d0 <HAL_I2C_Init+0x84>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a80      	ldr	r2, [pc, #512]	@ (80037c4 <HAL_I2C_Init+0x278>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	bf94      	ite	ls
 80035c8:	2301      	movls	r3, #1
 80035ca:	2300      	movhi	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	e006      	b.n	80035de <HAL_I2C_Init+0x92>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4a7d      	ldr	r2, [pc, #500]	@ (80037c8 <HAL_I2C_Init+0x27c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	bf94      	ite	ls
 80035d8:	2301      	movls	r3, #1
 80035da:	2300      	movhi	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e0e7      	b.n	80037b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4a78      	ldr	r2, [pc, #480]	@ (80037cc <HAL_I2C_Init+0x280>)
 80035ea:	fba2 2303 	umull	r2, r3, r2, r3
 80035ee:	0c9b      	lsrs	r3, r3, #18
 80035f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	4a6a      	ldr	r2, [pc, #424]	@ (80037c0 <HAL_I2C_Init+0x274>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d802      	bhi.n	8003620 <HAL_I2C_Init+0xd4>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	3301      	adds	r3, #1
 800361e:	e009      	b.n	8003634 <HAL_I2C_Init+0xe8>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	4a69      	ldr	r2, [pc, #420]	@ (80037d0 <HAL_I2C_Init+0x284>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	099b      	lsrs	r3, r3, #6
 8003632:	3301      	adds	r3, #1
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	430b      	orrs	r3, r1
 800363a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003646:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	495c      	ldr	r1, [pc, #368]	@ (80037c0 <HAL_I2C_Init+0x274>)
 8003650:	428b      	cmp	r3, r1
 8003652:	d819      	bhi.n	8003688 <HAL_I2C_Init+0x13c>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1e59      	subs	r1, r3, #1
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003662:	1c59      	adds	r1, r3, #1
 8003664:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003668:	400b      	ands	r3, r1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <HAL_I2C_Init+0x138>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	1e59      	subs	r1, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	fbb1 f3f3 	udiv	r3, r1, r3
 800367c:	3301      	adds	r3, #1
 800367e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003682:	e051      	b.n	8003728 <HAL_I2C_Init+0x1dc>
 8003684:	2304      	movs	r3, #4
 8003686:	e04f      	b.n	8003728 <HAL_I2C_Init+0x1dc>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d111      	bne.n	80036b4 <HAL_I2C_Init+0x168>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	1e58      	subs	r0, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	440b      	add	r3, r1
 800369e:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a2:	3301      	adds	r3, #1
 80036a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf0c      	ite	eq
 80036ac:	2301      	moveq	r3, #1
 80036ae:	2300      	movne	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	e012      	b.n	80036da <HAL_I2C_Init+0x18e>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	1e58      	subs	r0, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6859      	ldr	r1, [r3, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	0099      	lsls	r1, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ca:	3301      	adds	r3, #1
 80036cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_I2C_Init+0x196>
 80036de:	2301      	movs	r3, #1
 80036e0:	e022      	b.n	8003728 <HAL_I2C_Init+0x1dc>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10e      	bne.n	8003708 <HAL_I2C_Init+0x1bc>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1e58      	subs	r0, r3, #1
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6859      	ldr	r1, [r3, #4]
 80036f2:	460b      	mov	r3, r1
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	440b      	add	r3, r1
 80036f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80036fc:	3301      	adds	r3, #1
 80036fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003706:	e00f      	b.n	8003728 <HAL_I2C_Init+0x1dc>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1e58      	subs	r0, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6859      	ldr	r1, [r3, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	0099      	lsls	r1, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	fbb0 f3f3 	udiv	r3, r0, r3
 800371e:	3301      	adds	r3, #1
 8003720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003724:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	6809      	ldr	r1, [r1, #0]
 800372c:	4313      	orrs	r3, r2
 800372e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69da      	ldr	r2, [r3, #28]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003756:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6911      	ldr	r1, [r2, #16]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68d2      	ldr	r2, [r2, #12]
 8003762:	4311      	orrs	r1, r2
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	430b      	orrs	r3, r1
 800376a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	000186a0 	.word	0x000186a0
 80037c4:	001e847f 	.word	0x001e847f
 80037c8:	003d08ff 	.word	0x003d08ff
 80037cc:	431bde83 	.word	0x431bde83
 80037d0:	10624dd3 	.word	0x10624dd3

080037d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af02      	add	r7, sp, #8
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	607a      	str	r2, [r7, #4]
 80037de:	461a      	mov	r2, r3
 80037e0:	460b      	mov	r3, r1
 80037e2:	817b      	strh	r3, [r7, #10]
 80037e4:	4613      	mov	r3, r2
 80037e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037e8:	f7fe fd2c 	bl	8002244 <HAL_GetTick>
 80037ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	f040 80e0 	bne.w	80039bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	2319      	movs	r3, #25
 8003802:	2201      	movs	r2, #1
 8003804:	4970      	ldr	r1, [pc, #448]	@ (80039c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f964 	bl	8003ad4 <I2C_WaitOnFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003812:	2302      	movs	r3, #2
 8003814:	e0d3      	b.n	80039be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_I2C_Master_Transmit+0x50>
 8003820:	2302      	movs	r3, #2
 8003822:	e0cc      	b.n	80039be <HAL_I2C_Master_Transmit+0x1ea>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b01      	cmp	r3, #1
 8003838:	d007      	beq.n	800384a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0201 	orr.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003858:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2221      	movs	r2, #33	@ 0x21
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2210      	movs	r2, #16
 8003866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	893a      	ldrh	r2, [r7, #8]
 800387a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4a50      	ldr	r2, [pc, #320]	@ (80039cc <HAL_I2C_Master_Transmit+0x1f8>)
 800388a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800388c:	8979      	ldrh	r1, [r7, #10]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	6a3a      	ldr	r2, [r7, #32]
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f89c 	bl	80039d0 <I2C_MasterRequestWrite>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e08d      	b.n	80039be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a2:	2300      	movs	r3, #0
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038b8:	e066      	b.n	8003988 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	6a39      	ldr	r1, [r7, #32]
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 fa22 	bl	8003d08 <I2C_WaitOnTXEFlagUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00d      	beq.n	80038e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d107      	bne.n	80038e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e06b      	b.n	80039be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ea:	781a      	ldrb	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b04      	cmp	r3, #4
 8003922:	d11b      	bne.n	800395c <HAL_I2C_Master_Transmit+0x188>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003928:	2b00      	cmp	r3, #0
 800392a:	d017      	beq.n	800395c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003930:	781a      	ldrb	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	6a39      	ldr	r1, [r7, #32]
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 fa19 	bl	8003d98 <I2C_WaitOnBTFFlagUntilTimeout>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00d      	beq.n	8003988 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	2b04      	cmp	r3, #4
 8003972:	d107      	bne.n	8003984 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003982:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e01a      	b.n	80039be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800398c:	2b00      	cmp	r3, #0
 800398e:	d194      	bne.n	80038ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800399e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e000      	b.n	80039be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039bc:	2302      	movs	r3, #2
  }
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	00100002 	.word	0x00100002
 80039cc:	ffff0000 	.word	0xffff0000

080039d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af02      	add	r7, sp, #8
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	460b      	mov	r3, r1
 80039de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d006      	beq.n	80039fa <I2C_MasterRequestWrite+0x2a>
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d003      	beq.n	80039fa <I2C_MasterRequestWrite+0x2a>
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039f8:	d108      	bne.n	8003a0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	e00b      	b.n	8003a24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a10:	2b12      	cmp	r3, #18
 8003a12:	d107      	bne.n	8003a24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f84f 	bl	8003ad4 <I2C_WaitOnFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00d      	beq.n	8003a58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a4a:	d103      	bne.n	8003a54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e035      	b.n	8003ac4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a60:	d108      	bne.n	8003a74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a62:	897b      	ldrh	r3, [r7, #10]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	461a      	mov	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a70:	611a      	str	r2, [r3, #16]
 8003a72:	e01b      	b.n	8003aac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a74:	897b      	ldrh	r3, [r7, #10]
 8003a76:	11db      	asrs	r3, r3, #7
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f003 0306 	and.w	r3, r3, #6
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	f063 030f 	orn	r3, r3, #15
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	490e      	ldr	r1, [pc, #56]	@ (8003acc <I2C_MasterRequestWrite+0xfc>)
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f898 	bl	8003bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e010      	b.n	8003ac4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003aa2:	897b      	ldrh	r3, [r7, #10]
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	4907      	ldr	r1, [pc, #28]	@ (8003ad0 <I2C_MasterRequestWrite+0x100>)
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f888 	bl	8003bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	00010008 	.word	0x00010008
 8003ad0:	00010002 	.word	0x00010002

08003ad4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ae4:	e048      	b.n	8003b78 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d044      	beq.n	8003b78 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aee:	f7fe fba9 	bl	8002244 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d302      	bcc.n	8003b04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d139      	bne.n	8003b78 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	0c1b      	lsrs	r3, r3, #16
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d10d      	bne.n	8003b2a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	43da      	mvns	r2, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf0c      	ite	eq
 8003b20:	2301      	moveq	r3, #1
 8003b22:	2300      	movne	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	461a      	mov	r2, r3
 8003b28:	e00c      	b.n	8003b44 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	43da      	mvns	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	4013      	ands	r3, r2
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bf0c      	ite	eq
 8003b3c:	2301      	moveq	r3, #1
 8003b3e:	2300      	movne	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	461a      	mov	r2, r3
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d116      	bne.n	8003b78 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b64:	f043 0220 	orr.w	r2, r3, #32
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e023      	b.n	8003bc0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	0c1b      	lsrs	r3, r3, #16
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d10d      	bne.n	8003b9e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	43da      	mvns	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	e00c      	b.n	8003bb8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	43da      	mvns	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	79fb      	ldrb	r3, [r7, #7]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d093      	beq.n	8003ae6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bd6:	e071      	b.n	8003cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003be6:	d123      	bne.n	8003c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1c:	f043 0204 	orr.w	r2, r3, #4
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e067      	b.n	8003d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c36:	d041      	beq.n	8003cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c38:	f7fe fb04 	bl	8002244 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d302      	bcc.n	8003c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d136      	bne.n	8003cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	0c1b      	lsrs	r3, r3, #16
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d10c      	bne.n	8003c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	43da      	mvns	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4013      	ands	r3, r2
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	bf14      	ite	ne
 8003c6a:	2301      	movne	r3, #1
 8003c6c:	2300      	moveq	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	e00b      	b.n	8003c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	43da      	mvns	r2, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bf14      	ite	ne
 8003c84:	2301      	movne	r3, #1
 8003c86:	2300      	moveq	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d016      	beq.n	8003cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca8:	f043 0220 	orr.w	r2, r3, #32
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e021      	b.n	8003d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	0c1b      	lsrs	r3, r3, #16
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d10c      	bne.n	8003ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	43da      	mvns	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf14      	ite	ne
 8003cd8:	2301      	movne	r3, #1
 8003cda:	2300      	moveq	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	e00b      	b.n	8003cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	43da      	mvns	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4013      	ands	r3, r2
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	bf14      	ite	ne
 8003cf2:	2301      	movne	r3, #1
 8003cf4:	2300      	moveq	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f47f af6d 	bne.w	8003bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d14:	e034      	b.n	8003d80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f886 	bl	8003e28 <I2C_IsAcknowledgeFailed>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e034      	b.n	8003d90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d028      	beq.n	8003d80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2e:	f7fe fa89 	bl	8002244 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d302      	bcc.n	8003d44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d11d      	bne.n	8003d80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d4e:	2b80      	cmp	r3, #128	@ 0x80
 8003d50:	d016      	beq.n	8003d80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6c:	f043 0220 	orr.w	r2, r3, #32
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e007      	b.n	8003d90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d8a:	2b80      	cmp	r3, #128	@ 0x80
 8003d8c:	d1c3      	bne.n	8003d16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003da4:	e034      	b.n	8003e10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f83e 	bl	8003e28 <I2C_IsAcknowledgeFailed>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e034      	b.n	8003e20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbc:	d028      	beq.n	8003e10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dbe:	f7fe fa41 	bl	8002244 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d302      	bcc.n	8003dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d11d      	bne.n	8003e10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d016      	beq.n	8003e10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfc:	f043 0220 	orr.w	r2, r3, #32
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e007      	b.n	8003e20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d1c3      	bne.n	8003da6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e3e:	d11b      	bne.n	8003e78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e64:	f043 0204 	orr.w	r2, r3, #4
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e267      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d075      	beq.n	8003f92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ea6:	4b88      	ldr	r3, [pc, #544]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 030c 	and.w	r3, r3, #12
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d00c      	beq.n	8003ecc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eb2:	4b85      	ldr	r3, [pc, #532]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d112      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ebe:	4b82      	ldr	r3, [pc, #520]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ec6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eca:	d10b      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ecc:	4b7e      	ldr	r3, [pc, #504]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d05b      	beq.n	8003f90 <HAL_RCC_OscConfig+0x108>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d157      	bne.n	8003f90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e242      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eec:	d106      	bne.n	8003efc <HAL_RCC_OscConfig+0x74>
 8003eee:	4b76      	ldr	r3, [pc, #472]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a75      	ldr	r2, [pc, #468]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	e01d      	b.n	8003f38 <HAL_RCC_OscConfig+0xb0>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f04:	d10c      	bne.n	8003f20 <HAL_RCC_OscConfig+0x98>
 8003f06:	4b70      	ldr	r3, [pc, #448]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a6f      	ldr	r2, [pc, #444]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	4b6d      	ldr	r3, [pc, #436]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a6c      	ldr	r2, [pc, #432]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e00b      	b.n	8003f38 <HAL_RCC_OscConfig+0xb0>
 8003f20:	4b69      	ldr	r3, [pc, #420]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a68      	ldr	r2, [pc, #416]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	4b66      	ldr	r3, [pc, #408]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a65      	ldr	r2, [pc, #404]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d013      	beq.n	8003f68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f40:	f7fe f980 	bl	8002244 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f48:	f7fe f97c 	bl	8002244 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b64      	cmp	r3, #100	@ 0x64
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e207      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	4b5b      	ldr	r3, [pc, #364]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0xc0>
 8003f66:	e014      	b.n	8003f92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fe f96c 	bl	8002244 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f70:	f7fe f968 	bl	8002244 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b64      	cmp	r3, #100	@ 0x64
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e1f3      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f82:	4b51      	ldr	r3, [pc, #324]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0xe8>
 8003f8e:	e000      	b.n	8003f92 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d063      	beq.n	8004066 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003faa:	4b47      	ldr	r3, [pc, #284]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d11c      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fb6:	4b44      	ldr	r3, [pc, #272]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d116      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc2:	4b41      	ldr	r3, [pc, #260]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_RCC_OscConfig+0x152>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d001      	beq.n	8003fda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e1c7      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fda:	4b3b      	ldr	r3, [pc, #236]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	4937      	ldr	r1, [pc, #220]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fee:	e03a      	b.n	8004066 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d020      	beq.n	800403a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff8:	4b34      	ldr	r3, [pc, #208]	@ (80040cc <HAL_RCC_OscConfig+0x244>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffe:	f7fe f921 	bl	8002244 <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004006:	f7fe f91d 	bl	8002244 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e1a8      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004018:	4b2b      	ldr	r3, [pc, #172]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f0      	beq.n	8004006 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004024:	4b28      	ldr	r3, [pc, #160]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	4925      	ldr	r1, [pc, #148]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 8004034:	4313      	orrs	r3, r2
 8004036:	600b      	str	r3, [r1, #0]
 8004038:	e015      	b.n	8004066 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800403a:	4b24      	ldr	r3, [pc, #144]	@ (80040cc <HAL_RCC_OscConfig+0x244>)
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fe f900 	bl	8002244 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004048:	f7fe f8fc 	bl	8002244 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e187      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405a:	4b1b      	ldr	r3, [pc, #108]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d036      	beq.n	80040e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d016      	beq.n	80040a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800407a:	4b15      	ldr	r3, [pc, #84]	@ (80040d0 <HAL_RCC_OscConfig+0x248>)
 800407c:	2201      	movs	r2, #1
 800407e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004080:	f7fe f8e0 	bl	8002244 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004088:	f7fe f8dc 	bl	8002244 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e167      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800409a:	4b0b      	ldr	r3, [pc, #44]	@ (80040c8 <HAL_RCC_OscConfig+0x240>)
 800409c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCC_OscConfig+0x200>
 80040a6:	e01b      	b.n	80040e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040a8:	4b09      	ldr	r3, [pc, #36]	@ (80040d0 <HAL_RCC_OscConfig+0x248>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ae:	f7fe f8c9 	bl	8002244 <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b4:	e00e      	b.n	80040d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040b6:	f7fe f8c5 	bl	8002244 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d907      	bls.n	80040d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e150      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
 80040c8:	40023800 	.word	0x40023800
 80040cc:	42470000 	.word	0x42470000
 80040d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d4:	4b88      	ldr	r3, [pc, #544]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 80040d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1ea      	bne.n	80040b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 8097 	beq.w	800421c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ee:	2300      	movs	r3, #0
 80040f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f2:	4b81      	ldr	r3, [pc, #516]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10f      	bne.n	800411e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	4b7d      	ldr	r3, [pc, #500]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	4a7c      	ldr	r2, [pc, #496]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800410c:	6413      	str	r3, [r2, #64]	@ 0x40
 800410e:	4b7a      	ldr	r3, [pc, #488]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004116:	60bb      	str	r3, [r7, #8]
 8004118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411e:	4b77      	ldr	r3, [pc, #476]	@ (80042fc <HAL_RCC_OscConfig+0x474>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d118      	bne.n	800415c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800412a:	4b74      	ldr	r3, [pc, #464]	@ (80042fc <HAL_RCC_OscConfig+0x474>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a73      	ldr	r2, [pc, #460]	@ (80042fc <HAL_RCC_OscConfig+0x474>)
 8004130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004136:	f7fe f885 	bl	8002244 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413e:	f7fe f881 	bl	8002244 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e10c      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004150:	4b6a      	ldr	r3, [pc, #424]	@ (80042fc <HAL_RCC_OscConfig+0x474>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d106      	bne.n	8004172 <HAL_RCC_OscConfig+0x2ea>
 8004164:	4b64      	ldr	r3, [pc, #400]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004168:	4a63      	ldr	r2, [pc, #396]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004170:	e01c      	b.n	80041ac <HAL_RCC_OscConfig+0x324>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	2b05      	cmp	r3, #5
 8004178:	d10c      	bne.n	8004194 <HAL_RCC_OscConfig+0x30c>
 800417a:	4b5f      	ldr	r3, [pc, #380]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417e:	4a5e      	ldr	r2, [pc, #376]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004180:	f043 0304 	orr.w	r3, r3, #4
 8004184:	6713      	str	r3, [r2, #112]	@ 0x70
 8004186:	4b5c      	ldr	r3, [pc, #368]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418a:	4a5b      	ldr	r2, [pc, #364]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	6713      	str	r3, [r2, #112]	@ 0x70
 8004192:	e00b      	b.n	80041ac <HAL_RCC_OscConfig+0x324>
 8004194:	4b58      	ldr	r3, [pc, #352]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004198:	4a57      	ldr	r2, [pc, #348]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 800419a:	f023 0301 	bic.w	r3, r3, #1
 800419e:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a0:	4b55      	ldr	r3, [pc, #340]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 80041a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a4:	4a54      	ldr	r2, [pc, #336]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 80041a6:	f023 0304 	bic.w	r3, r3, #4
 80041aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d015      	beq.n	80041e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b4:	f7fe f846 	bl	8002244 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041bc:	f7fe f842 	bl	8002244 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e0cb      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d2:	4b49      	ldr	r3, [pc, #292]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0ee      	beq.n	80041bc <HAL_RCC_OscConfig+0x334>
 80041de:	e014      	b.n	800420a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e0:	f7fe f830 	bl	8002244 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e6:	e00a      	b.n	80041fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e8:	f7fe f82c 	bl	8002244 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e0b5      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041fe:	4b3e      	ldr	r3, [pc, #248]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1ee      	bne.n	80041e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800420a:	7dfb      	ldrb	r3, [r7, #23]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d105      	bne.n	800421c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004210:	4b39      	ldr	r3, [pc, #228]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004214:	4a38      	ldr	r2, [pc, #224]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004216:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800421a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80a1 	beq.w	8004368 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004226:	4b34      	ldr	r3, [pc, #208]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	2b08      	cmp	r3, #8
 8004230:	d05c      	beq.n	80042ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	2b02      	cmp	r3, #2
 8004238:	d141      	bne.n	80042be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800423a:	4b31      	ldr	r3, [pc, #196]	@ (8004300 <HAL_RCC_OscConfig+0x478>)
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004240:	f7fe f800 	bl	8002244 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004248:	f7fd fffc 	bl	8002244 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e087      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425a:	4b27      	ldr	r3, [pc, #156]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1f0      	bne.n	8004248 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69da      	ldr	r2, [r3, #28]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004274:	019b      	lsls	r3, r3, #6
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427c:	085b      	lsrs	r3, r3, #1
 800427e:	3b01      	subs	r3, #1
 8004280:	041b      	lsls	r3, r3, #16
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004288:	061b      	lsls	r3, r3, #24
 800428a:	491b      	ldr	r1, [pc, #108]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 800428c:	4313      	orrs	r3, r2
 800428e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004290:	4b1b      	ldr	r3, [pc, #108]	@ (8004300 <HAL_RCC_OscConfig+0x478>)
 8004292:	2201      	movs	r2, #1
 8004294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004296:	f7fd ffd5 	bl	8002244 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800429e:	f7fd ffd1 	bl	8002244 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e05c      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b0:	4b11      	ldr	r3, [pc, #68]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0f0      	beq.n	800429e <HAL_RCC_OscConfig+0x416>
 80042bc:	e054      	b.n	8004368 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042be:	4b10      	ldr	r3, [pc, #64]	@ (8004300 <HAL_RCC_OscConfig+0x478>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c4:	f7fd ffbe 	bl	8002244 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042cc:	f7fd ffba 	bl	8002244 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e045      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042de:	4b06      	ldr	r3, [pc, #24]	@ (80042f8 <HAL_RCC_OscConfig+0x470>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0x444>
 80042ea:	e03d      	b.n	8004368 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d107      	bne.n	8004304 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e038      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40007000 	.word	0x40007000
 8004300:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004304:	4b1b      	ldr	r3, [pc, #108]	@ (8004374 <HAL_RCC_OscConfig+0x4ec>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d028      	beq.n	8004364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800431c:	429a      	cmp	r2, r3
 800431e:	d121      	bne.n	8004364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432a:	429a      	cmp	r2, r3
 800432c:	d11a      	bne.n	8004364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004334:	4013      	ands	r3, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800433a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800433c:	4293      	cmp	r3, r2
 800433e:	d111      	bne.n	8004364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434a:	085b      	lsrs	r3, r3, #1
 800434c:	3b01      	subs	r3, #1
 800434e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004350:	429a      	cmp	r2, r3
 8004352:	d107      	bne.n	8004364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004360:	429a      	cmp	r2, r3
 8004362:	d001      	beq.n	8004368 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40023800 	.word	0x40023800

08004378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0cc      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800438c:	4b68      	ldr	r3, [pc, #416]	@ (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d90c      	bls.n	80043b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439a:	4b65      	ldr	r3, [pc, #404]	@ (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a2:	4b63      	ldr	r3, [pc, #396]	@ (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d001      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0b8      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d020      	beq.n	8004402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043cc:	4b59      	ldr	r3, [pc, #356]	@ (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	4a58      	ldr	r2, [pc, #352]	@ (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80043d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043e4:	4b53      	ldr	r3, [pc, #332]	@ (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	4a52      	ldr	r2, [pc, #328]	@ (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80043ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043f0:	4b50      	ldr	r3, [pc, #320]	@ (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	494d      	ldr	r1, [pc, #308]	@ (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d044      	beq.n	8004498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d107      	bne.n	8004426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004416:	4b47      	ldr	r3, [pc, #284]	@ (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d119      	bne.n	8004456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e07f      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d003      	beq.n	8004436 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004432:	2b03      	cmp	r3, #3
 8004434:	d107      	bne.n	8004446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004436:	4b3f      	ldr	r3, [pc, #252]	@ (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d109      	bne.n	8004456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e06f      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004446:	4b3b      	ldr	r3, [pc, #236]	@ (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e067      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004456:	4b37      	ldr	r3, [pc, #220]	@ (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f023 0203 	bic.w	r2, r3, #3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	4934      	ldr	r1, [pc, #208]	@ (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004464:	4313      	orrs	r3, r2
 8004466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004468:	f7fd feec 	bl	8002244 <HAL_GetTick>
 800446c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446e:	e00a      	b.n	8004486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004470:	f7fd fee8 	bl	8002244 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800447e:	4293      	cmp	r3, r2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e04f      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004486:	4b2b      	ldr	r3, [pc, #172]	@ (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 020c 	and.w	r2, r3, #12
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	429a      	cmp	r2, r3
 8004496:	d1eb      	bne.n	8004470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004498:	4b25      	ldr	r3, [pc, #148]	@ (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d20c      	bcs.n	80044c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a6:	4b22      	ldr	r3, [pc, #136]	@ (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ae:	4b20      	ldr	r3, [pc, #128]	@ (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d001      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e032      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d008      	beq.n	80044de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044cc:	4b19      	ldr	r3, [pc, #100]	@ (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	4916      	ldr	r1, [pc, #88]	@ (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d009      	beq.n	80044fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ea:	4b12      	ldr	r3, [pc, #72]	@ (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	490e      	ldr	r1, [pc, #56]	@ (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044fe:	f000 f821 	bl	8004544 <HAL_RCC_GetSysClockFreq>
 8004502:	4602      	mov	r2, r0
 8004504:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	091b      	lsrs	r3, r3, #4
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	490a      	ldr	r1, [pc, #40]	@ (8004538 <HAL_RCC_ClockConfig+0x1c0>)
 8004510:	5ccb      	ldrb	r3, [r1, r3]
 8004512:	fa22 f303 	lsr.w	r3, r2, r3
 8004516:	4a09      	ldr	r2, [pc, #36]	@ (800453c <HAL_RCC_ClockConfig+0x1c4>)
 8004518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800451a:	4b09      	ldr	r3, [pc, #36]	@ (8004540 <HAL_RCC_ClockConfig+0x1c8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fd fd1c 	bl	8001f5c <HAL_InitTick>

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40023c00 	.word	0x40023c00
 8004534:	40023800 	.word	0x40023800
 8004538:	0800898c 	.word	0x0800898c
 800453c:	200000b0 	.word	0x200000b0
 8004540:	200000b4 	.word	0x200000b4

08004544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004548:	b090      	sub	sp, #64	@ 0x40
 800454a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800455c:	4b59      	ldr	r3, [pc, #356]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 030c 	and.w	r3, r3, #12
 8004564:	2b08      	cmp	r3, #8
 8004566:	d00d      	beq.n	8004584 <HAL_RCC_GetSysClockFreq+0x40>
 8004568:	2b08      	cmp	r3, #8
 800456a:	f200 80a1 	bhi.w	80046b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_RCC_GetSysClockFreq+0x34>
 8004572:	2b04      	cmp	r3, #4
 8004574:	d003      	beq.n	800457e <HAL_RCC_GetSysClockFreq+0x3a>
 8004576:	e09b      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004578:	4b53      	ldr	r3, [pc, #332]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800457a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800457c:	e09b      	b.n	80046b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800457e:	4b53      	ldr	r3, [pc, #332]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x188>)
 8004580:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004582:	e098      	b.n	80046b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004584:	4b4f      	ldr	r3, [pc, #316]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800458c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800458e:	4b4d      	ldr	r3, [pc, #308]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d028      	beq.n	80045ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800459a:	4b4a      	ldr	r3, [pc, #296]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	099b      	lsrs	r3, r3, #6
 80045a0:	2200      	movs	r2, #0
 80045a2:	623b      	str	r3, [r7, #32]
 80045a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80045ac:	2100      	movs	r1, #0
 80045ae:	4b47      	ldr	r3, [pc, #284]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x188>)
 80045b0:	fb03 f201 	mul.w	r2, r3, r1
 80045b4:	2300      	movs	r3, #0
 80045b6:	fb00 f303 	mul.w	r3, r0, r3
 80045ba:	4413      	add	r3, r2
 80045bc:	4a43      	ldr	r2, [pc, #268]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x188>)
 80045be:	fba0 1202 	umull	r1, r2, r0, r2
 80045c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045c4:	460a      	mov	r2, r1
 80045c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80045c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045ca:	4413      	add	r3, r2
 80045cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d0:	2200      	movs	r2, #0
 80045d2:	61bb      	str	r3, [r7, #24]
 80045d4:	61fa      	str	r2, [r7, #28]
 80045d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80045de:	f7fb fe57 	bl	8000290 <__aeabi_uldivmod>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4613      	mov	r3, r2
 80045e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045ea:	e053      	b.n	8004694 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ec:	4b35      	ldr	r3, [pc, #212]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	099b      	lsrs	r3, r3, #6
 80045f2:	2200      	movs	r2, #0
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	617a      	str	r2, [r7, #20]
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80045fe:	f04f 0b00 	mov.w	fp, #0
 8004602:	4652      	mov	r2, sl
 8004604:	465b      	mov	r3, fp
 8004606:	f04f 0000 	mov.w	r0, #0
 800460a:	f04f 0100 	mov.w	r1, #0
 800460e:	0159      	lsls	r1, r3, #5
 8004610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004614:	0150      	lsls	r0, r2, #5
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	ebb2 080a 	subs.w	r8, r2, sl
 800461e:	eb63 090b 	sbc.w	r9, r3, fp
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	f04f 0300 	mov.w	r3, #0
 800462a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800462e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004632:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004636:	ebb2 0408 	subs.w	r4, r2, r8
 800463a:	eb63 0509 	sbc.w	r5, r3, r9
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	00eb      	lsls	r3, r5, #3
 8004648:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800464c:	00e2      	lsls	r2, r4, #3
 800464e:	4614      	mov	r4, r2
 8004650:	461d      	mov	r5, r3
 8004652:	eb14 030a 	adds.w	r3, r4, sl
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	eb45 030b 	adc.w	r3, r5, fp
 800465c:	607b      	str	r3, [r7, #4]
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800466a:	4629      	mov	r1, r5
 800466c:	028b      	lsls	r3, r1, #10
 800466e:	4621      	mov	r1, r4
 8004670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004674:	4621      	mov	r1, r4
 8004676:	028a      	lsls	r2, r1, #10
 8004678:	4610      	mov	r0, r2
 800467a:	4619      	mov	r1, r3
 800467c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800467e:	2200      	movs	r2, #0
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	60fa      	str	r2, [r7, #12]
 8004684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004688:	f7fb fe02 	bl	8000290 <__aeabi_uldivmod>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4613      	mov	r3, r2
 8004692:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004694:	4b0b      	ldr	r3, [pc, #44]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	0c1b      	lsrs	r3, r3, #16
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	3301      	adds	r3, #1
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80046a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046ae:	e002      	b.n	80046b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046b0:	4b05      	ldr	r3, [pc, #20]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80046b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3740      	adds	r7, #64	@ 0x40
 80046bc:	46bd      	mov	sp, r7
 80046be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046c2:	bf00      	nop
 80046c4:	40023800 	.word	0x40023800
 80046c8:	00f42400 	.word	0x00f42400
 80046cc:	017d7840 	.word	0x017d7840

080046d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d4:	4b03      	ldr	r3, [pc, #12]	@ (80046e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046d6:	681b      	ldr	r3, [r3, #0]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	200000b0 	.word	0x200000b0

080046e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046ec:	f7ff fff0 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4b05      	ldr	r3, [pc, #20]	@ (8004708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	0a9b      	lsrs	r3, r3, #10
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	4903      	ldr	r1, [pc, #12]	@ (800470c <HAL_RCC_GetPCLK1Freq+0x24>)
 80046fe:	5ccb      	ldrb	r3, [r1, r3]
 8004700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004704:	4618      	mov	r0, r3
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40023800 	.word	0x40023800
 800470c:	0800899c 	.word	0x0800899c

08004710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004714:	f7ff ffdc 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 8004718:	4602      	mov	r2, r0
 800471a:	4b05      	ldr	r3, [pc, #20]	@ (8004730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	0b5b      	lsrs	r3, r3, #13
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	4903      	ldr	r1, [pc, #12]	@ (8004734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004726:	5ccb      	ldrb	r3, [r1, r3]
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40023800 	.word	0x40023800
 8004734:	0800899c 	.word	0x0800899c

08004738 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	220f      	movs	r2, #15
 8004746:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004748:	4b12      	ldr	r3, [pc, #72]	@ (8004794 <HAL_RCC_GetClockConfig+0x5c>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 0203 	and.w	r2, r3, #3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004754:	4b0f      	ldr	r3, [pc, #60]	@ (8004794 <HAL_RCC_GetClockConfig+0x5c>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004760:	4b0c      	ldr	r3, [pc, #48]	@ (8004794 <HAL_RCC_GetClockConfig+0x5c>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800476c:	4b09      	ldr	r3, [pc, #36]	@ (8004794 <HAL_RCC_GetClockConfig+0x5c>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	08db      	lsrs	r3, r3, #3
 8004772:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800477a:	4b07      	ldr	r3, [pc, #28]	@ (8004798 <HAL_RCC_GetClockConfig+0x60>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0207 	and.w	r2, r3, #7
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	601a      	str	r2, [r3, #0]
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800
 8004798:	40023c00 	.word	0x40023c00

0800479c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e07b      	b.n	80048a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d108      	bne.n	80047c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047be:	d009      	beq.n	80047d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	61da      	str	r2, [r3, #28]
 80047c6:	e005      	b.n	80047d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fd fb4c 	bl	8001e8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800480a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004858:	ea42 0103 	orr.w	r1, r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004860:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	0c1b      	lsrs	r3, r3, #16
 8004872:	f003 0104 	and.w	r1, r3, #4
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487a:	f003 0210 	and.w	r2, r3, #16
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69da      	ldr	r2, [r3, #28]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004894:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b088      	sub	sp, #32
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	603b      	str	r3, [r7, #0]
 80048ba:	4613      	mov	r3, r2
 80048bc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048be:	f7fd fcc1 	bl	8002244 <HAL_GetTick>
 80048c2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80048c4:	88fb      	ldrh	r3, [r7, #6]
 80048c6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d001      	beq.n	80048d8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80048d4:	2302      	movs	r3, #2
 80048d6:	e12a      	b.n	8004b2e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <HAL_SPI_Transmit+0x36>
 80048de:	88fb      	ldrh	r3, [r7, #6]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e122      	b.n	8004b2e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <HAL_SPI_Transmit+0x48>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e11b      	b.n	8004b2e <HAL_SPI_Transmit+0x280>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2203      	movs	r2, #3
 8004902:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	88fa      	ldrh	r2, [r7, #6]
 8004916:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	88fa      	ldrh	r2, [r7, #6]
 800491c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004944:	d10f      	bne.n	8004966 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004954:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004964:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004970:	2b40      	cmp	r3, #64	@ 0x40
 8004972:	d007      	beq.n	8004984 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004982:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800498c:	d152      	bne.n	8004a34 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <HAL_SPI_Transmit+0xee>
 8004996:	8b7b      	ldrh	r3, [r7, #26]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d145      	bne.n	8004a28 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a0:	881a      	ldrh	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ac:	1c9a      	adds	r2, r3, #2
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049c0:	e032      	b.n	8004a28 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d112      	bne.n	80049f6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d4:	881a      	ldrh	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e0:	1c9a      	adds	r2, r3, #2
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80049f4:	e018      	b.n	8004a28 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049f6:	f7fd fc25 	bl	8002244 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d803      	bhi.n	8004a0e <HAL_SPI_Transmit+0x160>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0c:	d102      	bne.n	8004a14 <HAL_SPI_Transmit+0x166>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d109      	bne.n	8004a28 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e082      	b.n	8004b2e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1c7      	bne.n	80049c2 <HAL_SPI_Transmit+0x114>
 8004a32:	e053      	b.n	8004adc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <HAL_SPI_Transmit+0x194>
 8004a3c:	8b7b      	ldrh	r3, [r7, #26]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d147      	bne.n	8004ad2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	330c      	adds	r3, #12
 8004a4c:	7812      	ldrb	r2, [r2, #0]
 8004a4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a68:	e033      	b.n	8004ad2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d113      	bne.n	8004aa0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	330c      	adds	r3, #12
 8004a82:	7812      	ldrb	r2, [r2, #0]
 8004a84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a9e:	e018      	b.n	8004ad2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aa0:	f7fd fbd0 	bl	8002244 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d803      	bhi.n	8004ab8 <HAL_SPI_Transmit+0x20a>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab6:	d102      	bne.n	8004abe <HAL_SPI_Transmit+0x210>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e02d      	b.n	8004b2e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1c6      	bne.n	8004a6a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004adc:	69fa      	ldr	r2, [r7, #28]
 8004ade:	6839      	ldr	r1, [r7, #0]
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 fbd9 	bl	8005298 <SPI_EndRxTxTransaction>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10a      	bne.n	8004b10 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
  }
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3720      	adds	r7, #32
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b088      	sub	sp, #32
 8004b3a:	af02      	add	r7, sp, #8
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	603b      	str	r3, [r7, #0]
 8004b42:	4613      	mov	r3, r2
 8004b44:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d001      	beq.n	8004b56 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004b52:	2302      	movs	r3, #2
 8004b54:	e104      	b.n	8004d60 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <HAL_SPI_Receive+0x2c>
 8004b5c:	88fb      	ldrh	r3, [r7, #6]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e0fc      	b.n	8004d60 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b6e:	d112      	bne.n	8004b96 <HAL_SPI_Receive+0x60>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10e      	bne.n	8004b96 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2204      	movs	r2, #4
 8004b7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b80:	88fa      	ldrh	r2, [r7, #6]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	4613      	mov	r3, r2
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	68b9      	ldr	r1, [r7, #8]
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f8eb 	bl	8004d68 <HAL_SPI_TransmitReceive>
 8004b92:	4603      	mov	r3, r0
 8004b94:	e0e4      	b.n	8004d60 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b96:	f7fd fb55 	bl	8002244 <HAL_GetTick>
 8004b9a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d101      	bne.n	8004baa <HAL_SPI_Receive+0x74>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e0da      	b.n	8004d60 <HAL_SPI_Receive+0x22a>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	88fa      	ldrh	r2, [r7, #6]
 8004bca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	88fa      	ldrh	r2, [r7, #6]
 8004bd0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bf8:	d10f      	bne.n	8004c1a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c18:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c24:	2b40      	cmp	r3, #64	@ 0x40
 8004c26:	d007      	beq.n	8004c38 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c36:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d170      	bne.n	8004d22 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c40:	e035      	b.n	8004cae <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d115      	bne.n	8004c7c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f103 020c 	add.w	r2, r3, #12
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5c:	7812      	ldrb	r2, [r2, #0]
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c7a:	e018      	b.n	8004cae <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c7c:	f7fd fae2 	bl	8002244 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d803      	bhi.n	8004c94 <HAL_SPI_Receive+0x15e>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	d102      	bne.n	8004c9a <HAL_SPI_Receive+0x164>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d109      	bne.n	8004cae <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e058      	b.n	8004d60 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1c4      	bne.n	8004c42 <HAL_SPI_Receive+0x10c>
 8004cb8:	e038      	b.n	8004d2c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d113      	bne.n	8004cf0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd2:	b292      	uxth	r2, r2
 8004cd4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cda:	1c9a      	adds	r2, r3, #2
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004cee:	e018      	b.n	8004d22 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cf0:	f7fd faa8 	bl	8002244 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d803      	bhi.n	8004d08 <HAL_SPI_Receive+0x1d2>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d06:	d102      	bne.n	8004d0e <HAL_SPI_Receive+0x1d8>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d109      	bne.n	8004d22 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e01e      	b.n	8004d60 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1c6      	bne.n	8004cba <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	6839      	ldr	r1, [r7, #0]
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 fa4b 	bl	80051cc <SPI_EndRxTransaction>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
  }
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08a      	sub	sp, #40	@ 0x28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d76:	2301      	movs	r3, #1
 8004d78:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d7a:	f7fd fa63 	bl	8002244 <HAL_GetTick>
 8004d7e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d86:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004d8e:	887b      	ldrh	r3, [r7, #2]
 8004d90:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d92:	7ffb      	ldrb	r3, [r7, #31]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d00c      	beq.n	8004db2 <HAL_SPI_TransmitReceive+0x4a>
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d9e:	d106      	bne.n	8004dae <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <HAL_SPI_TransmitReceive+0x46>
 8004da8:	7ffb      	ldrb	r3, [r7, #31]
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d001      	beq.n	8004db2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004dae:	2302      	movs	r3, #2
 8004db0:	e17f      	b.n	80050b2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <HAL_SPI_TransmitReceive+0x5c>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <HAL_SPI_TransmitReceive+0x5c>
 8004dbe:	887b      	ldrh	r3, [r7, #2]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e174      	b.n	80050b2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <HAL_SPI_TransmitReceive+0x6e>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	e16d      	b.n	80050b2 <HAL_SPI_TransmitReceive+0x34a>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d003      	beq.n	8004df2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2205      	movs	r2, #5
 8004dee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	887a      	ldrh	r2, [r7, #2]
 8004e02:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	887a      	ldrh	r2, [r7, #2]
 8004e08:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	887a      	ldrh	r2, [r7, #2]
 8004e14:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	887a      	ldrh	r2, [r7, #2]
 8004e1a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e32:	2b40      	cmp	r3, #64	@ 0x40
 8004e34:	d007      	beq.n	8004e46 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e4e:	d17e      	bne.n	8004f4e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <HAL_SPI_TransmitReceive+0xf6>
 8004e58:	8afb      	ldrh	r3, [r7, #22]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d16c      	bne.n	8004f38 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e62:	881a      	ldrh	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6e:	1c9a      	adds	r2, r3, #2
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e82:	e059      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d11b      	bne.n	8004eca <HAL_SPI_TransmitReceive+0x162>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d016      	beq.n	8004eca <HAL_SPI_TransmitReceive+0x162>
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d113      	bne.n	8004eca <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea6:	881a      	ldrh	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb2:	1c9a      	adds	r2, r3, #2
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d119      	bne.n	8004f0c <HAL_SPI_TransmitReceive+0x1a4>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d014      	beq.n	8004f0c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eec:	b292      	uxth	r2, r2
 8004eee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef4:	1c9a      	adds	r2, r3, #2
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f0c:	f7fd f99a 	bl	8002244 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d80d      	bhi.n	8004f38 <HAL_SPI_TransmitReceive+0x1d0>
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f22:	d009      	beq.n	8004f38 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e0bc      	b.n	80050b2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1a0      	bne.n	8004e84 <HAL_SPI_TransmitReceive+0x11c>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d19b      	bne.n	8004e84 <HAL_SPI_TransmitReceive+0x11c>
 8004f4c:	e082      	b.n	8005054 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <HAL_SPI_TransmitReceive+0x1f4>
 8004f56:	8afb      	ldrh	r3, [r7, #22]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d171      	bne.n	8005040 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	330c      	adds	r3, #12
 8004f66:	7812      	ldrb	r2, [r2, #0]
 8004f68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f82:	e05d      	b.n	8005040 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d11c      	bne.n	8004fcc <HAL_SPI_TransmitReceive+0x264>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d017      	beq.n	8004fcc <HAL_SPI_TransmitReceive+0x264>
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d114      	bne.n	8004fcc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	330c      	adds	r3, #12
 8004fac:	7812      	ldrb	r2, [r2, #0]
 8004fae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d119      	bne.n	800500e <HAL_SPI_TransmitReceive+0x2a6>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d014      	beq.n	800500e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005000:	b29b      	uxth	r3, r3
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800500a:	2301      	movs	r3, #1
 800500c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800500e:	f7fd f919 	bl	8002244 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800501a:	429a      	cmp	r2, r3
 800501c:	d803      	bhi.n	8005026 <HAL_SPI_TransmitReceive+0x2be>
 800501e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005024:	d102      	bne.n	800502c <HAL_SPI_TransmitReceive+0x2c4>
 8005026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005028:	2b00      	cmp	r3, #0
 800502a:	d109      	bne.n	8005040 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e038      	b.n	80050b2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d19c      	bne.n	8004f84 <HAL_SPI_TransmitReceive+0x21c>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800504e:	b29b      	uxth	r3, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	d197      	bne.n	8004f84 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005054:	6a3a      	ldr	r2, [r7, #32]
 8005056:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 f91d 	bl	8005298 <SPI_EndRxTxTransaction>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d008      	beq.n	8005076 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e01d      	b.n	80050b2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10a      	bne.n	8005094 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800507e:	2300      	movs	r3, #0
 8005080:	613b      	str	r3, [r7, #16]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e000      	b.n	80050b2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80050b0:	2300      	movs	r3, #0
  }
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3728      	adds	r7, #40	@ 0x28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	4613      	mov	r3, r2
 80050ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050cc:	f7fd f8ba 	bl	8002244 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d4:	1a9b      	subs	r3, r3, r2
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	4413      	add	r3, r2
 80050da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050dc:	f7fd f8b2 	bl	8002244 <HAL_GetTick>
 80050e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050e2:	4b39      	ldr	r3, [pc, #228]	@ (80051c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	015b      	lsls	r3, r3, #5
 80050e8:	0d1b      	lsrs	r3, r3, #20
 80050ea:	69fa      	ldr	r2, [r7, #28]
 80050ec:	fb02 f303 	mul.w	r3, r2, r3
 80050f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050f2:	e055      	b.n	80051a0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fa:	d051      	beq.n	80051a0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050fc:	f7fd f8a2 	bl	8002244 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	69fa      	ldr	r2, [r7, #28]
 8005108:	429a      	cmp	r2, r3
 800510a:	d902      	bls.n	8005112 <SPI_WaitFlagStateUntilTimeout+0x56>
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d13d      	bne.n	800518e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005120:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800512a:	d111      	bne.n	8005150 <SPI_WaitFlagStateUntilTimeout+0x94>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005134:	d004      	beq.n	8005140 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800513e:	d107      	bne.n	8005150 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800514e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005154:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005158:	d10f      	bne.n	800517a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005178:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e018      	b.n	80051c0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d102      	bne.n	800519a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	61fb      	str	r3, [r7, #28]
 8005198:	e002      	b.n	80051a0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	3b01      	subs	r3, #1
 800519e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	4013      	ands	r3, r2
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	bf0c      	ite	eq
 80051b0:	2301      	moveq	r3, #1
 80051b2:	2300      	movne	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d19a      	bne.n	80050f4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3720      	adds	r7, #32
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	200000b0 	.word	0x200000b0

080051cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af02      	add	r7, sp, #8
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051e0:	d111      	bne.n	8005206 <SPI_EndRxTransaction+0x3a>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051ea:	d004      	beq.n	80051f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051f4:	d107      	bne.n	8005206 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005204:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800520e:	d12a      	bne.n	8005266 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005218:	d012      	beq.n	8005240 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2200      	movs	r2, #0
 8005222:	2180      	movs	r1, #128	@ 0x80
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f7ff ff49 	bl	80050bc <SPI_WaitFlagStateUntilTimeout>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d02d      	beq.n	800528c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005234:	f043 0220 	orr.w	r2, r3, #32
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e026      	b.n	800528e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2200      	movs	r2, #0
 8005248:	2101      	movs	r1, #1
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f7ff ff36 	bl	80050bc <SPI_WaitFlagStateUntilTimeout>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d01a      	beq.n	800528c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800525a:	f043 0220 	orr.w	r2, r3, #32
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e013      	b.n	800528e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2200      	movs	r2, #0
 800526e:	2101      	movs	r1, #1
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f7ff ff23 	bl	80050bc <SPI_WaitFlagStateUntilTimeout>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d007      	beq.n	800528c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005280:	f043 0220 	orr.w	r2, r3, #32
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e000      	b.n	800528e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af02      	add	r7, sp, #8
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2201      	movs	r2, #1
 80052ac:	2102      	movs	r1, #2
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f7ff ff04 	bl	80050bc <SPI_WaitFlagStateUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d007      	beq.n	80052ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052be:	f043 0220 	orr.w	r2, r3, #32
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e032      	b.n	8005330 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005338 <SPI_EndRxTxTransaction+0xa0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a1b      	ldr	r2, [pc, #108]	@ (800533c <SPI_EndRxTxTransaction+0xa4>)
 80052d0:	fba2 2303 	umull	r2, r3, r2, r3
 80052d4:	0d5b      	lsrs	r3, r3, #21
 80052d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80052da:	fb02 f303 	mul.w	r3, r2, r3
 80052de:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052e8:	d112      	bne.n	8005310 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2200      	movs	r2, #0
 80052f2:	2180      	movs	r1, #128	@ 0x80
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f7ff fee1 	bl	80050bc <SPI_WaitFlagStateUntilTimeout>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d016      	beq.n	800532e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005304:	f043 0220 	orr.w	r2, r3, #32
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e00f      	b.n	8005330 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	3b01      	subs	r3, #1
 800531a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005326:	2b80      	cmp	r3, #128	@ 0x80
 8005328:	d0f2      	beq.n	8005310 <SPI_EndRxTxTransaction+0x78>
 800532a:	e000      	b.n	800532e <SPI_EndRxTxTransaction+0x96>
        break;
 800532c:	bf00      	nop
  }

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	200000b0 	.word	0x200000b0
 800533c:	165e9f81 	.word	0x165e9f81

08005340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e041      	b.n	80053d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f839 	bl	80053de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3304      	adds	r3, #4
 800537c:	4619      	mov	r1, r3
 800537e:	4610      	mov	r0, r2
 8005380:	f000 f9b2 	bl	80056e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80053e6:	bf00      	nop
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
	...

080053f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	d001      	beq.n	800540c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e044      	b.n	8005496 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a1e      	ldr	r2, [pc, #120]	@ (80054a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d018      	beq.n	8005460 <HAL_TIM_Base_Start_IT+0x6c>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005436:	d013      	beq.n	8005460 <HAL_TIM_Base_Start_IT+0x6c>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1a      	ldr	r2, [pc, #104]	@ (80054a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00e      	beq.n	8005460 <HAL_TIM_Base_Start_IT+0x6c>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a19      	ldr	r2, [pc, #100]	@ (80054ac <HAL_TIM_Base_Start_IT+0xb8>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d009      	beq.n	8005460 <HAL_TIM_Base_Start_IT+0x6c>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a17      	ldr	r2, [pc, #92]	@ (80054b0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d004      	beq.n	8005460 <HAL_TIM_Base_Start_IT+0x6c>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a16      	ldr	r2, [pc, #88]	@ (80054b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d111      	bne.n	8005484 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b06      	cmp	r3, #6
 8005470:	d010      	beq.n	8005494 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f042 0201 	orr.w	r2, r2, #1
 8005480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005482:	e007      	b.n	8005494 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0201 	orr.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	40010000 	.word	0x40010000
 80054a8:	40000400 	.word	0x40000400
 80054ac:	40000800 	.word	0x40000800
 80054b0:	40000c00 	.word	0x40000c00
 80054b4:	40014000 	.word	0x40014000

080054b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d020      	beq.n	800551c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01b      	beq.n	800551c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0202 	mvn.w	r2, #2
 80054ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f8d2 	bl	80056ac <HAL_TIM_IC_CaptureCallback>
 8005508:	e005      	b.n	8005516 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f8c4 	bl	8005698 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f8d5 	bl	80056c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	f003 0304 	and.w	r3, r3, #4
 8005522:	2b00      	cmp	r3, #0
 8005524:	d020      	beq.n	8005568 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d01b      	beq.n	8005568 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f06f 0204 	mvn.w	r2, #4
 8005538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2202      	movs	r2, #2
 800553e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f8ac 	bl	80056ac <HAL_TIM_IC_CaptureCallback>
 8005554:	e005      	b.n	8005562 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f89e 	bl	8005698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f8af 	bl	80056c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f003 0308 	and.w	r3, r3, #8
 800556e:	2b00      	cmp	r3, #0
 8005570:	d020      	beq.n	80055b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01b      	beq.n	80055b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f06f 0208 	mvn.w	r2, #8
 8005584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2204      	movs	r2, #4
 800558a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f886 	bl	80056ac <HAL_TIM_IC_CaptureCallback>
 80055a0:	e005      	b.n	80055ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f878 	bl	8005698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f889 	bl	80056c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f003 0310 	and.w	r3, r3, #16
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d020      	beq.n	8005600 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f003 0310 	and.w	r3, r3, #16
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d01b      	beq.n	8005600 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0210 	mvn.w	r2, #16
 80055d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2208      	movs	r2, #8
 80055d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f860 	bl	80056ac <HAL_TIM_IC_CaptureCallback>
 80055ec:	e005      	b.n	80055fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f852 	bl	8005698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f863 	bl	80056c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00c      	beq.n	8005624 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	d007      	beq.n	8005624 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f06f 0201 	mvn.w	r2, #1
 800561c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fb feaa 	bl	8001378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00c      	beq.n	8005648 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005634:	2b00      	cmp	r3, #0
 8005636:	d007      	beq.n	8005648 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f8e0 	bl	8005808 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00c      	beq.n	800566c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005658:	2b00      	cmp	r3, #0
 800565a:	d007      	beq.n	800566c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f834 	bl	80056d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f003 0320 	and.w	r3, r3, #32
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00c      	beq.n	8005690 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f003 0320 	and.w	r3, r3, #32
 800567c:	2b00      	cmp	r3, #0
 800567e:	d007      	beq.n	8005690 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0220 	mvn.w	r2, #32
 8005688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f8b2 	bl	80057f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005690:	bf00      	nop
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a37      	ldr	r2, [pc, #220]	@ (80057d8 <TIM_Base_SetConfig+0xf0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d00f      	beq.n	8005720 <TIM_Base_SetConfig+0x38>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005706:	d00b      	beq.n	8005720 <TIM_Base_SetConfig+0x38>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a34      	ldr	r2, [pc, #208]	@ (80057dc <TIM_Base_SetConfig+0xf4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d007      	beq.n	8005720 <TIM_Base_SetConfig+0x38>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a33      	ldr	r2, [pc, #204]	@ (80057e0 <TIM_Base_SetConfig+0xf8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d003      	beq.n	8005720 <TIM_Base_SetConfig+0x38>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a32      	ldr	r2, [pc, #200]	@ (80057e4 <TIM_Base_SetConfig+0xfc>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d108      	bne.n	8005732 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a28      	ldr	r2, [pc, #160]	@ (80057d8 <TIM_Base_SetConfig+0xf0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01b      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005740:	d017      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a25      	ldr	r2, [pc, #148]	@ (80057dc <TIM_Base_SetConfig+0xf4>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a24      	ldr	r2, [pc, #144]	@ (80057e0 <TIM_Base_SetConfig+0xf8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00f      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a23      	ldr	r2, [pc, #140]	@ (80057e4 <TIM_Base_SetConfig+0xfc>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00b      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a22      	ldr	r2, [pc, #136]	@ (80057e8 <TIM_Base_SetConfig+0x100>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a21      	ldr	r2, [pc, #132]	@ (80057ec <TIM_Base_SetConfig+0x104>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_Base_SetConfig+0x8a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a20      	ldr	r2, [pc, #128]	@ (80057f0 <TIM_Base_SetConfig+0x108>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d108      	bne.n	8005784 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a0c      	ldr	r2, [pc, #48]	@ (80057d8 <TIM_Base_SetConfig+0xf0>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d103      	bne.n	80057b2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	691a      	ldr	r2, [r3, #16]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f043 0204 	orr.w	r2, r3, #4
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	601a      	str	r2, [r3, #0]
}
 80057ca:	bf00      	nop
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40010000 	.word	0x40010000
 80057dc:	40000400 	.word	0x40000400
 80057e0:	40000800 	.word	0x40000800
 80057e4:	40000c00 	.word	0x40000c00
 80057e8:	40014000 	.word	0x40014000
 80057ec:	40014400 	.word	0x40014400
 80057f0:	40014800 	.word	0x40014800

080057f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800582a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800582e:	2b84      	cmp	r3, #132	@ 0x84
 8005830:	d005      	beq.n	800583e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005832:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	3303      	adds	r3, #3
 800583c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800583e:	68fb      	ldr	r3, [r7, #12]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005850:	f000 ff66 	bl	8006720 <vTaskStartScheduler>
  
  return osOK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	bd80      	pop	{r7, pc}

0800585a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800585a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800585c:	b089      	sub	sp, #36	@ 0x24
 800585e:	af04      	add	r7, sp, #16
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d020      	beq.n	80058ae <osThreadCreate+0x54>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d01c      	beq.n	80058ae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685c      	ldr	r4, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691e      	ldr	r6, [r3, #16]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff ffc8 	bl	800581c <makeFreeRtosPriority>
 800588c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005896:	9202      	str	r2, [sp, #8]
 8005898:	9301      	str	r3, [sp, #4]
 800589a:	9100      	str	r1, [sp, #0]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	4632      	mov	r2, r6
 80058a0:	4629      	mov	r1, r5
 80058a2:	4620      	mov	r0, r4
 80058a4:	f000 fd56 	bl	8006354 <xTaskCreateStatic>
 80058a8:	4603      	mov	r3, r0
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	e01c      	b.n	80058e8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685c      	ldr	r4, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058ba:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7ff ffaa 	bl	800581c <makeFreeRtosPriority>
 80058c8:	4602      	mov	r2, r0
 80058ca:	f107 030c 	add.w	r3, r7, #12
 80058ce:	9301      	str	r3, [sp, #4]
 80058d0:	9200      	str	r2, [sp, #0]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	4632      	mov	r2, r6
 80058d6:	4629      	mov	r1, r5
 80058d8:	4620      	mov	r0, r4
 80058da:	f000 fd9b 	bl	8006414 <xTaskCreate>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d001      	beq.n	80058e8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80058e4:	2300      	movs	r3, #0
 80058e6:	e000      	b.n	80058ea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80058e8:	68fb      	ldr	r3, [r7, #12]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058f2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <osDelay+0x16>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	e000      	b.n	800590a <osDelay+0x18>
 8005908:	2301      	movs	r3, #1
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fed2 	bl	80066b4 <vTaskDelay>
  
  return osOK;
 8005910:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f103 0208 	add.w	r2, r3, #8
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f04f 32ff 	mov.w	r2, #4294967295
 8005932:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f103 0208 	add.w	r2, r3, #8
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f103 0208 	add.w	r2, r3, #8
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800594e:	bf00      	nop
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800595a:	b480      	push	{r7}
 800595c:	b083      	sub	sp, #12
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	601a      	str	r2, [r3, #0]
}
 80059b0:	bf00      	nop
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d2:	d103      	bne.n	80059dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	e00c      	b.n	80059f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3308      	adds	r3, #8
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	e002      	b.n	80059ea <vListInsert+0x2e>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d2f6      	bcs.n	80059e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	601a      	str	r2, [r3, #0]
}
 8005a22:	bf00      	nop
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b085      	sub	sp, #20
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	6892      	ldr	r2, [r2, #8]
 8005a44:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6852      	ldr	r2, [r2, #4]
 8005a4e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d103      	bne.n	8005a62 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	1e5a      	subs	r2, r3, #1
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
	...

08005a84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10b      	bne.n	8005ab0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005aaa:	bf00      	nop
 8005aac:	bf00      	nop
 8005aae:	e7fd      	b.n	8005aac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ab0:	f001 fe92 	bl	80077d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005abc:	68f9      	ldr	r1, [r7, #12]
 8005abe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ac0:	fb01 f303 	mul.w	r3, r1, r3
 8005ac4:	441a      	add	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	68f9      	ldr	r1, [r7, #12]
 8005ae4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ae6:	fb01 f303 	mul.w	r3, r1, r3
 8005aea:	441a      	add	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	22ff      	movs	r2, #255	@ 0xff
 8005af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	22ff      	movs	r2, #255	@ 0xff
 8005afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d114      	bne.n	8005b30 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d01a      	beq.n	8005b44 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	3310      	adds	r3, #16
 8005b12:	4618      	mov	r0, r3
 8005b14:	f001 f85e 	bl	8006bd4 <xTaskRemoveFromEventList>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d012      	beq.n	8005b44 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b54 <xQueueGenericReset+0xd0>)
 8005b20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	e009      	b.n	8005b44 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3310      	adds	r3, #16
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff fef0 	bl	800591a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	3324      	adds	r3, #36	@ 0x24
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff feeb 	bl	800591a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b44:	f001 fe7a 	bl	800783c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b48:	2301      	movs	r3, #1
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	e000ed04 	.word	0xe000ed04

08005b58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08a      	sub	sp, #40	@ 0x28
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	4613      	mov	r3, r2
 8005b64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10b      	bne.n	8005b84 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	613b      	str	r3, [r7, #16]
}
 8005b7e:	bf00      	nop
 8005b80:	bf00      	nop
 8005b82:	e7fd      	b.n	8005b80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	fb02 f303 	mul.w	r3, r2, r3
 8005b8c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	3348      	adds	r3, #72	@ 0x48
 8005b92:	4618      	mov	r0, r3
 8005b94:	f001 ff42 	bl	8007a1c <pvPortMalloc>
 8005b98:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d011      	beq.n	8005bc4 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	3348      	adds	r3, #72	@ 0x48
 8005ba8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bb2:	79fa      	ldrb	r2, [r7, #7]
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 f805 	bl	8005bce <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005bc4:	69bb      	ldr	r3, [r7, #24]
	}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3720      	adds	r7, #32
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	607a      	str	r2, [r7, #4]
 8005bda:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d103      	bne.n	8005bea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	e002      	b.n	8005bf0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	69b8      	ldr	r0, [r7, #24]
 8005c00:	f7ff ff40 	bl	8005a84 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c04:	bf00      	nop
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08e      	sub	sp, #56	@ 0x38
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10b      	bne.n	8005c40 <xQueueGenericSend+0x34>
	__asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c3a:	bf00      	nop
 8005c3c:	bf00      	nop
 8005c3e:	e7fd      	b.n	8005c3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d103      	bne.n	8005c4e <xQueueGenericSend+0x42>
 8005c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <xQueueGenericSend+0x46>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e000      	b.n	8005c54 <xQueueGenericSend+0x48>
 8005c52:	2300      	movs	r3, #0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10b      	bne.n	8005c70 <xQueueGenericSend+0x64>
	__asm volatile
 8005c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c5c:	f383 8811 	msr	BASEPRI, r3
 8005c60:	f3bf 8f6f 	isb	sy
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c6a:	bf00      	nop
 8005c6c:	bf00      	nop
 8005c6e:	e7fd      	b.n	8005c6c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d103      	bne.n	8005c7e <xQueueGenericSend+0x72>
 8005c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <xQueueGenericSend+0x76>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e000      	b.n	8005c84 <xQueueGenericSend+0x78>
 8005c82:	2300      	movs	r3, #0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10b      	bne.n	8005ca0 <xQueueGenericSend+0x94>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	623b      	str	r3, [r7, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	bf00      	nop
 8005c9e:	e7fd      	b.n	8005c9c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ca0:	f001 f95e 	bl	8006f60 <xTaskGetSchedulerState>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d102      	bne.n	8005cb0 <xQueueGenericSend+0xa4>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <xQueueGenericSend+0xa8>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e000      	b.n	8005cb6 <xQueueGenericSend+0xaa>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10b      	bne.n	8005cd2 <xQueueGenericSend+0xc6>
	__asm volatile
 8005cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	61fb      	str	r3, [r7, #28]
}
 8005ccc:	bf00      	nop
 8005cce:	bf00      	nop
 8005cd0:	e7fd      	b.n	8005cce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cd2:	f001 fd81 	bl	80077d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d302      	bcc.n	8005ce8 <xQueueGenericSend+0xdc>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d129      	bne.n	8005d3c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	68b9      	ldr	r1, [r7, #8]
 8005cec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cee:	f000 fa47 	bl	8006180 <prvCopyDataToQueue>
 8005cf2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d010      	beq.n	8005d1e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfe:	3324      	adds	r3, #36	@ 0x24
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 ff67 	bl	8006bd4 <xTaskRemoveFromEventList>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d013      	beq.n	8005d34 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d0c:	4b3f      	ldr	r3, [pc, #252]	@ (8005e0c <xQueueGenericSend+0x200>)
 8005d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	e00a      	b.n	8005d34 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d007      	beq.n	8005d34 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d24:	4b39      	ldr	r3, [pc, #228]	@ (8005e0c <xQueueGenericSend+0x200>)
 8005d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d34:	f001 fd82 	bl	800783c <vPortExitCritical>
				return pdPASS;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e063      	b.n	8005e04 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d103      	bne.n	8005d4a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d42:	f001 fd7b 	bl	800783c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	e05c      	b.n	8005e04 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d106      	bne.n	8005d5e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d50:	f107 0314 	add.w	r3, r7, #20
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 ffa1 	bl	8006c9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d5e:	f001 fd6d 	bl	800783c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d62:	f000 fd47 	bl	80067f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d66:	f001 fd37 	bl	80077d8 <vPortEnterCritical>
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d70:	b25b      	sxtb	r3, r3
 8005d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d76:	d103      	bne.n	8005d80 <xQueueGenericSend+0x174>
 8005d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d86:	b25b      	sxtb	r3, r3
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8c:	d103      	bne.n	8005d96 <xQueueGenericSend+0x18a>
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d96:	f001 fd51 	bl	800783c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d9a:	1d3a      	adds	r2, r7, #4
 8005d9c:	f107 0314 	add.w	r3, r7, #20
 8005da0:	4611      	mov	r1, r2
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 ff90 	bl	8006cc8 <xTaskCheckForTimeOut>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d124      	bne.n	8005df8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005dae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005db0:	f000 fab8 	bl	8006324 <prvIsQueueFull>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d018      	beq.n	8005dec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dbc:	3310      	adds	r3, #16
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 fee0 	bl	8006b88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005dc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dca:	f000 fa43 	bl	8006254 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005dce:	f000 fd1f 	bl	8006810 <xTaskResumeAll>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f47f af7c 	bne.w	8005cd2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005dda:	4b0c      	ldr	r3, [pc, #48]	@ (8005e0c <xQueueGenericSend+0x200>)
 8005ddc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	e772      	b.n	8005cd2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005dec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dee:	f000 fa31 	bl	8006254 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005df2:	f000 fd0d 	bl	8006810 <xTaskResumeAll>
 8005df6:	e76c      	b.n	8005cd2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005df8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dfa:	f000 fa2b 	bl	8006254 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dfe:	f000 fd07 	bl	8006810 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3738      	adds	r7, #56	@ 0x38
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	e000ed04 	.word	0xe000ed04

08005e10 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08e      	sub	sp, #56	@ 0x38
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10b      	bne.n	8005e3c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	623b      	str	r3, [r7, #32]
}
 8005e36:	bf00      	nop
 8005e38:	bf00      	nop
 8005e3a:	e7fd      	b.n	8005e38 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00b      	beq.n	8005e5c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	61fb      	str	r3, [r7, #28]
}
 8005e56:	bf00      	nop
 8005e58:	bf00      	nop
 8005e5a:	e7fd      	b.n	8005e58 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d103      	bne.n	8005e6c <xQueueGiveFromISR+0x5c>
 8005e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <xQueueGiveFromISR+0x60>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e000      	b.n	8005e72 <xQueueGiveFromISR+0x62>
 8005e70:	2300      	movs	r3, #0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10b      	bne.n	8005e8e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	61bb      	str	r3, [r7, #24]
}
 8005e88:	bf00      	nop
 8005e8a:	bf00      	nop
 8005e8c:	e7fd      	b.n	8005e8a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e8e:	f001 fd83 	bl	8007998 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e92:	f3ef 8211 	mrs	r2, BASEPRI
 8005e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	617a      	str	r2, [r7, #20]
 8005ea8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005eaa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d22b      	bcs.n	8005f16 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ec4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ece:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ed0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed8:	d112      	bne.n	8005f00 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d016      	beq.n	8005f10 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee4:	3324      	adds	r3, #36	@ 0x24
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 fe74 	bl	8006bd4 <xTaskRemoveFromEventList>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00e      	beq.n	8005f10 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00b      	beq.n	8005f10 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	2201      	movs	r2, #1
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	e007      	b.n	8005f10 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f04:	3301      	adds	r3, #1
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	b25a      	sxtb	r2, r3
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005f10:	2301      	movs	r3, #1
 8005f12:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f14:	e001      	b.n	8005f1a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f1c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3738      	adds	r7, #56	@ 0x38
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08e      	sub	sp, #56	@ 0x38
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005f42:	2300      	movs	r3, #0
 8005f44:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10b      	bne.n	8005f64 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	623b      	str	r3, [r7, #32]
}
 8005f5e:	bf00      	nop
 8005f60:	bf00      	nop
 8005f62:	e7fd      	b.n	8005f60 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00b      	beq.n	8005f84 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	61fb      	str	r3, [r7, #28]
}
 8005f7e:	bf00      	nop
 8005f80:	bf00      	nop
 8005f82:	e7fd      	b.n	8005f80 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f84:	f000 ffec 	bl	8006f60 <xTaskGetSchedulerState>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d102      	bne.n	8005f94 <xQueueSemaphoreTake+0x64>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <xQueueSemaphoreTake+0x68>
 8005f94:	2301      	movs	r3, #1
 8005f96:	e000      	b.n	8005f9a <xQueueSemaphoreTake+0x6a>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10b      	bne.n	8005fb6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	61bb      	str	r3, [r7, #24]
}
 8005fb0:	bf00      	nop
 8005fb2:	bf00      	nop
 8005fb4:	e7fd      	b.n	8005fb2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fb6:	f001 fc0f 	bl	80077d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fbe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d024      	beq.n	8006010 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc8:	1e5a      	subs	r2, r3, #1
 8005fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fcc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d104      	bne.n	8005fe0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005fd6:	f001 f96f 	bl	80072b8 <pvTaskIncrementMutexHeldCount>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fde:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00f      	beq.n	8006008 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fea:	3310      	adds	r3, #16
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 fdf1 	bl	8006bd4 <xTaskRemoveFromEventList>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d007      	beq.n	8006008 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ff8:	4b54      	ldr	r3, [pc, #336]	@ (800614c <xQueueSemaphoreTake+0x21c>)
 8005ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006008:	f001 fc18 	bl	800783c <vPortExitCritical>
				return pdPASS;
 800600c:	2301      	movs	r3, #1
 800600e:	e098      	b.n	8006142 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d112      	bne.n	800603c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00b      	beq.n	8006034 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	617b      	str	r3, [r7, #20]
}
 800602e:	bf00      	nop
 8006030:	bf00      	nop
 8006032:	e7fd      	b.n	8006030 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006034:	f001 fc02 	bl	800783c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006038:	2300      	movs	r3, #0
 800603a:	e082      	b.n	8006142 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800603c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800603e:	2b00      	cmp	r3, #0
 8006040:	d106      	bne.n	8006050 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006042:	f107 030c 	add.w	r3, r7, #12
 8006046:	4618      	mov	r0, r3
 8006048:	f000 fe28 	bl	8006c9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800604c:	2301      	movs	r3, #1
 800604e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006050:	f001 fbf4 	bl	800783c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006054:	f000 fbce 	bl	80067f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006058:	f001 fbbe 	bl	80077d8 <vPortEnterCritical>
 800605c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006062:	b25b      	sxtb	r3, r3
 8006064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006068:	d103      	bne.n	8006072 <xQueueSemaphoreTake+0x142>
 800606a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006074:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006078:	b25b      	sxtb	r3, r3
 800607a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607e:	d103      	bne.n	8006088 <xQueueSemaphoreTake+0x158>
 8006080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006088:	f001 fbd8 	bl	800783c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800608c:	463a      	mov	r2, r7
 800608e:	f107 030c 	add.w	r3, r7, #12
 8006092:	4611      	mov	r1, r2
 8006094:	4618      	mov	r0, r3
 8006096:	f000 fe17 	bl	8006cc8 <xTaskCheckForTimeOut>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d132      	bne.n	8006106 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80060a2:	f000 f929 	bl	80062f8 <prvIsQueueEmpty>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d026      	beq.n	80060fa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d109      	bne.n	80060c8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80060b4:	f001 fb90 	bl	80077d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80060b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 ff6d 	bl	8006f9c <xTaskPriorityInherit>
 80060c2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80060c4:	f001 fbba 	bl	800783c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ca:	3324      	adds	r3, #36	@ 0x24
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	4611      	mov	r1, r2
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 fd59 	bl	8006b88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80060d8:	f000 f8bc 	bl	8006254 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060dc:	f000 fb98 	bl	8006810 <xTaskResumeAll>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f47f af67 	bne.w	8005fb6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80060e8:	4b18      	ldr	r3, [pc, #96]	@ (800614c <xQueueSemaphoreTake+0x21c>)
 80060ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	e75d      	b.n	8005fb6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80060fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80060fc:	f000 f8aa 	bl	8006254 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006100:	f000 fb86 	bl	8006810 <xTaskResumeAll>
 8006104:	e757      	b.n	8005fb6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006106:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006108:	f000 f8a4 	bl	8006254 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800610c:	f000 fb80 	bl	8006810 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006110:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006112:	f000 f8f1 	bl	80062f8 <prvIsQueueEmpty>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	f43f af4c 	beq.w	8005fb6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800611e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00d      	beq.n	8006140 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006124:	f001 fb58 	bl	80077d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006128:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800612a:	f000 f811 	bl	8006150 <prvGetDisinheritPriorityAfterTimeout>
 800612e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006136:	4618      	mov	r0, r3
 8006138:	f001 f82e 	bl	8007198 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800613c:	f001 fb7e 	bl	800783c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006140:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006142:	4618      	mov	r0, r3
 8006144:	3738      	adds	r7, #56	@ 0x38
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	e000ed04 	.word	0xe000ed04

08006150 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615c:	2b00      	cmp	r3, #0
 800615e:	d006      	beq.n	800616e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f1c3 0307 	rsb	r3, r3, #7
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	e001      	b.n	8006172 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006172:	68fb      	ldr	r3, [r7, #12]
	}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800618c:	2300      	movs	r3, #0
 800618e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006194:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10d      	bne.n	80061ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d14d      	bne.n	8006242 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 ff6c 	bl	8007088 <xTaskPriorityDisinherit>
 80061b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	609a      	str	r2, [r3, #8]
 80061b8:	e043      	b.n	8006242 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d119      	bne.n	80061f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6858      	ldr	r0, [r3, #4]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c8:	461a      	mov	r2, r3
 80061ca:	68b9      	ldr	r1, [r7, #8]
 80061cc:	f001 fec8 	bl	8007f60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d8:	441a      	add	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d32b      	bcc.n	8006242 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	605a      	str	r2, [r3, #4]
 80061f2:	e026      	b.n	8006242 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	68d8      	ldr	r0, [r3, #12]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fc:	461a      	mov	r2, r3
 80061fe:	68b9      	ldr	r1, [r7, #8]
 8006200:	f001 feae 	bl	8007f60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	68da      	ldr	r2, [r3, #12]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620c:	425b      	negs	r3, r3
 800620e:	441a      	add	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	68da      	ldr	r2, [r3, #12]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	429a      	cmp	r2, r3
 800621e:	d207      	bcs.n	8006230 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006228:	425b      	negs	r3, r3
 800622a:	441a      	add	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b02      	cmp	r3, #2
 8006234:	d105      	bne.n	8006242 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	3b01      	subs	r3, #1
 8006240:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800624a:	697b      	ldr	r3, [r7, #20]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800625c:	f001 fabc 	bl	80077d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006266:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006268:	e011      	b.n	800628e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626e:	2b00      	cmp	r3, #0
 8006270:	d012      	beq.n	8006298 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3324      	adds	r3, #36	@ 0x24
 8006276:	4618      	mov	r0, r3
 8006278:	f000 fcac 	bl	8006bd4 <xTaskRemoveFromEventList>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006282:	f000 fd85 	bl	8006d90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006286:	7bfb      	ldrb	r3, [r7, #15]
 8006288:	3b01      	subs	r3, #1
 800628a:	b2db      	uxtb	r3, r3
 800628c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800628e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006292:	2b00      	cmp	r3, #0
 8006294:	dce9      	bgt.n	800626a <prvUnlockQueue+0x16>
 8006296:	e000      	b.n	800629a <prvUnlockQueue+0x46>
					break;
 8006298:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	22ff      	movs	r2, #255	@ 0xff
 800629e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80062a2:	f001 facb 	bl	800783c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80062a6:	f001 fa97 	bl	80077d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062b2:	e011      	b.n	80062d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d012      	beq.n	80062e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3310      	adds	r3, #16
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 fc87 	bl	8006bd4 <xTaskRemoveFromEventList>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062cc:	f000 fd60 	bl	8006d90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062d0:	7bbb      	ldrb	r3, [r7, #14]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	dce9      	bgt.n	80062b4 <prvUnlockQueue+0x60>
 80062e0:	e000      	b.n	80062e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80062e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	22ff      	movs	r2, #255	@ 0xff
 80062e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80062ec:	f001 faa6 	bl	800783c <vPortExitCritical>
}
 80062f0:	bf00      	nop
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006300:	f001 fa6a 	bl	80077d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006308:	2b00      	cmp	r3, #0
 800630a:	d102      	bne.n	8006312 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800630c:	2301      	movs	r3, #1
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	e001      	b.n	8006316 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006312:	2300      	movs	r3, #0
 8006314:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006316:	f001 fa91 	bl	800783c <vPortExitCritical>

	return xReturn;
 800631a:	68fb      	ldr	r3, [r7, #12]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800632c:	f001 fa54 	bl	80077d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006338:	429a      	cmp	r2, r3
 800633a:	d102      	bne.n	8006342 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800633c:	2301      	movs	r3, #1
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	e001      	b.n	8006346 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006346:	f001 fa79 	bl	800783c <vPortExitCritical>

	return xReturn;
 800634a:	68fb      	ldr	r3, [r7, #12]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006354:	b580      	push	{r7, lr}
 8006356:	b08e      	sub	sp, #56	@ 0x38
 8006358:	af04      	add	r7, sp, #16
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10b      	bne.n	8006380 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	623b      	str	r3, [r7, #32]
}
 800637a:	bf00      	nop
 800637c:	bf00      	nop
 800637e:	e7fd      	b.n	800637c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10b      	bne.n	800639e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	61fb      	str	r3, [r7, #28]
}
 8006398:	bf00      	nop
 800639a:	bf00      	nop
 800639c:	e7fd      	b.n	800639a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800639e:	23a0      	movs	r3, #160	@ 0xa0
 80063a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	2ba0      	cmp	r3, #160	@ 0xa0
 80063a6:	d00b      	beq.n	80063c0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	61bb      	str	r3, [r7, #24]
}
 80063ba:	bf00      	nop
 80063bc:	bf00      	nop
 80063be:	e7fd      	b.n	80063bc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80063c0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80063c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d01e      	beq.n	8006406 <xTaskCreateStatic+0xb2>
 80063c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d01b      	beq.n	8006406 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063d6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063e0:	2300      	movs	r3, #0
 80063e2:	9303      	str	r3, [sp, #12]
 80063e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e6:	9302      	str	r3, [sp, #8]
 80063e8:	f107 0314 	add.w	r3, r7, #20
 80063ec:	9301      	str	r3, [sp, #4]
 80063ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	68b9      	ldr	r1, [r7, #8]
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 f851 	bl	80064a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006400:	f000 f8ee 	bl	80065e0 <prvAddNewTaskToReadyList>
 8006404:	e001      	b.n	800640a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006406:	2300      	movs	r3, #0
 8006408:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800640a:	697b      	ldr	r3, [r7, #20]
	}
 800640c:	4618      	mov	r0, r3
 800640e:	3728      	adds	r7, #40	@ 0x28
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006414:	b580      	push	{r7, lr}
 8006416:	b08c      	sub	sp, #48	@ 0x30
 8006418:	af04      	add	r7, sp, #16
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	603b      	str	r3, [r7, #0]
 8006420:	4613      	mov	r3, r2
 8006422:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006424:	88fb      	ldrh	r3, [r7, #6]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4618      	mov	r0, r3
 800642a:	f001 faf7 	bl	8007a1c <pvPortMalloc>
 800642e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00e      	beq.n	8006454 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006436:	20a0      	movs	r0, #160	@ 0xa0
 8006438:	f001 faf0 	bl	8007a1c <pvPortMalloc>
 800643c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	631a      	str	r2, [r3, #48]	@ 0x30
 800644a:	e005      	b.n	8006458 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800644c:	6978      	ldr	r0, [r7, #20]
 800644e:	f001 fbb3 	bl	8007bb8 <vPortFree>
 8006452:	e001      	b.n	8006458 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006454:	2300      	movs	r3, #0
 8006456:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d017      	beq.n	800648e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006466:	88fa      	ldrh	r2, [r7, #6]
 8006468:	2300      	movs	r3, #0
 800646a:	9303      	str	r3, [sp, #12]
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	9302      	str	r3, [sp, #8]
 8006470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006472:	9301      	str	r3, [sp, #4]
 8006474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	68b9      	ldr	r1, [r7, #8]
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 f80f 	bl	80064a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006482:	69f8      	ldr	r0, [r7, #28]
 8006484:	f000 f8ac 	bl	80065e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006488:	2301      	movs	r3, #1
 800648a:	61bb      	str	r3, [r7, #24]
 800648c:	e002      	b.n	8006494 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800648e:	f04f 33ff 	mov.w	r3, #4294967295
 8006492:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006494:	69bb      	ldr	r3, [r7, #24]
	}
 8006496:	4618      	mov	r0, r3
 8006498:	3720      	adds	r7, #32
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b088      	sub	sp, #32
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
 80064ac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80064ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80064b8:	3b01      	subs	r3, #1
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	f023 0307 	bic.w	r3, r3, #7
 80064c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	f003 0307 	and.w	r3, r3, #7
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00b      	beq.n	80064ea <prvInitialiseNewTask+0x4a>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	617b      	str	r3, [r7, #20]
}
 80064e4:	bf00      	nop
 80064e6:	bf00      	nop
 80064e8:	e7fd      	b.n	80064e6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d01f      	beq.n	8006530 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064f0:	2300      	movs	r3, #0
 80064f2:	61fb      	str	r3, [r7, #28]
 80064f4:	e012      	b.n	800651c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	4413      	add	r3, r2
 80064fc:	7819      	ldrb	r1, [r3, #0]
 80064fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	4413      	add	r3, r2
 8006504:	3334      	adds	r3, #52	@ 0x34
 8006506:	460a      	mov	r2, r1
 8006508:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	4413      	add	r3, r2
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d006      	beq.n	8006524 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	3301      	adds	r3, #1
 800651a:	61fb      	str	r3, [r7, #28]
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	2b0f      	cmp	r3, #15
 8006520:	d9e9      	bls.n	80064f6 <prvInitialiseNewTask+0x56>
 8006522:	e000      	b.n	8006526 <prvInitialiseNewTask+0x86>
			{
				break;
 8006524:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800652e:	e003      	b.n	8006538 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653a:	2b06      	cmp	r3, #6
 800653c:	d901      	bls.n	8006542 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800653e:	2306      	movs	r3, #6
 8006540:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006544:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006546:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800654c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800654e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006550:	2200      	movs	r2, #0
 8006552:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006556:	3304      	adds	r3, #4
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff f9fe 	bl	800595a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800655e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006560:	3318      	adds	r3, #24
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff f9f9 	bl	800595a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800656c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800656e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006570:	f1c3 0207 	rsb	r2, r3, #7
 8006574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006576:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800657c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800657e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006580:	2200      	movs	r2, #0
 8006582:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006588:	2200      	movs	r2, #0
 800658a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800658e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006590:	334c      	adds	r3, #76	@ 0x4c
 8006592:	224c      	movs	r2, #76	@ 0x4c
 8006594:	2100      	movs	r1, #0
 8006596:	4618      	mov	r0, r3
 8006598:	f001 fc50 	bl	8007e3c <memset>
 800659c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659e:	4a0d      	ldr	r2, [pc, #52]	@ (80065d4 <prvInitialiseNewTask+0x134>)
 80065a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80065a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a4:	4a0c      	ldr	r2, [pc, #48]	@ (80065d8 <prvInitialiseNewTask+0x138>)
 80065a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80065a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065aa:	4a0c      	ldr	r2, [pc, #48]	@ (80065dc <prvInitialiseNewTask+0x13c>)
 80065ac:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	68f9      	ldr	r1, [r7, #12]
 80065b2:	69b8      	ldr	r0, [r7, #24]
 80065b4:	f000 ffdc 	bl	8007570 <pxPortInitialiseStack>
 80065b8:	4602      	mov	r2, r0
 80065ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80065be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065ca:	bf00      	nop
 80065cc:	3720      	adds	r7, #32
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	2000437c 	.word	0x2000437c
 80065d8:	200043e4 	.word	0x200043e4
 80065dc:	2000444c 	.word	0x2000444c

080065e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065e8:	f001 f8f6 	bl	80077d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065ec:	4b2a      	ldr	r3, [pc, #168]	@ (8006698 <prvAddNewTaskToReadyList+0xb8>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3301      	adds	r3, #1
 80065f2:	4a29      	ldr	r2, [pc, #164]	@ (8006698 <prvAddNewTaskToReadyList+0xb8>)
 80065f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065f6:	4b29      	ldr	r3, [pc, #164]	@ (800669c <prvAddNewTaskToReadyList+0xbc>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d109      	bne.n	8006612 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065fe:	4a27      	ldr	r2, [pc, #156]	@ (800669c <prvAddNewTaskToReadyList+0xbc>)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006604:	4b24      	ldr	r3, [pc, #144]	@ (8006698 <prvAddNewTaskToReadyList+0xb8>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d110      	bne.n	800662e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800660c:	f000 fbe4 	bl	8006dd8 <prvInitialiseTaskLists>
 8006610:	e00d      	b.n	800662e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006612:	4b23      	ldr	r3, [pc, #140]	@ (80066a0 <prvAddNewTaskToReadyList+0xc0>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d109      	bne.n	800662e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800661a:	4b20      	ldr	r3, [pc, #128]	@ (800669c <prvAddNewTaskToReadyList+0xbc>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006624:	429a      	cmp	r2, r3
 8006626:	d802      	bhi.n	800662e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006628:	4a1c      	ldr	r2, [pc, #112]	@ (800669c <prvAddNewTaskToReadyList+0xbc>)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800662e:	4b1d      	ldr	r3, [pc, #116]	@ (80066a4 <prvAddNewTaskToReadyList+0xc4>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3301      	adds	r3, #1
 8006634:	4a1b      	ldr	r2, [pc, #108]	@ (80066a4 <prvAddNewTaskToReadyList+0xc4>)
 8006636:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663c:	2201      	movs	r2, #1
 800663e:	409a      	lsls	r2, r3
 8006640:	4b19      	ldr	r3, [pc, #100]	@ (80066a8 <prvAddNewTaskToReadyList+0xc8>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4313      	orrs	r3, r2
 8006646:	4a18      	ldr	r2, [pc, #96]	@ (80066a8 <prvAddNewTaskToReadyList+0xc8>)
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800664e:	4613      	mov	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4a15      	ldr	r2, [pc, #84]	@ (80066ac <prvAddNewTaskToReadyList+0xcc>)
 8006658:	441a      	add	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	3304      	adds	r3, #4
 800665e:	4619      	mov	r1, r3
 8006660:	4610      	mov	r0, r2
 8006662:	f7ff f987 	bl	8005974 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006666:	f001 f8e9 	bl	800783c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800666a:	4b0d      	ldr	r3, [pc, #52]	@ (80066a0 <prvAddNewTaskToReadyList+0xc0>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00e      	beq.n	8006690 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006672:	4b0a      	ldr	r3, [pc, #40]	@ (800669c <prvAddNewTaskToReadyList+0xbc>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667c:	429a      	cmp	r2, r3
 800667e:	d207      	bcs.n	8006690 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006680:	4b0b      	ldr	r3, [pc, #44]	@ (80066b0 <prvAddNewTaskToReadyList+0xd0>)
 8006682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006690:	bf00      	nop
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	20000728 	.word	0x20000728
 800669c:	20000628 	.word	0x20000628
 80066a0:	20000734 	.word	0x20000734
 80066a4:	20000744 	.word	0x20000744
 80066a8:	20000730 	.word	0x20000730
 80066ac:	2000062c 	.word	0x2000062c
 80066b0:	e000ed04 	.word	0xe000ed04

080066b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066bc:	2300      	movs	r3, #0
 80066be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d018      	beq.n	80066f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066c6:	4b14      	ldr	r3, [pc, #80]	@ (8006718 <vTaskDelay+0x64>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00b      	beq.n	80066e6 <vTaskDelay+0x32>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	60bb      	str	r3, [r7, #8]
}
 80066e0:	bf00      	nop
 80066e2:	bf00      	nop
 80066e4:	e7fd      	b.n	80066e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80066e6:	f000 f885 	bl	80067f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066ea:	2100      	movs	r1, #0
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fed9 	bl	80074a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066f2:	f000 f88d 	bl	8006810 <xTaskResumeAll>
 80066f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d107      	bne.n	800670e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80066fe:	4b07      	ldr	r3, [pc, #28]	@ (800671c <vTaskDelay+0x68>)
 8006700:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800670e:	bf00      	nop
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20000750 	.word	0x20000750
 800671c:	e000ed04 	.word	0xe000ed04

08006720 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b08a      	sub	sp, #40	@ 0x28
 8006724:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006726:	2300      	movs	r3, #0
 8006728:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800672a:	2300      	movs	r3, #0
 800672c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800672e:	463a      	mov	r2, r7
 8006730:	1d39      	adds	r1, r7, #4
 8006732:	f107 0308 	add.w	r3, r7, #8
 8006736:	4618      	mov	r0, r3
 8006738:	f7f9 ff40 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	9202      	str	r2, [sp, #8]
 8006744:	9301      	str	r3, [sp, #4]
 8006746:	2300      	movs	r3, #0
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	2300      	movs	r3, #0
 800674c:	460a      	mov	r2, r1
 800674e:	4921      	ldr	r1, [pc, #132]	@ (80067d4 <vTaskStartScheduler+0xb4>)
 8006750:	4821      	ldr	r0, [pc, #132]	@ (80067d8 <vTaskStartScheduler+0xb8>)
 8006752:	f7ff fdff 	bl	8006354 <xTaskCreateStatic>
 8006756:	4603      	mov	r3, r0
 8006758:	4a20      	ldr	r2, [pc, #128]	@ (80067dc <vTaskStartScheduler+0xbc>)
 800675a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800675c:	4b1f      	ldr	r3, [pc, #124]	@ (80067dc <vTaskStartScheduler+0xbc>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006764:	2301      	movs	r3, #1
 8006766:	617b      	str	r3, [r7, #20]
 8006768:	e001      	b.n	800676e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800676a:	2300      	movs	r3, #0
 800676c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d11b      	bne.n	80067ac <vTaskStartScheduler+0x8c>
	__asm volatile
 8006774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006778:	f383 8811 	msr	BASEPRI, r3
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	613b      	str	r3, [r7, #16]
}
 8006786:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006788:	4b15      	ldr	r3, [pc, #84]	@ (80067e0 <vTaskStartScheduler+0xc0>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	334c      	adds	r3, #76	@ 0x4c
 800678e:	4a15      	ldr	r2, [pc, #84]	@ (80067e4 <vTaskStartScheduler+0xc4>)
 8006790:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006792:	4b15      	ldr	r3, [pc, #84]	@ (80067e8 <vTaskStartScheduler+0xc8>)
 8006794:	f04f 32ff 	mov.w	r2, #4294967295
 8006798:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800679a:	4b14      	ldr	r3, [pc, #80]	@ (80067ec <vTaskStartScheduler+0xcc>)
 800679c:	2201      	movs	r2, #1
 800679e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80067a0:	4b13      	ldr	r3, [pc, #76]	@ (80067f0 <vTaskStartScheduler+0xd0>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067a6:	f000 ff73 	bl	8007690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067aa:	e00f      	b.n	80067cc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b2:	d10b      	bne.n	80067cc <vTaskStartScheduler+0xac>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	60fb      	str	r3, [r7, #12]
}
 80067c6:	bf00      	nop
 80067c8:	bf00      	nop
 80067ca:	e7fd      	b.n	80067c8 <vTaskStartScheduler+0xa8>
}
 80067cc:	bf00      	nop
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	08008984 	.word	0x08008984
 80067d8:	08006da9 	.word	0x08006da9
 80067dc:	2000074c 	.word	0x2000074c
 80067e0:	20000628 	.word	0x20000628
 80067e4:	200000c0 	.word	0x200000c0
 80067e8:	20000748 	.word	0x20000748
 80067ec:	20000734 	.word	0x20000734
 80067f0:	2000072c 	.word	0x2000072c

080067f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067f4:	b480      	push	{r7}
 80067f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80067f8:	4b04      	ldr	r3, [pc, #16]	@ (800680c <vTaskSuspendAll+0x18>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3301      	adds	r3, #1
 80067fe:	4a03      	ldr	r2, [pc, #12]	@ (800680c <vTaskSuspendAll+0x18>)
 8006800:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006802:	bf00      	nop
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	20000750 	.word	0x20000750

08006810 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800681a:	2300      	movs	r3, #0
 800681c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800681e:	4b42      	ldr	r3, [pc, #264]	@ (8006928 <xTaskResumeAll+0x118>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10b      	bne.n	800683e <xTaskResumeAll+0x2e>
	__asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	603b      	str	r3, [r7, #0]
}
 8006838:	bf00      	nop
 800683a:	bf00      	nop
 800683c:	e7fd      	b.n	800683a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800683e:	f000 ffcb 	bl	80077d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006842:	4b39      	ldr	r3, [pc, #228]	@ (8006928 <xTaskResumeAll+0x118>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3b01      	subs	r3, #1
 8006848:	4a37      	ldr	r2, [pc, #220]	@ (8006928 <xTaskResumeAll+0x118>)
 800684a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800684c:	4b36      	ldr	r3, [pc, #216]	@ (8006928 <xTaskResumeAll+0x118>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d161      	bne.n	8006918 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006854:	4b35      	ldr	r3, [pc, #212]	@ (800692c <xTaskResumeAll+0x11c>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d05d      	beq.n	8006918 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800685c:	e02e      	b.n	80068bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800685e:	4b34      	ldr	r3, [pc, #208]	@ (8006930 <xTaskResumeAll+0x120>)
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3318      	adds	r3, #24
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff f8df 	bl	8005a2e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	3304      	adds	r3, #4
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff f8da 	bl	8005a2e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687e:	2201      	movs	r2, #1
 8006880:	409a      	lsls	r2, r3
 8006882:	4b2c      	ldr	r3, [pc, #176]	@ (8006934 <xTaskResumeAll+0x124>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4313      	orrs	r3, r2
 8006888:	4a2a      	ldr	r2, [pc, #168]	@ (8006934 <xTaskResumeAll+0x124>)
 800688a:	6013      	str	r3, [r2, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006890:	4613      	mov	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4a27      	ldr	r2, [pc, #156]	@ (8006938 <xTaskResumeAll+0x128>)
 800689a:	441a      	add	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	3304      	adds	r3, #4
 80068a0:	4619      	mov	r1, r3
 80068a2:	4610      	mov	r0, r2
 80068a4:	f7ff f866 	bl	8005974 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ac:	4b23      	ldr	r3, [pc, #140]	@ (800693c <xTaskResumeAll+0x12c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d302      	bcc.n	80068bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80068b6:	4b22      	ldr	r3, [pc, #136]	@ (8006940 <xTaskResumeAll+0x130>)
 80068b8:	2201      	movs	r2, #1
 80068ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006930 <xTaskResumeAll+0x120>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1cc      	bne.n	800685e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068ca:	f000 fb29 	bl	8006f20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80068ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006944 <xTaskResumeAll+0x134>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d010      	beq.n	80068fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068da:	f000 f837 	bl	800694c <xTaskIncrementTick>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80068e4:	4b16      	ldr	r3, [pc, #88]	@ (8006940 <xTaskResumeAll+0x130>)
 80068e6:	2201      	movs	r2, #1
 80068e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1f1      	bne.n	80068da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80068f6:	4b13      	ldr	r3, [pc, #76]	@ (8006944 <xTaskResumeAll+0x134>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068fc:	4b10      	ldr	r3, [pc, #64]	@ (8006940 <xTaskResumeAll+0x130>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d009      	beq.n	8006918 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006904:	2301      	movs	r3, #1
 8006906:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006908:	4b0f      	ldr	r3, [pc, #60]	@ (8006948 <xTaskResumeAll+0x138>)
 800690a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800690e:	601a      	str	r2, [r3, #0]
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006918:	f000 ff90 	bl	800783c <vPortExitCritical>

	return xAlreadyYielded;
 800691c:	68bb      	ldr	r3, [r7, #8]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20000750 	.word	0x20000750
 800692c:	20000728 	.word	0x20000728
 8006930:	200006e8 	.word	0x200006e8
 8006934:	20000730 	.word	0x20000730
 8006938:	2000062c 	.word	0x2000062c
 800693c:	20000628 	.word	0x20000628
 8006940:	2000073c 	.word	0x2000073c
 8006944:	20000738 	.word	0x20000738
 8006948:	e000ed04 	.word	0xe000ed04

0800694c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006952:	2300      	movs	r3, #0
 8006954:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006956:	4b4f      	ldr	r3, [pc, #316]	@ (8006a94 <xTaskIncrementTick+0x148>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	f040 808f 	bne.w	8006a7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006960:	4b4d      	ldr	r3, [pc, #308]	@ (8006a98 <xTaskIncrementTick+0x14c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3301      	adds	r3, #1
 8006966:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006968:	4a4b      	ldr	r2, [pc, #300]	@ (8006a98 <xTaskIncrementTick+0x14c>)
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d121      	bne.n	80069b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006974:	4b49      	ldr	r3, [pc, #292]	@ (8006a9c <xTaskIncrementTick+0x150>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00b      	beq.n	8006996 <xTaskIncrementTick+0x4a>
	__asm volatile
 800697e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	603b      	str	r3, [r7, #0]
}
 8006990:	bf00      	nop
 8006992:	bf00      	nop
 8006994:	e7fd      	b.n	8006992 <xTaskIncrementTick+0x46>
 8006996:	4b41      	ldr	r3, [pc, #260]	@ (8006a9c <xTaskIncrementTick+0x150>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	4b40      	ldr	r3, [pc, #256]	@ (8006aa0 <xTaskIncrementTick+0x154>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a3e      	ldr	r2, [pc, #248]	@ (8006a9c <xTaskIncrementTick+0x150>)
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	4a3e      	ldr	r2, [pc, #248]	@ (8006aa0 <xTaskIncrementTick+0x154>)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6013      	str	r3, [r2, #0]
 80069aa:	4b3e      	ldr	r3, [pc, #248]	@ (8006aa4 <xTaskIncrementTick+0x158>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3301      	adds	r3, #1
 80069b0:	4a3c      	ldr	r2, [pc, #240]	@ (8006aa4 <xTaskIncrementTick+0x158>)
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	f000 fab4 	bl	8006f20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069b8:	4b3b      	ldr	r3, [pc, #236]	@ (8006aa8 <xTaskIncrementTick+0x15c>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d348      	bcc.n	8006a54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069c2:	4b36      	ldr	r3, [pc, #216]	@ (8006a9c <xTaskIncrementTick+0x150>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d104      	bne.n	80069d6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069cc:	4b36      	ldr	r3, [pc, #216]	@ (8006aa8 <xTaskIncrementTick+0x15c>)
 80069ce:	f04f 32ff 	mov.w	r2, #4294967295
 80069d2:	601a      	str	r2, [r3, #0]
					break;
 80069d4:	e03e      	b.n	8006a54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d6:	4b31      	ldr	r3, [pc, #196]	@ (8006a9c <xTaskIncrementTick+0x150>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d203      	bcs.n	80069f6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069ee:	4a2e      	ldr	r2, [pc, #184]	@ (8006aa8 <xTaskIncrementTick+0x15c>)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069f4:	e02e      	b.n	8006a54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	3304      	adds	r3, #4
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff f817 	bl	8005a2e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d004      	beq.n	8006a12 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	3318      	adds	r3, #24
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7ff f80e 	bl	8005a2e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a16:	2201      	movs	r2, #1
 8006a18:	409a      	lsls	r2, r3
 8006a1a:	4b24      	ldr	r3, [pc, #144]	@ (8006aac <xTaskIncrementTick+0x160>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	4a22      	ldr	r2, [pc, #136]	@ (8006aac <xTaskIncrementTick+0x160>)
 8006a22:	6013      	str	r3, [r2, #0]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a28:	4613      	mov	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4a1f      	ldr	r2, [pc, #124]	@ (8006ab0 <xTaskIncrementTick+0x164>)
 8006a32:	441a      	add	r2, r3
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	3304      	adds	r3, #4
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	f7fe ff9a 	bl	8005974 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a44:	4b1b      	ldr	r3, [pc, #108]	@ (8006ab4 <xTaskIncrementTick+0x168>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d3b9      	bcc.n	80069c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a52:	e7b6      	b.n	80069c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a54:	4b17      	ldr	r3, [pc, #92]	@ (8006ab4 <xTaskIncrementTick+0x168>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a5a:	4915      	ldr	r1, [pc, #84]	@ (8006ab0 <xTaskIncrementTick+0x164>)
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	440b      	add	r3, r1
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d901      	bls.n	8006a70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006a70:	4b11      	ldr	r3, [pc, #68]	@ (8006ab8 <xTaskIncrementTick+0x16c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d007      	beq.n	8006a88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	617b      	str	r3, [r7, #20]
 8006a7c:	e004      	b.n	8006a88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8006abc <xTaskIncrementTick+0x170>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3301      	adds	r3, #1
 8006a84:	4a0d      	ldr	r2, [pc, #52]	@ (8006abc <xTaskIncrementTick+0x170>)
 8006a86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006a88:	697b      	ldr	r3, [r7, #20]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	20000750 	.word	0x20000750
 8006a98:	2000072c 	.word	0x2000072c
 8006a9c:	200006e0 	.word	0x200006e0
 8006aa0:	200006e4 	.word	0x200006e4
 8006aa4:	20000740 	.word	0x20000740
 8006aa8:	20000748 	.word	0x20000748
 8006aac:	20000730 	.word	0x20000730
 8006ab0:	2000062c 	.word	0x2000062c
 8006ab4:	20000628 	.word	0x20000628
 8006ab8:	2000073c 	.word	0x2000073c
 8006abc:	20000738 	.word	0x20000738

08006ac0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8006b70 <vTaskSwitchContext+0xb0>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ace:	4b29      	ldr	r3, [pc, #164]	@ (8006b74 <vTaskSwitchContext+0xb4>)
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ad4:	e045      	b.n	8006b62 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006ad6:	4b27      	ldr	r3, [pc, #156]	@ (8006b74 <vTaskSwitchContext+0xb4>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006adc:	4b26      	ldr	r3, [pc, #152]	@ (8006b78 <vTaskSwitchContext+0xb8>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	fab3 f383 	clz	r3, r3
 8006ae8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006aea:	7afb      	ldrb	r3, [r7, #11]
 8006aec:	f1c3 031f 	rsb	r3, r3, #31
 8006af0:	617b      	str	r3, [r7, #20]
 8006af2:	4922      	ldr	r1, [pc, #136]	@ (8006b7c <vTaskSwitchContext+0xbc>)
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	4613      	mov	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	440b      	add	r3, r1
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10b      	bne.n	8006b1e <vTaskSwitchContext+0x5e>
	__asm volatile
 8006b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	607b      	str	r3, [r7, #4]
}
 8006b18:	bf00      	nop
 8006b1a:	bf00      	nop
 8006b1c:	e7fd      	b.n	8006b1a <vTaskSwitchContext+0x5a>
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	4613      	mov	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4a14      	ldr	r2, [pc, #80]	@ (8006b7c <vTaskSwitchContext+0xbc>)
 8006b2a:	4413      	add	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	605a      	str	r2, [r3, #4]
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d104      	bne.n	8006b4e <vTaskSwitchContext+0x8e>
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	605a      	str	r2, [r3, #4]
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	4a0a      	ldr	r2, [pc, #40]	@ (8006b80 <vTaskSwitchContext+0xc0>)
 8006b56:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b58:	4b09      	ldr	r3, [pc, #36]	@ (8006b80 <vTaskSwitchContext+0xc0>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	334c      	adds	r3, #76	@ 0x4c
 8006b5e:	4a09      	ldr	r2, [pc, #36]	@ (8006b84 <vTaskSwitchContext+0xc4>)
 8006b60:	6013      	str	r3, [r2, #0]
}
 8006b62:	bf00      	nop
 8006b64:	371c      	adds	r7, #28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	20000750 	.word	0x20000750
 8006b74:	2000073c 	.word	0x2000073c
 8006b78:	20000730 	.word	0x20000730
 8006b7c:	2000062c 	.word	0x2000062c
 8006b80:	20000628 	.word	0x20000628
 8006b84:	200000c0 	.word	0x200000c0

08006b88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10b      	bne.n	8006bb0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	60fb      	str	r3, [r7, #12]
}
 8006baa:	bf00      	nop
 8006bac:	bf00      	nop
 8006bae:	e7fd      	b.n	8006bac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bb0:	4b07      	ldr	r3, [pc, #28]	@ (8006bd0 <vTaskPlaceOnEventList+0x48>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3318      	adds	r3, #24
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7fe feff 	bl	80059bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	6838      	ldr	r0, [r7, #0]
 8006bc2:	f000 fc6f 	bl	80074a4 <prvAddCurrentTaskToDelayedList>
}
 8006bc6:	bf00      	nop
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000628 	.word	0x20000628

08006bd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10b      	bne.n	8006c02 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	60fb      	str	r3, [r7, #12]
}
 8006bfc:	bf00      	nop
 8006bfe:	bf00      	nop
 8006c00:	e7fd      	b.n	8006bfe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	3318      	adds	r3, #24
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fe ff11 	bl	8005a2e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8006c84 <xTaskRemoveFromEventList+0xb0>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d11c      	bne.n	8006c4e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	3304      	adds	r3, #4
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fe ff08 	bl	8005a2e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c22:	2201      	movs	r2, #1
 8006c24:	409a      	lsls	r2, r3
 8006c26:	4b18      	ldr	r3, [pc, #96]	@ (8006c88 <xTaskRemoveFromEventList+0xb4>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	4a16      	ldr	r2, [pc, #88]	@ (8006c88 <xTaskRemoveFromEventList+0xb4>)
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4a13      	ldr	r2, [pc, #76]	@ (8006c8c <xTaskRemoveFromEventList+0xb8>)
 8006c3e:	441a      	add	r2, r3
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	3304      	adds	r3, #4
 8006c44:	4619      	mov	r1, r3
 8006c46:	4610      	mov	r0, r2
 8006c48:	f7fe fe94 	bl	8005974 <vListInsertEnd>
 8006c4c:	e005      	b.n	8006c5a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	3318      	adds	r3, #24
 8006c52:	4619      	mov	r1, r3
 8006c54:	480e      	ldr	r0, [pc, #56]	@ (8006c90 <xTaskRemoveFromEventList+0xbc>)
 8006c56:	f7fe fe8d 	bl	8005974 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c94 <xTaskRemoveFromEventList+0xc0>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d905      	bls.n	8006c74 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c98 <xTaskRemoveFromEventList+0xc4>)
 8006c6e:	2201      	movs	r2, #1
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	e001      	b.n	8006c78 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006c74:	2300      	movs	r3, #0
 8006c76:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006c78:	697b      	ldr	r3, [r7, #20]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20000750 	.word	0x20000750
 8006c88:	20000730 	.word	0x20000730
 8006c8c:	2000062c 	.word	0x2000062c
 8006c90:	200006e8 	.word	0x200006e8
 8006c94:	20000628 	.word	0x20000628
 8006c98:	2000073c 	.word	0x2000073c

08006c9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ca4:	4b06      	ldr	r3, [pc, #24]	@ (8006cc0 <vTaskInternalSetTimeOutState+0x24>)
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006cac:	4b05      	ldr	r3, [pc, #20]	@ (8006cc4 <vTaskInternalSetTimeOutState+0x28>)
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	605a      	str	r2, [r3, #4]
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	20000740 	.word	0x20000740
 8006cc4:	2000072c 	.word	0x2000072c

08006cc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10b      	bne.n	8006cf0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cdc:	f383 8811 	msr	BASEPRI, r3
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	613b      	str	r3, [r7, #16]
}
 8006cea:	bf00      	nop
 8006cec:	bf00      	nop
 8006cee:	e7fd      	b.n	8006cec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10b      	bne.n	8006d0e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	60fb      	str	r3, [r7, #12]
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006d0e:	f000 fd63 	bl	80077d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d12:	4b1d      	ldr	r3, [pc, #116]	@ (8006d88 <xTaskCheckForTimeOut+0xc0>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2a:	d102      	bne.n	8006d32 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	61fb      	str	r3, [r7, #28]
 8006d30:	e023      	b.n	8006d7a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	4b15      	ldr	r3, [pc, #84]	@ (8006d8c <xTaskCheckForTimeOut+0xc4>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d007      	beq.n	8006d4e <xTaskCheckForTimeOut+0x86>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	69ba      	ldr	r2, [r7, #24]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d302      	bcc.n	8006d4e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	61fb      	str	r3, [r7, #28]
 8006d4c:	e015      	b.n	8006d7a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d20b      	bcs.n	8006d70 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	1ad2      	subs	r2, r2, r3
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff ff99 	bl	8006c9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	61fb      	str	r3, [r7, #28]
 8006d6e:	e004      	b.n	8006d7a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2200      	movs	r2, #0
 8006d74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d76:	2301      	movs	r3, #1
 8006d78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d7a:	f000 fd5f 	bl	800783c <vPortExitCritical>

	return xReturn;
 8006d7e:	69fb      	ldr	r3, [r7, #28]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3720      	adds	r7, #32
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	2000072c 	.word	0x2000072c
 8006d8c:	20000740 	.word	0x20000740

08006d90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d94:	4b03      	ldr	r3, [pc, #12]	@ (8006da4 <vTaskMissedYield+0x14>)
 8006d96:	2201      	movs	r2, #1
 8006d98:	601a      	str	r2, [r3, #0]
}
 8006d9a:	bf00      	nop
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	2000073c 	.word	0x2000073c

08006da8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006db0:	f000 f852 	bl	8006e58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006db4:	4b06      	ldr	r3, [pc, #24]	@ (8006dd0 <prvIdleTask+0x28>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d9f9      	bls.n	8006db0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006dbc:	4b05      	ldr	r3, [pc, #20]	@ (8006dd4 <prvIdleTask+0x2c>)
 8006dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006dcc:	e7f0      	b.n	8006db0 <prvIdleTask+0x8>
 8006dce:	bf00      	nop
 8006dd0:	2000062c 	.word	0x2000062c
 8006dd4:	e000ed04 	.word	0xe000ed04

08006dd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006dde:	2300      	movs	r3, #0
 8006de0:	607b      	str	r3, [r7, #4]
 8006de2:	e00c      	b.n	8006dfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	4613      	mov	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4a12      	ldr	r2, [pc, #72]	@ (8006e38 <prvInitialiseTaskLists+0x60>)
 8006df0:	4413      	add	r3, r2
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fe fd91 	bl	800591a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	607b      	str	r3, [r7, #4]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2b06      	cmp	r3, #6
 8006e02:	d9ef      	bls.n	8006de4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e04:	480d      	ldr	r0, [pc, #52]	@ (8006e3c <prvInitialiseTaskLists+0x64>)
 8006e06:	f7fe fd88 	bl	800591a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e0a:	480d      	ldr	r0, [pc, #52]	@ (8006e40 <prvInitialiseTaskLists+0x68>)
 8006e0c:	f7fe fd85 	bl	800591a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e10:	480c      	ldr	r0, [pc, #48]	@ (8006e44 <prvInitialiseTaskLists+0x6c>)
 8006e12:	f7fe fd82 	bl	800591a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e16:	480c      	ldr	r0, [pc, #48]	@ (8006e48 <prvInitialiseTaskLists+0x70>)
 8006e18:	f7fe fd7f 	bl	800591a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e1c:	480b      	ldr	r0, [pc, #44]	@ (8006e4c <prvInitialiseTaskLists+0x74>)
 8006e1e:	f7fe fd7c 	bl	800591a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e22:	4b0b      	ldr	r3, [pc, #44]	@ (8006e50 <prvInitialiseTaskLists+0x78>)
 8006e24:	4a05      	ldr	r2, [pc, #20]	@ (8006e3c <prvInitialiseTaskLists+0x64>)
 8006e26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e28:	4b0a      	ldr	r3, [pc, #40]	@ (8006e54 <prvInitialiseTaskLists+0x7c>)
 8006e2a:	4a05      	ldr	r2, [pc, #20]	@ (8006e40 <prvInitialiseTaskLists+0x68>)
 8006e2c:	601a      	str	r2, [r3, #0]
}
 8006e2e:	bf00      	nop
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	2000062c 	.word	0x2000062c
 8006e3c:	200006b8 	.word	0x200006b8
 8006e40:	200006cc 	.word	0x200006cc
 8006e44:	200006e8 	.word	0x200006e8
 8006e48:	200006fc 	.word	0x200006fc
 8006e4c:	20000714 	.word	0x20000714
 8006e50:	200006e0 	.word	0x200006e0
 8006e54:	200006e4 	.word	0x200006e4

08006e58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e5e:	e019      	b.n	8006e94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e60:	f000 fcba 	bl	80077d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e64:	4b10      	ldr	r3, [pc, #64]	@ (8006ea8 <prvCheckTasksWaitingTermination+0x50>)
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	3304      	adds	r3, #4
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fe fddc 	bl	8005a2e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e76:	4b0d      	ldr	r3, [pc, #52]	@ (8006eac <prvCheckTasksWaitingTermination+0x54>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	4a0b      	ldr	r2, [pc, #44]	@ (8006eac <prvCheckTasksWaitingTermination+0x54>)
 8006e7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e80:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb0 <prvCheckTasksWaitingTermination+0x58>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3b01      	subs	r3, #1
 8006e86:	4a0a      	ldr	r2, [pc, #40]	@ (8006eb0 <prvCheckTasksWaitingTermination+0x58>)
 8006e88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e8a:	f000 fcd7 	bl	800783c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f810 	bl	8006eb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e94:	4b06      	ldr	r3, [pc, #24]	@ (8006eb0 <prvCheckTasksWaitingTermination+0x58>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e1      	bne.n	8006e60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e9c:	bf00      	nop
 8006e9e:	bf00      	nop
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	200006fc 	.word	0x200006fc
 8006eac:	20000728 	.word	0x20000728
 8006eb0:	20000710 	.word	0x20000710

08006eb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	334c      	adds	r3, #76	@ 0x4c
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 ffc3 	bl	8007e4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d108      	bne.n	8006ee2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 fe6f 	bl	8007bb8 <vPortFree>
				vPortFree( pxTCB );
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fe6c 	bl	8007bb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ee0:	e019      	b.n	8006f16 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d103      	bne.n	8006ef4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fe63 	bl	8007bb8 <vPortFree>
	}
 8006ef2:	e010      	b.n	8006f16 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d00b      	beq.n	8006f16 <prvDeleteTCB+0x62>
	__asm volatile
 8006efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	60fb      	str	r3, [r7, #12]
}
 8006f10:	bf00      	nop
 8006f12:	bf00      	nop
 8006f14:	e7fd      	b.n	8006f12 <prvDeleteTCB+0x5e>
	}
 8006f16:	bf00      	nop
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
	...

08006f20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f26:	4b0c      	ldr	r3, [pc, #48]	@ (8006f58 <prvResetNextTaskUnblockTime+0x38>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d104      	bne.n	8006f3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f30:	4b0a      	ldr	r3, [pc, #40]	@ (8006f5c <prvResetNextTaskUnblockTime+0x3c>)
 8006f32:	f04f 32ff 	mov.w	r2, #4294967295
 8006f36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f38:	e008      	b.n	8006f4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f3a:	4b07      	ldr	r3, [pc, #28]	@ (8006f58 <prvResetNextTaskUnblockTime+0x38>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	4a04      	ldr	r2, [pc, #16]	@ (8006f5c <prvResetNextTaskUnblockTime+0x3c>)
 8006f4a:	6013      	str	r3, [r2, #0]
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	200006e0 	.word	0x200006e0
 8006f5c:	20000748 	.word	0x20000748

08006f60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f66:	4b0b      	ldr	r3, [pc, #44]	@ (8006f94 <xTaskGetSchedulerState+0x34>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d102      	bne.n	8006f74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	607b      	str	r3, [r7, #4]
 8006f72:	e008      	b.n	8006f86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f74:	4b08      	ldr	r3, [pc, #32]	@ (8006f98 <xTaskGetSchedulerState+0x38>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d102      	bne.n	8006f82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	607b      	str	r3, [r7, #4]
 8006f80:	e001      	b.n	8006f86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f82:	2300      	movs	r3, #0
 8006f84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f86:	687b      	ldr	r3, [r7, #4]
	}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	20000734 	.word	0x20000734
 8006f98:	20000750 	.word	0x20000750

08006f9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d05e      	beq.n	8007070 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb6:	4b31      	ldr	r3, [pc, #196]	@ (800707c <xTaskPriorityInherit+0xe0>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d24e      	bcs.n	800705e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	db06      	blt.n	8006fd6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fc8:	4b2c      	ldr	r3, [pc, #176]	@ (800707c <xTaskPriorityInherit+0xe0>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fce:	f1c3 0207 	rsb	r2, r3, #7
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	6959      	ldr	r1, [r3, #20]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fde:	4613      	mov	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4a26      	ldr	r2, [pc, #152]	@ (8007080 <xTaskPriorityInherit+0xe4>)
 8006fe8:	4413      	add	r3, r2
 8006fea:	4299      	cmp	r1, r3
 8006fec:	d12f      	bne.n	800704e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe fd1b 	bl	8005a2e <uxListRemove>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10a      	bne.n	8007014 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007002:	2201      	movs	r2, #1
 8007004:	fa02 f303 	lsl.w	r3, r2, r3
 8007008:	43da      	mvns	r2, r3
 800700a:	4b1e      	ldr	r3, [pc, #120]	@ (8007084 <xTaskPriorityInherit+0xe8>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4013      	ands	r3, r2
 8007010:	4a1c      	ldr	r2, [pc, #112]	@ (8007084 <xTaskPriorityInherit+0xe8>)
 8007012:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007014:	4b19      	ldr	r3, [pc, #100]	@ (800707c <xTaskPriorityInherit+0xe0>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007022:	2201      	movs	r2, #1
 8007024:	409a      	lsls	r2, r3
 8007026:	4b17      	ldr	r3, [pc, #92]	@ (8007084 <xTaskPriorityInherit+0xe8>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4313      	orrs	r3, r2
 800702c:	4a15      	ldr	r2, [pc, #84]	@ (8007084 <xTaskPriorityInherit+0xe8>)
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007034:	4613      	mov	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4a10      	ldr	r2, [pc, #64]	@ (8007080 <xTaskPriorityInherit+0xe4>)
 800703e:	441a      	add	r2, r3
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	3304      	adds	r3, #4
 8007044:	4619      	mov	r1, r3
 8007046:	4610      	mov	r0, r2
 8007048:	f7fe fc94 	bl	8005974 <vListInsertEnd>
 800704c:	e004      	b.n	8007058 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800704e:	4b0b      	ldr	r3, [pc, #44]	@ (800707c <xTaskPriorityInherit+0xe0>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007058:	2301      	movs	r3, #1
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	e008      	b.n	8007070 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007062:	4b06      	ldr	r3, [pc, #24]	@ (800707c <xTaskPriorityInherit+0xe0>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007068:	429a      	cmp	r2, r3
 800706a:	d201      	bcs.n	8007070 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800706c:	2301      	movs	r3, #1
 800706e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007070:	68fb      	ldr	r3, [r7, #12]
	}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20000628 	.word	0x20000628
 8007080:	2000062c 	.word	0x2000062c
 8007084:	20000730 	.word	0x20000730

08007088 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007094:	2300      	movs	r3, #0
 8007096:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d070      	beq.n	8007180 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800709e:	4b3b      	ldr	r3, [pc, #236]	@ (800718c <xTaskPriorityDisinherit+0x104>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d00b      	beq.n	80070c0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80070a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	60fb      	str	r3, [r7, #12]
}
 80070ba:	bf00      	nop
 80070bc:	bf00      	nop
 80070be:	e7fd      	b.n	80070bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10b      	bne.n	80070e0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80070c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	60bb      	str	r3, [r7, #8]
}
 80070da:	bf00      	nop
 80070dc:	bf00      	nop
 80070de:	e7fd      	b.n	80070dc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070e4:	1e5a      	subs	r2, r3, #1
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d044      	beq.n	8007180 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d140      	bne.n	8007180 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	3304      	adds	r3, #4
 8007102:	4618      	mov	r0, r3
 8007104:	f7fe fc93 	bl	8005a2e <uxListRemove>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d115      	bne.n	800713a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007112:	491f      	ldr	r1, [pc, #124]	@ (8007190 <xTaskPriorityDisinherit+0x108>)
 8007114:	4613      	mov	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	440b      	add	r3, r1
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10a      	bne.n	800713a <xTaskPriorityDisinherit+0xb2>
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007128:	2201      	movs	r2, #1
 800712a:	fa02 f303 	lsl.w	r3, r2, r3
 800712e:	43da      	mvns	r2, r3
 8007130:	4b18      	ldr	r3, [pc, #96]	@ (8007194 <xTaskPriorityDisinherit+0x10c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4013      	ands	r3, r2
 8007136:	4a17      	ldr	r2, [pc, #92]	@ (8007194 <xTaskPriorityDisinherit+0x10c>)
 8007138:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007146:	f1c3 0207 	rsb	r2, r3, #7
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007152:	2201      	movs	r2, #1
 8007154:	409a      	lsls	r2, r3
 8007156:	4b0f      	ldr	r3, [pc, #60]	@ (8007194 <xTaskPriorityDisinherit+0x10c>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4313      	orrs	r3, r2
 800715c:	4a0d      	ldr	r2, [pc, #52]	@ (8007194 <xTaskPriorityDisinherit+0x10c>)
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007164:	4613      	mov	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4a08      	ldr	r2, [pc, #32]	@ (8007190 <xTaskPriorityDisinherit+0x108>)
 800716e:	441a      	add	r2, r3
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	3304      	adds	r3, #4
 8007174:	4619      	mov	r1, r3
 8007176:	4610      	mov	r0, r2
 8007178:	f7fe fbfc 	bl	8005974 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800717c:	2301      	movs	r3, #1
 800717e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007180:	697b      	ldr	r3, [r7, #20]
	}
 8007182:	4618      	mov	r0, r3
 8007184:	3718      	adds	r7, #24
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000628 	.word	0x20000628
 8007190:	2000062c 	.word	0x2000062c
 8007194:	20000730 	.word	0x20000730

08007198 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80071a6:	2301      	movs	r3, #1
 80071a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d079      	beq.n	80072a4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10b      	bne.n	80071d0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80071b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	60fb      	str	r3, [r7, #12]
}
 80071ca:	bf00      	nop
 80071cc:	bf00      	nop
 80071ce:	e7fd      	b.n	80071cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d902      	bls.n	80071e0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	61fb      	str	r3, [r7, #28]
 80071de:	e002      	b.n	80071e6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071e4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d059      	beq.n	80072a4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d154      	bne.n	80072a4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80071fa:	4b2c      	ldr	r3, [pc, #176]	@ (80072ac <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	429a      	cmp	r2, r3
 8007202:	d10b      	bne.n	800721c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	60bb      	str	r3, [r7, #8]
}
 8007216:	bf00      	nop
 8007218:	bf00      	nop
 800721a:	e7fd      	b.n	8007218 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007220:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	69fa      	ldr	r2, [r7, #28]
 8007226:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	2b00      	cmp	r3, #0
 800722e:	db04      	blt.n	800723a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	f1c3 0207 	rsb	r2, r3, #7
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	6959      	ldr	r1, [r3, #20]
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	4613      	mov	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4a19      	ldr	r2, [pc, #100]	@ (80072b0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800724a:	4413      	add	r3, r2
 800724c:	4299      	cmp	r1, r3
 800724e:	d129      	bne.n	80072a4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	3304      	adds	r3, #4
 8007254:	4618      	mov	r0, r3
 8007256:	f7fe fbea 	bl	8005a2e <uxListRemove>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10a      	bne.n	8007276 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007264:	2201      	movs	r2, #1
 8007266:	fa02 f303 	lsl.w	r3, r2, r3
 800726a:	43da      	mvns	r2, r3
 800726c:	4b11      	ldr	r3, [pc, #68]	@ (80072b4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4013      	ands	r3, r2
 8007272:	4a10      	ldr	r2, [pc, #64]	@ (80072b4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007274:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800727a:	2201      	movs	r2, #1
 800727c:	409a      	lsls	r2, r3
 800727e:	4b0d      	ldr	r3, [pc, #52]	@ (80072b4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4313      	orrs	r3, r2
 8007284:	4a0b      	ldr	r2, [pc, #44]	@ (80072b4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007286:	6013      	str	r3, [r2, #0]
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800728c:	4613      	mov	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4a06      	ldr	r2, [pc, #24]	@ (80072b0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007296:	441a      	add	r2, r3
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	3304      	adds	r3, #4
 800729c:	4619      	mov	r1, r3
 800729e:	4610      	mov	r0, r2
 80072a0:	f7fe fb68 	bl	8005974 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072a4:	bf00      	nop
 80072a6:	3720      	adds	r7, #32
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	20000628 	.word	0x20000628
 80072b0:	2000062c 	.word	0x2000062c
 80072b4:	20000730 	.word	0x20000730

080072b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80072b8:	b480      	push	{r7}
 80072ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80072bc:	4b07      	ldr	r3, [pc, #28]	@ (80072dc <pvTaskIncrementMutexHeldCount+0x24>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d004      	beq.n	80072ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80072c4:	4b05      	ldr	r3, [pc, #20]	@ (80072dc <pvTaskIncrementMutexHeldCount+0x24>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80072ca:	3201      	adds	r2, #1
 80072cc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80072ce:	4b03      	ldr	r3, [pc, #12]	@ (80072dc <pvTaskIncrementMutexHeldCount+0x24>)
 80072d0:	681b      	ldr	r3, [r3, #0]
	}
 80072d2:	4618      	mov	r0, r3
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	20000628 	.word	0x20000628

080072e0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80072ea:	f000 fa75 	bl	80077d8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80072ee:	4b20      	ldr	r3, [pc, #128]	@ (8007370 <ulTaskNotifyTake+0x90>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d113      	bne.n	8007322 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80072fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007370 <ulTaskNotifyTake+0x90>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00b      	beq.n	8007322 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800730a:	2101      	movs	r1, #1
 800730c:	6838      	ldr	r0, [r7, #0]
 800730e:	f000 f8c9 	bl	80074a4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007312:	4b18      	ldr	r3, [pc, #96]	@ (8007374 <ulTaskNotifyTake+0x94>)
 8007314:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007322:	f000 fa8b 	bl	800783c <vPortExitCritical>

		taskENTER_CRITICAL();
 8007326:	f000 fa57 	bl	80077d8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800732a:	4b11      	ldr	r3, [pc, #68]	@ (8007370 <ulTaskNotifyTake+0x90>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007332:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00e      	beq.n	8007358 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d005      	beq.n	800734c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007340:	4b0b      	ldr	r3, [pc, #44]	@ (8007370 <ulTaskNotifyTake+0x90>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2200      	movs	r2, #0
 8007346:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800734a:	e005      	b.n	8007358 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800734c:	4b08      	ldr	r3, [pc, #32]	@ (8007370 <ulTaskNotifyTake+0x90>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	3a01      	subs	r2, #1
 8007354:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007358:	4b05      	ldr	r3, [pc, #20]	@ (8007370 <ulTaskNotifyTake+0x90>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8007362:	f000 fa6b 	bl	800783c <vPortExitCritical>

		return ulReturn;
 8007366:	68fb      	ldr	r3, [r7, #12]
	}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	20000628 	.word	0x20000628
 8007374:	e000ed04 	.word	0xe000ed04

08007378 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007378:	b580      	push	{r7, lr}
 800737a:	b08a      	sub	sp, #40	@ 0x28
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10b      	bne.n	80073a0 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8007388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	61bb      	str	r3, [r7, #24]
}
 800739a:	bf00      	nop
 800739c:	bf00      	nop
 800739e:	e7fd      	b.n	800739c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073a0:	f000 fafa 	bl	8007998 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 80073a8:	f3ef 8211 	mrs	r2, BASEPRI
 80073ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	617a      	str	r2, [r7, #20]
 80073be:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80073c0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073c2:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80073c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c6:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80073ca:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80073cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ce:	2202      	movs	r2, #2
 80073d0:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80073d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073de:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80073e2:	7ffb      	ldrb	r3, [r7, #31]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d146      	bne.n	8007476 <vTaskNotifyGiveFromISR+0xfe>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80073e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00b      	beq.n	8007408 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	60fb      	str	r3, [r7, #12]
}
 8007402:	bf00      	nop
 8007404:	bf00      	nop
 8007406:	e7fd      	b.n	8007404 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007408:	4b20      	ldr	r3, [pc, #128]	@ (800748c <vTaskNotifyGiveFromISR+0x114>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d11c      	bne.n	800744a <vTaskNotifyGiveFromISR+0xd2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007412:	3304      	adds	r3, #4
 8007414:	4618      	mov	r0, r3
 8007416:	f7fe fb0a 	bl	8005a2e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800741a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741e:	2201      	movs	r2, #1
 8007420:	409a      	lsls	r2, r3
 8007422:	4b1b      	ldr	r3, [pc, #108]	@ (8007490 <vTaskNotifyGiveFromISR+0x118>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4313      	orrs	r3, r2
 8007428:	4a19      	ldr	r2, [pc, #100]	@ (8007490 <vTaskNotifyGiveFromISR+0x118>)
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007430:	4613      	mov	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4a16      	ldr	r2, [pc, #88]	@ (8007494 <vTaskNotifyGiveFromISR+0x11c>)
 800743a:	441a      	add	r2, r3
 800743c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743e:	3304      	adds	r3, #4
 8007440:	4619      	mov	r1, r3
 8007442:	4610      	mov	r0, r2
 8007444:	f7fe fa96 	bl	8005974 <vListInsertEnd>
 8007448:	e005      	b.n	8007456 <vTaskNotifyGiveFromISR+0xde>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800744a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744c:	3318      	adds	r3, #24
 800744e:	4619      	mov	r1, r3
 8007450:	4811      	ldr	r0, [pc, #68]	@ (8007498 <vTaskNotifyGiveFromISR+0x120>)
 8007452:	f7fe fa8f 	bl	8005974 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800745a:	4b10      	ldr	r3, [pc, #64]	@ (800749c <vTaskNotifyGiveFromISR+0x124>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007460:	429a      	cmp	r2, r3
 8007462:	d908      	bls.n	8007476 <vTaskNotifyGiveFromISR+0xfe>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d002      	beq.n	8007470 <vTaskNotifyGiveFromISR+0xf8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2201      	movs	r2, #1
 800746e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007470:	4b0b      	ldr	r3, [pc, #44]	@ (80074a0 <vTaskNotifyGiveFromISR+0x128>)
 8007472:	2201      	movs	r2, #1
 8007474:	601a      	str	r2, [r3, #0]
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f383 8811 	msr	BASEPRI, r3
}
 8007480:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8007482:	bf00      	nop
 8007484:	3728      	adds	r7, #40	@ 0x28
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	20000750 	.word	0x20000750
 8007490:	20000730 	.word	0x20000730
 8007494:	2000062c 	.word	0x2000062c
 8007498:	200006e8 	.word	0x200006e8
 800749c:	20000628 	.word	0x20000628
 80074a0:	2000073c 	.word	0x2000073c

080074a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80074ae:	4b29      	ldr	r3, [pc, #164]	@ (8007554 <prvAddCurrentTaskToDelayedList+0xb0>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074b4:	4b28      	ldr	r3, [pc, #160]	@ (8007558 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3304      	adds	r3, #4
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fe fab7 	bl	8005a2e <uxListRemove>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10b      	bne.n	80074de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80074c6:	4b24      	ldr	r3, [pc, #144]	@ (8007558 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074cc:	2201      	movs	r2, #1
 80074ce:	fa02 f303 	lsl.w	r3, r2, r3
 80074d2:	43da      	mvns	r2, r3
 80074d4:	4b21      	ldr	r3, [pc, #132]	@ (800755c <prvAddCurrentTaskToDelayedList+0xb8>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4013      	ands	r3, r2
 80074da:	4a20      	ldr	r2, [pc, #128]	@ (800755c <prvAddCurrentTaskToDelayedList+0xb8>)
 80074dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e4:	d10a      	bne.n	80074fc <prvAddCurrentTaskToDelayedList+0x58>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d007      	beq.n	80074fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074ec:	4b1a      	ldr	r3, [pc, #104]	@ (8007558 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	3304      	adds	r3, #4
 80074f2:	4619      	mov	r1, r3
 80074f4:	481a      	ldr	r0, [pc, #104]	@ (8007560 <prvAddCurrentTaskToDelayedList+0xbc>)
 80074f6:	f7fe fa3d 	bl	8005974 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80074fa:	e026      	b.n	800754a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4413      	add	r3, r2
 8007502:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007504:	4b14      	ldr	r3, [pc, #80]	@ (8007558 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	429a      	cmp	r2, r3
 8007512:	d209      	bcs.n	8007528 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007514:	4b13      	ldr	r3, [pc, #76]	@ (8007564 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	4b0f      	ldr	r3, [pc, #60]	@ (8007558 <prvAddCurrentTaskToDelayedList+0xb4>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3304      	adds	r3, #4
 800751e:	4619      	mov	r1, r3
 8007520:	4610      	mov	r0, r2
 8007522:	f7fe fa4b 	bl	80059bc <vListInsert>
}
 8007526:	e010      	b.n	800754a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007528:	4b0f      	ldr	r3, [pc, #60]	@ (8007568 <prvAddCurrentTaskToDelayedList+0xc4>)
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	4b0a      	ldr	r3, [pc, #40]	@ (8007558 <prvAddCurrentTaskToDelayedList+0xb4>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	3304      	adds	r3, #4
 8007532:	4619      	mov	r1, r3
 8007534:	4610      	mov	r0, r2
 8007536:	f7fe fa41 	bl	80059bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800753a:	4b0c      	ldr	r3, [pc, #48]	@ (800756c <prvAddCurrentTaskToDelayedList+0xc8>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	429a      	cmp	r2, r3
 8007542:	d202      	bcs.n	800754a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007544:	4a09      	ldr	r2, [pc, #36]	@ (800756c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	6013      	str	r3, [r2, #0]
}
 800754a:	bf00      	nop
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	2000072c 	.word	0x2000072c
 8007558:	20000628 	.word	0x20000628
 800755c:	20000730 	.word	0x20000730
 8007560:	20000714 	.word	0x20000714
 8007564:	200006e4 	.word	0x200006e4
 8007568:	200006e0 	.word	0x200006e0
 800756c:	20000748 	.word	0x20000748

08007570 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	3b04      	subs	r3, #4
 8007580:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007588:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3b04      	subs	r3, #4
 800758e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f023 0201 	bic.w	r2, r3, #1
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	3b04      	subs	r3, #4
 800759e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075a0:	4a0c      	ldr	r2, [pc, #48]	@ (80075d4 <pxPortInitialiseStack+0x64>)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	3b14      	subs	r3, #20
 80075aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3b04      	subs	r3, #4
 80075b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f06f 0202 	mvn.w	r2, #2
 80075be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3b20      	subs	r3, #32
 80075c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80075c6:	68fb      	ldr	r3, [r7, #12]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	080075d9 	.word	0x080075d9

080075d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80075de:	2300      	movs	r3, #0
 80075e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80075e2:	4b13      	ldr	r3, [pc, #76]	@ (8007630 <prvTaskExitError+0x58>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ea:	d00b      	beq.n	8007604 <prvTaskExitError+0x2c>
	__asm volatile
 80075ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f0:	f383 8811 	msr	BASEPRI, r3
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	60fb      	str	r3, [r7, #12]
}
 80075fe:	bf00      	nop
 8007600:	bf00      	nop
 8007602:	e7fd      	b.n	8007600 <prvTaskExitError+0x28>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	60bb      	str	r3, [r7, #8]
}
 8007616:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007618:	bf00      	nop
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d0fc      	beq.n	800761a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007620:	bf00      	nop
 8007622:	bf00      	nop
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	200000bc 	.word	0x200000bc
	...

08007640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007640:	4b07      	ldr	r3, [pc, #28]	@ (8007660 <pxCurrentTCBConst2>)
 8007642:	6819      	ldr	r1, [r3, #0]
 8007644:	6808      	ldr	r0, [r1, #0]
 8007646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764a:	f380 8809 	msr	PSP, r0
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f04f 0000 	mov.w	r0, #0
 8007656:	f380 8811 	msr	BASEPRI, r0
 800765a:	4770      	bx	lr
 800765c:	f3af 8000 	nop.w

08007660 <pxCurrentTCBConst2>:
 8007660:	20000628 	.word	0x20000628
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007664:	bf00      	nop
 8007666:	bf00      	nop

08007668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007668:	4808      	ldr	r0, [pc, #32]	@ (800768c <prvPortStartFirstTask+0x24>)
 800766a:	6800      	ldr	r0, [r0, #0]
 800766c:	6800      	ldr	r0, [r0, #0]
 800766e:	f380 8808 	msr	MSP, r0
 8007672:	f04f 0000 	mov.w	r0, #0
 8007676:	f380 8814 	msr	CONTROL, r0
 800767a:	b662      	cpsie	i
 800767c:	b661      	cpsie	f
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	df00      	svc	0
 8007688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800768a:	bf00      	nop
 800768c:	e000ed08 	.word	0xe000ed08

08007690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007696:	4b47      	ldr	r3, [pc, #284]	@ (80077b4 <xPortStartScheduler+0x124>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a47      	ldr	r2, [pc, #284]	@ (80077b8 <xPortStartScheduler+0x128>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d10b      	bne.n	80076b8 <xPortStartScheduler+0x28>
	__asm volatile
 80076a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a4:	f383 8811 	msr	BASEPRI, r3
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	60fb      	str	r3, [r7, #12]
}
 80076b2:	bf00      	nop
 80076b4:	bf00      	nop
 80076b6:	e7fd      	b.n	80076b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076b8:	4b3e      	ldr	r3, [pc, #248]	@ (80077b4 <xPortStartScheduler+0x124>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a3f      	ldr	r2, [pc, #252]	@ (80077bc <xPortStartScheduler+0x12c>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d10b      	bne.n	80076da <xPortStartScheduler+0x4a>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	613b      	str	r3, [r7, #16]
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop
 80076d8:	e7fd      	b.n	80076d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80076da:	4b39      	ldr	r3, [pc, #228]	@ (80077c0 <xPortStartScheduler+0x130>)
 80076dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	22ff      	movs	r2, #255	@ 0xff
 80076ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076f4:	78fb      	ldrb	r3, [r7, #3]
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	4b31      	ldr	r3, [pc, #196]	@ (80077c4 <xPortStartScheduler+0x134>)
 8007700:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007702:	4b31      	ldr	r3, [pc, #196]	@ (80077c8 <xPortStartScheduler+0x138>)
 8007704:	2207      	movs	r2, #7
 8007706:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007708:	e009      	b.n	800771e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800770a:	4b2f      	ldr	r3, [pc, #188]	@ (80077c8 <xPortStartScheduler+0x138>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3b01      	subs	r3, #1
 8007710:	4a2d      	ldr	r2, [pc, #180]	@ (80077c8 <xPortStartScheduler+0x138>)
 8007712:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007714:	78fb      	ldrb	r3, [r7, #3]
 8007716:	b2db      	uxtb	r3, r3
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	b2db      	uxtb	r3, r3
 800771c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800771e:	78fb      	ldrb	r3, [r7, #3]
 8007720:	b2db      	uxtb	r3, r3
 8007722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007726:	2b80      	cmp	r3, #128	@ 0x80
 8007728:	d0ef      	beq.n	800770a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800772a:	4b27      	ldr	r3, [pc, #156]	@ (80077c8 <xPortStartScheduler+0x138>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f1c3 0307 	rsb	r3, r3, #7
 8007732:	2b04      	cmp	r3, #4
 8007734:	d00b      	beq.n	800774e <xPortStartScheduler+0xbe>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	60bb      	str	r3, [r7, #8]
}
 8007748:	bf00      	nop
 800774a:	bf00      	nop
 800774c:	e7fd      	b.n	800774a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800774e:	4b1e      	ldr	r3, [pc, #120]	@ (80077c8 <xPortStartScheduler+0x138>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	021b      	lsls	r3, r3, #8
 8007754:	4a1c      	ldr	r2, [pc, #112]	@ (80077c8 <xPortStartScheduler+0x138>)
 8007756:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007758:	4b1b      	ldr	r3, [pc, #108]	@ (80077c8 <xPortStartScheduler+0x138>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007760:	4a19      	ldr	r2, [pc, #100]	@ (80077c8 <xPortStartScheduler+0x138>)
 8007762:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	b2da      	uxtb	r2, r3
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800776c:	4b17      	ldr	r3, [pc, #92]	@ (80077cc <xPortStartScheduler+0x13c>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a16      	ldr	r2, [pc, #88]	@ (80077cc <xPortStartScheduler+0x13c>)
 8007772:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007776:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007778:	4b14      	ldr	r3, [pc, #80]	@ (80077cc <xPortStartScheduler+0x13c>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a13      	ldr	r2, [pc, #76]	@ (80077cc <xPortStartScheduler+0x13c>)
 800777e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007782:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007784:	f000 f8da 	bl	800793c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007788:	4b11      	ldr	r3, [pc, #68]	@ (80077d0 <xPortStartScheduler+0x140>)
 800778a:	2200      	movs	r2, #0
 800778c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800778e:	f000 f8f9 	bl	8007984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007792:	4b10      	ldr	r3, [pc, #64]	@ (80077d4 <xPortStartScheduler+0x144>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a0f      	ldr	r2, [pc, #60]	@ (80077d4 <xPortStartScheduler+0x144>)
 8007798:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800779c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800779e:	f7ff ff63 	bl	8007668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077a2:	f7ff f98d 	bl	8006ac0 <vTaskSwitchContext>
	prvTaskExitError();
 80077a6:	f7ff ff17 	bl	80075d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	e000ed00 	.word	0xe000ed00
 80077b8:	410fc271 	.word	0x410fc271
 80077bc:	410fc270 	.word	0x410fc270
 80077c0:	e000e400 	.word	0xe000e400
 80077c4:	20000754 	.word	0x20000754
 80077c8:	20000758 	.word	0x20000758
 80077cc:	e000ed20 	.word	0xe000ed20
 80077d0:	200000bc 	.word	0x200000bc
 80077d4:	e000ef34 	.word	0xe000ef34

080077d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	607b      	str	r3, [r7, #4]
}
 80077f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80077f2:	4b10      	ldr	r3, [pc, #64]	@ (8007834 <vPortEnterCritical+0x5c>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3301      	adds	r3, #1
 80077f8:	4a0e      	ldr	r2, [pc, #56]	@ (8007834 <vPortEnterCritical+0x5c>)
 80077fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80077fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007834 <vPortEnterCritical+0x5c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d110      	bne.n	8007826 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007804:	4b0c      	ldr	r3, [pc, #48]	@ (8007838 <vPortEnterCritical+0x60>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00b      	beq.n	8007826 <vPortEnterCritical+0x4e>
	__asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	603b      	str	r3, [r7, #0]
}
 8007820:	bf00      	nop
 8007822:	bf00      	nop
 8007824:	e7fd      	b.n	8007822 <vPortEnterCritical+0x4a>
	}
}
 8007826:	bf00      	nop
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	200000bc 	.word	0x200000bc
 8007838:	e000ed04 	.word	0xe000ed04

0800783c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007842:	4b12      	ldr	r3, [pc, #72]	@ (800788c <vPortExitCritical+0x50>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10b      	bne.n	8007862 <vPortExitCritical+0x26>
	__asm volatile
 800784a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784e:	f383 8811 	msr	BASEPRI, r3
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	607b      	str	r3, [r7, #4]
}
 800785c:	bf00      	nop
 800785e:	bf00      	nop
 8007860:	e7fd      	b.n	800785e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007862:	4b0a      	ldr	r3, [pc, #40]	@ (800788c <vPortExitCritical+0x50>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3b01      	subs	r3, #1
 8007868:	4a08      	ldr	r2, [pc, #32]	@ (800788c <vPortExitCritical+0x50>)
 800786a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800786c:	4b07      	ldr	r3, [pc, #28]	@ (800788c <vPortExitCritical+0x50>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d105      	bne.n	8007880 <vPortExitCritical+0x44>
 8007874:	2300      	movs	r3, #0
 8007876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	f383 8811 	msr	BASEPRI, r3
}
 800787e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	200000bc 	.word	0x200000bc

08007890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007890:	f3ef 8009 	mrs	r0, PSP
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	4b15      	ldr	r3, [pc, #84]	@ (80078f0 <pxCurrentTCBConst>)
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	f01e 0f10 	tst.w	lr, #16
 80078a0:	bf08      	it	eq
 80078a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078aa:	6010      	str	r0, [r2, #0]
 80078ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80078b4:	f380 8811 	msr	BASEPRI, r0
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f7ff f8fe 	bl	8006ac0 <vTaskSwitchContext>
 80078c4:	f04f 0000 	mov.w	r0, #0
 80078c8:	f380 8811 	msr	BASEPRI, r0
 80078cc:	bc09      	pop	{r0, r3}
 80078ce:	6819      	ldr	r1, [r3, #0]
 80078d0:	6808      	ldr	r0, [r1, #0]
 80078d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d6:	f01e 0f10 	tst.w	lr, #16
 80078da:	bf08      	it	eq
 80078dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80078e0:	f380 8809 	msr	PSP, r0
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	f3af 8000 	nop.w

080078f0 <pxCurrentTCBConst>:
 80078f0:	20000628 	.word	0x20000628
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop

080078f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	607b      	str	r3, [r7, #4]
}
 8007910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007912:	f7ff f81b 	bl	800694c <xTaskIncrementTick>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d003      	beq.n	8007924 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800791c:	4b06      	ldr	r3, [pc, #24]	@ (8007938 <SysTick_Handler+0x40>)
 800791e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	2300      	movs	r3, #0
 8007926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	f383 8811 	msr	BASEPRI, r3
}
 800792e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007930:	bf00      	nop
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	e000ed04 	.word	0xe000ed04

0800793c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007940:	4b0b      	ldr	r3, [pc, #44]	@ (8007970 <vPortSetupTimerInterrupt+0x34>)
 8007942:	2200      	movs	r2, #0
 8007944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007946:	4b0b      	ldr	r3, [pc, #44]	@ (8007974 <vPortSetupTimerInterrupt+0x38>)
 8007948:	2200      	movs	r2, #0
 800794a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800794c:	4b0a      	ldr	r3, [pc, #40]	@ (8007978 <vPortSetupTimerInterrupt+0x3c>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a0a      	ldr	r2, [pc, #40]	@ (800797c <vPortSetupTimerInterrupt+0x40>)
 8007952:	fba2 2303 	umull	r2, r3, r2, r3
 8007956:	099b      	lsrs	r3, r3, #6
 8007958:	4a09      	ldr	r2, [pc, #36]	@ (8007980 <vPortSetupTimerInterrupt+0x44>)
 800795a:	3b01      	subs	r3, #1
 800795c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800795e:	4b04      	ldr	r3, [pc, #16]	@ (8007970 <vPortSetupTimerInterrupt+0x34>)
 8007960:	2207      	movs	r2, #7
 8007962:	601a      	str	r2, [r3, #0]
}
 8007964:	bf00      	nop
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	e000e010 	.word	0xe000e010
 8007974:	e000e018 	.word	0xe000e018
 8007978:	200000b0 	.word	0x200000b0
 800797c:	10624dd3 	.word	0x10624dd3
 8007980:	e000e014 	.word	0xe000e014

08007984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007984:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007994 <vPortEnableVFP+0x10>
 8007988:	6801      	ldr	r1, [r0, #0]
 800798a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800798e:	6001      	str	r1, [r0, #0]
 8007990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007992:	bf00      	nop
 8007994:	e000ed88 	.word	0xe000ed88

08007998 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800799e:	f3ef 8305 	mrs	r3, IPSR
 80079a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2b0f      	cmp	r3, #15
 80079a8:	d915      	bls.n	80079d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079aa:	4a18      	ldr	r2, [pc, #96]	@ (8007a0c <vPortValidateInterruptPriority+0x74>)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4413      	add	r3, r2
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079b4:	4b16      	ldr	r3, [pc, #88]	@ (8007a10 <vPortValidateInterruptPriority+0x78>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	7afa      	ldrb	r2, [r7, #11]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d20b      	bcs.n	80079d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	607b      	str	r3, [r7, #4]
}
 80079d0:	bf00      	nop
 80079d2:	bf00      	nop
 80079d4:	e7fd      	b.n	80079d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80079d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007a14 <vPortValidateInterruptPriority+0x7c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80079de:	4b0e      	ldr	r3, [pc, #56]	@ (8007a18 <vPortValidateInterruptPriority+0x80>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d90b      	bls.n	80079fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80079e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ea:	f383 8811 	msr	BASEPRI, r3
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	603b      	str	r3, [r7, #0]
}
 80079f8:	bf00      	nop
 80079fa:	bf00      	nop
 80079fc:	e7fd      	b.n	80079fa <vPortValidateInterruptPriority+0x62>
	}
 80079fe:	bf00      	nop
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	e000e3f0 	.word	0xe000e3f0
 8007a10:	20000754 	.word	0x20000754
 8007a14:	e000ed0c 	.word	0xe000ed0c
 8007a18:	20000758 	.word	0x20000758

08007a1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b08a      	sub	sp, #40	@ 0x28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a24:	2300      	movs	r3, #0
 8007a26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a28:	f7fe fee4 	bl	80067f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a2c:	4b5c      	ldr	r3, [pc, #368]	@ (8007ba0 <pvPortMalloc+0x184>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a34:	f000 f924 	bl	8007c80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a38:	4b5a      	ldr	r3, [pc, #360]	@ (8007ba4 <pvPortMalloc+0x188>)
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4013      	ands	r3, r2
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f040 8095 	bne.w	8007b70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d01e      	beq.n	8007a8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007a4c:	2208      	movs	r2, #8
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4413      	add	r3, r2
 8007a52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f003 0307 	and.w	r3, r3, #7
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d015      	beq.n	8007a8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f023 0307 	bic.w	r3, r3, #7
 8007a64:	3308      	adds	r3, #8
 8007a66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f003 0307 	and.w	r3, r3, #7
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00b      	beq.n	8007a8a <pvPortMalloc+0x6e>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	617b      	str	r3, [r7, #20]
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop
 8007a88:	e7fd      	b.n	8007a86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d06f      	beq.n	8007b70 <pvPortMalloc+0x154>
 8007a90:	4b45      	ldr	r3, [pc, #276]	@ (8007ba8 <pvPortMalloc+0x18c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d86a      	bhi.n	8007b70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a9a:	4b44      	ldr	r3, [pc, #272]	@ (8007bac <pvPortMalloc+0x190>)
 8007a9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a9e:	4b43      	ldr	r3, [pc, #268]	@ (8007bac <pvPortMalloc+0x190>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007aa4:	e004      	b.n	8007ab0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d903      	bls.n	8007ac2 <pvPortMalloc+0xa6>
 8007aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1f1      	bne.n	8007aa6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ac2:	4b37      	ldr	r3, [pc, #220]	@ (8007ba0 <pvPortMalloc+0x184>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d051      	beq.n	8007b70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2208      	movs	r2, #8
 8007ad2:	4413      	add	r3, r2
 8007ad4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	1ad2      	subs	r2, r2, r3
 8007ae6:	2308      	movs	r3, #8
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d920      	bls.n	8007b30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4413      	add	r3, r2
 8007af4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	f003 0307 	and.w	r3, r3, #7
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00b      	beq.n	8007b18 <pvPortMalloc+0xfc>
	__asm volatile
 8007b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b04:	f383 8811 	msr	BASEPRI, r3
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	613b      	str	r3, [r7, #16]
}
 8007b12:	bf00      	nop
 8007b14:	bf00      	nop
 8007b16:	e7fd      	b.n	8007b14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	1ad2      	subs	r2, r2, r3
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b2a:	69b8      	ldr	r0, [r7, #24]
 8007b2c:	f000 f90a 	bl	8007d44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b30:	4b1d      	ldr	r3, [pc, #116]	@ (8007ba8 <pvPortMalloc+0x18c>)
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ba8 <pvPortMalloc+0x18c>)
 8007b3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ba8 <pvPortMalloc+0x18c>)
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	4b1b      	ldr	r3, [pc, #108]	@ (8007bb0 <pvPortMalloc+0x194>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d203      	bcs.n	8007b52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b4a:	4b17      	ldr	r3, [pc, #92]	@ (8007ba8 <pvPortMalloc+0x18c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a18      	ldr	r2, [pc, #96]	@ (8007bb0 <pvPortMalloc+0x194>)
 8007b50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	4b13      	ldr	r3, [pc, #76]	@ (8007ba4 <pvPortMalloc+0x188>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b66:	4b13      	ldr	r3, [pc, #76]	@ (8007bb4 <pvPortMalloc+0x198>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	4a11      	ldr	r2, [pc, #68]	@ (8007bb4 <pvPortMalloc+0x198>)
 8007b6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b70:	f7fe fe4e 	bl	8006810 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	f003 0307 	and.w	r3, r3, #7
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00b      	beq.n	8007b96 <pvPortMalloc+0x17a>
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	60fb      	str	r3, [r7, #12]
}
 8007b90:	bf00      	nop
 8007b92:	bf00      	nop
 8007b94:	e7fd      	b.n	8007b92 <pvPortMalloc+0x176>
	return pvReturn;
 8007b96:	69fb      	ldr	r3, [r7, #28]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3728      	adds	r7, #40	@ 0x28
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	20004364 	.word	0x20004364
 8007ba4:	20004378 	.word	0x20004378
 8007ba8:	20004368 	.word	0x20004368
 8007bac:	2000435c 	.word	0x2000435c
 8007bb0:	2000436c 	.word	0x2000436c
 8007bb4:	20004370 	.word	0x20004370

08007bb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d04f      	beq.n	8007c6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007bca:	2308      	movs	r3, #8
 8007bcc:	425b      	negs	r3, r3
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	4b25      	ldr	r3, [pc, #148]	@ (8007c74 <vPortFree+0xbc>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4013      	ands	r3, r2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10b      	bne.n	8007bfe <vPortFree+0x46>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	60fb      	str	r3, [r7, #12]
}
 8007bf8:	bf00      	nop
 8007bfa:	bf00      	nop
 8007bfc:	e7fd      	b.n	8007bfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00b      	beq.n	8007c1e <vPortFree+0x66>
	__asm volatile
 8007c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	60bb      	str	r3, [r7, #8]
}
 8007c18:	bf00      	nop
 8007c1a:	bf00      	nop
 8007c1c:	e7fd      	b.n	8007c1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	685a      	ldr	r2, [r3, #4]
 8007c22:	4b14      	ldr	r3, [pc, #80]	@ (8007c74 <vPortFree+0xbc>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4013      	ands	r3, r2
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01e      	beq.n	8007c6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d11a      	bne.n	8007c6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	4b0e      	ldr	r3, [pc, #56]	@ (8007c74 <vPortFree+0xbc>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	43db      	mvns	r3, r3
 8007c3e:	401a      	ands	r2, r3
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c44:	f7fe fdd6 	bl	80067f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c78 <vPortFree+0xc0>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4413      	add	r3, r2
 8007c52:	4a09      	ldr	r2, [pc, #36]	@ (8007c78 <vPortFree+0xc0>)
 8007c54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c56:	6938      	ldr	r0, [r7, #16]
 8007c58:	f000 f874 	bl	8007d44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c5c:	4b07      	ldr	r3, [pc, #28]	@ (8007c7c <vPortFree+0xc4>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3301      	adds	r3, #1
 8007c62:	4a06      	ldr	r2, [pc, #24]	@ (8007c7c <vPortFree+0xc4>)
 8007c64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c66:	f7fe fdd3 	bl	8006810 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c6a:	bf00      	nop
 8007c6c:	3718      	adds	r7, #24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	20004378 	.word	0x20004378
 8007c78:	20004368 	.word	0x20004368
 8007c7c:	20004374 	.word	0x20004374

08007c80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007c8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c8c:	4b27      	ldr	r3, [pc, #156]	@ (8007d2c <prvHeapInit+0xac>)
 8007c8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f003 0307 	and.w	r3, r3, #7
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00c      	beq.n	8007cb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	3307      	adds	r3, #7
 8007c9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 0307 	bic.w	r3, r3, #7
 8007ca6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	4a1f      	ldr	r2, [pc, #124]	@ (8007d2c <prvHeapInit+0xac>)
 8007cb0:	4413      	add	r3, r2
 8007cb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d30 <prvHeapInit+0xb0>)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8007d30 <prvHeapInit+0xb0>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	4413      	add	r3, r2
 8007cca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ccc:	2208      	movs	r2, #8
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	1a9b      	subs	r3, r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 0307 	bic.w	r3, r3, #7
 8007cda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	4a15      	ldr	r2, [pc, #84]	@ (8007d34 <prvHeapInit+0xb4>)
 8007ce0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ce2:	4b14      	ldr	r3, [pc, #80]	@ (8007d34 <prvHeapInit+0xb4>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007cea:	4b12      	ldr	r3, [pc, #72]	@ (8007d34 <prvHeapInit+0xb4>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	1ad2      	subs	r2, r2, r3
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d00:	4b0c      	ldr	r3, [pc, #48]	@ (8007d34 <prvHeapInit+0xb4>)
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8007d38 <prvHeapInit+0xb8>)
 8007d0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	4a09      	ldr	r2, [pc, #36]	@ (8007d3c <prvHeapInit+0xbc>)
 8007d16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d18:	4b09      	ldr	r3, [pc, #36]	@ (8007d40 <prvHeapInit+0xc0>)
 8007d1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007d1e:	601a      	str	r2, [r3, #0]
}
 8007d20:	bf00      	nop
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	2000075c 	.word	0x2000075c
 8007d30:	2000435c 	.word	0x2000435c
 8007d34:	20004364 	.word	0x20004364
 8007d38:	2000436c 	.word	0x2000436c
 8007d3c:	20004368 	.word	0x20004368
 8007d40:	20004378 	.word	0x20004378

08007d44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d4c:	4b28      	ldr	r3, [pc, #160]	@ (8007df0 <prvInsertBlockIntoFreeList+0xac>)
 8007d4e:	60fb      	str	r3, [r7, #12]
 8007d50:	e002      	b.n	8007d58 <prvInsertBlockIntoFreeList+0x14>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	60fb      	str	r3, [r7, #12]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d8f7      	bhi.n	8007d52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d108      	bne.n	8007d86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	441a      	add	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	441a      	add	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d118      	bne.n	8007dcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	4b15      	ldr	r3, [pc, #84]	@ (8007df4 <prvInsertBlockIntoFreeList+0xb0>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d00d      	beq.n	8007dc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685a      	ldr	r2, [r3, #4]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	441a      	add	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	601a      	str	r2, [r3, #0]
 8007dc0:	e008      	b.n	8007dd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8007df4 <prvInsertBlockIntoFreeList+0xb0>)
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	e003      	b.n	8007dd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d002      	beq.n	8007de2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007de2:	bf00      	nop
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	2000435c 	.word	0x2000435c
 8007df4:	20004364 	.word	0x20004364

08007df8 <siprintf>:
 8007df8:	b40e      	push	{r1, r2, r3}
 8007dfa:	b510      	push	{r4, lr}
 8007dfc:	b09d      	sub	sp, #116	@ 0x74
 8007dfe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007e00:	9002      	str	r0, [sp, #8]
 8007e02:	9006      	str	r0, [sp, #24]
 8007e04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007e08:	480a      	ldr	r0, [pc, #40]	@ (8007e34 <siprintf+0x3c>)
 8007e0a:	9107      	str	r1, [sp, #28]
 8007e0c:	9104      	str	r1, [sp, #16]
 8007e0e:	490a      	ldr	r1, [pc, #40]	@ (8007e38 <siprintf+0x40>)
 8007e10:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e14:	9105      	str	r1, [sp, #20]
 8007e16:	2400      	movs	r4, #0
 8007e18:	a902      	add	r1, sp, #8
 8007e1a:	6800      	ldr	r0, [r0, #0]
 8007e1c:	9301      	str	r3, [sp, #4]
 8007e1e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007e20:	f000 fa00 	bl	8008224 <_svfiprintf_r>
 8007e24:	9b02      	ldr	r3, [sp, #8]
 8007e26:	701c      	strb	r4, [r3, #0]
 8007e28:	b01d      	add	sp, #116	@ 0x74
 8007e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e2e:	b003      	add	sp, #12
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	200000c0 	.word	0x200000c0
 8007e38:	ffff0208 	.word	0xffff0208

08007e3c <memset>:
 8007e3c:	4402      	add	r2, r0
 8007e3e:	4603      	mov	r3, r0
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d100      	bne.n	8007e46 <memset+0xa>
 8007e44:	4770      	bx	lr
 8007e46:	f803 1b01 	strb.w	r1, [r3], #1
 8007e4a:	e7f9      	b.n	8007e40 <memset+0x4>

08007e4c <_reclaim_reent>:
 8007e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8007f04 <_reclaim_reent+0xb8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4283      	cmp	r3, r0
 8007e52:	b570      	push	{r4, r5, r6, lr}
 8007e54:	4604      	mov	r4, r0
 8007e56:	d053      	beq.n	8007f00 <_reclaim_reent+0xb4>
 8007e58:	69c3      	ldr	r3, [r0, #28]
 8007e5a:	b31b      	cbz	r3, 8007ea4 <_reclaim_reent+0x58>
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	b163      	cbz	r3, 8007e7a <_reclaim_reent+0x2e>
 8007e60:	2500      	movs	r5, #0
 8007e62:	69e3      	ldr	r3, [r4, #28]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	5959      	ldr	r1, [r3, r5]
 8007e68:	b9b1      	cbnz	r1, 8007e98 <_reclaim_reent+0x4c>
 8007e6a:	3504      	adds	r5, #4
 8007e6c:	2d80      	cmp	r5, #128	@ 0x80
 8007e6e:	d1f8      	bne.n	8007e62 <_reclaim_reent+0x16>
 8007e70:	69e3      	ldr	r3, [r4, #28]
 8007e72:	4620      	mov	r0, r4
 8007e74:	68d9      	ldr	r1, [r3, #12]
 8007e76:	f000 f881 	bl	8007f7c <_free_r>
 8007e7a:	69e3      	ldr	r3, [r4, #28]
 8007e7c:	6819      	ldr	r1, [r3, #0]
 8007e7e:	b111      	cbz	r1, 8007e86 <_reclaim_reent+0x3a>
 8007e80:	4620      	mov	r0, r4
 8007e82:	f000 f87b 	bl	8007f7c <_free_r>
 8007e86:	69e3      	ldr	r3, [r4, #28]
 8007e88:	689d      	ldr	r5, [r3, #8]
 8007e8a:	b15d      	cbz	r5, 8007ea4 <_reclaim_reent+0x58>
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	4620      	mov	r0, r4
 8007e90:	682d      	ldr	r5, [r5, #0]
 8007e92:	f000 f873 	bl	8007f7c <_free_r>
 8007e96:	e7f8      	b.n	8007e8a <_reclaim_reent+0x3e>
 8007e98:	680e      	ldr	r6, [r1, #0]
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f000 f86e 	bl	8007f7c <_free_r>
 8007ea0:	4631      	mov	r1, r6
 8007ea2:	e7e1      	b.n	8007e68 <_reclaim_reent+0x1c>
 8007ea4:	6961      	ldr	r1, [r4, #20]
 8007ea6:	b111      	cbz	r1, 8007eae <_reclaim_reent+0x62>
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f000 f867 	bl	8007f7c <_free_r>
 8007eae:	69e1      	ldr	r1, [r4, #28]
 8007eb0:	b111      	cbz	r1, 8007eb8 <_reclaim_reent+0x6c>
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f000 f862 	bl	8007f7c <_free_r>
 8007eb8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007eba:	b111      	cbz	r1, 8007ec2 <_reclaim_reent+0x76>
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f000 f85d 	bl	8007f7c <_free_r>
 8007ec2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ec4:	b111      	cbz	r1, 8007ecc <_reclaim_reent+0x80>
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f000 f858 	bl	8007f7c <_free_r>
 8007ecc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007ece:	b111      	cbz	r1, 8007ed6 <_reclaim_reent+0x8a>
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f000 f853 	bl	8007f7c <_free_r>
 8007ed6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007ed8:	b111      	cbz	r1, 8007ee0 <_reclaim_reent+0x94>
 8007eda:	4620      	mov	r0, r4
 8007edc:	f000 f84e 	bl	8007f7c <_free_r>
 8007ee0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007ee2:	b111      	cbz	r1, 8007eea <_reclaim_reent+0x9e>
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f000 f849 	bl	8007f7c <_free_r>
 8007eea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007eec:	b111      	cbz	r1, 8007ef4 <_reclaim_reent+0xa8>
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f000 f844 	bl	8007f7c <_free_r>
 8007ef4:	6a23      	ldr	r3, [r4, #32]
 8007ef6:	b11b      	cbz	r3, 8007f00 <_reclaim_reent+0xb4>
 8007ef8:	4620      	mov	r0, r4
 8007efa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007efe:	4718      	bx	r3
 8007f00:	bd70      	pop	{r4, r5, r6, pc}
 8007f02:	bf00      	nop
 8007f04:	200000c0 	.word	0x200000c0

08007f08 <__errno>:
 8007f08:	4b01      	ldr	r3, [pc, #4]	@ (8007f10 <__errno+0x8>)
 8007f0a:	6818      	ldr	r0, [r3, #0]
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	200000c0 	.word	0x200000c0

08007f14 <__libc_init_array>:
 8007f14:	b570      	push	{r4, r5, r6, lr}
 8007f16:	4d0d      	ldr	r5, [pc, #52]	@ (8007f4c <__libc_init_array+0x38>)
 8007f18:	4c0d      	ldr	r4, [pc, #52]	@ (8007f50 <__libc_init_array+0x3c>)
 8007f1a:	1b64      	subs	r4, r4, r5
 8007f1c:	10a4      	asrs	r4, r4, #2
 8007f1e:	2600      	movs	r6, #0
 8007f20:	42a6      	cmp	r6, r4
 8007f22:	d109      	bne.n	8007f38 <__libc_init_array+0x24>
 8007f24:	4d0b      	ldr	r5, [pc, #44]	@ (8007f54 <__libc_init_array+0x40>)
 8007f26:	4c0c      	ldr	r4, [pc, #48]	@ (8007f58 <__libc_init_array+0x44>)
 8007f28:	f000 fc64 	bl	80087f4 <_init>
 8007f2c:	1b64      	subs	r4, r4, r5
 8007f2e:	10a4      	asrs	r4, r4, #2
 8007f30:	2600      	movs	r6, #0
 8007f32:	42a6      	cmp	r6, r4
 8007f34:	d105      	bne.n	8007f42 <__libc_init_array+0x2e>
 8007f36:	bd70      	pop	{r4, r5, r6, pc}
 8007f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f3c:	4798      	blx	r3
 8007f3e:	3601      	adds	r6, #1
 8007f40:	e7ee      	b.n	8007f20 <__libc_init_array+0xc>
 8007f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f46:	4798      	blx	r3
 8007f48:	3601      	adds	r6, #1
 8007f4a:	e7f2      	b.n	8007f32 <__libc_init_array+0x1e>
 8007f4c:	080089e8 	.word	0x080089e8
 8007f50:	080089e8 	.word	0x080089e8
 8007f54:	080089e8 	.word	0x080089e8
 8007f58:	080089ec 	.word	0x080089ec

08007f5c <__retarget_lock_acquire_recursive>:
 8007f5c:	4770      	bx	lr

08007f5e <__retarget_lock_release_recursive>:
 8007f5e:	4770      	bx	lr

08007f60 <memcpy>:
 8007f60:	440a      	add	r2, r1
 8007f62:	4291      	cmp	r1, r2
 8007f64:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f68:	d100      	bne.n	8007f6c <memcpy+0xc>
 8007f6a:	4770      	bx	lr
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f76:	4291      	cmp	r1, r2
 8007f78:	d1f9      	bne.n	8007f6e <memcpy+0xe>
 8007f7a:	bd10      	pop	{r4, pc}

08007f7c <_free_r>:
 8007f7c:	b538      	push	{r3, r4, r5, lr}
 8007f7e:	4605      	mov	r5, r0
 8007f80:	2900      	cmp	r1, #0
 8007f82:	d041      	beq.n	8008008 <_free_r+0x8c>
 8007f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f88:	1f0c      	subs	r4, r1, #4
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	bfb8      	it	lt
 8007f8e:	18e4      	addlt	r4, r4, r3
 8007f90:	f000 f8e0 	bl	8008154 <__malloc_lock>
 8007f94:	4a1d      	ldr	r2, [pc, #116]	@ (800800c <_free_r+0x90>)
 8007f96:	6813      	ldr	r3, [r2, #0]
 8007f98:	b933      	cbnz	r3, 8007fa8 <_free_r+0x2c>
 8007f9a:	6063      	str	r3, [r4, #4]
 8007f9c:	6014      	str	r4, [r2, #0]
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fa4:	f000 b8dc 	b.w	8008160 <__malloc_unlock>
 8007fa8:	42a3      	cmp	r3, r4
 8007faa:	d908      	bls.n	8007fbe <_free_r+0x42>
 8007fac:	6820      	ldr	r0, [r4, #0]
 8007fae:	1821      	adds	r1, r4, r0
 8007fb0:	428b      	cmp	r3, r1
 8007fb2:	bf01      	itttt	eq
 8007fb4:	6819      	ldreq	r1, [r3, #0]
 8007fb6:	685b      	ldreq	r3, [r3, #4]
 8007fb8:	1809      	addeq	r1, r1, r0
 8007fba:	6021      	streq	r1, [r4, #0]
 8007fbc:	e7ed      	b.n	8007f9a <_free_r+0x1e>
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	b10b      	cbz	r3, 8007fc8 <_free_r+0x4c>
 8007fc4:	42a3      	cmp	r3, r4
 8007fc6:	d9fa      	bls.n	8007fbe <_free_r+0x42>
 8007fc8:	6811      	ldr	r1, [r2, #0]
 8007fca:	1850      	adds	r0, r2, r1
 8007fcc:	42a0      	cmp	r0, r4
 8007fce:	d10b      	bne.n	8007fe8 <_free_r+0x6c>
 8007fd0:	6820      	ldr	r0, [r4, #0]
 8007fd2:	4401      	add	r1, r0
 8007fd4:	1850      	adds	r0, r2, r1
 8007fd6:	4283      	cmp	r3, r0
 8007fd8:	6011      	str	r1, [r2, #0]
 8007fda:	d1e0      	bne.n	8007f9e <_free_r+0x22>
 8007fdc:	6818      	ldr	r0, [r3, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	6053      	str	r3, [r2, #4]
 8007fe2:	4408      	add	r0, r1
 8007fe4:	6010      	str	r0, [r2, #0]
 8007fe6:	e7da      	b.n	8007f9e <_free_r+0x22>
 8007fe8:	d902      	bls.n	8007ff0 <_free_r+0x74>
 8007fea:	230c      	movs	r3, #12
 8007fec:	602b      	str	r3, [r5, #0]
 8007fee:	e7d6      	b.n	8007f9e <_free_r+0x22>
 8007ff0:	6820      	ldr	r0, [r4, #0]
 8007ff2:	1821      	adds	r1, r4, r0
 8007ff4:	428b      	cmp	r3, r1
 8007ff6:	bf04      	itt	eq
 8007ff8:	6819      	ldreq	r1, [r3, #0]
 8007ffa:	685b      	ldreq	r3, [r3, #4]
 8007ffc:	6063      	str	r3, [r4, #4]
 8007ffe:	bf04      	itt	eq
 8008000:	1809      	addeq	r1, r1, r0
 8008002:	6021      	streq	r1, [r4, #0]
 8008004:	6054      	str	r4, [r2, #4]
 8008006:	e7ca      	b.n	8007f9e <_free_r+0x22>
 8008008:	bd38      	pop	{r3, r4, r5, pc}
 800800a:	bf00      	nop
 800800c:	200044c0 	.word	0x200044c0

08008010 <sbrk_aligned>:
 8008010:	b570      	push	{r4, r5, r6, lr}
 8008012:	4e0f      	ldr	r6, [pc, #60]	@ (8008050 <sbrk_aligned+0x40>)
 8008014:	460c      	mov	r4, r1
 8008016:	6831      	ldr	r1, [r6, #0]
 8008018:	4605      	mov	r5, r0
 800801a:	b911      	cbnz	r1, 8008022 <sbrk_aligned+0x12>
 800801c:	f000 fba4 	bl	8008768 <_sbrk_r>
 8008020:	6030      	str	r0, [r6, #0]
 8008022:	4621      	mov	r1, r4
 8008024:	4628      	mov	r0, r5
 8008026:	f000 fb9f 	bl	8008768 <_sbrk_r>
 800802a:	1c43      	adds	r3, r0, #1
 800802c:	d103      	bne.n	8008036 <sbrk_aligned+0x26>
 800802e:	f04f 34ff 	mov.w	r4, #4294967295
 8008032:	4620      	mov	r0, r4
 8008034:	bd70      	pop	{r4, r5, r6, pc}
 8008036:	1cc4      	adds	r4, r0, #3
 8008038:	f024 0403 	bic.w	r4, r4, #3
 800803c:	42a0      	cmp	r0, r4
 800803e:	d0f8      	beq.n	8008032 <sbrk_aligned+0x22>
 8008040:	1a21      	subs	r1, r4, r0
 8008042:	4628      	mov	r0, r5
 8008044:	f000 fb90 	bl	8008768 <_sbrk_r>
 8008048:	3001      	adds	r0, #1
 800804a:	d1f2      	bne.n	8008032 <sbrk_aligned+0x22>
 800804c:	e7ef      	b.n	800802e <sbrk_aligned+0x1e>
 800804e:	bf00      	nop
 8008050:	200044bc 	.word	0x200044bc

08008054 <_malloc_r>:
 8008054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008058:	1ccd      	adds	r5, r1, #3
 800805a:	f025 0503 	bic.w	r5, r5, #3
 800805e:	3508      	adds	r5, #8
 8008060:	2d0c      	cmp	r5, #12
 8008062:	bf38      	it	cc
 8008064:	250c      	movcc	r5, #12
 8008066:	2d00      	cmp	r5, #0
 8008068:	4606      	mov	r6, r0
 800806a:	db01      	blt.n	8008070 <_malloc_r+0x1c>
 800806c:	42a9      	cmp	r1, r5
 800806e:	d904      	bls.n	800807a <_malloc_r+0x26>
 8008070:	230c      	movs	r3, #12
 8008072:	6033      	str	r3, [r6, #0]
 8008074:	2000      	movs	r0, #0
 8008076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800807a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008150 <_malloc_r+0xfc>
 800807e:	f000 f869 	bl	8008154 <__malloc_lock>
 8008082:	f8d8 3000 	ldr.w	r3, [r8]
 8008086:	461c      	mov	r4, r3
 8008088:	bb44      	cbnz	r4, 80080dc <_malloc_r+0x88>
 800808a:	4629      	mov	r1, r5
 800808c:	4630      	mov	r0, r6
 800808e:	f7ff ffbf 	bl	8008010 <sbrk_aligned>
 8008092:	1c43      	adds	r3, r0, #1
 8008094:	4604      	mov	r4, r0
 8008096:	d158      	bne.n	800814a <_malloc_r+0xf6>
 8008098:	f8d8 4000 	ldr.w	r4, [r8]
 800809c:	4627      	mov	r7, r4
 800809e:	2f00      	cmp	r7, #0
 80080a0:	d143      	bne.n	800812a <_malloc_r+0xd6>
 80080a2:	2c00      	cmp	r4, #0
 80080a4:	d04b      	beq.n	800813e <_malloc_r+0xea>
 80080a6:	6823      	ldr	r3, [r4, #0]
 80080a8:	4639      	mov	r1, r7
 80080aa:	4630      	mov	r0, r6
 80080ac:	eb04 0903 	add.w	r9, r4, r3
 80080b0:	f000 fb5a 	bl	8008768 <_sbrk_r>
 80080b4:	4581      	cmp	r9, r0
 80080b6:	d142      	bne.n	800813e <_malloc_r+0xea>
 80080b8:	6821      	ldr	r1, [r4, #0]
 80080ba:	1a6d      	subs	r5, r5, r1
 80080bc:	4629      	mov	r1, r5
 80080be:	4630      	mov	r0, r6
 80080c0:	f7ff ffa6 	bl	8008010 <sbrk_aligned>
 80080c4:	3001      	adds	r0, #1
 80080c6:	d03a      	beq.n	800813e <_malloc_r+0xea>
 80080c8:	6823      	ldr	r3, [r4, #0]
 80080ca:	442b      	add	r3, r5
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	f8d8 3000 	ldr.w	r3, [r8]
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	bb62      	cbnz	r2, 8008130 <_malloc_r+0xdc>
 80080d6:	f8c8 7000 	str.w	r7, [r8]
 80080da:	e00f      	b.n	80080fc <_malloc_r+0xa8>
 80080dc:	6822      	ldr	r2, [r4, #0]
 80080de:	1b52      	subs	r2, r2, r5
 80080e0:	d420      	bmi.n	8008124 <_malloc_r+0xd0>
 80080e2:	2a0b      	cmp	r2, #11
 80080e4:	d917      	bls.n	8008116 <_malloc_r+0xc2>
 80080e6:	1961      	adds	r1, r4, r5
 80080e8:	42a3      	cmp	r3, r4
 80080ea:	6025      	str	r5, [r4, #0]
 80080ec:	bf18      	it	ne
 80080ee:	6059      	strne	r1, [r3, #4]
 80080f0:	6863      	ldr	r3, [r4, #4]
 80080f2:	bf08      	it	eq
 80080f4:	f8c8 1000 	streq.w	r1, [r8]
 80080f8:	5162      	str	r2, [r4, r5]
 80080fa:	604b      	str	r3, [r1, #4]
 80080fc:	4630      	mov	r0, r6
 80080fe:	f000 f82f 	bl	8008160 <__malloc_unlock>
 8008102:	f104 000b 	add.w	r0, r4, #11
 8008106:	1d23      	adds	r3, r4, #4
 8008108:	f020 0007 	bic.w	r0, r0, #7
 800810c:	1ac2      	subs	r2, r0, r3
 800810e:	bf1c      	itt	ne
 8008110:	1a1b      	subne	r3, r3, r0
 8008112:	50a3      	strne	r3, [r4, r2]
 8008114:	e7af      	b.n	8008076 <_malloc_r+0x22>
 8008116:	6862      	ldr	r2, [r4, #4]
 8008118:	42a3      	cmp	r3, r4
 800811a:	bf0c      	ite	eq
 800811c:	f8c8 2000 	streq.w	r2, [r8]
 8008120:	605a      	strne	r2, [r3, #4]
 8008122:	e7eb      	b.n	80080fc <_malloc_r+0xa8>
 8008124:	4623      	mov	r3, r4
 8008126:	6864      	ldr	r4, [r4, #4]
 8008128:	e7ae      	b.n	8008088 <_malloc_r+0x34>
 800812a:	463c      	mov	r4, r7
 800812c:	687f      	ldr	r7, [r7, #4]
 800812e:	e7b6      	b.n	800809e <_malloc_r+0x4a>
 8008130:	461a      	mov	r2, r3
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	42a3      	cmp	r3, r4
 8008136:	d1fb      	bne.n	8008130 <_malloc_r+0xdc>
 8008138:	2300      	movs	r3, #0
 800813a:	6053      	str	r3, [r2, #4]
 800813c:	e7de      	b.n	80080fc <_malloc_r+0xa8>
 800813e:	230c      	movs	r3, #12
 8008140:	6033      	str	r3, [r6, #0]
 8008142:	4630      	mov	r0, r6
 8008144:	f000 f80c 	bl	8008160 <__malloc_unlock>
 8008148:	e794      	b.n	8008074 <_malloc_r+0x20>
 800814a:	6005      	str	r5, [r0, #0]
 800814c:	e7d6      	b.n	80080fc <_malloc_r+0xa8>
 800814e:	bf00      	nop
 8008150:	200044c0 	.word	0x200044c0

08008154 <__malloc_lock>:
 8008154:	4801      	ldr	r0, [pc, #4]	@ (800815c <__malloc_lock+0x8>)
 8008156:	f7ff bf01 	b.w	8007f5c <__retarget_lock_acquire_recursive>
 800815a:	bf00      	nop
 800815c:	200044b8 	.word	0x200044b8

08008160 <__malloc_unlock>:
 8008160:	4801      	ldr	r0, [pc, #4]	@ (8008168 <__malloc_unlock+0x8>)
 8008162:	f7ff befc 	b.w	8007f5e <__retarget_lock_release_recursive>
 8008166:	bf00      	nop
 8008168:	200044b8 	.word	0x200044b8

0800816c <__ssputs_r>:
 800816c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008170:	688e      	ldr	r6, [r1, #8]
 8008172:	461f      	mov	r7, r3
 8008174:	42be      	cmp	r6, r7
 8008176:	680b      	ldr	r3, [r1, #0]
 8008178:	4682      	mov	sl, r0
 800817a:	460c      	mov	r4, r1
 800817c:	4690      	mov	r8, r2
 800817e:	d82d      	bhi.n	80081dc <__ssputs_r+0x70>
 8008180:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008184:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008188:	d026      	beq.n	80081d8 <__ssputs_r+0x6c>
 800818a:	6965      	ldr	r5, [r4, #20]
 800818c:	6909      	ldr	r1, [r1, #16]
 800818e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008192:	eba3 0901 	sub.w	r9, r3, r1
 8008196:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800819a:	1c7b      	adds	r3, r7, #1
 800819c:	444b      	add	r3, r9
 800819e:	106d      	asrs	r5, r5, #1
 80081a0:	429d      	cmp	r5, r3
 80081a2:	bf38      	it	cc
 80081a4:	461d      	movcc	r5, r3
 80081a6:	0553      	lsls	r3, r2, #21
 80081a8:	d527      	bpl.n	80081fa <__ssputs_r+0x8e>
 80081aa:	4629      	mov	r1, r5
 80081ac:	f7ff ff52 	bl	8008054 <_malloc_r>
 80081b0:	4606      	mov	r6, r0
 80081b2:	b360      	cbz	r0, 800820e <__ssputs_r+0xa2>
 80081b4:	6921      	ldr	r1, [r4, #16]
 80081b6:	464a      	mov	r2, r9
 80081b8:	f7ff fed2 	bl	8007f60 <memcpy>
 80081bc:	89a3      	ldrh	r3, [r4, #12]
 80081be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80081c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081c6:	81a3      	strh	r3, [r4, #12]
 80081c8:	6126      	str	r6, [r4, #16]
 80081ca:	6165      	str	r5, [r4, #20]
 80081cc:	444e      	add	r6, r9
 80081ce:	eba5 0509 	sub.w	r5, r5, r9
 80081d2:	6026      	str	r6, [r4, #0]
 80081d4:	60a5      	str	r5, [r4, #8]
 80081d6:	463e      	mov	r6, r7
 80081d8:	42be      	cmp	r6, r7
 80081da:	d900      	bls.n	80081de <__ssputs_r+0x72>
 80081dc:	463e      	mov	r6, r7
 80081de:	6820      	ldr	r0, [r4, #0]
 80081e0:	4632      	mov	r2, r6
 80081e2:	4641      	mov	r1, r8
 80081e4:	f000 faa6 	bl	8008734 <memmove>
 80081e8:	68a3      	ldr	r3, [r4, #8]
 80081ea:	1b9b      	subs	r3, r3, r6
 80081ec:	60a3      	str	r3, [r4, #8]
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	4433      	add	r3, r6
 80081f2:	6023      	str	r3, [r4, #0]
 80081f4:	2000      	movs	r0, #0
 80081f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081fa:	462a      	mov	r2, r5
 80081fc:	f000 fac4 	bl	8008788 <_realloc_r>
 8008200:	4606      	mov	r6, r0
 8008202:	2800      	cmp	r0, #0
 8008204:	d1e0      	bne.n	80081c8 <__ssputs_r+0x5c>
 8008206:	6921      	ldr	r1, [r4, #16]
 8008208:	4650      	mov	r0, sl
 800820a:	f7ff feb7 	bl	8007f7c <_free_r>
 800820e:	230c      	movs	r3, #12
 8008210:	f8ca 3000 	str.w	r3, [sl]
 8008214:	89a3      	ldrh	r3, [r4, #12]
 8008216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800821a:	81a3      	strh	r3, [r4, #12]
 800821c:	f04f 30ff 	mov.w	r0, #4294967295
 8008220:	e7e9      	b.n	80081f6 <__ssputs_r+0x8a>
	...

08008224 <_svfiprintf_r>:
 8008224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008228:	4698      	mov	r8, r3
 800822a:	898b      	ldrh	r3, [r1, #12]
 800822c:	061b      	lsls	r3, r3, #24
 800822e:	b09d      	sub	sp, #116	@ 0x74
 8008230:	4607      	mov	r7, r0
 8008232:	460d      	mov	r5, r1
 8008234:	4614      	mov	r4, r2
 8008236:	d510      	bpl.n	800825a <_svfiprintf_r+0x36>
 8008238:	690b      	ldr	r3, [r1, #16]
 800823a:	b973      	cbnz	r3, 800825a <_svfiprintf_r+0x36>
 800823c:	2140      	movs	r1, #64	@ 0x40
 800823e:	f7ff ff09 	bl	8008054 <_malloc_r>
 8008242:	6028      	str	r0, [r5, #0]
 8008244:	6128      	str	r0, [r5, #16]
 8008246:	b930      	cbnz	r0, 8008256 <_svfiprintf_r+0x32>
 8008248:	230c      	movs	r3, #12
 800824a:	603b      	str	r3, [r7, #0]
 800824c:	f04f 30ff 	mov.w	r0, #4294967295
 8008250:	b01d      	add	sp, #116	@ 0x74
 8008252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008256:	2340      	movs	r3, #64	@ 0x40
 8008258:	616b      	str	r3, [r5, #20]
 800825a:	2300      	movs	r3, #0
 800825c:	9309      	str	r3, [sp, #36]	@ 0x24
 800825e:	2320      	movs	r3, #32
 8008260:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008264:	f8cd 800c 	str.w	r8, [sp, #12]
 8008268:	2330      	movs	r3, #48	@ 0x30
 800826a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008408 <_svfiprintf_r+0x1e4>
 800826e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008272:	f04f 0901 	mov.w	r9, #1
 8008276:	4623      	mov	r3, r4
 8008278:	469a      	mov	sl, r3
 800827a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800827e:	b10a      	cbz	r2, 8008284 <_svfiprintf_r+0x60>
 8008280:	2a25      	cmp	r2, #37	@ 0x25
 8008282:	d1f9      	bne.n	8008278 <_svfiprintf_r+0x54>
 8008284:	ebba 0b04 	subs.w	fp, sl, r4
 8008288:	d00b      	beq.n	80082a2 <_svfiprintf_r+0x7e>
 800828a:	465b      	mov	r3, fp
 800828c:	4622      	mov	r2, r4
 800828e:	4629      	mov	r1, r5
 8008290:	4638      	mov	r0, r7
 8008292:	f7ff ff6b 	bl	800816c <__ssputs_r>
 8008296:	3001      	adds	r0, #1
 8008298:	f000 80a7 	beq.w	80083ea <_svfiprintf_r+0x1c6>
 800829c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800829e:	445a      	add	r2, fp
 80082a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80082a2:	f89a 3000 	ldrb.w	r3, [sl]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f000 809f 	beq.w	80083ea <_svfiprintf_r+0x1c6>
 80082ac:	2300      	movs	r3, #0
 80082ae:	f04f 32ff 	mov.w	r2, #4294967295
 80082b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082b6:	f10a 0a01 	add.w	sl, sl, #1
 80082ba:	9304      	str	r3, [sp, #16]
 80082bc:	9307      	str	r3, [sp, #28]
 80082be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80082c4:	4654      	mov	r4, sl
 80082c6:	2205      	movs	r2, #5
 80082c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082cc:	484e      	ldr	r0, [pc, #312]	@ (8008408 <_svfiprintf_r+0x1e4>)
 80082ce:	f7f7 ff8f 	bl	80001f0 <memchr>
 80082d2:	9a04      	ldr	r2, [sp, #16]
 80082d4:	b9d8      	cbnz	r0, 800830e <_svfiprintf_r+0xea>
 80082d6:	06d0      	lsls	r0, r2, #27
 80082d8:	bf44      	itt	mi
 80082da:	2320      	movmi	r3, #32
 80082dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082e0:	0711      	lsls	r1, r2, #28
 80082e2:	bf44      	itt	mi
 80082e4:	232b      	movmi	r3, #43	@ 0x2b
 80082e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082ea:	f89a 3000 	ldrb.w	r3, [sl]
 80082ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80082f0:	d015      	beq.n	800831e <_svfiprintf_r+0xfa>
 80082f2:	9a07      	ldr	r2, [sp, #28]
 80082f4:	4654      	mov	r4, sl
 80082f6:	2000      	movs	r0, #0
 80082f8:	f04f 0c0a 	mov.w	ip, #10
 80082fc:	4621      	mov	r1, r4
 80082fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008302:	3b30      	subs	r3, #48	@ 0x30
 8008304:	2b09      	cmp	r3, #9
 8008306:	d94b      	bls.n	80083a0 <_svfiprintf_r+0x17c>
 8008308:	b1b0      	cbz	r0, 8008338 <_svfiprintf_r+0x114>
 800830a:	9207      	str	r2, [sp, #28]
 800830c:	e014      	b.n	8008338 <_svfiprintf_r+0x114>
 800830e:	eba0 0308 	sub.w	r3, r0, r8
 8008312:	fa09 f303 	lsl.w	r3, r9, r3
 8008316:	4313      	orrs	r3, r2
 8008318:	9304      	str	r3, [sp, #16]
 800831a:	46a2      	mov	sl, r4
 800831c:	e7d2      	b.n	80082c4 <_svfiprintf_r+0xa0>
 800831e:	9b03      	ldr	r3, [sp, #12]
 8008320:	1d19      	adds	r1, r3, #4
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	9103      	str	r1, [sp, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	bfbb      	ittet	lt
 800832a:	425b      	neglt	r3, r3
 800832c:	f042 0202 	orrlt.w	r2, r2, #2
 8008330:	9307      	strge	r3, [sp, #28]
 8008332:	9307      	strlt	r3, [sp, #28]
 8008334:	bfb8      	it	lt
 8008336:	9204      	strlt	r2, [sp, #16]
 8008338:	7823      	ldrb	r3, [r4, #0]
 800833a:	2b2e      	cmp	r3, #46	@ 0x2e
 800833c:	d10a      	bne.n	8008354 <_svfiprintf_r+0x130>
 800833e:	7863      	ldrb	r3, [r4, #1]
 8008340:	2b2a      	cmp	r3, #42	@ 0x2a
 8008342:	d132      	bne.n	80083aa <_svfiprintf_r+0x186>
 8008344:	9b03      	ldr	r3, [sp, #12]
 8008346:	1d1a      	adds	r2, r3, #4
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	9203      	str	r2, [sp, #12]
 800834c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008350:	3402      	adds	r4, #2
 8008352:	9305      	str	r3, [sp, #20]
 8008354:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008418 <_svfiprintf_r+0x1f4>
 8008358:	7821      	ldrb	r1, [r4, #0]
 800835a:	2203      	movs	r2, #3
 800835c:	4650      	mov	r0, sl
 800835e:	f7f7 ff47 	bl	80001f0 <memchr>
 8008362:	b138      	cbz	r0, 8008374 <_svfiprintf_r+0x150>
 8008364:	9b04      	ldr	r3, [sp, #16]
 8008366:	eba0 000a 	sub.w	r0, r0, sl
 800836a:	2240      	movs	r2, #64	@ 0x40
 800836c:	4082      	lsls	r2, r0
 800836e:	4313      	orrs	r3, r2
 8008370:	3401      	adds	r4, #1
 8008372:	9304      	str	r3, [sp, #16]
 8008374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008378:	4824      	ldr	r0, [pc, #144]	@ (800840c <_svfiprintf_r+0x1e8>)
 800837a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800837e:	2206      	movs	r2, #6
 8008380:	f7f7 ff36 	bl	80001f0 <memchr>
 8008384:	2800      	cmp	r0, #0
 8008386:	d036      	beq.n	80083f6 <_svfiprintf_r+0x1d2>
 8008388:	4b21      	ldr	r3, [pc, #132]	@ (8008410 <_svfiprintf_r+0x1ec>)
 800838a:	bb1b      	cbnz	r3, 80083d4 <_svfiprintf_r+0x1b0>
 800838c:	9b03      	ldr	r3, [sp, #12]
 800838e:	3307      	adds	r3, #7
 8008390:	f023 0307 	bic.w	r3, r3, #7
 8008394:	3308      	adds	r3, #8
 8008396:	9303      	str	r3, [sp, #12]
 8008398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800839a:	4433      	add	r3, r6
 800839c:	9309      	str	r3, [sp, #36]	@ 0x24
 800839e:	e76a      	b.n	8008276 <_svfiprintf_r+0x52>
 80083a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80083a4:	460c      	mov	r4, r1
 80083a6:	2001      	movs	r0, #1
 80083a8:	e7a8      	b.n	80082fc <_svfiprintf_r+0xd8>
 80083aa:	2300      	movs	r3, #0
 80083ac:	3401      	adds	r4, #1
 80083ae:	9305      	str	r3, [sp, #20]
 80083b0:	4619      	mov	r1, r3
 80083b2:	f04f 0c0a 	mov.w	ip, #10
 80083b6:	4620      	mov	r0, r4
 80083b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083bc:	3a30      	subs	r2, #48	@ 0x30
 80083be:	2a09      	cmp	r2, #9
 80083c0:	d903      	bls.n	80083ca <_svfiprintf_r+0x1a6>
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d0c6      	beq.n	8008354 <_svfiprintf_r+0x130>
 80083c6:	9105      	str	r1, [sp, #20]
 80083c8:	e7c4      	b.n	8008354 <_svfiprintf_r+0x130>
 80083ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80083ce:	4604      	mov	r4, r0
 80083d0:	2301      	movs	r3, #1
 80083d2:	e7f0      	b.n	80083b6 <_svfiprintf_r+0x192>
 80083d4:	ab03      	add	r3, sp, #12
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	462a      	mov	r2, r5
 80083da:	4b0e      	ldr	r3, [pc, #56]	@ (8008414 <_svfiprintf_r+0x1f0>)
 80083dc:	a904      	add	r1, sp, #16
 80083de:	4638      	mov	r0, r7
 80083e0:	f3af 8000 	nop.w
 80083e4:	1c42      	adds	r2, r0, #1
 80083e6:	4606      	mov	r6, r0
 80083e8:	d1d6      	bne.n	8008398 <_svfiprintf_r+0x174>
 80083ea:	89ab      	ldrh	r3, [r5, #12]
 80083ec:	065b      	lsls	r3, r3, #25
 80083ee:	f53f af2d 	bmi.w	800824c <_svfiprintf_r+0x28>
 80083f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083f4:	e72c      	b.n	8008250 <_svfiprintf_r+0x2c>
 80083f6:	ab03      	add	r3, sp, #12
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	462a      	mov	r2, r5
 80083fc:	4b05      	ldr	r3, [pc, #20]	@ (8008414 <_svfiprintf_r+0x1f0>)
 80083fe:	a904      	add	r1, sp, #16
 8008400:	4638      	mov	r0, r7
 8008402:	f000 f879 	bl	80084f8 <_printf_i>
 8008406:	e7ed      	b.n	80083e4 <_svfiprintf_r+0x1c0>
 8008408:	080089ac 	.word	0x080089ac
 800840c:	080089b6 	.word	0x080089b6
 8008410:	00000000 	.word	0x00000000
 8008414:	0800816d 	.word	0x0800816d
 8008418:	080089b2 	.word	0x080089b2

0800841c <_printf_common>:
 800841c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008420:	4616      	mov	r6, r2
 8008422:	4698      	mov	r8, r3
 8008424:	688a      	ldr	r2, [r1, #8]
 8008426:	690b      	ldr	r3, [r1, #16]
 8008428:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800842c:	4293      	cmp	r3, r2
 800842e:	bfb8      	it	lt
 8008430:	4613      	movlt	r3, r2
 8008432:	6033      	str	r3, [r6, #0]
 8008434:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008438:	4607      	mov	r7, r0
 800843a:	460c      	mov	r4, r1
 800843c:	b10a      	cbz	r2, 8008442 <_printf_common+0x26>
 800843e:	3301      	adds	r3, #1
 8008440:	6033      	str	r3, [r6, #0]
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	0699      	lsls	r1, r3, #26
 8008446:	bf42      	ittt	mi
 8008448:	6833      	ldrmi	r3, [r6, #0]
 800844a:	3302      	addmi	r3, #2
 800844c:	6033      	strmi	r3, [r6, #0]
 800844e:	6825      	ldr	r5, [r4, #0]
 8008450:	f015 0506 	ands.w	r5, r5, #6
 8008454:	d106      	bne.n	8008464 <_printf_common+0x48>
 8008456:	f104 0a19 	add.w	sl, r4, #25
 800845a:	68e3      	ldr	r3, [r4, #12]
 800845c:	6832      	ldr	r2, [r6, #0]
 800845e:	1a9b      	subs	r3, r3, r2
 8008460:	42ab      	cmp	r3, r5
 8008462:	dc26      	bgt.n	80084b2 <_printf_common+0x96>
 8008464:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008468:	6822      	ldr	r2, [r4, #0]
 800846a:	3b00      	subs	r3, #0
 800846c:	bf18      	it	ne
 800846e:	2301      	movne	r3, #1
 8008470:	0692      	lsls	r2, r2, #26
 8008472:	d42b      	bmi.n	80084cc <_printf_common+0xb0>
 8008474:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008478:	4641      	mov	r1, r8
 800847a:	4638      	mov	r0, r7
 800847c:	47c8      	blx	r9
 800847e:	3001      	adds	r0, #1
 8008480:	d01e      	beq.n	80084c0 <_printf_common+0xa4>
 8008482:	6823      	ldr	r3, [r4, #0]
 8008484:	6922      	ldr	r2, [r4, #16]
 8008486:	f003 0306 	and.w	r3, r3, #6
 800848a:	2b04      	cmp	r3, #4
 800848c:	bf02      	ittt	eq
 800848e:	68e5      	ldreq	r5, [r4, #12]
 8008490:	6833      	ldreq	r3, [r6, #0]
 8008492:	1aed      	subeq	r5, r5, r3
 8008494:	68a3      	ldr	r3, [r4, #8]
 8008496:	bf0c      	ite	eq
 8008498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800849c:	2500      	movne	r5, #0
 800849e:	4293      	cmp	r3, r2
 80084a0:	bfc4      	itt	gt
 80084a2:	1a9b      	subgt	r3, r3, r2
 80084a4:	18ed      	addgt	r5, r5, r3
 80084a6:	2600      	movs	r6, #0
 80084a8:	341a      	adds	r4, #26
 80084aa:	42b5      	cmp	r5, r6
 80084ac:	d11a      	bne.n	80084e4 <_printf_common+0xc8>
 80084ae:	2000      	movs	r0, #0
 80084b0:	e008      	b.n	80084c4 <_printf_common+0xa8>
 80084b2:	2301      	movs	r3, #1
 80084b4:	4652      	mov	r2, sl
 80084b6:	4641      	mov	r1, r8
 80084b8:	4638      	mov	r0, r7
 80084ba:	47c8      	blx	r9
 80084bc:	3001      	adds	r0, #1
 80084be:	d103      	bne.n	80084c8 <_printf_common+0xac>
 80084c0:	f04f 30ff 	mov.w	r0, #4294967295
 80084c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c8:	3501      	adds	r5, #1
 80084ca:	e7c6      	b.n	800845a <_printf_common+0x3e>
 80084cc:	18e1      	adds	r1, r4, r3
 80084ce:	1c5a      	adds	r2, r3, #1
 80084d0:	2030      	movs	r0, #48	@ 0x30
 80084d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80084d6:	4422      	add	r2, r4
 80084d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80084dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80084e0:	3302      	adds	r3, #2
 80084e2:	e7c7      	b.n	8008474 <_printf_common+0x58>
 80084e4:	2301      	movs	r3, #1
 80084e6:	4622      	mov	r2, r4
 80084e8:	4641      	mov	r1, r8
 80084ea:	4638      	mov	r0, r7
 80084ec:	47c8      	blx	r9
 80084ee:	3001      	adds	r0, #1
 80084f0:	d0e6      	beq.n	80084c0 <_printf_common+0xa4>
 80084f2:	3601      	adds	r6, #1
 80084f4:	e7d9      	b.n	80084aa <_printf_common+0x8e>
	...

080084f8 <_printf_i>:
 80084f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084fc:	7e0f      	ldrb	r7, [r1, #24]
 80084fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008500:	2f78      	cmp	r7, #120	@ 0x78
 8008502:	4691      	mov	r9, r2
 8008504:	4680      	mov	r8, r0
 8008506:	460c      	mov	r4, r1
 8008508:	469a      	mov	sl, r3
 800850a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800850e:	d807      	bhi.n	8008520 <_printf_i+0x28>
 8008510:	2f62      	cmp	r7, #98	@ 0x62
 8008512:	d80a      	bhi.n	800852a <_printf_i+0x32>
 8008514:	2f00      	cmp	r7, #0
 8008516:	f000 80d1 	beq.w	80086bc <_printf_i+0x1c4>
 800851a:	2f58      	cmp	r7, #88	@ 0x58
 800851c:	f000 80b8 	beq.w	8008690 <_printf_i+0x198>
 8008520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008524:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008528:	e03a      	b.n	80085a0 <_printf_i+0xa8>
 800852a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800852e:	2b15      	cmp	r3, #21
 8008530:	d8f6      	bhi.n	8008520 <_printf_i+0x28>
 8008532:	a101      	add	r1, pc, #4	@ (adr r1, 8008538 <_printf_i+0x40>)
 8008534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008538:	08008591 	.word	0x08008591
 800853c:	080085a5 	.word	0x080085a5
 8008540:	08008521 	.word	0x08008521
 8008544:	08008521 	.word	0x08008521
 8008548:	08008521 	.word	0x08008521
 800854c:	08008521 	.word	0x08008521
 8008550:	080085a5 	.word	0x080085a5
 8008554:	08008521 	.word	0x08008521
 8008558:	08008521 	.word	0x08008521
 800855c:	08008521 	.word	0x08008521
 8008560:	08008521 	.word	0x08008521
 8008564:	080086a3 	.word	0x080086a3
 8008568:	080085cf 	.word	0x080085cf
 800856c:	0800865d 	.word	0x0800865d
 8008570:	08008521 	.word	0x08008521
 8008574:	08008521 	.word	0x08008521
 8008578:	080086c5 	.word	0x080086c5
 800857c:	08008521 	.word	0x08008521
 8008580:	080085cf 	.word	0x080085cf
 8008584:	08008521 	.word	0x08008521
 8008588:	08008521 	.word	0x08008521
 800858c:	08008665 	.word	0x08008665
 8008590:	6833      	ldr	r3, [r6, #0]
 8008592:	1d1a      	adds	r2, r3, #4
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6032      	str	r2, [r6, #0]
 8008598:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800859c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80085a0:	2301      	movs	r3, #1
 80085a2:	e09c      	b.n	80086de <_printf_i+0x1e6>
 80085a4:	6833      	ldr	r3, [r6, #0]
 80085a6:	6820      	ldr	r0, [r4, #0]
 80085a8:	1d19      	adds	r1, r3, #4
 80085aa:	6031      	str	r1, [r6, #0]
 80085ac:	0606      	lsls	r6, r0, #24
 80085ae:	d501      	bpl.n	80085b4 <_printf_i+0xbc>
 80085b0:	681d      	ldr	r5, [r3, #0]
 80085b2:	e003      	b.n	80085bc <_printf_i+0xc4>
 80085b4:	0645      	lsls	r5, r0, #25
 80085b6:	d5fb      	bpl.n	80085b0 <_printf_i+0xb8>
 80085b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80085bc:	2d00      	cmp	r5, #0
 80085be:	da03      	bge.n	80085c8 <_printf_i+0xd0>
 80085c0:	232d      	movs	r3, #45	@ 0x2d
 80085c2:	426d      	negs	r5, r5
 80085c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085c8:	4858      	ldr	r0, [pc, #352]	@ (800872c <_printf_i+0x234>)
 80085ca:	230a      	movs	r3, #10
 80085cc:	e011      	b.n	80085f2 <_printf_i+0xfa>
 80085ce:	6821      	ldr	r1, [r4, #0]
 80085d0:	6833      	ldr	r3, [r6, #0]
 80085d2:	0608      	lsls	r0, r1, #24
 80085d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80085d8:	d402      	bmi.n	80085e0 <_printf_i+0xe8>
 80085da:	0649      	lsls	r1, r1, #25
 80085dc:	bf48      	it	mi
 80085de:	b2ad      	uxthmi	r5, r5
 80085e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80085e2:	4852      	ldr	r0, [pc, #328]	@ (800872c <_printf_i+0x234>)
 80085e4:	6033      	str	r3, [r6, #0]
 80085e6:	bf14      	ite	ne
 80085e8:	230a      	movne	r3, #10
 80085ea:	2308      	moveq	r3, #8
 80085ec:	2100      	movs	r1, #0
 80085ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80085f2:	6866      	ldr	r6, [r4, #4]
 80085f4:	60a6      	str	r6, [r4, #8]
 80085f6:	2e00      	cmp	r6, #0
 80085f8:	db05      	blt.n	8008606 <_printf_i+0x10e>
 80085fa:	6821      	ldr	r1, [r4, #0]
 80085fc:	432e      	orrs	r6, r5
 80085fe:	f021 0104 	bic.w	r1, r1, #4
 8008602:	6021      	str	r1, [r4, #0]
 8008604:	d04b      	beq.n	800869e <_printf_i+0x1a6>
 8008606:	4616      	mov	r6, r2
 8008608:	fbb5 f1f3 	udiv	r1, r5, r3
 800860c:	fb03 5711 	mls	r7, r3, r1, r5
 8008610:	5dc7      	ldrb	r7, [r0, r7]
 8008612:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008616:	462f      	mov	r7, r5
 8008618:	42bb      	cmp	r3, r7
 800861a:	460d      	mov	r5, r1
 800861c:	d9f4      	bls.n	8008608 <_printf_i+0x110>
 800861e:	2b08      	cmp	r3, #8
 8008620:	d10b      	bne.n	800863a <_printf_i+0x142>
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	07df      	lsls	r7, r3, #31
 8008626:	d508      	bpl.n	800863a <_printf_i+0x142>
 8008628:	6923      	ldr	r3, [r4, #16]
 800862a:	6861      	ldr	r1, [r4, #4]
 800862c:	4299      	cmp	r1, r3
 800862e:	bfde      	ittt	le
 8008630:	2330      	movle	r3, #48	@ 0x30
 8008632:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008636:	f106 36ff 	addle.w	r6, r6, #4294967295
 800863a:	1b92      	subs	r2, r2, r6
 800863c:	6122      	str	r2, [r4, #16]
 800863e:	f8cd a000 	str.w	sl, [sp]
 8008642:	464b      	mov	r3, r9
 8008644:	aa03      	add	r2, sp, #12
 8008646:	4621      	mov	r1, r4
 8008648:	4640      	mov	r0, r8
 800864a:	f7ff fee7 	bl	800841c <_printf_common>
 800864e:	3001      	adds	r0, #1
 8008650:	d14a      	bne.n	80086e8 <_printf_i+0x1f0>
 8008652:	f04f 30ff 	mov.w	r0, #4294967295
 8008656:	b004      	add	sp, #16
 8008658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	f043 0320 	orr.w	r3, r3, #32
 8008662:	6023      	str	r3, [r4, #0]
 8008664:	4832      	ldr	r0, [pc, #200]	@ (8008730 <_printf_i+0x238>)
 8008666:	2778      	movs	r7, #120	@ 0x78
 8008668:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	6831      	ldr	r1, [r6, #0]
 8008670:	061f      	lsls	r7, r3, #24
 8008672:	f851 5b04 	ldr.w	r5, [r1], #4
 8008676:	d402      	bmi.n	800867e <_printf_i+0x186>
 8008678:	065f      	lsls	r7, r3, #25
 800867a:	bf48      	it	mi
 800867c:	b2ad      	uxthmi	r5, r5
 800867e:	6031      	str	r1, [r6, #0]
 8008680:	07d9      	lsls	r1, r3, #31
 8008682:	bf44      	itt	mi
 8008684:	f043 0320 	orrmi.w	r3, r3, #32
 8008688:	6023      	strmi	r3, [r4, #0]
 800868a:	b11d      	cbz	r5, 8008694 <_printf_i+0x19c>
 800868c:	2310      	movs	r3, #16
 800868e:	e7ad      	b.n	80085ec <_printf_i+0xf4>
 8008690:	4826      	ldr	r0, [pc, #152]	@ (800872c <_printf_i+0x234>)
 8008692:	e7e9      	b.n	8008668 <_printf_i+0x170>
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	f023 0320 	bic.w	r3, r3, #32
 800869a:	6023      	str	r3, [r4, #0]
 800869c:	e7f6      	b.n	800868c <_printf_i+0x194>
 800869e:	4616      	mov	r6, r2
 80086a0:	e7bd      	b.n	800861e <_printf_i+0x126>
 80086a2:	6833      	ldr	r3, [r6, #0]
 80086a4:	6825      	ldr	r5, [r4, #0]
 80086a6:	6961      	ldr	r1, [r4, #20]
 80086a8:	1d18      	adds	r0, r3, #4
 80086aa:	6030      	str	r0, [r6, #0]
 80086ac:	062e      	lsls	r6, r5, #24
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	d501      	bpl.n	80086b6 <_printf_i+0x1be>
 80086b2:	6019      	str	r1, [r3, #0]
 80086b4:	e002      	b.n	80086bc <_printf_i+0x1c4>
 80086b6:	0668      	lsls	r0, r5, #25
 80086b8:	d5fb      	bpl.n	80086b2 <_printf_i+0x1ba>
 80086ba:	8019      	strh	r1, [r3, #0]
 80086bc:	2300      	movs	r3, #0
 80086be:	6123      	str	r3, [r4, #16]
 80086c0:	4616      	mov	r6, r2
 80086c2:	e7bc      	b.n	800863e <_printf_i+0x146>
 80086c4:	6833      	ldr	r3, [r6, #0]
 80086c6:	1d1a      	adds	r2, r3, #4
 80086c8:	6032      	str	r2, [r6, #0]
 80086ca:	681e      	ldr	r6, [r3, #0]
 80086cc:	6862      	ldr	r2, [r4, #4]
 80086ce:	2100      	movs	r1, #0
 80086d0:	4630      	mov	r0, r6
 80086d2:	f7f7 fd8d 	bl	80001f0 <memchr>
 80086d6:	b108      	cbz	r0, 80086dc <_printf_i+0x1e4>
 80086d8:	1b80      	subs	r0, r0, r6
 80086da:	6060      	str	r0, [r4, #4]
 80086dc:	6863      	ldr	r3, [r4, #4]
 80086de:	6123      	str	r3, [r4, #16]
 80086e0:	2300      	movs	r3, #0
 80086e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086e6:	e7aa      	b.n	800863e <_printf_i+0x146>
 80086e8:	6923      	ldr	r3, [r4, #16]
 80086ea:	4632      	mov	r2, r6
 80086ec:	4649      	mov	r1, r9
 80086ee:	4640      	mov	r0, r8
 80086f0:	47d0      	blx	sl
 80086f2:	3001      	adds	r0, #1
 80086f4:	d0ad      	beq.n	8008652 <_printf_i+0x15a>
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	079b      	lsls	r3, r3, #30
 80086fa:	d413      	bmi.n	8008724 <_printf_i+0x22c>
 80086fc:	68e0      	ldr	r0, [r4, #12]
 80086fe:	9b03      	ldr	r3, [sp, #12]
 8008700:	4298      	cmp	r0, r3
 8008702:	bfb8      	it	lt
 8008704:	4618      	movlt	r0, r3
 8008706:	e7a6      	b.n	8008656 <_printf_i+0x15e>
 8008708:	2301      	movs	r3, #1
 800870a:	4632      	mov	r2, r6
 800870c:	4649      	mov	r1, r9
 800870e:	4640      	mov	r0, r8
 8008710:	47d0      	blx	sl
 8008712:	3001      	adds	r0, #1
 8008714:	d09d      	beq.n	8008652 <_printf_i+0x15a>
 8008716:	3501      	adds	r5, #1
 8008718:	68e3      	ldr	r3, [r4, #12]
 800871a:	9903      	ldr	r1, [sp, #12]
 800871c:	1a5b      	subs	r3, r3, r1
 800871e:	42ab      	cmp	r3, r5
 8008720:	dcf2      	bgt.n	8008708 <_printf_i+0x210>
 8008722:	e7eb      	b.n	80086fc <_printf_i+0x204>
 8008724:	2500      	movs	r5, #0
 8008726:	f104 0619 	add.w	r6, r4, #25
 800872a:	e7f5      	b.n	8008718 <_printf_i+0x220>
 800872c:	080089bd 	.word	0x080089bd
 8008730:	080089ce 	.word	0x080089ce

08008734 <memmove>:
 8008734:	4288      	cmp	r0, r1
 8008736:	b510      	push	{r4, lr}
 8008738:	eb01 0402 	add.w	r4, r1, r2
 800873c:	d902      	bls.n	8008744 <memmove+0x10>
 800873e:	4284      	cmp	r4, r0
 8008740:	4623      	mov	r3, r4
 8008742:	d807      	bhi.n	8008754 <memmove+0x20>
 8008744:	1e43      	subs	r3, r0, #1
 8008746:	42a1      	cmp	r1, r4
 8008748:	d008      	beq.n	800875c <memmove+0x28>
 800874a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800874e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008752:	e7f8      	b.n	8008746 <memmove+0x12>
 8008754:	4402      	add	r2, r0
 8008756:	4601      	mov	r1, r0
 8008758:	428a      	cmp	r2, r1
 800875a:	d100      	bne.n	800875e <memmove+0x2a>
 800875c:	bd10      	pop	{r4, pc}
 800875e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008762:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008766:	e7f7      	b.n	8008758 <memmove+0x24>

08008768 <_sbrk_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4d06      	ldr	r5, [pc, #24]	@ (8008784 <_sbrk_r+0x1c>)
 800876c:	2300      	movs	r3, #0
 800876e:	4604      	mov	r4, r0
 8008770:	4608      	mov	r0, r1
 8008772:	602b      	str	r3, [r5, #0]
 8008774:	f7f9 fcbe 	bl	80020f4 <_sbrk>
 8008778:	1c43      	adds	r3, r0, #1
 800877a:	d102      	bne.n	8008782 <_sbrk_r+0x1a>
 800877c:	682b      	ldr	r3, [r5, #0]
 800877e:	b103      	cbz	r3, 8008782 <_sbrk_r+0x1a>
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	bd38      	pop	{r3, r4, r5, pc}
 8008784:	200044b4 	.word	0x200044b4

08008788 <_realloc_r>:
 8008788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800878c:	4607      	mov	r7, r0
 800878e:	4614      	mov	r4, r2
 8008790:	460d      	mov	r5, r1
 8008792:	b921      	cbnz	r1, 800879e <_realloc_r+0x16>
 8008794:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008798:	4611      	mov	r1, r2
 800879a:	f7ff bc5b 	b.w	8008054 <_malloc_r>
 800879e:	b92a      	cbnz	r2, 80087ac <_realloc_r+0x24>
 80087a0:	f7ff fbec 	bl	8007f7c <_free_r>
 80087a4:	4625      	mov	r5, r4
 80087a6:	4628      	mov	r0, r5
 80087a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087ac:	f000 f81a 	bl	80087e4 <_malloc_usable_size_r>
 80087b0:	4284      	cmp	r4, r0
 80087b2:	4606      	mov	r6, r0
 80087b4:	d802      	bhi.n	80087bc <_realloc_r+0x34>
 80087b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80087ba:	d8f4      	bhi.n	80087a6 <_realloc_r+0x1e>
 80087bc:	4621      	mov	r1, r4
 80087be:	4638      	mov	r0, r7
 80087c0:	f7ff fc48 	bl	8008054 <_malloc_r>
 80087c4:	4680      	mov	r8, r0
 80087c6:	b908      	cbnz	r0, 80087cc <_realloc_r+0x44>
 80087c8:	4645      	mov	r5, r8
 80087ca:	e7ec      	b.n	80087a6 <_realloc_r+0x1e>
 80087cc:	42b4      	cmp	r4, r6
 80087ce:	4622      	mov	r2, r4
 80087d0:	4629      	mov	r1, r5
 80087d2:	bf28      	it	cs
 80087d4:	4632      	movcs	r2, r6
 80087d6:	f7ff fbc3 	bl	8007f60 <memcpy>
 80087da:	4629      	mov	r1, r5
 80087dc:	4638      	mov	r0, r7
 80087de:	f7ff fbcd 	bl	8007f7c <_free_r>
 80087e2:	e7f1      	b.n	80087c8 <_realloc_r+0x40>

080087e4 <_malloc_usable_size_r>:
 80087e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087e8:	1f18      	subs	r0, r3, #4
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	bfbc      	itt	lt
 80087ee:	580b      	ldrlt	r3, [r1, r0]
 80087f0:	18c0      	addlt	r0, r0, r3
 80087f2:	4770      	bx	lr

080087f4 <_init>:
 80087f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f6:	bf00      	nop
 80087f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087fa:	bc08      	pop	{r3}
 80087fc:	469e      	mov	lr, r3
 80087fe:	4770      	bx	lr

08008800 <_fini>:
 8008800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008802:	bf00      	nop
 8008804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008806:	bc08      	pop	{r3}
 8008808:	469e      	mov	lr, r3
 800880a:	4770      	bx	lr
