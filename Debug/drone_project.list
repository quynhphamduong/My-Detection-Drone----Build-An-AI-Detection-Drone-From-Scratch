
drone_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006748  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080068e8  080068e8  000078e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006974  08006974  00008078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006974  08006974  00007974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800697c  0800697c  00008078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800697c  0800697c  0000797c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006980  08006980  00007980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08006984  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004598  20000078  080069fc  00008078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004610  080069fc  00008610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015638  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003536  00000000  00000000  0001d6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  00020c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ebc  00000000  00000000  00021f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001939c  00000000  00000000  00022e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015adb  00000000  00000000  0003c1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098281  00000000  00000000  00051c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9f0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005450  00000000  00000000  000e9f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000ef3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068d0 	.word	0x080068d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080068d0 	.word	0x080068d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <Calculate_Reference>:
 */

#include "Drone_control.h"

void Calculate_Reference(Drone_Calculation_Typedef *dr,Drone_Control_Typedef *dc)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	dr->picth_reference=(dc->RV-1500)*0.1f;//we can send reference direct from control
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	885b      	ldrh	r3, [r3, #2]
 80005ba:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80005be:	ee07 3a90 	vmov	s15, r3
 80005c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800063c <Calculate_Reference+0x90>
 80005ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	edc3 7a00 	vstr	s15, [r3]
	dr->roll_reference=(dc->RH-1500)*0.1f;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80005dc:	ee07 3a90 	vmov	s15, r3
 80005e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005e4:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800063c <Calculate_Reference+0x90>
 80005e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	edc3 7a01 	vstr	s15, [r3, #4]
	dr->yaw_reference=(dc->LH-1500)*0.1f;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	88db      	ldrh	r3, [r3, #6]
 80005f6:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80005fa:	ee07 3a90 	vmov	s15, r3
 80005fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000602:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800063c <Calculate_Reference+0x90>
 8000606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	edc3 7a02 	vstr	s15, [r3, #8]
	dr->high_reference=(dc->LV-1000)*10;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	889b      	ldrh	r3, [r3, #4]
 8000614:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8000618:	4613      	mov	r3, r2
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4413      	add	r3, r2
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	ee07 3a90 	vmov	s15, r3
 8000624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	3dcccccd 	.word	0x3dcccccd

08000640 <escNormalOneshot125>:
	HAL_Delay(8000);
	HAL_Delay(1000);
}

void escNormalOneshot125(TIM_HandleTypeDef *htim,uint32_t speed,Timer_channel_enumTypedef CHANNEL)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	4613      	mov	r3, r2
 800064c:	71fb      	strb	r3, [r7, #7]
	if(speed>=MAXIMUM_SPEED)
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000654:	4293      	cmp	r3, r2
 8000656:	d903      	bls.n	8000660 <escNormalOneshot125+0x20>
	{
		speed=MAXIMUM_SPEED;
 8000658:	f642 1304 	movw	r3, #10500	@ 0x2904
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	e004      	b.n	800066a <escNormalOneshot125+0x2a>
	}
	else if(speed<=MINIMUM_SPEED)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d101      	bne.n	800066a <escNormalOneshot125+0x2a>
	{
		speed=MINIMUM_SPEED;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
	}
	switch(CHANNEL)
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b0c      	cmp	r3, #12
 800066e:	d83d      	bhi.n	80006ec <escNormalOneshot125+0xac>
 8000670:	a201      	add	r2, pc, #4	@ (adr r2, 8000678 <escNormalOneshot125+0x38>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	080006ad 	.word	0x080006ad
 800067c:	080006ed 	.word	0x080006ed
 8000680:	080006ed 	.word	0x080006ed
 8000684:	080006ed 	.word	0x080006ed
 8000688:	080006bd 	.word	0x080006bd
 800068c:	080006ed 	.word	0x080006ed
 8000690:	080006ed 	.word	0x080006ed
 8000694:	080006ed 	.word	0x080006ed
 8000698:	080006cd 	.word	0x080006cd
 800069c:	080006ed 	.word	0x080006ed
 80006a0:	080006ed 	.word	0x080006ed
 80006a4:	080006ed 	.word	0x080006ed
 80006a8:	080006dd 	.word	0x080006dd
	{
	case CHANNEL1:
		htim->Instance->CCR1=speed+MINIMUM_ESC_PWM;
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80006b6:	3304      	adds	r3, #4
 80006b8:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 80006ba:	e017      	b.n	80006ec <escNormalOneshot125+0xac>
	case CHANNEL2:
			htim->Instance->CCR2=speed+MINIMUM_ESC_PWM;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80006c6:	3304      	adds	r3, #4
 80006c8:	6393      	str	r3, [r2, #56]	@ 0x38
			break;
 80006ca:	e00f      	b.n	80006ec <escNormalOneshot125+0xac>
	case CHANNEL3:
			htim->Instance->CCR3=speed+MINIMUM_ESC_PWM;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80006d6:	3304      	adds	r3, #4
 80006d8:	63d3      	str	r3, [r2, #60]	@ 0x3c
			break;
 80006da:	e007      	b.n	80006ec <escNormalOneshot125+0xac>
	case CHANNEL4:
			htim->Instance->CCR4=speed+MINIMUM_ESC_PWM;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80006e6:	3304      	adds	r3, #4
 80006e8:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 80006ea:	bf00      	nop
	}
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <Control4Motor>:

void Control4Motor(TIM_HandleTypeDef *htim,Motor_speed_Typedef *speed)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
	escNormalOneshot125(htim, speed->speed1, CHANNEL1);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2200      	movs	r2, #0
 8000708:	4619      	mov	r1, r3
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ff98 	bl	8000640 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed2, CHANNEL2);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	2204      	movs	r2, #4
 8000716:	4619      	mov	r1, r3
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ff91 	bl	8000640 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed3, CHANNEL3);
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	2208      	movs	r2, #8
 8000724:	4619      	mov	r1, r3
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ff8a 	bl	8000640 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed4, CHANNEL4);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	220c      	movs	r2, #12
 8000732:	4619      	mov	r1, r3
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ff83 	bl	8000640 <escNormalOneshot125>

}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <pidControllersInit>:
 */

#include "PID.h"

void pidControllersInit(PIDControllers_Typedef* pid,float Kp,float Ki,float Kd,float to,float T,float upper_saturation,float lower_saturation)
{
 8000742:	b480      	push	{r7}
 8000744:	b089      	sub	sp, #36	@ 0x24
 8000746:	af00      	add	r7, sp, #0
 8000748:	61f8      	str	r0, [r7, #28]
 800074a:	ed87 0a06 	vstr	s0, [r7, #24]
 800074e:	edc7 0a05 	vstr	s1, [r7, #20]
 8000752:	ed87 1a04 	vstr	s2, [r7, #16]
 8000756:	edc7 1a03 	vstr	s3, [r7, #12]
 800075a:	ed87 2a02 	vstr	s4, [r7, #8]
 800075e:	edc7 2a01 	vstr	s5, [r7, #4]
 8000762:	ed87 3a00 	vstr	s6, [r7]
	pid->Kp=Kp;
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	69ba      	ldr	r2, [r7, #24]
 800076a:	601a      	str	r2, [r3, #0]
	pid->Ki=Ki;
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	605a      	str	r2, [r3, #4]
	pid->Kd=Kd;
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	693a      	ldr	r2, [r7, #16]
 8000776:	609a      	str	r2, [r3, #8]
	pid->to=to;
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	60da      	str	r2, [r3, #12]
	pid->T=T;
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	68ba      	ldr	r2, [r7, #8]
 8000782:	611a      	str	r2, [r3, #16]

	pid->et=0;
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	f04f 0200 	mov.w	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
	pid->ek1=0;
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	f04f 0200 	mov.w	r2, #0
 8000792:	619a      	str	r2, [r3, #24]

	pid->eKit=0;
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	f04f 0200 	mov.w	r2, #0
 800079a:	61da      	str	r2, [r3, #28]
	pid->eKik1=0;
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	f04f 0200 	mov.w	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]

	pid->propotion=0;
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	f04f 0200 	mov.w	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->integrator=0;
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	f04f 0200 	mov.w	r2, #0
 80007b2:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->deviator=0;
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f04f 0200 	mov.w	r2, #0
 80007ba:	631a      	str	r2, [r3, #48]	@ 0x30
	pid->integratork1=0;
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	f04f 0200 	mov.w	r2, #0
 80007c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->deviatork1=0;
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	f04f 0200 	mov.w	r2, #0
 80007ca:	635a      	str	r2, [r3, #52]	@ 0x34

	pid->upper_saturation=upper_saturation;
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	641a      	str	r2, [r3, #64]	@ 0x40
	pid->lower_saturation=lower_saturation;
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	683a      	ldr	r2, [r7, #0]
 80007d6:	645a      	str	r2, [r3, #68]	@ 0x44

	pid->measurement=0;
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	f04f 0200 	mov.w	r2, #0
 80007de:	639a      	str	r2, [r3, #56]	@ 0x38

	pid->u=0;
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	f04f 0200 	mov.w	r2, #0
 80007e6:	64da      	str	r2, [r3, #76]	@ 0x4c

}
 80007e8:	bf00      	nop
 80007ea:	3724      	adds	r7, #36	@ 0x24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <pidUpdate>:
	pid->Ki=Ki;
	pid->Kd=Kd;
}

float pidUpdate(PIDControllers_Typedef* pid,float measurement,float input)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000800:	edc7 0a01 	vstr	s1, [r7, #4]
	//get pid input
	pid->expected=input;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	63da      	str	r2, [r3, #60]	@ 0x3c
	pid->measurement=measurement;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	68ba      	ldr	r2, [r7, #8]
 800080e:	639a      	str	r2, [r3, #56]	@ 0x38
	pid->et=pid->expected-pid->measurement;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800081c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	edc3 7a05 	vstr	s15, [r3, #20]
	{
		pid->eKik1=0;
		pid->eKit=0;
	}
#else
	pid->eKit=pid->et;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	695a      	ldr	r2, [r3, #20]
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	61da      	str	r2, [r3, #28]
	pid->eKik1=pid->ek1;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	699a      	ldr	r2, [r3, #24]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	621a      	str	r2, [r3, #32]
#endif
	//PID calculation
	pid->propotion=pid->Kp*pid->et;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	ed93 7a00 	vldr	s14, [r3]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	pid->integrator=((pid->Ki*pid->T)/2)*(pid->eKit+pid->eKik1)+pid->integratork1;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	edd3 7a04 	vldr	s15, [r3, #16]
 8000858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800085c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000860:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	edd3 6a07 	vldr	s13, [r3, #28]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	edd3 7a08 	vldr	s15, [r3, #32]
 8000870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000874:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800087e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	pid->deviator=((2*pid->Kd)/(2*pid->to+pid->T))*(pid->et-pid->ek1)+((2*pid->to-pid->T)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	edd3 7a02 	vldr	s15, [r3, #8]
 800088e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	edd3 7a03 	vldr	s15, [r3, #12]
 8000898:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	edd3 7a04 	vldr	s15, [r3, #16]
 80008a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	edd3 6a05 	vldr	s13, [r3, #20]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80008b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80008ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80008c4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80008ce:	ee36 6ae7 	vsub.f32	s12, s13, s15
			/(2*pid->to+pid->T))*pid->deviatork1;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80008d8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	edd3 7a04 	vldr	s15, [r3, #16]
 80008e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80008e6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80008f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
	pid->deviator=((2*pid->Kd)/(2*pid->to+pid->T))*(pid->et-pid->ek1)+((2*pid->to-pid->T)
 80008f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	pid->ek1=pid->et;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	695a      	ldr	r2, [r3, #20]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	619a      	str	r2, [r3, #24]
	pid->integratork1=pid->integrator;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->deviatork1=pid->deviator;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	635a      	str	r2, [r3, #52]	@ 0x34
	pid->v=pid->propotion+pid->integrator+pid->deviator;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000922:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800092c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

	//saturation
	if(pid->v>pid->upper_saturation)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8000942:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800094a:	dd04      	ble.n	8000956 <pidUpdate+0x162>
	{
		pid->u=pid->upper_saturation;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000954:	e013      	b.n	800097e <pidUpdate+0x18a>
	}
	else if(pid->v<(pid->lower_saturation))
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000962:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800096a:	d504      	bpl.n	8000976 <pidUpdate+0x182>
	{
		pid->u=pid->lower_saturation;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000974:	e003      	b.n	800097e <pidUpdate+0x18a>
	}
	else
	{
		pid->u=pid->v;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	64da      	str	r2, [r3, #76]	@ 0x4c
	}

	return pid->u;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	ee07 3a90 	vmov	s15, r3
}
 8000986:	eeb0 0a67 	vmov.f32	s0, s15
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4a07      	ldr	r2, [pc, #28]	@ (80009c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80009a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	4a06      	ldr	r2, [pc, #24]	@ (80009c4 <vApplicationGetIdleTaskMemory+0x30>)
 80009aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2280      	movs	r2, #128	@ 0x80
 80009b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009b2:	bf00      	nop
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000094 	.word	0x20000094
 80009c4:	20000134 	.word	0x20000134

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b5b0      	push	{r4, r5, r7, lr}
 80009ca:	b08a      	sub	sp, #40	@ 0x28
 80009cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ce:	f001 f9c5 	bl	8001d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d2:	f000 f917 	bl	8000c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d6:	f000 fa7b 	bl	8000ed0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80009da:	f000 f97b 	bl	8000cd4 <MX_SPI1_Init>
  MX_TIM2_Init();
 80009de:	f000 f9af 	bl	8000d40 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009e2:	f000 fa27 	bl	8000e34 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */



  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80009e6:	2201      	movs	r2, #1
 80009e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ec:	4868      	ldr	r0, [pc, #416]	@ (8000b90 <main+0x1c8>)
 80009ee:	f001 fc99 	bl	8002324 <HAL_GPIO_WritePin>
  float sample=powf(10,-3);
 80009f2:	4b68      	ldr	r3, [pc, #416]	@ (8000b94 <main+0x1cc>)
 80009f4:	61fb      	str	r3, [r7, #28]
  pidControllersInit(&yaw, 20, 15, 5,0.1,sample,0.1,-0.1);
 80009f6:	ed9f 3a68 	vldr	s6, [pc, #416]	@ 8000b98 <main+0x1d0>
 80009fa:	eddf 2a68 	vldr	s5, [pc, #416]	@ 8000b9c <main+0x1d4>
 80009fe:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a02:	eddf 1a66 	vldr	s3, [pc, #408]	@ 8000b9c <main+0x1d4>
 8000a06:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000a0a:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8000a0e:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000a12:	4863      	ldr	r0, [pc, #396]	@ (8000ba0 <main+0x1d8>)
 8000a14:	f7ff fe95 	bl	8000742 <pidControllersInit>
  pidControllersInit(&yaw_rate, 100, 50,10, 0.1,sample,1500,-1500);
 8000a18:	ed9f 3a62 	vldr	s6, [pc, #392]	@ 8000ba4 <main+0x1dc>
 8000a1c:	eddf 2a62 	vldr	s5, [pc, #392]	@ 8000ba8 <main+0x1e0>
 8000a20:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a24:	eddf 1a5d 	vldr	s3, [pc, #372]	@ 8000b9c <main+0x1d4>
 8000a28:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000a2c:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8000bac <main+0x1e4>
 8000a30:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 8000bb0 <main+0x1e8>
 8000a34:	485f      	ldr	r0, [pc, #380]	@ (8000bb4 <main+0x1ec>)
 8000a36:	f7ff fe84 	bl	8000742 <pidControllersInit>
  pidControllersInit(&pitch, 20, 15,5, 0.1,sample,0.1,-0.1);
 8000a3a:	ed9f 3a57 	vldr	s6, [pc, #348]	@ 8000b98 <main+0x1d0>
 8000a3e:	eddf 2a57 	vldr	s5, [pc, #348]	@ 8000b9c <main+0x1d4>
 8000a42:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a46:	eddf 1a55 	vldr	s3, [pc, #340]	@ 8000b9c <main+0x1d4>
 8000a4a:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000a4e:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8000a52:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000a56:	4858      	ldr	r0, [pc, #352]	@ (8000bb8 <main+0x1f0>)
 8000a58:	f7ff fe73 	bl	8000742 <pidControllersInit>
  pidControllersInit(&pitch_rate, 100, 50,10, 0.1,sample,1500,-1500);
 8000a5c:	ed9f 3a51 	vldr	s6, [pc, #324]	@ 8000ba4 <main+0x1dc>
 8000a60:	eddf 2a51 	vldr	s5, [pc, #324]	@ 8000ba8 <main+0x1e0>
 8000a64:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a68:	eddf 1a4c 	vldr	s3, [pc, #304]	@ 8000b9c <main+0x1d4>
 8000a6c:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000a70:	eddf 0a4e 	vldr	s1, [pc, #312]	@ 8000bac <main+0x1e4>
 8000a74:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8000bb0 <main+0x1e8>
 8000a78:	4850      	ldr	r0, [pc, #320]	@ (8000bbc <main+0x1f4>)
 8000a7a:	f7ff fe62 	bl	8000742 <pidControllersInit>
  pidControllersInit(&roll, 20, 15,5 ,0.1,sample,0.1,-0.1);
 8000a7e:	ed9f 3a46 	vldr	s6, [pc, #280]	@ 8000b98 <main+0x1d0>
 8000a82:	eddf 2a46 	vldr	s5, [pc, #280]	@ 8000b9c <main+0x1d4>
 8000a86:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a8a:	eddf 1a44 	vldr	s3, [pc, #272]	@ 8000b9c <main+0x1d4>
 8000a8e:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000a92:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8000a96:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000a9a:	4849      	ldr	r0, [pc, #292]	@ (8000bc0 <main+0x1f8>)
 8000a9c:	f7ff fe51 	bl	8000742 <pidControllersInit>
  pidControllersInit(&roll_rate, 100, 50,10, 0.1,sample,1500,-1500);
 8000aa0:	ed9f 3a40 	vldr	s6, [pc, #256]	@ 8000ba4 <main+0x1dc>
 8000aa4:	eddf 2a40 	vldr	s5, [pc, #256]	@ 8000ba8 <main+0x1e0>
 8000aa8:	ed97 2a07 	vldr	s4, [r7, #28]
 8000aac:	eddf 1a3b 	vldr	s3, [pc, #236]	@ 8000b9c <main+0x1d4>
 8000ab0:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000ab4:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 8000bac <main+0x1e4>
 8000ab8:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8000bb0 <main+0x1e8>
 8000abc:	4841      	ldr	r0, [pc, #260]	@ (8000bc4 <main+0x1fc>)
 8000abe:	f7ff fe40 	bl	8000742 <pidControllersInit>
  pidControllersInit(&high, 50, 25,10 ,0.1,sample,6000,0);
 8000ac2:	ed9f 3a41 	vldr	s6, [pc, #260]	@ 8000bc8 <main+0x200>
 8000ac6:	eddf 2a41 	vldr	s5, [pc, #260]	@ 8000bcc <main+0x204>
 8000aca:	ed97 2a07 	vldr	s4, [r7, #28]
 8000ace:	eddf 1a33 	vldr	s3, [pc, #204]	@ 8000b9c <main+0x1d4>
 8000ad2:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000ad6:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 8000ada:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8000bac <main+0x1e4>
 8000ade:	483c      	ldr	r0, [pc, #240]	@ (8000bd0 <main+0x208>)
 8000ae0:	f7ff fe2f 	bl	8000742 <pidControllersInit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	483b      	ldr	r0, [pc, #236]	@ (8000bd4 <main+0x20c>)
 8000ae8:	f002 ff9a 	bl	8003a20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000aec:	2104      	movs	r1, #4
 8000aee:	4839      	ldr	r0, [pc, #228]	@ (8000bd4 <main+0x20c>)
 8000af0:	f002 ff96 	bl	8003a20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000af4:	2108      	movs	r1, #8
 8000af6:	4837      	ldr	r0, [pc, #220]	@ (8000bd4 <main+0x20c>)
 8000af8:	f002 ff92 	bl	8003a20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000afc:	210c      	movs	r1, #12
 8000afe:	4835      	ldr	r0, [pc, #212]	@ (8000bd4 <main+0x20c>)
 8000b00:	f002 ff8e 	bl	8003a20 <HAL_TIM_PWM_Start>
//  Calibration(&htim2);
  HAL_TIM_Base_Start_IT(&htim3);
 8000b04:	4834      	ldr	r0, [pc, #208]	@ (8000bd8 <main+0x210>)
 8000b06:	f002 fed9 	bl	80038bc <HAL_TIM_Base_Start_IT>
  Two_Way_Commuination_Pipe0_Config(&nrf1,0xA2A2A2A2A2,0xC5C5C5C5C5);
 8000b0a:	f04f 32c5 	mov.w	r2, #3318072773	@ 0xc5c5c5c5
 8000b0e:	f04f 03c5 	mov.w	r3, #197	@ 0xc5
 8000b12:	e9cd 2300 	strd	r2, r3, [sp]
 8000b16:	f04f 32a2 	mov.w	r2, #2728567458	@ 0xa2a2a2a2
 8000b1a:	f04f 03a2 	mov.w	r3, #162	@ 0xa2
 8000b1e:	482f      	ldr	r0, [pc, #188]	@ (8000bdc <main+0x214>)
 8000b20:	f000 fdb4 	bl	800168c <Two_Way_Commuination_Pipe0_Config>
  Select_Rx_Mode(&nrf1);
 8000b24:	482d      	ldr	r0, [pc, #180]	@ (8000bdc <main+0x214>)
 8000b26:	f000 fd39 	bl	800159c <Select_Rx_Mode>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  TimerISR_Semaphore =xSemaphoreCreateBinary();
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f003 ffba 	bl	8004aa8 <xQueueGenericCreate>
 8000b34:	4603      	mov	r3, r0
 8000b36:	4a2a      	ldr	r2, [pc, #168]	@ (8000be0 <main+0x218>)
 8000b38:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000be4 <main+0x21c>)
 8000b3c:	463c      	mov	r4, r7
 8000b3e:	461d      	mov	r5, r3
 8000b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f003 fe2a 	bl	80047aa <osThreadCreate>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4a23      	ldr	r2, [pc, #140]	@ (8000be8 <main+0x220>)
 8000b5a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(ESC_Task, "ESC", 256,NULL,1, &ESC_Handle);
 8000b5c:	4b23      	ldr	r3, [pc, #140]	@ (8000bec <main+0x224>)
 8000b5e:	9301      	str	r3, [sp, #4]
 8000b60:	2301      	movs	r3, #1
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	2300      	movs	r3, #0
 8000b66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b6a:	4921      	ldr	r1, [pc, #132]	@ (8000bf0 <main+0x228>)
 8000b6c:	4821      	ldr	r0, [pc, #132]	@ (8000bf4 <main+0x22c>)
 8000b6e:	f004 f855 	bl	8004c1c <xTaskCreate>
  xTaskCreate(NRF_Task, "NRF", 256, NULL, 0, &NRF_Handle);
 8000b72:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <main+0x230>)
 8000b74:	9301      	str	r3, [sp, #4]
 8000b76:	2300      	movs	r3, #0
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b80:	491e      	ldr	r1, [pc, #120]	@ (8000bfc <main+0x234>)
 8000b82:	481f      	ldr	r0, [pc, #124]	@ (8000c00 <main+0x238>)
 8000b84:	f004 f84a 	bl	8004c1c <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b88:	f003 fe08 	bl	800479c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <main+0x1c4>
 8000b90:	40020800 	.word	0x40020800
 8000b94:	3a83126f 	.word	0x3a83126f
 8000b98:	bdcccccd 	.word	0xbdcccccd
 8000b9c:	3dcccccd 	.word	0x3dcccccd
 8000ba0:	200005c4 	.word	0x200005c4
 8000ba4:	c4bb8000 	.word	0xc4bb8000
 8000ba8:	44bb8000 	.word	0x44bb8000
 8000bac:	42480000 	.word	0x42480000
 8000bb0:	42c80000 	.word	0x42c80000
 8000bb4:	20000618 	.word	0x20000618
 8000bb8:	20000474 	.word	0x20000474
 8000bbc:	200004c8 	.word	0x200004c8
 8000bc0:	2000051c 	.word	0x2000051c
 8000bc4:	20000570 	.word	0x20000570
 8000bc8:	00000000 	.word	0x00000000
 8000bcc:	45bb8000 	.word	0x45bb8000
 8000bd0:	2000066c 	.word	0x2000066c
 8000bd4:	2000038c 	.word	0x2000038c
 8000bd8:	200003d4 	.word	0x200003d4
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000718 	.word	0x20000718
 8000be4:	080068fc 	.word	0x080068fc
 8000be8:	2000041c 	.word	0x2000041c
 8000bec:	20000710 	.word	0x20000710
 8000bf0:	080068e8 	.word	0x080068e8
 8000bf4:	08000ffd 	.word	0x08000ffd
 8000bf8:	20000714 	.word	0x20000714
 8000bfc:	080068ec 	.word	0x080068ec
 8000c00:	080011fd 	.word	0x080011fd

08000c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b094      	sub	sp, #80	@ 0x50
 8000c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0a:	f107 0320 	add.w	r3, r7, #32
 8000c0e:	2230      	movs	r2, #48	@ 0x30
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f005 f980 	bl	8005f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	4b27      	ldr	r3, [pc, #156]	@ (8000ccc <SystemClock_Config+0xc8>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c30:	4a26      	ldr	r2, [pc, #152]	@ (8000ccc <SystemClock_Config+0xc8>)
 8000c32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c38:	4b24      	ldr	r3, [pc, #144]	@ (8000ccc <SystemClock_Config+0xc8>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	4b21      	ldr	r3, [pc, #132]	@ (8000cd0 <SystemClock_Config+0xcc>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a20      	ldr	r2, [pc, #128]	@ (8000cd0 <SystemClock_Config+0xcc>)
 8000c4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c52:	6013      	str	r3, [r2, #0]
 8000c54:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd0 <SystemClock_Config+0xcc>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c60:	2301      	movs	r3, #1
 8000c62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c6e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c74:	2319      	movs	r3, #25
 8000c76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c78:	23a8      	movs	r3, #168	@ 0xa8
 8000c7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c80:	2304      	movs	r3, #4
 8000c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c84:	f107 0320 	add.w	r3, r7, #32
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f001 fb7f 	bl	800238c <HAL_RCC_OscConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c94:	f000 fb00 	bl	8001298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c98:	230f      	movs	r3, #15
 8000c9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ca4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	2102      	movs	r1, #2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f001 fde1 	bl	800287c <HAL_RCC_ClockConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cc0:	f000 faea 	bl	8001298 <Error_Handler>
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	3750      	adds	r7, #80	@ 0x50
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40007000 	.word	0x40007000

08000cd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cd8:	4b17      	ldr	r3, [pc, #92]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000cda:	4a18      	ldr	r2, [pc, #96]	@ (8000d3c <MX_SPI1_Init+0x68>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cde:	4b16      	ldr	r3, [pc, #88]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000ce0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ce4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cec:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000d00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d06:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000d08:	2210      	movs	r2, #16
 8000d0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d18:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000d20:	220a      	movs	r2, #10
 8000d22:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000d26:	f001 ffa7 	bl	8002c78 <HAL_SPI_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d30:	f000 fab2 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000334 	.word	0x20000334
 8000d3c:	40013000 	.word	0x40013000

08000d40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	@ 0x28
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d46:	f107 0320 	add.w	r3, r7, #32
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]
 8000d5e:	615a      	str	r2, [r3, #20]
 8000d60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d62:	4b33      	ldr	r3, [pc, #204]	@ (8000e30 <MX_TIM2_Init+0xf0>)
 8000d64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d6a:	4b31      	ldr	r3, [pc, #196]	@ (8000e30 <MX_TIM2_Init+0xf0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d70:	4b2f      	ldr	r3, [pc, #188]	@ (8000e30 <MX_TIM2_Init+0xf0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d76:	4b2e      	ldr	r3, [pc, #184]	@ (8000e30 <MX_TIM2_Init+0xf0>)
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e30 <MX_TIM2_Init+0xf0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d84:	4b2a      	ldr	r3, [pc, #168]	@ (8000e30 <MX_TIM2_Init+0xf0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d8a:	4829      	ldr	r0, [pc, #164]	@ (8000e30 <MX_TIM2_Init+0xf0>)
 8000d8c:	f002 fdf8 	bl	8003980 <HAL_TIM_PWM_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000d96:	f000 fa7f 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000da2:	f107 0320 	add.w	r3, r7, #32
 8000da6:	4619      	mov	r1, r3
 8000da8:	4821      	ldr	r0, [pc, #132]	@ (8000e30 <MX_TIM2_Init+0xf0>)
 8000daa:	f003 fc5d 	bl	8004668 <HAL_TIMEx_MasterConfigSynchronization>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000db4:	f000 fa70 	bl	8001298 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db8:	2360      	movs	r3, #96	@ 0x60
 8000dba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2200      	movs	r2, #0
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4818      	ldr	r0, [pc, #96]	@ (8000e30 <MX_TIM2_Init+0xf0>)
 8000dd0:	f002 ffc6 	bl	8003d60 <HAL_TIM_PWM_ConfigChannel>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000dda:	f000 fa5d 	bl	8001298 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2204      	movs	r2, #4
 8000de2:	4619      	mov	r1, r3
 8000de4:	4812      	ldr	r0, [pc, #72]	@ (8000e30 <MX_TIM2_Init+0xf0>)
 8000de6:	f002 ffbb 	bl	8003d60 <HAL_TIM_PWM_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000df0:	f000 fa52 	bl	8001298 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2208      	movs	r2, #8
 8000df8:	4619      	mov	r1, r3
 8000dfa:	480d      	ldr	r0, [pc, #52]	@ (8000e30 <MX_TIM2_Init+0xf0>)
 8000dfc:	f002 ffb0 	bl	8003d60 <HAL_TIM_PWM_ConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000e06:	f000 fa47 	bl	8001298 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	220c      	movs	r2, #12
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4807      	ldr	r0, [pc, #28]	@ (8000e30 <MX_TIM2_Init+0xf0>)
 8000e12:	f002 ffa5 	bl	8003d60 <HAL_TIM_PWM_ConfigChannel>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000e1c:	f000 fa3c 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e20:	4803      	ldr	r0, [pc, #12]	@ (8000e30 <MX_TIM2_Init+0xf0>)
 8000e22:	f000 fe4f 	bl	8001ac4 <HAL_TIM_MspPostInit>

}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	@ 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2000038c 	.word	0x2000038c

08000e34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e48:	463b      	mov	r3, r7
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e50:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec8 <MX_TIM3_Init+0x94>)
 8000e52:	4a1e      	ldr	r2, [pc, #120]	@ (8000ecc <MX_TIM3_Init+0x98>)
 8000e54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000e56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <MX_TIM3_Init+0x94>)
 8000e58:	2253      	movs	r2, #83	@ 0x53
 8000e5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <MX_TIM3_Init+0x94>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000e62:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <MX_TIM3_Init+0x94>)
 8000e64:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <MX_TIM3_Init+0x94>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e70:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <MX_TIM3_Init+0x94>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e76:	4814      	ldr	r0, [pc, #80]	@ (8000ec8 <MX_TIM3_Init+0x94>)
 8000e78:	f002 fcd0 	bl	800381c <HAL_TIM_Base_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e82:	f000 fa09 	bl	8001298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e8c:	f107 0308 	add.w	r3, r7, #8
 8000e90:	4619      	mov	r1, r3
 8000e92:	480d      	ldr	r0, [pc, #52]	@ (8000ec8 <MX_TIM3_Init+0x94>)
 8000e94:	f003 f826 	bl	8003ee4 <HAL_TIM_ConfigClockSource>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e9e:	f000 f9fb 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4619      	mov	r1, r3
 8000eae:	4806      	ldr	r0, [pc, #24]	@ (8000ec8 <MX_TIM3_Init+0x94>)
 8000eb0:	f003 fbda 	bl	8004668 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000eba:	f000 f9ed 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200003d4 	.word	0x200003d4
 8000ecc:	40000400 	.word	0x40000400

08000ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	@ 0x28
 8000ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	4b40      	ldr	r3, [pc, #256]	@ (8000fec <MX_GPIO_Init+0x11c>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	4a3f      	ldr	r2, [pc, #252]	@ (8000fec <MX_GPIO_Init+0x11c>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef6:	4b3d      	ldr	r3, [pc, #244]	@ (8000fec <MX_GPIO_Init+0x11c>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b39      	ldr	r3, [pc, #228]	@ (8000fec <MX_GPIO_Init+0x11c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	4a38      	ldr	r2, [pc, #224]	@ (8000fec <MX_GPIO_Init+0x11c>)
 8000f0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f12:	4b36      	ldr	r3, [pc, #216]	@ (8000fec <MX_GPIO_Init+0x11c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	4b32      	ldr	r3, [pc, #200]	@ (8000fec <MX_GPIO_Init+0x11c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	4a31      	ldr	r2, [pc, #196]	@ (8000fec <MX_GPIO_Init+0x11c>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fec <MX_GPIO_Init+0x11c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fec <MX_GPIO_Init+0x11c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	4a2a      	ldr	r2, [pc, #168]	@ (8000fec <MX_GPIO_Init+0x11c>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4a:	4b28      	ldr	r3, [pc, #160]	@ (8000fec <MX_GPIO_Init+0x11c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f5c:	4824      	ldr	r0, [pc, #144]	@ (8000ff0 <MX_GPIO_Init+0x120>)
 8000f5e:	f001 f9e1 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2110      	movs	r1, #16
 8000f66:	4823      	ldr	r0, [pc, #140]	@ (8000ff4 <MX_GPIO_Init+0x124>)
 8000f68:	f001 f9dc 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4821      	ldr	r0, [pc, #132]	@ (8000ff8 <MX_GPIO_Init+0x128>)
 8000f72:	f001 f9d7 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4818      	ldr	r0, [pc, #96]	@ (8000ff0 <MX_GPIO_Init+0x120>)
 8000f90:	f001 f82c 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f94:	2310      	movs	r3, #16
 8000f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4812      	ldr	r0, [pc, #72]	@ (8000ff4 <MX_GPIO_Init+0x124>)
 8000fac:	f001 f81e 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	480c      	ldr	r0, [pc, #48]	@ (8000ff8 <MX_GPIO_Init+0x128>)
 8000fc8:	f001 f810 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	@ (8000ff8 <MX_GPIO_Init+0x128>)
 8000fe0:	f001 f804 	bl	8001fec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	@ 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	40020400 	.word	0x40020400

08000ffc <ESC_Task>:

/* USER CODE BEGIN 4 */
void ESC_Task(void *argument)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

	while(1)
	{
			if(timer3_flag==1)
 8001004:	4b70      	ldr	r3, [pc, #448]	@ (80011c8 <ESC_Task+0x1cc>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	f040 80d9 	bne.w	80011c0 <ESC_Task+0x1c4>
			{
				Calculate_Reference(&calculation, &control);
 800100e:	496f      	ldr	r1, [pc, #444]	@ (80011cc <ESC_Task+0x1d0>)
 8001010:	486f      	ldr	r0, [pc, #444]	@ (80011d0 <ESC_Task+0x1d4>)
 8001012:	f7ff facb 	bl	80005ac <Calculate_Reference>
				pidUpdate(&pitch, calculation.picth_measurement, calculation.picth_reference);
 8001016:	4b6e      	ldr	r3, [pc, #440]	@ (80011d0 <ESC_Task+0x1d4>)
 8001018:	edd3 7a03 	vldr	s15, [r3, #12]
 800101c:	4b6c      	ldr	r3, [pc, #432]	@ (80011d0 <ESC_Task+0x1d4>)
 800101e:	ed93 7a00 	vldr	s14, [r3]
 8001022:	eef0 0a47 	vmov.f32	s1, s14
 8001026:	eeb0 0a67 	vmov.f32	s0, s15
 800102a:	486a      	ldr	r0, [pc, #424]	@ (80011d4 <ESC_Task+0x1d8>)
 800102c:	f7ff fbe2 	bl	80007f4 <pidUpdate>
				/*
				 * get picth rate measuremet
				 */
				calculation.picth_rate_reference=pitch.u;
 8001030:	4b68      	ldr	r3, [pc, #416]	@ (80011d4 <ESC_Task+0x1d8>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001034:	4a66      	ldr	r2, [pc, #408]	@ (80011d0 <ESC_Task+0x1d4>)
 8001036:	6193      	str	r3, [r2, #24]
				pidUpdate(&pitch_rate, calculation.picth_rate_measurement, calculation.picth_rate_reference);
 8001038:	4b65      	ldr	r3, [pc, #404]	@ (80011d0 <ESC_Task+0x1d4>)
 800103a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800103e:	4b64      	ldr	r3, [pc, #400]	@ (80011d0 <ESC_Task+0x1d4>)
 8001040:	ed93 7a06 	vldr	s14, [r3, #24]
 8001044:	eef0 0a47 	vmov.f32	s1, s14
 8001048:	eeb0 0a67 	vmov.f32	s0, s15
 800104c:	4862      	ldr	r0, [pc, #392]	@ (80011d8 <ESC_Task+0x1dc>)
 800104e:	f7ff fbd1 	bl	80007f4 <pidUpdate>

				/*
				 * get roll measurement
				 */
				pidUpdate(&roll, calculation.roll_measurement, calculation.roll_reference);
 8001052:	4b5f      	ldr	r3, [pc, #380]	@ (80011d0 <ESC_Task+0x1d4>)
 8001054:	edd3 7a04 	vldr	s15, [r3, #16]
 8001058:	4b5d      	ldr	r3, [pc, #372]	@ (80011d0 <ESC_Task+0x1d4>)
 800105a:	ed93 7a01 	vldr	s14, [r3, #4]
 800105e:	eef0 0a47 	vmov.f32	s1, s14
 8001062:	eeb0 0a67 	vmov.f32	s0, s15
 8001066:	485d      	ldr	r0, [pc, #372]	@ (80011dc <ESC_Task+0x1e0>)
 8001068:	f7ff fbc4 	bl	80007f4 <pidUpdate>
				/*
				 * get roll rate measurement
				 */
				calculation.roll_rate_reference=roll.u;
 800106c:	4b5b      	ldr	r3, [pc, #364]	@ (80011dc <ESC_Task+0x1e0>)
 800106e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001070:	4a57      	ldr	r2, [pc, #348]	@ (80011d0 <ESC_Task+0x1d4>)
 8001072:	61d3      	str	r3, [r2, #28]
				pidUpdate(&roll_rate, calculation.roll_rate_measurement, calculation.roll_rate_reference);
 8001074:	4b56      	ldr	r3, [pc, #344]	@ (80011d0 <ESC_Task+0x1d4>)
 8001076:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800107a:	4b55      	ldr	r3, [pc, #340]	@ (80011d0 <ESC_Task+0x1d4>)
 800107c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001080:	eef0 0a47 	vmov.f32	s1, s14
 8001084:	eeb0 0a67 	vmov.f32	s0, s15
 8001088:	4855      	ldr	r0, [pc, #340]	@ (80011e0 <ESC_Task+0x1e4>)
 800108a:	f7ff fbb3 	bl	80007f4 <pidUpdate>
				/*
				 * get yaw measurement
				 */
				pidUpdate(&yaw, calculation.yaw_measurement, calculation.yaw_reference);
 800108e:	4b50      	ldr	r3, [pc, #320]	@ (80011d0 <ESC_Task+0x1d4>)
 8001090:	edd3 7a05 	vldr	s15, [r3, #20]
 8001094:	4b4e      	ldr	r3, [pc, #312]	@ (80011d0 <ESC_Task+0x1d4>)
 8001096:	ed93 7a02 	vldr	s14, [r3, #8]
 800109a:	eef0 0a47 	vmov.f32	s1, s14
 800109e:	eeb0 0a67 	vmov.f32	s0, s15
 80010a2:	4850      	ldr	r0, [pc, #320]	@ (80011e4 <ESC_Task+0x1e8>)
 80010a4:	f7ff fba6 	bl	80007f4 <pidUpdate>
				/*
				* get yaw measurement
				*/
				calculation.yaw_rate_reference=yaw.u;
 80010a8:	4b4e      	ldr	r3, [pc, #312]	@ (80011e4 <ESC_Task+0x1e8>)
 80010aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ac:	4a48      	ldr	r2, [pc, #288]	@ (80011d0 <ESC_Task+0x1d4>)
 80010ae:	6213      	str	r3, [r2, #32]
				pidUpdate(&yaw_rate, calculation.yaw_rate_measurement, calculation.yaw_rate_reference);
 80010b0:	4b47      	ldr	r3, [pc, #284]	@ (80011d0 <ESC_Task+0x1d4>)
 80010b2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80010b6:	4b46      	ldr	r3, [pc, #280]	@ (80011d0 <ESC_Task+0x1d4>)
 80010b8:	ed93 7a08 	vldr	s14, [r3, #32]
 80010bc:	eef0 0a47 	vmov.f32	s1, s14
 80010c0:	eeb0 0a67 	vmov.f32	s0, s15
 80010c4:	4848      	ldr	r0, [pc, #288]	@ (80011e8 <ESC_Task+0x1ec>)
 80010c6:	f7ff fb95 	bl	80007f4 <pidUpdate>
				/*
				* get high measurement and high reference
				*/
				pidUpdate(&high, calculation.high_measurement, calculation.high_reference);
 80010ca:	4b41      	ldr	r3, [pc, #260]	@ (80011d0 <ESC_Task+0x1d4>)
 80010cc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80010d0:	4b3f      	ldr	r3, [pc, #252]	@ (80011d0 <ESC_Task+0x1d4>)
 80010d2:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80010d6:	eef0 0a47 	vmov.f32	s1, s14
 80010da:	eeb0 0a67 	vmov.f32	s0, s15
 80010de:	4843      	ldr	r0, [pc, #268]	@ (80011ec <ESC_Task+0x1f0>)
 80010e0:	f7ff fb88 	bl	80007f4 <pidUpdate>

				speed.speed1=-pitch_rate.u+roll_rate.u-yaw_rate.u+high.u;
 80010e4:	4b3e      	ldr	r3, [pc, #248]	@ (80011e0 <ESC_Task+0x1e4>)
 80010e6:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80010ea:	4b3b      	ldr	r3, [pc, #236]	@ (80011d8 <ESC_Task+0x1dc>)
 80010ec:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80010f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010f4:	4b3c      	ldr	r3, [pc, #240]	@ (80011e8 <ESC_Task+0x1ec>)
 80010f6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80010fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010fe:	4b3b      	ldr	r3, [pc, #236]	@ (80011ec <ESC_Task+0x1f0>)
 8001100:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800110c:	ee17 2a90 	vmov	r2, s15
 8001110:	4b37      	ldr	r3, [pc, #220]	@ (80011f0 <ESC_Task+0x1f4>)
 8001112:	601a      	str	r2, [r3, #0]
				speed.speed2=+pitch_rate.u+roll_rate.u+yaw_rate.u+high.u;
 8001114:	4b30      	ldr	r3, [pc, #192]	@ (80011d8 <ESC_Task+0x1dc>)
 8001116:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800111a:	4b31      	ldr	r3, [pc, #196]	@ (80011e0 <ESC_Task+0x1e4>)
 800111c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001120:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001124:	4b30      	ldr	r3, [pc, #192]	@ (80011e8 <ESC_Task+0x1ec>)
 8001126:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800112a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800112e:	4b2f      	ldr	r3, [pc, #188]	@ (80011ec <ESC_Task+0x1f0>)
 8001130:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800113c:	ee17 2a90 	vmov	r2, s15
 8001140:	4b2b      	ldr	r3, [pc, #172]	@ (80011f0 <ESC_Task+0x1f4>)
 8001142:	605a      	str	r2, [r3, #4]
				speed.speed3=+pitch_rate.u-roll_rate.u-yaw_rate.u+high.u;
 8001144:	4b24      	ldr	r3, [pc, #144]	@ (80011d8 <ESC_Task+0x1dc>)
 8001146:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800114a:	4b25      	ldr	r3, [pc, #148]	@ (80011e0 <ESC_Task+0x1e4>)
 800114c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001150:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001154:	4b24      	ldr	r3, [pc, #144]	@ (80011e8 <ESC_Task+0x1ec>)
 8001156:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800115a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800115e:	4b23      	ldr	r3, [pc, #140]	@ (80011ec <ESC_Task+0x1f0>)
 8001160:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800116c:	ee17 2a90 	vmov	r2, s15
 8001170:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <ESC_Task+0x1f4>)
 8001172:	609a      	str	r2, [r3, #8]
				speed.speed4=-pitch_rate.u-roll_rate.u-yaw_rate.u+high.u;
 8001174:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <ESC_Task+0x1dc>)
 8001176:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800117a:	eeb1 7a67 	vneg.f32	s14, s15
 800117e:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <ESC_Task+0x1e4>)
 8001180:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001184:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001188:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <ESC_Task+0x1ec>)
 800118a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800118e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001192:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <ESC_Task+0x1f0>)
 8001194:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800119c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011a0:	ee17 2a90 	vmov	r2, s15
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <ESC_Task+0x1f4>)
 80011a6:	60da      	str	r2, [r3, #12]
				Control4Motor(&htim2, &speed);
 80011a8:	4911      	ldr	r1, [pc, #68]	@ (80011f0 <ESC_Task+0x1f4>)
 80011aa:	4812      	ldr	r0, [pc, #72]	@ (80011f4 <ESC_Task+0x1f8>)
 80011ac:	f7ff faa4 	bl	80006f8 <Control4Motor>
				a++;
 80011b0:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <ESC_Task+0x1fc>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	4a10      	ldr	r2, [pc, #64]	@ (80011f8 <ESC_Task+0x1fc>)
 80011b8:	6013      	str	r3, [r2, #0]
				timer3_flag=0;
 80011ba:	4b03      	ldr	r3, [pc, #12]	@ (80011c8 <ESC_Task+0x1cc>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
			}
			vTaskDelay(pdMS_TO_TICKS(1));
 80011c0:	2001      	movs	r0, #1
 80011c2:	f003 fe7b 	bl	8004ebc <vTaskDelay>
			if(timer3_flag==1)
 80011c6:	e71d      	b.n	8001004 <ESC_Task+0x8>
 80011c8:	20000460 	.word	0x20000460
 80011cc:	200006f8 	.word	0x200006f8
 80011d0:	200006c0 	.word	0x200006c0
 80011d4:	20000474 	.word	0x20000474
 80011d8:	200004c8 	.word	0x200004c8
 80011dc:	2000051c 	.word	0x2000051c
 80011e0:	20000570 	.word	0x20000570
 80011e4:	200005c4 	.word	0x200005c4
 80011e8:	20000618 	.word	0x20000618
 80011ec:	2000066c 	.word	0x2000066c
 80011f0:	20000464 	.word	0x20000464
 80011f4:	2000038c 	.word	0x2000038c
 80011f8:	2000071c 	.word	0x2000071c

080011fc <NRF_Task>:

	}
}

void NRF_Task(void *argument)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	int i=0;
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		sprintf((char*)spi_tx,"ngu+%d",i);
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	4907      	ldr	r1, [pc, #28]	@ (8001228 <NRF_Task+0x2c>)
 800120c:	4807      	ldr	r0, [pc, #28]	@ (800122c <NRF_Task+0x30>)
 800120e:	f004 fe61 	bl	8005ed4 <siprintf>
		Two_Way_Commuination_RTOS(&nrf1, spi_tx, spi_rx);
 8001212:	4a07      	ldr	r2, [pc, #28]	@ (8001230 <NRF_Task+0x34>)
 8001214:	4905      	ldr	r1, [pc, #20]	@ (800122c <NRF_Task+0x30>)
 8001216:	4807      	ldr	r0, [pc, #28]	@ (8001234 <NRF_Task+0x38>)
 8001218:	f000 fa1a 	bl	8001650 <Two_Way_Commuination_RTOS>
		i++;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3301      	adds	r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
		sprintf((char*)spi_tx,"ngu+%d",i);
 8001222:	bf00      	nop
 8001224:	e7f0      	b.n	8001208 <NRF_Task+0xc>
 8001226:	bf00      	nop
 8001228:	08006918 	.word	0x08006918
 800122c:	20000440 	.word	0x20000440
 8001230:	20000420 	.word	0x20000420
 8001234:	20000000 	.word	0x20000000

08001238 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001240:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001244:	4804      	ldr	r0, [pc, #16]	@ (8001258 <StartDefaultTask+0x20>)
 8001246:	f001 f886 	bl	8002356 <HAL_GPIO_TogglePin>
    osDelay(500);
 800124a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800124e:	f003 faf8 	bl	8004842 <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001252:	bf00      	nop
 8001254:	e7f4      	b.n	8001240 <StartDefaultTask+0x8>
 8001256:	bf00      	nop
 8001258:	40020800 	.word	0x40020800

0800125c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
//	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a08      	ldr	r2, [pc, #32]	@ (800128c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d101      	bne.n	8001272 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800126e:	f000 fd97 	bl	8001da0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance==TIM3)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a06      	ldr	r2, [pc, #24]	@ (8001290 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d102      	bne.n	8001282 <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	  timer3_flag=1;
 800127c:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
//	  xSemaphoreGiveFromISR(TimerISR_Semaphore,&xHigherPriorityTaskWoken);
  }
//  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
  /* USER CODE END Callback 1 */
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40010000 	.word	0x40010000
 8001290:	40000400 	.word	0x40000400
 8001294:	20000460 	.word	0x20000460

08001298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129c:	b672      	cpsid	i
}
 800129e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <Error_Handler+0x8>

080012a4 <Chip_Select>:
#include "main.h"

static NRF_MODE nrfmode;

void Chip_Select(NRF_HandleTypeDef *nrf)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CS_GPIO, nrf->CS_PIN, 0);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	899b      	ldrh	r3, [r3, #12]
 80012b4:	2200      	movs	r2, #0
 80012b6:	4619      	mov	r1, r3
 80012b8:	f001 f834 	bl	8002324 <HAL_GPIO_WritePin>
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <Chip_Deselect>:

void Chip_Deselect(NRF_HandleTypeDef *nrf)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CS_GPIO, nrf->CS_PIN, 1);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6818      	ldr	r0, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	899b      	ldrh	r3, [r3, #12]
 80012d4:	2201      	movs	r2, #1
 80012d6:	4619      	mov	r1, r3
 80012d8:	f001 f824 	bl	8002324 <HAL_GPIO_WritePin>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <Set_CE_High>:

void Set_CE_High(NRF_HandleTypeDef *nrf)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CE_GPIO, nrf->CE_PIN, 1);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6858      	ldr	r0, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	89db      	ldrh	r3, [r3, #14]
 80012f4:	2201      	movs	r2, #1
 80012f6:	4619      	mov	r1, r3
 80012f8:	f001 f814 	bl	8002324 <HAL_GPIO_WritePin>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <Set_CE_Low>:

void Set_CE_Low(NRF_HandleTypeDef *nrf)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CE_GPIO, nrf->CE_PIN, 0);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6858      	ldr	r0, [r3, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	89db      	ldrh	r3, [r3, #14]
 8001314:	2200      	movs	r2, #0
 8001316:	4619      	mov	r1, r3
 8001318:	f001 f804 	bl	8002324 <HAL_GPIO_WritePin>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <WaitForIRQ>:

void WaitForIRQ(NRF_HandleTypeDef *nrf)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	while (HAL_GPIO_ReadPin(nrf->IRQ_GPIO, nrf->IRQ_PIN) == 1)
 800132c:	bf00      	nop
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	8a1b      	ldrh	r3, [r3, #16]
 8001336:	4619      	mov	r1, r3
 8001338:	4610      	mov	r0, r2
 800133a:	f000 ffdb 	bl	80022f4 <HAL_GPIO_ReadPin>
 800133e:	4603      	mov	r3, r0
 8001340:	2b01      	cmp	r3, #1
 8001342:	d0f4      	beq.n	800132e <WaitForIRQ+0xa>
		;
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <nRF_WriteRegister>:

void nRF_WriteRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t *data, int size)
{
 800134e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001352:	b089      	sub	sp, #36	@ 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	607a      	str	r2, [r7, #4]
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	460b      	mov	r3, r1
 800135e:	72fb      	strb	r3, [r7, #11]
 8001360:	466b      	mov	r3, sp
 8001362:	461e      	mov	r6, r3
	uint8_t buff[size + 1];
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	1c59      	adds	r1, r3, #1
 8001368:	1e4b      	subs	r3, r1, #1
 800136a:	61bb      	str	r3, [r7, #24]
 800136c:	460a      	mov	r2, r1
 800136e:	2300      	movs	r3, #0
 8001370:	4690      	mov	r8, r2
 8001372:	4699      	mov	r9, r3
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001380:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001384:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001388:	460a      	mov	r2, r1
 800138a:	2300      	movs	r3, #0
 800138c:	4614      	mov	r4, r2
 800138e:	461d      	mov	r5, r3
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	00eb      	lsls	r3, r5, #3
 800139a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800139e:	00e2      	lsls	r2, r4, #3
 80013a0:	460b      	mov	r3, r1
 80013a2:	3307      	adds	r3, #7
 80013a4:	08db      	lsrs	r3, r3, #3
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	ebad 0d03 	sub.w	sp, sp, r3
 80013ac:	466b      	mov	r3, sp
 80013ae:	3300      	adds	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
	buff[0] = reg | (1 << 5);
 80013b2:	7afb      	ldrb	r3, [r7, #11]
 80013b4:	f043 0320 	orr.w	r3, r3, #32
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++)
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
 80013c2:	e00a      	b.n	80013da <nRF_WriteRegister+0x8c>
	{
		buff[i + 1] = data[i];
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	441a      	add	r2, r3
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3301      	adds	r3, #1
 80013ce:	7811      	ldrb	r1, [r2, #0]
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < size; i++)
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	3301      	adds	r3, #1
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	69fa      	ldr	r2, [r7, #28]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	dbf0      	blt.n	80013c4 <nRF_WriteRegister+0x76>
	}
	Chip_Select(nrf);
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f7ff ff5e 	bl	80012a4 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, buff, (uint16_t)size + 1, NRF_SPI_TIMEOUT);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6958      	ldr	r0, [r3, #20]
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	3301      	adds	r3, #1
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	2364      	movs	r3, #100	@ 0x64
 80013f6:	6979      	ldr	r1, [r7, #20]
 80013f8:	f001 fcc7 	bl	8002d8a <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f7ff ff61 	bl	80012c4 <Chip_Deselect>
 8001402:	46b5      	mov	sp, r6
}
 8001404:	bf00      	nop
 8001406:	3724      	adds	r7, #36	@ 0x24
 8001408:	46bd      	mov	sp, r7
 800140a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800140e <nRF_WriteOneRegister>:

void nRF_WriteOneRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t data)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	460b      	mov	r3, r1
 8001418:	70fb      	strb	r3, [r7, #3]
 800141a:	4613      	mov	r3, r2
 800141c:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2];
	buff[0] = reg | (1 << 5);
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	f043 0320 	orr.w	r3, r3, #32
 8001424:	b2db      	uxtb	r3, r3
 8001426:	733b      	strb	r3, [r7, #12]
	buff[1] = data;
 8001428:	78bb      	ldrb	r3, [r7, #2]
 800142a:	737b      	strb	r3, [r7, #13]
	Chip_Select(nrf);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff39 	bl	80012a4 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, buff, 2, NRF_SPI_TIMEOUT);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6958      	ldr	r0, [r3, #20]
 8001436:	f107 010c 	add.w	r1, r7, #12
 800143a:	2364      	movs	r3, #100	@ 0x64
 800143c:	2202      	movs	r2, #2
 800143e:	f001 fca4 	bl	8002d8a <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ff3e 	bl	80012c4 <Chip_Deselect>
}
 8001448:	bf00      	nop
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <nRF_ReadOneRegister>:
	HAL_SPI_Receive(nrf->hspi, receive_data, size, NRF_SPI_TIMEOUT * 10);
	Chip_Deselect(nrf);
}

void nRF_ReadOneRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t *receive_data)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	460b      	mov	r3, r1
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	72fb      	strb	r3, [r7, #11]

	uint8_t buff = reg;
 800145e:	7afb      	ldrb	r3, [r7, #11]
 8001460:	75fb      	strb	r3, [r7, #23]
	Chip_Select(nrf);
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7ff ff1e 	bl	80012a4 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6958      	ldr	r0, [r3, #20]
 800146c:	f107 0117 	add.w	r1, r7, #23
 8001470:	2364      	movs	r3, #100	@ 0x64
 8001472:	2201      	movs	r2, #1
 8001474:	f001 fc89 	bl	8002d8a <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->hspi, receive_data, 1, NRF_SPI_TIMEOUT);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6958      	ldr	r0, [r3, #20]
 800147c:	2364      	movs	r3, #100	@ 0x64
 800147e:	2201      	movs	r2, #1
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	f001 fdc6 	bl	8003012 <HAL_SPI_Receive>
	Chip_Deselect(nrf);
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f7ff ff1c 	bl	80012c4 <Chip_Deselect>
}
 800148c:	bf00      	nop
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <nRF_SendCmd>:
void nRF_SendCmd(NRF_HandleTypeDef *nrf, uint8_t cmd)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	70fb      	strb	r3, [r7, #3]

	uint8_t buff = cmd;
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	73fb      	strb	r3, [r7, #15]
	Chip_Select(nrf);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff fefd 	bl	80012a4 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6958      	ldr	r0, [r3, #20]
 80014ae:	f107 010f 	add.w	r1, r7, #15
 80014b2:	2364      	movs	r3, #100	@ 0x64
 80014b4:	2201      	movs	r2, #1
 80014b6:	f001 fc68 	bl	8002d8a <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ff02 	bl	80012c4 <Chip_Deselect>
}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <nRF_GetStatus>:

uint8_t nRF_GetStatus(NRF_HandleTypeDef *nrf)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

	uint8_t buff = STATUS;
 80014d0:	2307      	movs	r3, #7
 80014d2:	73fb      	strb	r3, [r7, #15]
	uint8_t rx_data = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	73bb      	strb	r3, [r7, #14]
	Chip_Select(nrf);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff fee3 	bl	80012a4 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6958      	ldr	r0, [r3, #20]
 80014e2:	f107 010f 	add.w	r1, r7, #15
 80014e6:	2364      	movs	r3, #100	@ 0x64
 80014e8:	2201      	movs	r2, #1
 80014ea:	f001 fc4e 	bl	8002d8a <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->hspi, &rx_data, 1, NRF_SPI_TIMEOUT * 10);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6958      	ldr	r0, [r3, #20]
 80014f2:	f107 010e 	add.w	r1, r7, #14
 80014f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014fa:	2201      	movs	r2, #1
 80014fc:	f001 fd89 	bl	8003012 <HAL_SPI_Receive>
	Chip_Deselect(nrf);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff fedf 	bl	80012c4 <Chip_Deselect>
	return rx_data;
 8001506:	7bbb      	ldrb	r3, [r7, #14]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <nRF_TX_Payload>:

void nRF_TX_Payload(NRF_HandleTypeDef *nrf, uint8_t *data, uint16_t size)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	4613      	mov	r3, r2
 800151c:	80fb      	strh	r3, [r7, #6]
	Chip_Select(nrf);
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f7ff fec0 	bl	80012a4 <Chip_Select>
	uint8_t buff = W_TX_PAYLOAD;
 8001524:	23a0      	movs	r3, #160	@ 0xa0
 8001526:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6958      	ldr	r0, [r3, #20]
 800152c:	f107 0117 	add.w	r1, r7, #23
 8001530:	2364      	movs	r3, #100	@ 0x64
 8001532:	2201      	movs	r2, #1
 8001534:	f001 fc29 	bl	8002d8a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf->hspi, data, size, NRF_SPI_TIMEOUT);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6958      	ldr	r0, [r3, #20]
 800153c:	88fa      	ldrh	r2, [r7, #6]
 800153e:	2364      	movs	r3, #100	@ 0x64
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	f001 fc22 	bl	8002d8a <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f7ff febc 	bl	80012c4 <Chip_Deselect>
}
 800154c:	bf00      	nop
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <nRF_RX_Payload>:

void nRF_RX_Payload(NRF_HandleTypeDef *nrf, uint8_t *rx_data, uint16_t size)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	4613      	mov	r3, r2
 8001560:	80fb      	strh	r3, [r7, #6]
	Chip_Select(nrf);
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7ff fe9e 	bl	80012a4 <Chip_Select>
	uint8_t buff = R_RX_PAYLOAD;
 8001568:	2361      	movs	r3, #97	@ 0x61
 800156a:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6958      	ldr	r0, [r3, #20]
 8001570:	f107 0117 	add.w	r1, r7, #23
 8001574:	2364      	movs	r3, #100	@ 0x64
 8001576:	2201      	movs	r2, #1
 8001578:	f001 fc07 	bl	8002d8a <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->hspi, rx_data, size, NRF_SPI_TIMEOUT * 10);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6958      	ldr	r0, [r3, #20]
 8001580:	88fa      	ldrh	r2, [r7, #6]
 8001582:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001586:	68b9      	ldr	r1, [r7, #8]
 8001588:	f001 fd43 	bl	8003012 <HAL_SPI_Receive>
	Chip_Deselect(nrf);
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f7ff fe99 	bl	80012c4 <Chip_Deselect>
}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <Select_Rx_Mode>:
	nRF_SendCmd(nrf, FLUSH_RX);
	nrfmode = MODE_RX;
}

void Select_Rx_Mode(NRF_HandleTypeDef *nrf)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	uint8_t buff = 0x0b;
 80015a4:	230b      	movs	r3, #11
 80015a6:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low(nrf);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff feab 	bl	8001304 <Set_CE_Low>
	CONFIG_REG_Write(nrf, buff);
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	4619      	mov	r1, r3
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f912 	bl	80017dc <CONFIG_REG_Write>
	Set_CE_High(nrf);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff fe93 	bl	80012e4 <Set_CE_High>
	HAL_Delay(2);
 80015be:	2002      	movs	r0, #2
 80015c0:	f000 fc0e 	bl	8001de0 <HAL_Delay>
	nrfmode = MODE_RX;
 80015c4:	4b03      	ldr	r3, [pc, #12]	@ (80015d4 <Select_Rx_Mode+0x38>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	701a      	strb	r2, [r3, #0]
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000720 	.word	0x20000720

080015d8 <Select_Tx_Mode_RTOS>:
	vTaskDelay(pdMS_TO_TICKS(2));
	nrfmode = MODE_TX;
}

void Select_Tx_Mode_RTOS(NRF_HandleTypeDef *nrf)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	uint8_t buff = 0x0a;
 80015e0:	230a      	movs	r3, #10
 80015e2:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low(nrf);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff fe8d 	bl	8001304 <Set_CE_Low>
	CONFIG_REG_Write(nrf, buff);
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	4619      	mov	r1, r3
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f8f4 	bl	80017dc <CONFIG_REG_Write>
	Set_CE_High(nrf);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fe75 	bl	80012e4 <Set_CE_High>
	vTaskDelay(pdMS_TO_TICKS(2));
 80015fa:	2002      	movs	r0, #2
 80015fc:	f003 fc5e 	bl	8004ebc <vTaskDelay>
	nrfmode = MODE_TX;
 8001600:	4b03      	ldr	r3, [pc, #12]	@ (8001610 <Select_Tx_Mode_RTOS+0x38>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000720 	.word	0x20000720

08001614 <Select_Rx_Mode_RTOS>:
	nRF_SendCmd(nrf, FLUSH_RX);
	nrfmode = MODE_RX;
}

void Select_Rx_Mode_RTOS(NRF_HandleTypeDef *nrf)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	uint8_t buff = 0x0b;
 800161c:	230b      	movs	r3, #11
 800161e:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low(nrf);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff fe6f 	bl	8001304 <Set_CE_Low>
	CONFIG_REG_Write(nrf, buff);
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	4619      	mov	r1, r3
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f8d6 	bl	80017dc <CONFIG_REG_Write>
	Set_CE_High(nrf);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff fe57 	bl	80012e4 <Set_CE_High>
	vTaskDelay(pdMS_TO_TICKS(2));
 8001636:	2002      	movs	r0, #2
 8001638:	f003 fc40 	bl	8004ebc <vTaskDelay>
	nrfmode = MODE_RX;
 800163c:	4b03      	ldr	r3, [pc, #12]	@ (800164c <Select_Rx_Mode_RTOS+0x38>)
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000720 	.word	0x20000720

08001650 <Two_Way_Commuination_RTOS>:

void Two_Way_Commuination_RTOS(NRF_HandleTypeDef *nrf,uint8_t *tx_data,uint8_t *rx_data)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
	TX_Communication(nrf,tx_data);
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f000 f846 	bl	80016f0 <TX_Communication>
	Select_Rx_Mode_RTOS(nrf);
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f7ff ffd5 	bl	8001614 <Select_Rx_Mode_RTOS>
	vTaskDelay(pdMS_TO_TICKS(50));
 800166a:	2032      	movs	r0, #50	@ 0x32
 800166c:	f003 fc26 	bl	8004ebc <vTaskDelay>
	RX_Communication(nrf,rx_data);
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 f882 	bl	800177c <RX_Communication>
	Select_Tx_Mode_RTOS(nrf);
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f7ff ffad 	bl	80015d8 <Select_Tx_Mode_RTOS>
	vTaskDelay(pdMS_TO_TICKS(10));
 800167e:	200a      	movs	r0, #10
 8001680:	f003 fc1c 	bl	8004ebc <vTaskDelay>
}
 8001684:	bf00      	nop
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <Two_Way_Commuination_Pipe0_Config>:

#endif

void Two_Way_Commuination_Pipe0_Config(NRF_HandleTypeDef *nrf, uint64_t tx_addr, uint64_t rx_addr)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	e9c7 2300 	strd	r2, r3, [r7]
	Set_CE_Low(nrf);
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f7ff fe33 	bl	8001304 <Set_CE_Low>
	RX_PW_P_NUM_Number_Of_Bytes(nrf, 0, 8);
 800169e:	2208      	movs	r2, #8
 80016a0:	2100      	movs	r1, #0
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 f91a 	bl	80018dc <RX_PW_P_NUM_Number_Of_Bytes>
	TX_ADDR_Write(nrf, tx_addr);
 80016a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 f8e3 	bl	8001878 <TX_ADDR_Write>
	RX_ADDR_P0_Write(nrf, rx_addr);
 80016b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 f8ac 	bl	8001814 <RX_ADDR_P0_Write>
	nRF_WriteOneRegister(nrf, EN_RXADDR, 1);
 80016bc:	2201      	movs	r2, #1
 80016be:	2102      	movs	r1, #2
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f7ff fea4 	bl	800140e <nRF_WriteOneRegister>
	nRF_WriteOneRegister(nrf, EN_AA, 0x00);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2101      	movs	r1, #1
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f7ff fe9f 	bl	800140e <nRF_WriteOneRegister>
	nRF_WriteOneRegister(nrf, RF_SETUP, 0x7);
 80016d0:	2207      	movs	r2, #7
 80016d2:	2106      	movs	r1, #6
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f7ff fe9a 	bl	800140e <nRF_WriteOneRegister>
	Set_CE_High(nrf);
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f7ff fe02 	bl	80012e4 <Set_CE_High>
	HAL_Delay(2);
 80016e0:	2002      	movs	r0, #2
 80016e2:	f000 fb7d 	bl	8001de0 <HAL_Delay>
}
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <TX_Communication>:
	Set_CE_High(nrf);
	HAL_Delay(2);
}

uint8_t TX_Communication(NRF_HandleTypeDef *nrf, uint8_t *data)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
	if (nrfmode == MODE_TX)
 80016fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001778 <TX_Communication+0x88>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d135      	bne.n	800176e <TX_Communication+0x7e>
	{
		nRF_TX_Payload(nrf, data, 8);
 8001702:	2208      	movs	r2, #8
 8001704:	6839      	ldr	r1, [r7, #0]
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ff02 	bl	8001510 <nRF_TX_Payload>
		Set_CE_High(nrf);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff fde9 	bl	80012e4 <Set_CE_High>
		WaitForIRQ(nrf);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff fe06 	bl	8001324 <WaitForIRQ>
		nRF_SendCmd(nrf, FLUSH_TX);
 8001718:	21e1      	movs	r1, #225	@ 0xe1
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff feba 	bl	8001494 <nRF_SendCmd>
		uint8_t status = nRF_GetStatus(nrf);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff fed1 	bl	80014c8 <nRF_GetStatus>
 8001726:	4603      	mov	r3, r0
 8001728:	73fb      	strb	r3, [r7, #15]
		if ((status & (1 << MAX_RT)) != 0)
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	f003 0310 	and.w	r3, r3, #16
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00b      	beq.n	800174c <TX_Communication+0x5c>
		{
			status |= ((1 << MAX_RT) | (1 << TX_FULL));
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	f043 0311 	orr.w	r3, r3, #17
 800173a:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(nrf, STATUS, status);
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	461a      	mov	r2, r3
 8001740:	2107      	movs	r1, #7
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fe63 	bl	800140e <nRF_WriteOneRegister>
			return STATUS_TX_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e011      	b.n	8001770 <TX_Communication+0x80>
		}
		else if ((status & (1 << 5)) != 0)
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	f003 0320 	and.w	r3, r3, #32
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00b      	beq.n	800176e <TX_Communication+0x7e>
		{
			status |= ((1 << TX_DS) | (1 << TX_FULL));
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 800175c:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(nrf, STATUS, status);
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	461a      	mov	r2, r3
 8001762:	2107      	movs	r1, #7
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff fe52 	bl	800140e <nRF_WriteOneRegister>
			return STATUS_TX_OK;
 800176a:	2302      	movs	r3, #2
 800176c:	e000      	b.n	8001770 <TX_Communication+0x80>
		}
	}
	return STATUS_TX_NONDEFINE;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000720 	.word	0x20000720

0800177c <RX_Communication>:

uint8_t RX_Communication(NRF_HandleTypeDef *nrf, uint8_t *rx_data)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
	if (nrfmode == MODE_RX)
 8001786:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <RX_Communication+0x5c>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d11e      	bne.n	80017cc <RX_Communication+0x50>
	{
		Set_CE_High(nrf);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fda8 	bl	80012e4 <Set_CE_High>
		uint8_t status = nRF_GetStatus(nrf);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fe97 	bl	80014c8 <nRF_GetStatus>
 800179a:	4603      	mov	r3, r0
 800179c:	73fb      	strb	r3, [r7, #15]
		if ((status & (1 << RX_DR)) != 0)
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00b      	beq.n	80017c0 <RX_Communication+0x44>
		{
			nRF_WriteOneRegister(nrf, STATUS, (1 << 6));
 80017a8:	2240      	movs	r2, #64	@ 0x40
 80017aa:	2107      	movs	r1, #7
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fe2e 	bl	800140e <nRF_WriteOneRegister>
			nRF_RX_Payload(nrf, rx_data, 8);
 80017b2:	2208      	movs	r2, #8
 80017b4:	6839      	ldr	r1, [r7, #0]
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff fecc 	bl	8001554 <nRF_RX_Payload>
			return STATUS_RX_OK;
 80017bc:	2302      	movs	r3, #2
 80017be:	e006      	b.n	80017ce <RX_Communication+0x52>
		}
		nRF_SendCmd(nrf, FLUSH_RX);
 80017c0:	21e2      	movs	r1, #226	@ 0xe2
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff fe66 	bl	8001494 <nRF_SendCmd>
		return STATUS_RX_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <RX_Communication+0x52>
	}
	return STATUS_RX_NONEDEFINE;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000720 	.word	0x20000720

080017dc <CONFIG_REG_Write>:
}



void CONFIG_REG_Write(NRF_HandleTypeDef *nrf, uint8_t data)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	70fb      	strb	r3, [r7, #3]
	uint8_t read_reg;
	do
	{
		nRF_WriteOneRegister(nrf, CONFIG, data);
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	461a      	mov	r2, r3
 80017ec:	2100      	movs	r1, #0
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fe0d 	bl	800140e <nRF_WriteOneRegister>
		nRF_ReadOneRegister(nrf, CONFIG, &read_reg);
 80017f4:	f107 030f 	add.w	r3, r7, #15
 80017f8:	461a      	mov	r2, r3
 80017fa:	2100      	movs	r1, #0
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff fe27 	bl	8001450 <nRF_ReadOneRegister>
	} while (read_reg != data);
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	429a      	cmp	r2, r3
 8001808:	d1ee      	bne.n	80017e8 <CONFIG_REG_Write+0xc>
}
 800180a:	bf00      	nop
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <RX_ADDR_P0_Write>:
{
	nRF_WriteOneRegister(nrf, EN_AA, pipe & 0x3F);
}

void RX_ADDR_P0_Write(NRF_HandleTypeDef *nrf, uint64_t data)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	@ 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t buff[5];
	uint64_t temp = data;
 8001820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001824:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	e016      	b.n	800185c <RX_ADDR_P0_Write+0x48>
	{
		buff[i] = (uint8_t)((temp) & 0xff);
 800182e:	f897 1020 	ldrb.w	r1, [r7, #32]
 8001832:	f107 0214 	add.w	r2, r7, #20
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	4413      	add	r3, r2
 800183a:	460a      	mov	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]
		temp = temp >> 8;
 800183e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	0a02      	lsrs	r2, r0, #8
 800184c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001850:	0a0b      	lsrs	r3, r1, #8
 8001852:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3301      	adds	r3, #1
 800185a:	61fb      	str	r3, [r7, #28]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	2b04      	cmp	r3, #4
 8001860:	dde5      	ble.n	800182e <RX_ADDR_P0_Write+0x1a>
	}
	nRF_WriteRegister(nrf, RX_ADDR_P0, buff, 5);
 8001862:	f107 0214 	add.w	r2, r7, #20
 8001866:	2305      	movs	r3, #5
 8001868:	210a      	movs	r1, #10
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f7ff fd6f 	bl	800134e <nRF_WriteRegister>
}
 8001870:	bf00      	nop
 8001872:	3728      	adds	r7, #40	@ 0x28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <TX_ADDR_Write>:
	}
	nRF_WriteOneRegister(nrf, reg, data);
}

void TX_ADDR_Write(NRF_HandleTypeDef *nrf, uint64_t data)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	@ 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t buff[5];
	uint64_t temp = data;
 8001884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001888:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
 8001890:	e016      	b.n	80018c0 <TX_ADDR_Write+0x48>
	{
		buff[i] = (uint8_t)((temp) & 0xff);
 8001892:	f897 1020 	ldrb.w	r1, [r7, #32]
 8001896:	f107 0214 	add.w	r2, r7, #20
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	4413      	add	r3, r2
 800189e:	460a      	mov	r2, r1
 80018a0:	701a      	strb	r2, [r3, #0]
		temp = temp >> 8;
 80018a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	0a02      	lsrs	r2, r0, #8
 80018b0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80018b4:	0a0b      	lsrs	r3, r1, #8
 80018b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3301      	adds	r3, #1
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	dde5      	ble.n	8001892 <TX_ADDR_Write+0x1a>
	}
	nRF_WriteRegister(nrf, TX_ADDR, buff, 5);
 80018c6:	f107 0214 	add.w	r2, r7, #20
 80018ca:	2305      	movs	r3, #5
 80018cc:	2110      	movs	r1, #16
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f7ff fd3d 	bl	800134e <nRF_WriteRegister>
}
 80018d4:	bf00      	nop
 80018d6:	3728      	adds	r7, #40	@ 0x28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <RX_PW_P_NUM_Number_Of_Bytes>:

void RX_PW_P_NUM_Number_Of_Bytes(NRF_HandleTypeDef *nrf, int num, uint8_t data)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	4613      	mov	r3, r2
 80018e8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	switch (num)
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	2b05      	cmp	r3, #5
 80018ee:	d828      	bhi.n	8001942 <RX_PW_P_NUM_Number_Of_Bytes+0x66>
 80018f0:	a201      	add	r2, pc, #4	@ (adr r2, 80018f8 <RX_PW_P_NUM_Number_Of_Bytes+0x1c>)
 80018f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f6:	bf00      	nop
 80018f8:	08001911 	.word	0x08001911
 80018fc:	08001917 	.word	0x08001917
 8001900:	0800191d 	.word	0x0800191d
 8001904:	08001923 	.word	0x08001923
 8001908:	08001929 	.word	0x08001929
 800190c:	0800192f 	.word	0x0800192f
	{
	case 0:
		reg = RX_PW_P0;
 8001910:	2311      	movs	r3, #17
 8001912:	75fb      	strb	r3, [r7, #23]
		break;
 8001914:	e00e      	b.n	8001934 <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 1:
		reg = RX_PW_P1;
 8001916:	2312      	movs	r3, #18
 8001918:	75fb      	strb	r3, [r7, #23]
		break;
 800191a:	e00b      	b.n	8001934 <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 2:
		reg = RX_PW_P2;
 800191c:	2313      	movs	r3, #19
 800191e:	75fb      	strb	r3, [r7, #23]
		break;
 8001920:	e008      	b.n	8001934 <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 3:
		reg = RX_PW_P3;
 8001922:	2314      	movs	r3, #20
 8001924:	75fb      	strb	r3, [r7, #23]
		break;
 8001926:	e005      	b.n	8001934 <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 4:
		reg = RX_PW_P4;
 8001928:	2315      	movs	r3, #21
 800192a:	75fb      	strb	r3, [r7, #23]
		break;
 800192c:	e002      	b.n	8001934 <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 5:
		reg = RX_PW_P5;
 800192e:	2316      	movs	r3, #22
 8001930:	75fb      	strb	r3, [r7, #23]
		break;
 8001932:	bf00      	nop
	default:
		return;
	}
	nRF_WriteOneRegister(nrf, reg, data);
 8001934:	79fa      	ldrb	r2, [r7, #7]
 8001936:	7dfb      	ldrb	r3, [r7, #23]
 8001938:	4619      	mov	r1, r3
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f7ff fd67 	bl	800140e <nRF_WriteOneRegister>
 8001940:	e000      	b.n	8001944 <RX_PW_P_NUM_Number_Of_Bytes+0x68>
		return;
 8001942:	bf00      	nop
}
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop

0800194c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <HAL_MspInit+0x54>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195a:	4a11      	ldr	r2, [pc, #68]	@ (80019a0 <HAL_MspInit+0x54>)
 800195c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001960:	6453      	str	r3, [r2, #68]	@ 0x44
 8001962:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <HAL_MspInit+0x54>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <HAL_MspInit+0x54>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <HAL_MspInit+0x54>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800197c:	6413      	str	r3, [r2, #64]	@ 0x40
 800197e:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <HAL_MspInit+0x54>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	210f      	movs	r1, #15
 800198e:	f06f 0001 	mvn.w	r0, #1
 8001992:	f000 fb01 	bl	8001f98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	@ 0x28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a19      	ldr	r2, [pc, #100]	@ (8001a28 <HAL_SPI_MspInit+0x84>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d12b      	bne.n	8001a1e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <HAL_SPI_MspInit+0x88>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ce:	4a17      	ldr	r2, [pc, #92]	@ (8001a2c <HAL_SPI_MspInit+0x88>)
 80019d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <HAL_SPI_MspInit+0x88>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <HAL_SPI_MspInit+0x88>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	4a10      	ldr	r2, [pc, #64]	@ (8001a2c <HAL_SPI_MspInit+0x88>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <HAL_SPI_MspInit+0x88>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019fe:	23e0      	movs	r3, #224	@ 0xe0
 8001a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a0e:	2305      	movs	r3, #5
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	4805      	ldr	r0, [pc, #20]	@ (8001a30 <HAL_SPI_MspInit+0x8c>)
 8001a1a:	f000 fae7 	bl	8001fec <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001a1e:	bf00      	nop
 8001a20:	3728      	adds	r7, #40	@ 0x28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40013000 	.word	0x40013000
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40020000 	.word	0x40020000

08001a34 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a44:	d10d      	bne.n	8001a62 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	4a08      	ldr	r2, [pc, #32]	@ (8001a70 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a56:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800

08001a74 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0e      	ldr	r2, [pc, #56]	@ (8001abc <HAL_TIM_Base_MspInit+0x48>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d115      	bne.n	8001ab2 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x4c>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x4c>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x4c>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2105      	movs	r1, #5
 8001aa6:	201d      	movs	r0, #29
 8001aa8:	f000 fa76 	bl	8001f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001aac:	201d      	movs	r0, #29
 8001aae:	f000 fa8f 	bl	8001fd0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40000400 	.word	0x40000400
 8001ac0:	40023800 	.word	0x40023800

08001ac4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ae4:	d11d      	bne.n	8001b22 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <HAL_TIM_MspPostInit+0x68>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	4a0f      	ldr	r2, [pc, #60]	@ (8001b2c <HAL_TIM_MspPostInit+0x68>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <HAL_TIM_MspPostInit+0x68>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b02:	230f      	movs	r3, #15
 8001b04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b12:	2301      	movs	r3, #1
 8001b14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4804      	ldr	r0, [pc, #16]	@ (8001b30 <HAL_TIM_MspPostInit+0x6c>)
 8001b1e:	f000 fa65 	bl	8001fec <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b22:	bf00      	nop
 8001b24:	3720      	adds	r7, #32
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020000 	.word	0x40020000

08001b34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	@ 0x30
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	4b2e      	ldr	r3, [pc, #184]	@ (8001c04 <HAL_InitTick+0xd0>)
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4c:	4a2d      	ldr	r2, [pc, #180]	@ (8001c04 <HAL_InitTick+0xd0>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b54:	4b2b      	ldr	r3, [pc, #172]	@ (8001c04 <HAL_InitTick+0xd0>)
 8001b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b60:	f107 020c 	add.w	r2, r7, #12
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f001 f852 	bl	8002c14 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b70:	f001 f83c 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 8001b74:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b78:	4a23      	ldr	r2, [pc, #140]	@ (8001c08 <HAL_InitTick+0xd4>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	0c9b      	lsrs	r3, r3, #18
 8001b80:	3b01      	subs	r3, #1
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b84:	4b21      	ldr	r3, [pc, #132]	@ (8001c0c <HAL_InitTick+0xd8>)
 8001b86:	4a22      	ldr	r2, [pc, #136]	@ (8001c10 <HAL_InitTick+0xdc>)
 8001b88:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b8a:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <HAL_InitTick+0xd8>)
 8001b8c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b90:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b92:	4a1e      	ldr	r2, [pc, #120]	@ (8001c0c <HAL_InitTick+0xd8>)
 8001b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b96:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b98:	4b1c      	ldr	r3, [pc, #112]	@ (8001c0c <HAL_InitTick+0xd8>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c0c <HAL_InitTick+0xd8>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba4:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <HAL_InitTick+0xd8>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001baa:	4818      	ldr	r0, [pc, #96]	@ (8001c0c <HAL_InitTick+0xd8>)
 8001bac:	f001 fe36 	bl	800381c <HAL_TIM_Base_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d11b      	bne.n	8001bf6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001bbe:	4813      	ldr	r0, [pc, #76]	@ (8001c0c <HAL_InitTick+0xd8>)
 8001bc0:	f001 fe7c 	bl	80038bc <HAL_TIM_Base_Start_IT>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001bca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d111      	bne.n	8001bf6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001bd2:	2019      	movs	r0, #25
 8001bd4:	f000 f9fc 	bl	8001fd0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b0f      	cmp	r3, #15
 8001bdc:	d808      	bhi.n	8001bf0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001bde:	2200      	movs	r2, #0
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	2019      	movs	r0, #25
 8001be4:	f000 f9d8 	bl	8001f98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001be8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <HAL_InitTick+0xe0>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e002      	b.n	8001bf6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001bf6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3730      	adds	r7, #48	@ 0x30
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	431bde83 	.word	0x431bde83
 8001c0c:	20000724 	.word	0x20000724
 8001c10:	40010000 	.word	0x40010000
 8001c14:	2000001c 	.word	0x2000001c

08001c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <NMI_Handler+0x4>

08001c20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <HardFault_Handler+0x4>

08001c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <MemManage_Handler+0x4>

08001c30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <BusFault_Handler+0x4>

08001c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <UsageFault_Handler+0x4>

08001c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c54:	4802      	ldr	r0, [pc, #8]	@ (8001c60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c56:	f001 ff93 	bl	8003b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000724 	.word	0x20000724

08001c64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c68:	4802      	ldr	r0, [pc, #8]	@ (8001c74 <TIM3_IRQHandler+0x10>)
 8001c6a:	f001 ff89 	bl	8003b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200003d4 	.word	0x200003d4

08001c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c80:	4a14      	ldr	r2, [pc, #80]	@ (8001cd4 <_sbrk+0x5c>)
 8001c82:	4b15      	ldr	r3, [pc, #84]	@ (8001cd8 <_sbrk+0x60>)
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c8c:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c94:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <_sbrk+0x64>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	@ (8001ce0 <_sbrk+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9a:	4b10      	ldr	r3, [pc, #64]	@ (8001cdc <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d207      	bcs.n	8001cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca8:	f004 f99c 	bl	8005fe4 <__errno>
 8001cac:	4603      	mov	r3, r0
 8001cae:	220c      	movs	r2, #12
 8001cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	e009      	b.n	8001ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cbe:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a05      	ldr	r2, [pc, #20]	@ (8001cdc <_sbrk+0x64>)
 8001cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20020000 	.word	0x20020000
 8001cd8:	00000400 	.word	0x00000400
 8001cdc:	2000076c 	.word	0x2000076c
 8001ce0:	20004610 	.word	0x20004610

08001ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce8:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <SystemInit+0x20>)
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cee:	4a05      	ldr	r2, [pc, #20]	@ (8001d04 <SystemInit+0x20>)
 8001cf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d0c:	f7ff ffea 	bl	8001ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d10:	480c      	ldr	r0, [pc, #48]	@ (8001d44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d12:	490d      	ldr	r1, [pc, #52]	@ (8001d48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d14:	4a0d      	ldr	r2, [pc, #52]	@ (8001d4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d18:	e002      	b.n	8001d20 <LoopCopyDataInit>

08001d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1e:	3304      	adds	r3, #4

08001d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d24:	d3f9      	bcc.n	8001d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d26:	4a0a      	ldr	r2, [pc, #40]	@ (8001d50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d28:	4c0a      	ldr	r4, [pc, #40]	@ (8001d54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d2c:	e001      	b.n	8001d32 <LoopFillZerobss>

08001d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d30:	3204      	adds	r2, #4

08001d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d34:	d3fb      	bcc.n	8001d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d36:	f004 f95b 	bl	8005ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d3a:	f7fe fe45 	bl	80009c8 <main>
  bx  lr    
 8001d3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d48:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001d4c:	08006984 	.word	0x08006984
  ldr r2, =_sbss
 8001d50:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001d54:	20004610 	.word	0x20004610

08001d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC_IRQHandler>
	...

08001d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d60:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <HAL_Init+0x40>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0d      	ldr	r2, [pc, #52]	@ (8001d9c <HAL_Init+0x40>)
 8001d66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <HAL_Init+0x40>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0a      	ldr	r2, [pc, #40]	@ (8001d9c <HAL_Init+0x40>)
 8001d72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <HAL_Init+0x40>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a07      	ldr	r2, [pc, #28]	@ (8001d9c <HAL_Init+0x40>)
 8001d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d84:	2003      	movs	r0, #3
 8001d86:	f000 f8fc 	bl	8001f82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d8a:	200f      	movs	r0, #15
 8001d8c:	f7ff fed2 	bl	8001b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d90:	f7ff fddc 	bl	800194c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023c00 	.word	0x40023c00

08001da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da4:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_IncTick+0x20>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <HAL_IncTick+0x24>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	4a04      	ldr	r2, [pc, #16]	@ (8001dc4 <HAL_IncTick+0x24>)
 8001db2:	6013      	str	r3, [r2, #0]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000020 	.word	0x20000020
 8001dc4:	20000770 	.word	0x20000770

08001dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return uwTick;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	@ (8001ddc <HAL_GetTick+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000770 	.word	0x20000770

08001de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff ffee 	bl	8001dc8 <HAL_GetTick>
 8001dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d005      	beq.n	8001e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001e24 <HAL_Delay+0x44>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e06:	bf00      	nop
 8001e08:	f7ff ffde 	bl	8001dc8 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d8f7      	bhi.n	8001e08 <HAL_Delay+0x28>
  {
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000020 	.word	0x20000020

08001e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5a:	4a04      	ldr	r2, [pc, #16]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60d3      	str	r3, [r2, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e74:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <__NVIC_GetPriorityGrouping+0x18>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 0307 	and.w	r3, r3, #7
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	db0b      	blt.n	8001eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	f003 021f 	and.w	r2, r3, #31
 8001ea4:	4907      	ldr	r1, [pc, #28]	@ (8001ec4 <__NVIC_EnableIRQ+0x38>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	2001      	movs	r0, #1
 8001eae:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000e100 	.word	0xe000e100

08001ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	db0a      	blt.n	8001ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	490c      	ldr	r1, [pc, #48]	@ (8001f14 <__NVIC_SetPriority+0x4c>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	0112      	lsls	r2, r2, #4
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	440b      	add	r3, r1
 8001eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef0:	e00a      	b.n	8001f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4908      	ldr	r1, [pc, #32]	@ (8001f18 <__NVIC_SetPriority+0x50>)
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	3b04      	subs	r3, #4
 8001f00:	0112      	lsls	r2, r2, #4
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	440b      	add	r3, r1
 8001f06:	761a      	strb	r2, [r3, #24]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000e100 	.word	0xe000e100
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b089      	sub	sp, #36	@ 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f1c3 0307 	rsb	r3, r3, #7
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	bf28      	it	cs
 8001f3a:	2304      	movcs	r3, #4
 8001f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3304      	adds	r3, #4
 8001f42:	2b06      	cmp	r3, #6
 8001f44:	d902      	bls.n	8001f4c <NVIC_EncodePriority+0x30>
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3b03      	subs	r3, #3
 8001f4a:	e000      	b.n	8001f4e <NVIC_EncodePriority+0x32>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	f04f 32ff 	mov.w	r2, #4294967295
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	401a      	ands	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f64:	f04f 31ff 	mov.w	r1, #4294967295
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	43d9      	mvns	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	4313      	orrs	r3, r2
         );
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3724      	adds	r7, #36	@ 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ff4c 	bl	8001e28 <__NVIC_SetPriorityGrouping>
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001faa:	f7ff ff61 	bl	8001e70 <__NVIC_GetPriorityGrouping>
 8001fae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	68b9      	ldr	r1, [r7, #8]
 8001fb4:	6978      	ldr	r0, [r7, #20]
 8001fb6:	f7ff ffb1 	bl	8001f1c <NVIC_EncodePriority>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ff80 	bl	8001ec8 <__NVIC_SetPriority>
}
 8001fc8:	bf00      	nop
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff54 	bl	8001e8c <__NVIC_EnableIRQ>
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	@ 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	e159      	b.n	80022bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002008:	2201      	movs	r2, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	429a      	cmp	r2, r3
 8002022:	f040 8148 	bne.w	80022b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d005      	beq.n	800203e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800203a:	2b02      	cmp	r3, #2
 800203c:	d130      	bne.n	80020a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	2203      	movs	r2, #3
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002074:	2201      	movs	r2, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 0201 	and.w	r2, r3, #1
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d017      	beq.n	80020dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d123      	bne.n	8002130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	08da      	lsrs	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3208      	adds	r2, #8
 80020f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	220f      	movs	r2, #15
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	08da      	lsrs	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3208      	adds	r2, #8
 800212a:	69b9      	ldr	r1, [r7, #24]
 800212c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0203 	and.w	r2, r3, #3
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80a2 	beq.w	80022b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	4b57      	ldr	r3, [pc, #348]	@ (80022d4 <HAL_GPIO_Init+0x2e8>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	4a56      	ldr	r2, [pc, #344]	@ (80022d4 <HAL_GPIO_Init+0x2e8>)
 800217c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002180:	6453      	str	r3, [r2, #68]	@ 0x44
 8002182:	4b54      	ldr	r3, [pc, #336]	@ (80022d4 <HAL_GPIO_Init+0x2e8>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800218e:	4a52      	ldr	r2, [pc, #328]	@ (80022d8 <HAL_GPIO_Init+0x2ec>)
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	3302      	adds	r3, #2
 8002196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	220f      	movs	r2, #15
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a49      	ldr	r2, [pc, #292]	@ (80022dc <HAL_GPIO_Init+0x2f0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d019      	beq.n	80021ee <HAL_GPIO_Init+0x202>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a48      	ldr	r2, [pc, #288]	@ (80022e0 <HAL_GPIO_Init+0x2f4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d013      	beq.n	80021ea <HAL_GPIO_Init+0x1fe>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a47      	ldr	r2, [pc, #284]	@ (80022e4 <HAL_GPIO_Init+0x2f8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00d      	beq.n	80021e6 <HAL_GPIO_Init+0x1fa>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a46      	ldr	r2, [pc, #280]	@ (80022e8 <HAL_GPIO_Init+0x2fc>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d007      	beq.n	80021e2 <HAL_GPIO_Init+0x1f6>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a45      	ldr	r2, [pc, #276]	@ (80022ec <HAL_GPIO_Init+0x300>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d101      	bne.n	80021de <HAL_GPIO_Init+0x1f2>
 80021da:	2304      	movs	r3, #4
 80021dc:	e008      	b.n	80021f0 <HAL_GPIO_Init+0x204>
 80021de:	2307      	movs	r3, #7
 80021e0:	e006      	b.n	80021f0 <HAL_GPIO_Init+0x204>
 80021e2:	2303      	movs	r3, #3
 80021e4:	e004      	b.n	80021f0 <HAL_GPIO_Init+0x204>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e002      	b.n	80021f0 <HAL_GPIO_Init+0x204>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_GPIO_Init+0x204>
 80021ee:	2300      	movs	r3, #0
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	f002 0203 	and.w	r2, r2, #3
 80021f6:	0092      	lsls	r2, r2, #2
 80021f8:	4093      	lsls	r3, r2
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002200:	4935      	ldr	r1, [pc, #212]	@ (80022d8 <HAL_GPIO_Init+0x2ec>)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	3302      	adds	r3, #2
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800220e:	4b38      	ldr	r3, [pc, #224]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002232:	4a2f      	ldr	r2, [pc, #188]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002238:	4b2d      	ldr	r3, [pc, #180]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800225c:	4a24      	ldr	r2, [pc, #144]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002262:	4b23      	ldr	r3, [pc, #140]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002286:	4a1a      	ldr	r2, [pc, #104]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800228c:	4b18      	ldr	r3, [pc, #96]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022b0:	4a0f      	ldr	r2, [pc, #60]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3301      	adds	r3, #1
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	2b0f      	cmp	r3, #15
 80022c0:	f67f aea2 	bls.w	8002008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	3724      	adds	r7, #36	@ 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40013800 	.word	0x40013800
 80022dc:	40020000 	.word	0x40020000
 80022e0:	40020400 	.word	0x40020400
 80022e4:	40020800 	.word	0x40020800
 80022e8:	40020c00 	.word	0x40020c00
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40013c00 	.word	0x40013c00

080022f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	887b      	ldrh	r3, [r7, #2]
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800230c:	2301      	movs	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	e001      	b.n	8002316 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002316:	7bfb      	ldrb	r3, [r7, #15]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
 8002330:	4613      	mov	r3, r2
 8002332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002334:	787b      	ldrb	r3, [r7, #1]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002340:	e003      	b.n	800234a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	041a      	lsls	r2, r3, #16
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	619a      	str	r2, [r3, #24]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002356:	b480      	push	{r7}
 8002358:	b085      	sub	sp, #20
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	460b      	mov	r3, r1
 8002360:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002368:	887a      	ldrh	r2, [r7, #2]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4013      	ands	r3, r2
 800236e:	041a      	lsls	r2, r3, #16
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	43d9      	mvns	r1, r3
 8002374:	887b      	ldrh	r3, [r7, #2]
 8002376:	400b      	ands	r3, r1
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	619a      	str	r2, [r3, #24]
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e267      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d075      	beq.n	8002496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023aa:	4b88      	ldr	r3, [pc, #544]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d00c      	beq.n	80023d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b6:	4b85      	ldr	r3, [pc, #532]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d112      	bne.n	80023e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c2:	4b82      	ldr	r3, [pc, #520]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023ce:	d10b      	bne.n	80023e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d0:	4b7e      	ldr	r3, [pc, #504]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d05b      	beq.n	8002494 <HAL_RCC_OscConfig+0x108>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d157      	bne.n	8002494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e242      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023f0:	d106      	bne.n	8002400 <HAL_RCC_OscConfig+0x74>
 80023f2:	4b76      	ldr	r3, [pc, #472]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a75      	ldr	r2, [pc, #468]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e01d      	b.n	800243c <HAL_RCC_OscConfig+0xb0>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x98>
 800240a:	4b70      	ldr	r3, [pc, #448]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a6f      	ldr	r2, [pc, #444]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002410:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b6d      	ldr	r3, [pc, #436]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a6c      	ldr	r2, [pc, #432]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 800241c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e00b      	b.n	800243c <HAL_RCC_OscConfig+0xb0>
 8002424:	4b69      	ldr	r3, [pc, #420]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a68      	ldr	r2, [pc, #416]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 800242a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b66      	ldr	r3, [pc, #408]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a65      	ldr	r2, [pc, #404]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002436:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800243a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d013      	beq.n	800246c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7ff fcc0 	bl	8001dc8 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800244c:	f7ff fcbc 	bl	8001dc8 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	@ 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e207      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	4b5b      	ldr	r3, [pc, #364]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0xc0>
 800246a:	e014      	b.n	8002496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7ff fcac 	bl	8001dc8 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002474:	f7ff fca8 	bl	8001dc8 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	@ 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e1f3      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002486:	4b51      	ldr	r3, [pc, #324]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0xe8>
 8002492:	e000      	b.n	8002496 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d063      	beq.n	800256a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024a2:	4b4a      	ldr	r3, [pc, #296]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00b      	beq.n	80024c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ae:	4b47      	ldr	r3, [pc, #284]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d11c      	bne.n	80024f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ba:	4b44      	ldr	r3, [pc, #272]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d116      	bne.n	80024f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c6:	4b41      	ldr	r3, [pc, #260]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <HAL_RCC_OscConfig+0x152>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d001      	beq.n	80024de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e1c7      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024de:	4b3b      	ldr	r3, [pc, #236]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4937      	ldr	r1, [pc, #220]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f2:	e03a      	b.n	800256a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d020      	beq.n	800253e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024fc:	4b34      	ldr	r3, [pc, #208]	@ (80025d0 <HAL_RCC_OscConfig+0x244>)
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002502:	f7ff fc61 	bl	8001dc8 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800250a:	f7ff fc5d 	bl	8001dc8 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e1a8      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251c:	4b2b      	ldr	r3, [pc, #172]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002528:	4b28      	ldr	r3, [pc, #160]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4925      	ldr	r1, [pc, #148]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002538:	4313      	orrs	r3, r2
 800253a:	600b      	str	r3, [r1, #0]
 800253c:	e015      	b.n	800256a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800253e:	4b24      	ldr	r3, [pc, #144]	@ (80025d0 <HAL_RCC_OscConfig+0x244>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7ff fc40 	bl	8001dc8 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254c:	f7ff fc3c 	bl	8001dc8 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e187      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255e:	4b1b      	ldr	r3, [pc, #108]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d036      	beq.n	80025e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d016      	beq.n	80025ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800257e:	4b15      	ldr	r3, [pc, #84]	@ (80025d4 <HAL_RCC_OscConfig+0x248>)
 8002580:	2201      	movs	r2, #1
 8002582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002584:	f7ff fc20 	bl	8001dc8 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258c:	f7ff fc1c 	bl	8001dc8 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e167      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259e:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80025a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x200>
 80025aa:	e01b      	b.n	80025e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ac:	4b09      	ldr	r3, [pc, #36]	@ (80025d4 <HAL_RCC_OscConfig+0x248>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b2:	f7ff fc09 	bl	8001dc8 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b8:	e00e      	b.n	80025d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ba:	f7ff fc05 	bl	8001dc8 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d907      	bls.n	80025d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e150      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
 80025cc:	40023800 	.word	0x40023800
 80025d0:	42470000 	.word	0x42470000
 80025d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d8:	4b88      	ldr	r3, [pc, #544]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 80025da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1ea      	bne.n	80025ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 8097 	beq.w	8002720 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f6:	4b81      	ldr	r3, [pc, #516]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10f      	bne.n	8002622 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	4b7d      	ldr	r3, [pc, #500]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	4a7c      	ldr	r2, [pc, #496]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002610:	6413      	str	r3, [r2, #64]	@ 0x40
 8002612:	4b7a      	ldr	r3, [pc, #488]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800261e:	2301      	movs	r3, #1
 8002620:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002622:	4b77      	ldr	r3, [pc, #476]	@ (8002800 <HAL_RCC_OscConfig+0x474>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262a:	2b00      	cmp	r3, #0
 800262c:	d118      	bne.n	8002660 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800262e:	4b74      	ldr	r3, [pc, #464]	@ (8002800 <HAL_RCC_OscConfig+0x474>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a73      	ldr	r2, [pc, #460]	@ (8002800 <HAL_RCC_OscConfig+0x474>)
 8002634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263a:	f7ff fbc5 	bl	8001dc8 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002642:	f7ff fbc1 	bl	8001dc8 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e10c      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002654:	4b6a      	ldr	r3, [pc, #424]	@ (8002800 <HAL_RCC_OscConfig+0x474>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d106      	bne.n	8002676 <HAL_RCC_OscConfig+0x2ea>
 8002668:	4b64      	ldr	r3, [pc, #400]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800266a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266c:	4a63      	ldr	r2, [pc, #396]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6713      	str	r3, [r2, #112]	@ 0x70
 8002674:	e01c      	b.n	80026b0 <HAL_RCC_OscConfig+0x324>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b05      	cmp	r3, #5
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0x30c>
 800267e:	4b5f      	ldr	r3, [pc, #380]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002682:	4a5e      	ldr	r2, [pc, #376]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002684:	f043 0304 	orr.w	r3, r3, #4
 8002688:	6713      	str	r3, [r2, #112]	@ 0x70
 800268a:	4b5c      	ldr	r3, [pc, #368]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268e:	4a5b      	ldr	r2, [pc, #364]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6713      	str	r3, [r2, #112]	@ 0x70
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0x324>
 8002698:	4b58      	ldr	r3, [pc, #352]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269c:	4a57      	ldr	r2, [pc, #348]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800269e:	f023 0301 	bic.w	r3, r3, #1
 80026a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026a4:	4b55      	ldr	r3, [pc, #340]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a8:	4a54      	ldr	r2, [pc, #336]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 80026aa:	f023 0304 	bic.w	r3, r3, #4
 80026ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d015      	beq.n	80026e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b8:	f7ff fb86 	bl	8001dc8 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026be:	e00a      	b.n	80026d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c0:	f7ff fb82 	bl	8001dc8 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e0cb      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d6:	4b49      	ldr	r3, [pc, #292]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0ee      	beq.n	80026c0 <HAL_RCC_OscConfig+0x334>
 80026e2:	e014      	b.n	800270e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e4:	f7ff fb70 	bl	8001dc8 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ec:	f7ff fb6c 	bl	8001dc8 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e0b5      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002702:	4b3e      	ldr	r3, [pc, #248]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1ee      	bne.n	80026ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800270e:	7dfb      	ldrb	r3, [r7, #23]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d105      	bne.n	8002720 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002714:	4b39      	ldr	r3, [pc, #228]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002718:	4a38      	ldr	r2, [pc, #224]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800271a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800271e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80a1 	beq.w	800286c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800272a:	4b34      	ldr	r3, [pc, #208]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b08      	cmp	r3, #8
 8002734:	d05c      	beq.n	80027f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d141      	bne.n	80027c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273e:	4b31      	ldr	r3, [pc, #196]	@ (8002804 <HAL_RCC_OscConfig+0x478>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7ff fb40 	bl	8001dc8 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274c:	f7ff fb3c 	bl	8001dc8 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e087      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275e:	4b27      	ldr	r3, [pc, #156]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69da      	ldr	r2, [r3, #28]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002778:	019b      	lsls	r3, r3, #6
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002780:	085b      	lsrs	r3, r3, #1
 8002782:	3b01      	subs	r3, #1
 8002784:	041b      	lsls	r3, r3, #16
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278c:	061b      	lsls	r3, r3, #24
 800278e:	491b      	ldr	r1, [pc, #108]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002794:	4b1b      	ldr	r3, [pc, #108]	@ (8002804 <HAL_RCC_OscConfig+0x478>)
 8002796:	2201      	movs	r2, #1
 8002798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279a:	f7ff fb15 	bl	8001dc8 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a2:	f7ff fb11 	bl	8001dc8 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e05c      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b4:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x416>
 80027c0:	e054      	b.n	800286c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c2:	4b10      	ldr	r3, [pc, #64]	@ (8002804 <HAL_RCC_OscConfig+0x478>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7ff fafe 	bl	8001dc8 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d0:	f7ff fafa 	bl	8001dc8 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e045      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e2:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x444>
 80027ee:	e03d      	b.n	800286c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d107      	bne.n	8002808 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e038      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
 80027fc:	40023800 	.word	0x40023800
 8002800:	40007000 	.word	0x40007000
 8002804:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002808:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <HAL_RCC_OscConfig+0x4ec>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d028      	beq.n	8002868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d121      	bne.n	8002868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282e:	429a      	cmp	r2, r3
 8002830:	d11a      	bne.n	8002868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002838:	4013      	ands	r3, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800283e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002840:	4293      	cmp	r3, r2
 8002842:	d111      	bne.n	8002868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284e:	085b      	lsrs	r3, r3, #1
 8002850:	3b01      	subs	r3, #1
 8002852:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002854:	429a      	cmp	r2, r3
 8002856:	d107      	bne.n	8002868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002862:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d001      	beq.n	800286c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800

0800287c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0cc      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002890:	4b68      	ldr	r3, [pc, #416]	@ (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d90c      	bls.n	80028b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4b65      	ldr	r3, [pc, #404]	@ (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b63      	ldr	r3, [pc, #396]	@ (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0b8      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d020      	beq.n	8002906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028d0:	4b59      	ldr	r3, [pc, #356]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	4a58      	ldr	r2, [pc, #352]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028e8:	4b53      	ldr	r3, [pc, #332]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4a52      	ldr	r2, [pc, #328]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f4:	4b50      	ldr	r3, [pc, #320]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	494d      	ldr	r1, [pc, #308]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d044      	beq.n	800299c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d107      	bne.n	800292a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	4b47      	ldr	r3, [pc, #284]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d119      	bne.n	800295a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e07f      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d003      	beq.n	800293a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002936:	2b03      	cmp	r3, #3
 8002938:	d107      	bne.n	800294a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e06f      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e067      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800295a:	4b37      	ldr	r3, [pc, #220]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f023 0203 	bic.w	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4934      	ldr	r1, [pc, #208]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	4313      	orrs	r3, r2
 800296a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800296c:	f7ff fa2c 	bl	8001dc8 <HAL_GetTick>
 8002970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002972:	e00a      	b.n	800298a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002974:	f7ff fa28 	bl	8001dc8 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002982:	4293      	cmp	r3, r2
 8002984:	d901      	bls.n	800298a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e04f      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298a:	4b2b      	ldr	r3, [pc, #172]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 020c 	and.w	r2, r3, #12
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	429a      	cmp	r2, r3
 800299a:	d1eb      	bne.n	8002974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800299c:	4b25      	ldr	r3, [pc, #148]	@ (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d20c      	bcs.n	80029c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029aa:	4b22      	ldr	r3, [pc, #136]	@ (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b20      	ldr	r3, [pc, #128]	@ (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e032      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d0:	4b19      	ldr	r3, [pc, #100]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4916      	ldr	r1, [pc, #88]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ee:	4b12      	ldr	r3, [pc, #72]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	490e      	ldr	r1, [pc, #56]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a02:	f000 f821 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 8002a06:	4602      	mov	r2, r0
 8002a08:	4b0b      	ldr	r3, [pc, #44]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	490a      	ldr	r1, [pc, #40]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	5ccb      	ldrb	r3, [r1, r3]
 8002a16:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1a:	4a09      	ldr	r2, [pc, #36]	@ (8002a40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a1e:	4b09      	ldr	r3, [pc, #36]	@ (8002a44 <HAL_RCC_ClockConfig+0x1c8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff f886 	bl	8001b34 <HAL_InitTick>

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40023c00 	.word	0x40023c00
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	08006928 	.word	0x08006928
 8002a40:	20000018 	.word	0x20000018
 8002a44:	2000001c 	.word	0x2000001c

08002a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a4c:	b090      	sub	sp, #64	@ 0x40
 8002a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a60:	4b59      	ldr	r3, [pc, #356]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 030c 	and.w	r3, r3, #12
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d00d      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x40>
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	f200 80a1 	bhi.w	8002bb4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0x34>
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d003      	beq.n	8002a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a7a:	e09b      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a7c:	4b53      	ldr	r3, [pc, #332]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0x184>)
 8002a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a80:	e09b      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a82:	4b53      	ldr	r3, [pc, #332]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a86:	e098      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a88:	4b4f      	ldr	r3, [pc, #316]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a90:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a92:	4b4d      	ldr	r3, [pc, #308]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d028      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	099b      	lsrs	r3, r3, #6
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	623b      	str	r3, [r7, #32]
 8002aa8:	627a      	str	r2, [r7, #36]	@ 0x24
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4b47      	ldr	r3, [pc, #284]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ab4:	fb03 f201 	mul.w	r2, r3, r1
 8002ab8:	2300      	movs	r3, #0
 8002aba:	fb00 f303 	mul.w	r3, r0, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	4a43      	ldr	r2, [pc, #268]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ac2:	fba0 1202 	umull	r1, r2, r0, r2
 8002ac6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ac8:	460a      	mov	r2, r1
 8002aca:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002acc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ace:	4413      	add	r3, r2
 8002ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	61bb      	str	r3, [r7, #24]
 8002ad8:	61fa      	str	r2, [r7, #28]
 8002ada:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ade:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002ae2:	f7fd fbcd 	bl	8000280 <__aeabi_uldivmod>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4613      	mov	r3, r2
 8002aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002aee:	e053      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af0:	4b35      	ldr	r3, [pc, #212]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	099b      	lsrs	r3, r3, #6
 8002af6:	2200      	movs	r2, #0
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	617a      	str	r2, [r7, #20]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b02:	f04f 0b00 	mov.w	fp, #0
 8002b06:	4652      	mov	r2, sl
 8002b08:	465b      	mov	r3, fp
 8002b0a:	f04f 0000 	mov.w	r0, #0
 8002b0e:	f04f 0100 	mov.w	r1, #0
 8002b12:	0159      	lsls	r1, r3, #5
 8002b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b18:	0150      	lsls	r0, r2, #5
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	ebb2 080a 	subs.w	r8, r2, sl
 8002b22:	eb63 090b 	sbc.w	r9, r3, fp
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b3a:	ebb2 0408 	subs.w	r4, r2, r8
 8002b3e:	eb63 0509 	sbc.w	r5, r3, r9
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	f04f 0300 	mov.w	r3, #0
 8002b4a:	00eb      	lsls	r3, r5, #3
 8002b4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b50:	00e2      	lsls	r2, r4, #3
 8002b52:	4614      	mov	r4, r2
 8002b54:	461d      	mov	r5, r3
 8002b56:	eb14 030a 	adds.w	r3, r4, sl
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	eb45 030b 	adc.w	r3, r5, fp
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b6e:	4629      	mov	r1, r5
 8002b70:	028b      	lsls	r3, r1, #10
 8002b72:	4621      	mov	r1, r4
 8002b74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b78:	4621      	mov	r1, r4
 8002b7a:	028a      	lsls	r2, r1, #10
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b82:	2200      	movs	r2, #0
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	60fa      	str	r2, [r7, #12]
 8002b88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b8c:	f7fd fb78 	bl	8000280 <__aeabi_uldivmod>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4613      	mov	r3, r2
 8002b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b98:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002ba8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bb2:	e002      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bb4:	4b05      	ldr	r3, [pc, #20]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0x184>)
 8002bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3740      	adds	r7, #64	@ 0x40
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	00f42400 	.word	0x00f42400
 8002bd0:	017d7840 	.word	0x017d7840

08002bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd8:	4b03      	ldr	r3, [pc, #12]	@ (8002be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20000018 	.word	0x20000018

08002bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bf0:	f7ff fff0 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b05      	ldr	r3, [pc, #20]	@ (8002c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	0b5b      	lsrs	r3, r3, #13
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4903      	ldr	r1, [pc, #12]	@ (8002c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c02:	5ccb      	ldrb	r3, [r1, r3]
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	08006938 	.word	0x08006938

08002c14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	220f      	movs	r2, #15
 8002c22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c24:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <HAL_RCC_GetClockConfig+0x5c>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0203 	and.w	r2, r3, #3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c30:	4b0f      	ldr	r3, [pc, #60]	@ (8002c70 <HAL_RCC_GetClockConfig+0x5c>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c70 <HAL_RCC_GetClockConfig+0x5c>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c48:	4b09      	ldr	r3, [pc, #36]	@ (8002c70 <HAL_RCC_GetClockConfig+0x5c>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	08db      	lsrs	r3, r3, #3
 8002c4e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c56:	4b07      	ldr	r3, [pc, #28]	@ (8002c74 <HAL_RCC_GetClockConfig+0x60>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0207 	and.w	r2, r3, #7
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	601a      	str	r2, [r3, #0]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40023c00 	.word	0x40023c00

08002c78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e07b      	b.n	8002d82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d108      	bne.n	8002ca4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c9a:	d009      	beq.n	8002cb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	61da      	str	r2, [r3, #28]
 8002ca2:	e005      	b.n	8002cb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fe fe6a 	bl	80019a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ce6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d34:	ea42 0103 	orr.w	r1, r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	0c1b      	lsrs	r3, r3, #16
 8002d4e:	f003 0104 	and.w	r1, r3, #4
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d56:	f003 0210 	and.w	r2, r3, #16
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69da      	ldr	r2, [r3, #28]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b088      	sub	sp, #32
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	4613      	mov	r3, r2
 8002d98:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d9a:	f7ff f815 	bl	8001dc8 <HAL_GetTick>
 8002d9e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d001      	beq.n	8002db4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
 8002db2:	e12a      	b.n	800300a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_SPI_Transmit+0x36>
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e122      	b.n	800300a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_SPI_Transmit+0x48>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e11b      	b.n	800300a <HAL_SPI_Transmit+0x280>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2203      	movs	r2, #3
 8002dde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	88fa      	ldrh	r2, [r7, #6]
 8002df2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	88fa      	ldrh	r2, [r7, #6]
 8002df8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e20:	d10f      	bne.n	8002e42 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e4c:	2b40      	cmp	r3, #64	@ 0x40
 8002e4e:	d007      	beq.n	8002e60 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e68:	d152      	bne.n	8002f10 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <HAL_SPI_Transmit+0xee>
 8002e72:	8b7b      	ldrh	r3, [r7, #26]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d145      	bne.n	8002f04 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7c:	881a      	ldrh	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	1c9a      	adds	r2, r3, #2
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e9c:	e032      	b.n	8002f04 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d112      	bne.n	8002ed2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb0:	881a      	ldrh	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebc:	1c9a      	adds	r2, r3, #2
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ed0:	e018      	b.n	8002f04 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ed2:	f7fe ff79 	bl	8001dc8 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d803      	bhi.n	8002eea <HAL_SPI_Transmit+0x160>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d102      	bne.n	8002ef0 <HAL_SPI_Transmit+0x166>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d109      	bne.n	8002f04 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e082      	b.n	800300a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1c7      	bne.n	8002e9e <HAL_SPI_Transmit+0x114>
 8002f0e:	e053      	b.n	8002fb8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <HAL_SPI_Transmit+0x194>
 8002f18:	8b7b      	ldrh	r3, [r7, #26]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d147      	bne.n	8002fae <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	330c      	adds	r3, #12
 8002f28:	7812      	ldrb	r2, [r2, #0]
 8002f2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f44:	e033      	b.n	8002fae <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d113      	bne.n	8002f7c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	330c      	adds	r3, #12
 8002f5e:	7812      	ldrb	r2, [r2, #0]
 8002f60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002f7a:	e018      	b.n	8002fae <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f7c:	f7fe ff24 	bl	8001dc8 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d803      	bhi.n	8002f94 <HAL_SPI_Transmit+0x20a>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f92:	d102      	bne.n	8002f9a <HAL_SPI_Transmit+0x210>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e02d      	b.n	800300a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1c6      	bne.n	8002f46 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	6839      	ldr	r1, [r7, #0]
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 fbd9 	bl	8003774 <SPI_EndRxTxTransaction>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10a      	bne.n	8002fec <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003008:	2300      	movs	r3, #0
  }
}
 800300a:	4618      	mov	r0, r3
 800300c:	3720      	adds	r7, #32
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b088      	sub	sp, #32
 8003016:	af02      	add	r7, sp, #8
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	4613      	mov	r3, r2
 8003020:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b01      	cmp	r3, #1
 800302c:	d001      	beq.n	8003032 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800302e:	2302      	movs	r3, #2
 8003030:	e104      	b.n	800323c <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <HAL_SPI_Receive+0x2c>
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e0fc      	b.n	800323c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800304a:	d112      	bne.n	8003072 <HAL_SPI_Receive+0x60>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10e      	bne.n	8003072 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2204      	movs	r2, #4
 8003058:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800305c:	88fa      	ldrh	r2, [r7, #6]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	4613      	mov	r3, r2
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	68b9      	ldr	r1, [r7, #8]
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 f8eb 	bl	8003244 <HAL_SPI_TransmitReceive>
 800306e:	4603      	mov	r3, r0
 8003070:	e0e4      	b.n	800323c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003072:	f7fe fea9 	bl	8001dc8 <HAL_GetTick>
 8003076:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_SPI_Receive+0x74>
 8003082:	2302      	movs	r3, #2
 8003084:	e0da      	b.n	800323c <HAL_SPI_Receive+0x22a>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2204      	movs	r2, #4
 8003092:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	88fa      	ldrh	r2, [r7, #6]
 80030a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	88fa      	ldrh	r2, [r7, #6]
 80030ac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030d4:	d10f      	bne.n	80030f6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80030f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003100:	2b40      	cmp	r3, #64	@ 0x40
 8003102:	d007      	beq.n	8003114 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003112:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d170      	bne.n	80031fe <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800311c:	e035      	b.n	800318a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b01      	cmp	r3, #1
 800312a:	d115      	bne.n	8003158 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f103 020c 	add.w	r2, r3, #12
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003138:	7812      	ldrb	r2, [r2, #0]
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003156:	e018      	b.n	800318a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003158:	f7fe fe36 	bl	8001dc8 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d803      	bhi.n	8003170 <HAL_SPI_Receive+0x15e>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316e:	d102      	bne.n	8003176 <HAL_SPI_Receive+0x164>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e058      	b.n	800323c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1c4      	bne.n	800311e <HAL_SPI_Receive+0x10c>
 8003194:	e038      	b.n	8003208 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d113      	bne.n	80031cc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ae:	b292      	uxth	r2, r2
 80031b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b6:	1c9a      	adds	r2, r3, #2
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031ca:	e018      	b.n	80031fe <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031cc:	f7fe fdfc 	bl	8001dc8 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d803      	bhi.n	80031e4 <HAL_SPI_Receive+0x1d2>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e2:	d102      	bne.n	80031ea <HAL_SPI_Receive+0x1d8>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e01e      	b.n	800323c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1c6      	bne.n	8003196 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	6839      	ldr	r1, [r7, #0]
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 fa4b 	bl	80036a8 <SPI_EndRxTransaction>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800323a:	2300      	movs	r3, #0
  }
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08a      	sub	sp, #40	@ 0x28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003252:	2301      	movs	r3, #1
 8003254:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003256:	f7fe fdb7 	bl	8001dc8 <HAL_GetTick>
 800325a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003262:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800326a:	887b      	ldrh	r3, [r7, #2]
 800326c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800326e:	7ffb      	ldrb	r3, [r7, #31]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d00c      	beq.n	800328e <HAL_SPI_TransmitReceive+0x4a>
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800327a:	d106      	bne.n	800328a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d102      	bne.n	800328a <HAL_SPI_TransmitReceive+0x46>
 8003284:	7ffb      	ldrb	r3, [r7, #31]
 8003286:	2b04      	cmp	r3, #4
 8003288:	d001      	beq.n	800328e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800328a:	2302      	movs	r3, #2
 800328c:	e17f      	b.n	800358e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_SPI_TransmitReceive+0x5c>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <HAL_SPI_TransmitReceive+0x5c>
 800329a:	887b      	ldrh	r3, [r7, #2]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e174      	b.n	800358e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x6e>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e16d      	b.n	800358e <HAL_SPI_TransmitReceive+0x34a>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d003      	beq.n	80032ce <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2205      	movs	r2, #5
 80032ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	887a      	ldrh	r2, [r7, #2]
 80032de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	887a      	ldrh	r2, [r7, #2]
 80032e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	887a      	ldrh	r2, [r7, #2]
 80032f0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	887a      	ldrh	r2, [r7, #2]
 80032f6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800330e:	2b40      	cmp	r3, #64	@ 0x40
 8003310:	d007      	beq.n	8003322 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003320:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800332a:	d17e      	bne.n	800342a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <HAL_SPI_TransmitReceive+0xf6>
 8003334:	8afb      	ldrh	r3, [r7, #22]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d16c      	bne.n	8003414 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333e:	881a      	ldrh	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	1c9a      	adds	r2, r3, #2
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800335e:	e059      	b.n	8003414 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b02      	cmp	r3, #2
 800336c:	d11b      	bne.n	80033a6 <HAL_SPI_TransmitReceive+0x162>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d016      	beq.n	80033a6 <HAL_SPI_TransmitReceive+0x162>
 8003378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337a:	2b01      	cmp	r3, #1
 800337c:	d113      	bne.n	80033a6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	881a      	ldrh	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	1c9a      	adds	r2, r3, #2
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d119      	bne.n	80033e8 <HAL_SPI_TransmitReceive+0x1a4>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d014      	beq.n	80033e8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c8:	b292      	uxth	r2, r2
 80033ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d0:	1c9a      	adds	r2, r3, #2
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033e4:	2301      	movs	r3, #1
 80033e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033e8:	f7fe fcee 	bl	8001dc8 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d80d      	bhi.n	8003414 <HAL_SPI_TransmitReceive+0x1d0>
 80033f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fe:	d009      	beq.n	8003414 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e0bc      	b.n	800358e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1a0      	bne.n	8003360 <HAL_SPI_TransmitReceive+0x11c>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d19b      	bne.n	8003360 <HAL_SPI_TransmitReceive+0x11c>
 8003428:	e082      	b.n	8003530 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <HAL_SPI_TransmitReceive+0x1f4>
 8003432:	8afb      	ldrh	r3, [r7, #22]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d171      	bne.n	800351c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	330c      	adds	r3, #12
 8003442:	7812      	ldrb	r2, [r2, #0]
 8003444:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800345e:	e05d      	b.n	800351c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b02      	cmp	r3, #2
 800346c:	d11c      	bne.n	80034a8 <HAL_SPI_TransmitReceive+0x264>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d017      	beq.n	80034a8 <HAL_SPI_TransmitReceive+0x264>
 8003478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347a:	2b01      	cmp	r3, #1
 800347c:	d114      	bne.n	80034a8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	330c      	adds	r3, #12
 8003488:	7812      	ldrb	r2, [r2, #0]
 800348a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d119      	bne.n	80034ea <HAL_SPI_TransmitReceive+0x2a6>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d014      	beq.n	80034ea <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034e6:	2301      	movs	r3, #1
 80034e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034ea:	f7fe fc6d 	bl	8001dc8 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d803      	bhi.n	8003502 <HAL_SPI_TransmitReceive+0x2be>
 80034fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003500:	d102      	bne.n	8003508 <HAL_SPI_TransmitReceive+0x2c4>
 8003502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003504:	2b00      	cmp	r3, #0
 8003506:	d109      	bne.n	800351c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e038      	b.n	800358e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003520:	b29b      	uxth	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d19c      	bne.n	8003460 <HAL_SPI_TransmitReceive+0x21c>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800352a:	b29b      	uxth	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d197      	bne.n	8003460 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003530:	6a3a      	ldr	r2, [r7, #32]
 8003532:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f91d 	bl	8003774 <SPI_EndRxTxTransaction>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e01d      	b.n	800358e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10a      	bne.n	8003570 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800355a:	2300      	movs	r3, #0
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800358c:	2300      	movs	r3, #0
  }
}
 800358e:	4618      	mov	r0, r3
 8003590:	3728      	adds	r7, #40	@ 0x28
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	4613      	mov	r3, r2
 80035a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035a8:	f7fe fc0e 	bl	8001dc8 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	4413      	add	r3, r2
 80035b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035b8:	f7fe fc06 	bl	8001dc8 <HAL_GetTick>
 80035bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035be:	4b39      	ldr	r3, [pc, #228]	@ (80036a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	015b      	lsls	r3, r3, #5
 80035c4:	0d1b      	lsrs	r3, r3, #20
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	fb02 f303 	mul.w	r3, r2, r3
 80035cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035ce:	e055      	b.n	800367c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d6:	d051      	beq.n	800367c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035d8:	f7fe fbf6 	bl	8001dc8 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	69fa      	ldr	r2, [r7, #28]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d902      	bls.n	80035ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d13d      	bne.n	800366a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003606:	d111      	bne.n	800362c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003610:	d004      	beq.n	800361c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800361a:	d107      	bne.n	800362c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800362a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003634:	d10f      	bne.n	8003656 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003654:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e018      	b.n	800369c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d102      	bne.n	8003676 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	e002      	b.n	800367c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	3b01      	subs	r3, #1
 800367a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	4013      	ands	r3, r2
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	429a      	cmp	r2, r3
 800368a:	bf0c      	ite	eq
 800368c:	2301      	moveq	r3, #1
 800368e:	2300      	movne	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	429a      	cmp	r2, r3
 8003698:	d19a      	bne.n	80035d0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20000018 	.word	0x20000018

080036a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036bc:	d111      	bne.n	80036e2 <SPI_EndRxTransaction+0x3a>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036c6:	d004      	beq.n	80036d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036d0:	d107      	bne.n	80036e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036e0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036ea:	d12a      	bne.n	8003742 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036f4:	d012      	beq.n	800371c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2200      	movs	r2, #0
 80036fe:	2180      	movs	r1, #128	@ 0x80
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f7ff ff49 	bl	8003598 <SPI_WaitFlagStateUntilTimeout>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d02d      	beq.n	8003768 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003710:	f043 0220 	orr.w	r2, r3, #32
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e026      	b.n	800376a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2200      	movs	r2, #0
 8003724:	2101      	movs	r1, #1
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f7ff ff36 	bl	8003598 <SPI_WaitFlagStateUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d01a      	beq.n	8003768 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003736:	f043 0220 	orr.w	r2, r3, #32
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e013      	b.n	800376a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2200      	movs	r2, #0
 800374a:	2101      	movs	r1, #1
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f7ff ff23 	bl	8003598 <SPI_WaitFlagStateUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d007      	beq.n	8003768 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e000      	b.n	800376a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af02      	add	r7, sp, #8
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2201      	movs	r2, #1
 8003788:	2102      	movs	r1, #2
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f7ff ff04 	bl	8003598 <SPI_WaitFlagStateUntilTimeout>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d007      	beq.n	80037a6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379a:	f043 0220 	orr.w	r2, r3, #32
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e032      	b.n	800380c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80037a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003814 <SPI_EndRxTxTransaction+0xa0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003818 <SPI_EndRxTxTransaction+0xa4>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	0d5b      	lsrs	r3, r3, #21
 80037b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80037b6:	fb02 f303 	mul.w	r3, r2, r3
 80037ba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037c4:	d112      	bne.n	80037ec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2200      	movs	r2, #0
 80037ce:	2180      	movs	r1, #128	@ 0x80
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f7ff fee1 	bl	8003598 <SPI_WaitFlagStateUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d016      	beq.n	800380a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e0:	f043 0220 	orr.w	r2, r3, #32
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e00f      	b.n	800380c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	3b01      	subs	r3, #1
 80037f6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003802:	2b80      	cmp	r3, #128	@ 0x80
 8003804:	d0f2      	beq.n	80037ec <SPI_EndRxTxTransaction+0x78>
 8003806:	e000      	b.n	800380a <SPI_EndRxTxTransaction+0x96>
        break;
 8003808:	bf00      	nop
  }

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	20000018 	.word	0x20000018
 8003818:	165e9f81 	.word	0x165e9f81

0800381c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e041      	b.n	80038b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fe f916 	bl	8001a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f000 fc32 	bl	80040c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d001      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e044      	b.n	800395e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a1e      	ldr	r2, [pc, #120]	@ (800396c <HAL_TIM_Base_Start_IT+0xb0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d018      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0x6c>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038fe:	d013      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0x6c>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1a      	ldr	r2, [pc, #104]	@ (8003970 <HAL_TIM_Base_Start_IT+0xb4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00e      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0x6c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a19      	ldr	r2, [pc, #100]	@ (8003974 <HAL_TIM_Base_Start_IT+0xb8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d009      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0x6c>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a17      	ldr	r2, [pc, #92]	@ (8003978 <HAL_TIM_Base_Start_IT+0xbc>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d004      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0x6c>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a16      	ldr	r2, [pc, #88]	@ (800397c <HAL_TIM_Base_Start_IT+0xc0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d111      	bne.n	800394c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b06      	cmp	r3, #6
 8003938:	d010      	beq.n	800395c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0201 	orr.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800394a:	e007      	b.n	800395c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40010000 	.word	0x40010000
 8003970:	40000400 	.word	0x40000400
 8003974:	40000800 	.word	0x40000800
 8003978:	40000c00 	.word	0x40000c00
 800397c:	40014000 	.word	0x40014000

08003980 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e041      	b.n	8003a16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fe f844 	bl	8001a34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3304      	adds	r3, #4
 80039bc:	4619      	mov	r1, r3
 80039be:	4610      	mov	r0, r2
 80039c0:	f000 fb80 	bl	80040c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d109      	bne.n	8003a44 <HAL_TIM_PWM_Start+0x24>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	bf14      	ite	ne
 8003a3c:	2301      	movne	r3, #1
 8003a3e:	2300      	moveq	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	e022      	b.n	8003a8a <HAL_TIM_PWM_Start+0x6a>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d109      	bne.n	8003a5e <HAL_TIM_PWM_Start+0x3e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	bf14      	ite	ne
 8003a56:	2301      	movne	r3, #1
 8003a58:	2300      	moveq	r3, #0
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	e015      	b.n	8003a8a <HAL_TIM_PWM_Start+0x6a>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d109      	bne.n	8003a78 <HAL_TIM_PWM_Start+0x58>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	bf14      	ite	ne
 8003a70:	2301      	movne	r3, #1
 8003a72:	2300      	moveq	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	e008      	b.n	8003a8a <HAL_TIM_PWM_Start+0x6a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	bf14      	ite	ne
 8003a84:	2301      	movne	r3, #1
 8003a86:	2300      	moveq	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e068      	b.n	8003b64 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d104      	bne.n	8003aa2 <HAL_TIM_PWM_Start+0x82>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003aa0:	e013      	b.n	8003aca <HAL_TIM_PWM_Start+0xaa>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d104      	bne.n	8003ab2 <HAL_TIM_PWM_Start+0x92>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ab0:	e00b      	b.n	8003aca <HAL_TIM_PWM_Start+0xaa>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d104      	bne.n	8003ac2 <HAL_TIM_PWM_Start+0xa2>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ac0:	e003      	b.n	8003aca <HAL_TIM_PWM_Start+0xaa>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	6839      	ldr	r1, [r7, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fda2 	bl	800461c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a23      	ldr	r2, [pc, #140]	@ (8003b6c <HAL_TIM_PWM_Start+0x14c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d107      	bne.n	8003af2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003af0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1d      	ldr	r2, [pc, #116]	@ (8003b6c <HAL_TIM_PWM_Start+0x14c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d018      	beq.n	8003b2e <HAL_TIM_PWM_Start+0x10e>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b04:	d013      	beq.n	8003b2e <HAL_TIM_PWM_Start+0x10e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a19      	ldr	r2, [pc, #100]	@ (8003b70 <HAL_TIM_PWM_Start+0x150>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00e      	beq.n	8003b2e <HAL_TIM_PWM_Start+0x10e>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a17      	ldr	r2, [pc, #92]	@ (8003b74 <HAL_TIM_PWM_Start+0x154>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d009      	beq.n	8003b2e <HAL_TIM_PWM_Start+0x10e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a16      	ldr	r2, [pc, #88]	@ (8003b78 <HAL_TIM_PWM_Start+0x158>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d004      	beq.n	8003b2e <HAL_TIM_PWM_Start+0x10e>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a14      	ldr	r2, [pc, #80]	@ (8003b7c <HAL_TIM_PWM_Start+0x15c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d111      	bne.n	8003b52 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2b06      	cmp	r3, #6
 8003b3e:	d010      	beq.n	8003b62 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b50:	e007      	b.n	8003b62 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0201 	orr.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40010000 	.word	0x40010000
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40000800 	.word	0x40000800
 8003b78:	40000c00 	.word	0x40000c00
 8003b7c:	40014000 	.word	0x40014000

08003b80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d020      	beq.n	8003be4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d01b      	beq.n	8003be4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0202 	mvn.w	r2, #2
 8003bb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fa5b 	bl	8004086 <HAL_TIM_IC_CaptureCallback>
 8003bd0:	e005      	b.n	8003bde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fa4d 	bl	8004072 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fa5e 	bl	800409a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d020      	beq.n	8003c30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01b      	beq.n	8003c30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0204 	mvn.w	r2, #4
 8003c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2202      	movs	r2, #2
 8003c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fa35 	bl	8004086 <HAL_TIM_IC_CaptureCallback>
 8003c1c:	e005      	b.n	8003c2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fa27 	bl	8004072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fa38 	bl	800409a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d020      	beq.n	8003c7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d01b      	beq.n	8003c7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0208 	mvn.w	r2, #8
 8003c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2204      	movs	r2, #4
 8003c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fa0f 	bl	8004086 <HAL_TIM_IC_CaptureCallback>
 8003c68:	e005      	b.n	8003c76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fa01 	bl	8004072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fa12 	bl	800409a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d020      	beq.n	8003cc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01b      	beq.n	8003cc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0210 	mvn.w	r2, #16
 8003c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2208      	movs	r2, #8
 8003c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f9e9 	bl	8004086 <HAL_TIM_IC_CaptureCallback>
 8003cb4:	e005      	b.n	8003cc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f9db 	bl	8004072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f9ec 	bl	800409a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00c      	beq.n	8003cec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d007      	beq.n	8003cec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0201 	mvn.w	r2, #1
 8003ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fd fab8 	bl	800125c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00c      	beq.n	8003d10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d007      	beq.n	8003d10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fd24 	bl	8004758 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00c      	beq.n	8003d34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d007      	beq.n	8003d34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f9bd 	bl	80040ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00c      	beq.n	8003d58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d007      	beq.n	8003d58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0220 	mvn.w	r2, #32
 8003d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fcf6 	bl	8004744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d58:	bf00      	nop
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e0ae      	b.n	8003edc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b0c      	cmp	r3, #12
 8003d8a:	f200 809f 	bhi.w	8003ecc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d94:	08003dc9 	.word	0x08003dc9
 8003d98:	08003ecd 	.word	0x08003ecd
 8003d9c:	08003ecd 	.word	0x08003ecd
 8003da0:	08003ecd 	.word	0x08003ecd
 8003da4:	08003e09 	.word	0x08003e09
 8003da8:	08003ecd 	.word	0x08003ecd
 8003dac:	08003ecd 	.word	0x08003ecd
 8003db0:	08003ecd 	.word	0x08003ecd
 8003db4:	08003e4b 	.word	0x08003e4b
 8003db8:	08003ecd 	.word	0x08003ecd
 8003dbc:	08003ecd 	.word	0x08003ecd
 8003dc0:	08003ecd 	.word	0x08003ecd
 8003dc4:	08003e8b 	.word	0x08003e8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68b9      	ldr	r1, [r7, #8]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 f9fe 	bl	80041d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699a      	ldr	r2, [r3, #24]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0208 	orr.w	r2, r2, #8
 8003de2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699a      	ldr	r2, [r3, #24]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0204 	bic.w	r2, r2, #4
 8003df2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6999      	ldr	r1, [r3, #24]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	619a      	str	r2, [r3, #24]
      break;
 8003e06:	e064      	b.n	8003ed2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fa44 	bl	800429c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699a      	ldr	r2, [r3, #24]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699a      	ldr	r2, [r3, #24]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6999      	ldr	r1, [r3, #24]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	021a      	lsls	r2, r3, #8
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	619a      	str	r2, [r3, #24]
      break;
 8003e48:	e043      	b.n	8003ed2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68b9      	ldr	r1, [r7, #8]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fa8f 	bl	8004374 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	69da      	ldr	r2, [r3, #28]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0208 	orr.w	r2, r2, #8
 8003e64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	69da      	ldr	r2, [r3, #28]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0204 	bic.w	r2, r2, #4
 8003e74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69d9      	ldr	r1, [r3, #28]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	61da      	str	r2, [r3, #28]
      break;
 8003e88:	e023      	b.n	8003ed2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fad9 	bl	8004448 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69da      	ldr	r2, [r3, #28]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69d9      	ldr	r1, [r3, #28]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	021a      	lsls	r2, r3, #8
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	61da      	str	r2, [r3, #28]
      break;
 8003eca:	e002      	b.n	8003ed2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_TIM_ConfigClockSource+0x1c>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e0b4      	b.n	800406a <HAL_TIM_ConfigClockSource+0x186>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f38:	d03e      	beq.n	8003fb8 <HAL_TIM_ConfigClockSource+0xd4>
 8003f3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f3e:	f200 8087 	bhi.w	8004050 <HAL_TIM_ConfigClockSource+0x16c>
 8003f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f46:	f000 8086 	beq.w	8004056 <HAL_TIM_ConfigClockSource+0x172>
 8003f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f4e:	d87f      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x16c>
 8003f50:	2b70      	cmp	r3, #112	@ 0x70
 8003f52:	d01a      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0xa6>
 8003f54:	2b70      	cmp	r3, #112	@ 0x70
 8003f56:	d87b      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x16c>
 8003f58:	2b60      	cmp	r3, #96	@ 0x60
 8003f5a:	d050      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x11a>
 8003f5c:	2b60      	cmp	r3, #96	@ 0x60
 8003f5e:	d877      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x16c>
 8003f60:	2b50      	cmp	r3, #80	@ 0x50
 8003f62:	d03c      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0xfa>
 8003f64:	2b50      	cmp	r3, #80	@ 0x50
 8003f66:	d873      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x16c>
 8003f68:	2b40      	cmp	r3, #64	@ 0x40
 8003f6a:	d058      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x13a>
 8003f6c:	2b40      	cmp	r3, #64	@ 0x40
 8003f6e:	d86f      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x16c>
 8003f70:	2b30      	cmp	r3, #48	@ 0x30
 8003f72:	d064      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x15a>
 8003f74:	2b30      	cmp	r3, #48	@ 0x30
 8003f76:	d86b      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x16c>
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d060      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x15a>
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	d867      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x16c>
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d05c      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x15a>
 8003f84:	2b10      	cmp	r3, #16
 8003f86:	d05a      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x15a>
 8003f88:	e062      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f9a:	f000 fb1f 	bl	80045dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	609a      	str	r2, [r3, #8]
      break;
 8003fb6:	e04f      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fc8:	f000 fb08 	bl	80045dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fda:	609a      	str	r2, [r3, #8]
      break;
 8003fdc:	e03c      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fea:	461a      	mov	r2, r3
 8003fec:	f000 fa7c 	bl	80044e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2150      	movs	r1, #80	@ 0x50
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fad5 	bl	80045a6 <TIM_ITRx_SetConfig>
      break;
 8003ffc:	e02c      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800400a:	461a      	mov	r2, r3
 800400c:	f000 fa9b 	bl	8004546 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2160      	movs	r1, #96	@ 0x60
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fac5 	bl	80045a6 <TIM_ITRx_SetConfig>
      break;
 800401c:	e01c      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800402a:	461a      	mov	r2, r3
 800402c:	f000 fa5c 	bl	80044e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2140      	movs	r1, #64	@ 0x40
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fab5 	bl	80045a6 <TIM_ITRx_SetConfig>
      break;
 800403c:	e00c      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4619      	mov	r1, r3
 8004048:	4610      	mov	r0, r2
 800404a:	f000 faac 	bl	80045a6 <TIM_ITRx_SetConfig>
      break;
 800404e:	e003      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	73fb      	strb	r3, [r7, #15]
      break;
 8004054:	e000      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004056:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004068:	7bfb      	ldrb	r3, [r7, #15]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
	...

080040c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a37      	ldr	r2, [pc, #220]	@ (80041b4 <TIM_Base_SetConfig+0xf0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00f      	beq.n	80040fc <TIM_Base_SetConfig+0x38>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e2:	d00b      	beq.n	80040fc <TIM_Base_SetConfig+0x38>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a34      	ldr	r2, [pc, #208]	@ (80041b8 <TIM_Base_SetConfig+0xf4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d007      	beq.n	80040fc <TIM_Base_SetConfig+0x38>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a33      	ldr	r2, [pc, #204]	@ (80041bc <TIM_Base_SetConfig+0xf8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d003      	beq.n	80040fc <TIM_Base_SetConfig+0x38>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a32      	ldr	r2, [pc, #200]	@ (80041c0 <TIM_Base_SetConfig+0xfc>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d108      	bne.n	800410e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a28      	ldr	r2, [pc, #160]	@ (80041b4 <TIM_Base_SetConfig+0xf0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d01b      	beq.n	800414e <TIM_Base_SetConfig+0x8a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800411c:	d017      	beq.n	800414e <TIM_Base_SetConfig+0x8a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a25      	ldr	r2, [pc, #148]	@ (80041b8 <TIM_Base_SetConfig+0xf4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <TIM_Base_SetConfig+0x8a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a24      	ldr	r2, [pc, #144]	@ (80041bc <TIM_Base_SetConfig+0xf8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00f      	beq.n	800414e <TIM_Base_SetConfig+0x8a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a23      	ldr	r2, [pc, #140]	@ (80041c0 <TIM_Base_SetConfig+0xfc>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00b      	beq.n	800414e <TIM_Base_SetConfig+0x8a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a22      	ldr	r2, [pc, #136]	@ (80041c4 <TIM_Base_SetConfig+0x100>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d007      	beq.n	800414e <TIM_Base_SetConfig+0x8a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a21      	ldr	r2, [pc, #132]	@ (80041c8 <TIM_Base_SetConfig+0x104>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d003      	beq.n	800414e <TIM_Base_SetConfig+0x8a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a20      	ldr	r2, [pc, #128]	@ (80041cc <TIM_Base_SetConfig+0x108>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d108      	bne.n	8004160 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a0c      	ldr	r2, [pc, #48]	@ (80041b4 <TIM_Base_SetConfig+0xf0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d103      	bne.n	800418e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	691a      	ldr	r2, [r3, #16]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f043 0204 	orr.w	r2, r3, #4
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	601a      	str	r2, [r3, #0]
}
 80041a6:	bf00      	nop
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40010000 	.word	0x40010000
 80041b8:	40000400 	.word	0x40000400
 80041bc:	40000800 	.word	0x40000800
 80041c0:	40000c00 	.word	0x40000c00
 80041c4:	40014000 	.word	0x40014000
 80041c8:	40014400 	.word	0x40014400
 80041cc:	40014800 	.word	0x40014800

080041d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f023 0201 	bic.w	r2, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0303 	bic.w	r3, r3, #3
 8004206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f023 0302 	bic.w	r3, r3, #2
 8004218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a1c      	ldr	r2, [pc, #112]	@ (8004298 <TIM_OC1_SetConfig+0xc8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d10c      	bne.n	8004246 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f023 0308 	bic.w	r3, r3, #8
 8004232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f023 0304 	bic.w	r3, r3, #4
 8004244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a13      	ldr	r2, [pc, #76]	@ (8004298 <TIM_OC1_SetConfig+0xc8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d111      	bne.n	8004272 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800425c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	621a      	str	r2, [r3, #32]
}
 800428c:	bf00      	nop
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	40010000 	.word	0x40010000

0800429c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f023 0210 	bic.w	r2, r3, #16
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f023 0320 	bic.w	r3, r3, #32
 80042e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004370 <TIM_OC2_SetConfig+0xd4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d10d      	bne.n	8004318 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4313      	orrs	r3, r2
 800430e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004316:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a15      	ldr	r2, [pc, #84]	@ (8004370 <TIM_OC2_SetConfig+0xd4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d113      	bne.n	8004348 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800432e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	621a      	str	r2, [r3, #32]
}
 8004362:	bf00      	nop
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40010000 	.word	0x40010000

08004374 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 0303 	bic.w	r3, r3, #3
 80043aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004444 <TIM_OC3_SetConfig+0xd0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d10d      	bne.n	80043ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	021b      	lsls	r3, r3, #8
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a14      	ldr	r2, [pc, #80]	@ (8004444 <TIM_OC3_SetConfig+0xd0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d113      	bne.n	800441e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	621a      	str	r2, [r3, #32]
}
 8004438:	bf00      	nop
 800443a:	371c      	adds	r7, #28
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	40010000 	.word	0x40010000

08004448 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800447e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	021b      	lsls	r3, r3, #8
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4313      	orrs	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004492:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	031b      	lsls	r3, r3, #12
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a10      	ldr	r2, [pc, #64]	@ (80044e4 <TIM_OC4_SetConfig+0x9c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d109      	bne.n	80044bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	019b      	lsls	r3, r3, #6
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	621a      	str	r2, [r3, #32]
}
 80044d6:	bf00      	nop
 80044d8:	371c      	adds	r7, #28
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40010000 	.word	0x40010000

080044e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	f023 0201 	bic.w	r2, r3, #1
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f023 030a 	bic.w	r3, r3, #10
 8004524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4313      	orrs	r3, r2
 800452c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	621a      	str	r2, [r3, #32]
}
 800453a:	bf00      	nop
 800453c:	371c      	adds	r7, #28
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004546:	b480      	push	{r7}
 8004548:	b087      	sub	sp, #28
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	f023 0210 	bic.w	r2, r3, #16
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004570:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	031b      	lsls	r3, r3, #12
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004582:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	621a      	str	r2, [r3, #32]
}
 800459a:	bf00      	nop
 800459c:	371c      	adds	r7, #28
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b085      	sub	sp, #20
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f043 0307 	orr.w	r3, r3, #7
 80045c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	609a      	str	r2, [r3, #8]
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	021a      	lsls	r2, r3, #8
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	431a      	orrs	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4313      	orrs	r3, r2
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	609a      	str	r2, [r3, #8]
}
 8004610:	bf00      	nop
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f003 031f 	and.w	r3, r3, #31
 800462e:	2201      	movs	r2, #1
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a1a      	ldr	r2, [r3, #32]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	43db      	mvns	r3, r3
 800463e:	401a      	ands	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a1a      	ldr	r2, [r3, #32]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 031f 	and.w	r3, r3, #31
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	fa01 f303 	lsl.w	r3, r1, r3
 8004654:	431a      	orrs	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	621a      	str	r2, [r3, #32]
}
 800465a:	bf00      	nop
 800465c:	371c      	adds	r7, #28
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800467c:	2302      	movs	r3, #2
 800467e:	e050      	b.n	8004722 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a1c      	ldr	r2, [pc, #112]	@ (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d018      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046cc:	d013      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a18      	ldr	r2, [pc, #96]	@ (8004734 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00e      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a16      	ldr	r2, [pc, #88]	@ (8004738 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d009      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a15      	ldr	r2, [pc, #84]	@ (800473c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d004      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a13      	ldr	r2, [pc, #76]	@ (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d10c      	bne.n	8004710 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	4313      	orrs	r3, r2
 8004706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40010000 	.word	0x40010000
 8004734:	40000400 	.word	0x40000400
 8004738:	40000800 	.word	0x40000800
 800473c:	40000c00 	.word	0x40000c00
 8004740:	40014000 	.word	0x40014000

08004744 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	4603      	mov	r3, r0
 8004774:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800477a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800477e:	2b84      	cmp	r3, #132	@ 0x84
 8004780:	d005      	beq.n	800478e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004782:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4413      	add	r3, r2
 800478a:	3303      	adds	r3, #3
 800478c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800478e:	68fb      	ldr	r3, [r7, #12]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80047a0:	f000 fbc2 	bl	8004f28 <vTaskStartScheduler>
  
  return osOK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	bd80      	pop	{r7, pc}

080047aa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80047aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ac:	b089      	sub	sp, #36	@ 0x24
 80047ae:	af04      	add	r7, sp, #16
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d020      	beq.n	80047fe <osThreadCreate+0x54>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01c      	beq.n	80047fe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685c      	ldr	r4, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691e      	ldr	r6, [r3, #16]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff ffc8 	bl	800476c <makeFreeRtosPriority>
 80047dc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047e6:	9202      	str	r2, [sp, #8]
 80047e8:	9301      	str	r3, [sp, #4]
 80047ea:	9100      	str	r1, [sp, #0]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	4632      	mov	r2, r6
 80047f0:	4629      	mov	r1, r5
 80047f2:	4620      	mov	r0, r4
 80047f4:	f000 f9b2 	bl	8004b5c <xTaskCreateStatic>
 80047f8:	4603      	mov	r3, r0
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	e01c      	b.n	8004838 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685c      	ldr	r4, [r3, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800480a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff ffaa 	bl	800476c <makeFreeRtosPriority>
 8004818:	4602      	mov	r2, r0
 800481a:	f107 030c 	add.w	r3, r7, #12
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	9200      	str	r2, [sp, #0]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	4632      	mov	r2, r6
 8004826:	4629      	mov	r1, r5
 8004828:	4620      	mov	r0, r4
 800482a:	f000 f9f7 	bl	8004c1c <xTaskCreate>
 800482e:	4603      	mov	r3, r0
 8004830:	2b01      	cmp	r3, #1
 8004832:	d001      	beq.n	8004838 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004834:	2300      	movs	r3, #0
 8004836:	e000      	b.n	800483a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004838:	68fb      	ldr	r3, [r7, #12]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004842 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b084      	sub	sp, #16
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <osDelay+0x16>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	e000      	b.n	800485a <osDelay+0x18>
 8004858:	2301      	movs	r3, #1
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fb2e 	bl	8004ebc <vTaskDelay>
  
  return osOK;
 8004860:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f103 0208 	add.w	r2, r3, #8
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f04f 32ff 	mov.w	r2, #4294967295
 8004882:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f103 0208 	add.w	r2, r3, #8
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f103 0208 	add.w	r2, r3, #8
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	601a      	str	r2, [r3, #0]
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004922:	d103      	bne.n	800492c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	e00c      	b.n	8004946 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3308      	adds	r3, #8
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	e002      	b.n	800493a <vListInsert+0x2e>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	429a      	cmp	r2, r3
 8004944:	d2f6      	bcs.n	8004934 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	601a      	str	r2, [r3, #0]
}
 8004972:	bf00      	nop
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6892      	ldr	r2, [r2, #8]
 8004994:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6852      	ldr	r2, [r2, #4]
 800499e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d103      	bne.n	80049b2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	1e5a      	subs	r2, r3, #1
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
	...

080049d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10b      	bne.n	8004a00 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80049fa:	bf00      	nop
 80049fc:	bf00      	nop
 80049fe:	e7fd      	b.n	80049fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a00:	f000 ff9a 	bl	8005938 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a0c:	68f9      	ldr	r1, [r7, #12]
 8004a0e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	441a      	add	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a30:	3b01      	subs	r3, #1
 8004a32:	68f9      	ldr	r1, [r7, #12]
 8004a34:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a36:	fb01 f303 	mul.w	r3, r1, r3
 8004a3a:	441a      	add	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	22ff      	movs	r2, #255	@ 0xff
 8004a44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	22ff      	movs	r2, #255	@ 0xff
 8004a4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d114      	bne.n	8004a80 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01a      	beq.n	8004a94 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3310      	adds	r3, #16
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fc94 	bl	8005390 <xTaskRemoveFromEventList>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d012      	beq.n	8004a94 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa4 <xQueueGenericReset+0xd0>)
 8004a70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	e009      	b.n	8004a94 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3310      	adds	r3, #16
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff fef0 	bl	800486a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3324      	adds	r3, #36	@ 0x24
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff feeb 	bl	800486a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a94:	f000 ff82 	bl	800599c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a98:	2301      	movs	r3, #1
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	e000ed04 	.word	0xe000ed04

08004aa8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08a      	sub	sp, #40	@ 0x28
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10b      	bne.n	8004ad4 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	613b      	str	r3, [r7, #16]
}
 8004ace:	bf00      	nop
 8004ad0:	bf00      	nop
 8004ad2:	e7fd      	b.n	8004ad0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	fb02 f303 	mul.w	r3, r2, r3
 8004adc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	3348      	adds	r3, #72	@ 0x48
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f001 f808 	bl	8005af8 <pvPortMalloc>
 8004ae8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d011      	beq.n	8004b14 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	3348      	adds	r3, #72	@ 0x48
 8004af8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b02:	79fa      	ldrb	r2, [r7, #7]
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 f805 	bl	8004b1e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b14:	69bb      	ldr	r3, [r7, #24]
	}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3720      	adds	r7, #32
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b084      	sub	sp, #16
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	60f8      	str	r0, [r7, #12]
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	607a      	str	r2, [r7, #4]
 8004b2a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d103      	bne.n	8004b3a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	e002      	b.n	8004b40 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	69b8      	ldr	r0, [r7, #24]
 8004b50:	f7ff ff40 	bl	80049d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b54:	bf00      	nop
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08e      	sub	sp, #56	@ 0x38
 8004b60:	af04      	add	r7, sp, #16
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10b      	bne.n	8004b88 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	623b      	str	r3, [r7, #32]
}
 8004b82:	bf00      	nop
 8004b84:	bf00      	nop
 8004b86:	e7fd      	b.n	8004b84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10b      	bne.n	8004ba6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	61fb      	str	r3, [r7, #28]
}
 8004ba0:	bf00      	nop
 8004ba2:	bf00      	nop
 8004ba4:	e7fd      	b.n	8004ba2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ba6:	23a0      	movs	r3, #160	@ 0xa0
 8004ba8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2ba0      	cmp	r3, #160	@ 0xa0
 8004bae:	d00b      	beq.n	8004bc8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	61bb      	str	r3, [r7, #24]
}
 8004bc2:	bf00      	nop
 8004bc4:	bf00      	nop
 8004bc6:	e7fd      	b.n	8004bc4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004bc8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01e      	beq.n	8004c0e <xTaskCreateStatic+0xb2>
 8004bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d01b      	beq.n	8004c0e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bde:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004be8:	2300      	movs	r3, #0
 8004bea:	9303      	str	r3, [sp, #12]
 8004bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bee:	9302      	str	r3, [sp, #8]
 8004bf0:	f107 0314 	add.w	r3, r7, #20
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	68b9      	ldr	r1, [r7, #8]
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 f851 	bl	8004ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c08:	f000 f8ee 	bl	8004de8 <prvAddNewTaskToReadyList>
 8004c0c:	e001      	b.n	8004c12 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c12:	697b      	ldr	r3, [r7, #20]
	}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3728      	adds	r7, #40	@ 0x28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08c      	sub	sp, #48	@ 0x30
 8004c20:	af04      	add	r7, sp, #16
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	603b      	str	r3, [r7, #0]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c2c:	88fb      	ldrh	r3, [r7, #6]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 ff61 	bl	8005af8 <pvPortMalloc>
 8004c36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00e      	beq.n	8004c5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c3e:	20a0      	movs	r0, #160	@ 0xa0
 8004c40:	f000 ff5a 	bl	8005af8 <pvPortMalloc>
 8004c44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c52:	e005      	b.n	8004c60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c54:	6978      	ldr	r0, [r7, #20]
 8004c56:	f001 f81d 	bl	8005c94 <vPortFree>
 8004c5a:	e001      	b.n	8004c60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d017      	beq.n	8004c96 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c6e:	88fa      	ldrh	r2, [r7, #6]
 8004c70:	2300      	movs	r3, #0
 8004c72:	9303      	str	r3, [sp, #12]
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	9302      	str	r3, [sp, #8]
 8004c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 f80f 	bl	8004ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c8a:	69f8      	ldr	r0, [r7, #28]
 8004c8c:	f000 f8ac 	bl	8004de8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c90:	2301      	movs	r3, #1
 8004c92:	61bb      	str	r3, [r7, #24]
 8004c94:	e002      	b.n	8004c9c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c96:	f04f 33ff 	mov.w	r3, #4294967295
 8004c9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c9c:	69bb      	ldr	r3, [r7, #24]
	}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3720      	adds	r7, #32
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	f023 0307 	bic.w	r3, r3, #7
 8004cce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00b      	beq.n	8004cf2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	617b      	str	r3, [r7, #20]
}
 8004cec:	bf00      	nop
 8004cee:	bf00      	nop
 8004cf0:	e7fd      	b.n	8004cee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01f      	beq.n	8004d38 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	e012      	b.n	8004d24 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	4413      	add	r3, r2
 8004d04:	7819      	ldrb	r1, [r3, #0]
 8004d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	3334      	adds	r3, #52	@ 0x34
 8004d0e:	460a      	mov	r2, r1
 8004d10:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	4413      	add	r3, r2
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d006      	beq.n	8004d2c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	3301      	adds	r3, #1
 8004d22:	61fb      	str	r3, [r7, #28]
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	2b0f      	cmp	r3, #15
 8004d28:	d9e9      	bls.n	8004cfe <prvInitialiseNewTask+0x56>
 8004d2a:	e000      	b.n	8004d2e <prvInitialiseNewTask+0x86>
			{
				break;
 8004d2c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d36:	e003      	b.n	8004d40 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d42:	2b06      	cmp	r3, #6
 8004d44:	d901      	bls.n	8004d4a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d46:	2306      	movs	r3, #6
 8004d48:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d54:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d58:	2200      	movs	r2, #0
 8004d5a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff fda2 	bl	80048aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d68:	3318      	adds	r3, #24
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff fd9d 	bl	80048aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d74:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d78:	f1c3 0207 	rsb	r2, r3, #7
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d84:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d98:	334c      	adds	r3, #76	@ 0x4c
 8004d9a:	224c      	movs	r2, #76	@ 0x4c
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f001 f8ba 	bl	8005f18 <memset>
 8004da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da6:	4a0d      	ldr	r2, [pc, #52]	@ (8004ddc <prvInitialiseNewTask+0x134>)
 8004da8:	651a      	str	r2, [r3, #80]	@ 0x50
 8004daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dac:	4a0c      	ldr	r2, [pc, #48]	@ (8004de0 <prvInitialiseNewTask+0x138>)
 8004dae:	655a      	str	r2, [r3, #84]	@ 0x54
 8004db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db2:	4a0c      	ldr	r2, [pc, #48]	@ (8004de4 <prvInitialiseNewTask+0x13c>)
 8004db4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	68f9      	ldr	r1, [r7, #12]
 8004dba:	69b8      	ldr	r0, [r7, #24]
 8004dbc:	f000 fc8e 	bl	80056dc <pxPortInitialiseStack>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dd2:	bf00      	nop
 8004dd4:	3720      	adds	r7, #32
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	200044c8 	.word	0x200044c8
 8004de0:	20004530 	.word	0x20004530
 8004de4:	20004598 	.word	0x20004598

08004de8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004df0:	f000 fda2 	bl	8005938 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004df4:	4b2a      	ldr	r3, [pc, #168]	@ (8004ea0 <prvAddNewTaskToReadyList+0xb8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	4a29      	ldr	r2, [pc, #164]	@ (8004ea0 <prvAddNewTaskToReadyList+0xb8>)
 8004dfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004dfe:	4b29      	ldr	r3, [pc, #164]	@ (8004ea4 <prvAddNewTaskToReadyList+0xbc>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d109      	bne.n	8004e1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e06:	4a27      	ldr	r2, [pc, #156]	@ (8004ea4 <prvAddNewTaskToReadyList+0xbc>)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e0c:	4b24      	ldr	r3, [pc, #144]	@ (8004ea0 <prvAddNewTaskToReadyList+0xb8>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d110      	bne.n	8004e36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e14:	f000 fb38 	bl	8005488 <prvInitialiseTaskLists>
 8004e18:	e00d      	b.n	8004e36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e1a:	4b23      	ldr	r3, [pc, #140]	@ (8004ea8 <prvAddNewTaskToReadyList+0xc0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d109      	bne.n	8004e36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e22:	4b20      	ldr	r3, [pc, #128]	@ (8004ea4 <prvAddNewTaskToReadyList+0xbc>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d802      	bhi.n	8004e36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e30:	4a1c      	ldr	r2, [pc, #112]	@ (8004ea4 <prvAddNewTaskToReadyList+0xbc>)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e36:	4b1d      	ldr	r3, [pc, #116]	@ (8004eac <prvAddNewTaskToReadyList+0xc4>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8004eac <prvAddNewTaskToReadyList+0xc4>)
 8004e3e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e44:	2201      	movs	r2, #1
 8004e46:	409a      	lsls	r2, r3
 8004e48:	4b19      	ldr	r3, [pc, #100]	@ (8004eb0 <prvAddNewTaskToReadyList+0xc8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	4a18      	ldr	r2, [pc, #96]	@ (8004eb0 <prvAddNewTaskToReadyList+0xc8>)
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e56:	4613      	mov	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4a15      	ldr	r2, [pc, #84]	@ (8004eb4 <prvAddNewTaskToReadyList+0xcc>)
 8004e60:	441a      	add	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	3304      	adds	r3, #4
 8004e66:	4619      	mov	r1, r3
 8004e68:	4610      	mov	r0, r2
 8004e6a:	f7ff fd2b 	bl	80048c4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e6e:	f000 fd95 	bl	800599c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea8 <prvAddNewTaskToReadyList+0xc0>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00e      	beq.n	8004e98 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea4 <prvAddNewTaskToReadyList+0xbc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d207      	bcs.n	8004e98 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e88:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <prvAddNewTaskToReadyList+0xd0>)
 8004e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e98:	bf00      	nop
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	20000874 	.word	0x20000874
 8004ea4:	20000774 	.word	0x20000774
 8004ea8:	20000880 	.word	0x20000880
 8004eac:	20000890 	.word	0x20000890
 8004eb0:	2000087c 	.word	0x2000087c
 8004eb4:	20000778 	.word	0x20000778
 8004eb8:	e000ed04 	.word	0xe000ed04

08004ebc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d018      	beq.n	8004f00 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ece:	4b14      	ldr	r3, [pc, #80]	@ (8004f20 <vTaskDelay+0x64>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00b      	beq.n	8004eee <vTaskDelay+0x32>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	60bb      	str	r3, [r7, #8]
}
 8004ee8:	bf00      	nop
 8004eea:	bf00      	nop
 8004eec:	e7fd      	b.n	8004eea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004eee:	f000 f885 	bl	8004ffc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fb8b 	bl	8005610 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004efa:	f000 f88d 	bl	8005018 <xTaskResumeAll>
 8004efe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d107      	bne.n	8004f16 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004f06:	4b07      	ldr	r3, [pc, #28]	@ (8004f24 <vTaskDelay+0x68>)
 8004f08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f16:	bf00      	nop
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	2000089c 	.word	0x2000089c
 8004f24:	e000ed04 	.word	0xe000ed04

08004f28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08a      	sub	sp, #40	@ 0x28
 8004f2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f36:	463a      	mov	r2, r7
 8004f38:	1d39      	adds	r1, r7, #4
 8004f3a:	f107 0308 	add.w	r3, r7, #8
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fb fd28 	bl	8000994 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f44:	6839      	ldr	r1, [r7, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	9202      	str	r2, [sp, #8]
 8004f4c:	9301      	str	r3, [sp, #4]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	2300      	movs	r3, #0
 8004f54:	460a      	mov	r2, r1
 8004f56:	4921      	ldr	r1, [pc, #132]	@ (8004fdc <vTaskStartScheduler+0xb4>)
 8004f58:	4821      	ldr	r0, [pc, #132]	@ (8004fe0 <vTaskStartScheduler+0xb8>)
 8004f5a:	f7ff fdff 	bl	8004b5c <xTaskCreateStatic>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	4a20      	ldr	r2, [pc, #128]	@ (8004fe4 <vTaskStartScheduler+0xbc>)
 8004f62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f64:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe4 <vTaskStartScheduler+0xbc>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	e001      	b.n	8004f76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d11b      	bne.n	8004fb4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	613b      	str	r3, [r7, #16]
}
 8004f8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f90:	4b15      	ldr	r3, [pc, #84]	@ (8004fe8 <vTaskStartScheduler+0xc0>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	334c      	adds	r3, #76	@ 0x4c
 8004f96:	4a15      	ldr	r2, [pc, #84]	@ (8004fec <vTaskStartScheduler+0xc4>)
 8004f98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f9a:	4b15      	ldr	r3, [pc, #84]	@ (8004ff0 <vTaskStartScheduler+0xc8>)
 8004f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004fa2:	4b14      	ldr	r3, [pc, #80]	@ (8004ff4 <vTaskStartScheduler+0xcc>)
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004fa8:	4b13      	ldr	r3, [pc, #76]	@ (8004ff8 <vTaskStartScheduler+0xd0>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004fae:	f000 fc1f 	bl	80057f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004fb2:	e00f      	b.n	8004fd4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fba:	d10b      	bne.n	8004fd4 <vTaskStartScheduler+0xac>
	__asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	60fb      	str	r3, [r7, #12]
}
 8004fce:	bf00      	nop
 8004fd0:	bf00      	nop
 8004fd2:	e7fd      	b.n	8004fd0 <vTaskStartScheduler+0xa8>
}
 8004fd4:	bf00      	nop
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	08006920 	.word	0x08006920
 8004fe0:	08005459 	.word	0x08005459
 8004fe4:	20000898 	.word	0x20000898
 8004fe8:	20000774 	.word	0x20000774
 8004fec:	20000028 	.word	0x20000028
 8004ff0:	20000894 	.word	0x20000894
 8004ff4:	20000880 	.word	0x20000880
 8004ff8:	20000878 	.word	0x20000878

08004ffc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005000:	4b04      	ldr	r3, [pc, #16]	@ (8005014 <vTaskSuspendAll+0x18>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3301      	adds	r3, #1
 8005006:	4a03      	ldr	r2, [pc, #12]	@ (8005014 <vTaskSuspendAll+0x18>)
 8005008:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800500a:	bf00      	nop
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	2000089c 	.word	0x2000089c

08005018 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005022:	2300      	movs	r3, #0
 8005024:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005026:	4b42      	ldr	r3, [pc, #264]	@ (8005130 <xTaskResumeAll+0x118>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10b      	bne.n	8005046 <xTaskResumeAll+0x2e>
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	603b      	str	r3, [r7, #0]
}
 8005040:	bf00      	nop
 8005042:	bf00      	nop
 8005044:	e7fd      	b.n	8005042 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005046:	f000 fc77 	bl	8005938 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800504a:	4b39      	ldr	r3, [pc, #228]	@ (8005130 <xTaskResumeAll+0x118>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3b01      	subs	r3, #1
 8005050:	4a37      	ldr	r2, [pc, #220]	@ (8005130 <xTaskResumeAll+0x118>)
 8005052:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005054:	4b36      	ldr	r3, [pc, #216]	@ (8005130 <xTaskResumeAll+0x118>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d161      	bne.n	8005120 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800505c:	4b35      	ldr	r3, [pc, #212]	@ (8005134 <xTaskResumeAll+0x11c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d05d      	beq.n	8005120 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005064:	e02e      	b.n	80050c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005066:	4b34      	ldr	r3, [pc, #208]	@ (8005138 <xTaskResumeAll+0x120>)
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3318      	adds	r3, #24
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff fc83 	bl	800497e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	3304      	adds	r3, #4
 800507c:	4618      	mov	r0, r3
 800507e:	f7ff fc7e 	bl	800497e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005086:	2201      	movs	r2, #1
 8005088:	409a      	lsls	r2, r3
 800508a:	4b2c      	ldr	r3, [pc, #176]	@ (800513c <xTaskResumeAll+0x124>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4313      	orrs	r3, r2
 8005090:	4a2a      	ldr	r2, [pc, #168]	@ (800513c <xTaskResumeAll+0x124>)
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005098:	4613      	mov	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4a27      	ldr	r2, [pc, #156]	@ (8005140 <xTaskResumeAll+0x128>)
 80050a2:	441a      	add	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3304      	adds	r3, #4
 80050a8:	4619      	mov	r1, r3
 80050aa:	4610      	mov	r0, r2
 80050ac:	f7ff fc0a 	bl	80048c4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b4:	4b23      	ldr	r3, [pc, #140]	@ (8005144 <xTaskResumeAll+0x12c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d302      	bcc.n	80050c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80050be:	4b22      	ldr	r3, [pc, #136]	@ (8005148 <xTaskResumeAll+0x130>)
 80050c0:	2201      	movs	r2, #1
 80050c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050c4:	4b1c      	ldr	r3, [pc, #112]	@ (8005138 <xTaskResumeAll+0x120>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1cc      	bne.n	8005066 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050d2:	f000 fa7d 	bl	80055d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80050d6:	4b1d      	ldr	r3, [pc, #116]	@ (800514c <xTaskResumeAll+0x134>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d010      	beq.n	8005104 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050e2:	f000 f837 	bl	8005154 <xTaskIncrementTick>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80050ec:	4b16      	ldr	r3, [pc, #88]	@ (8005148 <xTaskResumeAll+0x130>)
 80050ee:	2201      	movs	r2, #1
 80050f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f1      	bne.n	80050e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80050fe:	4b13      	ldr	r3, [pc, #76]	@ (800514c <xTaskResumeAll+0x134>)
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005104:	4b10      	ldr	r3, [pc, #64]	@ (8005148 <xTaskResumeAll+0x130>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d009      	beq.n	8005120 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800510c:	2301      	movs	r3, #1
 800510e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005110:	4b0f      	ldr	r3, [pc, #60]	@ (8005150 <xTaskResumeAll+0x138>)
 8005112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005120:	f000 fc3c 	bl	800599c <vPortExitCritical>

	return xAlreadyYielded;
 8005124:	68bb      	ldr	r3, [r7, #8]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	2000089c 	.word	0x2000089c
 8005134:	20000874 	.word	0x20000874
 8005138:	20000834 	.word	0x20000834
 800513c:	2000087c 	.word	0x2000087c
 8005140:	20000778 	.word	0x20000778
 8005144:	20000774 	.word	0x20000774
 8005148:	20000888 	.word	0x20000888
 800514c:	20000884 	.word	0x20000884
 8005150:	e000ed04 	.word	0xe000ed04

08005154 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800515a:	2300      	movs	r3, #0
 800515c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800515e:	4b4f      	ldr	r3, [pc, #316]	@ (800529c <xTaskIncrementTick+0x148>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	f040 808f 	bne.w	8005286 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005168:	4b4d      	ldr	r3, [pc, #308]	@ (80052a0 <xTaskIncrementTick+0x14c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3301      	adds	r3, #1
 800516e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005170:	4a4b      	ldr	r2, [pc, #300]	@ (80052a0 <xTaskIncrementTick+0x14c>)
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d121      	bne.n	80051c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800517c:	4b49      	ldr	r3, [pc, #292]	@ (80052a4 <xTaskIncrementTick+0x150>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00b      	beq.n	800519e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	603b      	str	r3, [r7, #0]
}
 8005198:	bf00      	nop
 800519a:	bf00      	nop
 800519c:	e7fd      	b.n	800519a <xTaskIncrementTick+0x46>
 800519e:	4b41      	ldr	r3, [pc, #260]	@ (80052a4 <xTaskIncrementTick+0x150>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	4b40      	ldr	r3, [pc, #256]	@ (80052a8 <xTaskIncrementTick+0x154>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a3e      	ldr	r2, [pc, #248]	@ (80052a4 <xTaskIncrementTick+0x150>)
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	4a3e      	ldr	r2, [pc, #248]	@ (80052a8 <xTaskIncrementTick+0x154>)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6013      	str	r3, [r2, #0]
 80051b2:	4b3e      	ldr	r3, [pc, #248]	@ (80052ac <xTaskIncrementTick+0x158>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3301      	adds	r3, #1
 80051b8:	4a3c      	ldr	r2, [pc, #240]	@ (80052ac <xTaskIncrementTick+0x158>)
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	f000 fa08 	bl	80055d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051c0:	4b3b      	ldr	r3, [pc, #236]	@ (80052b0 <xTaskIncrementTick+0x15c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d348      	bcc.n	800525c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051ca:	4b36      	ldr	r3, [pc, #216]	@ (80052a4 <xTaskIncrementTick+0x150>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d104      	bne.n	80051de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051d4:	4b36      	ldr	r3, [pc, #216]	@ (80052b0 <xTaskIncrementTick+0x15c>)
 80051d6:	f04f 32ff 	mov.w	r2, #4294967295
 80051da:	601a      	str	r2, [r3, #0]
					break;
 80051dc:	e03e      	b.n	800525c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051de:	4b31      	ldr	r3, [pc, #196]	@ (80052a4 <xTaskIncrementTick+0x150>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d203      	bcs.n	80051fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051f6:	4a2e      	ldr	r2, [pc, #184]	@ (80052b0 <xTaskIncrementTick+0x15c>)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051fc:	e02e      	b.n	800525c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	3304      	adds	r3, #4
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff fbbb 	bl	800497e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800520c:	2b00      	cmp	r3, #0
 800520e:	d004      	beq.n	800521a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	3318      	adds	r3, #24
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff fbb2 	bl	800497e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521e:	2201      	movs	r2, #1
 8005220:	409a      	lsls	r2, r3
 8005222:	4b24      	ldr	r3, [pc, #144]	@ (80052b4 <xTaskIncrementTick+0x160>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4313      	orrs	r3, r2
 8005228:	4a22      	ldr	r2, [pc, #136]	@ (80052b4 <xTaskIncrementTick+0x160>)
 800522a:	6013      	str	r3, [r2, #0]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4a1f      	ldr	r2, [pc, #124]	@ (80052b8 <xTaskIncrementTick+0x164>)
 800523a:	441a      	add	r2, r3
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	3304      	adds	r3, #4
 8005240:	4619      	mov	r1, r3
 8005242:	4610      	mov	r0, r2
 8005244:	f7ff fb3e 	bl	80048c4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800524c:	4b1b      	ldr	r3, [pc, #108]	@ (80052bc <xTaskIncrementTick+0x168>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005252:	429a      	cmp	r2, r3
 8005254:	d3b9      	bcc.n	80051ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005256:	2301      	movs	r3, #1
 8005258:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800525a:	e7b6      	b.n	80051ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800525c:	4b17      	ldr	r3, [pc, #92]	@ (80052bc <xTaskIncrementTick+0x168>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005262:	4915      	ldr	r1, [pc, #84]	@ (80052b8 <xTaskIncrementTick+0x164>)
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d901      	bls.n	8005278 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005274:	2301      	movs	r3, #1
 8005276:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005278:	4b11      	ldr	r3, [pc, #68]	@ (80052c0 <xTaskIncrementTick+0x16c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d007      	beq.n	8005290 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005280:	2301      	movs	r3, #1
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	e004      	b.n	8005290 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005286:	4b0f      	ldr	r3, [pc, #60]	@ (80052c4 <xTaskIncrementTick+0x170>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3301      	adds	r3, #1
 800528c:	4a0d      	ldr	r2, [pc, #52]	@ (80052c4 <xTaskIncrementTick+0x170>)
 800528e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005290:	697b      	ldr	r3, [r7, #20]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	2000089c 	.word	0x2000089c
 80052a0:	20000878 	.word	0x20000878
 80052a4:	2000082c 	.word	0x2000082c
 80052a8:	20000830 	.word	0x20000830
 80052ac:	2000088c 	.word	0x2000088c
 80052b0:	20000894 	.word	0x20000894
 80052b4:	2000087c 	.word	0x2000087c
 80052b8:	20000778 	.word	0x20000778
 80052bc:	20000774 	.word	0x20000774
 80052c0:	20000888 	.word	0x20000888
 80052c4:	20000884 	.word	0x20000884

080052c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052ce:	4b2a      	ldr	r3, [pc, #168]	@ (8005378 <vTaskSwitchContext+0xb0>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052d6:	4b29      	ldr	r3, [pc, #164]	@ (800537c <vTaskSwitchContext+0xb4>)
 80052d8:	2201      	movs	r2, #1
 80052da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052dc:	e045      	b.n	800536a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80052de:	4b27      	ldr	r3, [pc, #156]	@ (800537c <vTaskSwitchContext+0xb4>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052e4:	4b26      	ldr	r3, [pc, #152]	@ (8005380 <vTaskSwitchContext+0xb8>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	fab3 f383 	clz	r3, r3
 80052f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80052f2:	7afb      	ldrb	r3, [r7, #11]
 80052f4:	f1c3 031f 	rsb	r3, r3, #31
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	4922      	ldr	r1, [pc, #136]	@ (8005384 <vTaskSwitchContext+0xbc>)
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	4613      	mov	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	440b      	add	r3, r1
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10b      	bne.n	8005326 <vTaskSwitchContext+0x5e>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	607b      	str	r3, [r7, #4]
}
 8005320:	bf00      	nop
 8005322:	bf00      	nop
 8005324:	e7fd      	b.n	8005322 <vTaskSwitchContext+0x5a>
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4613      	mov	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4a14      	ldr	r2, [pc, #80]	@ (8005384 <vTaskSwitchContext+0xbc>)
 8005332:	4413      	add	r3, r2
 8005334:	613b      	str	r3, [r7, #16]
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	605a      	str	r2, [r3, #4]
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	3308      	adds	r3, #8
 8005348:	429a      	cmp	r2, r3
 800534a:	d104      	bne.n	8005356 <vTaskSwitchContext+0x8e>
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	605a      	str	r2, [r3, #4]
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	4a0a      	ldr	r2, [pc, #40]	@ (8005388 <vTaskSwitchContext+0xc0>)
 800535e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005360:	4b09      	ldr	r3, [pc, #36]	@ (8005388 <vTaskSwitchContext+0xc0>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	334c      	adds	r3, #76	@ 0x4c
 8005366:	4a09      	ldr	r2, [pc, #36]	@ (800538c <vTaskSwitchContext+0xc4>)
 8005368:	6013      	str	r3, [r2, #0]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	2000089c 	.word	0x2000089c
 800537c:	20000888 	.word	0x20000888
 8005380:	2000087c 	.word	0x2000087c
 8005384:	20000778 	.word	0x20000778
 8005388:	20000774 	.word	0x20000774
 800538c:	20000028 	.word	0x20000028

08005390 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10b      	bne.n	80053be <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	60fb      	str	r3, [r7, #12]
}
 80053b8:	bf00      	nop
 80053ba:	bf00      	nop
 80053bc:	e7fd      	b.n	80053ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	3318      	adds	r3, #24
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7ff fadb 	bl	800497e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005440 <xTaskRemoveFromEventList+0xb0>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d11c      	bne.n	800540a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	3304      	adds	r3, #4
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff fad2 	bl	800497e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053de:	2201      	movs	r2, #1
 80053e0:	409a      	lsls	r2, r3
 80053e2:	4b18      	ldr	r3, [pc, #96]	@ (8005444 <xTaskRemoveFromEventList+0xb4>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	4a16      	ldr	r2, [pc, #88]	@ (8005444 <xTaskRemoveFromEventList+0xb4>)
 80053ea:	6013      	str	r3, [r2, #0]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053f0:	4613      	mov	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4a13      	ldr	r2, [pc, #76]	@ (8005448 <xTaskRemoveFromEventList+0xb8>)
 80053fa:	441a      	add	r2, r3
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	3304      	adds	r3, #4
 8005400:	4619      	mov	r1, r3
 8005402:	4610      	mov	r0, r2
 8005404:	f7ff fa5e 	bl	80048c4 <vListInsertEnd>
 8005408:	e005      	b.n	8005416 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	3318      	adds	r3, #24
 800540e:	4619      	mov	r1, r3
 8005410:	480e      	ldr	r0, [pc, #56]	@ (800544c <xTaskRemoveFromEventList+0xbc>)
 8005412:	f7ff fa57 	bl	80048c4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800541a:	4b0d      	ldr	r3, [pc, #52]	@ (8005450 <xTaskRemoveFromEventList+0xc0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005420:	429a      	cmp	r2, r3
 8005422:	d905      	bls.n	8005430 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005424:	2301      	movs	r3, #1
 8005426:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005428:	4b0a      	ldr	r3, [pc, #40]	@ (8005454 <xTaskRemoveFromEventList+0xc4>)
 800542a:	2201      	movs	r2, #1
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	e001      	b.n	8005434 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005430:	2300      	movs	r3, #0
 8005432:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005434:	697b      	ldr	r3, [r7, #20]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	2000089c 	.word	0x2000089c
 8005444:	2000087c 	.word	0x2000087c
 8005448:	20000778 	.word	0x20000778
 800544c:	20000834 	.word	0x20000834
 8005450:	20000774 	.word	0x20000774
 8005454:	20000888 	.word	0x20000888

08005458 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005460:	f000 f852 	bl	8005508 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005464:	4b06      	ldr	r3, [pc, #24]	@ (8005480 <prvIdleTask+0x28>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d9f9      	bls.n	8005460 <prvIdleTask+0x8>
			{
				taskYIELD();
 800546c:	4b05      	ldr	r3, [pc, #20]	@ (8005484 <prvIdleTask+0x2c>)
 800546e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800547c:	e7f0      	b.n	8005460 <prvIdleTask+0x8>
 800547e:	bf00      	nop
 8005480:	20000778 	.word	0x20000778
 8005484:	e000ed04 	.word	0xe000ed04

08005488 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800548e:	2300      	movs	r3, #0
 8005490:	607b      	str	r3, [r7, #4]
 8005492:	e00c      	b.n	80054ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	4613      	mov	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4a12      	ldr	r2, [pc, #72]	@ (80054e8 <prvInitialiseTaskLists+0x60>)
 80054a0:	4413      	add	r3, r2
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff f9e1 	bl	800486a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3301      	adds	r3, #1
 80054ac:	607b      	str	r3, [r7, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b06      	cmp	r3, #6
 80054b2:	d9ef      	bls.n	8005494 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054b4:	480d      	ldr	r0, [pc, #52]	@ (80054ec <prvInitialiseTaskLists+0x64>)
 80054b6:	f7ff f9d8 	bl	800486a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054ba:	480d      	ldr	r0, [pc, #52]	@ (80054f0 <prvInitialiseTaskLists+0x68>)
 80054bc:	f7ff f9d5 	bl	800486a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054c0:	480c      	ldr	r0, [pc, #48]	@ (80054f4 <prvInitialiseTaskLists+0x6c>)
 80054c2:	f7ff f9d2 	bl	800486a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054c6:	480c      	ldr	r0, [pc, #48]	@ (80054f8 <prvInitialiseTaskLists+0x70>)
 80054c8:	f7ff f9cf 	bl	800486a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054cc:	480b      	ldr	r0, [pc, #44]	@ (80054fc <prvInitialiseTaskLists+0x74>)
 80054ce:	f7ff f9cc 	bl	800486a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005500 <prvInitialiseTaskLists+0x78>)
 80054d4:	4a05      	ldr	r2, [pc, #20]	@ (80054ec <prvInitialiseTaskLists+0x64>)
 80054d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005504 <prvInitialiseTaskLists+0x7c>)
 80054da:	4a05      	ldr	r2, [pc, #20]	@ (80054f0 <prvInitialiseTaskLists+0x68>)
 80054dc:	601a      	str	r2, [r3, #0]
}
 80054de:	bf00      	nop
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20000778 	.word	0x20000778
 80054ec:	20000804 	.word	0x20000804
 80054f0:	20000818 	.word	0x20000818
 80054f4:	20000834 	.word	0x20000834
 80054f8:	20000848 	.word	0x20000848
 80054fc:	20000860 	.word	0x20000860
 8005500:	2000082c 	.word	0x2000082c
 8005504:	20000830 	.word	0x20000830

08005508 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800550e:	e019      	b.n	8005544 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005510:	f000 fa12 	bl	8005938 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005514:	4b10      	ldr	r3, [pc, #64]	@ (8005558 <prvCheckTasksWaitingTermination+0x50>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3304      	adds	r3, #4
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff fa2c 	bl	800497e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005526:	4b0d      	ldr	r3, [pc, #52]	@ (800555c <prvCheckTasksWaitingTermination+0x54>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3b01      	subs	r3, #1
 800552c:	4a0b      	ldr	r2, [pc, #44]	@ (800555c <prvCheckTasksWaitingTermination+0x54>)
 800552e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005530:	4b0b      	ldr	r3, [pc, #44]	@ (8005560 <prvCheckTasksWaitingTermination+0x58>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3b01      	subs	r3, #1
 8005536:	4a0a      	ldr	r2, [pc, #40]	@ (8005560 <prvCheckTasksWaitingTermination+0x58>)
 8005538:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800553a:	f000 fa2f 	bl	800599c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f810 	bl	8005564 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005544:	4b06      	ldr	r3, [pc, #24]	@ (8005560 <prvCheckTasksWaitingTermination+0x58>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1e1      	bne.n	8005510 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800554c:	bf00      	nop
 800554e:	bf00      	nop
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20000848 	.word	0x20000848
 800555c:	20000874 	.word	0x20000874
 8005560:	2000085c 	.word	0x2000085c

08005564 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	334c      	adds	r3, #76	@ 0x4c
 8005570:	4618      	mov	r0, r3
 8005572:	f000 fcd9 	bl	8005f28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800557c:	2b00      	cmp	r3, #0
 800557e:	d108      	bne.n	8005592 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fb85 	bl	8005c94 <vPortFree>
				vPortFree( pxTCB );
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fb82 	bl	8005c94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005590:	e019      	b.n	80055c6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005598:	2b01      	cmp	r3, #1
 800559a:	d103      	bne.n	80055a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fb79 	bl	8005c94 <vPortFree>
	}
 80055a2:	e010      	b.n	80055c6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d00b      	beq.n	80055c6 <prvDeleteTCB+0x62>
	__asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	60fb      	str	r3, [r7, #12]
}
 80055c0:	bf00      	nop
 80055c2:	bf00      	nop
 80055c4:	e7fd      	b.n	80055c2 <prvDeleteTCB+0x5e>
	}
 80055c6:	bf00      	nop
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
	...

080055d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005608 <prvResetNextTaskUnblockTime+0x38>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d104      	bne.n	80055ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055e0:	4b0a      	ldr	r3, [pc, #40]	@ (800560c <prvResetNextTaskUnblockTime+0x3c>)
 80055e2:	f04f 32ff 	mov.w	r2, #4294967295
 80055e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80055e8:	e008      	b.n	80055fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ea:	4b07      	ldr	r3, [pc, #28]	@ (8005608 <prvResetNextTaskUnblockTime+0x38>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	4a04      	ldr	r2, [pc, #16]	@ (800560c <prvResetNextTaskUnblockTime+0x3c>)
 80055fa:	6013      	str	r3, [r2, #0]
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	2000082c 	.word	0x2000082c
 800560c:	20000894 	.word	0x20000894

08005610 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800561a:	4b29      	ldr	r3, [pc, #164]	@ (80056c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005620:	4b28      	ldr	r3, [pc, #160]	@ (80056c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3304      	adds	r3, #4
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff f9a9 	bl	800497e <uxListRemove>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10b      	bne.n	800564a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005632:	4b24      	ldr	r3, [pc, #144]	@ (80056c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005638:	2201      	movs	r2, #1
 800563a:	fa02 f303 	lsl.w	r3, r2, r3
 800563e:	43da      	mvns	r2, r3
 8005640:	4b21      	ldr	r3, [pc, #132]	@ (80056c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4013      	ands	r3, r2
 8005646:	4a20      	ldr	r2, [pc, #128]	@ (80056c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005648:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005650:	d10a      	bne.n	8005668 <prvAddCurrentTaskToDelayedList+0x58>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d007      	beq.n	8005668 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005658:	4b1a      	ldr	r3, [pc, #104]	@ (80056c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3304      	adds	r3, #4
 800565e:	4619      	mov	r1, r3
 8005660:	481a      	ldr	r0, [pc, #104]	@ (80056cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005662:	f7ff f92f 	bl	80048c4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005666:	e026      	b.n	80056b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4413      	add	r3, r2
 800566e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005670:	4b14      	ldr	r3, [pc, #80]	@ (80056c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	429a      	cmp	r2, r3
 800567e:	d209      	bcs.n	8005694 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005680:	4b13      	ldr	r3, [pc, #76]	@ (80056d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	4b0f      	ldr	r3, [pc, #60]	@ (80056c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3304      	adds	r3, #4
 800568a:	4619      	mov	r1, r3
 800568c:	4610      	mov	r0, r2
 800568e:	f7ff f93d 	bl	800490c <vListInsert>
}
 8005692:	e010      	b.n	80056b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005694:	4b0f      	ldr	r3, [pc, #60]	@ (80056d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	4b0a      	ldr	r3, [pc, #40]	@ (80056c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3304      	adds	r3, #4
 800569e:	4619      	mov	r1, r3
 80056a0:	4610      	mov	r0, r2
 80056a2:	f7ff f933 	bl	800490c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80056a6:	4b0c      	ldr	r3, [pc, #48]	@ (80056d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d202      	bcs.n	80056b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80056b0:	4a09      	ldr	r2, [pc, #36]	@ (80056d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	6013      	str	r3, [r2, #0]
}
 80056b6:	bf00      	nop
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000878 	.word	0x20000878
 80056c4:	20000774 	.word	0x20000774
 80056c8:	2000087c 	.word	0x2000087c
 80056cc:	20000860 	.word	0x20000860
 80056d0:	20000830 	.word	0x20000830
 80056d4:	2000082c 	.word	0x2000082c
 80056d8:	20000894 	.word	0x20000894

080056dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3b04      	subs	r3, #4
 80056ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80056f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3b04      	subs	r3, #4
 80056fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f023 0201 	bic.w	r2, r3, #1
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3b04      	subs	r3, #4
 800570a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800570c:	4a0c      	ldr	r2, [pc, #48]	@ (8005740 <pxPortInitialiseStack+0x64>)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3b14      	subs	r3, #20
 8005716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3b04      	subs	r3, #4
 8005722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f06f 0202 	mvn.w	r2, #2
 800572a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3b20      	subs	r3, #32
 8005730:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005732:	68fb      	ldr	r3, [r7, #12]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	08005745 	.word	0x08005745

08005744 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800574e:	4b13      	ldr	r3, [pc, #76]	@ (800579c <prvTaskExitError+0x58>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005756:	d00b      	beq.n	8005770 <prvTaskExitError+0x2c>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	60fb      	str	r3, [r7, #12]
}
 800576a:	bf00      	nop
 800576c:	bf00      	nop
 800576e:	e7fd      	b.n	800576c <prvTaskExitError+0x28>
	__asm volatile
 8005770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	60bb      	str	r3, [r7, #8]
}
 8005782:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005784:	bf00      	nop
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0fc      	beq.n	8005786 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800578c:	bf00      	nop
 800578e:	bf00      	nop
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	20000024 	.word	0x20000024

080057a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057a0:	4b07      	ldr	r3, [pc, #28]	@ (80057c0 <pxCurrentTCBConst2>)
 80057a2:	6819      	ldr	r1, [r3, #0]
 80057a4:	6808      	ldr	r0, [r1, #0]
 80057a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057aa:	f380 8809 	msr	PSP, r0
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f04f 0000 	mov.w	r0, #0
 80057b6:	f380 8811 	msr	BASEPRI, r0
 80057ba:	4770      	bx	lr
 80057bc:	f3af 8000 	nop.w

080057c0 <pxCurrentTCBConst2>:
 80057c0:	20000774 	.word	0x20000774
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057c4:	bf00      	nop
 80057c6:	bf00      	nop

080057c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057c8:	4808      	ldr	r0, [pc, #32]	@ (80057ec <prvPortStartFirstTask+0x24>)
 80057ca:	6800      	ldr	r0, [r0, #0]
 80057cc:	6800      	ldr	r0, [r0, #0]
 80057ce:	f380 8808 	msr	MSP, r0
 80057d2:	f04f 0000 	mov.w	r0, #0
 80057d6:	f380 8814 	msr	CONTROL, r0
 80057da:	b662      	cpsie	i
 80057dc:	b661      	cpsie	f
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	df00      	svc	0
 80057e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057ea:	bf00      	nop
 80057ec:	e000ed08 	.word	0xe000ed08

080057f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057f6:	4b47      	ldr	r3, [pc, #284]	@ (8005914 <xPortStartScheduler+0x124>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a47      	ldr	r2, [pc, #284]	@ (8005918 <xPortStartScheduler+0x128>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d10b      	bne.n	8005818 <xPortStartScheduler+0x28>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	60fb      	str	r3, [r7, #12]
}
 8005812:	bf00      	nop
 8005814:	bf00      	nop
 8005816:	e7fd      	b.n	8005814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005818:	4b3e      	ldr	r3, [pc, #248]	@ (8005914 <xPortStartScheduler+0x124>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a3f      	ldr	r2, [pc, #252]	@ (800591c <xPortStartScheduler+0x12c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d10b      	bne.n	800583a <xPortStartScheduler+0x4a>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	613b      	str	r3, [r7, #16]
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop
 8005838:	e7fd      	b.n	8005836 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800583a:	4b39      	ldr	r3, [pc, #228]	@ (8005920 <xPortStartScheduler+0x130>)
 800583c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	22ff      	movs	r2, #255	@ 0xff
 800584a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	b2db      	uxtb	r3, r3
 8005852:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	b2db      	uxtb	r3, r3
 8005858:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800585c:	b2da      	uxtb	r2, r3
 800585e:	4b31      	ldr	r3, [pc, #196]	@ (8005924 <xPortStartScheduler+0x134>)
 8005860:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005862:	4b31      	ldr	r3, [pc, #196]	@ (8005928 <xPortStartScheduler+0x138>)
 8005864:	2207      	movs	r2, #7
 8005866:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005868:	e009      	b.n	800587e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800586a:	4b2f      	ldr	r3, [pc, #188]	@ (8005928 <xPortStartScheduler+0x138>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3b01      	subs	r3, #1
 8005870:	4a2d      	ldr	r2, [pc, #180]	@ (8005928 <xPortStartScheduler+0x138>)
 8005872:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005874:	78fb      	ldrb	r3, [r7, #3]
 8005876:	b2db      	uxtb	r3, r3
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	b2db      	uxtb	r3, r3
 800587c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800587e:	78fb      	ldrb	r3, [r7, #3]
 8005880:	b2db      	uxtb	r3, r3
 8005882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005886:	2b80      	cmp	r3, #128	@ 0x80
 8005888:	d0ef      	beq.n	800586a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800588a:	4b27      	ldr	r3, [pc, #156]	@ (8005928 <xPortStartScheduler+0x138>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f1c3 0307 	rsb	r3, r3, #7
 8005892:	2b04      	cmp	r3, #4
 8005894:	d00b      	beq.n	80058ae <xPortStartScheduler+0xbe>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	60bb      	str	r3, [r7, #8]
}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	e7fd      	b.n	80058aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005928 <xPortStartScheduler+0x138>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	021b      	lsls	r3, r3, #8
 80058b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005928 <xPortStartScheduler+0x138>)
 80058b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005928 <xPortStartScheduler+0x138>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80058c0:	4a19      	ldr	r2, [pc, #100]	@ (8005928 <xPortStartScheduler+0x138>)
 80058c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058cc:	4b17      	ldr	r3, [pc, #92]	@ (800592c <xPortStartScheduler+0x13c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a16      	ldr	r2, [pc, #88]	@ (800592c <xPortStartScheduler+0x13c>)
 80058d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80058d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058d8:	4b14      	ldr	r3, [pc, #80]	@ (800592c <xPortStartScheduler+0x13c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a13      	ldr	r2, [pc, #76]	@ (800592c <xPortStartScheduler+0x13c>)
 80058de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80058e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058e4:	f000 f8da 	bl	8005a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058e8:	4b11      	ldr	r3, [pc, #68]	@ (8005930 <xPortStartScheduler+0x140>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80058ee:	f000 f8f9 	bl	8005ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058f2:	4b10      	ldr	r3, [pc, #64]	@ (8005934 <xPortStartScheduler+0x144>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005934 <xPortStartScheduler+0x144>)
 80058f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80058fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058fe:	f7ff ff63 	bl	80057c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005902:	f7ff fce1 	bl	80052c8 <vTaskSwitchContext>
	prvTaskExitError();
 8005906:	f7ff ff1d 	bl	8005744 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	e000ed00 	.word	0xe000ed00
 8005918:	410fc271 	.word	0x410fc271
 800591c:	410fc270 	.word	0x410fc270
 8005920:	e000e400 	.word	0xe000e400
 8005924:	200008a0 	.word	0x200008a0
 8005928:	200008a4 	.word	0x200008a4
 800592c:	e000ed20 	.word	0xe000ed20
 8005930:	20000024 	.word	0x20000024
 8005934:	e000ef34 	.word	0xe000ef34

08005938 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	607b      	str	r3, [r7, #4]
}
 8005950:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005952:	4b10      	ldr	r3, [pc, #64]	@ (8005994 <vPortEnterCritical+0x5c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3301      	adds	r3, #1
 8005958:	4a0e      	ldr	r2, [pc, #56]	@ (8005994 <vPortEnterCritical+0x5c>)
 800595a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800595c:	4b0d      	ldr	r3, [pc, #52]	@ (8005994 <vPortEnterCritical+0x5c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d110      	bne.n	8005986 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005964:	4b0c      	ldr	r3, [pc, #48]	@ (8005998 <vPortEnterCritical+0x60>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00b      	beq.n	8005986 <vPortEnterCritical+0x4e>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	603b      	str	r3, [r7, #0]
}
 8005980:	bf00      	nop
 8005982:	bf00      	nop
 8005984:	e7fd      	b.n	8005982 <vPortEnterCritical+0x4a>
	}
}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	20000024 	.word	0x20000024
 8005998:	e000ed04 	.word	0xe000ed04

0800599c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80059a2:	4b12      	ldr	r3, [pc, #72]	@ (80059ec <vPortExitCritical+0x50>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10b      	bne.n	80059c2 <vPortExitCritical+0x26>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	607b      	str	r3, [r7, #4]
}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	e7fd      	b.n	80059be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059c2:	4b0a      	ldr	r3, [pc, #40]	@ (80059ec <vPortExitCritical+0x50>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	4a08      	ldr	r2, [pc, #32]	@ (80059ec <vPortExitCritical+0x50>)
 80059ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059cc:	4b07      	ldr	r3, [pc, #28]	@ (80059ec <vPortExitCritical+0x50>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d105      	bne.n	80059e0 <vPortExitCritical+0x44>
 80059d4:	2300      	movs	r3, #0
 80059d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	20000024 	.word	0x20000024

080059f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059f0:	f3ef 8009 	mrs	r0, PSP
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	4b15      	ldr	r3, [pc, #84]	@ (8005a50 <pxCurrentTCBConst>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	f01e 0f10 	tst.w	lr, #16
 8005a00:	bf08      	it	eq
 8005a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0a:	6010      	str	r0, [r2, #0]
 8005a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005a14:	f380 8811 	msr	BASEPRI, r0
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f7ff fc52 	bl	80052c8 <vTaskSwitchContext>
 8005a24:	f04f 0000 	mov.w	r0, #0
 8005a28:	f380 8811 	msr	BASEPRI, r0
 8005a2c:	bc09      	pop	{r0, r3}
 8005a2e:	6819      	ldr	r1, [r3, #0]
 8005a30:	6808      	ldr	r0, [r1, #0]
 8005a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a36:	f01e 0f10 	tst.w	lr, #16
 8005a3a:	bf08      	it	eq
 8005a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a40:	f380 8809 	msr	PSP, r0
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	f3af 8000 	nop.w

08005a50 <pxCurrentTCBConst>:
 8005a50:	20000774 	.word	0x20000774
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop

08005a58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	607b      	str	r3, [r7, #4]
}
 8005a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a72:	f7ff fb6f 	bl	8005154 <xTaskIncrementTick>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a7c:	4b06      	ldr	r3, [pc, #24]	@ (8005a98 <SysTick_Handler+0x40>)
 8005a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	2300      	movs	r3, #0
 8005a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	f383 8811 	msr	BASEPRI, r3
}
 8005a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a90:	bf00      	nop
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad0 <vPortSetupTimerInterrupt+0x34>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad4 <vPortSetupTimerInterrupt+0x38>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005aac:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad8 <vPortSetupTimerInterrupt+0x3c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8005adc <vPortSetupTimerInterrupt+0x40>)
 8005ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab6:	099b      	lsrs	r3, r3, #6
 8005ab8:	4a09      	ldr	r2, [pc, #36]	@ (8005ae0 <vPortSetupTimerInterrupt+0x44>)
 8005aba:	3b01      	subs	r3, #1
 8005abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005abe:	4b04      	ldr	r3, [pc, #16]	@ (8005ad0 <vPortSetupTimerInterrupt+0x34>)
 8005ac0:	2207      	movs	r2, #7
 8005ac2:	601a      	str	r2, [r3, #0]
}
 8005ac4:	bf00      	nop
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	e000e010 	.word	0xe000e010
 8005ad4:	e000e018 	.word	0xe000e018
 8005ad8:	20000018 	.word	0x20000018
 8005adc:	10624dd3 	.word	0x10624dd3
 8005ae0:	e000e014 	.word	0xe000e014

08005ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005af4 <vPortEnableVFP+0x10>
 8005ae8:	6801      	ldr	r1, [r0, #0]
 8005aea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005aee:	6001      	str	r1, [r0, #0]
 8005af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005af2:	bf00      	nop
 8005af4:	e000ed88 	.word	0xe000ed88

08005af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08a      	sub	sp, #40	@ 0x28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b00:	2300      	movs	r3, #0
 8005b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b04:	f7ff fa7a 	bl	8004ffc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b08:	4b5c      	ldr	r3, [pc, #368]	@ (8005c7c <pvPortMalloc+0x184>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b10:	f000 f924 	bl	8005d5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b14:	4b5a      	ldr	r3, [pc, #360]	@ (8005c80 <pvPortMalloc+0x188>)
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f040 8095 	bne.w	8005c4c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d01e      	beq.n	8005b66 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005b28:	2208      	movs	r2, #8
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f003 0307 	and.w	r3, r3, #7
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d015      	beq.n	8005b66 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f023 0307 	bic.w	r3, r3, #7
 8005b40:	3308      	adds	r3, #8
 8005b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00b      	beq.n	8005b66 <pvPortMalloc+0x6e>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	617b      	str	r3, [r7, #20]
}
 8005b60:	bf00      	nop
 8005b62:	bf00      	nop
 8005b64:	e7fd      	b.n	8005b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d06f      	beq.n	8005c4c <pvPortMalloc+0x154>
 8005b6c:	4b45      	ldr	r3, [pc, #276]	@ (8005c84 <pvPortMalloc+0x18c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d86a      	bhi.n	8005c4c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b76:	4b44      	ldr	r3, [pc, #272]	@ (8005c88 <pvPortMalloc+0x190>)
 8005b78:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b7a:	4b43      	ldr	r3, [pc, #268]	@ (8005c88 <pvPortMalloc+0x190>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b80:	e004      	b.n	8005b8c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b84:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d903      	bls.n	8005b9e <pvPortMalloc+0xa6>
 8005b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1f1      	bne.n	8005b82 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b9e:	4b37      	ldr	r3, [pc, #220]	@ (8005c7c <pvPortMalloc+0x184>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d051      	beq.n	8005c4c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2208      	movs	r2, #8
 8005bae:	4413      	add	r3, r2
 8005bb0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	1ad2      	subs	r2, r2, r3
 8005bc2:	2308      	movs	r3, #8
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d920      	bls.n	8005c0c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4413      	add	r3, r2
 8005bd0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00b      	beq.n	8005bf4 <pvPortMalloc+0xfc>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	613b      	str	r3, [r7, #16]
}
 8005bee:	bf00      	nop
 8005bf0:	bf00      	nop
 8005bf2:	e7fd      	b.n	8005bf0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	1ad2      	subs	r2, r2, r3
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c06:	69b8      	ldr	r0, [r7, #24]
 8005c08:	f000 f90a 	bl	8005e20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8005c84 <pvPortMalloc+0x18c>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	4a1b      	ldr	r2, [pc, #108]	@ (8005c84 <pvPortMalloc+0x18c>)
 8005c18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8005c84 <pvPortMalloc+0x18c>)
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8005c8c <pvPortMalloc+0x194>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d203      	bcs.n	8005c2e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c26:	4b17      	ldr	r3, [pc, #92]	@ (8005c84 <pvPortMalloc+0x18c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a18      	ldr	r2, [pc, #96]	@ (8005c8c <pvPortMalloc+0x194>)
 8005c2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	4b13      	ldr	r3, [pc, #76]	@ (8005c80 <pvPortMalloc+0x188>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	431a      	orrs	r2, r3
 8005c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3e:	2200      	movs	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005c42:	4b13      	ldr	r3, [pc, #76]	@ (8005c90 <pvPortMalloc+0x198>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3301      	adds	r3, #1
 8005c48:	4a11      	ldr	r2, [pc, #68]	@ (8005c90 <pvPortMalloc+0x198>)
 8005c4a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c4c:	f7ff f9e4 	bl	8005018 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00b      	beq.n	8005c72 <pvPortMalloc+0x17a>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	60fb      	str	r3, [r7, #12]
}
 8005c6c:	bf00      	nop
 8005c6e:	bf00      	nop
 8005c70:	e7fd      	b.n	8005c6e <pvPortMalloc+0x176>
	return pvReturn;
 8005c72:	69fb      	ldr	r3, [r7, #28]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3728      	adds	r7, #40	@ 0x28
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	200044b0 	.word	0x200044b0
 8005c80:	200044c4 	.word	0x200044c4
 8005c84:	200044b4 	.word	0x200044b4
 8005c88:	200044a8 	.word	0x200044a8
 8005c8c:	200044b8 	.word	0x200044b8
 8005c90:	200044bc 	.word	0x200044bc

08005c94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d04f      	beq.n	8005d46 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ca6:	2308      	movs	r3, #8
 8005ca8:	425b      	negs	r3, r3
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	4413      	add	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	4b25      	ldr	r3, [pc, #148]	@ (8005d50 <vPortFree+0xbc>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10b      	bne.n	8005cda <vPortFree+0x46>
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	60fb      	str	r3, [r7, #12]
}
 8005cd4:	bf00      	nop
 8005cd6:	bf00      	nop
 8005cd8:	e7fd      	b.n	8005cd6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00b      	beq.n	8005cfa <vPortFree+0x66>
	__asm volatile
 8005ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	60bb      	str	r3, [r7, #8]
}
 8005cf4:	bf00      	nop
 8005cf6:	bf00      	nop
 8005cf8:	e7fd      	b.n	8005cf6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	4b14      	ldr	r3, [pc, #80]	@ (8005d50 <vPortFree+0xbc>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4013      	ands	r3, r2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d01e      	beq.n	8005d46 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d11a      	bne.n	8005d46 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	4b0e      	ldr	r3, [pc, #56]	@ (8005d50 <vPortFree+0xbc>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	43db      	mvns	r3, r3
 8005d1a:	401a      	ands	r2, r3
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d20:	f7ff f96c 	bl	8004ffc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	4b0a      	ldr	r3, [pc, #40]	@ (8005d54 <vPortFree+0xc0>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	4a09      	ldr	r2, [pc, #36]	@ (8005d54 <vPortFree+0xc0>)
 8005d30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d32:	6938      	ldr	r0, [r7, #16]
 8005d34:	f000 f874 	bl	8005e20 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d38:	4b07      	ldr	r3, [pc, #28]	@ (8005d58 <vPortFree+0xc4>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	4a06      	ldr	r2, [pc, #24]	@ (8005d58 <vPortFree+0xc4>)
 8005d40:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005d42:	f7ff f969 	bl	8005018 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d46:	bf00      	nop
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	200044c4 	.word	0x200044c4
 8005d54:	200044b4 	.word	0x200044b4
 8005d58:	200044c0 	.word	0x200044c0

08005d5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d62:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005d66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d68:	4b27      	ldr	r3, [pc, #156]	@ (8005e08 <prvHeapInit+0xac>)
 8005d6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f003 0307 	and.w	r3, r3, #7
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00c      	beq.n	8005d90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	3307      	adds	r3, #7
 8005d7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0307 	bic.w	r3, r3, #7
 8005d82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8005e08 <prvHeapInit+0xac>)
 8005d8c:	4413      	add	r3, r2
 8005d8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d94:	4a1d      	ldr	r2, [pc, #116]	@ (8005e0c <prvHeapInit+0xb0>)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8005e0c <prvHeapInit+0xb0>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	4413      	add	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005da8:	2208      	movs	r2, #8
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	1a9b      	subs	r3, r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0307 	bic.w	r3, r3, #7
 8005db6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4a15      	ldr	r2, [pc, #84]	@ (8005e10 <prvHeapInit+0xb4>)
 8005dbc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005dbe:	4b14      	ldr	r3, [pc, #80]	@ (8005e10 <prvHeapInit+0xb4>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005dc6:	4b12      	ldr	r3, [pc, #72]	@ (8005e10 <prvHeapInit+0xb4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	1ad2      	subs	r2, r2, r3
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8005e10 <prvHeapInit+0xb4>)
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	4a0a      	ldr	r2, [pc, #40]	@ (8005e14 <prvHeapInit+0xb8>)
 8005dea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	4a09      	ldr	r2, [pc, #36]	@ (8005e18 <prvHeapInit+0xbc>)
 8005df2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005df4:	4b09      	ldr	r3, [pc, #36]	@ (8005e1c <prvHeapInit+0xc0>)
 8005df6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005dfa:	601a      	str	r2, [r3, #0]
}
 8005dfc:	bf00      	nop
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	200008a8 	.word	0x200008a8
 8005e0c:	200044a8 	.word	0x200044a8
 8005e10:	200044b0 	.word	0x200044b0
 8005e14:	200044b8 	.word	0x200044b8
 8005e18:	200044b4 	.word	0x200044b4
 8005e1c:	200044c4 	.word	0x200044c4

08005e20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e28:	4b28      	ldr	r3, [pc, #160]	@ (8005ecc <prvInsertBlockIntoFreeList+0xac>)
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	e002      	b.n	8005e34 <prvInsertBlockIntoFreeList+0x14>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d8f7      	bhi.n	8005e2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	4413      	add	r3, r2
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d108      	bne.n	8005e62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	441a      	add	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	441a      	add	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d118      	bne.n	8005ea8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	4b15      	ldr	r3, [pc, #84]	@ (8005ed0 <prvInsertBlockIntoFreeList+0xb0>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d00d      	beq.n	8005e9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	441a      	add	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	e008      	b.n	8005eb0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ed0 <prvInsertBlockIntoFreeList+0xb0>)
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	e003      	b.n	8005eb0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d002      	beq.n	8005ebe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ebe:	bf00      	nop
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	200044a8 	.word	0x200044a8
 8005ed0:	200044b0 	.word	0x200044b0

08005ed4 <siprintf>:
 8005ed4:	b40e      	push	{r1, r2, r3}
 8005ed6:	b510      	push	{r4, lr}
 8005ed8:	b09d      	sub	sp, #116	@ 0x74
 8005eda:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005edc:	9002      	str	r0, [sp, #8]
 8005ede:	9006      	str	r0, [sp, #24]
 8005ee0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005ee4:	480a      	ldr	r0, [pc, #40]	@ (8005f10 <siprintf+0x3c>)
 8005ee6:	9107      	str	r1, [sp, #28]
 8005ee8:	9104      	str	r1, [sp, #16]
 8005eea:	490a      	ldr	r1, [pc, #40]	@ (8005f14 <siprintf+0x40>)
 8005eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ef0:	9105      	str	r1, [sp, #20]
 8005ef2:	2400      	movs	r4, #0
 8005ef4:	a902      	add	r1, sp, #8
 8005ef6:	6800      	ldr	r0, [r0, #0]
 8005ef8:	9301      	str	r3, [sp, #4]
 8005efa:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005efc:	f000 fa00 	bl	8006300 <_svfiprintf_r>
 8005f00:	9b02      	ldr	r3, [sp, #8]
 8005f02:	701c      	strb	r4, [r3, #0]
 8005f04:	b01d      	add	sp, #116	@ 0x74
 8005f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f0a:	b003      	add	sp, #12
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	20000028 	.word	0x20000028
 8005f14:	ffff0208 	.word	0xffff0208

08005f18 <memset>:
 8005f18:	4402      	add	r2, r0
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d100      	bne.n	8005f22 <memset+0xa>
 8005f20:	4770      	bx	lr
 8005f22:	f803 1b01 	strb.w	r1, [r3], #1
 8005f26:	e7f9      	b.n	8005f1c <memset+0x4>

08005f28 <_reclaim_reent>:
 8005f28:	4b2d      	ldr	r3, [pc, #180]	@ (8005fe0 <_reclaim_reent+0xb8>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4283      	cmp	r3, r0
 8005f2e:	b570      	push	{r4, r5, r6, lr}
 8005f30:	4604      	mov	r4, r0
 8005f32:	d053      	beq.n	8005fdc <_reclaim_reent+0xb4>
 8005f34:	69c3      	ldr	r3, [r0, #28]
 8005f36:	b31b      	cbz	r3, 8005f80 <_reclaim_reent+0x58>
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	b163      	cbz	r3, 8005f56 <_reclaim_reent+0x2e>
 8005f3c:	2500      	movs	r5, #0
 8005f3e:	69e3      	ldr	r3, [r4, #28]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	5959      	ldr	r1, [r3, r5]
 8005f44:	b9b1      	cbnz	r1, 8005f74 <_reclaim_reent+0x4c>
 8005f46:	3504      	adds	r5, #4
 8005f48:	2d80      	cmp	r5, #128	@ 0x80
 8005f4a:	d1f8      	bne.n	8005f3e <_reclaim_reent+0x16>
 8005f4c:	69e3      	ldr	r3, [r4, #28]
 8005f4e:	4620      	mov	r0, r4
 8005f50:	68d9      	ldr	r1, [r3, #12]
 8005f52:	f000 f881 	bl	8006058 <_free_r>
 8005f56:	69e3      	ldr	r3, [r4, #28]
 8005f58:	6819      	ldr	r1, [r3, #0]
 8005f5a:	b111      	cbz	r1, 8005f62 <_reclaim_reent+0x3a>
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f000 f87b 	bl	8006058 <_free_r>
 8005f62:	69e3      	ldr	r3, [r4, #28]
 8005f64:	689d      	ldr	r5, [r3, #8]
 8005f66:	b15d      	cbz	r5, 8005f80 <_reclaim_reent+0x58>
 8005f68:	4629      	mov	r1, r5
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	682d      	ldr	r5, [r5, #0]
 8005f6e:	f000 f873 	bl	8006058 <_free_r>
 8005f72:	e7f8      	b.n	8005f66 <_reclaim_reent+0x3e>
 8005f74:	680e      	ldr	r6, [r1, #0]
 8005f76:	4620      	mov	r0, r4
 8005f78:	f000 f86e 	bl	8006058 <_free_r>
 8005f7c:	4631      	mov	r1, r6
 8005f7e:	e7e1      	b.n	8005f44 <_reclaim_reent+0x1c>
 8005f80:	6961      	ldr	r1, [r4, #20]
 8005f82:	b111      	cbz	r1, 8005f8a <_reclaim_reent+0x62>
 8005f84:	4620      	mov	r0, r4
 8005f86:	f000 f867 	bl	8006058 <_free_r>
 8005f8a:	69e1      	ldr	r1, [r4, #28]
 8005f8c:	b111      	cbz	r1, 8005f94 <_reclaim_reent+0x6c>
 8005f8e:	4620      	mov	r0, r4
 8005f90:	f000 f862 	bl	8006058 <_free_r>
 8005f94:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005f96:	b111      	cbz	r1, 8005f9e <_reclaim_reent+0x76>
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f000 f85d 	bl	8006058 <_free_r>
 8005f9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fa0:	b111      	cbz	r1, 8005fa8 <_reclaim_reent+0x80>
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f000 f858 	bl	8006058 <_free_r>
 8005fa8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005faa:	b111      	cbz	r1, 8005fb2 <_reclaim_reent+0x8a>
 8005fac:	4620      	mov	r0, r4
 8005fae:	f000 f853 	bl	8006058 <_free_r>
 8005fb2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005fb4:	b111      	cbz	r1, 8005fbc <_reclaim_reent+0x94>
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f000 f84e 	bl	8006058 <_free_r>
 8005fbc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005fbe:	b111      	cbz	r1, 8005fc6 <_reclaim_reent+0x9e>
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f000 f849 	bl	8006058 <_free_r>
 8005fc6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005fc8:	b111      	cbz	r1, 8005fd0 <_reclaim_reent+0xa8>
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 f844 	bl	8006058 <_free_r>
 8005fd0:	6a23      	ldr	r3, [r4, #32]
 8005fd2:	b11b      	cbz	r3, 8005fdc <_reclaim_reent+0xb4>
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005fda:	4718      	bx	r3
 8005fdc:	bd70      	pop	{r4, r5, r6, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000028 	.word	0x20000028

08005fe4 <__errno>:
 8005fe4:	4b01      	ldr	r3, [pc, #4]	@ (8005fec <__errno+0x8>)
 8005fe6:	6818      	ldr	r0, [r3, #0]
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	20000028 	.word	0x20000028

08005ff0 <__libc_init_array>:
 8005ff0:	b570      	push	{r4, r5, r6, lr}
 8005ff2:	4d0d      	ldr	r5, [pc, #52]	@ (8006028 <__libc_init_array+0x38>)
 8005ff4:	4c0d      	ldr	r4, [pc, #52]	@ (800602c <__libc_init_array+0x3c>)
 8005ff6:	1b64      	subs	r4, r4, r5
 8005ff8:	10a4      	asrs	r4, r4, #2
 8005ffa:	2600      	movs	r6, #0
 8005ffc:	42a6      	cmp	r6, r4
 8005ffe:	d109      	bne.n	8006014 <__libc_init_array+0x24>
 8006000:	4d0b      	ldr	r5, [pc, #44]	@ (8006030 <__libc_init_array+0x40>)
 8006002:	4c0c      	ldr	r4, [pc, #48]	@ (8006034 <__libc_init_array+0x44>)
 8006004:	f000 fc64 	bl	80068d0 <_init>
 8006008:	1b64      	subs	r4, r4, r5
 800600a:	10a4      	asrs	r4, r4, #2
 800600c:	2600      	movs	r6, #0
 800600e:	42a6      	cmp	r6, r4
 8006010:	d105      	bne.n	800601e <__libc_init_array+0x2e>
 8006012:	bd70      	pop	{r4, r5, r6, pc}
 8006014:	f855 3b04 	ldr.w	r3, [r5], #4
 8006018:	4798      	blx	r3
 800601a:	3601      	adds	r6, #1
 800601c:	e7ee      	b.n	8005ffc <__libc_init_array+0xc>
 800601e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006022:	4798      	blx	r3
 8006024:	3601      	adds	r6, #1
 8006026:	e7f2      	b.n	800600e <__libc_init_array+0x1e>
 8006028:	0800697c 	.word	0x0800697c
 800602c:	0800697c 	.word	0x0800697c
 8006030:	0800697c 	.word	0x0800697c
 8006034:	08006980 	.word	0x08006980

08006038 <__retarget_lock_acquire_recursive>:
 8006038:	4770      	bx	lr

0800603a <__retarget_lock_release_recursive>:
 800603a:	4770      	bx	lr

0800603c <memcpy>:
 800603c:	440a      	add	r2, r1
 800603e:	4291      	cmp	r1, r2
 8006040:	f100 33ff 	add.w	r3, r0, #4294967295
 8006044:	d100      	bne.n	8006048 <memcpy+0xc>
 8006046:	4770      	bx	lr
 8006048:	b510      	push	{r4, lr}
 800604a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800604e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006052:	4291      	cmp	r1, r2
 8006054:	d1f9      	bne.n	800604a <memcpy+0xe>
 8006056:	bd10      	pop	{r4, pc}

08006058 <_free_r>:
 8006058:	b538      	push	{r3, r4, r5, lr}
 800605a:	4605      	mov	r5, r0
 800605c:	2900      	cmp	r1, #0
 800605e:	d041      	beq.n	80060e4 <_free_r+0x8c>
 8006060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006064:	1f0c      	subs	r4, r1, #4
 8006066:	2b00      	cmp	r3, #0
 8006068:	bfb8      	it	lt
 800606a:	18e4      	addlt	r4, r4, r3
 800606c:	f000 f8e0 	bl	8006230 <__malloc_lock>
 8006070:	4a1d      	ldr	r2, [pc, #116]	@ (80060e8 <_free_r+0x90>)
 8006072:	6813      	ldr	r3, [r2, #0]
 8006074:	b933      	cbnz	r3, 8006084 <_free_r+0x2c>
 8006076:	6063      	str	r3, [r4, #4]
 8006078:	6014      	str	r4, [r2, #0]
 800607a:	4628      	mov	r0, r5
 800607c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006080:	f000 b8dc 	b.w	800623c <__malloc_unlock>
 8006084:	42a3      	cmp	r3, r4
 8006086:	d908      	bls.n	800609a <_free_r+0x42>
 8006088:	6820      	ldr	r0, [r4, #0]
 800608a:	1821      	adds	r1, r4, r0
 800608c:	428b      	cmp	r3, r1
 800608e:	bf01      	itttt	eq
 8006090:	6819      	ldreq	r1, [r3, #0]
 8006092:	685b      	ldreq	r3, [r3, #4]
 8006094:	1809      	addeq	r1, r1, r0
 8006096:	6021      	streq	r1, [r4, #0]
 8006098:	e7ed      	b.n	8006076 <_free_r+0x1e>
 800609a:	461a      	mov	r2, r3
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	b10b      	cbz	r3, 80060a4 <_free_r+0x4c>
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	d9fa      	bls.n	800609a <_free_r+0x42>
 80060a4:	6811      	ldr	r1, [r2, #0]
 80060a6:	1850      	adds	r0, r2, r1
 80060a8:	42a0      	cmp	r0, r4
 80060aa:	d10b      	bne.n	80060c4 <_free_r+0x6c>
 80060ac:	6820      	ldr	r0, [r4, #0]
 80060ae:	4401      	add	r1, r0
 80060b0:	1850      	adds	r0, r2, r1
 80060b2:	4283      	cmp	r3, r0
 80060b4:	6011      	str	r1, [r2, #0]
 80060b6:	d1e0      	bne.n	800607a <_free_r+0x22>
 80060b8:	6818      	ldr	r0, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	6053      	str	r3, [r2, #4]
 80060be:	4408      	add	r0, r1
 80060c0:	6010      	str	r0, [r2, #0]
 80060c2:	e7da      	b.n	800607a <_free_r+0x22>
 80060c4:	d902      	bls.n	80060cc <_free_r+0x74>
 80060c6:	230c      	movs	r3, #12
 80060c8:	602b      	str	r3, [r5, #0]
 80060ca:	e7d6      	b.n	800607a <_free_r+0x22>
 80060cc:	6820      	ldr	r0, [r4, #0]
 80060ce:	1821      	adds	r1, r4, r0
 80060d0:	428b      	cmp	r3, r1
 80060d2:	bf04      	itt	eq
 80060d4:	6819      	ldreq	r1, [r3, #0]
 80060d6:	685b      	ldreq	r3, [r3, #4]
 80060d8:	6063      	str	r3, [r4, #4]
 80060da:	bf04      	itt	eq
 80060dc:	1809      	addeq	r1, r1, r0
 80060de:	6021      	streq	r1, [r4, #0]
 80060e0:	6054      	str	r4, [r2, #4]
 80060e2:	e7ca      	b.n	800607a <_free_r+0x22>
 80060e4:	bd38      	pop	{r3, r4, r5, pc}
 80060e6:	bf00      	nop
 80060e8:	2000460c 	.word	0x2000460c

080060ec <sbrk_aligned>:
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	4e0f      	ldr	r6, [pc, #60]	@ (800612c <sbrk_aligned+0x40>)
 80060f0:	460c      	mov	r4, r1
 80060f2:	6831      	ldr	r1, [r6, #0]
 80060f4:	4605      	mov	r5, r0
 80060f6:	b911      	cbnz	r1, 80060fe <sbrk_aligned+0x12>
 80060f8:	f000 fba4 	bl	8006844 <_sbrk_r>
 80060fc:	6030      	str	r0, [r6, #0]
 80060fe:	4621      	mov	r1, r4
 8006100:	4628      	mov	r0, r5
 8006102:	f000 fb9f 	bl	8006844 <_sbrk_r>
 8006106:	1c43      	adds	r3, r0, #1
 8006108:	d103      	bne.n	8006112 <sbrk_aligned+0x26>
 800610a:	f04f 34ff 	mov.w	r4, #4294967295
 800610e:	4620      	mov	r0, r4
 8006110:	bd70      	pop	{r4, r5, r6, pc}
 8006112:	1cc4      	adds	r4, r0, #3
 8006114:	f024 0403 	bic.w	r4, r4, #3
 8006118:	42a0      	cmp	r0, r4
 800611a:	d0f8      	beq.n	800610e <sbrk_aligned+0x22>
 800611c:	1a21      	subs	r1, r4, r0
 800611e:	4628      	mov	r0, r5
 8006120:	f000 fb90 	bl	8006844 <_sbrk_r>
 8006124:	3001      	adds	r0, #1
 8006126:	d1f2      	bne.n	800610e <sbrk_aligned+0x22>
 8006128:	e7ef      	b.n	800610a <sbrk_aligned+0x1e>
 800612a:	bf00      	nop
 800612c:	20004608 	.word	0x20004608

08006130 <_malloc_r>:
 8006130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006134:	1ccd      	adds	r5, r1, #3
 8006136:	f025 0503 	bic.w	r5, r5, #3
 800613a:	3508      	adds	r5, #8
 800613c:	2d0c      	cmp	r5, #12
 800613e:	bf38      	it	cc
 8006140:	250c      	movcc	r5, #12
 8006142:	2d00      	cmp	r5, #0
 8006144:	4606      	mov	r6, r0
 8006146:	db01      	blt.n	800614c <_malloc_r+0x1c>
 8006148:	42a9      	cmp	r1, r5
 800614a:	d904      	bls.n	8006156 <_malloc_r+0x26>
 800614c:	230c      	movs	r3, #12
 800614e:	6033      	str	r3, [r6, #0]
 8006150:	2000      	movs	r0, #0
 8006152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006156:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800622c <_malloc_r+0xfc>
 800615a:	f000 f869 	bl	8006230 <__malloc_lock>
 800615e:	f8d8 3000 	ldr.w	r3, [r8]
 8006162:	461c      	mov	r4, r3
 8006164:	bb44      	cbnz	r4, 80061b8 <_malloc_r+0x88>
 8006166:	4629      	mov	r1, r5
 8006168:	4630      	mov	r0, r6
 800616a:	f7ff ffbf 	bl	80060ec <sbrk_aligned>
 800616e:	1c43      	adds	r3, r0, #1
 8006170:	4604      	mov	r4, r0
 8006172:	d158      	bne.n	8006226 <_malloc_r+0xf6>
 8006174:	f8d8 4000 	ldr.w	r4, [r8]
 8006178:	4627      	mov	r7, r4
 800617a:	2f00      	cmp	r7, #0
 800617c:	d143      	bne.n	8006206 <_malloc_r+0xd6>
 800617e:	2c00      	cmp	r4, #0
 8006180:	d04b      	beq.n	800621a <_malloc_r+0xea>
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	4639      	mov	r1, r7
 8006186:	4630      	mov	r0, r6
 8006188:	eb04 0903 	add.w	r9, r4, r3
 800618c:	f000 fb5a 	bl	8006844 <_sbrk_r>
 8006190:	4581      	cmp	r9, r0
 8006192:	d142      	bne.n	800621a <_malloc_r+0xea>
 8006194:	6821      	ldr	r1, [r4, #0]
 8006196:	1a6d      	subs	r5, r5, r1
 8006198:	4629      	mov	r1, r5
 800619a:	4630      	mov	r0, r6
 800619c:	f7ff ffa6 	bl	80060ec <sbrk_aligned>
 80061a0:	3001      	adds	r0, #1
 80061a2:	d03a      	beq.n	800621a <_malloc_r+0xea>
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	442b      	add	r3, r5
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	f8d8 3000 	ldr.w	r3, [r8]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	bb62      	cbnz	r2, 800620c <_malloc_r+0xdc>
 80061b2:	f8c8 7000 	str.w	r7, [r8]
 80061b6:	e00f      	b.n	80061d8 <_malloc_r+0xa8>
 80061b8:	6822      	ldr	r2, [r4, #0]
 80061ba:	1b52      	subs	r2, r2, r5
 80061bc:	d420      	bmi.n	8006200 <_malloc_r+0xd0>
 80061be:	2a0b      	cmp	r2, #11
 80061c0:	d917      	bls.n	80061f2 <_malloc_r+0xc2>
 80061c2:	1961      	adds	r1, r4, r5
 80061c4:	42a3      	cmp	r3, r4
 80061c6:	6025      	str	r5, [r4, #0]
 80061c8:	bf18      	it	ne
 80061ca:	6059      	strne	r1, [r3, #4]
 80061cc:	6863      	ldr	r3, [r4, #4]
 80061ce:	bf08      	it	eq
 80061d0:	f8c8 1000 	streq.w	r1, [r8]
 80061d4:	5162      	str	r2, [r4, r5]
 80061d6:	604b      	str	r3, [r1, #4]
 80061d8:	4630      	mov	r0, r6
 80061da:	f000 f82f 	bl	800623c <__malloc_unlock>
 80061de:	f104 000b 	add.w	r0, r4, #11
 80061e2:	1d23      	adds	r3, r4, #4
 80061e4:	f020 0007 	bic.w	r0, r0, #7
 80061e8:	1ac2      	subs	r2, r0, r3
 80061ea:	bf1c      	itt	ne
 80061ec:	1a1b      	subne	r3, r3, r0
 80061ee:	50a3      	strne	r3, [r4, r2]
 80061f0:	e7af      	b.n	8006152 <_malloc_r+0x22>
 80061f2:	6862      	ldr	r2, [r4, #4]
 80061f4:	42a3      	cmp	r3, r4
 80061f6:	bf0c      	ite	eq
 80061f8:	f8c8 2000 	streq.w	r2, [r8]
 80061fc:	605a      	strne	r2, [r3, #4]
 80061fe:	e7eb      	b.n	80061d8 <_malloc_r+0xa8>
 8006200:	4623      	mov	r3, r4
 8006202:	6864      	ldr	r4, [r4, #4]
 8006204:	e7ae      	b.n	8006164 <_malloc_r+0x34>
 8006206:	463c      	mov	r4, r7
 8006208:	687f      	ldr	r7, [r7, #4]
 800620a:	e7b6      	b.n	800617a <_malloc_r+0x4a>
 800620c:	461a      	mov	r2, r3
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	42a3      	cmp	r3, r4
 8006212:	d1fb      	bne.n	800620c <_malloc_r+0xdc>
 8006214:	2300      	movs	r3, #0
 8006216:	6053      	str	r3, [r2, #4]
 8006218:	e7de      	b.n	80061d8 <_malloc_r+0xa8>
 800621a:	230c      	movs	r3, #12
 800621c:	6033      	str	r3, [r6, #0]
 800621e:	4630      	mov	r0, r6
 8006220:	f000 f80c 	bl	800623c <__malloc_unlock>
 8006224:	e794      	b.n	8006150 <_malloc_r+0x20>
 8006226:	6005      	str	r5, [r0, #0]
 8006228:	e7d6      	b.n	80061d8 <_malloc_r+0xa8>
 800622a:	bf00      	nop
 800622c:	2000460c 	.word	0x2000460c

08006230 <__malloc_lock>:
 8006230:	4801      	ldr	r0, [pc, #4]	@ (8006238 <__malloc_lock+0x8>)
 8006232:	f7ff bf01 	b.w	8006038 <__retarget_lock_acquire_recursive>
 8006236:	bf00      	nop
 8006238:	20004604 	.word	0x20004604

0800623c <__malloc_unlock>:
 800623c:	4801      	ldr	r0, [pc, #4]	@ (8006244 <__malloc_unlock+0x8>)
 800623e:	f7ff befc 	b.w	800603a <__retarget_lock_release_recursive>
 8006242:	bf00      	nop
 8006244:	20004604 	.word	0x20004604

08006248 <__ssputs_r>:
 8006248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800624c:	688e      	ldr	r6, [r1, #8]
 800624e:	461f      	mov	r7, r3
 8006250:	42be      	cmp	r6, r7
 8006252:	680b      	ldr	r3, [r1, #0]
 8006254:	4682      	mov	sl, r0
 8006256:	460c      	mov	r4, r1
 8006258:	4690      	mov	r8, r2
 800625a:	d82d      	bhi.n	80062b8 <__ssputs_r+0x70>
 800625c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006260:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006264:	d026      	beq.n	80062b4 <__ssputs_r+0x6c>
 8006266:	6965      	ldr	r5, [r4, #20]
 8006268:	6909      	ldr	r1, [r1, #16]
 800626a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800626e:	eba3 0901 	sub.w	r9, r3, r1
 8006272:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006276:	1c7b      	adds	r3, r7, #1
 8006278:	444b      	add	r3, r9
 800627a:	106d      	asrs	r5, r5, #1
 800627c:	429d      	cmp	r5, r3
 800627e:	bf38      	it	cc
 8006280:	461d      	movcc	r5, r3
 8006282:	0553      	lsls	r3, r2, #21
 8006284:	d527      	bpl.n	80062d6 <__ssputs_r+0x8e>
 8006286:	4629      	mov	r1, r5
 8006288:	f7ff ff52 	bl	8006130 <_malloc_r>
 800628c:	4606      	mov	r6, r0
 800628e:	b360      	cbz	r0, 80062ea <__ssputs_r+0xa2>
 8006290:	6921      	ldr	r1, [r4, #16]
 8006292:	464a      	mov	r2, r9
 8006294:	f7ff fed2 	bl	800603c <memcpy>
 8006298:	89a3      	ldrh	r3, [r4, #12]
 800629a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800629e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062a2:	81a3      	strh	r3, [r4, #12]
 80062a4:	6126      	str	r6, [r4, #16]
 80062a6:	6165      	str	r5, [r4, #20]
 80062a8:	444e      	add	r6, r9
 80062aa:	eba5 0509 	sub.w	r5, r5, r9
 80062ae:	6026      	str	r6, [r4, #0]
 80062b0:	60a5      	str	r5, [r4, #8]
 80062b2:	463e      	mov	r6, r7
 80062b4:	42be      	cmp	r6, r7
 80062b6:	d900      	bls.n	80062ba <__ssputs_r+0x72>
 80062b8:	463e      	mov	r6, r7
 80062ba:	6820      	ldr	r0, [r4, #0]
 80062bc:	4632      	mov	r2, r6
 80062be:	4641      	mov	r1, r8
 80062c0:	f000 faa6 	bl	8006810 <memmove>
 80062c4:	68a3      	ldr	r3, [r4, #8]
 80062c6:	1b9b      	subs	r3, r3, r6
 80062c8:	60a3      	str	r3, [r4, #8]
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	4433      	add	r3, r6
 80062ce:	6023      	str	r3, [r4, #0]
 80062d0:	2000      	movs	r0, #0
 80062d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062d6:	462a      	mov	r2, r5
 80062d8:	f000 fac4 	bl	8006864 <_realloc_r>
 80062dc:	4606      	mov	r6, r0
 80062de:	2800      	cmp	r0, #0
 80062e0:	d1e0      	bne.n	80062a4 <__ssputs_r+0x5c>
 80062e2:	6921      	ldr	r1, [r4, #16]
 80062e4:	4650      	mov	r0, sl
 80062e6:	f7ff feb7 	bl	8006058 <_free_r>
 80062ea:	230c      	movs	r3, #12
 80062ec:	f8ca 3000 	str.w	r3, [sl]
 80062f0:	89a3      	ldrh	r3, [r4, #12]
 80062f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062f6:	81a3      	strh	r3, [r4, #12]
 80062f8:	f04f 30ff 	mov.w	r0, #4294967295
 80062fc:	e7e9      	b.n	80062d2 <__ssputs_r+0x8a>
	...

08006300 <_svfiprintf_r>:
 8006300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006304:	4698      	mov	r8, r3
 8006306:	898b      	ldrh	r3, [r1, #12]
 8006308:	061b      	lsls	r3, r3, #24
 800630a:	b09d      	sub	sp, #116	@ 0x74
 800630c:	4607      	mov	r7, r0
 800630e:	460d      	mov	r5, r1
 8006310:	4614      	mov	r4, r2
 8006312:	d510      	bpl.n	8006336 <_svfiprintf_r+0x36>
 8006314:	690b      	ldr	r3, [r1, #16]
 8006316:	b973      	cbnz	r3, 8006336 <_svfiprintf_r+0x36>
 8006318:	2140      	movs	r1, #64	@ 0x40
 800631a:	f7ff ff09 	bl	8006130 <_malloc_r>
 800631e:	6028      	str	r0, [r5, #0]
 8006320:	6128      	str	r0, [r5, #16]
 8006322:	b930      	cbnz	r0, 8006332 <_svfiprintf_r+0x32>
 8006324:	230c      	movs	r3, #12
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	f04f 30ff 	mov.w	r0, #4294967295
 800632c:	b01d      	add	sp, #116	@ 0x74
 800632e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006332:	2340      	movs	r3, #64	@ 0x40
 8006334:	616b      	str	r3, [r5, #20]
 8006336:	2300      	movs	r3, #0
 8006338:	9309      	str	r3, [sp, #36]	@ 0x24
 800633a:	2320      	movs	r3, #32
 800633c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006340:	f8cd 800c 	str.w	r8, [sp, #12]
 8006344:	2330      	movs	r3, #48	@ 0x30
 8006346:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80064e4 <_svfiprintf_r+0x1e4>
 800634a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800634e:	f04f 0901 	mov.w	r9, #1
 8006352:	4623      	mov	r3, r4
 8006354:	469a      	mov	sl, r3
 8006356:	f813 2b01 	ldrb.w	r2, [r3], #1
 800635a:	b10a      	cbz	r2, 8006360 <_svfiprintf_r+0x60>
 800635c:	2a25      	cmp	r2, #37	@ 0x25
 800635e:	d1f9      	bne.n	8006354 <_svfiprintf_r+0x54>
 8006360:	ebba 0b04 	subs.w	fp, sl, r4
 8006364:	d00b      	beq.n	800637e <_svfiprintf_r+0x7e>
 8006366:	465b      	mov	r3, fp
 8006368:	4622      	mov	r2, r4
 800636a:	4629      	mov	r1, r5
 800636c:	4638      	mov	r0, r7
 800636e:	f7ff ff6b 	bl	8006248 <__ssputs_r>
 8006372:	3001      	adds	r0, #1
 8006374:	f000 80a7 	beq.w	80064c6 <_svfiprintf_r+0x1c6>
 8006378:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800637a:	445a      	add	r2, fp
 800637c:	9209      	str	r2, [sp, #36]	@ 0x24
 800637e:	f89a 3000 	ldrb.w	r3, [sl]
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 809f 	beq.w	80064c6 <_svfiprintf_r+0x1c6>
 8006388:	2300      	movs	r3, #0
 800638a:	f04f 32ff 	mov.w	r2, #4294967295
 800638e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006392:	f10a 0a01 	add.w	sl, sl, #1
 8006396:	9304      	str	r3, [sp, #16]
 8006398:	9307      	str	r3, [sp, #28]
 800639a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800639e:	931a      	str	r3, [sp, #104]	@ 0x68
 80063a0:	4654      	mov	r4, sl
 80063a2:	2205      	movs	r2, #5
 80063a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063a8:	484e      	ldr	r0, [pc, #312]	@ (80064e4 <_svfiprintf_r+0x1e4>)
 80063aa:	f7f9 ff19 	bl	80001e0 <memchr>
 80063ae:	9a04      	ldr	r2, [sp, #16]
 80063b0:	b9d8      	cbnz	r0, 80063ea <_svfiprintf_r+0xea>
 80063b2:	06d0      	lsls	r0, r2, #27
 80063b4:	bf44      	itt	mi
 80063b6:	2320      	movmi	r3, #32
 80063b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063bc:	0711      	lsls	r1, r2, #28
 80063be:	bf44      	itt	mi
 80063c0:	232b      	movmi	r3, #43	@ 0x2b
 80063c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063c6:	f89a 3000 	ldrb.w	r3, [sl]
 80063ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80063cc:	d015      	beq.n	80063fa <_svfiprintf_r+0xfa>
 80063ce:	9a07      	ldr	r2, [sp, #28]
 80063d0:	4654      	mov	r4, sl
 80063d2:	2000      	movs	r0, #0
 80063d4:	f04f 0c0a 	mov.w	ip, #10
 80063d8:	4621      	mov	r1, r4
 80063da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063de:	3b30      	subs	r3, #48	@ 0x30
 80063e0:	2b09      	cmp	r3, #9
 80063e2:	d94b      	bls.n	800647c <_svfiprintf_r+0x17c>
 80063e4:	b1b0      	cbz	r0, 8006414 <_svfiprintf_r+0x114>
 80063e6:	9207      	str	r2, [sp, #28]
 80063e8:	e014      	b.n	8006414 <_svfiprintf_r+0x114>
 80063ea:	eba0 0308 	sub.w	r3, r0, r8
 80063ee:	fa09 f303 	lsl.w	r3, r9, r3
 80063f2:	4313      	orrs	r3, r2
 80063f4:	9304      	str	r3, [sp, #16]
 80063f6:	46a2      	mov	sl, r4
 80063f8:	e7d2      	b.n	80063a0 <_svfiprintf_r+0xa0>
 80063fa:	9b03      	ldr	r3, [sp, #12]
 80063fc:	1d19      	adds	r1, r3, #4
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	9103      	str	r1, [sp, #12]
 8006402:	2b00      	cmp	r3, #0
 8006404:	bfbb      	ittet	lt
 8006406:	425b      	neglt	r3, r3
 8006408:	f042 0202 	orrlt.w	r2, r2, #2
 800640c:	9307      	strge	r3, [sp, #28]
 800640e:	9307      	strlt	r3, [sp, #28]
 8006410:	bfb8      	it	lt
 8006412:	9204      	strlt	r2, [sp, #16]
 8006414:	7823      	ldrb	r3, [r4, #0]
 8006416:	2b2e      	cmp	r3, #46	@ 0x2e
 8006418:	d10a      	bne.n	8006430 <_svfiprintf_r+0x130>
 800641a:	7863      	ldrb	r3, [r4, #1]
 800641c:	2b2a      	cmp	r3, #42	@ 0x2a
 800641e:	d132      	bne.n	8006486 <_svfiprintf_r+0x186>
 8006420:	9b03      	ldr	r3, [sp, #12]
 8006422:	1d1a      	adds	r2, r3, #4
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	9203      	str	r2, [sp, #12]
 8006428:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800642c:	3402      	adds	r4, #2
 800642e:	9305      	str	r3, [sp, #20]
 8006430:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80064f4 <_svfiprintf_r+0x1f4>
 8006434:	7821      	ldrb	r1, [r4, #0]
 8006436:	2203      	movs	r2, #3
 8006438:	4650      	mov	r0, sl
 800643a:	f7f9 fed1 	bl	80001e0 <memchr>
 800643e:	b138      	cbz	r0, 8006450 <_svfiprintf_r+0x150>
 8006440:	9b04      	ldr	r3, [sp, #16]
 8006442:	eba0 000a 	sub.w	r0, r0, sl
 8006446:	2240      	movs	r2, #64	@ 0x40
 8006448:	4082      	lsls	r2, r0
 800644a:	4313      	orrs	r3, r2
 800644c:	3401      	adds	r4, #1
 800644e:	9304      	str	r3, [sp, #16]
 8006450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006454:	4824      	ldr	r0, [pc, #144]	@ (80064e8 <_svfiprintf_r+0x1e8>)
 8006456:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800645a:	2206      	movs	r2, #6
 800645c:	f7f9 fec0 	bl	80001e0 <memchr>
 8006460:	2800      	cmp	r0, #0
 8006462:	d036      	beq.n	80064d2 <_svfiprintf_r+0x1d2>
 8006464:	4b21      	ldr	r3, [pc, #132]	@ (80064ec <_svfiprintf_r+0x1ec>)
 8006466:	bb1b      	cbnz	r3, 80064b0 <_svfiprintf_r+0x1b0>
 8006468:	9b03      	ldr	r3, [sp, #12]
 800646a:	3307      	adds	r3, #7
 800646c:	f023 0307 	bic.w	r3, r3, #7
 8006470:	3308      	adds	r3, #8
 8006472:	9303      	str	r3, [sp, #12]
 8006474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006476:	4433      	add	r3, r6
 8006478:	9309      	str	r3, [sp, #36]	@ 0x24
 800647a:	e76a      	b.n	8006352 <_svfiprintf_r+0x52>
 800647c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006480:	460c      	mov	r4, r1
 8006482:	2001      	movs	r0, #1
 8006484:	e7a8      	b.n	80063d8 <_svfiprintf_r+0xd8>
 8006486:	2300      	movs	r3, #0
 8006488:	3401      	adds	r4, #1
 800648a:	9305      	str	r3, [sp, #20]
 800648c:	4619      	mov	r1, r3
 800648e:	f04f 0c0a 	mov.w	ip, #10
 8006492:	4620      	mov	r0, r4
 8006494:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006498:	3a30      	subs	r2, #48	@ 0x30
 800649a:	2a09      	cmp	r2, #9
 800649c:	d903      	bls.n	80064a6 <_svfiprintf_r+0x1a6>
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d0c6      	beq.n	8006430 <_svfiprintf_r+0x130>
 80064a2:	9105      	str	r1, [sp, #20]
 80064a4:	e7c4      	b.n	8006430 <_svfiprintf_r+0x130>
 80064a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80064aa:	4604      	mov	r4, r0
 80064ac:	2301      	movs	r3, #1
 80064ae:	e7f0      	b.n	8006492 <_svfiprintf_r+0x192>
 80064b0:	ab03      	add	r3, sp, #12
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	462a      	mov	r2, r5
 80064b6:	4b0e      	ldr	r3, [pc, #56]	@ (80064f0 <_svfiprintf_r+0x1f0>)
 80064b8:	a904      	add	r1, sp, #16
 80064ba:	4638      	mov	r0, r7
 80064bc:	f3af 8000 	nop.w
 80064c0:	1c42      	adds	r2, r0, #1
 80064c2:	4606      	mov	r6, r0
 80064c4:	d1d6      	bne.n	8006474 <_svfiprintf_r+0x174>
 80064c6:	89ab      	ldrh	r3, [r5, #12]
 80064c8:	065b      	lsls	r3, r3, #25
 80064ca:	f53f af2d 	bmi.w	8006328 <_svfiprintf_r+0x28>
 80064ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064d0:	e72c      	b.n	800632c <_svfiprintf_r+0x2c>
 80064d2:	ab03      	add	r3, sp, #12
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	462a      	mov	r2, r5
 80064d8:	4b05      	ldr	r3, [pc, #20]	@ (80064f0 <_svfiprintf_r+0x1f0>)
 80064da:	a904      	add	r1, sp, #16
 80064dc:	4638      	mov	r0, r7
 80064de:	f000 f879 	bl	80065d4 <_printf_i>
 80064e2:	e7ed      	b.n	80064c0 <_svfiprintf_r+0x1c0>
 80064e4:	08006940 	.word	0x08006940
 80064e8:	0800694a 	.word	0x0800694a
 80064ec:	00000000 	.word	0x00000000
 80064f0:	08006249 	.word	0x08006249
 80064f4:	08006946 	.word	0x08006946

080064f8 <_printf_common>:
 80064f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064fc:	4616      	mov	r6, r2
 80064fe:	4698      	mov	r8, r3
 8006500:	688a      	ldr	r2, [r1, #8]
 8006502:	690b      	ldr	r3, [r1, #16]
 8006504:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006508:	4293      	cmp	r3, r2
 800650a:	bfb8      	it	lt
 800650c:	4613      	movlt	r3, r2
 800650e:	6033      	str	r3, [r6, #0]
 8006510:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006514:	4607      	mov	r7, r0
 8006516:	460c      	mov	r4, r1
 8006518:	b10a      	cbz	r2, 800651e <_printf_common+0x26>
 800651a:	3301      	adds	r3, #1
 800651c:	6033      	str	r3, [r6, #0]
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	0699      	lsls	r1, r3, #26
 8006522:	bf42      	ittt	mi
 8006524:	6833      	ldrmi	r3, [r6, #0]
 8006526:	3302      	addmi	r3, #2
 8006528:	6033      	strmi	r3, [r6, #0]
 800652a:	6825      	ldr	r5, [r4, #0]
 800652c:	f015 0506 	ands.w	r5, r5, #6
 8006530:	d106      	bne.n	8006540 <_printf_common+0x48>
 8006532:	f104 0a19 	add.w	sl, r4, #25
 8006536:	68e3      	ldr	r3, [r4, #12]
 8006538:	6832      	ldr	r2, [r6, #0]
 800653a:	1a9b      	subs	r3, r3, r2
 800653c:	42ab      	cmp	r3, r5
 800653e:	dc26      	bgt.n	800658e <_printf_common+0x96>
 8006540:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006544:	6822      	ldr	r2, [r4, #0]
 8006546:	3b00      	subs	r3, #0
 8006548:	bf18      	it	ne
 800654a:	2301      	movne	r3, #1
 800654c:	0692      	lsls	r2, r2, #26
 800654e:	d42b      	bmi.n	80065a8 <_printf_common+0xb0>
 8006550:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006554:	4641      	mov	r1, r8
 8006556:	4638      	mov	r0, r7
 8006558:	47c8      	blx	r9
 800655a:	3001      	adds	r0, #1
 800655c:	d01e      	beq.n	800659c <_printf_common+0xa4>
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	6922      	ldr	r2, [r4, #16]
 8006562:	f003 0306 	and.w	r3, r3, #6
 8006566:	2b04      	cmp	r3, #4
 8006568:	bf02      	ittt	eq
 800656a:	68e5      	ldreq	r5, [r4, #12]
 800656c:	6833      	ldreq	r3, [r6, #0]
 800656e:	1aed      	subeq	r5, r5, r3
 8006570:	68a3      	ldr	r3, [r4, #8]
 8006572:	bf0c      	ite	eq
 8006574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006578:	2500      	movne	r5, #0
 800657a:	4293      	cmp	r3, r2
 800657c:	bfc4      	itt	gt
 800657e:	1a9b      	subgt	r3, r3, r2
 8006580:	18ed      	addgt	r5, r5, r3
 8006582:	2600      	movs	r6, #0
 8006584:	341a      	adds	r4, #26
 8006586:	42b5      	cmp	r5, r6
 8006588:	d11a      	bne.n	80065c0 <_printf_common+0xc8>
 800658a:	2000      	movs	r0, #0
 800658c:	e008      	b.n	80065a0 <_printf_common+0xa8>
 800658e:	2301      	movs	r3, #1
 8006590:	4652      	mov	r2, sl
 8006592:	4641      	mov	r1, r8
 8006594:	4638      	mov	r0, r7
 8006596:	47c8      	blx	r9
 8006598:	3001      	adds	r0, #1
 800659a:	d103      	bne.n	80065a4 <_printf_common+0xac>
 800659c:	f04f 30ff 	mov.w	r0, #4294967295
 80065a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a4:	3501      	adds	r5, #1
 80065a6:	e7c6      	b.n	8006536 <_printf_common+0x3e>
 80065a8:	18e1      	adds	r1, r4, r3
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	2030      	movs	r0, #48	@ 0x30
 80065ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065b2:	4422      	add	r2, r4
 80065b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065bc:	3302      	adds	r3, #2
 80065be:	e7c7      	b.n	8006550 <_printf_common+0x58>
 80065c0:	2301      	movs	r3, #1
 80065c2:	4622      	mov	r2, r4
 80065c4:	4641      	mov	r1, r8
 80065c6:	4638      	mov	r0, r7
 80065c8:	47c8      	blx	r9
 80065ca:	3001      	adds	r0, #1
 80065cc:	d0e6      	beq.n	800659c <_printf_common+0xa4>
 80065ce:	3601      	adds	r6, #1
 80065d0:	e7d9      	b.n	8006586 <_printf_common+0x8e>
	...

080065d4 <_printf_i>:
 80065d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065d8:	7e0f      	ldrb	r7, [r1, #24]
 80065da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065dc:	2f78      	cmp	r7, #120	@ 0x78
 80065de:	4691      	mov	r9, r2
 80065e0:	4680      	mov	r8, r0
 80065e2:	460c      	mov	r4, r1
 80065e4:	469a      	mov	sl, r3
 80065e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065ea:	d807      	bhi.n	80065fc <_printf_i+0x28>
 80065ec:	2f62      	cmp	r7, #98	@ 0x62
 80065ee:	d80a      	bhi.n	8006606 <_printf_i+0x32>
 80065f0:	2f00      	cmp	r7, #0
 80065f2:	f000 80d1 	beq.w	8006798 <_printf_i+0x1c4>
 80065f6:	2f58      	cmp	r7, #88	@ 0x58
 80065f8:	f000 80b8 	beq.w	800676c <_printf_i+0x198>
 80065fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006600:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006604:	e03a      	b.n	800667c <_printf_i+0xa8>
 8006606:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800660a:	2b15      	cmp	r3, #21
 800660c:	d8f6      	bhi.n	80065fc <_printf_i+0x28>
 800660e:	a101      	add	r1, pc, #4	@ (adr r1, 8006614 <_printf_i+0x40>)
 8006610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006614:	0800666d 	.word	0x0800666d
 8006618:	08006681 	.word	0x08006681
 800661c:	080065fd 	.word	0x080065fd
 8006620:	080065fd 	.word	0x080065fd
 8006624:	080065fd 	.word	0x080065fd
 8006628:	080065fd 	.word	0x080065fd
 800662c:	08006681 	.word	0x08006681
 8006630:	080065fd 	.word	0x080065fd
 8006634:	080065fd 	.word	0x080065fd
 8006638:	080065fd 	.word	0x080065fd
 800663c:	080065fd 	.word	0x080065fd
 8006640:	0800677f 	.word	0x0800677f
 8006644:	080066ab 	.word	0x080066ab
 8006648:	08006739 	.word	0x08006739
 800664c:	080065fd 	.word	0x080065fd
 8006650:	080065fd 	.word	0x080065fd
 8006654:	080067a1 	.word	0x080067a1
 8006658:	080065fd 	.word	0x080065fd
 800665c:	080066ab 	.word	0x080066ab
 8006660:	080065fd 	.word	0x080065fd
 8006664:	080065fd 	.word	0x080065fd
 8006668:	08006741 	.word	0x08006741
 800666c:	6833      	ldr	r3, [r6, #0]
 800666e:	1d1a      	adds	r2, r3, #4
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6032      	str	r2, [r6, #0]
 8006674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006678:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800667c:	2301      	movs	r3, #1
 800667e:	e09c      	b.n	80067ba <_printf_i+0x1e6>
 8006680:	6833      	ldr	r3, [r6, #0]
 8006682:	6820      	ldr	r0, [r4, #0]
 8006684:	1d19      	adds	r1, r3, #4
 8006686:	6031      	str	r1, [r6, #0]
 8006688:	0606      	lsls	r6, r0, #24
 800668a:	d501      	bpl.n	8006690 <_printf_i+0xbc>
 800668c:	681d      	ldr	r5, [r3, #0]
 800668e:	e003      	b.n	8006698 <_printf_i+0xc4>
 8006690:	0645      	lsls	r5, r0, #25
 8006692:	d5fb      	bpl.n	800668c <_printf_i+0xb8>
 8006694:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006698:	2d00      	cmp	r5, #0
 800669a:	da03      	bge.n	80066a4 <_printf_i+0xd0>
 800669c:	232d      	movs	r3, #45	@ 0x2d
 800669e:	426d      	negs	r5, r5
 80066a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066a4:	4858      	ldr	r0, [pc, #352]	@ (8006808 <_printf_i+0x234>)
 80066a6:	230a      	movs	r3, #10
 80066a8:	e011      	b.n	80066ce <_printf_i+0xfa>
 80066aa:	6821      	ldr	r1, [r4, #0]
 80066ac:	6833      	ldr	r3, [r6, #0]
 80066ae:	0608      	lsls	r0, r1, #24
 80066b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80066b4:	d402      	bmi.n	80066bc <_printf_i+0xe8>
 80066b6:	0649      	lsls	r1, r1, #25
 80066b8:	bf48      	it	mi
 80066ba:	b2ad      	uxthmi	r5, r5
 80066bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80066be:	4852      	ldr	r0, [pc, #328]	@ (8006808 <_printf_i+0x234>)
 80066c0:	6033      	str	r3, [r6, #0]
 80066c2:	bf14      	ite	ne
 80066c4:	230a      	movne	r3, #10
 80066c6:	2308      	moveq	r3, #8
 80066c8:	2100      	movs	r1, #0
 80066ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066ce:	6866      	ldr	r6, [r4, #4]
 80066d0:	60a6      	str	r6, [r4, #8]
 80066d2:	2e00      	cmp	r6, #0
 80066d4:	db05      	blt.n	80066e2 <_printf_i+0x10e>
 80066d6:	6821      	ldr	r1, [r4, #0]
 80066d8:	432e      	orrs	r6, r5
 80066da:	f021 0104 	bic.w	r1, r1, #4
 80066de:	6021      	str	r1, [r4, #0]
 80066e0:	d04b      	beq.n	800677a <_printf_i+0x1a6>
 80066e2:	4616      	mov	r6, r2
 80066e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80066e8:	fb03 5711 	mls	r7, r3, r1, r5
 80066ec:	5dc7      	ldrb	r7, [r0, r7]
 80066ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066f2:	462f      	mov	r7, r5
 80066f4:	42bb      	cmp	r3, r7
 80066f6:	460d      	mov	r5, r1
 80066f8:	d9f4      	bls.n	80066e4 <_printf_i+0x110>
 80066fa:	2b08      	cmp	r3, #8
 80066fc:	d10b      	bne.n	8006716 <_printf_i+0x142>
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	07df      	lsls	r7, r3, #31
 8006702:	d508      	bpl.n	8006716 <_printf_i+0x142>
 8006704:	6923      	ldr	r3, [r4, #16]
 8006706:	6861      	ldr	r1, [r4, #4]
 8006708:	4299      	cmp	r1, r3
 800670a:	bfde      	ittt	le
 800670c:	2330      	movle	r3, #48	@ 0x30
 800670e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006712:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006716:	1b92      	subs	r2, r2, r6
 8006718:	6122      	str	r2, [r4, #16]
 800671a:	f8cd a000 	str.w	sl, [sp]
 800671e:	464b      	mov	r3, r9
 8006720:	aa03      	add	r2, sp, #12
 8006722:	4621      	mov	r1, r4
 8006724:	4640      	mov	r0, r8
 8006726:	f7ff fee7 	bl	80064f8 <_printf_common>
 800672a:	3001      	adds	r0, #1
 800672c:	d14a      	bne.n	80067c4 <_printf_i+0x1f0>
 800672e:	f04f 30ff 	mov.w	r0, #4294967295
 8006732:	b004      	add	sp, #16
 8006734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006738:	6823      	ldr	r3, [r4, #0]
 800673a:	f043 0320 	orr.w	r3, r3, #32
 800673e:	6023      	str	r3, [r4, #0]
 8006740:	4832      	ldr	r0, [pc, #200]	@ (800680c <_printf_i+0x238>)
 8006742:	2778      	movs	r7, #120	@ 0x78
 8006744:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	6831      	ldr	r1, [r6, #0]
 800674c:	061f      	lsls	r7, r3, #24
 800674e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006752:	d402      	bmi.n	800675a <_printf_i+0x186>
 8006754:	065f      	lsls	r7, r3, #25
 8006756:	bf48      	it	mi
 8006758:	b2ad      	uxthmi	r5, r5
 800675a:	6031      	str	r1, [r6, #0]
 800675c:	07d9      	lsls	r1, r3, #31
 800675e:	bf44      	itt	mi
 8006760:	f043 0320 	orrmi.w	r3, r3, #32
 8006764:	6023      	strmi	r3, [r4, #0]
 8006766:	b11d      	cbz	r5, 8006770 <_printf_i+0x19c>
 8006768:	2310      	movs	r3, #16
 800676a:	e7ad      	b.n	80066c8 <_printf_i+0xf4>
 800676c:	4826      	ldr	r0, [pc, #152]	@ (8006808 <_printf_i+0x234>)
 800676e:	e7e9      	b.n	8006744 <_printf_i+0x170>
 8006770:	6823      	ldr	r3, [r4, #0]
 8006772:	f023 0320 	bic.w	r3, r3, #32
 8006776:	6023      	str	r3, [r4, #0]
 8006778:	e7f6      	b.n	8006768 <_printf_i+0x194>
 800677a:	4616      	mov	r6, r2
 800677c:	e7bd      	b.n	80066fa <_printf_i+0x126>
 800677e:	6833      	ldr	r3, [r6, #0]
 8006780:	6825      	ldr	r5, [r4, #0]
 8006782:	6961      	ldr	r1, [r4, #20]
 8006784:	1d18      	adds	r0, r3, #4
 8006786:	6030      	str	r0, [r6, #0]
 8006788:	062e      	lsls	r6, r5, #24
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	d501      	bpl.n	8006792 <_printf_i+0x1be>
 800678e:	6019      	str	r1, [r3, #0]
 8006790:	e002      	b.n	8006798 <_printf_i+0x1c4>
 8006792:	0668      	lsls	r0, r5, #25
 8006794:	d5fb      	bpl.n	800678e <_printf_i+0x1ba>
 8006796:	8019      	strh	r1, [r3, #0]
 8006798:	2300      	movs	r3, #0
 800679a:	6123      	str	r3, [r4, #16]
 800679c:	4616      	mov	r6, r2
 800679e:	e7bc      	b.n	800671a <_printf_i+0x146>
 80067a0:	6833      	ldr	r3, [r6, #0]
 80067a2:	1d1a      	adds	r2, r3, #4
 80067a4:	6032      	str	r2, [r6, #0]
 80067a6:	681e      	ldr	r6, [r3, #0]
 80067a8:	6862      	ldr	r2, [r4, #4]
 80067aa:	2100      	movs	r1, #0
 80067ac:	4630      	mov	r0, r6
 80067ae:	f7f9 fd17 	bl	80001e0 <memchr>
 80067b2:	b108      	cbz	r0, 80067b8 <_printf_i+0x1e4>
 80067b4:	1b80      	subs	r0, r0, r6
 80067b6:	6060      	str	r0, [r4, #4]
 80067b8:	6863      	ldr	r3, [r4, #4]
 80067ba:	6123      	str	r3, [r4, #16]
 80067bc:	2300      	movs	r3, #0
 80067be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067c2:	e7aa      	b.n	800671a <_printf_i+0x146>
 80067c4:	6923      	ldr	r3, [r4, #16]
 80067c6:	4632      	mov	r2, r6
 80067c8:	4649      	mov	r1, r9
 80067ca:	4640      	mov	r0, r8
 80067cc:	47d0      	blx	sl
 80067ce:	3001      	adds	r0, #1
 80067d0:	d0ad      	beq.n	800672e <_printf_i+0x15a>
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	079b      	lsls	r3, r3, #30
 80067d6:	d413      	bmi.n	8006800 <_printf_i+0x22c>
 80067d8:	68e0      	ldr	r0, [r4, #12]
 80067da:	9b03      	ldr	r3, [sp, #12]
 80067dc:	4298      	cmp	r0, r3
 80067de:	bfb8      	it	lt
 80067e0:	4618      	movlt	r0, r3
 80067e2:	e7a6      	b.n	8006732 <_printf_i+0x15e>
 80067e4:	2301      	movs	r3, #1
 80067e6:	4632      	mov	r2, r6
 80067e8:	4649      	mov	r1, r9
 80067ea:	4640      	mov	r0, r8
 80067ec:	47d0      	blx	sl
 80067ee:	3001      	adds	r0, #1
 80067f0:	d09d      	beq.n	800672e <_printf_i+0x15a>
 80067f2:	3501      	adds	r5, #1
 80067f4:	68e3      	ldr	r3, [r4, #12]
 80067f6:	9903      	ldr	r1, [sp, #12]
 80067f8:	1a5b      	subs	r3, r3, r1
 80067fa:	42ab      	cmp	r3, r5
 80067fc:	dcf2      	bgt.n	80067e4 <_printf_i+0x210>
 80067fe:	e7eb      	b.n	80067d8 <_printf_i+0x204>
 8006800:	2500      	movs	r5, #0
 8006802:	f104 0619 	add.w	r6, r4, #25
 8006806:	e7f5      	b.n	80067f4 <_printf_i+0x220>
 8006808:	08006951 	.word	0x08006951
 800680c:	08006962 	.word	0x08006962

08006810 <memmove>:
 8006810:	4288      	cmp	r0, r1
 8006812:	b510      	push	{r4, lr}
 8006814:	eb01 0402 	add.w	r4, r1, r2
 8006818:	d902      	bls.n	8006820 <memmove+0x10>
 800681a:	4284      	cmp	r4, r0
 800681c:	4623      	mov	r3, r4
 800681e:	d807      	bhi.n	8006830 <memmove+0x20>
 8006820:	1e43      	subs	r3, r0, #1
 8006822:	42a1      	cmp	r1, r4
 8006824:	d008      	beq.n	8006838 <memmove+0x28>
 8006826:	f811 2b01 	ldrb.w	r2, [r1], #1
 800682a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800682e:	e7f8      	b.n	8006822 <memmove+0x12>
 8006830:	4402      	add	r2, r0
 8006832:	4601      	mov	r1, r0
 8006834:	428a      	cmp	r2, r1
 8006836:	d100      	bne.n	800683a <memmove+0x2a>
 8006838:	bd10      	pop	{r4, pc}
 800683a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800683e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006842:	e7f7      	b.n	8006834 <memmove+0x24>

08006844 <_sbrk_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	4d06      	ldr	r5, [pc, #24]	@ (8006860 <_sbrk_r+0x1c>)
 8006848:	2300      	movs	r3, #0
 800684a:	4604      	mov	r4, r0
 800684c:	4608      	mov	r0, r1
 800684e:	602b      	str	r3, [r5, #0]
 8006850:	f7fb fa12 	bl	8001c78 <_sbrk>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	d102      	bne.n	800685e <_sbrk_r+0x1a>
 8006858:	682b      	ldr	r3, [r5, #0]
 800685a:	b103      	cbz	r3, 800685e <_sbrk_r+0x1a>
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	bd38      	pop	{r3, r4, r5, pc}
 8006860:	20004600 	.word	0x20004600

08006864 <_realloc_r>:
 8006864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006868:	4607      	mov	r7, r0
 800686a:	4614      	mov	r4, r2
 800686c:	460d      	mov	r5, r1
 800686e:	b921      	cbnz	r1, 800687a <_realloc_r+0x16>
 8006870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006874:	4611      	mov	r1, r2
 8006876:	f7ff bc5b 	b.w	8006130 <_malloc_r>
 800687a:	b92a      	cbnz	r2, 8006888 <_realloc_r+0x24>
 800687c:	f7ff fbec 	bl	8006058 <_free_r>
 8006880:	4625      	mov	r5, r4
 8006882:	4628      	mov	r0, r5
 8006884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006888:	f000 f81a 	bl	80068c0 <_malloc_usable_size_r>
 800688c:	4284      	cmp	r4, r0
 800688e:	4606      	mov	r6, r0
 8006890:	d802      	bhi.n	8006898 <_realloc_r+0x34>
 8006892:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006896:	d8f4      	bhi.n	8006882 <_realloc_r+0x1e>
 8006898:	4621      	mov	r1, r4
 800689a:	4638      	mov	r0, r7
 800689c:	f7ff fc48 	bl	8006130 <_malloc_r>
 80068a0:	4680      	mov	r8, r0
 80068a2:	b908      	cbnz	r0, 80068a8 <_realloc_r+0x44>
 80068a4:	4645      	mov	r5, r8
 80068a6:	e7ec      	b.n	8006882 <_realloc_r+0x1e>
 80068a8:	42b4      	cmp	r4, r6
 80068aa:	4622      	mov	r2, r4
 80068ac:	4629      	mov	r1, r5
 80068ae:	bf28      	it	cs
 80068b0:	4632      	movcs	r2, r6
 80068b2:	f7ff fbc3 	bl	800603c <memcpy>
 80068b6:	4629      	mov	r1, r5
 80068b8:	4638      	mov	r0, r7
 80068ba:	f7ff fbcd 	bl	8006058 <_free_r>
 80068be:	e7f1      	b.n	80068a4 <_realloc_r+0x40>

080068c0 <_malloc_usable_size_r>:
 80068c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068c4:	1f18      	subs	r0, r3, #4
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	bfbc      	itt	lt
 80068ca:	580b      	ldrlt	r3, [r1, r0]
 80068cc:	18c0      	addlt	r0, r0, r3
 80068ce:	4770      	bx	lr

080068d0 <_init>:
 80068d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d2:	bf00      	nop
 80068d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068d6:	bc08      	pop	{r3}
 80068d8:	469e      	mov	lr, r3
 80068da:	4770      	bx	lr

080068dc <_fini>:
 80068dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068de:	bf00      	nop
 80068e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e2:	bc08      	pop	{r3}
 80068e4:	469e      	mov	lr, r3
 80068e6:	4770      	bx	lr
