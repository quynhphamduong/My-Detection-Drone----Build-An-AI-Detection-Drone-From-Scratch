
drone_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006278  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08006418  08006418  00007418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064a8  080064a8  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  080064a8  080064a8  000074a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064b0  080064b0  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064b0  080064b0  000074b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064b4  080064b4  000074b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080064b8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004590  20000060  08006518  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045f0  08006518  000085f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cce  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003163  00000000  00000000  0001bd5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  0001eec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de9  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ffd  00000000  00000000  00020ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001474e  00000000  00000000  00039ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097b49  00000000  00000000  0004e62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6175  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f90  00000000  00000000  000e61b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000eb148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006400 	.word	0x08006400

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006400 	.word	0x08006400

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Calculate_Reference>:
 */

#include "Drone_control.h"

void Calculate_Reference(Drone_Calculation_Typedef *dr,Drone_Control_Typedef *dc)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	dr->picth_reference=(dc->RV-1500)*0.1f;//we can send reference direct from control
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	885b      	ldrh	r3, [r3, #2]
 800057e:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8000582:	ee07 3a90 	vmov	s15, r3
 8000586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800058a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000600 <Calculate_Reference+0x90>
 800058e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	edc3 7a00 	vstr	s15, [r3]
	dr->roll_reference=(dc->RH-1500)*0.1f;
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80005a0:	ee07 3a90 	vmov	s15, r3
 80005a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005a8:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8000600 <Calculate_Reference+0x90>
 80005ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	edc3 7a01 	vstr	s15, [r3, #4]
	dr->yaw_reference=(dc->LH-1500)*0.1f;
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	88db      	ldrh	r3, [r3, #6]
 80005ba:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80005be:	ee07 3a90 	vmov	s15, r3
 80005c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000600 <Calculate_Reference+0x90>
 80005ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	edc3 7a02 	vstr	s15, [r3, #8]
	dr->high_reference=(dc->LV-1000)*10;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	889b      	ldrh	r3, [r3, #4]
 80005d8:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 80005dc:	4613      	mov	r3, r2
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	4413      	add	r3, r2
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	ee07 3a90 	vmov	s15, r3
 80005e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	3dcccccd 	.word	0x3dcccccd

08000604 <escNormalOneshot125>:
	HAL_Delay(8000);
	HAL_Delay(1000);
}

void escNormalOneshot125(TIM_HandleTypeDef *htim,uint32_t speed,Timer_channel_enumTypedef CHANNEL)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	4613      	mov	r3, r2
 8000610:	71fb      	strb	r3, [r7, #7]
	if(speed>=MAXIMUM_SPEED)
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000618:	4293      	cmp	r3, r2
 800061a:	d903      	bls.n	8000624 <escNormalOneshot125+0x20>
	{
		speed=MAXIMUM_SPEED;
 800061c:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	e004      	b.n	800062e <escNormalOneshot125+0x2a>
	}
	else if(speed<=MINIMUM_SPEED)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d101      	bne.n	800062e <escNormalOneshot125+0x2a>
	{
		speed=MINIMUM_SPEED;
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
	}
	switch(CHANNEL)
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b0c      	cmp	r3, #12
 8000632:	d83d      	bhi.n	80006b0 <escNormalOneshot125+0xac>
 8000634:	a201      	add	r2, pc, #4	@ (adr r2, 800063c <escNormalOneshot125+0x38>)
 8000636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063a:	bf00      	nop
 800063c:	08000671 	.word	0x08000671
 8000640:	080006b1 	.word	0x080006b1
 8000644:	080006b1 	.word	0x080006b1
 8000648:	080006b1 	.word	0x080006b1
 800064c:	08000681 	.word	0x08000681
 8000650:	080006b1 	.word	0x080006b1
 8000654:	080006b1 	.word	0x080006b1
 8000658:	080006b1 	.word	0x080006b1
 800065c:	08000691 	.word	0x08000691
 8000660:	080006b1 	.word	0x080006b1
 8000664:	080006b1 	.word	0x080006b1
 8000668:	080006b1 	.word	0x080006b1
 800066c:	080006a1 	.word	0x080006a1
	{
	case CHANNEL1:
		htim->Instance->CCR1=speed+MINIMUM_ESC_PWM;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800067a:	3304      	adds	r3, #4
 800067c:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 800067e:	e017      	b.n	80006b0 <escNormalOneshot125+0xac>
	case CHANNEL2:
			htim->Instance->CCR2=speed+MINIMUM_ESC_PWM;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800068a:	3304      	adds	r3, #4
 800068c:	6393      	str	r3, [r2, #56]	@ 0x38
			break;
 800068e:	e00f      	b.n	80006b0 <escNormalOneshot125+0xac>
	case CHANNEL3:
			htim->Instance->CCR3=speed+MINIMUM_ESC_PWM;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800069a:	3304      	adds	r3, #4
 800069c:	63d3      	str	r3, [r2, #60]	@ 0x3c
			break;
 800069e:	e007      	b.n	80006b0 <escNormalOneshot125+0xac>
	case CHANNEL4:
			htim->Instance->CCR4=speed+MINIMUM_ESC_PWM;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80006aa:	3304      	adds	r3, #4
 80006ac:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 80006ae:	bf00      	nop
	}
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <Control4Motor>:

void Control4Motor(TIM_HandleTypeDef *htim,Motor_speed_Typedef *speed)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
	escNormalOneshot125(htim, speed->speed1, CHANNEL1);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2200      	movs	r2, #0
 80006cc:	4619      	mov	r1, r3
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff ff98 	bl	8000604 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed2, CHANNEL2);
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	2204      	movs	r2, #4
 80006da:	4619      	mov	r1, r3
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f7ff ff91 	bl	8000604 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed3, CHANNEL3);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	2208      	movs	r2, #8
 80006e8:	4619      	mov	r1, r3
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f7ff ff8a 	bl	8000604 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed4, CHANNEL4);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	220c      	movs	r2, #12
 80006f6:	4619      	mov	r1, r3
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff ff83 	bl	8000604 <escNormalOneshot125>

}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <pidControllersInit>:
 */

#include "PID.h"

void pidControllersInit(PIDControllers_Typedef* pid,float Kp,float Ki,float Kd,float to,float T,float upper_saturation,float lower_saturation)
{
 8000706:	b480      	push	{r7}
 8000708:	b089      	sub	sp, #36	@ 0x24
 800070a:	af00      	add	r7, sp, #0
 800070c:	61f8      	str	r0, [r7, #28]
 800070e:	ed87 0a06 	vstr	s0, [r7, #24]
 8000712:	edc7 0a05 	vstr	s1, [r7, #20]
 8000716:	ed87 1a04 	vstr	s2, [r7, #16]
 800071a:	edc7 1a03 	vstr	s3, [r7, #12]
 800071e:	ed87 2a02 	vstr	s4, [r7, #8]
 8000722:	edc7 2a01 	vstr	s5, [r7, #4]
 8000726:	ed87 3a00 	vstr	s6, [r7]
	pid->Kp=Kp;
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	69ba      	ldr	r2, [r7, #24]
 800072e:	601a      	str	r2, [r3, #0]
	pid->Ki=Ki;
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	697a      	ldr	r2, [r7, #20]
 8000734:	605a      	str	r2, [r3, #4]
	pid->Kd=Kd;
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	693a      	ldr	r2, [r7, #16]
 800073a:	609a      	str	r2, [r3, #8]
	pid->to=to;
 800073c:	69fb      	ldr	r3, [r7, #28]
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	60da      	str	r2, [r3, #12]
	pid->T=T;
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	68ba      	ldr	r2, [r7, #8]
 8000746:	611a      	str	r2, [r3, #16]

	pid->et=0;
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	f04f 0200 	mov.w	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
	pid->ek1=0;
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f04f 0200 	mov.w	r2, #0
 8000756:	619a      	str	r2, [r3, #24]

	pid->eKit=0;
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	f04f 0200 	mov.w	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
	pid->eKik1=0;
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	f04f 0200 	mov.w	r2, #0
 8000766:	621a      	str	r2, [r3, #32]

	pid->propotion=0;
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	f04f 0200 	mov.w	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->integrator=0;
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	f04f 0200 	mov.w	r2, #0
 8000776:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->deviator=0;
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	f04f 0200 	mov.w	r2, #0
 800077e:	631a      	str	r2, [r3, #48]	@ 0x30
	pid->integratork1=0;
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	f04f 0200 	mov.w	r2, #0
 8000786:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->deviatork1=0;
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	f04f 0200 	mov.w	r2, #0
 800078e:	635a      	str	r2, [r3, #52]	@ 0x34

	pid->upper_saturation=upper_saturation;
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	641a      	str	r2, [r3, #64]	@ 0x40
	pid->lower_saturation=lower_saturation;
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	683a      	ldr	r2, [r7, #0]
 800079a:	645a      	str	r2, [r3, #68]	@ 0x44

	pid->measurement=0;
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	f04f 0200 	mov.w	r2, #0
 80007a2:	639a      	str	r2, [r3, #56]	@ 0x38

	pid->u=0;
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	f04f 0200 	mov.w	r2, #0
 80007aa:	64da      	str	r2, [r3, #76]	@ 0x4c

}
 80007ac:	bf00      	nop
 80007ae:	3724      	adds	r7, #36	@ 0x24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <pidUpdate>:
	pid->Ki=Ki;
	pid->Kd=Kd;
}

float pidUpdate(PIDControllers_Typedef* pid,float measurement,float input)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80007c4:	edc7 0a01 	vstr	s1, [r7, #4]
	//get pid input
	pid->expected=input;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pid->measurement=measurement;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	68ba      	ldr	r2, [r7, #8]
 80007d2:	639a      	str	r2, [r3, #56]	@ 0x38
	pid->et=pid->expected-pid->measurement;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80007e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	edc3 7a05 	vstr	s15, [r3, #20]
	{
		pid->eKik1=0;
		pid->eKit=0;
	}
#else
	pid->eKit=pid->et;
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	695a      	ldr	r2, [r3, #20]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	61da      	str	r2, [r3, #28]
	pid->eKik1=pid->ek1;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	699a      	ldr	r2, [r3, #24]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	621a      	str	r2, [r3, #32]
#endif
	//PID calculation
	pid->propotion=pid->Kp*pid->et;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	ed93 7a00 	vldr	s14, [r3]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	edd3 7a05 	vldr	s15, [r3, #20]
 8000806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	pid->integrator=((pid->Ki*pid->T)/2)*(pid->eKit+pid->eKik1)+pid->integratork1;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	ed93 7a01 	vldr	s14, [r3, #4]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	edd3 7a04 	vldr	s15, [r3, #16]
 800081c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000820:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000824:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	edd3 6a07 	vldr	s13, [r3, #28]
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	edd3 7a08 	vldr	s15, [r3, #32]
 8000834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000838:	ee27 7a27 	vmul.f32	s14, s14, s15
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	pid->deviator=((2*pid->Kd)/(2*pid->to+pid->T))*(pid->et-pid->ek1)+((2*pid->to-pid->T)
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000852:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	edd3 7a03 	vldr	s15, [r3, #12]
 800085c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	edd3 7a04 	vldr	s15, [r3, #16]
 8000866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800086a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	edd3 6a05 	vldr	s13, [r3, #20]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	edd3 7a06 	vldr	s15, [r3, #24]
 800087a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800087e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	edd3 7a03 	vldr	s15, [r3, #12]
 8000888:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000892:	ee36 6ae7 	vsub.f32	s12, s13, s15
			/(2*pid->to+pid->T))*pid->deviatork1;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	edd3 7a03 	vldr	s15, [r3, #12]
 800089c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80008a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80008aa:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80008b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
	pid->deviator=((2*pid->Kd)/(2*pid->to+pid->T))*(pid->et-pid->ek1)+((2*pid->to-pid->T)
 80008b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	pid->ek1=pid->et;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	695a      	ldr	r2, [r3, #20]
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	619a      	str	r2, [r3, #24]
	pid->integratork1=pid->integrator;
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->deviatork1=pid->deviator;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	635a      	str	r2, [r3, #52]	@ 0x34
	pid->v=pid->propotion+pid->integrator+pid->deviator;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80008e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80008f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

	//saturation
	if(pid->v>pid->upper_saturation)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8000906:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800090a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800090e:	dd04      	ble.n	800091a <pidUpdate+0x162>
	{
		pid->u=pid->upper_saturation;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000918:	e013      	b.n	8000942 <pidUpdate+0x18a>
	}
	else if(pid->v<(pid->lower_saturation))
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000926:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800092a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800092e:	d504      	bpl.n	800093a <pidUpdate+0x182>
	{
		pid->u=pid->lower_saturation;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000938:	e003      	b.n	8000942 <pidUpdate+0x18a>
	}
	else
	{
		pid->u=pid->v;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	64da      	str	r2, [r3, #76]	@ 0x4c
	}

	return pid->u;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	ee07 3a90 	vmov	s15, r3
}
 800094a:	eeb0 0a67 	vmov.f32	s0, s15
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	4a07      	ldr	r2, [pc, #28]	@ (8000984 <vApplicationGetIdleTaskMemory+0x2c>)
 8000968:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	4a06      	ldr	r2, [pc, #24]	@ (8000988 <vApplicationGetIdleTaskMemory+0x30>)
 800096e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2280      	movs	r2, #128	@ 0x80
 8000974:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000976:	bf00      	nop
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	2000007c 	.word	0x2000007c
 8000988:	2000011c 	.word	0x2000011c

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b5b0      	push	{r4, r5, r7, lr}
 800098e:	b08a      	sub	sp, #40	@ 0x28
 8000990:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000992:	f001 f8a7 	bl	8001ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000996:	f000 f909 	bl	8000bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099a:	f000 fa6d 	bl	8000e78 <MX_GPIO_Init>
  MX_SPI1_Init();
 800099e:	f000 f96d 	bl	8000c7c <MX_SPI1_Init>
  MX_TIM2_Init();
 80009a2:	f000 f9a1 	bl	8000ce8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009a6:	f000 fa19 	bl	8000ddc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80009aa:	2201      	movs	r2, #1
 80009ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009b0:	4862      	ldr	r0, [pc, #392]	@ (8000b3c <main+0x1b0>)
 80009b2:	f001 fb7b 	bl	80020ac <HAL_GPIO_WritePin>
  float sample=powf(10,-3);
 80009b6:	4b62      	ldr	r3, [pc, #392]	@ (8000b40 <main+0x1b4>)
 80009b8:	61fb      	str	r3, [r7, #28]
  pidControllersInit(&yaw, 20, 15, 5,0.1,sample,0.1,-0.1);
 80009ba:	ed9f 3a62 	vldr	s6, [pc, #392]	@ 8000b44 <main+0x1b8>
 80009be:	eddf 2a62 	vldr	s5, [pc, #392]	@ 8000b48 <main+0x1bc>
 80009c2:	ed97 2a07 	vldr	s4, [r7, #28]
 80009c6:	eddf 1a60 	vldr	s3, [pc, #384]	@ 8000b48 <main+0x1bc>
 80009ca:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 80009ce:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 80009d2:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 80009d6:	485d      	ldr	r0, [pc, #372]	@ (8000b4c <main+0x1c0>)
 80009d8:	f7ff fe95 	bl	8000706 <pidControllersInit>
  pidControllersInit(&yaw_rate, 100, 50,10, 0.1,sample,1500,-1500);
 80009dc:	ed9f 3a5c 	vldr	s6, [pc, #368]	@ 8000b50 <main+0x1c4>
 80009e0:	eddf 2a5c 	vldr	s5, [pc, #368]	@ 8000b54 <main+0x1c8>
 80009e4:	ed97 2a07 	vldr	s4, [r7, #28]
 80009e8:	eddf 1a57 	vldr	s3, [pc, #348]	@ 8000b48 <main+0x1bc>
 80009ec:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 80009f0:	eddf 0a59 	vldr	s1, [pc, #356]	@ 8000b58 <main+0x1cc>
 80009f4:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8000b5c <main+0x1d0>
 80009f8:	4859      	ldr	r0, [pc, #356]	@ (8000b60 <main+0x1d4>)
 80009fa:	f7ff fe84 	bl	8000706 <pidControllersInit>
  pidControllersInit(&pitch, 20, 15,5, 0.1,sample,0.1,-0.1);
 80009fe:	ed9f 3a51 	vldr	s6, [pc, #324]	@ 8000b44 <main+0x1b8>
 8000a02:	eddf 2a51 	vldr	s5, [pc, #324]	@ 8000b48 <main+0x1bc>
 8000a06:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a0a:	eddf 1a4f 	vldr	s3, [pc, #316]	@ 8000b48 <main+0x1bc>
 8000a0e:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000a12:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8000a16:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000a1a:	4852      	ldr	r0, [pc, #328]	@ (8000b64 <main+0x1d8>)
 8000a1c:	f7ff fe73 	bl	8000706 <pidControllersInit>
  pidControllersInit(&pitch_rate, 100, 50,10, 0.1,sample,1500,-1500);
 8000a20:	ed9f 3a4b 	vldr	s6, [pc, #300]	@ 8000b50 <main+0x1c4>
 8000a24:	eddf 2a4b 	vldr	s5, [pc, #300]	@ 8000b54 <main+0x1c8>
 8000a28:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a2c:	eddf 1a46 	vldr	s3, [pc, #280]	@ 8000b48 <main+0x1bc>
 8000a30:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000a34:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8000b58 <main+0x1cc>
 8000a38:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8000b5c <main+0x1d0>
 8000a3c:	484a      	ldr	r0, [pc, #296]	@ (8000b68 <main+0x1dc>)
 8000a3e:	f7ff fe62 	bl	8000706 <pidControllersInit>
  pidControllersInit(&roll, 20, 15,5 ,0.1,sample,0.1,-0.1);
 8000a42:	ed9f 3a40 	vldr	s6, [pc, #256]	@ 8000b44 <main+0x1b8>
 8000a46:	eddf 2a40 	vldr	s5, [pc, #256]	@ 8000b48 <main+0x1bc>
 8000a4a:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a4e:	eddf 1a3e 	vldr	s3, [pc, #248]	@ 8000b48 <main+0x1bc>
 8000a52:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000a56:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8000a5a:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000a5e:	4843      	ldr	r0, [pc, #268]	@ (8000b6c <main+0x1e0>)
 8000a60:	f7ff fe51 	bl	8000706 <pidControllersInit>
  pidControllersInit(&roll_rate, 100, 50,10, 0.1,sample,1500,-1500);
 8000a64:	ed9f 3a3a 	vldr	s6, [pc, #232]	@ 8000b50 <main+0x1c4>
 8000a68:	eddf 2a3a 	vldr	s5, [pc, #232]	@ 8000b54 <main+0x1c8>
 8000a6c:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a70:	eddf 1a35 	vldr	s3, [pc, #212]	@ 8000b48 <main+0x1bc>
 8000a74:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000a78:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8000b58 <main+0x1cc>
 8000a7c:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8000b5c <main+0x1d0>
 8000a80:	483b      	ldr	r0, [pc, #236]	@ (8000b70 <main+0x1e4>)
 8000a82:	f7ff fe40 	bl	8000706 <pidControllersInit>
  pidControllersInit(&high, 50, 25,10 ,0.1,sample,6000,0);
 8000a86:	ed9f 3a3b 	vldr	s6, [pc, #236]	@ 8000b74 <main+0x1e8>
 8000a8a:	eddf 2a3b 	vldr	s5, [pc, #236]	@ 8000b78 <main+0x1ec>
 8000a8e:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a92:	eddf 1a2d 	vldr	s3, [pc, #180]	@ 8000b48 <main+0x1bc>
 8000a96:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000a9a:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 8000a9e:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8000b58 <main+0x1cc>
 8000aa2:	4836      	ldr	r0, [pc, #216]	@ (8000b7c <main+0x1f0>)
 8000aa4:	f7ff fe2f 	bl	8000706 <pidControllersInit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4835      	ldr	r0, [pc, #212]	@ (8000b80 <main+0x1f4>)
 8000aac:	f002 fe7c 	bl	80037a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	4833      	ldr	r0, [pc, #204]	@ (8000b80 <main+0x1f4>)
 8000ab4:	f002 fe78 	bl	80037a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000ab8:	2108      	movs	r1, #8
 8000aba:	4831      	ldr	r0, [pc, #196]	@ (8000b80 <main+0x1f4>)
 8000abc:	f002 fe74 	bl	80037a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000ac0:	210c      	movs	r1, #12
 8000ac2:	482f      	ldr	r0, [pc, #188]	@ (8000b80 <main+0x1f4>)
 8000ac4:	f002 fe70 	bl	80037a8 <HAL_TIM_PWM_Start>
//  Calibration(&htim2);
  RX_Enhanced_ShockBurst_Config(&hspi1);
 8000ac8:	482e      	ldr	r0, [pc, #184]	@ (8000b84 <main+0x1f8>)
 8000aca:	f000 fcbd 	bl	8001448 <RX_Enhanced_ShockBurst_Config>
  RX_PW_P_NUM_Number_Of_Bytes(&hspi1, PIPE1, 8);
 8000ace:	2208      	movs	r2, #8
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	482c      	ldr	r0, [pc, #176]	@ (8000b84 <main+0x1f8>)
 8000ad4:	f000 fdc6 	bl	8001664 <RX_PW_P_NUM_Number_Of_Bytes>
  Enable_Data_Pipe(&hspi1, 0b11);
 8000ad8:	2103      	movs	r1, #3
 8000ada:	482a      	ldr	r0, [pc, #168]	@ (8000b84 <main+0x1f8>)
 8000adc:	f000 fd94 	bl	8001608 <Enable_Data_Pipe>
  HAL_TIM_Base_Start_IT(&htim3);
 8000ae0:	4829      	ldr	r0, [pc, #164]	@ (8000b88 <main+0x1fc>)
 8000ae2:	f002 fdaf 	bl	8003644 <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000ae6:	4b29      	ldr	r3, [pc, #164]	@ (8000b8c <main+0x200>)
 8000ae8:	463c      	mov	r4, r7
 8000aea:	461d      	mov	r5, r3
 8000aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000af4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000af8:	463b      	mov	r3, r7
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f003 fd18 	bl	8004532 <osThreadCreate>
 8000b02:	4603      	mov	r3, r0
 8000b04:	4a22      	ldr	r2, [pc, #136]	@ (8000b90 <main+0x204>)
 8000b06:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(ESC_Task, "ESC", 128,NULL,1, &ESC_Handle);
 8000b08:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <main+0x208>)
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	2280      	movs	r2, #128	@ 0x80
 8000b14:	4920      	ldr	r1, [pc, #128]	@ (8000b98 <main+0x20c>)
 8000b16:	4821      	ldr	r0, [pc, #132]	@ (8000b9c <main+0x210>)
 8000b18:	f003 fe7f 	bl	800481a <xTaskCreate>
  xTaskCreate(NRF_Task, "NRF", 256, NULL, 2, &NRF_Handle);
 8000b1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ba0 <main+0x214>)
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	2302      	movs	r3, #2
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2300      	movs	r3, #0
 8000b26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b2a:	491e      	ldr	r1, [pc, #120]	@ (8000ba4 <main+0x218>)
 8000b2c:	481e      	ldr	r0, [pc, #120]	@ (8000ba8 <main+0x21c>)
 8000b2e:	f003 fe74 	bl	800481a <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b32:	f003 fcf7 	bl	8004524 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b36:	bf00      	nop
 8000b38:	e7fd      	b.n	8000b36 <main+0x1aa>
 8000b3a:	bf00      	nop
 8000b3c:	40020800 	.word	0x40020800
 8000b40:	3a83126f 	.word	0x3a83126f
 8000b44:	bdcccccd 	.word	0xbdcccccd
 8000b48:	3dcccccd 	.word	0x3dcccccd
 8000b4c:	200005ac 	.word	0x200005ac
 8000b50:	c4bb8000 	.word	0xc4bb8000
 8000b54:	44bb8000 	.word	0x44bb8000
 8000b58:	42480000 	.word	0x42480000
 8000b5c:	42c80000 	.word	0x42c80000
 8000b60:	20000600 	.word	0x20000600
 8000b64:	2000045c 	.word	0x2000045c
 8000b68:	200004b0 	.word	0x200004b0
 8000b6c:	20000504 	.word	0x20000504
 8000b70:	20000558 	.word	0x20000558
 8000b74:	00000000 	.word	0x00000000
 8000b78:	45bb8000 	.word	0x45bb8000
 8000b7c:	20000654 	.word	0x20000654
 8000b80:	20000374 	.word	0x20000374
 8000b84:	2000031c 	.word	0x2000031c
 8000b88:	200003bc 	.word	0x200003bc
 8000b8c:	0800642c 	.word	0x0800642c
 8000b90:	20000404 	.word	0x20000404
 8000b94:	200006f8 	.word	0x200006f8
 8000b98:	08006418 	.word	0x08006418
 8000b9c:	08000fa5 	.word	0x08000fa5
 8000ba0:	200006fc 	.word	0x200006fc
 8000ba4:	0800641c 	.word	0x0800641c
 8000ba8:	08001191 	.word	0x08001191

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b094      	sub	sp, #80	@ 0x50
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 0320 	add.w	r3, r7, #32
 8000bb6:	2230      	movs	r2, #48	@ 0x30
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f004 ff4a 	bl	8005a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	4b27      	ldr	r3, [pc, #156]	@ (8000c74 <SystemClock_Config+0xc8>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd8:	4a26      	ldr	r2, [pc, #152]	@ (8000c74 <SystemClock_Config+0xc8>)
 8000bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be0:	4b24      	ldr	r3, [pc, #144]	@ (8000c74 <SystemClock_Config+0xc8>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bec:	2300      	movs	r3, #0
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	4b21      	ldr	r3, [pc, #132]	@ (8000c78 <SystemClock_Config+0xcc>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a20      	ldr	r2, [pc, #128]	@ (8000c78 <SystemClock_Config+0xcc>)
 8000bf6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c78 <SystemClock_Config+0xcc>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c12:	2302      	movs	r3, #2
 8000c14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c16:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c1c:	2319      	movs	r3, #25
 8000c1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c20:	23a8      	movs	r3, #168	@ 0xa8
 8000c22:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c24:	2302      	movs	r3, #2
 8000c26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c28:	2304      	movs	r3, #4
 8000c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2c:	f107 0320 	add.w	r3, r7, #32
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 fa6f 	bl	8002114 <HAL_RCC_OscConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c3c:	f000 faf2 	bl	8001224 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c40:	230f      	movs	r3, #15
 8000c42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c44:	2302      	movs	r3, #2
 8000c46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f001 fcd1 	bl	8002604 <HAL_RCC_ClockConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c68:	f000 fadc 	bl	8001224 <Error_Handler>
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3750      	adds	r7, #80	@ 0x50
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40007000 	.word	0x40007000

08000c7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c80:	4b17      	ldr	r3, [pc, #92]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000c82:	4a18      	ldr	r2, [pc, #96]	@ (8000ce4 <MX_SPI1_Init+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c86:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000c88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000ca8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000cb0:	2210      	movs	r2, #16
 8000cb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cba:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000cc8:	220a      	movs	r2, #10
 8000cca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ccc:	4804      	ldr	r0, [pc, #16]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000cce:	f001 fe97 	bl	8002a00 <HAL_SPI_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cd8:	f000 faa4 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2000031c 	.word	0x2000031c
 8000ce4:	40013000 	.word	0x40013000

08000ce8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	@ 0x28
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cee:	f107 0320 	add.w	r3, r7, #32
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]
 8000d06:	615a      	str	r2, [r3, #20]
 8000d08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d0a:	4b33      	ldr	r3, [pc, #204]	@ (8000dd8 <MX_TIM2_Init+0xf0>)
 8000d0c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d12:	4b31      	ldr	r3, [pc, #196]	@ (8000dd8 <MX_TIM2_Init+0xf0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d18:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd8 <MX_TIM2_Init+0xf0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd8 <MX_TIM2_Init+0xf0>)
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295
 8000d24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d26:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd8 <MX_TIM2_Init+0xf0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd8 <MX_TIM2_Init+0xf0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d32:	4829      	ldr	r0, [pc, #164]	@ (8000dd8 <MX_TIM2_Init+0xf0>)
 8000d34:	f002 fce8 	bl	8003708 <HAL_TIM_PWM_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000d3e:	f000 fa71 	bl	8001224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d4a:	f107 0320 	add.w	r3, r7, #32
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4821      	ldr	r0, [pc, #132]	@ (8000dd8 <MX_TIM2_Init+0xf0>)
 8000d52:	f003 fb4d 	bl	80043f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d5c:	f000 fa62 	bl	8001224 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d60:	2360      	movs	r3, #96	@ 0x60
 8000d62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2200      	movs	r2, #0
 8000d74:	4619      	mov	r1, r3
 8000d76:	4818      	ldr	r0, [pc, #96]	@ (8000dd8 <MX_TIM2_Init+0xf0>)
 8000d78:	f002 feb6 	bl	8003ae8 <HAL_TIM_PWM_ConfigChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000d82:	f000 fa4f 	bl	8001224 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2204      	movs	r2, #4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4812      	ldr	r0, [pc, #72]	@ (8000dd8 <MX_TIM2_Init+0xf0>)
 8000d8e:	f002 feab 	bl	8003ae8 <HAL_TIM_PWM_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d98:	f000 fa44 	bl	8001224 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2208      	movs	r2, #8
 8000da0:	4619      	mov	r1, r3
 8000da2:	480d      	ldr	r0, [pc, #52]	@ (8000dd8 <MX_TIM2_Init+0xf0>)
 8000da4:	f002 fea0 	bl	8003ae8 <HAL_TIM_PWM_ConfigChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000dae:	f000 fa39 	bl	8001224 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	220c      	movs	r2, #12
 8000db6:	4619      	mov	r1, r3
 8000db8:	4807      	ldr	r0, [pc, #28]	@ (8000dd8 <MX_TIM2_Init+0xf0>)
 8000dba:	f002 fe95 	bl	8003ae8 <HAL_TIM_PWM_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000dc4:	f000 fa2e 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dc8:	4803      	ldr	r0, [pc, #12]	@ (8000dd8 <MX_TIM2_Init+0xf0>)
 8000dca:	f000 fd3f 	bl	800184c <HAL_TIM_MspPostInit>

}
 8000dce:	bf00      	nop
 8000dd0:	3728      	adds	r7, #40	@ 0x28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000374 	.word	0x20000374

08000ddc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df0:	463b      	mov	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000df8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e70 <MX_TIM3_Init+0x94>)
 8000dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8000e74 <MX_TIM3_Init+0x98>)
 8000dfc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e70 <MX_TIM3_Init+0x94>)
 8000e00:	2253      	movs	r2, #83	@ 0x53
 8000e02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	4b1a      	ldr	r3, [pc, #104]	@ (8000e70 <MX_TIM3_Init+0x94>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000e0a:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <MX_TIM3_Init+0x94>)
 8000e0c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e12:	4b17      	ldr	r3, [pc, #92]	@ (8000e70 <MX_TIM3_Init+0x94>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e18:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <MX_TIM3_Init+0x94>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e1e:	4814      	ldr	r0, [pc, #80]	@ (8000e70 <MX_TIM3_Init+0x94>)
 8000e20:	f002 fbc0 	bl	80035a4 <HAL_TIM_Base_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e2a:	f000 f9fb 	bl	8001224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480d      	ldr	r0, [pc, #52]	@ (8000e70 <MX_TIM3_Init+0x94>)
 8000e3c:	f002 ff16 	bl	8003c6c <HAL_TIM_ConfigClockSource>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e46:	f000 f9ed 	bl	8001224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e52:	463b      	mov	r3, r7
 8000e54:	4619      	mov	r1, r3
 8000e56:	4806      	ldr	r0, [pc, #24]	@ (8000e70 <MX_TIM3_Init+0x94>)
 8000e58:	f003 faca 	bl	80043f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e62:	f000 f9df 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200003bc 	.word	0x200003bc
 8000e74:	40000400 	.word	0x40000400

08000e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	@ 0x28
 8000e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b40      	ldr	r3, [pc, #256]	@ (8000f94 <MX_GPIO_Init+0x11c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a3f      	ldr	r2, [pc, #252]	@ (8000f94 <MX_GPIO_Init+0x11c>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f94 <MX_GPIO_Init+0x11c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b39      	ldr	r3, [pc, #228]	@ (8000f94 <MX_GPIO_Init+0x11c>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	4a38      	ldr	r2, [pc, #224]	@ (8000f94 <MX_GPIO_Init+0x11c>)
 8000eb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eba:	4b36      	ldr	r3, [pc, #216]	@ (8000f94 <MX_GPIO_Init+0x11c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	4b32      	ldr	r3, [pc, #200]	@ (8000f94 <MX_GPIO_Init+0x11c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a31      	ldr	r2, [pc, #196]	@ (8000f94 <MX_GPIO_Init+0x11c>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8000f94 <MX_GPIO_Init+0x11c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f94 <MX_GPIO_Init+0x11c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	4a2a      	ldr	r2, [pc, #168]	@ (8000f94 <MX_GPIO_Init+0x11c>)
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef2:	4b28      	ldr	r3, [pc, #160]	@ (8000f94 <MX_GPIO_Init+0x11c>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f04:	4824      	ldr	r0, [pc, #144]	@ (8000f98 <MX_GPIO_Init+0x120>)
 8000f06:	f001 f8d1 	bl	80020ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	4823      	ldr	r0, [pc, #140]	@ (8000f9c <MX_GPIO_Init+0x124>)
 8000f10:	f001 f8cc 	bl	80020ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2101      	movs	r1, #1
 8000f18:	4821      	ldr	r0, [pc, #132]	@ (8000fa0 <MX_GPIO_Init+0x128>)
 8000f1a:	f001 f8c7 	bl	80020ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4818      	ldr	r0, [pc, #96]	@ (8000f98 <MX_GPIO_Init+0x120>)
 8000f38:	f000 ff1c 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	4812      	ldr	r0, [pc, #72]	@ (8000f9c <MX_GPIO_Init+0x124>)
 8000f54:	f000 ff0e 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480c      	ldr	r0, [pc, #48]	@ (8000fa0 <MX_GPIO_Init+0x128>)
 8000f70:	f000 ff00 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f74:	2302      	movs	r3, #2
 8000f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	@ (8000fa0 <MX_GPIO_Init+0x128>)
 8000f88:	f000 fef4 	bl	8001d74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	@ 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	40020400 	.word	0x40020400

08000fa4 <ESC_Task>:

/* USER CODE BEGIN 4 */
void ESC_Task(void *argument)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

	while(1)
	{
		if(timer3_flag==1)
 8000fac:	4b6c      	ldr	r3, [pc, #432]	@ (8001160 <ESC_Task+0x1bc>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d1fb      	bne.n	8000fac <ESC_Task+0x8>
		{
			/*
			 * get picth measurement
			 */
			Calculate_Reference(&calculation, &control);
 8000fb4:	496b      	ldr	r1, [pc, #428]	@ (8001164 <ESC_Task+0x1c0>)
 8000fb6:	486c      	ldr	r0, [pc, #432]	@ (8001168 <ESC_Task+0x1c4>)
 8000fb8:	f7ff fada 	bl	8000570 <Calculate_Reference>
			pidUpdate(&pitch, calculation.picth_measurement, calculation.picth_reference);
 8000fbc:	4b6a      	ldr	r3, [pc, #424]	@ (8001168 <ESC_Task+0x1c4>)
 8000fbe:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fc2:	4b69      	ldr	r3, [pc, #420]	@ (8001168 <ESC_Task+0x1c4>)
 8000fc4:	ed93 7a00 	vldr	s14, [r3]
 8000fc8:	eef0 0a47 	vmov.f32	s1, s14
 8000fcc:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd0:	4866      	ldr	r0, [pc, #408]	@ (800116c <ESC_Task+0x1c8>)
 8000fd2:	f7ff fbf1 	bl	80007b8 <pidUpdate>
			/*
			 * get picth rate measuremet
			 */
			calculation.picth_rate_reference=pitch.u;
 8000fd6:	4b65      	ldr	r3, [pc, #404]	@ (800116c <ESC_Task+0x1c8>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fda:	4a63      	ldr	r2, [pc, #396]	@ (8001168 <ESC_Task+0x1c4>)
 8000fdc:	6193      	str	r3, [r2, #24]
			pidUpdate(&pitch_rate, calculation.picth_rate_measurement, calculation.picth_rate_reference);
 8000fde:	4b62      	ldr	r3, [pc, #392]	@ (8001168 <ESC_Task+0x1c4>)
 8000fe0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000fe4:	4b60      	ldr	r3, [pc, #384]	@ (8001168 <ESC_Task+0x1c4>)
 8000fe6:	ed93 7a06 	vldr	s14, [r3, #24]
 8000fea:	eef0 0a47 	vmov.f32	s1, s14
 8000fee:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff2:	485f      	ldr	r0, [pc, #380]	@ (8001170 <ESC_Task+0x1cc>)
 8000ff4:	f7ff fbe0 	bl	80007b8 <pidUpdate>

			/*
			 * get roll measurement
			 */
			pidUpdate(&roll, calculation.roll_measurement, calculation.roll_reference);
 8000ff8:	4b5b      	ldr	r3, [pc, #364]	@ (8001168 <ESC_Task+0x1c4>)
 8000ffa:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ffe:	4b5a      	ldr	r3, [pc, #360]	@ (8001168 <ESC_Task+0x1c4>)
 8001000:	ed93 7a01 	vldr	s14, [r3, #4]
 8001004:	eef0 0a47 	vmov.f32	s1, s14
 8001008:	eeb0 0a67 	vmov.f32	s0, s15
 800100c:	4859      	ldr	r0, [pc, #356]	@ (8001174 <ESC_Task+0x1d0>)
 800100e:	f7ff fbd3 	bl	80007b8 <pidUpdate>
			/*
			 * get roll rate measurement
			 */
			calculation.roll_rate_reference=roll.u;
 8001012:	4b58      	ldr	r3, [pc, #352]	@ (8001174 <ESC_Task+0x1d0>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	4a54      	ldr	r2, [pc, #336]	@ (8001168 <ESC_Task+0x1c4>)
 8001018:	61d3      	str	r3, [r2, #28]
			pidUpdate(&roll_rate, calculation.roll_rate_measurement, calculation.roll_rate_reference);
 800101a:	4b53      	ldr	r3, [pc, #332]	@ (8001168 <ESC_Task+0x1c4>)
 800101c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001020:	4b51      	ldr	r3, [pc, #324]	@ (8001168 <ESC_Task+0x1c4>)
 8001022:	ed93 7a07 	vldr	s14, [r3, #28]
 8001026:	eef0 0a47 	vmov.f32	s1, s14
 800102a:	eeb0 0a67 	vmov.f32	s0, s15
 800102e:	4852      	ldr	r0, [pc, #328]	@ (8001178 <ESC_Task+0x1d4>)
 8001030:	f7ff fbc2 	bl	80007b8 <pidUpdate>
			/*
			 * get yaw measurement
			 */
			pidUpdate(&yaw, calculation.yaw_measurement, calculation.yaw_reference);
 8001034:	4b4c      	ldr	r3, [pc, #304]	@ (8001168 <ESC_Task+0x1c4>)
 8001036:	edd3 7a05 	vldr	s15, [r3, #20]
 800103a:	4b4b      	ldr	r3, [pc, #300]	@ (8001168 <ESC_Task+0x1c4>)
 800103c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001040:	eef0 0a47 	vmov.f32	s1, s14
 8001044:	eeb0 0a67 	vmov.f32	s0, s15
 8001048:	484c      	ldr	r0, [pc, #304]	@ (800117c <ESC_Task+0x1d8>)
 800104a:	f7ff fbb5 	bl	80007b8 <pidUpdate>
			/*
			* get yaw measurement
			*/
			calculation.yaw_rate_reference=yaw.u;
 800104e:	4b4b      	ldr	r3, [pc, #300]	@ (800117c <ESC_Task+0x1d8>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001052:	4a45      	ldr	r2, [pc, #276]	@ (8001168 <ESC_Task+0x1c4>)
 8001054:	6213      	str	r3, [r2, #32]
			pidUpdate(&yaw_rate, calculation.yaw_rate_measurement, calculation.yaw_rate_reference);
 8001056:	4b44      	ldr	r3, [pc, #272]	@ (8001168 <ESC_Task+0x1c4>)
 8001058:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800105c:	4b42      	ldr	r3, [pc, #264]	@ (8001168 <ESC_Task+0x1c4>)
 800105e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001062:	eef0 0a47 	vmov.f32	s1, s14
 8001066:	eeb0 0a67 	vmov.f32	s0, s15
 800106a:	4845      	ldr	r0, [pc, #276]	@ (8001180 <ESC_Task+0x1dc>)
 800106c:	f7ff fba4 	bl	80007b8 <pidUpdate>
			/*
			* get high measurement and high reference
			*/
			pidUpdate(&high, calculation.high_measurement, calculation.high_reference);
 8001070:	4b3d      	ldr	r3, [pc, #244]	@ (8001168 <ESC_Task+0x1c4>)
 8001072:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001076:	4b3c      	ldr	r3, [pc, #240]	@ (8001168 <ESC_Task+0x1c4>)
 8001078:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800107c:	eef0 0a47 	vmov.f32	s1, s14
 8001080:	eeb0 0a67 	vmov.f32	s0, s15
 8001084:	483f      	ldr	r0, [pc, #252]	@ (8001184 <ESC_Task+0x1e0>)
 8001086:	f7ff fb97 	bl	80007b8 <pidUpdate>

			speed.speed1=-pitch_rate.u+roll_rate.u-yaw_rate.u+high.u;
 800108a:	4b3b      	ldr	r3, [pc, #236]	@ (8001178 <ESC_Task+0x1d4>)
 800108c:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8001090:	4b37      	ldr	r3, [pc, #220]	@ (8001170 <ESC_Task+0x1cc>)
 8001092:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001096:	ee37 7a67 	vsub.f32	s14, s14, s15
 800109a:	4b39      	ldr	r3, [pc, #228]	@ (8001180 <ESC_Task+0x1dc>)
 800109c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80010a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010a4:	4b37      	ldr	r3, [pc, #220]	@ (8001184 <ESC_Task+0x1e0>)
 80010a6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80010aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010b2:	ee17 2a90 	vmov	r2, s15
 80010b6:	4b34      	ldr	r3, [pc, #208]	@ (8001188 <ESC_Task+0x1e4>)
 80010b8:	601a      	str	r2, [r3, #0]
			speed.speed2=+pitch_rate.u+roll_rate.u+yaw_rate.u+high.u;
 80010ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001170 <ESC_Task+0x1cc>)
 80010bc:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80010c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001178 <ESC_Task+0x1d4>)
 80010c2:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80010c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001180 <ESC_Task+0x1dc>)
 80010cc:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80010d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001184 <ESC_Task+0x1e0>)
 80010d6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80010da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010e2:	ee17 2a90 	vmov	r2, s15
 80010e6:	4b28      	ldr	r3, [pc, #160]	@ (8001188 <ESC_Task+0x1e4>)
 80010e8:	605a      	str	r2, [r3, #4]
			speed.speed3=+pitch_rate.u-roll_rate.u-yaw_rate.u+high.u;
 80010ea:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <ESC_Task+0x1cc>)
 80010ec:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80010f0:	4b21      	ldr	r3, [pc, #132]	@ (8001178 <ESC_Task+0x1d4>)
 80010f2:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80010f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010fa:	4b21      	ldr	r3, [pc, #132]	@ (8001180 <ESC_Task+0x1dc>)
 80010fc:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001100:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001104:	4b1f      	ldr	r3, [pc, #124]	@ (8001184 <ESC_Task+0x1e0>)
 8001106:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800110a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800110e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001112:	ee17 2a90 	vmov	r2, s15
 8001116:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <ESC_Task+0x1e4>)
 8001118:	609a      	str	r2, [r3, #8]
			speed.speed4=-pitch_rate.u-roll_rate.u-yaw_rate.u+high.u;
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <ESC_Task+0x1cc>)
 800111c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001120:	eeb1 7a67 	vneg.f32	s14, s15
 8001124:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <ESC_Task+0x1d4>)
 8001126:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800112a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <ESC_Task+0x1dc>)
 8001130:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001134:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <ESC_Task+0x1e0>)
 800113a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800113e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001146:	ee17 2a90 	vmov	r2, s15
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <ESC_Task+0x1e4>)
 800114c:	60da      	str	r2, [r3, #12]


			Control4Motor(&htim2, &speed);
 800114e:	490e      	ldr	r1, [pc, #56]	@ (8001188 <ESC_Task+0x1e4>)
 8001150:	480e      	ldr	r0, [pc, #56]	@ (800118c <ESC_Task+0x1e8>)
 8001152:	f7ff fab3 	bl	80006bc <Control4Motor>
			timer3_flag=0;
 8001156:	4b02      	ldr	r3, [pc, #8]	@ (8001160 <ESC_Task+0x1bc>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
		if(timer3_flag==1)
 800115c:	e726      	b.n	8000fac <ESC_Task+0x8>
 800115e:	bf00      	nop
 8001160:	20000448 	.word	0x20000448
 8001164:	200006e0 	.word	0x200006e0
 8001168:	200006a8 	.word	0x200006a8
 800116c:	2000045c 	.word	0x2000045c
 8001170:	200004b0 	.word	0x200004b0
 8001174:	20000504 	.word	0x20000504
 8001178:	20000558 	.word	0x20000558
 800117c:	200005ac 	.word	0x200005ac
 8001180:	20000600 	.word	0x20000600
 8001184:	20000654 	.word	0x20000654
 8001188:	2000044c 	.word	0x2000044c
 800118c:	20000374 	.word	0x20000374

08001190 <NRF_Task>:

	}
}

void NRF_Task(void *argument)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

	while(1)
	{
		sprintf((char*)spi_tx,"87654321");
 8001198:	4906      	ldr	r1, [pc, #24]	@ (80011b4 <NRF_Task+0x24>)
 800119a:	4807      	ldr	r0, [pc, #28]	@ (80011b8 <NRF_Task+0x28>)
 800119c:	f004 fc3a 	bl	8005a14 <siprintf>
		Two_Way_Communication_RTOS(&hspi1, spi_tx, spi_rx);
 80011a0:	4a06      	ldr	r2, [pc, #24]	@ (80011bc <NRF_Task+0x2c>)
 80011a2:	4905      	ldr	r1, [pc, #20]	@ (80011b8 <NRF_Task+0x28>)
 80011a4:	4806      	ldr	r0, [pc, #24]	@ (80011c0 <NRF_Task+0x30>)
 80011a6:	f000 fa3f 	bl	8001628 <Two_Way_Communication_RTOS>
		vTaskDelay(pdMS_TO_TICKS(10));
 80011aa:	200a      	movs	r0, #10
 80011ac:	f003 fc84 	bl	8004ab8 <vTaskDelay>
		sprintf((char*)spi_tx,"87654321");
 80011b0:	bf00      	nop
 80011b2:	e7f1      	b.n	8001198 <NRF_Task+0x8>
 80011b4:	08006448 	.word	0x08006448
 80011b8:	20000428 	.word	0x20000428
 80011bc:	20000408 	.word	0x20000408
 80011c0:	2000031c 	.word	0x2000031c

080011c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80011cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011d0:	4804      	ldr	r0, [pc, #16]	@ (80011e4 <StartDefaultTask+0x20>)
 80011d2:	f000 ff84 	bl	80020de <HAL_GPIO_TogglePin>
    osDelay(500);
 80011d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011da:	f003 f9f6 	bl	80045ca <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80011de:	bf00      	nop
 80011e0:	e7f4      	b.n	80011cc <StartDefaultTask+0x8>
 80011e2:	bf00      	nop
 80011e4:	40020800 	.word	0x40020800

080011e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a08      	ldr	r2, [pc, #32]	@ (8001218 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d101      	bne.n	80011fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011fa:	f000 fc95 	bl	8001b28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance==TIM3)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a06      	ldr	r2, [pc, #24]	@ (800121c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d102      	bne.n	800120e <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	  timer3_flag=1;
 8001208:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END Callback 1 */
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40010000 	.word	0x40010000
 800121c:	40000400 	.word	0x40000400
 8001220:	20000448 	.word	0x20000448

08001224 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001228:	b672      	cpsid	i
}
 800122a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <Error_Handler+0x8>

08001230 <Chip_Select>:
#include "nRF24L01.h"

NRF_MODE nrfmode;

void Chip_Select()
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO, CHIP_SELECT_PIN, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	2110      	movs	r1, #16
 8001238:	4802      	ldr	r0, [pc, #8]	@ (8001244 <Chip_Select+0x14>)
 800123a:	f000 ff37 	bl	80020ac <HAL_GPIO_WritePin>
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40020000 	.word	0x40020000

08001248 <Chip_Deselect>:

void Chip_Deselect()
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO, CHIP_SELECT_PIN, 1);
 800124c:	2201      	movs	r2, #1
 800124e:	2110      	movs	r1, #16
 8001250:	4802      	ldr	r0, [pc, #8]	@ (800125c <Chip_Deselect+0x14>)
 8001252:	f000 ff2b 	bl	80020ac <HAL_GPIO_WritePin>
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40020000 	.word	0x40020000

08001260 <Set_CE_High>:

void Set_CE_High()
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CE_GPIO, CE_PIN, 1);
 8001264:	2201      	movs	r2, #1
 8001266:	2101      	movs	r1, #1
 8001268:	4802      	ldr	r0, [pc, #8]	@ (8001274 <Set_CE_High+0x14>)
 800126a:	f000 ff1f 	bl	80020ac <HAL_GPIO_WritePin>
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40020400 	.word	0x40020400

08001278 <Set_CE_Low>:

void Set_CE_Low()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CE_GPIO, CE_PIN, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2101      	movs	r1, #1
 8001280:	4802      	ldr	r0, [pc, #8]	@ (800128c <Set_CE_Low+0x14>)
 8001282:	f000 ff13 	bl	80020ac <HAL_GPIO_WritePin>
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40020400 	.word	0x40020400

08001290 <WaitForIRQ>:

void WaitForIRQ()
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(IRQ_GPIO, IRQ_PIN)==1)
 8001294:	bf00      	nop
 8001296:	2102      	movs	r1, #2
 8001298:	4804      	ldr	r0, [pc, #16]	@ (80012ac <WaitForIRQ+0x1c>)
 800129a:	f000 feef 	bl	800207c <HAL_GPIO_ReadPin>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d0f8      	beq.n	8001296 <WaitForIRQ+0x6>
		;
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40020400 	.word	0x40020400

080012b0 <nRF_WriteOneRegister>:
	HAL_SPI_Transmit(hspi, buff, (uint16_t)size+1, NRF_SPI_TIMEOUT);
	Chip_Deselect();
}

void nRF_WriteOneRegister(SPI_HandleTypeDef *hspi,uint8_t reg,uint8_t data)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	70fb      	strb	r3, [r7, #3]
 80012bc:	4613      	mov	r3, r2
 80012be:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2];
	buff[0]=reg|(1<<5);
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	f043 0320 	orr.w	r3, r3, #32
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	733b      	strb	r3, [r7, #12]
	buff[1]=data;
 80012ca:	78bb      	ldrb	r3, [r7, #2]
 80012cc:	737b      	strb	r3, [r7, #13]
	Chip_Select();
 80012ce:	f7ff ffaf 	bl	8001230 <Chip_Select>
	HAL_SPI_Transmit(hspi, buff, 2, NRF_SPI_TIMEOUT);
 80012d2:	f107 010c 	add.w	r1, r7, #12
 80012d6:	2364      	movs	r3, #100	@ 0x64
 80012d8:	2202      	movs	r2, #2
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f001 fc19 	bl	8002b12 <HAL_SPI_Transmit>
	Chip_Deselect();
 80012e0:	f7ff ffb2 	bl	8001248 <Chip_Deselect>
}
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <nRF_ReadOneRegister>:
	HAL_SPI_Receive(hspi, receive_data, size, NRF_SPI_TIMEOUT*10);
	Chip_Deselect();
}

void nRF_ReadOneRegister(SPI_HandleTypeDef *hspi,uint8_t reg,uint8_t *receive_data)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	460b      	mov	r3, r1
 80012f6:	607a      	str	r2, [r7, #4]
 80012f8:	72fb      	strb	r3, [r7, #11]

	uint8_t buff=reg;
 80012fa:	7afb      	ldrb	r3, [r7, #11]
 80012fc:	75fb      	strb	r3, [r7, #23]
	Chip_Select();
 80012fe:	f7ff ff97 	bl	8001230 <Chip_Select>
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8001302:	f107 0117 	add.w	r1, r7, #23
 8001306:	2364      	movs	r3, #100	@ 0x64
 8001308:	2201      	movs	r2, #1
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f001 fc01 	bl	8002b12 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, receive_data, 1, NRF_SPI_TIMEOUT);
 8001310:	2364      	movs	r3, #100	@ 0x64
 8001312:	2201      	movs	r2, #1
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f001 fd3f 	bl	8002d9a <HAL_SPI_Receive>
	Chip_Deselect();
 800131c:	f7ff ff94 	bl	8001248 <Chip_Deselect>

}
 8001320:	bf00      	nop
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <nRF_SendCmd>:
void nRF_SendCmd(SPI_HandleTypeDef *hspi,uint8_t cmd)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	70fb      	strb	r3, [r7, #3]

	uint8_t buff=cmd;
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	73fb      	strb	r3, [r7, #15]
	Chip_Select();
 8001338:	f7ff ff7a 	bl	8001230 <Chip_Select>
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 800133c:	f107 010f 	add.w	r1, r7, #15
 8001340:	2364      	movs	r3, #100	@ 0x64
 8001342:	2201      	movs	r2, #1
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f001 fbe4 	bl	8002b12 <HAL_SPI_Transmit>
	Chip_Deselect();
 800134a:	f7ff ff7d 	bl	8001248 <Chip_Deselect>
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <nRF_GetStatus>:

uint8_t nRF_GetStatus(SPI_HandleTypeDef *hspi)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b084      	sub	sp, #16
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]

	uint8_t buff=STATUS;
 800135e:	2307      	movs	r3, #7
 8001360:	73fb      	strb	r3, [r7, #15]
	uint8_t rx_data=0;
 8001362:	2300      	movs	r3, #0
 8001364:	73bb      	strb	r3, [r7, #14]
	Chip_Select();
 8001366:	f7ff ff63 	bl	8001230 <Chip_Select>
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 800136a:	f107 010f 	add.w	r1, r7, #15
 800136e:	2364      	movs	r3, #100	@ 0x64
 8001370:	2201      	movs	r2, #1
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f001 fbcd 	bl	8002b12 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &rx_data, 1, NRF_SPI_TIMEOUT*10);
 8001378:	f107 010e 	add.w	r1, r7, #14
 800137c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001380:	2201      	movs	r2, #1
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f001 fd09 	bl	8002d9a <HAL_SPI_Receive>
	Chip_Deselect();
 8001388:	f7ff ff5e 	bl	8001248 <Chip_Deselect>
	return rx_data;
 800138c:	7bbb      	ldrb	r3, [r7, #14]

}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <nRF_TX_Payload>:

void nRF_TX_Payload(SPI_HandleTypeDef *hspi,uint8_t *data, uint16_t size)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	4613      	mov	r3, r2
 80013a2:	80fb      	strh	r3, [r7, #6]
	Chip_Select();
 80013a4:	f7ff ff44 	bl	8001230 <Chip_Select>
	uint8_t buff=W_TX_PAYLOAD;
 80013a8:	23a0      	movs	r3, #160	@ 0xa0
 80013aa:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 80013ac:	f107 0117 	add.w	r1, r7, #23
 80013b0:	2364      	movs	r3, #100	@ 0x64
 80013b2:	2201      	movs	r2, #1
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f001 fbac 	bl	8002b12 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, data, size, NRF_SPI_TIMEOUT);
 80013ba:	88fa      	ldrh	r2, [r7, #6]
 80013bc:	2364      	movs	r3, #100	@ 0x64
 80013be:	68b9      	ldr	r1, [r7, #8]
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f001 fba6 	bl	8002b12 <HAL_SPI_Transmit>
	Chip_Deselect();
 80013c6:	f7ff ff3f 	bl	8001248 <Chip_Deselect>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <nRF_RX_Payload>:

void nRF_RX_Payload(SPI_HandleTypeDef *hspi,uint8_t *rx_data, uint16_t size)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	4613      	mov	r3, r2
 80013de:	80fb      	strh	r3, [r7, #6]
	Chip_Select();
 80013e0:	f7ff ff26 	bl	8001230 <Chip_Select>
	uint8_t buff=R_RX_PAYLOAD;
 80013e4:	2361      	movs	r3, #97	@ 0x61
 80013e6:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 80013e8:	f107 0117 	add.w	r1, r7, #23
 80013ec:	2364      	movs	r3, #100	@ 0x64
 80013ee:	2201      	movs	r2, #1
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f001 fb8e 	bl	8002b12 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, rx_data, size, NRF_SPI_TIMEOUT*10);
 80013f6:	88fa      	ldrh	r2, [r7, #6]
 80013f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f001 fccb 	bl	8002d9a <HAL_SPI_Receive>
	Chip_Deselect();
 8001404:	f7ff ff20 	bl	8001248 <Chip_Deselect>
}
 8001408:	bf00      	nop
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <Select_Tx_Mode_RTOS>:
	HAL_Delay(2);
	nrfmode=MODE_TX;
}

void Select_Tx_Mode_RTOS(SPI_HandleTypeDef *hspi)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	uint8_t buff=0x0a;
 8001418:	230a      	movs	r3, #10
 800141a:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low();
 800141c:	f7ff ff2c 	bl	8001278 <Set_CE_Low>
	CONFIG_REG_Write(hspi, buff);
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	4619      	mov	r1, r3
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f8d3 	bl	80015d0 <CONFIG_REG_Write>
	Set_CE_High();
 800142a:	f7ff ff19 	bl	8001260 <Set_CE_High>
	vTaskDelay(pdMS_TO_TICKS(2));
 800142e:	2002      	movs	r0, #2
 8001430:	f003 fb42 	bl	8004ab8 <vTaskDelay>
	nrfmode=MODE_TX;
 8001434:	4b03      	ldr	r3, [pc, #12]	@ (8001444 <Select_Tx_Mode_RTOS+0x34>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000700 	.word	0x20000700

08001448 <RX_Enhanced_ShockBurst_Config>:

void RX_Enhanced_ShockBurst_Config(SPI_HandleTypeDef *hspi)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	uint8_t buff=0xb;
 8001450:	230b      	movs	r3, #11
 8001452:	73fb      	strb	r3, [r7, #15]
	CONFIG_REG_Write(hspi, buff);
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	4619      	mov	r1, r3
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f8b9 	bl	80015d0 <CONFIG_REG_Write>
	nRF_WriteOneRegister(hspi, EN_RXADDR, 0x01);
 800145e:	2201      	movs	r2, #1
 8001460:	2102      	movs	r1, #2
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ff24 	bl	80012b0 <nRF_WriteOneRegister>
	nRF_WriteOneRegister(hspi, RX_PW_P0, 8);
 8001468:	2208      	movs	r2, #8
 800146a:	2111      	movs	r1, #17
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff1f 	bl	80012b0 <nRF_WriteOneRegister>
	nRF_WriteOneRegister(hspi, EN_AA, 0x00);
 8001472:	2200      	movs	r2, #0
 8001474:	2101      	movs	r1, #1
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ff1a 	bl	80012b0 <nRF_WriteOneRegister>
	nRF_WriteOneRegister(hspi,RF_SETUP, 0x7);
 800147c:	2207      	movs	r2, #7
 800147e:	2106      	movs	r1, #6
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff15 	bl	80012b0 <nRF_WriteOneRegister>
	Set_CE_High();
 8001486:	f7ff feeb 	bl	8001260 <Set_CE_High>
	HAL_Delay(2);
 800148a:	2002      	movs	r0, #2
 800148c:	f000 fb6c 	bl	8001b68 <HAL_Delay>
	nRF_SendCmd(hspi, FLUSH_RX);
 8001490:	21e2      	movs	r1, #226	@ 0xe2
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ff48 	bl	8001328 <nRF_SendCmd>
	nrfmode=MODE_RX;
 8001498:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <RX_Enhanced_ShockBurst_Config+0x60>)
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]

}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000700 	.word	0x20000700

080014ac <Select_Rx_Mode_RTOS>:
	nRF_SendCmd(hspi, FLUSH_RX);
	nrfmode=MODE_RX;
}

void Select_Rx_Mode_RTOS(SPI_HandleTypeDef *hspi)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	uint8_t buff=0x0b;
 80014b4:	230b      	movs	r3, #11
 80014b6:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low();
 80014b8:	f7ff fede 	bl	8001278 <Set_CE_Low>
	CONFIG_REG_Write(hspi, buff);
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	4619      	mov	r1, r3
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 f885 	bl	80015d0 <CONFIG_REG_Write>
	Set_CE_High();
 80014c6:	f7ff fecb 	bl	8001260 <Set_CE_High>
	vTaskDelay(pdMS_TO_TICKS(2));
 80014ca:	2002      	movs	r0, #2
 80014cc:	f003 faf4 	bl	8004ab8 <vTaskDelay>
	nRF_SendCmd(hspi, FLUSH_RX);
 80014d0:	21e2      	movs	r1, #226	@ 0xe2
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ff28 	bl	8001328 <nRF_SendCmd>
	nrfmode=MODE_RX;
 80014d8:	4b03      	ldr	r3, [pc, #12]	@ (80014e8 <Select_Rx_Mode_RTOS+0x3c>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000700 	.word	0x20000700

080014ec <TX_Communication>:

}


uint8_t TX_Communication(SPI_HandleTypeDef *hspi,uint8_t *data)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	if(nrfmode==MODE_TX)
 80014f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001570 <TX_Communication+0x84>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d133      	bne.n	8001566 <TX_Communication+0x7a>
	{
		nRF_TX_Payload(hspi, data, 8);
 80014fe:	2208      	movs	r2, #8
 8001500:	6839      	ldr	r1, [r7, #0]
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ff47 	bl	8001396 <nRF_TX_Payload>
		Set_CE_High();
 8001508:	f7ff feaa 	bl	8001260 <Set_CE_High>
		WaitForIRQ();
 800150c:	f7ff fec0 	bl	8001290 <WaitForIRQ>
		nRF_SendCmd(hspi, FLUSH_TX);
 8001510:	21e1      	movs	r1, #225	@ 0xe1
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ff08 	bl	8001328 <nRF_SendCmd>
		uint8_t status=nRF_GetStatus(hspi);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ff1c 	bl	8001356 <nRF_GetStatus>
 800151e:	4603      	mov	r3, r0
 8001520:	73fb      	strb	r3, [r7, #15]
		if((status&(1<<MAX_RT))!=0)
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	f003 0310 	and.w	r3, r3, #16
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00b      	beq.n	8001544 <TX_Communication+0x58>
		{
			status|=((1<<MAX_RT)|(1<<TX_FULL));
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	f043 0311 	orr.w	r3, r3, #17
 8001532:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(hspi, STATUS,status);
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	461a      	mov	r2, r3
 8001538:	2107      	movs	r1, #7
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff feb8 	bl	80012b0 <nRF_WriteOneRegister>
			return STATUS_TX_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e011      	b.n	8001568 <TX_Communication+0x7c>
		}
		else if((status&(1<<5))!=0)
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	f003 0320 	and.w	r3, r3, #32
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00b      	beq.n	8001566 <TX_Communication+0x7a>
		{
			status|=((1<<TX_DS)|(1<<TX_FULL));
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 8001554:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(hspi, STATUS,status);
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	461a      	mov	r2, r3
 800155a:	2107      	movs	r1, #7
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fea7 	bl	80012b0 <nRF_WriteOneRegister>
			return STATUS_TX_OK;
 8001562:	2302      	movs	r3, #2
 8001564:	e000      	b.n	8001568 <TX_Communication+0x7c>
		}
	}
	return STATUS_TX_NONDEFINE;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000700 	.word	0x20000700

08001574 <RX_Communication>:

uint8_t RX_Communication(SPI_HandleTypeDef *hspi,uint8_t *rx_data)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
	if(nrfmode==MODE_RX)
 800157e:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <RX_Communication+0x58>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d11d      	bne.n	80015c2 <RX_Communication+0x4e>
	{
		Set_CE_High();
 8001586:	f7ff fe6b 	bl	8001260 <Set_CE_High>
		uint8_t status=nRF_GetStatus(hspi);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff fee3 	bl	8001356 <nRF_GetStatus>
 8001590:	4603      	mov	r3, r0
 8001592:	73fb      	strb	r3, [r7, #15]
		if((status&(1<<RX_DR))!=0)
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00b      	beq.n	80015b6 <RX_Communication+0x42>
		{
			nRF_WriteOneRegister(hspi, STATUS,(1<<6));
 800159e:	2240      	movs	r2, #64	@ 0x40
 80015a0:	2107      	movs	r1, #7
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff fe84 	bl	80012b0 <nRF_WriteOneRegister>
			nRF_RX_Payload(hspi, rx_data, 8);
 80015a8:	2208      	movs	r2, #8
 80015aa:	6839      	ldr	r1, [r7, #0]
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff10 	bl	80013d2 <nRF_RX_Payload>
			return STATUS_RX_OK;
 80015b2:	2302      	movs	r3, #2
 80015b4:	e006      	b.n	80015c4 <RX_Communication+0x50>
		}
		nRF_SendCmd(hspi, FLUSH_RX);
 80015b6:	21e2      	movs	r1, #226	@ 0xe2
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff feb5 	bl	8001328 <nRF_SendCmd>
		return STATUS_RX_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <RX_Communication+0x50>
	}
	return STATUS_TX_NONDEFINE;
 80015c2:	2300      	movs	r3, #0

}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000700 	.word	0x20000700

080015d0 <CONFIG_REG_Write>:

void CONFIG_REG_Write(SPI_HandleTypeDef *hspi,uint8_t data)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	70fb      	strb	r3, [r7, #3]
	uint8_t read_reg;
	do
	{
		nRF_WriteOneRegister(hspi, CONFIG, data);
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	461a      	mov	r2, r3
 80015e0:	2100      	movs	r1, #0
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fe64 	bl	80012b0 <nRF_WriteOneRegister>
		nRF_ReadOneRegister(hspi, CONFIG, &read_reg);
 80015e8:	f107 030f 	add.w	r3, r7, #15
 80015ec:	461a      	mov	r2, r3
 80015ee:	2100      	movs	r1, #0
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff fe7b 	bl	80012ec <nRF_ReadOneRegister>
	}while(read_reg!=data);
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	78fa      	ldrb	r2, [r7, #3]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d1ee      	bne.n	80015dc <CONFIG_REG_Write+0xc>
}
 80015fe:	bf00      	nop
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <Enable_Data_Pipe>:
	}
	nRF_WriteRegister(hspi, TX_ADDR, buff, 5);
}

void Enable_Data_Pipe(SPI_HandleTypeDef *hspi,uint8_t data)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	70fb      	strb	r3, [r7, #3]
	nRF_WriteOneRegister(hspi, EN_RXADDR,data);
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	461a      	mov	r2, r3
 8001618:	2102      	movs	r1, #2
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff fe48 	bl	80012b0 <nRF_WriteOneRegister>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <Two_Way_Communication_RTOS>:
		Select_Rx_Mode(hspi);
	}
}

void Two_Way_Communication_RTOS(SPI_HandleTypeDef *hspi,uint8_t *spi_tx,uint8_t *spi_rx)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
	if(RX_Communication(hspi, spi_rx)==STATUS_RX_OK)
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f7ff ff9c 	bl	8001574 <RX_Communication>
 800163c:	4603      	mov	r3, r0
 800163e:	2b02      	cmp	r3, #2
 8001640:	d102      	bne.n	8001648 <Two_Way_Communication_RTOS+0x20>
	{
		Select_Tx_Mode_RTOS(hspi);
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f7ff fee4 	bl	8001410 <Select_Tx_Mode_RTOS>
	}
	if (TX_Communication(hspi,spi_tx)==STATUS_TX_OK)
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f7ff ff4e 	bl	80014ec <TX_Communication>
 8001650:	4603      	mov	r3, r0
 8001652:	2b02      	cmp	r3, #2
 8001654:	d102      	bne.n	800165c <Two_Way_Communication_RTOS+0x34>
	{
		Select_Rx_Mode_RTOS(hspi);
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f7ff ff28 	bl	80014ac <Select_Rx_Mode_RTOS>
	}
}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <RX_PW_P_NUM_Number_Of_Bytes>:


void RX_PW_P_NUM_Number_Of_Bytes(SPI_HandleTypeDef *hspi,PIPE_NUMBER pipe,uint8_t data)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	70fb      	strb	r3, [r7, #3]
 8001670:	4613      	mov	r3, r2
 8001672:	70bb      	strb	r3, [r7, #2]
	uint8_t reg;
	switch(pipe)
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	2b05      	cmp	r3, #5
 8001678:	d827      	bhi.n	80016ca <RX_PW_P_NUM_Number_Of_Bytes+0x66>
 800167a:	a201      	add	r2, pc, #4	@ (adr r2, 8001680 <RX_PW_P_NUM_Number_Of_Bytes+0x1c>)
 800167c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001680:	08001699 	.word	0x08001699
 8001684:	0800169f 	.word	0x0800169f
 8001688:	080016a5 	.word	0x080016a5
 800168c:	080016ab 	.word	0x080016ab
 8001690:	080016b1 	.word	0x080016b1
 8001694:	080016b7 	.word	0x080016b7
		{
		case PIPE0:
			reg=RX_PW_P0;
 8001698:	2311      	movs	r3, #17
 800169a:	73fb      	strb	r3, [r7, #15]
			break;
 800169c:	e00e      	b.n	80016bc <RX_PW_P_NUM_Number_Of_Bytes+0x58>
		case PIPE1:
			reg=RX_PW_P1;
 800169e:	2312      	movs	r3, #18
 80016a0:	73fb      	strb	r3, [r7, #15]
			break;
 80016a2:	e00b      	b.n	80016bc <RX_PW_P_NUM_Number_Of_Bytes+0x58>
		case PIPE2:
			reg=RX_PW_P2;
 80016a4:	2313      	movs	r3, #19
 80016a6:	73fb      	strb	r3, [r7, #15]
			break;
 80016a8:	e008      	b.n	80016bc <RX_PW_P_NUM_Number_Of_Bytes+0x58>
		case PIPE3:
			reg=RX_PW_P3;
 80016aa:	2314      	movs	r3, #20
 80016ac:	73fb      	strb	r3, [r7, #15]
			break;
 80016ae:	e005      	b.n	80016bc <RX_PW_P_NUM_Number_Of_Bytes+0x58>
		case PIPE4:
			reg=RX_PW_P4;
 80016b0:	2315      	movs	r3, #21
 80016b2:	73fb      	strb	r3, [r7, #15]
			break;
 80016b4:	e002      	b.n	80016bc <RX_PW_P_NUM_Number_Of_Bytes+0x58>
		case PIPE5:
			reg=RX_PW_P5;
 80016b6:	2316      	movs	r3, #22
 80016b8:	73fb      	strb	r3, [r7, #15]
			break;
 80016ba:	bf00      	nop
		default:
			return;
		}
	nRF_WriteOneRegister(hspi, reg, data);
 80016bc:	78ba      	ldrb	r2, [r7, #2]
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	4619      	mov	r1, r3
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff fdf4 	bl	80012b0 <nRF_WriteOneRegister>
 80016c8:	e000      	b.n	80016cc <RX_PW_P_NUM_Number_Of_Bytes+0x68>
			return;
 80016ca:	bf00      	nop
}
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop

080016d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <HAL_MspInit+0x54>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e2:	4a11      	ldr	r2, [pc, #68]	@ (8001728 <HAL_MspInit+0x54>)
 80016e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001728 <HAL_MspInit+0x54>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <HAL_MspInit+0x54>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001728 <HAL_MspInit+0x54>)
 8001700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001704:	6413      	str	r3, [r2, #64]	@ 0x40
 8001706:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <HAL_MspInit+0x54>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	210f      	movs	r1, #15
 8001716:	f06f 0001 	mvn.w	r0, #1
 800171a:	f000 fb01 	bl	8001d20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800

0800172c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	@ 0x28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a19      	ldr	r2, [pc, #100]	@ (80017b0 <HAL_SPI_MspInit+0x84>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d12b      	bne.n	80017a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	4b18      	ldr	r3, [pc, #96]	@ (80017b4 <HAL_SPI_MspInit+0x88>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001756:	4a17      	ldr	r2, [pc, #92]	@ (80017b4 <HAL_SPI_MspInit+0x88>)
 8001758:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800175c:	6453      	str	r3, [r2, #68]	@ 0x44
 800175e:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <HAL_SPI_MspInit+0x88>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001762:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <HAL_SPI_MspInit+0x88>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	4a10      	ldr	r2, [pc, #64]	@ (80017b4 <HAL_SPI_MspInit+0x88>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6313      	str	r3, [r2, #48]	@ 0x30
 800177a:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <HAL_SPI_MspInit+0x88>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001786:	23e0      	movs	r3, #224	@ 0xe0
 8001788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001796:	2305      	movs	r3, #5
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	4805      	ldr	r0, [pc, #20]	@ (80017b8 <HAL_SPI_MspInit+0x8c>)
 80017a2:	f000 fae7 	bl	8001d74 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80017a6:	bf00      	nop
 80017a8:	3728      	adds	r7, #40	@ 0x28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40013000 	.word	0x40013000
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020000 	.word	0x40020000

080017bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017cc:	d10d      	bne.n	80017ea <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	4a08      	ldr	r2, [pc, #32]	@ (80017f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800

080017fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0e      	ldr	r2, [pc, #56]	@ (8001844 <HAL_TIM_Base_MspInit+0x48>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d115      	bne.n	800183a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b0d      	ldr	r3, [pc, #52]	@ (8001848 <HAL_TIM_Base_MspInit+0x4c>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	4a0c      	ldr	r2, [pc, #48]	@ (8001848 <HAL_TIM_Base_MspInit+0x4c>)
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	6413      	str	r3, [r2, #64]	@ 0x40
 800181e:	4b0a      	ldr	r3, [pc, #40]	@ (8001848 <HAL_TIM_Base_MspInit+0x4c>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2105      	movs	r1, #5
 800182e:	201d      	movs	r0, #29
 8001830:	f000 fa76 	bl	8001d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001834:	201d      	movs	r0, #29
 8001836:	f000 fa8f 	bl	8001d58 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40000400 	.word	0x40000400
 8001848:	40023800 	.word	0x40023800

0800184c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800186c:	d11d      	bne.n	80018aa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <HAL_TIM_MspPostInit+0x68>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	4a0f      	ldr	r2, [pc, #60]	@ (80018b4 <HAL_TIM_MspPostInit+0x68>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6313      	str	r3, [r2, #48]	@ 0x30
 800187e:	4b0d      	ldr	r3, [pc, #52]	@ (80018b4 <HAL_TIM_MspPostInit+0x68>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800188a:	230f      	movs	r3, #15
 800188c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800189a:	2301      	movs	r3, #1
 800189c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	4619      	mov	r1, r3
 80018a4:	4804      	ldr	r0, [pc, #16]	@ (80018b8 <HAL_TIM_MspPostInit+0x6c>)
 80018a6:	f000 fa65 	bl	8001d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018aa:	bf00      	nop
 80018ac:	3720      	adds	r7, #32
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020000 	.word	0x40020000

080018bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08c      	sub	sp, #48	@ 0x30
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	4b2e      	ldr	r3, [pc, #184]	@ (800198c <HAL_InitTick+0xd0>)
 80018d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d4:	4a2d      	ldr	r2, [pc, #180]	@ (800198c <HAL_InitTick+0xd0>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6453      	str	r3, [r2, #68]	@ 0x44
 80018dc:	4b2b      	ldr	r3, [pc, #172]	@ (800198c <HAL_InitTick+0xd0>)
 80018de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018e8:	f107 020c 	add.w	r2, r7, #12
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 f852 	bl	800299c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80018f8:	f001 f83c 	bl	8002974 <HAL_RCC_GetPCLK2Freq>
 80018fc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001900:	4a23      	ldr	r2, [pc, #140]	@ (8001990 <HAL_InitTick+0xd4>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	0c9b      	lsrs	r3, r3, #18
 8001908:	3b01      	subs	r3, #1
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800190c:	4b21      	ldr	r3, [pc, #132]	@ (8001994 <HAL_InitTick+0xd8>)
 800190e:	4a22      	ldr	r2, [pc, #136]	@ (8001998 <HAL_InitTick+0xdc>)
 8001910:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001912:	4b20      	ldr	r3, [pc, #128]	@ (8001994 <HAL_InitTick+0xd8>)
 8001914:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001918:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800191a:	4a1e      	ldr	r2, [pc, #120]	@ (8001994 <HAL_InitTick+0xd8>)
 800191c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001920:	4b1c      	ldr	r3, [pc, #112]	@ (8001994 <HAL_InitTick+0xd8>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001926:	4b1b      	ldr	r3, [pc, #108]	@ (8001994 <HAL_InitTick+0xd8>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192c:	4b19      	ldr	r3, [pc, #100]	@ (8001994 <HAL_InitTick+0xd8>)
 800192e:	2200      	movs	r2, #0
 8001930:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001932:	4818      	ldr	r0, [pc, #96]	@ (8001994 <HAL_InitTick+0xd8>)
 8001934:	f001 fe36 	bl	80035a4 <HAL_TIM_Base_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800193e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001942:	2b00      	cmp	r3, #0
 8001944:	d11b      	bne.n	800197e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001946:	4813      	ldr	r0, [pc, #76]	@ (8001994 <HAL_InitTick+0xd8>)
 8001948:	f001 fe7c 	bl	8003644 <HAL_TIM_Base_Start_IT>
 800194c:	4603      	mov	r3, r0
 800194e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001952:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001956:	2b00      	cmp	r3, #0
 8001958:	d111      	bne.n	800197e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800195a:	2019      	movs	r0, #25
 800195c:	f000 f9fc 	bl	8001d58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b0f      	cmp	r3, #15
 8001964:	d808      	bhi.n	8001978 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001966:	2200      	movs	r2, #0
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	2019      	movs	r0, #25
 800196c:	f000 f9d8 	bl	8001d20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001970:	4a0a      	ldr	r2, [pc, #40]	@ (800199c <HAL_InitTick+0xe0>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e002      	b.n	800197e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800197e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001982:	4618      	mov	r0, r3
 8001984:	3730      	adds	r7, #48	@ 0x30
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800
 8001990:	431bde83 	.word	0x431bde83
 8001994:	20000704 	.word	0x20000704
 8001998:	40010000 	.word	0x40010000
 800199c:	20000004 	.word	0x20000004

080019a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <NMI_Handler+0x4>

080019a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <MemManage_Handler+0x4>

080019b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <BusFault_Handler+0x4>

080019c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <UsageFault_Handler+0x4>

080019c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019dc:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019de:	f001 ff93 	bl	8003908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000704 	.word	0x20000704

080019ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019f0:	4802      	ldr	r0, [pc, #8]	@ (80019fc <TIM3_IRQHandler+0x10>)
 80019f2:	f001 ff89 	bl	8003908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200003bc 	.word	0x200003bc

08001a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a08:	4a14      	ldr	r2, [pc, #80]	@ (8001a5c <_sbrk+0x5c>)
 8001a0a:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <_sbrk+0x60>)
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a14:	4b13      	ldr	r3, [pc, #76]	@ (8001a64 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <_sbrk+0x64>)
 8001a1e:	4a12      	ldr	r2, [pc, #72]	@ (8001a68 <_sbrk+0x68>)
 8001a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d207      	bcs.n	8001a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a30:	f004 f86e 	bl	8005b10 <__errno>
 8001a34:	4603      	mov	r3, r0
 8001a36:	220c      	movs	r2, #12
 8001a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	e009      	b.n	8001a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a40:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <_sbrk+0x64>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a46:	4b07      	ldr	r3, [pc, #28]	@ (8001a64 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4a05      	ldr	r2, [pc, #20]	@ (8001a64 <_sbrk+0x64>)
 8001a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a52:	68fb      	ldr	r3, [r7, #12]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20020000 	.word	0x20020000
 8001a60:	00000400 	.word	0x00000400
 8001a64:	2000074c 	.word	0x2000074c
 8001a68:	200045f0 	.word	0x200045f0

08001a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <SystemInit+0x20>)
 8001a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a76:	4a05      	ldr	r2, [pc, #20]	@ (8001a8c <SystemInit+0x20>)
 8001a78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ac8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a94:	f7ff ffea 	bl	8001a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a98:	480c      	ldr	r0, [pc, #48]	@ (8001acc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a9a:	490d      	ldr	r1, [pc, #52]	@ (8001ad0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa0:	e002      	b.n	8001aa8 <LoopCopyDataInit>

08001aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa6:	3304      	adds	r3, #4

08001aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aac:	d3f9      	bcc.n	8001aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ab0:	4c0a      	ldr	r4, [pc, #40]	@ (8001adc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab4:	e001      	b.n	8001aba <LoopFillZerobss>

08001ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab8:	3204      	adds	r2, #4

08001aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001abc:	d3fb      	bcc.n	8001ab6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001abe:	f004 f82d 	bl	8005b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac2:	f7fe ff63 	bl	800098c <main>
  bx  lr    
 8001ac6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ac8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ad4:	080064b8 	.word	0x080064b8
  ldr r2, =_sbss
 8001ad8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001adc:	200045f0 	.word	0x200045f0

08001ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae0:	e7fe      	b.n	8001ae0 <ADC_IRQHandler>
	...

08001ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b24 <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0d      	ldr	r2, [pc, #52]	@ (8001b24 <HAL_Init+0x40>)
 8001aee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	@ (8001b24 <HAL_Init+0x40>)
 8001afa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b00:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <HAL_Init+0x40>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a07      	ldr	r2, [pc, #28]	@ (8001b24 <HAL_Init+0x40>)
 8001b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f000 f8fc 	bl	8001d0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b12:	200f      	movs	r0, #15
 8001b14:	f7ff fed2 	bl	80018bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b18:	f7ff fddc 	bl	80016d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023c00 	.word	0x40023c00

08001b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <HAL_IncTick+0x20>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <HAL_IncTick+0x24>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	4a04      	ldr	r2, [pc, #16]	@ (8001b4c <HAL_IncTick+0x24>)
 8001b3a:	6013      	str	r3, [r2, #0]
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	20000750 	.word	0x20000750

08001b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return uwTick;
 8001b54:	4b03      	ldr	r3, [pc, #12]	@ (8001b64 <HAL_GetTick+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000750 	.word	0x20000750

08001b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b70:	f7ff ffee 	bl	8001b50 <HAL_GetTick>
 8001b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d005      	beq.n	8001b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b82:	4b0a      	ldr	r3, [pc, #40]	@ (8001bac <HAL_Delay+0x44>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b8e:	bf00      	nop
 8001b90:	f7ff ffde 	bl	8001b50 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d8f7      	bhi.n	8001b90 <HAL_Delay+0x28>
  {
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000008 	.word	0x20000008

08001bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	@ (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	@ (8001c10 <__NVIC_GetPriorityGrouping+0x18>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	f003 0307 	and.w	r3, r3, #7
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db0b      	blt.n	8001c3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	4907      	ldr	r1, [pc, #28]	@ (8001c4c <__NVIC_EnableIRQ+0x38>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2001      	movs	r0, #1
 8001c36:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000e100 	.word	0xe000e100

08001c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	db0a      	blt.n	8001c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	490c      	ldr	r1, [pc, #48]	@ (8001c9c <__NVIC_SetPriority+0x4c>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	0112      	lsls	r2, r2, #4
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	440b      	add	r3, r1
 8001c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c78:	e00a      	b.n	8001c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4908      	ldr	r1, [pc, #32]	@ (8001ca0 <__NVIC_SetPriority+0x50>)
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3b04      	subs	r3, #4
 8001c88:	0112      	lsls	r2, r2, #4
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	761a      	strb	r2, [r3, #24]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000e100 	.word	0xe000e100
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	@ 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f1c3 0307 	rsb	r3, r3, #7
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	bf28      	it	cs
 8001cc2:	2304      	movcs	r3, #4
 8001cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d902      	bls.n	8001cd4 <NVIC_EncodePriority+0x30>
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3b03      	subs	r3, #3
 8001cd2:	e000      	b.n	8001cd6 <NVIC_EncodePriority+0x32>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	43d9      	mvns	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	4313      	orrs	r3, r2
         );
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3724      	adds	r7, #36	@ 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ff4c 	bl	8001bb0 <__NVIC_SetPriorityGrouping>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d32:	f7ff ff61 	bl	8001bf8 <__NVIC_GetPriorityGrouping>
 8001d36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	68b9      	ldr	r1, [r7, #8]
 8001d3c:	6978      	ldr	r0, [r7, #20]
 8001d3e:	f7ff ffb1 	bl	8001ca4 <NVIC_EncodePriority>
 8001d42:	4602      	mov	r2, r0
 8001d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff80 	bl	8001c50 <__NVIC_SetPriority>
}
 8001d50:	bf00      	nop
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff54 	bl	8001c14 <__NVIC_EnableIRQ>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	@ 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	e159      	b.n	8002044 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d90:	2201      	movs	r2, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	f040 8148 	bne.w	800203e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d005      	beq.n	8001dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d130      	bne.n	8001e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f003 0201 	and.w	r2, r3, #1
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d017      	beq.n	8001e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d123      	bne.n	8001eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	08da      	lsrs	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3208      	adds	r2, #8
 8001e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	220f      	movs	r2, #15
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	08da      	lsrs	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3208      	adds	r2, #8
 8001eb2:	69b9      	ldr	r1, [r7, #24]
 8001eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0203 	and.w	r2, r3, #3
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80a2 	beq.w	800203e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b57      	ldr	r3, [pc, #348]	@ (800205c <HAL_GPIO_Init+0x2e8>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	4a56      	ldr	r2, [pc, #344]	@ (800205c <HAL_GPIO_Init+0x2e8>)
 8001f04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f0a:	4b54      	ldr	r3, [pc, #336]	@ (800205c <HAL_GPIO_Init+0x2e8>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f16:	4a52      	ldr	r2, [pc, #328]	@ (8002060 <HAL_GPIO_Init+0x2ec>)
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	220f      	movs	r2, #15
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a49      	ldr	r2, [pc, #292]	@ (8002064 <HAL_GPIO_Init+0x2f0>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d019      	beq.n	8001f76 <HAL_GPIO_Init+0x202>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a48      	ldr	r2, [pc, #288]	@ (8002068 <HAL_GPIO_Init+0x2f4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <HAL_GPIO_Init+0x1fe>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a47      	ldr	r2, [pc, #284]	@ (800206c <HAL_GPIO_Init+0x2f8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00d      	beq.n	8001f6e <HAL_GPIO_Init+0x1fa>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a46      	ldr	r2, [pc, #280]	@ (8002070 <HAL_GPIO_Init+0x2fc>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d007      	beq.n	8001f6a <HAL_GPIO_Init+0x1f6>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a45      	ldr	r2, [pc, #276]	@ (8002074 <HAL_GPIO_Init+0x300>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d101      	bne.n	8001f66 <HAL_GPIO_Init+0x1f2>
 8001f62:	2304      	movs	r3, #4
 8001f64:	e008      	b.n	8001f78 <HAL_GPIO_Init+0x204>
 8001f66:	2307      	movs	r3, #7
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x204>
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e004      	b.n	8001f78 <HAL_GPIO_Init+0x204>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e002      	b.n	8001f78 <HAL_GPIO_Init+0x204>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_GPIO_Init+0x204>
 8001f76:	2300      	movs	r3, #0
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	f002 0203 	and.w	r2, r2, #3
 8001f7e:	0092      	lsls	r2, r2, #2
 8001f80:	4093      	lsls	r3, r2
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f88:	4935      	ldr	r1, [pc, #212]	@ (8002060 <HAL_GPIO_Init+0x2ec>)
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	3302      	adds	r3, #2
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f96:	4b38      	ldr	r3, [pc, #224]	@ (8002078 <HAL_GPIO_Init+0x304>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fba:	4a2f      	ldr	r2, [pc, #188]	@ (8002078 <HAL_GPIO_Init+0x304>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8002078 <HAL_GPIO_Init+0x304>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe4:	4a24      	ldr	r2, [pc, #144]	@ (8002078 <HAL_GPIO_Init+0x304>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fea:	4b23      	ldr	r3, [pc, #140]	@ (8002078 <HAL_GPIO_Init+0x304>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800200e:	4a1a      	ldr	r2, [pc, #104]	@ (8002078 <HAL_GPIO_Init+0x304>)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002014:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <HAL_GPIO_Init+0x304>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002038:	4a0f      	ldr	r2, [pc, #60]	@ (8002078 <HAL_GPIO_Init+0x304>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3301      	adds	r3, #1
 8002042:	61fb      	str	r3, [r7, #28]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	2b0f      	cmp	r3, #15
 8002048:	f67f aea2 	bls.w	8001d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	3724      	adds	r7, #36	@ 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800
 8002060:	40013800 	.word	0x40013800
 8002064:	40020000 	.word	0x40020000
 8002068:	40020400 	.word	0x40020400
 800206c:	40020800 	.word	0x40020800
 8002070:	40020c00 	.word	0x40020c00
 8002074:	40021000 	.word	0x40021000
 8002078:	40013c00 	.word	0x40013c00

0800207c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	887b      	ldrh	r3, [r7, #2]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	e001      	b.n	800209e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800209a:	2300      	movs	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800209e:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	807b      	strh	r3, [r7, #2]
 80020b8:	4613      	mov	r3, r2
 80020ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020bc:	787b      	ldrb	r3, [r7, #1]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c2:	887a      	ldrh	r2, [r7, #2]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020c8:	e003      	b.n	80020d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ca:	887b      	ldrh	r3, [r7, #2]
 80020cc:	041a      	lsls	r2, r3, #16
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	619a      	str	r2, [r3, #24]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020de:	b480      	push	{r7}
 80020e0:	b085      	sub	sp, #20
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020f0:	887a      	ldrh	r2, [r7, #2]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4013      	ands	r3, r2
 80020f6:	041a      	lsls	r2, r3, #16
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	43d9      	mvns	r1, r3
 80020fc:	887b      	ldrh	r3, [r7, #2]
 80020fe:	400b      	ands	r3, r1
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	619a      	str	r2, [r3, #24]
}
 8002106:	bf00      	nop
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e267      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d075      	beq.n	800221e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002132:	4b88      	ldr	r3, [pc, #544]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b04      	cmp	r3, #4
 800213c:	d00c      	beq.n	8002158 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800213e:	4b85      	ldr	r3, [pc, #532]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002146:	2b08      	cmp	r3, #8
 8002148:	d112      	bne.n	8002170 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800214a:	4b82      	ldr	r3, [pc, #520]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002152:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002156:	d10b      	bne.n	8002170 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	4b7e      	ldr	r3, [pc, #504]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d05b      	beq.n	800221c <HAL_RCC_OscConfig+0x108>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d157      	bne.n	800221c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e242      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002178:	d106      	bne.n	8002188 <HAL_RCC_OscConfig+0x74>
 800217a:	4b76      	ldr	r3, [pc, #472]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a75      	ldr	r2, [pc, #468]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 8002180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e01d      	b.n	80021c4 <HAL_RCC_OscConfig+0xb0>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x98>
 8002192:	4b70      	ldr	r3, [pc, #448]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a6f      	ldr	r2, [pc, #444]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 8002198:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b6d      	ldr	r3, [pc, #436]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a6c      	ldr	r2, [pc, #432]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e00b      	b.n	80021c4 <HAL_RCC_OscConfig+0xb0>
 80021ac:	4b69      	ldr	r3, [pc, #420]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a68      	ldr	r2, [pc, #416]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 80021b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	4b66      	ldr	r3, [pc, #408]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a65      	ldr	r2, [pc, #404]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 80021be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d013      	beq.n	80021f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7ff fcc0 	bl	8001b50 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d4:	f7ff fcbc 	bl	8001b50 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	@ 0x64
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e207      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0xc0>
 80021f2:	e014      	b.n	800221e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7ff fcac 	bl	8001b50 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021fc:	f7ff fca8 	bl	8001b50 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	@ 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e1f3      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220e:	4b51      	ldr	r3, [pc, #324]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0xe8>
 800221a:	e000      	b.n	800221e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d063      	beq.n	80022f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800222a:	4b4a      	ldr	r3, [pc, #296]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00b      	beq.n	800224e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002236:	4b47      	ldr	r3, [pc, #284]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800223e:	2b08      	cmp	r3, #8
 8002240:	d11c      	bne.n	800227c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002242:	4b44      	ldr	r3, [pc, #272]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d116      	bne.n	800227c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224e:	4b41      	ldr	r3, [pc, #260]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_RCC_OscConfig+0x152>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d001      	beq.n	8002266 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e1c7      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002266:	4b3b      	ldr	r3, [pc, #236]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4937      	ldr	r1, [pc, #220]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227a:	e03a      	b.n	80022f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d020      	beq.n	80022c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002284:	4b34      	ldr	r3, [pc, #208]	@ (8002358 <HAL_RCC_OscConfig+0x244>)
 8002286:	2201      	movs	r2, #1
 8002288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228a:	f7ff fc61 	bl	8001b50 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002292:	f7ff fc5d 	bl	8001b50 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e1a8      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b0:	4b28      	ldr	r3, [pc, #160]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4925      	ldr	r1, [pc, #148]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	600b      	str	r3, [r1, #0]
 80022c4:	e015      	b.n	80022f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c6:	4b24      	ldr	r3, [pc, #144]	@ (8002358 <HAL_RCC_OscConfig+0x244>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7ff fc40 	bl	8001b50 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d4:	f7ff fc3c 	bl	8001b50 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e187      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d036      	beq.n	800236c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d016      	beq.n	8002334 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002306:	4b15      	ldr	r3, [pc, #84]	@ (800235c <HAL_RCC_OscConfig+0x248>)
 8002308:	2201      	movs	r2, #1
 800230a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230c:	f7ff fc20 	bl	8001b50 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002314:	f7ff fc1c 	bl	8001b50 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e167      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002326:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <HAL_RCC_OscConfig+0x240>)
 8002328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x200>
 8002332:	e01b      	b.n	800236c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002334:	4b09      	ldr	r3, [pc, #36]	@ (800235c <HAL_RCC_OscConfig+0x248>)
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233a:	f7ff fc09 	bl	8001b50 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002340:	e00e      	b.n	8002360 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002342:	f7ff fc05 	bl	8001b50 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d907      	bls.n	8002360 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e150      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
 8002354:	40023800 	.word	0x40023800
 8002358:	42470000 	.word	0x42470000
 800235c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002360:	4b88      	ldr	r3, [pc, #544]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 8002362:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1ea      	bne.n	8002342 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 8097 	beq.w	80024a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237a:	2300      	movs	r3, #0
 800237c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800237e:	4b81      	ldr	r3, [pc, #516]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10f      	bne.n	80023aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	4b7d      	ldr	r3, [pc, #500]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	4a7c      	ldr	r2, [pc, #496]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 8002394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002398:	6413      	str	r3, [r2, #64]	@ 0x40
 800239a:	4b7a      	ldr	r3, [pc, #488]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a6:	2301      	movs	r3, #1
 80023a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023aa:	4b77      	ldr	r3, [pc, #476]	@ (8002588 <HAL_RCC_OscConfig+0x474>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d118      	bne.n	80023e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023b6:	4b74      	ldr	r3, [pc, #464]	@ (8002588 <HAL_RCC_OscConfig+0x474>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a73      	ldr	r2, [pc, #460]	@ (8002588 <HAL_RCC_OscConfig+0x474>)
 80023bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c2:	f7ff fbc5 	bl	8001b50 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ca:	f7ff fbc1 	bl	8001b50 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e10c      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002588 <HAL_RCC_OscConfig+0x474>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x2ea>
 80023f0:	4b64      	ldr	r3, [pc, #400]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 80023f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f4:	4a63      	ldr	r2, [pc, #396]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80023fc:	e01c      	b.n	8002438 <HAL_RCC_OscConfig+0x324>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b05      	cmp	r3, #5
 8002404:	d10c      	bne.n	8002420 <HAL_RCC_OscConfig+0x30c>
 8002406:	4b5f      	ldr	r3, [pc, #380]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800240a:	4a5e      	ldr	r2, [pc, #376]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 800240c:	f043 0304 	orr.w	r3, r3, #4
 8002410:	6713      	str	r3, [r2, #112]	@ 0x70
 8002412:	4b5c      	ldr	r3, [pc, #368]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002416:	4a5b      	ldr	r2, [pc, #364]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6713      	str	r3, [r2, #112]	@ 0x70
 800241e:	e00b      	b.n	8002438 <HAL_RCC_OscConfig+0x324>
 8002420:	4b58      	ldr	r3, [pc, #352]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002424:	4a57      	ldr	r2, [pc, #348]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 8002426:	f023 0301 	bic.w	r3, r3, #1
 800242a:	6713      	str	r3, [r2, #112]	@ 0x70
 800242c:	4b55      	ldr	r3, [pc, #340]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 800242e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002430:	4a54      	ldr	r2, [pc, #336]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 8002432:	f023 0304 	bic.w	r3, r3, #4
 8002436:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d015      	beq.n	800246c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7ff fb86 	bl	8001b50 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002446:	e00a      	b.n	800245e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002448:	f7ff fb82 	bl	8001b50 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e0cb      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245e:	4b49      	ldr	r3, [pc, #292]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0ee      	beq.n	8002448 <HAL_RCC_OscConfig+0x334>
 800246a:	e014      	b.n	8002496 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246c:	f7ff fb70 	bl	8001b50 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002472:	e00a      	b.n	800248a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002474:	f7ff fb6c 	bl	8001b50 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e0b5      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248a:	4b3e      	ldr	r3, [pc, #248]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 800248c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1ee      	bne.n	8002474 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002496:	7dfb      	ldrb	r3, [r7, #23]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d105      	bne.n	80024a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249c:	4b39      	ldr	r3, [pc, #228]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 800249e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a0:	4a38      	ldr	r2, [pc, #224]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 80024a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 80a1 	beq.w	80025f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024b2:	4b34      	ldr	r3, [pc, #208]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d05c      	beq.n	8002578 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d141      	bne.n	800254a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c6:	4b31      	ldr	r3, [pc, #196]	@ (800258c <HAL_RCC_OscConfig+0x478>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7ff fb40 	bl	8001b50 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d4:	f7ff fb3c 	bl	8001b50 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e087      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e6:	4b27      	ldr	r3, [pc, #156]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69da      	ldr	r2, [r3, #28]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	019b      	lsls	r3, r3, #6
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002508:	085b      	lsrs	r3, r3, #1
 800250a:	3b01      	subs	r3, #1
 800250c:	041b      	lsls	r3, r3, #16
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002514:	061b      	lsls	r3, r3, #24
 8002516:	491b      	ldr	r1, [pc, #108]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800251c:	4b1b      	ldr	r3, [pc, #108]	@ (800258c <HAL_RCC_OscConfig+0x478>)
 800251e:	2201      	movs	r2, #1
 8002520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002522:	f7ff fb15 	bl	8001b50 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252a:	f7ff fb11 	bl	8001b50 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e05c      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253c:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x416>
 8002548:	e054      	b.n	80025f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254a:	4b10      	ldr	r3, [pc, #64]	@ (800258c <HAL_RCC_OscConfig+0x478>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7ff fafe 	bl	8001b50 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002558:	f7ff fafa 	bl	8001b50 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e045      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256a:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <HAL_RCC_OscConfig+0x470>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x444>
 8002576:	e03d      	b.n	80025f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d107      	bne.n	8002590 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e038      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
 8002584:	40023800 	.word	0x40023800
 8002588:	40007000 	.word	0x40007000
 800258c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002590:	4b1b      	ldr	r3, [pc, #108]	@ (8002600 <HAL_RCC_OscConfig+0x4ec>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d028      	beq.n	80025f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d121      	bne.n	80025f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d11a      	bne.n	80025f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025c0:	4013      	ands	r3, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d111      	bne.n	80025f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d6:	085b      	lsrs	r3, r3, #1
 80025d8:	3b01      	subs	r3, #1
 80025da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025dc:	429a      	cmp	r2, r3
 80025de:	d107      	bne.n	80025f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40023800 	.word	0x40023800

08002604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0cc      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002618:	4b68      	ldr	r3, [pc, #416]	@ (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d90c      	bls.n	8002640 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	4b65      	ldr	r3, [pc, #404]	@ (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b63      	ldr	r3, [pc, #396]	@ (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0b8      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d020      	beq.n	800268e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002658:	4b59      	ldr	r3, [pc, #356]	@ (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	4a58      	ldr	r2, [pc, #352]	@ (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002662:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002670:	4b53      	ldr	r3, [pc, #332]	@ (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4a52      	ldr	r2, [pc, #328]	@ (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800267a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800267c:	4b50      	ldr	r3, [pc, #320]	@ (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	494d      	ldr	r1, [pc, #308]	@ (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d044      	beq.n	8002724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	4b47      	ldr	r3, [pc, #284]	@ (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d119      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e07f      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d003      	beq.n	80026c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c2:	4b3f      	ldr	r3, [pc, #252]	@ (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e06f      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d2:	4b3b      	ldr	r3, [pc, #236]	@ (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e067      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e2:	4b37      	ldr	r3, [pc, #220]	@ (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f023 0203 	bic.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4934      	ldr	r1, [pc, #208]	@ (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f4:	f7ff fa2c 	bl	8001b50 <HAL_GetTick>
 80026f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fc:	f7ff fa28 	bl	8001b50 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e04f      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	4b2b      	ldr	r3, [pc, #172]	@ (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 020c 	and.w	r2, r3, #12
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	429a      	cmp	r2, r3
 8002722:	d1eb      	bne.n	80026fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002724:	4b25      	ldr	r3, [pc, #148]	@ (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d20c      	bcs.n	800274c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b22      	ldr	r3, [pc, #136]	@ (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b20      	ldr	r3, [pc, #128]	@ (80027bc <HAL_RCC_ClockConfig+0x1b8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e032      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002758:	4b19      	ldr	r3, [pc, #100]	@ (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4916      	ldr	r1, [pc, #88]	@ (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	4313      	orrs	r3, r2
 8002768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002776:	4b12      	ldr	r3, [pc, #72]	@ (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	490e      	ldr	r1, [pc, #56]	@ (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	4313      	orrs	r3, r2
 8002788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800278a:	f000 f821 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 800278e:	4602      	mov	r2, r0
 8002790:	4b0b      	ldr	r3, [pc, #44]	@ (80027c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	490a      	ldr	r1, [pc, #40]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	5ccb      	ldrb	r3, [r1, r3]
 800279e:	fa22 f303 	lsr.w	r3, r2, r3
 80027a2:	4a09      	ldr	r2, [pc, #36]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80027a6:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <HAL_RCC_ClockConfig+0x1c8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff f886 	bl	80018bc <HAL_InitTick>

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40023c00 	.word	0x40023c00
 80027c0:	40023800 	.word	0x40023800
 80027c4:	0800645c 	.word	0x0800645c
 80027c8:	20000000 	.word	0x20000000
 80027cc:	20000004 	.word	0x20000004

080027d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027d4:	b090      	sub	sp, #64	@ 0x40
 80027d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027e8:	4b59      	ldr	r3, [pc, #356]	@ (8002950 <HAL_RCC_GetSysClockFreq+0x180>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 030c 	and.w	r3, r3, #12
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d00d      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0x40>
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	f200 80a1 	bhi.w	800293c <HAL_RCC_GetSysClockFreq+0x16c>
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x34>
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d003      	beq.n	800280a <HAL_RCC_GetSysClockFreq+0x3a>
 8002802:	e09b      	b.n	800293c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002804:	4b53      	ldr	r3, [pc, #332]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x184>)
 8002806:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002808:	e09b      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800280a:	4b53      	ldr	r3, [pc, #332]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x188>)
 800280c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800280e:	e098      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002810:	4b4f      	ldr	r3, [pc, #316]	@ (8002950 <HAL_RCC_GetSysClockFreq+0x180>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002818:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800281a:	4b4d      	ldr	r3, [pc, #308]	@ (8002950 <HAL_RCC_GetSysClockFreq+0x180>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d028      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002826:	4b4a      	ldr	r3, [pc, #296]	@ (8002950 <HAL_RCC_GetSysClockFreq+0x180>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	099b      	lsrs	r3, r3, #6
 800282c:	2200      	movs	r2, #0
 800282e:	623b      	str	r3, [r7, #32]
 8002830:	627a      	str	r2, [r7, #36]	@ 0x24
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002838:	2100      	movs	r1, #0
 800283a:	4b47      	ldr	r3, [pc, #284]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x188>)
 800283c:	fb03 f201 	mul.w	r2, r3, r1
 8002840:	2300      	movs	r3, #0
 8002842:	fb00 f303 	mul.w	r3, r0, r3
 8002846:	4413      	add	r3, r2
 8002848:	4a43      	ldr	r2, [pc, #268]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x188>)
 800284a:	fba0 1202 	umull	r1, r2, r0, r2
 800284e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002850:	460a      	mov	r2, r1
 8002852:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002854:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002856:	4413      	add	r3, r2
 8002858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800285a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800285c:	2200      	movs	r2, #0
 800285e:	61bb      	str	r3, [r7, #24]
 8002860:	61fa      	str	r2, [r7, #28]
 8002862:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002866:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800286a:	f7fd fd09 	bl	8000280 <__aeabi_uldivmod>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4613      	mov	r3, r2
 8002874:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002876:	e053      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <HAL_RCC_GetSysClockFreq+0x180>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	099b      	lsrs	r3, r3, #6
 800287e:	2200      	movs	r2, #0
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	617a      	str	r2, [r7, #20]
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800288a:	f04f 0b00 	mov.w	fp, #0
 800288e:	4652      	mov	r2, sl
 8002890:	465b      	mov	r3, fp
 8002892:	f04f 0000 	mov.w	r0, #0
 8002896:	f04f 0100 	mov.w	r1, #0
 800289a:	0159      	lsls	r1, r3, #5
 800289c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028a0:	0150      	lsls	r0, r2, #5
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	ebb2 080a 	subs.w	r8, r2, sl
 80028aa:	eb63 090b 	sbc.w	r9, r3, fp
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028c2:	ebb2 0408 	subs.w	r4, r2, r8
 80028c6:	eb63 0509 	sbc.w	r5, r3, r9
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	00eb      	lsls	r3, r5, #3
 80028d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028d8:	00e2      	lsls	r2, r4, #3
 80028da:	4614      	mov	r4, r2
 80028dc:	461d      	mov	r5, r3
 80028de:	eb14 030a 	adds.w	r3, r4, sl
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	eb45 030b 	adc.w	r3, r5, fp
 80028e8:	607b      	str	r3, [r7, #4]
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028f6:	4629      	mov	r1, r5
 80028f8:	028b      	lsls	r3, r1, #10
 80028fa:	4621      	mov	r1, r4
 80028fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002900:	4621      	mov	r1, r4
 8002902:	028a      	lsls	r2, r1, #10
 8002904:	4610      	mov	r0, r2
 8002906:	4619      	mov	r1, r3
 8002908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800290a:	2200      	movs	r2, #0
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	60fa      	str	r2, [r7, #12]
 8002910:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002914:	f7fd fcb4 	bl	8000280 <__aeabi_uldivmod>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4613      	mov	r3, r2
 800291e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002920:	4b0b      	ldr	r3, [pc, #44]	@ (8002950 <HAL_RCC_GetSysClockFreq+0x180>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	0c1b      	lsrs	r3, r3, #16
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	3301      	adds	r3, #1
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002930:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002934:	fbb2 f3f3 	udiv	r3, r2, r3
 8002938:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800293a:	e002      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800293c:	4b05      	ldr	r3, [pc, #20]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x184>)
 800293e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002944:	4618      	mov	r0, r3
 8002946:	3740      	adds	r7, #64	@ 0x40
 8002948:	46bd      	mov	sp, r7
 800294a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800
 8002954:	00f42400 	.word	0x00f42400
 8002958:	017d7840 	.word	0x017d7840

0800295c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002960:	4b03      	ldr	r3, [pc, #12]	@ (8002970 <HAL_RCC_GetHCLKFreq+0x14>)
 8002962:	681b      	ldr	r3, [r3, #0]
}
 8002964:	4618      	mov	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	20000000 	.word	0x20000000

08002974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002978:	f7ff fff0 	bl	800295c <HAL_RCC_GetHCLKFreq>
 800297c:	4602      	mov	r2, r0
 800297e:	4b05      	ldr	r3, [pc, #20]	@ (8002994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	0b5b      	lsrs	r3, r3, #13
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	4903      	ldr	r1, [pc, #12]	@ (8002998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800298a:	5ccb      	ldrb	r3, [r1, r3]
 800298c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002990:	4618      	mov	r0, r3
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40023800 	.word	0x40023800
 8002998:	0800646c 	.word	0x0800646c

0800299c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	220f      	movs	r2, #15
 80029aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029ac:	4b12      	ldr	r3, [pc, #72]	@ (80029f8 <HAL_RCC_GetClockConfig+0x5c>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0203 	and.w	r2, r3, #3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029b8:	4b0f      	ldr	r3, [pc, #60]	@ (80029f8 <HAL_RCC_GetClockConfig+0x5c>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029c4:	4b0c      	ldr	r3, [pc, #48]	@ (80029f8 <HAL_RCC_GetClockConfig+0x5c>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029d0:	4b09      	ldr	r3, [pc, #36]	@ (80029f8 <HAL_RCC_GetClockConfig+0x5c>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	08db      	lsrs	r3, r3, #3
 80029d6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029de:	4b07      	ldr	r3, [pc, #28]	@ (80029fc <HAL_RCC_GetClockConfig+0x60>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0207 	and.w	r2, r3, #7
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	601a      	str	r2, [r3, #0]
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40023c00 	.word	0x40023c00

08002a00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e07b      	b.n	8002b0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d108      	bne.n	8002a2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a22:	d009      	beq.n	8002a38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	61da      	str	r2, [r3, #28]
 8002a2a:	e005      	b.n	8002a38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fe fe6a 	bl	800172c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002abc:	ea42 0103 	orr.w	r1, r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	0c1b      	lsrs	r3, r3, #16
 8002ad6:	f003 0104 	and.w	r1, r3, #4
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	f003 0210 	and.w	r2, r3, #16
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	69da      	ldr	r2, [r3, #28]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002af8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b088      	sub	sp, #32
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	603b      	str	r3, [r7, #0]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b22:	f7ff f815 	bl	8001b50 <HAL_GetTick>
 8002b26:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d001      	beq.n	8002b3c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e12a      	b.n	8002d92 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <HAL_SPI_Transmit+0x36>
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e122      	b.n	8002d92 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_SPI_Transmit+0x48>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e11b      	b.n	8002d92 <HAL_SPI_Transmit+0x280>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2203      	movs	r2, #3
 8002b66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	88fa      	ldrh	r2, [r7, #6]
 8002b7a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	88fa      	ldrh	r2, [r7, #6]
 8002b80:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ba8:	d10f      	bne.n	8002bca <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd4:	2b40      	cmp	r3, #64	@ 0x40
 8002bd6:	d007      	beq.n	8002be8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002be6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bf0:	d152      	bne.n	8002c98 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <HAL_SPI_Transmit+0xee>
 8002bfa:	8b7b      	ldrh	r3, [r7, #26]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d145      	bne.n	8002c8c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c04:	881a      	ldrh	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c10:	1c9a      	adds	r2, r3, #2
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c24:	e032      	b.n	8002c8c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d112      	bne.n	8002c5a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c38:	881a      	ldrh	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c44:	1c9a      	adds	r2, r3, #2
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002c58:	e018      	b.n	8002c8c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c5a:	f7fe ff79 	bl	8001b50 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d803      	bhi.n	8002c72 <HAL_SPI_Transmit+0x160>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c70:	d102      	bne.n	8002c78 <HAL_SPI_Transmit+0x166>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d109      	bne.n	8002c8c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e082      	b.n	8002d92 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1c7      	bne.n	8002c26 <HAL_SPI_Transmit+0x114>
 8002c96:	e053      	b.n	8002d40 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <HAL_SPI_Transmit+0x194>
 8002ca0:	8b7b      	ldrh	r3, [r7, #26]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d147      	bne.n	8002d36 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	330c      	adds	r3, #12
 8002cb0:	7812      	ldrb	r2, [r2, #0]
 8002cb2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ccc:	e033      	b.n	8002d36 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d113      	bne.n	8002d04 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	330c      	adds	r3, #12
 8002ce6:	7812      	ldrb	r2, [r2, #0]
 8002ce8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d02:	e018      	b.n	8002d36 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d04:	f7fe ff24 	bl	8001b50 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d803      	bhi.n	8002d1c <HAL_SPI_Transmit+0x20a>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1a:	d102      	bne.n	8002d22 <HAL_SPI_Transmit+0x210>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e02d      	b.n	8002d92 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1c6      	bne.n	8002cce <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d40:	69fa      	ldr	r2, [r7, #28]
 8002d42:	6839      	ldr	r1, [r7, #0]
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 fbd9 	bl	80034fc <SPI_EndRxTxTransaction>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2220      	movs	r2, #32
 8002d54:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10a      	bne.n	8002d74 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002d90:	2300      	movs	r3, #0
  }
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3720      	adds	r7, #32
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b088      	sub	sp, #32
 8002d9e:	af02      	add	r7, sp, #8
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	603b      	str	r3, [r7, #0]
 8002da6:	4613      	mov	r3, r2
 8002da8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d001      	beq.n	8002dba <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002db6:	2302      	movs	r3, #2
 8002db8:	e104      	b.n	8002fc4 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <HAL_SPI_Receive+0x2c>
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e0fc      	b.n	8002fc4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dd2:	d112      	bne.n	8002dfa <HAL_SPI_Receive+0x60>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10e      	bne.n	8002dfa <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2204      	movs	r2, #4
 8002de0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002de4:	88fa      	ldrh	r2, [r7, #6]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	4613      	mov	r3, r2
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f8eb 	bl	8002fcc <HAL_SPI_TransmitReceive>
 8002df6:	4603      	mov	r3, r0
 8002df8:	e0e4      	b.n	8002fc4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dfa:	f7fe fea9 	bl	8001b50 <HAL_GetTick>
 8002dfe:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_SPI_Receive+0x74>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e0da      	b.n	8002fc4 <HAL_SPI_Receive+0x22a>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2204      	movs	r2, #4
 8002e1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	88fa      	ldrh	r2, [r7, #6]
 8002e2e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	88fa      	ldrh	r2, [r7, #6]
 8002e34:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e5c:	d10f      	bne.n	8002e7e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e7c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e88:	2b40      	cmp	r3, #64	@ 0x40
 8002e8a:	d007      	beq.n	8002e9c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e9a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d170      	bne.n	8002f86 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ea4:	e035      	b.n	8002f12 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d115      	bne.n	8002ee0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f103 020c 	add.w	r2, r3, #12
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec0:	7812      	ldrb	r2, [r2, #0]
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ede:	e018      	b.n	8002f12 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ee0:	f7fe fe36 	bl	8001b50 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d803      	bhi.n	8002ef8 <HAL_SPI_Receive+0x15e>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef6:	d102      	bne.n	8002efe <HAL_SPI_Receive+0x164>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e058      	b.n	8002fc4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1c4      	bne.n	8002ea6 <HAL_SPI_Receive+0x10c>
 8002f1c:	e038      	b.n	8002f90 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d113      	bne.n	8002f54 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f36:	b292      	uxth	r2, r2
 8002f38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3e:	1c9a      	adds	r2, r3, #2
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f52:	e018      	b.n	8002f86 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f54:	f7fe fdfc 	bl	8001b50 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d803      	bhi.n	8002f6c <HAL_SPI_Receive+0x1d2>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6a:	d102      	bne.n	8002f72 <HAL_SPI_Receive+0x1d8>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d109      	bne.n	8002f86 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e01e      	b.n	8002fc4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1c6      	bne.n	8002f1e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	6839      	ldr	r1, [r7, #0]
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 fa4b 	bl	8003430 <SPI_EndRxTransaction>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
  }
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	@ 0x28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fde:	f7fe fdb7 	bl	8001b50 <HAL_GetTick>
 8002fe2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fea:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002ff2:	887b      	ldrh	r3, [r7, #2]
 8002ff4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ff6:	7ffb      	ldrb	r3, [r7, #31]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d00c      	beq.n	8003016 <HAL_SPI_TransmitReceive+0x4a>
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003002:	d106      	bne.n	8003012 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d102      	bne.n	8003012 <HAL_SPI_TransmitReceive+0x46>
 800300c:	7ffb      	ldrb	r3, [r7, #31]
 800300e:	2b04      	cmp	r3, #4
 8003010:	d001      	beq.n	8003016 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003012:	2302      	movs	r3, #2
 8003014:	e17f      	b.n	8003316 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_SPI_TransmitReceive+0x5c>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <HAL_SPI_TransmitReceive+0x5c>
 8003022:	887b      	ldrh	r3, [r7, #2]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e174      	b.n	8003316 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_SPI_TransmitReceive+0x6e>
 8003036:	2302      	movs	r3, #2
 8003038:	e16d      	b.n	8003316 <HAL_SPI_TransmitReceive+0x34a>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b04      	cmp	r3, #4
 800304c:	d003      	beq.n	8003056 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2205      	movs	r2, #5
 8003052:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	887a      	ldrh	r2, [r7, #2]
 8003066:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	887a      	ldrh	r2, [r7, #2]
 800306c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	887a      	ldrh	r2, [r7, #2]
 8003078:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	887a      	ldrh	r2, [r7, #2]
 800307e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003096:	2b40      	cmp	r3, #64	@ 0x40
 8003098:	d007      	beq.n	80030aa <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030b2:	d17e      	bne.n	80031b2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <HAL_SPI_TransmitReceive+0xf6>
 80030bc:	8afb      	ldrh	r3, [r7, #22]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d16c      	bne.n	800319c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c6:	881a      	ldrh	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	1c9a      	adds	r2, r3, #2
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030e6:	e059      	b.n	800319c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d11b      	bne.n	800312e <HAL_SPI_TransmitReceive+0x162>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d016      	beq.n	800312e <HAL_SPI_TransmitReceive+0x162>
 8003100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003102:	2b01      	cmp	r3, #1
 8003104:	d113      	bne.n	800312e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310a:	881a      	ldrh	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	1c9a      	adds	r2, r3, #2
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003120:	b29b      	uxth	r3, r3
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d119      	bne.n	8003170 <HAL_SPI_TransmitReceive+0x1a4>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003140:	b29b      	uxth	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d014      	beq.n	8003170 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003150:	b292      	uxth	r2, r2
 8003152:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003158:	1c9a      	adds	r2, r3, #2
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800316c:	2301      	movs	r3, #1
 800316e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003170:	f7fe fcee 	bl	8001b50 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800317c:	429a      	cmp	r2, r3
 800317e:	d80d      	bhi.n	800319c <HAL_SPI_TransmitReceive+0x1d0>
 8003180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003186:	d009      	beq.n	800319c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e0bc      	b.n	8003316 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1a0      	bne.n	80030e8 <HAL_SPI_TransmitReceive+0x11c>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d19b      	bne.n	80030e8 <HAL_SPI_TransmitReceive+0x11c>
 80031b0:	e082      	b.n	80032b8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <HAL_SPI_TransmitReceive+0x1f4>
 80031ba:	8afb      	ldrh	r3, [r7, #22]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d171      	bne.n	80032a4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	330c      	adds	r3, #12
 80031ca:	7812      	ldrb	r2, [r2, #0]
 80031cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031e6:	e05d      	b.n	80032a4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d11c      	bne.n	8003230 <HAL_SPI_TransmitReceive+0x264>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d017      	beq.n	8003230 <HAL_SPI_TransmitReceive+0x264>
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	2b01      	cmp	r3, #1
 8003204:	d114      	bne.n	8003230 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	330c      	adds	r3, #12
 8003210:	7812      	ldrb	r2, [r2, #0]
 8003212:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003222:	b29b      	uxth	r3, r3
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b01      	cmp	r3, #1
 800323c:	d119      	bne.n	8003272 <HAL_SPI_TransmitReceive+0x2a6>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d014      	beq.n	8003272 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800326e:	2301      	movs	r3, #1
 8003270:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003272:	f7fe fc6d 	bl	8001b50 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800327e:	429a      	cmp	r2, r3
 8003280:	d803      	bhi.n	800328a <HAL_SPI_TransmitReceive+0x2be>
 8003282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003288:	d102      	bne.n	8003290 <HAL_SPI_TransmitReceive+0x2c4>
 800328a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328c:	2b00      	cmp	r3, #0
 800328e:	d109      	bne.n	80032a4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e038      	b.n	8003316 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d19c      	bne.n	80031e8 <HAL_SPI_TransmitReceive+0x21c>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d197      	bne.n	80031e8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032b8:	6a3a      	ldr	r2, [r7, #32]
 80032ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 f91d 	bl	80034fc <SPI_EndRxTxTransaction>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e01d      	b.n	8003316 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10a      	bne.n	80032f8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032e2:	2300      	movs	r3, #0
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003314:	2300      	movs	r3, #0
  }
}
 8003316:	4618      	mov	r0, r3
 8003318:	3728      	adds	r7, #40	@ 0x28
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	4613      	mov	r3, r2
 800332e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003330:	f7fe fc0e 	bl	8001b50 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	4413      	add	r3, r2
 800333e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003340:	f7fe fc06 	bl	8001b50 <HAL_GetTick>
 8003344:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003346:	4b39      	ldr	r3, [pc, #228]	@ (800342c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	015b      	lsls	r3, r3, #5
 800334c:	0d1b      	lsrs	r3, r3, #20
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	fb02 f303 	mul.w	r3, r2, r3
 8003354:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003356:	e055      	b.n	8003404 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335e:	d051      	beq.n	8003404 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003360:	f7fe fbf6 	bl	8001b50 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	429a      	cmp	r2, r3
 800336e:	d902      	bls.n	8003376 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d13d      	bne.n	80033f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003384:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800338e:	d111      	bne.n	80033b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003398:	d004      	beq.n	80033a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033a2:	d107      	bne.n	80033b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033bc:	d10f      	bne.n	80033de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e018      	b.n	8003424 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d102      	bne.n	80033fe <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61fb      	str	r3, [r7, #28]
 80033fc:	e002      	b.n	8003404 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	3b01      	subs	r3, #1
 8003402:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	4013      	ands	r3, r2
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	429a      	cmp	r2, r3
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	429a      	cmp	r2, r3
 8003420:	d19a      	bne.n	8003358 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3720      	adds	r7, #32
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20000000 	.word	0x20000000

08003430 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003444:	d111      	bne.n	800346a <SPI_EndRxTransaction+0x3a>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800344e:	d004      	beq.n	800345a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003458:	d107      	bne.n	800346a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003468:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003472:	d12a      	bne.n	80034ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800347c:	d012      	beq.n	80034a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2200      	movs	r2, #0
 8003486:	2180      	movs	r1, #128	@ 0x80
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f7ff ff49 	bl	8003320 <SPI_WaitFlagStateUntilTimeout>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d02d      	beq.n	80034f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003498:	f043 0220 	orr.w	r2, r3, #32
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e026      	b.n	80034f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2200      	movs	r2, #0
 80034ac:	2101      	movs	r1, #1
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f7ff ff36 	bl	8003320 <SPI_WaitFlagStateUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d01a      	beq.n	80034f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034be:	f043 0220 	orr.w	r2, r3, #32
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e013      	b.n	80034f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2200      	movs	r2, #0
 80034d2:	2101      	movs	r1, #1
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff ff23 	bl	8003320 <SPI_WaitFlagStateUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d007      	beq.n	80034f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e000      	b.n	80034f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af02      	add	r7, sp, #8
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2201      	movs	r2, #1
 8003510:	2102      	movs	r1, #2
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f7ff ff04 	bl	8003320 <SPI_WaitFlagStateUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d007      	beq.n	800352e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003522:	f043 0220 	orr.w	r2, r3, #32
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e032      	b.n	8003594 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800352e:	4b1b      	ldr	r3, [pc, #108]	@ (800359c <SPI_EndRxTxTransaction+0xa0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1b      	ldr	r2, [pc, #108]	@ (80035a0 <SPI_EndRxTxTransaction+0xa4>)
 8003534:	fba2 2303 	umull	r2, r3, r2, r3
 8003538:	0d5b      	lsrs	r3, r3, #21
 800353a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800353e:	fb02 f303 	mul.w	r3, r2, r3
 8003542:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800354c:	d112      	bne.n	8003574 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2200      	movs	r2, #0
 8003556:	2180      	movs	r1, #128	@ 0x80
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f7ff fee1 	bl	8003320 <SPI_WaitFlagStateUntilTimeout>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d016      	beq.n	8003592 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003568:	f043 0220 	orr.w	r2, r3, #32
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e00f      	b.n	8003594 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	3b01      	subs	r3, #1
 800357e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800358a:	2b80      	cmp	r3, #128	@ 0x80
 800358c:	d0f2      	beq.n	8003574 <SPI_EndRxTxTransaction+0x78>
 800358e:	e000      	b.n	8003592 <SPI_EndRxTxTransaction+0x96>
        break;
 8003590:	bf00      	nop
  }

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	20000000 	.word	0x20000000
 80035a0:	165e9f81 	.word	0x165e9f81

080035a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e041      	b.n	800363a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fe f916 	bl	80017fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	4619      	mov	r1, r3
 80035e2:	4610      	mov	r0, r2
 80035e4:	f000 fc32 	bl	8003e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	d001      	beq.n	800365c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e044      	b.n	80036e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1e      	ldr	r2, [pc, #120]	@ (80036f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d018      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x6c>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003686:	d013      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x6c>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1a      	ldr	r2, [pc, #104]	@ (80036f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00e      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x6c>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a19      	ldr	r2, [pc, #100]	@ (80036fc <HAL_TIM_Base_Start_IT+0xb8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d009      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x6c>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a17      	ldr	r2, [pc, #92]	@ (8003700 <HAL_TIM_Base_Start_IT+0xbc>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d004      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x6c>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a16      	ldr	r2, [pc, #88]	@ (8003704 <HAL_TIM_Base_Start_IT+0xc0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d111      	bne.n	80036d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b06      	cmp	r3, #6
 80036c0:	d010      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0201 	orr.w	r2, r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d2:	e007      	b.n	80036e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40010000 	.word	0x40010000
 80036f8:	40000400 	.word	0x40000400
 80036fc:	40000800 	.word	0x40000800
 8003700:	40000c00 	.word	0x40000c00
 8003704:	40014000 	.word	0x40014000

08003708 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e041      	b.n	800379e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fe f844 	bl	80017bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3304      	adds	r3, #4
 8003744:	4619      	mov	r1, r3
 8003746:	4610      	mov	r0, r2
 8003748:	f000 fb80 	bl	8003e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d109      	bne.n	80037cc <HAL_TIM_PWM_Start+0x24>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	bf14      	ite	ne
 80037c4:	2301      	movne	r3, #1
 80037c6:	2300      	moveq	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	e022      	b.n	8003812 <HAL_TIM_PWM_Start+0x6a>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d109      	bne.n	80037e6 <HAL_TIM_PWM_Start+0x3e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b01      	cmp	r3, #1
 80037dc:	bf14      	ite	ne
 80037de:	2301      	movne	r3, #1
 80037e0:	2300      	moveq	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	e015      	b.n	8003812 <HAL_TIM_PWM_Start+0x6a>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d109      	bne.n	8003800 <HAL_TIM_PWM_Start+0x58>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	bf14      	ite	ne
 80037f8:	2301      	movne	r3, #1
 80037fa:	2300      	moveq	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	e008      	b.n	8003812 <HAL_TIM_PWM_Start+0x6a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	bf14      	ite	ne
 800380c:	2301      	movne	r3, #1
 800380e:	2300      	moveq	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e068      	b.n	80038ec <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d104      	bne.n	800382a <HAL_TIM_PWM_Start+0x82>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003828:	e013      	b.n	8003852 <HAL_TIM_PWM_Start+0xaa>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b04      	cmp	r3, #4
 800382e:	d104      	bne.n	800383a <HAL_TIM_PWM_Start+0x92>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003838:	e00b      	b.n	8003852 <HAL_TIM_PWM_Start+0xaa>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b08      	cmp	r3, #8
 800383e:	d104      	bne.n	800384a <HAL_TIM_PWM_Start+0xa2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003848:	e003      	b.n	8003852 <HAL_TIM_PWM_Start+0xaa>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2202      	movs	r2, #2
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2201      	movs	r2, #1
 8003858:	6839      	ldr	r1, [r7, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fda2 	bl	80043a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a23      	ldr	r2, [pc, #140]	@ (80038f4 <HAL_TIM_PWM_Start+0x14c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d107      	bne.n	800387a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003878:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1d      	ldr	r2, [pc, #116]	@ (80038f4 <HAL_TIM_PWM_Start+0x14c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d018      	beq.n	80038b6 <HAL_TIM_PWM_Start+0x10e>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800388c:	d013      	beq.n	80038b6 <HAL_TIM_PWM_Start+0x10e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a19      	ldr	r2, [pc, #100]	@ (80038f8 <HAL_TIM_PWM_Start+0x150>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00e      	beq.n	80038b6 <HAL_TIM_PWM_Start+0x10e>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a17      	ldr	r2, [pc, #92]	@ (80038fc <HAL_TIM_PWM_Start+0x154>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d009      	beq.n	80038b6 <HAL_TIM_PWM_Start+0x10e>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a16      	ldr	r2, [pc, #88]	@ (8003900 <HAL_TIM_PWM_Start+0x158>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d004      	beq.n	80038b6 <HAL_TIM_PWM_Start+0x10e>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a14      	ldr	r2, [pc, #80]	@ (8003904 <HAL_TIM_PWM_Start+0x15c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d111      	bne.n	80038da <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2b06      	cmp	r3, #6
 80038c6:	d010      	beq.n	80038ea <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d8:	e007      	b.n	80038ea <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0201 	orr.w	r2, r2, #1
 80038e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40010000 	.word	0x40010000
 80038f8:	40000400 	.word	0x40000400
 80038fc:	40000800 	.word	0x40000800
 8003900:	40000c00 	.word	0x40000c00
 8003904:	40014000 	.word	0x40014000

08003908 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d020      	beq.n	800396c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01b      	beq.n	800396c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0202 	mvn.w	r2, #2
 800393c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fa5b 	bl	8003e0e <HAL_TIM_IC_CaptureCallback>
 8003958:	e005      	b.n	8003966 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fa4d 	bl	8003dfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fa5e 	bl	8003e22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b00      	cmp	r3, #0
 8003974:	d020      	beq.n	80039b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01b      	beq.n	80039b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f06f 0204 	mvn.w	r2, #4
 8003988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2202      	movs	r2, #2
 800398e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fa35 	bl	8003e0e <HAL_TIM_IC_CaptureCallback>
 80039a4:	e005      	b.n	80039b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fa27 	bl	8003dfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 fa38 	bl	8003e22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d020      	beq.n	8003a04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01b      	beq.n	8003a04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0208 	mvn.w	r2, #8
 80039d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2204      	movs	r2, #4
 80039da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fa0f 	bl	8003e0e <HAL_TIM_IC_CaptureCallback>
 80039f0:	e005      	b.n	80039fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fa01 	bl	8003dfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 fa12 	bl	8003e22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f003 0310 	and.w	r3, r3, #16
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d020      	beq.n	8003a50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d01b      	beq.n	8003a50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f06f 0210 	mvn.w	r2, #16
 8003a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2208      	movs	r2, #8
 8003a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f9e9 	bl	8003e0e <HAL_TIM_IC_CaptureCallback>
 8003a3c:	e005      	b.n	8003a4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f9db 	bl	8003dfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f9ec 	bl	8003e22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00c      	beq.n	8003a74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0201 	mvn.w	r2, #1
 8003a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7fd fbba 	bl	80011e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00c      	beq.n	8003a98 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d007      	beq.n	8003a98 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fd24 	bl	80044e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00c      	beq.n	8003abc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d007      	beq.n	8003abc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f9bd 	bl	8003e36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00c      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0220 	mvn.w	r2, #32
 8003ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fcf6 	bl	80044cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ae0:	bf00      	nop
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e0ae      	b.n	8003c64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b0c      	cmp	r3, #12
 8003b12:	f200 809f 	bhi.w	8003c54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b16:	a201      	add	r2, pc, #4	@ (adr r2, 8003b1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1c:	08003b51 	.word	0x08003b51
 8003b20:	08003c55 	.word	0x08003c55
 8003b24:	08003c55 	.word	0x08003c55
 8003b28:	08003c55 	.word	0x08003c55
 8003b2c:	08003b91 	.word	0x08003b91
 8003b30:	08003c55 	.word	0x08003c55
 8003b34:	08003c55 	.word	0x08003c55
 8003b38:	08003c55 	.word	0x08003c55
 8003b3c:	08003bd3 	.word	0x08003bd3
 8003b40:	08003c55 	.word	0x08003c55
 8003b44:	08003c55 	.word	0x08003c55
 8003b48:	08003c55 	.word	0x08003c55
 8003b4c:	08003c13 	.word	0x08003c13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68b9      	ldr	r1, [r7, #8]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 f9fe 	bl	8003f58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699a      	ldr	r2, [r3, #24]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0208 	orr.w	r2, r2, #8
 8003b6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0204 	bic.w	r2, r2, #4
 8003b7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6999      	ldr	r1, [r3, #24]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	691a      	ldr	r2, [r3, #16]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	619a      	str	r2, [r3, #24]
      break;
 8003b8e:	e064      	b.n	8003c5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fa44 	bl	8004024 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699a      	ldr	r2, [r3, #24]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6999      	ldr	r1, [r3, #24]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	021a      	lsls	r2, r3, #8
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	619a      	str	r2, [r3, #24]
      break;
 8003bd0:	e043      	b.n	8003c5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68b9      	ldr	r1, [r7, #8]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 fa8f 	bl	80040fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0208 	orr.w	r2, r2, #8
 8003bec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69da      	ldr	r2, [r3, #28]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0204 	bic.w	r2, r2, #4
 8003bfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	69d9      	ldr	r1, [r3, #28]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	61da      	str	r2, [r3, #28]
      break;
 8003c10:	e023      	b.n	8003c5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68b9      	ldr	r1, [r7, #8]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fad9 	bl	80041d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	69da      	ldr	r2, [r3, #28]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69da      	ldr	r2, [r3, #28]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69d9      	ldr	r1, [r3, #28]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	021a      	lsls	r2, r3, #8
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	61da      	str	r2, [r3, #28]
      break;
 8003c52:	e002      	b.n	8003c5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	75fb      	strb	r3, [r7, #23]
      break;
 8003c58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_TIM_ConfigClockSource+0x1c>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e0b4      	b.n	8003df2 <HAL_TIM_ConfigClockSource+0x186>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ca6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cc0:	d03e      	beq.n	8003d40 <HAL_TIM_ConfigClockSource+0xd4>
 8003cc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cc6:	f200 8087 	bhi.w	8003dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cce:	f000 8086 	beq.w	8003dde <HAL_TIM_ConfigClockSource+0x172>
 8003cd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cd6:	d87f      	bhi.n	8003dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd8:	2b70      	cmp	r3, #112	@ 0x70
 8003cda:	d01a      	beq.n	8003d12 <HAL_TIM_ConfigClockSource+0xa6>
 8003cdc:	2b70      	cmp	r3, #112	@ 0x70
 8003cde:	d87b      	bhi.n	8003dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce0:	2b60      	cmp	r3, #96	@ 0x60
 8003ce2:	d050      	beq.n	8003d86 <HAL_TIM_ConfigClockSource+0x11a>
 8003ce4:	2b60      	cmp	r3, #96	@ 0x60
 8003ce6:	d877      	bhi.n	8003dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce8:	2b50      	cmp	r3, #80	@ 0x50
 8003cea:	d03c      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0xfa>
 8003cec:	2b50      	cmp	r3, #80	@ 0x50
 8003cee:	d873      	bhi.n	8003dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf0:	2b40      	cmp	r3, #64	@ 0x40
 8003cf2:	d058      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x13a>
 8003cf4:	2b40      	cmp	r3, #64	@ 0x40
 8003cf6:	d86f      	bhi.n	8003dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf8:	2b30      	cmp	r3, #48	@ 0x30
 8003cfa:	d064      	beq.n	8003dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8003cfc:	2b30      	cmp	r3, #48	@ 0x30
 8003cfe:	d86b      	bhi.n	8003dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d060      	beq.n	8003dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d867      	bhi.n	8003dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d05c      	beq.n	8003dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d0c:	2b10      	cmp	r3, #16
 8003d0e:	d05a      	beq.n	8003dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d10:	e062      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d22:	f000 fb1f 	bl	8004364 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	609a      	str	r2, [r3, #8]
      break;
 8003d3e:	e04f      	b.n	8003de0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d50:	f000 fb08 	bl	8004364 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d62:	609a      	str	r2, [r3, #8]
      break;
 8003d64:	e03c      	b.n	8003de0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d72:	461a      	mov	r2, r3
 8003d74:	f000 fa7c 	bl	8004270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2150      	movs	r1, #80	@ 0x50
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fad5 	bl	800432e <TIM_ITRx_SetConfig>
      break;
 8003d84:	e02c      	b.n	8003de0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d92:	461a      	mov	r2, r3
 8003d94:	f000 fa9b 	bl	80042ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2160      	movs	r1, #96	@ 0x60
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fac5 	bl	800432e <TIM_ITRx_SetConfig>
      break;
 8003da4:	e01c      	b.n	8003de0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003db2:	461a      	mov	r2, r3
 8003db4:	f000 fa5c 	bl	8004270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2140      	movs	r1, #64	@ 0x40
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fab5 	bl	800432e <TIM_ITRx_SetConfig>
      break;
 8003dc4:	e00c      	b.n	8003de0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	f000 faac 	bl	800432e <TIM_ITRx_SetConfig>
      break;
 8003dd6:	e003      	b.n	8003de0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	73fb      	strb	r3, [r7, #15]
      break;
 8003ddc:	e000      	b.n	8003de0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
	...

08003e4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a37      	ldr	r2, [pc, #220]	@ (8003f3c <TIM_Base_SetConfig+0xf0>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00f      	beq.n	8003e84 <TIM_Base_SetConfig+0x38>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e6a:	d00b      	beq.n	8003e84 <TIM_Base_SetConfig+0x38>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a34      	ldr	r2, [pc, #208]	@ (8003f40 <TIM_Base_SetConfig+0xf4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d007      	beq.n	8003e84 <TIM_Base_SetConfig+0x38>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a33      	ldr	r2, [pc, #204]	@ (8003f44 <TIM_Base_SetConfig+0xf8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <TIM_Base_SetConfig+0x38>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a32      	ldr	r2, [pc, #200]	@ (8003f48 <TIM_Base_SetConfig+0xfc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d108      	bne.n	8003e96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a28      	ldr	r2, [pc, #160]	@ (8003f3c <TIM_Base_SetConfig+0xf0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01b      	beq.n	8003ed6 <TIM_Base_SetConfig+0x8a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea4:	d017      	beq.n	8003ed6 <TIM_Base_SetConfig+0x8a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a25      	ldr	r2, [pc, #148]	@ (8003f40 <TIM_Base_SetConfig+0xf4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d013      	beq.n	8003ed6 <TIM_Base_SetConfig+0x8a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a24      	ldr	r2, [pc, #144]	@ (8003f44 <TIM_Base_SetConfig+0xf8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00f      	beq.n	8003ed6 <TIM_Base_SetConfig+0x8a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a23      	ldr	r2, [pc, #140]	@ (8003f48 <TIM_Base_SetConfig+0xfc>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00b      	beq.n	8003ed6 <TIM_Base_SetConfig+0x8a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a22      	ldr	r2, [pc, #136]	@ (8003f4c <TIM_Base_SetConfig+0x100>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d007      	beq.n	8003ed6 <TIM_Base_SetConfig+0x8a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a21      	ldr	r2, [pc, #132]	@ (8003f50 <TIM_Base_SetConfig+0x104>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d003      	beq.n	8003ed6 <TIM_Base_SetConfig+0x8a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a20      	ldr	r2, [pc, #128]	@ (8003f54 <TIM_Base_SetConfig+0x108>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d108      	bne.n	8003ee8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003edc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a0c      	ldr	r2, [pc, #48]	@ (8003f3c <TIM_Base_SetConfig+0xf0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d103      	bne.n	8003f16 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	691a      	ldr	r2, [r3, #16]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f043 0204 	orr.w	r2, r3, #4
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	601a      	str	r2, [r3, #0]
}
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40000c00 	.word	0x40000c00
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40014400 	.word	0x40014400
 8003f54:	40014800 	.word	0x40014800

08003f58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	f023 0201 	bic.w	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f023 0302 	bic.w	r3, r3, #2
 8003fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a1c      	ldr	r2, [pc, #112]	@ (8004020 <TIM_OC1_SetConfig+0xc8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d10c      	bne.n	8003fce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f023 0308 	bic.w	r3, r3, #8
 8003fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f023 0304 	bic.w	r3, r3, #4
 8003fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a13      	ldr	r2, [pc, #76]	@ (8004020 <TIM_OC1_SetConfig+0xc8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d111      	bne.n	8003ffa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	621a      	str	r2, [r3, #32]
}
 8004014:	bf00      	nop
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	40010000 	.word	0x40010000

08004024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	f023 0210 	bic.w	r2, r3, #16
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800405a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	021b      	lsls	r3, r3, #8
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f023 0320 	bic.w	r3, r3, #32
 800406e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a1e      	ldr	r2, [pc, #120]	@ (80040f8 <TIM_OC2_SetConfig+0xd4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d10d      	bne.n	80040a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800408a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800409e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a15      	ldr	r2, [pc, #84]	@ (80040f8 <TIM_OC2_SetConfig+0xd4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d113      	bne.n	80040d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	621a      	str	r2, [r3, #32]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40010000 	.word	0x40010000

080040fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800412a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0303 	bic.w	r3, r3, #3
 8004132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a1d      	ldr	r2, [pc, #116]	@ (80041cc <TIM_OC3_SetConfig+0xd0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d10d      	bne.n	8004176 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a14      	ldr	r2, [pc, #80]	@ (80041cc <TIM_OC3_SetConfig+0xd0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d113      	bne.n	80041a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800418c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	621a      	str	r2, [r3, #32]
}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40010000 	.word	0x40010000

080041d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	021b      	lsls	r3, r3, #8
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	4313      	orrs	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800421a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	031b      	lsls	r3, r3, #12
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a10      	ldr	r2, [pc, #64]	@ (800426c <TIM_OC4_SetConfig+0x9c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d109      	bne.n	8004244 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004236:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	019b      	lsls	r3, r3, #6
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	621a      	str	r2, [r3, #32]
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40010000 	.word	0x40010000

08004270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f023 0201 	bic.w	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800429a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f023 030a 	bic.w	r3, r3, #10
 80042ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b087      	sub	sp, #28
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	f023 0210 	bic.w	r2, r3, #16
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	031b      	lsls	r3, r3, #12
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800430a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800432e:	b480      	push	{r7}
 8004330:	b085      	sub	sp, #20
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	f043 0307 	orr.w	r3, r3, #7
 8004350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	609a      	str	r2, [r3, #8]
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800437e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	021a      	lsls	r2, r3, #8
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	431a      	orrs	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4313      	orrs	r3, r2
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	609a      	str	r2, [r3, #8]
}
 8004398:	bf00      	nop
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f003 031f 	and.w	r3, r3, #31
 80043b6:	2201      	movs	r2, #1
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a1a      	ldr	r2, [r3, #32]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	43db      	mvns	r3, r3
 80043c6:	401a      	ands	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a1a      	ldr	r2, [r3, #32]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f003 031f 	and.w	r3, r3, #31
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	fa01 f303 	lsl.w	r3, r1, r3
 80043dc:	431a      	orrs	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	621a      	str	r2, [r3, #32]
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
	...

080043f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004404:	2302      	movs	r3, #2
 8004406:	e050      	b.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800442e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1c      	ldr	r2, [pc, #112]	@ (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d018      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004454:	d013      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a18      	ldr	r2, [pc, #96]	@ (80044bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00e      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a16      	ldr	r2, [pc, #88]	@ (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d009      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a15      	ldr	r2, [pc, #84]	@ (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a13      	ldr	r2, [pc, #76]	@ (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d10c      	bne.n	8004498 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	4313      	orrs	r3, r2
 800448e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00
 80044c8:	40014000 	.word	0x40014000

080044cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004506:	2b84      	cmp	r3, #132	@ 0x84
 8004508:	d005      	beq.n	8004516 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800450a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4413      	add	r3, r2
 8004512:	3303      	adds	r3, #3
 8004514:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004516:	68fb      	ldr	r3, [r7, #12]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004528:	f000 fafc 	bl	8004b24 <vTaskStartScheduler>
  
  return osOK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	bd80      	pop	{r7, pc}

08004532 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004532:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004534:	b089      	sub	sp, #36	@ 0x24
 8004536:	af04      	add	r7, sp, #16
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d020      	beq.n	8004586 <osThreadCreate+0x54>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01c      	beq.n	8004586 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685c      	ldr	r4, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691e      	ldr	r6, [r3, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff ffc8 	bl	80044f4 <makeFreeRtosPriority>
 8004564:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800456e:	9202      	str	r2, [sp, #8]
 8004570:	9301      	str	r3, [sp, #4]
 8004572:	9100      	str	r1, [sp, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	4632      	mov	r2, r6
 8004578:	4629      	mov	r1, r5
 800457a:	4620      	mov	r0, r4
 800457c:	f000 f8ed 	bl	800475a <xTaskCreateStatic>
 8004580:	4603      	mov	r3, r0
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	e01c      	b.n	80045c0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685c      	ldr	r4, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004592:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff ffaa 	bl	80044f4 <makeFreeRtosPriority>
 80045a0:	4602      	mov	r2, r0
 80045a2:	f107 030c 	add.w	r3, r7, #12
 80045a6:	9301      	str	r3, [sp, #4]
 80045a8:	9200      	str	r2, [sp, #0]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	4632      	mov	r2, r6
 80045ae:	4629      	mov	r1, r5
 80045b0:	4620      	mov	r0, r4
 80045b2:	f000 f932 	bl	800481a <xTaskCreate>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d001      	beq.n	80045c0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	e000      	b.n	80045c2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80045c0:	68fb      	ldr	r3, [r7, #12]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045ca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <osDelay+0x16>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	e000      	b.n	80045e2 <osDelay+0x18>
 80045e0:	2301      	movs	r3, #1
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fa68 	bl	8004ab8 <vTaskDelay>
  
  return osOK;
 80045e8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f103 0208 	add.w	r2, r3, #8
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f04f 32ff 	mov.w	r2, #4294967295
 800460a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f103 0208 	add.w	r2, r3, #8
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f103 0208 	add.w	r2, r3, #8
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	601a      	str	r2, [r3, #0]
}
 8004688:	bf00      	nop
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046aa:	d103      	bne.n	80046b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	e00c      	b.n	80046ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3308      	adds	r3, #8
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	e002      	b.n	80046c2 <vListInsert+0x2e>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d2f6      	bcs.n	80046bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	601a      	str	r2, [r3, #0]
}
 80046fa:	bf00      	nop
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6892      	ldr	r2, [r2, #8]
 800471c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6852      	ldr	r2, [r2, #4]
 8004726:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	429a      	cmp	r2, r3
 8004730:	d103      	bne.n	800473a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	1e5a      	subs	r2, r3, #1
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800475a:	b580      	push	{r7, lr}
 800475c:	b08e      	sub	sp, #56	@ 0x38
 800475e:	af04      	add	r7, sp, #16
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
 8004766:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10b      	bne.n	8004786 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800476e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004780:	bf00      	nop
 8004782:	bf00      	nop
 8004784:	e7fd      	b.n	8004782 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10b      	bne.n	80047a4 <xTaskCreateStatic+0x4a>
	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	61fb      	str	r3, [r7, #28]
}
 800479e:	bf00      	nop
 80047a0:	bf00      	nop
 80047a2:	e7fd      	b.n	80047a0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047a4:	23a0      	movs	r3, #160	@ 0xa0
 80047a6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	2ba0      	cmp	r3, #160	@ 0xa0
 80047ac:	d00b      	beq.n	80047c6 <xTaskCreateStatic+0x6c>
	__asm volatile
 80047ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	61bb      	str	r3, [r7, #24]
}
 80047c0:	bf00      	nop
 80047c2:	bf00      	nop
 80047c4:	e7fd      	b.n	80047c2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80047c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80047c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d01e      	beq.n	800480c <xTaskCreateStatic+0xb2>
 80047ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01b      	beq.n	800480c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80047d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047dc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80047de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e0:	2202      	movs	r2, #2
 80047e2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80047e6:	2300      	movs	r3, #0
 80047e8:	9303      	str	r3, [sp, #12]
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	9302      	str	r3, [sp, #8]
 80047ee:	f107 0314 	add.w	r3, r7, #20
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	68b9      	ldr	r1, [r7, #8]
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f850 	bl	80048a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004804:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004806:	f000 f8ed 	bl	80049e4 <prvAddNewTaskToReadyList>
 800480a:	e001      	b.n	8004810 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004810:	697b      	ldr	r3, [r7, #20]
	}
 8004812:	4618      	mov	r0, r3
 8004814:	3728      	adds	r7, #40	@ 0x28
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800481a:	b580      	push	{r7, lr}
 800481c:	b08c      	sub	sp, #48	@ 0x30
 800481e:	af04      	add	r7, sp, #16
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	603b      	str	r3, [r7, #0]
 8004826:	4613      	mov	r3, r2
 8004828:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800482a:	88fb      	ldrh	r3, [r7, #6]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4618      	mov	r0, r3
 8004830:	f000 ff02 	bl	8005638 <pvPortMalloc>
 8004834:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00e      	beq.n	800485a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800483c:	20a0      	movs	r0, #160	@ 0xa0
 800483e:	f000 fefb 	bl	8005638 <pvPortMalloc>
 8004842:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004850:	e005      	b.n	800485e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004852:	6978      	ldr	r0, [r7, #20]
 8004854:	f000 ffbe 	bl	80057d4 <vPortFree>
 8004858:	e001      	b.n	800485e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800485a:	2300      	movs	r3, #0
 800485c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d017      	beq.n	8004894 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800486c:	88fa      	ldrh	r2, [r7, #6]
 800486e:	2300      	movs	r3, #0
 8004870:	9303      	str	r3, [sp, #12]
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	9302      	str	r3, [sp, #8]
 8004876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004878:	9301      	str	r3, [sp, #4]
 800487a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68b9      	ldr	r1, [r7, #8]
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 f80e 	bl	80048a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004888:	69f8      	ldr	r0, [r7, #28]
 800488a:	f000 f8ab 	bl	80049e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800488e:	2301      	movs	r3, #1
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	e002      	b.n	800489a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004894:	f04f 33ff 	mov.w	r3, #4294967295
 8004898:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800489a:	69bb      	ldr	r3, [r7, #24]
	}
 800489c:	4618      	mov	r0, r3
 800489e:	3720      	adds	r7, #32
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
 80048b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80048b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80048bc:	3b01      	subs	r3, #1
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	f023 0307 	bic.w	r3, r3, #7
 80048ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00b      	beq.n	80048ee <prvInitialiseNewTask+0x4a>
	__asm volatile
 80048d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	617b      	str	r3, [r7, #20]
}
 80048e8:	bf00      	nop
 80048ea:	bf00      	nop
 80048ec:	e7fd      	b.n	80048ea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d01f      	beq.n	8004934 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048f4:	2300      	movs	r3, #0
 80048f6:	61fb      	str	r3, [r7, #28]
 80048f8:	e012      	b.n	8004920 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	4413      	add	r3, r2
 8004900:	7819      	ldrb	r1, [r3, #0]
 8004902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	4413      	add	r3, r2
 8004908:	3334      	adds	r3, #52	@ 0x34
 800490a:	460a      	mov	r2, r1
 800490c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	4413      	add	r3, r2
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d006      	beq.n	8004928 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	3301      	adds	r3, #1
 800491e:	61fb      	str	r3, [r7, #28]
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	2b0f      	cmp	r3, #15
 8004924:	d9e9      	bls.n	80048fa <prvInitialiseNewTask+0x56>
 8004926:	e000      	b.n	800492a <prvInitialiseNewTask+0x86>
			{
				break;
 8004928:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800492a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004932:	e003      	b.n	800493c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800493c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493e:	2b06      	cmp	r3, #6
 8004940:	d901      	bls.n	8004946 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004942:	2306      	movs	r3, #6
 8004944:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004948:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800494a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800494c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004950:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004954:	2200      	movs	r2, #0
 8004956:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495a:	3304      	adds	r3, #4
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff fe68 	bl	8004632 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004964:	3318      	adds	r3, #24
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff fe63 	bl	8004632 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800496c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004970:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004974:	f1c3 0207 	rsb	r2, r3, #7
 8004978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800497c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004980:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004984:	2200      	movs	r2, #0
 8004986:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800498a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498c:	2200      	movs	r2, #0
 800498e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004994:	334c      	adds	r3, #76	@ 0x4c
 8004996:	224c      	movs	r2, #76	@ 0x4c
 8004998:	2100      	movs	r1, #0
 800499a:	4618      	mov	r0, r3
 800499c:	f001 f85a 	bl	8005a54 <memset>
 80049a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a2:	4a0d      	ldr	r2, [pc, #52]	@ (80049d8 <prvInitialiseNewTask+0x134>)
 80049a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80049a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a8:	4a0c      	ldr	r2, [pc, #48]	@ (80049dc <prvInitialiseNewTask+0x138>)
 80049aa:	655a      	str	r2, [r3, #84]	@ 0x54
 80049ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ae:	4a0c      	ldr	r2, [pc, #48]	@ (80049e0 <prvInitialiseNewTask+0x13c>)
 80049b0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	68f9      	ldr	r1, [r7, #12]
 80049b6:	69b8      	ldr	r0, [r7, #24]
 80049b8:	f000 fc2a 	bl	8005210 <pxPortInitialiseStack>
 80049bc:	4602      	mov	r2, r0
 80049be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80049c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80049c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049ce:	bf00      	nop
 80049d0:	3720      	adds	r7, #32
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	200044a8 	.word	0x200044a8
 80049dc:	20004510 	.word	0x20004510
 80049e0:	20004578 	.word	0x20004578

080049e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80049ec:	f000 fd44 	bl	8005478 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80049f0:	4b2a      	ldr	r3, [pc, #168]	@ (8004a9c <prvAddNewTaskToReadyList+0xb8>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3301      	adds	r3, #1
 80049f6:	4a29      	ldr	r2, [pc, #164]	@ (8004a9c <prvAddNewTaskToReadyList+0xb8>)
 80049f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80049fa:	4b29      	ldr	r3, [pc, #164]	@ (8004aa0 <prvAddNewTaskToReadyList+0xbc>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d109      	bne.n	8004a16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a02:	4a27      	ldr	r2, [pc, #156]	@ (8004aa0 <prvAddNewTaskToReadyList+0xbc>)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a08:	4b24      	ldr	r3, [pc, #144]	@ (8004a9c <prvAddNewTaskToReadyList+0xb8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d110      	bne.n	8004a32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a10:	f000 fad4 	bl	8004fbc <prvInitialiseTaskLists>
 8004a14:	e00d      	b.n	8004a32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a16:	4b23      	ldr	r3, [pc, #140]	@ (8004aa4 <prvAddNewTaskToReadyList+0xc0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d109      	bne.n	8004a32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a1e:	4b20      	ldr	r3, [pc, #128]	@ (8004aa0 <prvAddNewTaskToReadyList+0xbc>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d802      	bhi.n	8004a32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a2c:	4a1c      	ldr	r2, [pc, #112]	@ (8004aa0 <prvAddNewTaskToReadyList+0xbc>)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a32:	4b1d      	ldr	r3, [pc, #116]	@ (8004aa8 <prvAddNewTaskToReadyList+0xc4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3301      	adds	r3, #1
 8004a38:	4a1b      	ldr	r2, [pc, #108]	@ (8004aa8 <prvAddNewTaskToReadyList+0xc4>)
 8004a3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a40:	2201      	movs	r2, #1
 8004a42:	409a      	lsls	r2, r3
 8004a44:	4b19      	ldr	r3, [pc, #100]	@ (8004aac <prvAddNewTaskToReadyList+0xc8>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	4a18      	ldr	r2, [pc, #96]	@ (8004aac <prvAddNewTaskToReadyList+0xc8>)
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4a15      	ldr	r2, [pc, #84]	@ (8004ab0 <prvAddNewTaskToReadyList+0xcc>)
 8004a5c:	441a      	add	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3304      	adds	r3, #4
 8004a62:	4619      	mov	r1, r3
 8004a64:	4610      	mov	r0, r2
 8004a66:	f7ff fdf1 	bl	800464c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a6a:	f000 fd37 	bl	80054dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa4 <prvAddNewTaskToReadyList+0xc0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00e      	beq.n	8004a94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a76:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa0 <prvAddNewTaskToReadyList+0xbc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d207      	bcs.n	8004a94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a84:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab4 <prvAddNewTaskToReadyList+0xd0>)
 8004a86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a94:	bf00      	nop
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	20000854 	.word	0x20000854
 8004aa0:	20000754 	.word	0x20000754
 8004aa4:	20000860 	.word	0x20000860
 8004aa8:	20000870 	.word	0x20000870
 8004aac:	2000085c 	.word	0x2000085c
 8004ab0:	20000758 	.word	0x20000758
 8004ab4:	e000ed04 	.word	0xe000ed04

08004ab8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d018      	beq.n	8004afc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004aca:	4b14      	ldr	r3, [pc, #80]	@ (8004b1c <vTaskDelay+0x64>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00b      	beq.n	8004aea <vTaskDelay+0x32>
	__asm volatile
 8004ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	60bb      	str	r3, [r7, #8]
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop
 8004ae8:	e7fd      	b.n	8004ae6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004aea:	f000 f885 	bl	8004bf8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004aee:	2100      	movs	r1, #0
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fb27 	bl	8005144 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004af6:	f000 f88d 	bl	8004c14 <xTaskResumeAll>
 8004afa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d107      	bne.n	8004b12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004b02:	4b07      	ldr	r3, [pc, #28]	@ (8004b20 <vTaskDelay+0x68>)
 8004b04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b12:	bf00      	nop
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	2000087c 	.word	0x2000087c
 8004b20:	e000ed04 	.word	0xe000ed04

08004b24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08a      	sub	sp, #40	@ 0x28
 8004b28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b32:	463a      	mov	r2, r7
 8004b34:	1d39      	adds	r1, r7, #4
 8004b36:	f107 0308 	add.w	r3, r7, #8
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fb ff0c 	bl	8000958 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b40:	6839      	ldr	r1, [r7, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	9202      	str	r2, [sp, #8]
 8004b48:	9301      	str	r3, [sp, #4]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	460a      	mov	r2, r1
 8004b52:	4921      	ldr	r1, [pc, #132]	@ (8004bd8 <vTaskStartScheduler+0xb4>)
 8004b54:	4821      	ldr	r0, [pc, #132]	@ (8004bdc <vTaskStartScheduler+0xb8>)
 8004b56:	f7ff fe00 	bl	800475a <xTaskCreateStatic>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	4a20      	ldr	r2, [pc, #128]	@ (8004be0 <vTaskStartScheduler+0xbc>)
 8004b5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b60:	4b1f      	ldr	r3, [pc, #124]	@ (8004be0 <vTaskStartScheduler+0xbc>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	e001      	b.n	8004b72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d11b      	bne.n	8004bb0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	613b      	str	r3, [r7, #16]
}
 8004b8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b8c:	4b15      	ldr	r3, [pc, #84]	@ (8004be4 <vTaskStartScheduler+0xc0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	334c      	adds	r3, #76	@ 0x4c
 8004b92:	4a15      	ldr	r2, [pc, #84]	@ (8004be8 <vTaskStartScheduler+0xc4>)
 8004b94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b96:	4b15      	ldr	r3, [pc, #84]	@ (8004bec <vTaskStartScheduler+0xc8>)
 8004b98:	f04f 32ff 	mov.w	r2, #4294967295
 8004b9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b9e:	4b14      	ldr	r3, [pc, #80]	@ (8004bf0 <vTaskStartScheduler+0xcc>)
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ba4:	4b13      	ldr	r3, [pc, #76]	@ (8004bf4 <vTaskStartScheduler+0xd0>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004baa:	f000 fbc1 	bl	8005330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004bae:	e00f      	b.n	8004bd0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb6:	d10b      	bne.n	8004bd0 <vTaskStartScheduler+0xac>
	__asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	60fb      	str	r3, [r7, #12]
}
 8004bca:	bf00      	nop
 8004bcc:	bf00      	nop
 8004bce:	e7fd      	b.n	8004bcc <vTaskStartScheduler+0xa8>
}
 8004bd0:	bf00      	nop
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	08006454 	.word	0x08006454
 8004bdc:	08004f8d 	.word	0x08004f8d
 8004be0:	20000878 	.word	0x20000878
 8004be4:	20000754 	.word	0x20000754
 8004be8:	20000010 	.word	0x20000010
 8004bec:	20000874 	.word	0x20000874
 8004bf0:	20000860 	.word	0x20000860
 8004bf4:	20000858 	.word	0x20000858

08004bf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004bfc:	4b04      	ldr	r3, [pc, #16]	@ (8004c10 <vTaskSuspendAll+0x18>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3301      	adds	r3, #1
 8004c02:	4a03      	ldr	r2, [pc, #12]	@ (8004c10 <vTaskSuspendAll+0x18>)
 8004c04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c06:	bf00      	nop
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	2000087c 	.word	0x2000087c

08004c14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c22:	4b42      	ldr	r3, [pc, #264]	@ (8004d2c <xTaskResumeAll+0x118>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10b      	bne.n	8004c42 <xTaskResumeAll+0x2e>
	__asm volatile
 8004c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	603b      	str	r3, [r7, #0]
}
 8004c3c:	bf00      	nop
 8004c3e:	bf00      	nop
 8004c40:	e7fd      	b.n	8004c3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c42:	f000 fc19 	bl	8005478 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c46:	4b39      	ldr	r3, [pc, #228]	@ (8004d2c <xTaskResumeAll+0x118>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	4a37      	ldr	r2, [pc, #220]	@ (8004d2c <xTaskResumeAll+0x118>)
 8004c4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c50:	4b36      	ldr	r3, [pc, #216]	@ (8004d2c <xTaskResumeAll+0x118>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d161      	bne.n	8004d1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c58:	4b35      	ldr	r3, [pc, #212]	@ (8004d30 <xTaskResumeAll+0x11c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d05d      	beq.n	8004d1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c60:	e02e      	b.n	8004cc0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c62:	4b34      	ldr	r3, [pc, #208]	@ (8004d34 <xTaskResumeAll+0x120>)
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	3318      	adds	r3, #24
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff fd49 	bl	8004706 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3304      	adds	r3, #4
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff fd44 	bl	8004706 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c82:	2201      	movs	r2, #1
 8004c84:	409a      	lsls	r2, r3
 8004c86:	4b2c      	ldr	r3, [pc, #176]	@ (8004d38 <xTaskResumeAll+0x124>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	4a2a      	ldr	r2, [pc, #168]	@ (8004d38 <xTaskResumeAll+0x124>)
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c94:	4613      	mov	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4a27      	ldr	r2, [pc, #156]	@ (8004d3c <xTaskResumeAll+0x128>)
 8004c9e:	441a      	add	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	f7ff fcd0 	bl	800464c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb0:	4b23      	ldr	r3, [pc, #140]	@ (8004d40 <xTaskResumeAll+0x12c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d302      	bcc.n	8004cc0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004cba:	4b22      	ldr	r3, [pc, #136]	@ (8004d44 <xTaskResumeAll+0x130>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8004d34 <xTaskResumeAll+0x120>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1cc      	bne.n	8004c62 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004cce:	f000 fa19 	bl	8005104 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8004d48 <xTaskResumeAll+0x134>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d010      	beq.n	8004d00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004cde:	f000 f837 	bl	8004d50 <xTaskIncrementTick>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004ce8:	4b16      	ldr	r3, [pc, #88]	@ (8004d44 <xTaskResumeAll+0x130>)
 8004cea:	2201      	movs	r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f1      	bne.n	8004cde <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004cfa:	4b13      	ldr	r3, [pc, #76]	@ (8004d48 <xTaskResumeAll+0x134>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d00:	4b10      	ldr	r3, [pc, #64]	@ (8004d44 <xTaskResumeAll+0x130>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d009      	beq.n	8004d1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004d4c <xTaskResumeAll+0x138>)
 8004d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d1c:	f000 fbde 	bl	80054dc <vPortExitCritical>

	return xAlreadyYielded;
 8004d20:	68bb      	ldr	r3, [r7, #8]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	2000087c 	.word	0x2000087c
 8004d30:	20000854 	.word	0x20000854
 8004d34:	20000814 	.word	0x20000814
 8004d38:	2000085c 	.word	0x2000085c
 8004d3c:	20000758 	.word	0x20000758
 8004d40:	20000754 	.word	0x20000754
 8004d44:	20000868 	.word	0x20000868
 8004d48:	20000864 	.word	0x20000864
 8004d4c:	e000ed04 	.word	0xe000ed04

08004d50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d5a:	4b4f      	ldr	r3, [pc, #316]	@ (8004e98 <xTaskIncrementTick+0x148>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f040 808f 	bne.w	8004e82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d64:	4b4d      	ldr	r3, [pc, #308]	@ (8004e9c <xTaskIncrementTick+0x14c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d6c:	4a4b      	ldr	r2, [pc, #300]	@ (8004e9c <xTaskIncrementTick+0x14c>)
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d121      	bne.n	8004dbc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d78:	4b49      	ldr	r3, [pc, #292]	@ (8004ea0 <xTaskIncrementTick+0x150>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00b      	beq.n	8004d9a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	603b      	str	r3, [r7, #0]
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop
 8004d98:	e7fd      	b.n	8004d96 <xTaskIncrementTick+0x46>
 8004d9a:	4b41      	ldr	r3, [pc, #260]	@ (8004ea0 <xTaskIncrementTick+0x150>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	4b40      	ldr	r3, [pc, #256]	@ (8004ea4 <xTaskIncrementTick+0x154>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a3e      	ldr	r2, [pc, #248]	@ (8004ea0 <xTaskIncrementTick+0x150>)
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	4a3e      	ldr	r2, [pc, #248]	@ (8004ea4 <xTaskIncrementTick+0x154>)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	4b3e      	ldr	r3, [pc, #248]	@ (8004ea8 <xTaskIncrementTick+0x158>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3301      	adds	r3, #1
 8004db4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ea8 <xTaskIncrementTick+0x158>)
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	f000 f9a4 	bl	8005104 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8004eac <xTaskIncrementTick+0x15c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d348      	bcc.n	8004e58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dc6:	4b36      	ldr	r3, [pc, #216]	@ (8004ea0 <xTaskIncrementTick+0x150>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d104      	bne.n	8004dda <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dd0:	4b36      	ldr	r3, [pc, #216]	@ (8004eac <xTaskIncrementTick+0x15c>)
 8004dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd6:	601a      	str	r2, [r3, #0]
					break;
 8004dd8:	e03e      	b.n	8004e58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dda:	4b31      	ldr	r3, [pc, #196]	@ (8004ea0 <xTaskIncrementTick+0x150>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d203      	bcs.n	8004dfa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004df2:	4a2e      	ldr	r2, [pc, #184]	@ (8004eac <xTaskIncrementTick+0x15c>)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004df8:	e02e      	b.n	8004e58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff fc81 	bl	8004706 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d004      	beq.n	8004e16 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	3318      	adds	r3, #24
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff fc78 	bl	8004706 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	409a      	lsls	r2, r3
 8004e1e:	4b24      	ldr	r3, [pc, #144]	@ (8004eb0 <xTaskIncrementTick+0x160>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	4a22      	ldr	r2, [pc, #136]	@ (8004eb0 <xTaskIncrementTick+0x160>)
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4a1f      	ldr	r2, [pc, #124]	@ (8004eb4 <xTaskIncrementTick+0x164>)
 8004e36:	441a      	add	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4610      	mov	r0, r2
 8004e40:	f7ff fc04 	bl	800464c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e48:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb8 <xTaskIncrementTick+0x168>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d3b9      	bcc.n	8004dc6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004e52:	2301      	movs	r3, #1
 8004e54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e56:	e7b6      	b.n	8004dc6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e58:	4b17      	ldr	r3, [pc, #92]	@ (8004eb8 <xTaskIncrementTick+0x168>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e5e:	4915      	ldr	r1, [pc, #84]	@ (8004eb4 <xTaskIncrementTick+0x164>)
 8004e60:	4613      	mov	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d901      	bls.n	8004e74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004e70:	2301      	movs	r3, #1
 8004e72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e74:	4b11      	ldr	r3, [pc, #68]	@ (8004ebc <xTaskIncrementTick+0x16c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d007      	beq.n	8004e8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	e004      	b.n	8004e8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e82:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec0 <xTaskIncrementTick+0x170>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3301      	adds	r3, #1
 8004e88:	4a0d      	ldr	r2, [pc, #52]	@ (8004ec0 <xTaskIncrementTick+0x170>)
 8004e8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e8c:	697b      	ldr	r3, [r7, #20]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	2000087c 	.word	0x2000087c
 8004e9c:	20000858 	.word	0x20000858
 8004ea0:	2000080c 	.word	0x2000080c
 8004ea4:	20000810 	.word	0x20000810
 8004ea8:	2000086c 	.word	0x2000086c
 8004eac:	20000874 	.word	0x20000874
 8004eb0:	2000085c 	.word	0x2000085c
 8004eb4:	20000758 	.word	0x20000758
 8004eb8:	20000754 	.word	0x20000754
 8004ebc:	20000868 	.word	0x20000868
 8004ec0:	20000864 	.word	0x20000864

08004ec4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004eca:	4b2a      	ldr	r3, [pc, #168]	@ (8004f74 <vTaskSwitchContext+0xb0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ed2:	4b29      	ldr	r3, [pc, #164]	@ (8004f78 <vTaskSwitchContext+0xb4>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ed8:	e045      	b.n	8004f66 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004eda:	4b27      	ldr	r3, [pc, #156]	@ (8004f78 <vTaskSwitchContext+0xb4>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ee0:	4b26      	ldr	r3, [pc, #152]	@ (8004f7c <vTaskSwitchContext+0xb8>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	fab3 f383 	clz	r3, r3
 8004eec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004eee:	7afb      	ldrb	r3, [r7, #11]
 8004ef0:	f1c3 031f 	rsb	r3, r3, #31
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	4922      	ldr	r1, [pc, #136]	@ (8004f80 <vTaskSwitchContext+0xbc>)
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	4613      	mov	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	440b      	add	r3, r1
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10b      	bne.n	8004f22 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	607b      	str	r3, [r7, #4]
}
 8004f1c:	bf00      	nop
 8004f1e:	bf00      	nop
 8004f20:	e7fd      	b.n	8004f1e <vTaskSwitchContext+0x5a>
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4613      	mov	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4a14      	ldr	r2, [pc, #80]	@ (8004f80 <vTaskSwitchContext+0xbc>)
 8004f2e:	4413      	add	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	605a      	str	r2, [r3, #4]
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	3308      	adds	r3, #8
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d104      	bne.n	8004f52 <vTaskSwitchContext+0x8e>
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	605a      	str	r2, [r3, #4]
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	4a0a      	ldr	r2, [pc, #40]	@ (8004f84 <vTaskSwitchContext+0xc0>)
 8004f5a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f5c:	4b09      	ldr	r3, [pc, #36]	@ (8004f84 <vTaskSwitchContext+0xc0>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	334c      	adds	r3, #76	@ 0x4c
 8004f62:	4a09      	ldr	r2, [pc, #36]	@ (8004f88 <vTaskSwitchContext+0xc4>)
 8004f64:	6013      	str	r3, [r2, #0]
}
 8004f66:	bf00      	nop
 8004f68:	371c      	adds	r7, #28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	2000087c 	.word	0x2000087c
 8004f78:	20000868 	.word	0x20000868
 8004f7c:	2000085c 	.word	0x2000085c
 8004f80:	20000758 	.word	0x20000758
 8004f84:	20000754 	.word	0x20000754
 8004f88:	20000010 	.word	0x20000010

08004f8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f94:	f000 f852 	bl	800503c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f98:	4b06      	ldr	r3, [pc, #24]	@ (8004fb4 <prvIdleTask+0x28>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d9f9      	bls.n	8004f94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004fa0:	4b05      	ldr	r3, [pc, #20]	@ (8004fb8 <prvIdleTask+0x2c>)
 8004fa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004fb0:	e7f0      	b.n	8004f94 <prvIdleTask+0x8>
 8004fb2:	bf00      	nop
 8004fb4:	20000758 	.word	0x20000758
 8004fb8:	e000ed04 	.word	0xe000ed04

08004fbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	607b      	str	r3, [r7, #4]
 8004fc6:	e00c      	b.n	8004fe2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4a12      	ldr	r2, [pc, #72]	@ (800501c <prvInitialiseTaskLists+0x60>)
 8004fd4:	4413      	add	r3, r2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff fb0b 	bl	80045f2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	607b      	str	r3, [r7, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b06      	cmp	r3, #6
 8004fe6:	d9ef      	bls.n	8004fc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004fe8:	480d      	ldr	r0, [pc, #52]	@ (8005020 <prvInitialiseTaskLists+0x64>)
 8004fea:	f7ff fb02 	bl	80045f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004fee:	480d      	ldr	r0, [pc, #52]	@ (8005024 <prvInitialiseTaskLists+0x68>)
 8004ff0:	f7ff faff 	bl	80045f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ff4:	480c      	ldr	r0, [pc, #48]	@ (8005028 <prvInitialiseTaskLists+0x6c>)
 8004ff6:	f7ff fafc 	bl	80045f2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ffa:	480c      	ldr	r0, [pc, #48]	@ (800502c <prvInitialiseTaskLists+0x70>)
 8004ffc:	f7ff faf9 	bl	80045f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005000:	480b      	ldr	r0, [pc, #44]	@ (8005030 <prvInitialiseTaskLists+0x74>)
 8005002:	f7ff faf6 	bl	80045f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005006:	4b0b      	ldr	r3, [pc, #44]	@ (8005034 <prvInitialiseTaskLists+0x78>)
 8005008:	4a05      	ldr	r2, [pc, #20]	@ (8005020 <prvInitialiseTaskLists+0x64>)
 800500a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800500c:	4b0a      	ldr	r3, [pc, #40]	@ (8005038 <prvInitialiseTaskLists+0x7c>)
 800500e:	4a05      	ldr	r2, [pc, #20]	@ (8005024 <prvInitialiseTaskLists+0x68>)
 8005010:	601a      	str	r2, [r3, #0]
}
 8005012:	bf00      	nop
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20000758 	.word	0x20000758
 8005020:	200007e4 	.word	0x200007e4
 8005024:	200007f8 	.word	0x200007f8
 8005028:	20000814 	.word	0x20000814
 800502c:	20000828 	.word	0x20000828
 8005030:	20000840 	.word	0x20000840
 8005034:	2000080c 	.word	0x2000080c
 8005038:	20000810 	.word	0x20000810

0800503c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005042:	e019      	b.n	8005078 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005044:	f000 fa18 	bl	8005478 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005048:	4b10      	ldr	r3, [pc, #64]	@ (800508c <prvCheckTasksWaitingTermination+0x50>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3304      	adds	r3, #4
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff fb56 	bl	8004706 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800505a:	4b0d      	ldr	r3, [pc, #52]	@ (8005090 <prvCheckTasksWaitingTermination+0x54>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3b01      	subs	r3, #1
 8005060:	4a0b      	ldr	r2, [pc, #44]	@ (8005090 <prvCheckTasksWaitingTermination+0x54>)
 8005062:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005064:	4b0b      	ldr	r3, [pc, #44]	@ (8005094 <prvCheckTasksWaitingTermination+0x58>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3b01      	subs	r3, #1
 800506a:	4a0a      	ldr	r2, [pc, #40]	@ (8005094 <prvCheckTasksWaitingTermination+0x58>)
 800506c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800506e:	f000 fa35 	bl	80054dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f810 	bl	8005098 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005078:	4b06      	ldr	r3, [pc, #24]	@ (8005094 <prvCheckTasksWaitingTermination+0x58>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1e1      	bne.n	8005044 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	20000828 	.word	0x20000828
 8005090:	20000854 	.word	0x20000854
 8005094:	2000083c 	.word	0x2000083c

08005098 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	334c      	adds	r3, #76	@ 0x4c
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fcdd 	bl	8005a64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d108      	bne.n	80050c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 fb8b 	bl	80057d4 <vPortFree>
				vPortFree( pxTCB );
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fb88 	bl	80057d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80050c4:	e019      	b.n	80050fa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d103      	bne.n	80050d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fb7f 	bl	80057d4 <vPortFree>
	}
 80050d6:	e010      	b.n	80050fa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d00b      	beq.n	80050fa <prvDeleteTCB+0x62>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	60fb      	str	r3, [r7, #12]
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop
 80050f8:	e7fd      	b.n	80050f6 <prvDeleteTCB+0x5e>
	}
 80050fa:	bf00      	nop
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
	...

08005104 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800510a:	4b0c      	ldr	r3, [pc, #48]	@ (800513c <prvResetNextTaskUnblockTime+0x38>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d104      	bne.n	800511e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005114:	4b0a      	ldr	r3, [pc, #40]	@ (8005140 <prvResetNextTaskUnblockTime+0x3c>)
 8005116:	f04f 32ff 	mov.w	r2, #4294967295
 800511a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800511c:	e008      	b.n	8005130 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800511e:	4b07      	ldr	r3, [pc, #28]	@ (800513c <prvResetNextTaskUnblockTime+0x38>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	4a04      	ldr	r2, [pc, #16]	@ (8005140 <prvResetNextTaskUnblockTime+0x3c>)
 800512e:	6013      	str	r3, [r2, #0]
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	2000080c 	.word	0x2000080c
 8005140:	20000874 	.word	0x20000874

08005144 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800514e:	4b29      	ldr	r3, [pc, #164]	@ (80051f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005154:	4b28      	ldr	r3, [pc, #160]	@ (80051f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3304      	adds	r3, #4
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff fad3 	bl	8004706 <uxListRemove>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10b      	bne.n	800517e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005166:	4b24      	ldr	r3, [pc, #144]	@ (80051f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516c:	2201      	movs	r2, #1
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	43da      	mvns	r2, r3
 8005174:	4b21      	ldr	r3, [pc, #132]	@ (80051fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4013      	ands	r3, r2
 800517a:	4a20      	ldr	r2, [pc, #128]	@ (80051fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800517c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005184:	d10a      	bne.n	800519c <prvAddCurrentTaskToDelayedList+0x58>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d007      	beq.n	800519c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800518c:	4b1a      	ldr	r3, [pc, #104]	@ (80051f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3304      	adds	r3, #4
 8005192:	4619      	mov	r1, r3
 8005194:	481a      	ldr	r0, [pc, #104]	@ (8005200 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005196:	f7ff fa59 	bl	800464c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800519a:	e026      	b.n	80051ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4413      	add	r3, r2
 80051a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051a4:	4b14      	ldr	r3, [pc, #80]	@ (80051f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d209      	bcs.n	80051c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051b4:	4b13      	ldr	r3, [pc, #76]	@ (8005204 <prvAddCurrentTaskToDelayedList+0xc0>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	4b0f      	ldr	r3, [pc, #60]	@ (80051f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3304      	adds	r3, #4
 80051be:	4619      	mov	r1, r3
 80051c0:	4610      	mov	r0, r2
 80051c2:	f7ff fa67 	bl	8004694 <vListInsert>
}
 80051c6:	e010      	b.n	80051ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005208 <prvAddCurrentTaskToDelayedList+0xc4>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	4b0a      	ldr	r3, [pc, #40]	@ (80051f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3304      	adds	r3, #4
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f7ff fa5d 	bl	8004694 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051da:	4b0c      	ldr	r3, [pc, #48]	@ (800520c <prvAddCurrentTaskToDelayedList+0xc8>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d202      	bcs.n	80051ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80051e4:	4a09      	ldr	r2, [pc, #36]	@ (800520c <prvAddCurrentTaskToDelayedList+0xc8>)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	6013      	str	r3, [r2, #0]
}
 80051ea:	bf00      	nop
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	20000858 	.word	0x20000858
 80051f8:	20000754 	.word	0x20000754
 80051fc:	2000085c 	.word	0x2000085c
 8005200:	20000840 	.word	0x20000840
 8005204:	20000810 	.word	0x20000810
 8005208:	2000080c 	.word	0x2000080c
 800520c:	20000874 	.word	0x20000874

08005210 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	3b04      	subs	r3, #4
 8005220:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005228:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3b04      	subs	r3, #4
 800522e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f023 0201 	bic.w	r2, r3, #1
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3b04      	subs	r3, #4
 800523e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005240:	4a0c      	ldr	r2, [pc, #48]	@ (8005274 <pxPortInitialiseStack+0x64>)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3b14      	subs	r3, #20
 800524a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3b04      	subs	r3, #4
 8005256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f06f 0202 	mvn.w	r2, #2
 800525e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3b20      	subs	r3, #32
 8005264:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005266:	68fb      	ldr	r3, [r7, #12]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	08005279 	.word	0x08005279

08005278 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005282:	4b13      	ldr	r3, [pc, #76]	@ (80052d0 <prvTaskExitError+0x58>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528a:	d00b      	beq.n	80052a4 <prvTaskExitError+0x2c>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	60fb      	str	r3, [r7, #12]
}
 800529e:	bf00      	nop
 80052a0:	bf00      	nop
 80052a2:	e7fd      	b.n	80052a0 <prvTaskExitError+0x28>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	60bb      	str	r3, [r7, #8]
}
 80052b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80052b8:	bf00      	nop
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0fc      	beq.n	80052ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80052c0:	bf00      	nop
 80052c2:	bf00      	nop
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	2000000c 	.word	0x2000000c
	...

080052e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052e0:	4b07      	ldr	r3, [pc, #28]	@ (8005300 <pxCurrentTCBConst2>)
 80052e2:	6819      	ldr	r1, [r3, #0]
 80052e4:	6808      	ldr	r0, [r1, #0]
 80052e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ea:	f380 8809 	msr	PSP, r0
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f04f 0000 	mov.w	r0, #0
 80052f6:	f380 8811 	msr	BASEPRI, r0
 80052fa:	4770      	bx	lr
 80052fc:	f3af 8000 	nop.w

08005300 <pxCurrentTCBConst2>:
 8005300:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005304:	bf00      	nop
 8005306:	bf00      	nop

08005308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005308:	4808      	ldr	r0, [pc, #32]	@ (800532c <prvPortStartFirstTask+0x24>)
 800530a:	6800      	ldr	r0, [r0, #0]
 800530c:	6800      	ldr	r0, [r0, #0]
 800530e:	f380 8808 	msr	MSP, r0
 8005312:	f04f 0000 	mov.w	r0, #0
 8005316:	f380 8814 	msr	CONTROL, r0
 800531a:	b662      	cpsie	i
 800531c:	b661      	cpsie	f
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	df00      	svc	0
 8005328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800532a:	bf00      	nop
 800532c:	e000ed08 	.word	0xe000ed08

08005330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005336:	4b47      	ldr	r3, [pc, #284]	@ (8005454 <xPortStartScheduler+0x124>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a47      	ldr	r2, [pc, #284]	@ (8005458 <xPortStartScheduler+0x128>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d10b      	bne.n	8005358 <xPortStartScheduler+0x28>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	613b      	str	r3, [r7, #16]
}
 8005352:	bf00      	nop
 8005354:	bf00      	nop
 8005356:	e7fd      	b.n	8005354 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005358:	4b3e      	ldr	r3, [pc, #248]	@ (8005454 <xPortStartScheduler+0x124>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a3f      	ldr	r2, [pc, #252]	@ (800545c <xPortStartScheduler+0x12c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d10b      	bne.n	800537a <xPortStartScheduler+0x4a>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	60fb      	str	r3, [r7, #12]
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop
 8005378:	e7fd      	b.n	8005376 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800537a:	4b39      	ldr	r3, [pc, #228]	@ (8005460 <xPortStartScheduler+0x130>)
 800537c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	b2db      	uxtb	r3, r3
 8005384:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	22ff      	movs	r2, #255	@ 0xff
 800538a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	b2db      	uxtb	r3, r3
 8005392:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005394:	78fb      	ldrb	r3, [r7, #3]
 8005396:	b2db      	uxtb	r3, r3
 8005398:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800539c:	b2da      	uxtb	r2, r3
 800539e:	4b31      	ldr	r3, [pc, #196]	@ (8005464 <xPortStartScheduler+0x134>)
 80053a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053a2:	4b31      	ldr	r3, [pc, #196]	@ (8005468 <xPortStartScheduler+0x138>)
 80053a4:	2207      	movs	r2, #7
 80053a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053a8:	e009      	b.n	80053be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80053aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005468 <xPortStartScheduler+0x138>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005468 <xPortStartScheduler+0x138>)
 80053b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053b4:	78fb      	ldrb	r3, [r7, #3]
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053be:	78fb      	ldrb	r3, [r7, #3]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c6:	2b80      	cmp	r3, #128	@ 0x80
 80053c8:	d0ef      	beq.n	80053aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053ca:	4b27      	ldr	r3, [pc, #156]	@ (8005468 <xPortStartScheduler+0x138>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f1c3 0307 	rsb	r3, r3, #7
 80053d2:	2b04      	cmp	r3, #4
 80053d4:	d00b      	beq.n	80053ee <xPortStartScheduler+0xbe>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	60bb      	str	r3, [r7, #8]
}
 80053e8:	bf00      	nop
 80053ea:	bf00      	nop
 80053ec:	e7fd      	b.n	80053ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005468 <xPortStartScheduler+0x138>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005468 <xPortStartScheduler+0x138>)
 80053f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005468 <xPortStartScheduler+0x138>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005400:	4a19      	ldr	r2, [pc, #100]	@ (8005468 <xPortStartScheduler+0x138>)
 8005402:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	b2da      	uxtb	r2, r3
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800540c:	4b17      	ldr	r3, [pc, #92]	@ (800546c <xPortStartScheduler+0x13c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a16      	ldr	r2, [pc, #88]	@ (800546c <xPortStartScheduler+0x13c>)
 8005412:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005416:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005418:	4b14      	ldr	r3, [pc, #80]	@ (800546c <xPortStartScheduler+0x13c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a13      	ldr	r2, [pc, #76]	@ (800546c <xPortStartScheduler+0x13c>)
 800541e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005422:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005424:	f000 f8da 	bl	80055dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005428:	4b11      	ldr	r3, [pc, #68]	@ (8005470 <xPortStartScheduler+0x140>)
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800542e:	f000 f8f9 	bl	8005624 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005432:	4b10      	ldr	r3, [pc, #64]	@ (8005474 <xPortStartScheduler+0x144>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a0f      	ldr	r2, [pc, #60]	@ (8005474 <xPortStartScheduler+0x144>)
 8005438:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800543c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800543e:	f7ff ff63 	bl	8005308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005442:	f7ff fd3f 	bl	8004ec4 <vTaskSwitchContext>
	prvTaskExitError();
 8005446:	f7ff ff17 	bl	8005278 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	e000ed00 	.word	0xe000ed00
 8005458:	410fc271 	.word	0x410fc271
 800545c:	410fc270 	.word	0x410fc270
 8005460:	e000e400 	.word	0xe000e400
 8005464:	20000880 	.word	0x20000880
 8005468:	20000884 	.word	0x20000884
 800546c:	e000ed20 	.word	0xe000ed20
 8005470:	2000000c 	.word	0x2000000c
 8005474:	e000ef34 	.word	0xe000ef34

08005478 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
	__asm volatile
 800547e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	607b      	str	r3, [r7, #4]
}
 8005490:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005492:	4b10      	ldr	r3, [pc, #64]	@ (80054d4 <vPortEnterCritical+0x5c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3301      	adds	r3, #1
 8005498:	4a0e      	ldr	r2, [pc, #56]	@ (80054d4 <vPortEnterCritical+0x5c>)
 800549a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800549c:	4b0d      	ldr	r3, [pc, #52]	@ (80054d4 <vPortEnterCritical+0x5c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d110      	bne.n	80054c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054a4:	4b0c      	ldr	r3, [pc, #48]	@ (80054d8 <vPortEnterCritical+0x60>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00b      	beq.n	80054c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	603b      	str	r3, [r7, #0]
}
 80054c0:	bf00      	nop
 80054c2:	bf00      	nop
 80054c4:	e7fd      	b.n	80054c2 <vPortEnterCritical+0x4a>
	}
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	2000000c 	.word	0x2000000c
 80054d8:	e000ed04 	.word	0xe000ed04

080054dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054e2:	4b12      	ldr	r3, [pc, #72]	@ (800552c <vPortExitCritical+0x50>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10b      	bne.n	8005502 <vPortExitCritical+0x26>
	__asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	607b      	str	r3, [r7, #4]
}
 80054fc:	bf00      	nop
 80054fe:	bf00      	nop
 8005500:	e7fd      	b.n	80054fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005502:	4b0a      	ldr	r3, [pc, #40]	@ (800552c <vPortExitCritical+0x50>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	3b01      	subs	r3, #1
 8005508:	4a08      	ldr	r2, [pc, #32]	@ (800552c <vPortExitCritical+0x50>)
 800550a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800550c:	4b07      	ldr	r3, [pc, #28]	@ (800552c <vPortExitCritical+0x50>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d105      	bne.n	8005520 <vPortExitCritical+0x44>
 8005514:	2300      	movs	r3, #0
 8005516:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800551e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	2000000c 	.word	0x2000000c

08005530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005530:	f3ef 8009 	mrs	r0, PSP
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	4b15      	ldr	r3, [pc, #84]	@ (8005590 <pxCurrentTCBConst>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	f01e 0f10 	tst.w	lr, #16
 8005540:	bf08      	it	eq
 8005542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800554a:	6010      	str	r0, [r2, #0]
 800554c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005550:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005554:	f380 8811 	msr	BASEPRI, r0
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f7ff fcb0 	bl	8004ec4 <vTaskSwitchContext>
 8005564:	f04f 0000 	mov.w	r0, #0
 8005568:	f380 8811 	msr	BASEPRI, r0
 800556c:	bc09      	pop	{r0, r3}
 800556e:	6819      	ldr	r1, [r3, #0]
 8005570:	6808      	ldr	r0, [r1, #0]
 8005572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005576:	f01e 0f10 	tst.w	lr, #16
 800557a:	bf08      	it	eq
 800557c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005580:	f380 8809 	msr	PSP, r0
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	f3af 8000 	nop.w

08005590 <pxCurrentTCBConst>:
 8005590:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005594:	bf00      	nop
 8005596:	bf00      	nop

08005598 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	607b      	str	r3, [r7, #4]
}
 80055b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055b2:	f7ff fbcd 	bl	8004d50 <xTaskIncrementTick>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055bc:	4b06      	ldr	r3, [pc, #24]	@ (80055d8 <SysTick_Handler+0x40>)
 80055be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	2300      	movs	r3, #0
 80055c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f383 8811 	msr	BASEPRI, r3
}
 80055ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055d0:	bf00      	nop
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	e000ed04 	.word	0xe000ed04

080055dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005610 <vPortSetupTimerInterrupt+0x34>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005614 <vPortSetupTimerInterrupt+0x38>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005618 <vPortSetupTimerInterrupt+0x3c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a0a      	ldr	r2, [pc, #40]	@ (800561c <vPortSetupTimerInterrupt+0x40>)
 80055f2:	fba2 2303 	umull	r2, r3, r2, r3
 80055f6:	099b      	lsrs	r3, r3, #6
 80055f8:	4a09      	ldr	r2, [pc, #36]	@ (8005620 <vPortSetupTimerInterrupt+0x44>)
 80055fa:	3b01      	subs	r3, #1
 80055fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055fe:	4b04      	ldr	r3, [pc, #16]	@ (8005610 <vPortSetupTimerInterrupt+0x34>)
 8005600:	2207      	movs	r2, #7
 8005602:	601a      	str	r2, [r3, #0]
}
 8005604:	bf00      	nop
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	e000e010 	.word	0xe000e010
 8005614:	e000e018 	.word	0xe000e018
 8005618:	20000000 	.word	0x20000000
 800561c:	10624dd3 	.word	0x10624dd3
 8005620:	e000e014 	.word	0xe000e014

08005624 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005624:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005634 <vPortEnableVFP+0x10>
 8005628:	6801      	ldr	r1, [r0, #0]
 800562a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800562e:	6001      	str	r1, [r0, #0]
 8005630:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005632:	bf00      	nop
 8005634:	e000ed88 	.word	0xe000ed88

08005638 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b08a      	sub	sp, #40	@ 0x28
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005640:	2300      	movs	r3, #0
 8005642:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005644:	f7ff fad8 	bl	8004bf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005648:	4b5c      	ldr	r3, [pc, #368]	@ (80057bc <pvPortMalloc+0x184>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005650:	f000 f924 	bl	800589c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005654:	4b5a      	ldr	r3, [pc, #360]	@ (80057c0 <pvPortMalloc+0x188>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4013      	ands	r3, r2
 800565c:	2b00      	cmp	r3, #0
 800565e:	f040 8095 	bne.w	800578c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01e      	beq.n	80056a6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005668:	2208      	movs	r2, #8
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4413      	add	r3, r2
 800566e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	2b00      	cmp	r3, #0
 8005678:	d015      	beq.n	80056a6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f023 0307 	bic.w	r3, r3, #7
 8005680:	3308      	adds	r3, #8
 8005682:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00b      	beq.n	80056a6 <pvPortMalloc+0x6e>
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	617b      	str	r3, [r7, #20]
}
 80056a0:	bf00      	nop
 80056a2:	bf00      	nop
 80056a4:	e7fd      	b.n	80056a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d06f      	beq.n	800578c <pvPortMalloc+0x154>
 80056ac:	4b45      	ldr	r3, [pc, #276]	@ (80057c4 <pvPortMalloc+0x18c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d86a      	bhi.n	800578c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80056b6:	4b44      	ldr	r3, [pc, #272]	@ (80057c8 <pvPortMalloc+0x190>)
 80056b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80056ba:	4b43      	ldr	r3, [pc, #268]	@ (80057c8 <pvPortMalloc+0x190>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056c0:	e004      	b.n	80056cc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d903      	bls.n	80056de <pvPortMalloc+0xa6>
 80056d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1f1      	bne.n	80056c2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80056de:	4b37      	ldr	r3, [pc, #220]	@ (80057bc <pvPortMalloc+0x184>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d051      	beq.n	800578c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2208      	movs	r2, #8
 80056ee:	4413      	add	r3, r2
 80056f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	1ad2      	subs	r2, r2, r3
 8005702:	2308      	movs	r3, #8
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	429a      	cmp	r2, r3
 8005708:	d920      	bls.n	800574c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800570a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4413      	add	r3, r2
 8005710:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00b      	beq.n	8005734 <pvPortMalloc+0xfc>
	__asm volatile
 800571c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	613b      	str	r3, [r7, #16]
}
 800572e:	bf00      	nop
 8005730:	bf00      	nop
 8005732:	e7fd      	b.n	8005730 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	1ad2      	subs	r2, r2, r3
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005746:	69b8      	ldr	r0, [r7, #24]
 8005748:	f000 f90a 	bl	8005960 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800574c:	4b1d      	ldr	r3, [pc, #116]	@ (80057c4 <pvPortMalloc+0x18c>)
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	4a1b      	ldr	r2, [pc, #108]	@ (80057c4 <pvPortMalloc+0x18c>)
 8005758:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800575a:	4b1a      	ldr	r3, [pc, #104]	@ (80057c4 <pvPortMalloc+0x18c>)
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4b1b      	ldr	r3, [pc, #108]	@ (80057cc <pvPortMalloc+0x194>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d203      	bcs.n	800576e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005766:	4b17      	ldr	r3, [pc, #92]	@ (80057c4 <pvPortMalloc+0x18c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a18      	ldr	r2, [pc, #96]	@ (80057cc <pvPortMalloc+0x194>)
 800576c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	4b13      	ldr	r3, [pc, #76]	@ (80057c0 <pvPortMalloc+0x188>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	431a      	orrs	r2, r3
 8005778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800577c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005782:	4b13      	ldr	r3, [pc, #76]	@ (80057d0 <pvPortMalloc+0x198>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3301      	adds	r3, #1
 8005788:	4a11      	ldr	r2, [pc, #68]	@ (80057d0 <pvPortMalloc+0x198>)
 800578a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800578c:	f7ff fa42 	bl	8004c14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00b      	beq.n	80057b2 <pvPortMalloc+0x17a>
	__asm volatile
 800579a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	60fb      	str	r3, [r7, #12]
}
 80057ac:	bf00      	nop
 80057ae:	bf00      	nop
 80057b0:	e7fd      	b.n	80057ae <pvPortMalloc+0x176>
	return pvReturn;
 80057b2:	69fb      	ldr	r3, [r7, #28]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3728      	adds	r7, #40	@ 0x28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	20004490 	.word	0x20004490
 80057c0:	200044a4 	.word	0x200044a4
 80057c4:	20004494 	.word	0x20004494
 80057c8:	20004488 	.word	0x20004488
 80057cc:	20004498 	.word	0x20004498
 80057d0:	2000449c 	.word	0x2000449c

080057d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d04f      	beq.n	8005886 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80057e6:	2308      	movs	r3, #8
 80057e8:	425b      	negs	r3, r3
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	4413      	add	r3, r2
 80057ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	4b25      	ldr	r3, [pc, #148]	@ (8005890 <vPortFree+0xbc>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4013      	ands	r3, r2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10b      	bne.n	800581a <vPortFree+0x46>
	__asm volatile
 8005802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	60fb      	str	r3, [r7, #12]
}
 8005814:	bf00      	nop
 8005816:	bf00      	nop
 8005818:	e7fd      	b.n	8005816 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00b      	beq.n	800583a <vPortFree+0x66>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	60bb      	str	r3, [r7, #8]
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop
 8005838:	e7fd      	b.n	8005836 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	4b14      	ldr	r3, [pc, #80]	@ (8005890 <vPortFree+0xbc>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4013      	ands	r3, r2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d01e      	beq.n	8005886 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d11a      	bne.n	8005886 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	4b0e      	ldr	r3, [pc, #56]	@ (8005890 <vPortFree+0xbc>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	43db      	mvns	r3, r3
 800585a:	401a      	ands	r2, r3
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005860:	f7ff f9ca 	bl	8004bf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	4b0a      	ldr	r3, [pc, #40]	@ (8005894 <vPortFree+0xc0>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4413      	add	r3, r2
 800586e:	4a09      	ldr	r2, [pc, #36]	@ (8005894 <vPortFree+0xc0>)
 8005870:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005872:	6938      	ldr	r0, [r7, #16]
 8005874:	f000 f874 	bl	8005960 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005878:	4b07      	ldr	r3, [pc, #28]	@ (8005898 <vPortFree+0xc4>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3301      	adds	r3, #1
 800587e:	4a06      	ldr	r2, [pc, #24]	@ (8005898 <vPortFree+0xc4>)
 8005880:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005882:	f7ff f9c7 	bl	8004c14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005886:	bf00      	nop
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	200044a4 	.word	0x200044a4
 8005894:	20004494 	.word	0x20004494
 8005898:	200044a0 	.word	0x200044a0

0800589c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058a2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80058a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80058a8:	4b27      	ldr	r3, [pc, #156]	@ (8005948 <prvHeapInit+0xac>)
 80058aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00c      	beq.n	80058d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3307      	adds	r3, #7
 80058ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0307 	bic.w	r3, r3, #7
 80058c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	4a1f      	ldr	r2, [pc, #124]	@ (8005948 <prvHeapInit+0xac>)
 80058cc:	4413      	add	r3, r2
 80058ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058d4:	4a1d      	ldr	r2, [pc, #116]	@ (800594c <prvHeapInit+0xb0>)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058da:	4b1c      	ldr	r3, [pc, #112]	@ (800594c <prvHeapInit+0xb0>)
 80058dc:	2200      	movs	r2, #0
 80058de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	4413      	add	r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80058e8:	2208      	movs	r2, #8
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	1a9b      	subs	r3, r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 0307 	bic.w	r3, r3, #7
 80058f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4a15      	ldr	r2, [pc, #84]	@ (8005950 <prvHeapInit+0xb4>)
 80058fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80058fe:	4b14      	ldr	r3, [pc, #80]	@ (8005950 <prvHeapInit+0xb4>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2200      	movs	r2, #0
 8005904:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005906:	4b12      	ldr	r3, [pc, #72]	@ (8005950 <prvHeapInit+0xb4>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	1ad2      	subs	r2, r2, r3
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800591c:	4b0c      	ldr	r3, [pc, #48]	@ (8005950 <prvHeapInit+0xb4>)
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	4a0a      	ldr	r2, [pc, #40]	@ (8005954 <prvHeapInit+0xb8>)
 800592a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	4a09      	ldr	r2, [pc, #36]	@ (8005958 <prvHeapInit+0xbc>)
 8005932:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005934:	4b09      	ldr	r3, [pc, #36]	@ (800595c <prvHeapInit+0xc0>)
 8005936:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800593a:	601a      	str	r2, [r3, #0]
}
 800593c:	bf00      	nop
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	20000888 	.word	0x20000888
 800594c:	20004488 	.word	0x20004488
 8005950:	20004490 	.word	0x20004490
 8005954:	20004498 	.word	0x20004498
 8005958:	20004494 	.word	0x20004494
 800595c:	200044a4 	.word	0x200044a4

08005960 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005968:	4b28      	ldr	r3, [pc, #160]	@ (8005a0c <prvInsertBlockIntoFreeList+0xac>)
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	e002      	b.n	8005974 <prvInsertBlockIntoFreeList+0x14>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	429a      	cmp	r2, r3
 800597c:	d8f7      	bhi.n	800596e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	4413      	add	r3, r2
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	429a      	cmp	r2, r3
 800598e:	d108      	bne.n	80059a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	441a      	add	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	441a      	add	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d118      	bne.n	80059e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	4b15      	ldr	r3, [pc, #84]	@ (8005a10 <prvInsertBlockIntoFreeList+0xb0>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d00d      	beq.n	80059de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	441a      	add	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	e008      	b.n	80059f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059de:	4b0c      	ldr	r3, [pc, #48]	@ (8005a10 <prvInsertBlockIntoFreeList+0xb0>)
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	e003      	b.n	80059f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d002      	beq.n	80059fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059fe:	bf00      	nop
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	20004488 	.word	0x20004488
 8005a10:	20004490 	.word	0x20004490

08005a14 <siprintf>:
 8005a14:	b40e      	push	{r1, r2, r3}
 8005a16:	b500      	push	{lr}
 8005a18:	b09c      	sub	sp, #112	@ 0x70
 8005a1a:	ab1d      	add	r3, sp, #116	@ 0x74
 8005a1c:	9002      	str	r0, [sp, #8]
 8005a1e:	9006      	str	r0, [sp, #24]
 8005a20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005a24:	4809      	ldr	r0, [pc, #36]	@ (8005a4c <siprintf+0x38>)
 8005a26:	9107      	str	r1, [sp, #28]
 8005a28:	9104      	str	r1, [sp, #16]
 8005a2a:	4909      	ldr	r1, [pc, #36]	@ (8005a50 <siprintf+0x3c>)
 8005a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a30:	9105      	str	r1, [sp, #20]
 8005a32:	6800      	ldr	r0, [r0, #0]
 8005a34:	9301      	str	r3, [sp, #4]
 8005a36:	a902      	add	r1, sp, #8
 8005a38:	f000 f9f8 	bl	8005e2c <_svfiprintf_r>
 8005a3c:	9b02      	ldr	r3, [sp, #8]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	701a      	strb	r2, [r3, #0]
 8005a42:	b01c      	add	sp, #112	@ 0x70
 8005a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a48:	b003      	add	sp, #12
 8005a4a:	4770      	bx	lr
 8005a4c:	20000010 	.word	0x20000010
 8005a50:	ffff0208 	.word	0xffff0208

08005a54 <memset>:
 8005a54:	4402      	add	r2, r0
 8005a56:	4603      	mov	r3, r0
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d100      	bne.n	8005a5e <memset+0xa>
 8005a5c:	4770      	bx	lr
 8005a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a62:	e7f9      	b.n	8005a58 <memset+0x4>

08005a64 <_reclaim_reent>:
 8005a64:	4b29      	ldr	r3, [pc, #164]	@ (8005b0c <_reclaim_reent+0xa8>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4283      	cmp	r3, r0
 8005a6a:	b570      	push	{r4, r5, r6, lr}
 8005a6c:	4604      	mov	r4, r0
 8005a6e:	d04b      	beq.n	8005b08 <_reclaim_reent+0xa4>
 8005a70:	69c3      	ldr	r3, [r0, #28]
 8005a72:	b1ab      	cbz	r3, 8005aa0 <_reclaim_reent+0x3c>
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	b16b      	cbz	r3, 8005a94 <_reclaim_reent+0x30>
 8005a78:	2500      	movs	r5, #0
 8005a7a:	69e3      	ldr	r3, [r4, #28]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	5959      	ldr	r1, [r3, r5]
 8005a80:	2900      	cmp	r1, #0
 8005a82:	d13b      	bne.n	8005afc <_reclaim_reent+0x98>
 8005a84:	3504      	adds	r5, #4
 8005a86:	2d80      	cmp	r5, #128	@ 0x80
 8005a88:	d1f7      	bne.n	8005a7a <_reclaim_reent+0x16>
 8005a8a:	69e3      	ldr	r3, [r4, #28]
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	68d9      	ldr	r1, [r3, #12]
 8005a90:	f000 f878 	bl	8005b84 <_free_r>
 8005a94:	69e3      	ldr	r3, [r4, #28]
 8005a96:	6819      	ldr	r1, [r3, #0]
 8005a98:	b111      	cbz	r1, 8005aa0 <_reclaim_reent+0x3c>
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f000 f872 	bl	8005b84 <_free_r>
 8005aa0:	6961      	ldr	r1, [r4, #20]
 8005aa2:	b111      	cbz	r1, 8005aaa <_reclaim_reent+0x46>
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	f000 f86d 	bl	8005b84 <_free_r>
 8005aaa:	69e1      	ldr	r1, [r4, #28]
 8005aac:	b111      	cbz	r1, 8005ab4 <_reclaim_reent+0x50>
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f000 f868 	bl	8005b84 <_free_r>
 8005ab4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005ab6:	b111      	cbz	r1, 8005abe <_reclaim_reent+0x5a>
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f000 f863 	bl	8005b84 <_free_r>
 8005abe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ac0:	b111      	cbz	r1, 8005ac8 <_reclaim_reent+0x64>
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f000 f85e 	bl	8005b84 <_free_r>
 8005ac8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005aca:	b111      	cbz	r1, 8005ad2 <_reclaim_reent+0x6e>
 8005acc:	4620      	mov	r0, r4
 8005ace:	f000 f859 	bl	8005b84 <_free_r>
 8005ad2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005ad4:	b111      	cbz	r1, 8005adc <_reclaim_reent+0x78>
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f000 f854 	bl	8005b84 <_free_r>
 8005adc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005ade:	b111      	cbz	r1, 8005ae6 <_reclaim_reent+0x82>
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f000 f84f 	bl	8005b84 <_free_r>
 8005ae6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005ae8:	b111      	cbz	r1, 8005af0 <_reclaim_reent+0x8c>
 8005aea:	4620      	mov	r0, r4
 8005aec:	f000 f84a 	bl	8005b84 <_free_r>
 8005af0:	6a23      	ldr	r3, [r4, #32]
 8005af2:	b14b      	cbz	r3, 8005b08 <_reclaim_reent+0xa4>
 8005af4:	4620      	mov	r0, r4
 8005af6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005afa:	4718      	bx	r3
 8005afc:	680e      	ldr	r6, [r1, #0]
 8005afe:	4620      	mov	r0, r4
 8005b00:	f000 f840 	bl	8005b84 <_free_r>
 8005b04:	4631      	mov	r1, r6
 8005b06:	e7bb      	b.n	8005a80 <_reclaim_reent+0x1c>
 8005b08:	bd70      	pop	{r4, r5, r6, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20000010 	.word	0x20000010

08005b10 <__errno>:
 8005b10:	4b01      	ldr	r3, [pc, #4]	@ (8005b18 <__errno+0x8>)
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	20000010 	.word	0x20000010

08005b1c <__libc_init_array>:
 8005b1c:	b570      	push	{r4, r5, r6, lr}
 8005b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8005b54 <__libc_init_array+0x38>)
 8005b20:	4c0d      	ldr	r4, [pc, #52]	@ (8005b58 <__libc_init_array+0x3c>)
 8005b22:	1b64      	subs	r4, r4, r5
 8005b24:	10a4      	asrs	r4, r4, #2
 8005b26:	2600      	movs	r6, #0
 8005b28:	42a6      	cmp	r6, r4
 8005b2a:	d109      	bne.n	8005b40 <__libc_init_array+0x24>
 8005b2c:	4d0b      	ldr	r5, [pc, #44]	@ (8005b5c <__libc_init_array+0x40>)
 8005b2e:	4c0c      	ldr	r4, [pc, #48]	@ (8005b60 <__libc_init_array+0x44>)
 8005b30:	f000 fc66 	bl	8006400 <_init>
 8005b34:	1b64      	subs	r4, r4, r5
 8005b36:	10a4      	asrs	r4, r4, #2
 8005b38:	2600      	movs	r6, #0
 8005b3a:	42a6      	cmp	r6, r4
 8005b3c:	d105      	bne.n	8005b4a <__libc_init_array+0x2e>
 8005b3e:	bd70      	pop	{r4, r5, r6, pc}
 8005b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b44:	4798      	blx	r3
 8005b46:	3601      	adds	r6, #1
 8005b48:	e7ee      	b.n	8005b28 <__libc_init_array+0xc>
 8005b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b4e:	4798      	blx	r3
 8005b50:	3601      	adds	r6, #1
 8005b52:	e7f2      	b.n	8005b3a <__libc_init_array+0x1e>
 8005b54:	080064b0 	.word	0x080064b0
 8005b58:	080064b0 	.word	0x080064b0
 8005b5c:	080064b0 	.word	0x080064b0
 8005b60:	080064b4 	.word	0x080064b4

08005b64 <__retarget_lock_acquire_recursive>:
 8005b64:	4770      	bx	lr

08005b66 <__retarget_lock_release_recursive>:
 8005b66:	4770      	bx	lr

08005b68 <memcpy>:
 8005b68:	440a      	add	r2, r1
 8005b6a:	4291      	cmp	r1, r2
 8005b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b70:	d100      	bne.n	8005b74 <memcpy+0xc>
 8005b72:	4770      	bx	lr
 8005b74:	b510      	push	{r4, lr}
 8005b76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b7e:	4291      	cmp	r1, r2
 8005b80:	d1f9      	bne.n	8005b76 <memcpy+0xe>
 8005b82:	bd10      	pop	{r4, pc}

08005b84 <_free_r>:
 8005b84:	b538      	push	{r3, r4, r5, lr}
 8005b86:	4605      	mov	r5, r0
 8005b88:	2900      	cmp	r1, #0
 8005b8a:	d041      	beq.n	8005c10 <_free_r+0x8c>
 8005b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b90:	1f0c      	subs	r4, r1, #4
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	bfb8      	it	lt
 8005b96:	18e4      	addlt	r4, r4, r3
 8005b98:	f000 f8e0 	bl	8005d5c <__malloc_lock>
 8005b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005c14 <_free_r+0x90>)
 8005b9e:	6813      	ldr	r3, [r2, #0]
 8005ba0:	b933      	cbnz	r3, 8005bb0 <_free_r+0x2c>
 8005ba2:	6063      	str	r3, [r4, #4]
 8005ba4:	6014      	str	r4, [r2, #0]
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bac:	f000 b8dc 	b.w	8005d68 <__malloc_unlock>
 8005bb0:	42a3      	cmp	r3, r4
 8005bb2:	d908      	bls.n	8005bc6 <_free_r+0x42>
 8005bb4:	6820      	ldr	r0, [r4, #0]
 8005bb6:	1821      	adds	r1, r4, r0
 8005bb8:	428b      	cmp	r3, r1
 8005bba:	bf01      	itttt	eq
 8005bbc:	6819      	ldreq	r1, [r3, #0]
 8005bbe:	685b      	ldreq	r3, [r3, #4]
 8005bc0:	1809      	addeq	r1, r1, r0
 8005bc2:	6021      	streq	r1, [r4, #0]
 8005bc4:	e7ed      	b.n	8005ba2 <_free_r+0x1e>
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	b10b      	cbz	r3, 8005bd0 <_free_r+0x4c>
 8005bcc:	42a3      	cmp	r3, r4
 8005bce:	d9fa      	bls.n	8005bc6 <_free_r+0x42>
 8005bd0:	6811      	ldr	r1, [r2, #0]
 8005bd2:	1850      	adds	r0, r2, r1
 8005bd4:	42a0      	cmp	r0, r4
 8005bd6:	d10b      	bne.n	8005bf0 <_free_r+0x6c>
 8005bd8:	6820      	ldr	r0, [r4, #0]
 8005bda:	4401      	add	r1, r0
 8005bdc:	1850      	adds	r0, r2, r1
 8005bde:	4283      	cmp	r3, r0
 8005be0:	6011      	str	r1, [r2, #0]
 8005be2:	d1e0      	bne.n	8005ba6 <_free_r+0x22>
 8005be4:	6818      	ldr	r0, [r3, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	6053      	str	r3, [r2, #4]
 8005bea:	4408      	add	r0, r1
 8005bec:	6010      	str	r0, [r2, #0]
 8005bee:	e7da      	b.n	8005ba6 <_free_r+0x22>
 8005bf0:	d902      	bls.n	8005bf8 <_free_r+0x74>
 8005bf2:	230c      	movs	r3, #12
 8005bf4:	602b      	str	r3, [r5, #0]
 8005bf6:	e7d6      	b.n	8005ba6 <_free_r+0x22>
 8005bf8:	6820      	ldr	r0, [r4, #0]
 8005bfa:	1821      	adds	r1, r4, r0
 8005bfc:	428b      	cmp	r3, r1
 8005bfe:	bf04      	itt	eq
 8005c00:	6819      	ldreq	r1, [r3, #0]
 8005c02:	685b      	ldreq	r3, [r3, #4]
 8005c04:	6063      	str	r3, [r4, #4]
 8005c06:	bf04      	itt	eq
 8005c08:	1809      	addeq	r1, r1, r0
 8005c0a:	6021      	streq	r1, [r4, #0]
 8005c0c:	6054      	str	r4, [r2, #4]
 8005c0e:	e7ca      	b.n	8005ba6 <_free_r+0x22>
 8005c10:	bd38      	pop	{r3, r4, r5, pc}
 8005c12:	bf00      	nop
 8005c14:	200045ec 	.word	0x200045ec

08005c18 <sbrk_aligned>:
 8005c18:	b570      	push	{r4, r5, r6, lr}
 8005c1a:	4e0f      	ldr	r6, [pc, #60]	@ (8005c58 <sbrk_aligned+0x40>)
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	6831      	ldr	r1, [r6, #0]
 8005c20:	4605      	mov	r5, r0
 8005c22:	b911      	cbnz	r1, 8005c2a <sbrk_aligned+0x12>
 8005c24:	f000 fba6 	bl	8006374 <_sbrk_r>
 8005c28:	6030      	str	r0, [r6, #0]
 8005c2a:	4621      	mov	r1, r4
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	f000 fba1 	bl	8006374 <_sbrk_r>
 8005c32:	1c43      	adds	r3, r0, #1
 8005c34:	d103      	bne.n	8005c3e <sbrk_aligned+0x26>
 8005c36:	f04f 34ff 	mov.w	r4, #4294967295
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	bd70      	pop	{r4, r5, r6, pc}
 8005c3e:	1cc4      	adds	r4, r0, #3
 8005c40:	f024 0403 	bic.w	r4, r4, #3
 8005c44:	42a0      	cmp	r0, r4
 8005c46:	d0f8      	beq.n	8005c3a <sbrk_aligned+0x22>
 8005c48:	1a21      	subs	r1, r4, r0
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	f000 fb92 	bl	8006374 <_sbrk_r>
 8005c50:	3001      	adds	r0, #1
 8005c52:	d1f2      	bne.n	8005c3a <sbrk_aligned+0x22>
 8005c54:	e7ef      	b.n	8005c36 <sbrk_aligned+0x1e>
 8005c56:	bf00      	nop
 8005c58:	200045e8 	.word	0x200045e8

08005c5c <_malloc_r>:
 8005c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c60:	1ccd      	adds	r5, r1, #3
 8005c62:	f025 0503 	bic.w	r5, r5, #3
 8005c66:	3508      	adds	r5, #8
 8005c68:	2d0c      	cmp	r5, #12
 8005c6a:	bf38      	it	cc
 8005c6c:	250c      	movcc	r5, #12
 8005c6e:	2d00      	cmp	r5, #0
 8005c70:	4606      	mov	r6, r0
 8005c72:	db01      	blt.n	8005c78 <_malloc_r+0x1c>
 8005c74:	42a9      	cmp	r1, r5
 8005c76:	d904      	bls.n	8005c82 <_malloc_r+0x26>
 8005c78:	230c      	movs	r3, #12
 8005c7a:	6033      	str	r3, [r6, #0]
 8005c7c:	2000      	movs	r0, #0
 8005c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d58 <_malloc_r+0xfc>
 8005c86:	f000 f869 	bl	8005d5c <__malloc_lock>
 8005c8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c8e:	461c      	mov	r4, r3
 8005c90:	bb44      	cbnz	r4, 8005ce4 <_malloc_r+0x88>
 8005c92:	4629      	mov	r1, r5
 8005c94:	4630      	mov	r0, r6
 8005c96:	f7ff ffbf 	bl	8005c18 <sbrk_aligned>
 8005c9a:	1c43      	adds	r3, r0, #1
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	d158      	bne.n	8005d52 <_malloc_r+0xf6>
 8005ca0:	f8d8 4000 	ldr.w	r4, [r8]
 8005ca4:	4627      	mov	r7, r4
 8005ca6:	2f00      	cmp	r7, #0
 8005ca8:	d143      	bne.n	8005d32 <_malloc_r+0xd6>
 8005caa:	2c00      	cmp	r4, #0
 8005cac:	d04b      	beq.n	8005d46 <_malloc_r+0xea>
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	4639      	mov	r1, r7
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	eb04 0903 	add.w	r9, r4, r3
 8005cb8:	f000 fb5c 	bl	8006374 <_sbrk_r>
 8005cbc:	4581      	cmp	r9, r0
 8005cbe:	d142      	bne.n	8005d46 <_malloc_r+0xea>
 8005cc0:	6821      	ldr	r1, [r4, #0]
 8005cc2:	1a6d      	subs	r5, r5, r1
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	f7ff ffa6 	bl	8005c18 <sbrk_aligned>
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d03a      	beq.n	8005d46 <_malloc_r+0xea>
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	442b      	add	r3, r5
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	f8d8 3000 	ldr.w	r3, [r8]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	bb62      	cbnz	r2, 8005d38 <_malloc_r+0xdc>
 8005cde:	f8c8 7000 	str.w	r7, [r8]
 8005ce2:	e00f      	b.n	8005d04 <_malloc_r+0xa8>
 8005ce4:	6822      	ldr	r2, [r4, #0]
 8005ce6:	1b52      	subs	r2, r2, r5
 8005ce8:	d420      	bmi.n	8005d2c <_malloc_r+0xd0>
 8005cea:	2a0b      	cmp	r2, #11
 8005cec:	d917      	bls.n	8005d1e <_malloc_r+0xc2>
 8005cee:	1961      	adds	r1, r4, r5
 8005cf0:	42a3      	cmp	r3, r4
 8005cf2:	6025      	str	r5, [r4, #0]
 8005cf4:	bf18      	it	ne
 8005cf6:	6059      	strne	r1, [r3, #4]
 8005cf8:	6863      	ldr	r3, [r4, #4]
 8005cfa:	bf08      	it	eq
 8005cfc:	f8c8 1000 	streq.w	r1, [r8]
 8005d00:	5162      	str	r2, [r4, r5]
 8005d02:	604b      	str	r3, [r1, #4]
 8005d04:	4630      	mov	r0, r6
 8005d06:	f000 f82f 	bl	8005d68 <__malloc_unlock>
 8005d0a:	f104 000b 	add.w	r0, r4, #11
 8005d0e:	1d23      	adds	r3, r4, #4
 8005d10:	f020 0007 	bic.w	r0, r0, #7
 8005d14:	1ac2      	subs	r2, r0, r3
 8005d16:	bf1c      	itt	ne
 8005d18:	1a1b      	subne	r3, r3, r0
 8005d1a:	50a3      	strne	r3, [r4, r2]
 8005d1c:	e7af      	b.n	8005c7e <_malloc_r+0x22>
 8005d1e:	6862      	ldr	r2, [r4, #4]
 8005d20:	42a3      	cmp	r3, r4
 8005d22:	bf0c      	ite	eq
 8005d24:	f8c8 2000 	streq.w	r2, [r8]
 8005d28:	605a      	strne	r2, [r3, #4]
 8005d2a:	e7eb      	b.n	8005d04 <_malloc_r+0xa8>
 8005d2c:	4623      	mov	r3, r4
 8005d2e:	6864      	ldr	r4, [r4, #4]
 8005d30:	e7ae      	b.n	8005c90 <_malloc_r+0x34>
 8005d32:	463c      	mov	r4, r7
 8005d34:	687f      	ldr	r7, [r7, #4]
 8005d36:	e7b6      	b.n	8005ca6 <_malloc_r+0x4a>
 8005d38:	461a      	mov	r2, r3
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	42a3      	cmp	r3, r4
 8005d3e:	d1fb      	bne.n	8005d38 <_malloc_r+0xdc>
 8005d40:	2300      	movs	r3, #0
 8005d42:	6053      	str	r3, [r2, #4]
 8005d44:	e7de      	b.n	8005d04 <_malloc_r+0xa8>
 8005d46:	230c      	movs	r3, #12
 8005d48:	6033      	str	r3, [r6, #0]
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f000 f80c 	bl	8005d68 <__malloc_unlock>
 8005d50:	e794      	b.n	8005c7c <_malloc_r+0x20>
 8005d52:	6005      	str	r5, [r0, #0]
 8005d54:	e7d6      	b.n	8005d04 <_malloc_r+0xa8>
 8005d56:	bf00      	nop
 8005d58:	200045ec 	.word	0x200045ec

08005d5c <__malloc_lock>:
 8005d5c:	4801      	ldr	r0, [pc, #4]	@ (8005d64 <__malloc_lock+0x8>)
 8005d5e:	f7ff bf01 	b.w	8005b64 <__retarget_lock_acquire_recursive>
 8005d62:	bf00      	nop
 8005d64:	200045e4 	.word	0x200045e4

08005d68 <__malloc_unlock>:
 8005d68:	4801      	ldr	r0, [pc, #4]	@ (8005d70 <__malloc_unlock+0x8>)
 8005d6a:	f7ff befc 	b.w	8005b66 <__retarget_lock_release_recursive>
 8005d6e:	bf00      	nop
 8005d70:	200045e4 	.word	0x200045e4

08005d74 <__ssputs_r>:
 8005d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d78:	688e      	ldr	r6, [r1, #8]
 8005d7a:	461f      	mov	r7, r3
 8005d7c:	42be      	cmp	r6, r7
 8005d7e:	680b      	ldr	r3, [r1, #0]
 8005d80:	4682      	mov	sl, r0
 8005d82:	460c      	mov	r4, r1
 8005d84:	4690      	mov	r8, r2
 8005d86:	d82d      	bhi.n	8005de4 <__ssputs_r+0x70>
 8005d88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d90:	d026      	beq.n	8005de0 <__ssputs_r+0x6c>
 8005d92:	6965      	ldr	r5, [r4, #20]
 8005d94:	6909      	ldr	r1, [r1, #16]
 8005d96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d9a:	eba3 0901 	sub.w	r9, r3, r1
 8005d9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005da2:	1c7b      	adds	r3, r7, #1
 8005da4:	444b      	add	r3, r9
 8005da6:	106d      	asrs	r5, r5, #1
 8005da8:	429d      	cmp	r5, r3
 8005daa:	bf38      	it	cc
 8005dac:	461d      	movcc	r5, r3
 8005dae:	0553      	lsls	r3, r2, #21
 8005db0:	d527      	bpl.n	8005e02 <__ssputs_r+0x8e>
 8005db2:	4629      	mov	r1, r5
 8005db4:	f7ff ff52 	bl	8005c5c <_malloc_r>
 8005db8:	4606      	mov	r6, r0
 8005dba:	b360      	cbz	r0, 8005e16 <__ssputs_r+0xa2>
 8005dbc:	6921      	ldr	r1, [r4, #16]
 8005dbe:	464a      	mov	r2, r9
 8005dc0:	f7ff fed2 	bl	8005b68 <memcpy>
 8005dc4:	89a3      	ldrh	r3, [r4, #12]
 8005dc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dce:	81a3      	strh	r3, [r4, #12]
 8005dd0:	6126      	str	r6, [r4, #16]
 8005dd2:	6165      	str	r5, [r4, #20]
 8005dd4:	444e      	add	r6, r9
 8005dd6:	eba5 0509 	sub.w	r5, r5, r9
 8005dda:	6026      	str	r6, [r4, #0]
 8005ddc:	60a5      	str	r5, [r4, #8]
 8005dde:	463e      	mov	r6, r7
 8005de0:	42be      	cmp	r6, r7
 8005de2:	d900      	bls.n	8005de6 <__ssputs_r+0x72>
 8005de4:	463e      	mov	r6, r7
 8005de6:	6820      	ldr	r0, [r4, #0]
 8005de8:	4632      	mov	r2, r6
 8005dea:	4641      	mov	r1, r8
 8005dec:	f000 faa8 	bl	8006340 <memmove>
 8005df0:	68a3      	ldr	r3, [r4, #8]
 8005df2:	1b9b      	subs	r3, r3, r6
 8005df4:	60a3      	str	r3, [r4, #8]
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	4433      	add	r3, r6
 8005dfa:	6023      	str	r3, [r4, #0]
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e02:	462a      	mov	r2, r5
 8005e04:	f000 fac6 	bl	8006394 <_realloc_r>
 8005e08:	4606      	mov	r6, r0
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d1e0      	bne.n	8005dd0 <__ssputs_r+0x5c>
 8005e0e:	6921      	ldr	r1, [r4, #16]
 8005e10:	4650      	mov	r0, sl
 8005e12:	f7ff feb7 	bl	8005b84 <_free_r>
 8005e16:	230c      	movs	r3, #12
 8005e18:	f8ca 3000 	str.w	r3, [sl]
 8005e1c:	89a3      	ldrh	r3, [r4, #12]
 8005e1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e22:	81a3      	strh	r3, [r4, #12]
 8005e24:	f04f 30ff 	mov.w	r0, #4294967295
 8005e28:	e7e9      	b.n	8005dfe <__ssputs_r+0x8a>
	...

08005e2c <_svfiprintf_r>:
 8005e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e30:	4698      	mov	r8, r3
 8005e32:	898b      	ldrh	r3, [r1, #12]
 8005e34:	061b      	lsls	r3, r3, #24
 8005e36:	b09d      	sub	sp, #116	@ 0x74
 8005e38:	4607      	mov	r7, r0
 8005e3a:	460d      	mov	r5, r1
 8005e3c:	4614      	mov	r4, r2
 8005e3e:	d510      	bpl.n	8005e62 <_svfiprintf_r+0x36>
 8005e40:	690b      	ldr	r3, [r1, #16]
 8005e42:	b973      	cbnz	r3, 8005e62 <_svfiprintf_r+0x36>
 8005e44:	2140      	movs	r1, #64	@ 0x40
 8005e46:	f7ff ff09 	bl	8005c5c <_malloc_r>
 8005e4a:	6028      	str	r0, [r5, #0]
 8005e4c:	6128      	str	r0, [r5, #16]
 8005e4e:	b930      	cbnz	r0, 8005e5e <_svfiprintf_r+0x32>
 8005e50:	230c      	movs	r3, #12
 8005e52:	603b      	str	r3, [r7, #0]
 8005e54:	f04f 30ff 	mov.w	r0, #4294967295
 8005e58:	b01d      	add	sp, #116	@ 0x74
 8005e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e5e:	2340      	movs	r3, #64	@ 0x40
 8005e60:	616b      	str	r3, [r5, #20]
 8005e62:	2300      	movs	r3, #0
 8005e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e66:	2320      	movs	r3, #32
 8005e68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e70:	2330      	movs	r3, #48	@ 0x30
 8005e72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006010 <_svfiprintf_r+0x1e4>
 8005e76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e7a:	f04f 0901 	mov.w	r9, #1
 8005e7e:	4623      	mov	r3, r4
 8005e80:	469a      	mov	sl, r3
 8005e82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e86:	b10a      	cbz	r2, 8005e8c <_svfiprintf_r+0x60>
 8005e88:	2a25      	cmp	r2, #37	@ 0x25
 8005e8a:	d1f9      	bne.n	8005e80 <_svfiprintf_r+0x54>
 8005e8c:	ebba 0b04 	subs.w	fp, sl, r4
 8005e90:	d00b      	beq.n	8005eaa <_svfiprintf_r+0x7e>
 8005e92:	465b      	mov	r3, fp
 8005e94:	4622      	mov	r2, r4
 8005e96:	4629      	mov	r1, r5
 8005e98:	4638      	mov	r0, r7
 8005e9a:	f7ff ff6b 	bl	8005d74 <__ssputs_r>
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	f000 80a7 	beq.w	8005ff2 <_svfiprintf_r+0x1c6>
 8005ea4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ea6:	445a      	add	r2, fp
 8005ea8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 809f 	beq.w	8005ff2 <_svfiprintf_r+0x1c6>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ebe:	f10a 0a01 	add.w	sl, sl, #1
 8005ec2:	9304      	str	r3, [sp, #16]
 8005ec4:	9307      	str	r3, [sp, #28]
 8005ec6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005eca:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ecc:	4654      	mov	r4, sl
 8005ece:	2205      	movs	r2, #5
 8005ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ed4:	484e      	ldr	r0, [pc, #312]	@ (8006010 <_svfiprintf_r+0x1e4>)
 8005ed6:	f7fa f983 	bl	80001e0 <memchr>
 8005eda:	9a04      	ldr	r2, [sp, #16]
 8005edc:	b9d8      	cbnz	r0, 8005f16 <_svfiprintf_r+0xea>
 8005ede:	06d0      	lsls	r0, r2, #27
 8005ee0:	bf44      	itt	mi
 8005ee2:	2320      	movmi	r3, #32
 8005ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ee8:	0711      	lsls	r1, r2, #28
 8005eea:	bf44      	itt	mi
 8005eec:	232b      	movmi	r3, #43	@ 0x2b
 8005eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ef6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ef8:	d015      	beq.n	8005f26 <_svfiprintf_r+0xfa>
 8005efa:	9a07      	ldr	r2, [sp, #28]
 8005efc:	4654      	mov	r4, sl
 8005efe:	2000      	movs	r0, #0
 8005f00:	f04f 0c0a 	mov.w	ip, #10
 8005f04:	4621      	mov	r1, r4
 8005f06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f0a:	3b30      	subs	r3, #48	@ 0x30
 8005f0c:	2b09      	cmp	r3, #9
 8005f0e:	d94b      	bls.n	8005fa8 <_svfiprintf_r+0x17c>
 8005f10:	b1b0      	cbz	r0, 8005f40 <_svfiprintf_r+0x114>
 8005f12:	9207      	str	r2, [sp, #28]
 8005f14:	e014      	b.n	8005f40 <_svfiprintf_r+0x114>
 8005f16:	eba0 0308 	sub.w	r3, r0, r8
 8005f1a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	9304      	str	r3, [sp, #16]
 8005f22:	46a2      	mov	sl, r4
 8005f24:	e7d2      	b.n	8005ecc <_svfiprintf_r+0xa0>
 8005f26:	9b03      	ldr	r3, [sp, #12]
 8005f28:	1d19      	adds	r1, r3, #4
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	9103      	str	r1, [sp, #12]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	bfbb      	ittet	lt
 8005f32:	425b      	neglt	r3, r3
 8005f34:	f042 0202 	orrlt.w	r2, r2, #2
 8005f38:	9307      	strge	r3, [sp, #28]
 8005f3a:	9307      	strlt	r3, [sp, #28]
 8005f3c:	bfb8      	it	lt
 8005f3e:	9204      	strlt	r2, [sp, #16]
 8005f40:	7823      	ldrb	r3, [r4, #0]
 8005f42:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f44:	d10a      	bne.n	8005f5c <_svfiprintf_r+0x130>
 8005f46:	7863      	ldrb	r3, [r4, #1]
 8005f48:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f4a:	d132      	bne.n	8005fb2 <_svfiprintf_r+0x186>
 8005f4c:	9b03      	ldr	r3, [sp, #12]
 8005f4e:	1d1a      	adds	r2, r3, #4
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	9203      	str	r2, [sp, #12]
 8005f54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f58:	3402      	adds	r4, #2
 8005f5a:	9305      	str	r3, [sp, #20]
 8005f5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006020 <_svfiprintf_r+0x1f4>
 8005f60:	7821      	ldrb	r1, [r4, #0]
 8005f62:	2203      	movs	r2, #3
 8005f64:	4650      	mov	r0, sl
 8005f66:	f7fa f93b 	bl	80001e0 <memchr>
 8005f6a:	b138      	cbz	r0, 8005f7c <_svfiprintf_r+0x150>
 8005f6c:	9b04      	ldr	r3, [sp, #16]
 8005f6e:	eba0 000a 	sub.w	r0, r0, sl
 8005f72:	2240      	movs	r2, #64	@ 0x40
 8005f74:	4082      	lsls	r2, r0
 8005f76:	4313      	orrs	r3, r2
 8005f78:	3401      	adds	r4, #1
 8005f7a:	9304      	str	r3, [sp, #16]
 8005f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f80:	4824      	ldr	r0, [pc, #144]	@ (8006014 <_svfiprintf_r+0x1e8>)
 8005f82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f86:	2206      	movs	r2, #6
 8005f88:	f7fa f92a 	bl	80001e0 <memchr>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	d036      	beq.n	8005ffe <_svfiprintf_r+0x1d2>
 8005f90:	4b21      	ldr	r3, [pc, #132]	@ (8006018 <_svfiprintf_r+0x1ec>)
 8005f92:	bb1b      	cbnz	r3, 8005fdc <_svfiprintf_r+0x1b0>
 8005f94:	9b03      	ldr	r3, [sp, #12]
 8005f96:	3307      	adds	r3, #7
 8005f98:	f023 0307 	bic.w	r3, r3, #7
 8005f9c:	3308      	adds	r3, #8
 8005f9e:	9303      	str	r3, [sp, #12]
 8005fa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fa2:	4433      	add	r3, r6
 8005fa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fa6:	e76a      	b.n	8005e7e <_svfiprintf_r+0x52>
 8005fa8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fac:	460c      	mov	r4, r1
 8005fae:	2001      	movs	r0, #1
 8005fb0:	e7a8      	b.n	8005f04 <_svfiprintf_r+0xd8>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	3401      	adds	r4, #1
 8005fb6:	9305      	str	r3, [sp, #20]
 8005fb8:	4619      	mov	r1, r3
 8005fba:	f04f 0c0a 	mov.w	ip, #10
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fc4:	3a30      	subs	r2, #48	@ 0x30
 8005fc6:	2a09      	cmp	r2, #9
 8005fc8:	d903      	bls.n	8005fd2 <_svfiprintf_r+0x1a6>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0c6      	beq.n	8005f5c <_svfiprintf_r+0x130>
 8005fce:	9105      	str	r1, [sp, #20]
 8005fd0:	e7c4      	b.n	8005f5c <_svfiprintf_r+0x130>
 8005fd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e7f0      	b.n	8005fbe <_svfiprintf_r+0x192>
 8005fdc:	ab03      	add	r3, sp, #12
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	462a      	mov	r2, r5
 8005fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800601c <_svfiprintf_r+0x1f0>)
 8005fe4:	a904      	add	r1, sp, #16
 8005fe6:	4638      	mov	r0, r7
 8005fe8:	f3af 8000 	nop.w
 8005fec:	1c42      	adds	r2, r0, #1
 8005fee:	4606      	mov	r6, r0
 8005ff0:	d1d6      	bne.n	8005fa0 <_svfiprintf_r+0x174>
 8005ff2:	89ab      	ldrh	r3, [r5, #12]
 8005ff4:	065b      	lsls	r3, r3, #25
 8005ff6:	f53f af2d 	bmi.w	8005e54 <_svfiprintf_r+0x28>
 8005ffa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ffc:	e72c      	b.n	8005e58 <_svfiprintf_r+0x2c>
 8005ffe:	ab03      	add	r3, sp, #12
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	462a      	mov	r2, r5
 8006004:	4b05      	ldr	r3, [pc, #20]	@ (800601c <_svfiprintf_r+0x1f0>)
 8006006:	a904      	add	r1, sp, #16
 8006008:	4638      	mov	r0, r7
 800600a:	f000 f879 	bl	8006100 <_printf_i>
 800600e:	e7ed      	b.n	8005fec <_svfiprintf_r+0x1c0>
 8006010:	08006474 	.word	0x08006474
 8006014:	0800647e 	.word	0x0800647e
 8006018:	00000000 	.word	0x00000000
 800601c:	08005d75 	.word	0x08005d75
 8006020:	0800647a 	.word	0x0800647a

08006024 <_printf_common>:
 8006024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006028:	4616      	mov	r6, r2
 800602a:	4698      	mov	r8, r3
 800602c:	688a      	ldr	r2, [r1, #8]
 800602e:	690b      	ldr	r3, [r1, #16]
 8006030:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006034:	4293      	cmp	r3, r2
 8006036:	bfb8      	it	lt
 8006038:	4613      	movlt	r3, r2
 800603a:	6033      	str	r3, [r6, #0]
 800603c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006040:	4607      	mov	r7, r0
 8006042:	460c      	mov	r4, r1
 8006044:	b10a      	cbz	r2, 800604a <_printf_common+0x26>
 8006046:	3301      	adds	r3, #1
 8006048:	6033      	str	r3, [r6, #0]
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	0699      	lsls	r1, r3, #26
 800604e:	bf42      	ittt	mi
 8006050:	6833      	ldrmi	r3, [r6, #0]
 8006052:	3302      	addmi	r3, #2
 8006054:	6033      	strmi	r3, [r6, #0]
 8006056:	6825      	ldr	r5, [r4, #0]
 8006058:	f015 0506 	ands.w	r5, r5, #6
 800605c:	d106      	bne.n	800606c <_printf_common+0x48>
 800605e:	f104 0a19 	add.w	sl, r4, #25
 8006062:	68e3      	ldr	r3, [r4, #12]
 8006064:	6832      	ldr	r2, [r6, #0]
 8006066:	1a9b      	subs	r3, r3, r2
 8006068:	42ab      	cmp	r3, r5
 800606a:	dc26      	bgt.n	80060ba <_printf_common+0x96>
 800606c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006070:	6822      	ldr	r2, [r4, #0]
 8006072:	3b00      	subs	r3, #0
 8006074:	bf18      	it	ne
 8006076:	2301      	movne	r3, #1
 8006078:	0692      	lsls	r2, r2, #26
 800607a:	d42b      	bmi.n	80060d4 <_printf_common+0xb0>
 800607c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006080:	4641      	mov	r1, r8
 8006082:	4638      	mov	r0, r7
 8006084:	47c8      	blx	r9
 8006086:	3001      	adds	r0, #1
 8006088:	d01e      	beq.n	80060c8 <_printf_common+0xa4>
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	6922      	ldr	r2, [r4, #16]
 800608e:	f003 0306 	and.w	r3, r3, #6
 8006092:	2b04      	cmp	r3, #4
 8006094:	bf02      	ittt	eq
 8006096:	68e5      	ldreq	r5, [r4, #12]
 8006098:	6833      	ldreq	r3, [r6, #0]
 800609a:	1aed      	subeq	r5, r5, r3
 800609c:	68a3      	ldr	r3, [r4, #8]
 800609e:	bf0c      	ite	eq
 80060a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060a4:	2500      	movne	r5, #0
 80060a6:	4293      	cmp	r3, r2
 80060a8:	bfc4      	itt	gt
 80060aa:	1a9b      	subgt	r3, r3, r2
 80060ac:	18ed      	addgt	r5, r5, r3
 80060ae:	2600      	movs	r6, #0
 80060b0:	341a      	adds	r4, #26
 80060b2:	42b5      	cmp	r5, r6
 80060b4:	d11a      	bne.n	80060ec <_printf_common+0xc8>
 80060b6:	2000      	movs	r0, #0
 80060b8:	e008      	b.n	80060cc <_printf_common+0xa8>
 80060ba:	2301      	movs	r3, #1
 80060bc:	4652      	mov	r2, sl
 80060be:	4641      	mov	r1, r8
 80060c0:	4638      	mov	r0, r7
 80060c2:	47c8      	blx	r9
 80060c4:	3001      	adds	r0, #1
 80060c6:	d103      	bne.n	80060d0 <_printf_common+0xac>
 80060c8:	f04f 30ff 	mov.w	r0, #4294967295
 80060cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d0:	3501      	adds	r5, #1
 80060d2:	e7c6      	b.n	8006062 <_printf_common+0x3e>
 80060d4:	18e1      	adds	r1, r4, r3
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	2030      	movs	r0, #48	@ 0x30
 80060da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060de:	4422      	add	r2, r4
 80060e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060e8:	3302      	adds	r3, #2
 80060ea:	e7c7      	b.n	800607c <_printf_common+0x58>
 80060ec:	2301      	movs	r3, #1
 80060ee:	4622      	mov	r2, r4
 80060f0:	4641      	mov	r1, r8
 80060f2:	4638      	mov	r0, r7
 80060f4:	47c8      	blx	r9
 80060f6:	3001      	adds	r0, #1
 80060f8:	d0e6      	beq.n	80060c8 <_printf_common+0xa4>
 80060fa:	3601      	adds	r6, #1
 80060fc:	e7d9      	b.n	80060b2 <_printf_common+0x8e>
	...

08006100 <_printf_i>:
 8006100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006104:	7e0f      	ldrb	r7, [r1, #24]
 8006106:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006108:	2f78      	cmp	r7, #120	@ 0x78
 800610a:	4691      	mov	r9, r2
 800610c:	4680      	mov	r8, r0
 800610e:	460c      	mov	r4, r1
 8006110:	469a      	mov	sl, r3
 8006112:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006116:	d807      	bhi.n	8006128 <_printf_i+0x28>
 8006118:	2f62      	cmp	r7, #98	@ 0x62
 800611a:	d80a      	bhi.n	8006132 <_printf_i+0x32>
 800611c:	2f00      	cmp	r7, #0
 800611e:	f000 80d2 	beq.w	80062c6 <_printf_i+0x1c6>
 8006122:	2f58      	cmp	r7, #88	@ 0x58
 8006124:	f000 80b9 	beq.w	800629a <_printf_i+0x19a>
 8006128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800612c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006130:	e03a      	b.n	80061a8 <_printf_i+0xa8>
 8006132:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006136:	2b15      	cmp	r3, #21
 8006138:	d8f6      	bhi.n	8006128 <_printf_i+0x28>
 800613a:	a101      	add	r1, pc, #4	@ (adr r1, 8006140 <_printf_i+0x40>)
 800613c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006140:	08006199 	.word	0x08006199
 8006144:	080061ad 	.word	0x080061ad
 8006148:	08006129 	.word	0x08006129
 800614c:	08006129 	.word	0x08006129
 8006150:	08006129 	.word	0x08006129
 8006154:	08006129 	.word	0x08006129
 8006158:	080061ad 	.word	0x080061ad
 800615c:	08006129 	.word	0x08006129
 8006160:	08006129 	.word	0x08006129
 8006164:	08006129 	.word	0x08006129
 8006168:	08006129 	.word	0x08006129
 800616c:	080062ad 	.word	0x080062ad
 8006170:	080061d7 	.word	0x080061d7
 8006174:	08006267 	.word	0x08006267
 8006178:	08006129 	.word	0x08006129
 800617c:	08006129 	.word	0x08006129
 8006180:	080062cf 	.word	0x080062cf
 8006184:	08006129 	.word	0x08006129
 8006188:	080061d7 	.word	0x080061d7
 800618c:	08006129 	.word	0x08006129
 8006190:	08006129 	.word	0x08006129
 8006194:	0800626f 	.word	0x0800626f
 8006198:	6833      	ldr	r3, [r6, #0]
 800619a:	1d1a      	adds	r2, r3, #4
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6032      	str	r2, [r6, #0]
 80061a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061a8:	2301      	movs	r3, #1
 80061aa:	e09d      	b.n	80062e8 <_printf_i+0x1e8>
 80061ac:	6833      	ldr	r3, [r6, #0]
 80061ae:	6820      	ldr	r0, [r4, #0]
 80061b0:	1d19      	adds	r1, r3, #4
 80061b2:	6031      	str	r1, [r6, #0]
 80061b4:	0606      	lsls	r6, r0, #24
 80061b6:	d501      	bpl.n	80061bc <_printf_i+0xbc>
 80061b8:	681d      	ldr	r5, [r3, #0]
 80061ba:	e003      	b.n	80061c4 <_printf_i+0xc4>
 80061bc:	0645      	lsls	r5, r0, #25
 80061be:	d5fb      	bpl.n	80061b8 <_printf_i+0xb8>
 80061c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80061c4:	2d00      	cmp	r5, #0
 80061c6:	da03      	bge.n	80061d0 <_printf_i+0xd0>
 80061c8:	232d      	movs	r3, #45	@ 0x2d
 80061ca:	426d      	negs	r5, r5
 80061cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061d0:	4859      	ldr	r0, [pc, #356]	@ (8006338 <_printf_i+0x238>)
 80061d2:	230a      	movs	r3, #10
 80061d4:	e011      	b.n	80061fa <_printf_i+0xfa>
 80061d6:	6821      	ldr	r1, [r4, #0]
 80061d8:	6833      	ldr	r3, [r6, #0]
 80061da:	0608      	lsls	r0, r1, #24
 80061dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80061e0:	d402      	bmi.n	80061e8 <_printf_i+0xe8>
 80061e2:	0649      	lsls	r1, r1, #25
 80061e4:	bf48      	it	mi
 80061e6:	b2ad      	uxthmi	r5, r5
 80061e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80061ea:	4853      	ldr	r0, [pc, #332]	@ (8006338 <_printf_i+0x238>)
 80061ec:	6033      	str	r3, [r6, #0]
 80061ee:	bf14      	ite	ne
 80061f0:	230a      	movne	r3, #10
 80061f2:	2308      	moveq	r3, #8
 80061f4:	2100      	movs	r1, #0
 80061f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061fa:	6866      	ldr	r6, [r4, #4]
 80061fc:	60a6      	str	r6, [r4, #8]
 80061fe:	2e00      	cmp	r6, #0
 8006200:	bfa2      	ittt	ge
 8006202:	6821      	ldrge	r1, [r4, #0]
 8006204:	f021 0104 	bicge.w	r1, r1, #4
 8006208:	6021      	strge	r1, [r4, #0]
 800620a:	b90d      	cbnz	r5, 8006210 <_printf_i+0x110>
 800620c:	2e00      	cmp	r6, #0
 800620e:	d04b      	beq.n	80062a8 <_printf_i+0x1a8>
 8006210:	4616      	mov	r6, r2
 8006212:	fbb5 f1f3 	udiv	r1, r5, r3
 8006216:	fb03 5711 	mls	r7, r3, r1, r5
 800621a:	5dc7      	ldrb	r7, [r0, r7]
 800621c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006220:	462f      	mov	r7, r5
 8006222:	42bb      	cmp	r3, r7
 8006224:	460d      	mov	r5, r1
 8006226:	d9f4      	bls.n	8006212 <_printf_i+0x112>
 8006228:	2b08      	cmp	r3, #8
 800622a:	d10b      	bne.n	8006244 <_printf_i+0x144>
 800622c:	6823      	ldr	r3, [r4, #0]
 800622e:	07df      	lsls	r7, r3, #31
 8006230:	d508      	bpl.n	8006244 <_printf_i+0x144>
 8006232:	6923      	ldr	r3, [r4, #16]
 8006234:	6861      	ldr	r1, [r4, #4]
 8006236:	4299      	cmp	r1, r3
 8006238:	bfde      	ittt	le
 800623a:	2330      	movle	r3, #48	@ 0x30
 800623c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006240:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006244:	1b92      	subs	r2, r2, r6
 8006246:	6122      	str	r2, [r4, #16]
 8006248:	f8cd a000 	str.w	sl, [sp]
 800624c:	464b      	mov	r3, r9
 800624e:	aa03      	add	r2, sp, #12
 8006250:	4621      	mov	r1, r4
 8006252:	4640      	mov	r0, r8
 8006254:	f7ff fee6 	bl	8006024 <_printf_common>
 8006258:	3001      	adds	r0, #1
 800625a:	d14a      	bne.n	80062f2 <_printf_i+0x1f2>
 800625c:	f04f 30ff 	mov.w	r0, #4294967295
 8006260:	b004      	add	sp, #16
 8006262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	f043 0320 	orr.w	r3, r3, #32
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	4833      	ldr	r0, [pc, #204]	@ (800633c <_printf_i+0x23c>)
 8006270:	2778      	movs	r7, #120	@ 0x78
 8006272:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	6831      	ldr	r1, [r6, #0]
 800627a:	061f      	lsls	r7, r3, #24
 800627c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006280:	d402      	bmi.n	8006288 <_printf_i+0x188>
 8006282:	065f      	lsls	r7, r3, #25
 8006284:	bf48      	it	mi
 8006286:	b2ad      	uxthmi	r5, r5
 8006288:	6031      	str	r1, [r6, #0]
 800628a:	07d9      	lsls	r1, r3, #31
 800628c:	bf44      	itt	mi
 800628e:	f043 0320 	orrmi.w	r3, r3, #32
 8006292:	6023      	strmi	r3, [r4, #0]
 8006294:	b11d      	cbz	r5, 800629e <_printf_i+0x19e>
 8006296:	2310      	movs	r3, #16
 8006298:	e7ac      	b.n	80061f4 <_printf_i+0xf4>
 800629a:	4827      	ldr	r0, [pc, #156]	@ (8006338 <_printf_i+0x238>)
 800629c:	e7e9      	b.n	8006272 <_printf_i+0x172>
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	f023 0320 	bic.w	r3, r3, #32
 80062a4:	6023      	str	r3, [r4, #0]
 80062a6:	e7f6      	b.n	8006296 <_printf_i+0x196>
 80062a8:	4616      	mov	r6, r2
 80062aa:	e7bd      	b.n	8006228 <_printf_i+0x128>
 80062ac:	6833      	ldr	r3, [r6, #0]
 80062ae:	6825      	ldr	r5, [r4, #0]
 80062b0:	6961      	ldr	r1, [r4, #20]
 80062b2:	1d18      	adds	r0, r3, #4
 80062b4:	6030      	str	r0, [r6, #0]
 80062b6:	062e      	lsls	r6, r5, #24
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	d501      	bpl.n	80062c0 <_printf_i+0x1c0>
 80062bc:	6019      	str	r1, [r3, #0]
 80062be:	e002      	b.n	80062c6 <_printf_i+0x1c6>
 80062c0:	0668      	lsls	r0, r5, #25
 80062c2:	d5fb      	bpl.n	80062bc <_printf_i+0x1bc>
 80062c4:	8019      	strh	r1, [r3, #0]
 80062c6:	2300      	movs	r3, #0
 80062c8:	6123      	str	r3, [r4, #16]
 80062ca:	4616      	mov	r6, r2
 80062cc:	e7bc      	b.n	8006248 <_printf_i+0x148>
 80062ce:	6833      	ldr	r3, [r6, #0]
 80062d0:	1d1a      	adds	r2, r3, #4
 80062d2:	6032      	str	r2, [r6, #0]
 80062d4:	681e      	ldr	r6, [r3, #0]
 80062d6:	6862      	ldr	r2, [r4, #4]
 80062d8:	2100      	movs	r1, #0
 80062da:	4630      	mov	r0, r6
 80062dc:	f7f9 ff80 	bl	80001e0 <memchr>
 80062e0:	b108      	cbz	r0, 80062e6 <_printf_i+0x1e6>
 80062e2:	1b80      	subs	r0, r0, r6
 80062e4:	6060      	str	r0, [r4, #4]
 80062e6:	6863      	ldr	r3, [r4, #4]
 80062e8:	6123      	str	r3, [r4, #16]
 80062ea:	2300      	movs	r3, #0
 80062ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062f0:	e7aa      	b.n	8006248 <_printf_i+0x148>
 80062f2:	6923      	ldr	r3, [r4, #16]
 80062f4:	4632      	mov	r2, r6
 80062f6:	4649      	mov	r1, r9
 80062f8:	4640      	mov	r0, r8
 80062fa:	47d0      	blx	sl
 80062fc:	3001      	adds	r0, #1
 80062fe:	d0ad      	beq.n	800625c <_printf_i+0x15c>
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	079b      	lsls	r3, r3, #30
 8006304:	d413      	bmi.n	800632e <_printf_i+0x22e>
 8006306:	68e0      	ldr	r0, [r4, #12]
 8006308:	9b03      	ldr	r3, [sp, #12]
 800630a:	4298      	cmp	r0, r3
 800630c:	bfb8      	it	lt
 800630e:	4618      	movlt	r0, r3
 8006310:	e7a6      	b.n	8006260 <_printf_i+0x160>
 8006312:	2301      	movs	r3, #1
 8006314:	4632      	mov	r2, r6
 8006316:	4649      	mov	r1, r9
 8006318:	4640      	mov	r0, r8
 800631a:	47d0      	blx	sl
 800631c:	3001      	adds	r0, #1
 800631e:	d09d      	beq.n	800625c <_printf_i+0x15c>
 8006320:	3501      	adds	r5, #1
 8006322:	68e3      	ldr	r3, [r4, #12]
 8006324:	9903      	ldr	r1, [sp, #12]
 8006326:	1a5b      	subs	r3, r3, r1
 8006328:	42ab      	cmp	r3, r5
 800632a:	dcf2      	bgt.n	8006312 <_printf_i+0x212>
 800632c:	e7eb      	b.n	8006306 <_printf_i+0x206>
 800632e:	2500      	movs	r5, #0
 8006330:	f104 0619 	add.w	r6, r4, #25
 8006334:	e7f5      	b.n	8006322 <_printf_i+0x222>
 8006336:	bf00      	nop
 8006338:	08006485 	.word	0x08006485
 800633c:	08006496 	.word	0x08006496

08006340 <memmove>:
 8006340:	4288      	cmp	r0, r1
 8006342:	b510      	push	{r4, lr}
 8006344:	eb01 0402 	add.w	r4, r1, r2
 8006348:	d902      	bls.n	8006350 <memmove+0x10>
 800634a:	4284      	cmp	r4, r0
 800634c:	4623      	mov	r3, r4
 800634e:	d807      	bhi.n	8006360 <memmove+0x20>
 8006350:	1e43      	subs	r3, r0, #1
 8006352:	42a1      	cmp	r1, r4
 8006354:	d008      	beq.n	8006368 <memmove+0x28>
 8006356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800635a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800635e:	e7f8      	b.n	8006352 <memmove+0x12>
 8006360:	4402      	add	r2, r0
 8006362:	4601      	mov	r1, r0
 8006364:	428a      	cmp	r2, r1
 8006366:	d100      	bne.n	800636a <memmove+0x2a>
 8006368:	bd10      	pop	{r4, pc}
 800636a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800636e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006372:	e7f7      	b.n	8006364 <memmove+0x24>

08006374 <_sbrk_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	4d06      	ldr	r5, [pc, #24]	@ (8006390 <_sbrk_r+0x1c>)
 8006378:	2300      	movs	r3, #0
 800637a:	4604      	mov	r4, r0
 800637c:	4608      	mov	r0, r1
 800637e:	602b      	str	r3, [r5, #0]
 8006380:	f7fb fb3e 	bl	8001a00 <_sbrk>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	d102      	bne.n	800638e <_sbrk_r+0x1a>
 8006388:	682b      	ldr	r3, [r5, #0]
 800638a:	b103      	cbz	r3, 800638e <_sbrk_r+0x1a>
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	bd38      	pop	{r3, r4, r5, pc}
 8006390:	200045e0 	.word	0x200045e0

08006394 <_realloc_r>:
 8006394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006398:	4680      	mov	r8, r0
 800639a:	4615      	mov	r5, r2
 800639c:	460c      	mov	r4, r1
 800639e:	b921      	cbnz	r1, 80063aa <_realloc_r+0x16>
 80063a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063a4:	4611      	mov	r1, r2
 80063a6:	f7ff bc59 	b.w	8005c5c <_malloc_r>
 80063aa:	b92a      	cbnz	r2, 80063b8 <_realloc_r+0x24>
 80063ac:	f7ff fbea 	bl	8005b84 <_free_r>
 80063b0:	2400      	movs	r4, #0
 80063b2:	4620      	mov	r0, r4
 80063b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063b8:	f000 f81a 	bl	80063f0 <_malloc_usable_size_r>
 80063bc:	4285      	cmp	r5, r0
 80063be:	4606      	mov	r6, r0
 80063c0:	d802      	bhi.n	80063c8 <_realloc_r+0x34>
 80063c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80063c6:	d8f4      	bhi.n	80063b2 <_realloc_r+0x1e>
 80063c8:	4629      	mov	r1, r5
 80063ca:	4640      	mov	r0, r8
 80063cc:	f7ff fc46 	bl	8005c5c <_malloc_r>
 80063d0:	4607      	mov	r7, r0
 80063d2:	2800      	cmp	r0, #0
 80063d4:	d0ec      	beq.n	80063b0 <_realloc_r+0x1c>
 80063d6:	42b5      	cmp	r5, r6
 80063d8:	462a      	mov	r2, r5
 80063da:	4621      	mov	r1, r4
 80063dc:	bf28      	it	cs
 80063de:	4632      	movcs	r2, r6
 80063e0:	f7ff fbc2 	bl	8005b68 <memcpy>
 80063e4:	4621      	mov	r1, r4
 80063e6:	4640      	mov	r0, r8
 80063e8:	f7ff fbcc 	bl	8005b84 <_free_r>
 80063ec:	463c      	mov	r4, r7
 80063ee:	e7e0      	b.n	80063b2 <_realloc_r+0x1e>

080063f0 <_malloc_usable_size_r>:
 80063f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063f4:	1f18      	subs	r0, r3, #4
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	bfbc      	itt	lt
 80063fa:	580b      	ldrlt	r3, [r1, r0]
 80063fc:	18c0      	addlt	r0, r0, r3
 80063fe:	4770      	bx	lr

08006400 <_init>:
 8006400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006402:	bf00      	nop
 8006404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006406:	bc08      	pop	{r3}
 8006408:	469e      	mov	lr, r3
 800640a:	4770      	bx	lr

0800640c <_fini>:
 800640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640e:	bf00      	nop
 8006410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006412:	bc08      	pop	{r3}
 8006414:	469e      	mov	lr, r3
 8006416:	4770      	bx	lr
