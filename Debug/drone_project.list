
drone_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c58  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08006df8  08006df8  00007df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e84  08006e84  00008078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006e84  08006e84  00007e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e8c  08006e8c  00008078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e8c  08006e8c  00007e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e90  08006e90  00007e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08006e94  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004634  20000078  08006f0c  00008078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200046ac  08006f0c  000086ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001733c  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034cc  00000000  00000000  0001f3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  000228b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc4  00000000  00000000  00023d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001965e  00000000  00000000  00024cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016df6  00000000  00000000  0003e332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a30f  00000000  00000000  00055128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef437  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b8  00000000  00000000  000ef47c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000f4e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006de0 	.word	0x08006de0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006de0 	.word	0x08006de0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <Calculate_Reference>:
 */

#include "Drone_control.h"

void Calculate_Reference(Drone_Calculation_Typedef *dr,Drone_Control_Typedef *dc)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	dr->picth_reference=(dc->RV-1500)*0.1f;//we can send reference direct from control
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	885b      	ldrh	r3, [r3, #2]
 80005ba:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80005be:	ee07 3a90 	vmov	s15, r3
 80005c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800063c <Calculate_Reference+0x90>
 80005ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	edc3 7a00 	vstr	s15, [r3]
	dr->roll_reference=(dc->RH-1500)*0.1f;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80005dc:	ee07 3a90 	vmov	s15, r3
 80005e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005e4:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800063c <Calculate_Reference+0x90>
 80005e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	edc3 7a01 	vstr	s15, [r3, #4]
	dr->yaw_reference=(dc->LH-1500)*0.1f;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	88db      	ldrh	r3, [r3, #6]
 80005f6:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80005fa:	ee07 3a90 	vmov	s15, r3
 80005fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000602:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800063c <Calculate_Reference+0x90>
 8000606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	edc3 7a02 	vstr	s15, [r3, #8]
	dr->high_reference=(dc->LV-1000)*10;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	889b      	ldrh	r3, [r3, #4]
 8000614:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8000618:	4613      	mov	r3, r2
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4413      	add	r3, r2
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	ee07 3a90 	vmov	s15, r3
 8000624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	3dcccccd 	.word	0x3dcccccd

08000640 <escNormalOneshot125>:
	HAL_Delay(8000);
	HAL_Delay(1000);
}

void escNormalOneshot125(TIM_HandleTypeDef *htim,uint32_t speed,Timer_channel_enumTypedef CHANNEL)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	4613      	mov	r3, r2
 800064c:	71fb      	strb	r3, [r7, #7]
	if(speed>=MAXIMUM_SPEED)
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000654:	4293      	cmp	r3, r2
 8000656:	d903      	bls.n	8000660 <escNormalOneshot125+0x20>
	{
		speed=MAXIMUM_SPEED;
 8000658:	f642 1304 	movw	r3, #10500	@ 0x2904
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	e004      	b.n	800066a <escNormalOneshot125+0x2a>
	}
	else if(speed<=MINIMUM_SPEED)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d101      	bne.n	800066a <escNormalOneshot125+0x2a>
	{
		speed=MINIMUM_SPEED;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
	}
	switch(CHANNEL)
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b0c      	cmp	r3, #12
 800066e:	d83d      	bhi.n	80006ec <escNormalOneshot125+0xac>
 8000670:	a201      	add	r2, pc, #4	@ (adr r2, 8000678 <escNormalOneshot125+0x38>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	080006ad 	.word	0x080006ad
 800067c:	080006ed 	.word	0x080006ed
 8000680:	080006ed 	.word	0x080006ed
 8000684:	080006ed 	.word	0x080006ed
 8000688:	080006bd 	.word	0x080006bd
 800068c:	080006ed 	.word	0x080006ed
 8000690:	080006ed 	.word	0x080006ed
 8000694:	080006ed 	.word	0x080006ed
 8000698:	080006cd 	.word	0x080006cd
 800069c:	080006ed 	.word	0x080006ed
 80006a0:	080006ed 	.word	0x080006ed
 80006a4:	080006ed 	.word	0x080006ed
 80006a8:	080006dd 	.word	0x080006dd
	{
	case CHANNEL1:
		htim->Instance->CCR1=speed+MINIMUM_ESC_PWM;
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80006b6:	3304      	adds	r3, #4
 80006b8:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 80006ba:	e017      	b.n	80006ec <escNormalOneshot125+0xac>
	case CHANNEL2:
			htim->Instance->CCR2=speed+MINIMUM_ESC_PWM;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80006c6:	3304      	adds	r3, #4
 80006c8:	6393      	str	r3, [r2, #56]	@ 0x38
			break;
 80006ca:	e00f      	b.n	80006ec <escNormalOneshot125+0xac>
	case CHANNEL3:
			htim->Instance->CCR3=speed+MINIMUM_ESC_PWM;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80006d6:	3304      	adds	r3, #4
 80006d8:	63d3      	str	r3, [r2, #60]	@ 0x3c
			break;
 80006da:	e007      	b.n	80006ec <escNormalOneshot125+0xac>
	case CHANNEL4:
			htim->Instance->CCR4=speed+MINIMUM_ESC_PWM;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80006e6:	3304      	adds	r3, #4
 80006e8:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 80006ea:	bf00      	nop
	}
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <Control4Motor>:

void Control4Motor(TIM_HandleTypeDef *htim,Motor_speed_Typedef *speed)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
	escNormalOneshot125(htim, speed->speed1, CHANNEL1);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2200      	movs	r2, #0
 8000708:	4619      	mov	r1, r3
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ff98 	bl	8000640 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed2, CHANNEL2);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	2204      	movs	r2, #4
 8000716:	4619      	mov	r1, r3
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ff91 	bl	8000640 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed3, CHANNEL3);
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	2208      	movs	r2, #8
 8000724:	4619      	mov	r1, r3
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ff8a 	bl	8000640 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed4, CHANNEL4);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	220c      	movs	r2, #12
 8000732:	4619      	mov	r1, r3
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ff83 	bl	8000640 <escNormalOneshot125>

}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <pidControllersInit>:
 */

#include "PID.h"

void pidControllersInit(PIDControllers_Typedef* pid,float Kp,float Ki,float Kd,float to,float T,float upper_saturation,float lower_saturation)
{
 8000742:	b480      	push	{r7}
 8000744:	b089      	sub	sp, #36	@ 0x24
 8000746:	af00      	add	r7, sp, #0
 8000748:	61f8      	str	r0, [r7, #28]
 800074a:	ed87 0a06 	vstr	s0, [r7, #24]
 800074e:	edc7 0a05 	vstr	s1, [r7, #20]
 8000752:	ed87 1a04 	vstr	s2, [r7, #16]
 8000756:	edc7 1a03 	vstr	s3, [r7, #12]
 800075a:	ed87 2a02 	vstr	s4, [r7, #8]
 800075e:	edc7 2a01 	vstr	s5, [r7, #4]
 8000762:	ed87 3a00 	vstr	s6, [r7]
	pid->Kp=Kp;
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	69ba      	ldr	r2, [r7, #24]
 800076a:	601a      	str	r2, [r3, #0]
	pid->Ki=Ki;
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	605a      	str	r2, [r3, #4]
	pid->Kd=Kd;
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	693a      	ldr	r2, [r7, #16]
 8000776:	609a      	str	r2, [r3, #8]
	pid->to=to;
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	60da      	str	r2, [r3, #12]
	pid->T=T;
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	68ba      	ldr	r2, [r7, #8]
 8000782:	611a      	str	r2, [r3, #16]

	pid->et=0;
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	f04f 0200 	mov.w	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
	pid->ek1=0;
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	f04f 0200 	mov.w	r2, #0
 8000792:	619a      	str	r2, [r3, #24]

	pid->eKit=0;
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	f04f 0200 	mov.w	r2, #0
 800079a:	61da      	str	r2, [r3, #28]
	pid->eKik1=0;
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	f04f 0200 	mov.w	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]

	pid->propotion=0;
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	f04f 0200 	mov.w	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->integrator=0;
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	f04f 0200 	mov.w	r2, #0
 80007b2:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->deviator=0;
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f04f 0200 	mov.w	r2, #0
 80007ba:	631a      	str	r2, [r3, #48]	@ 0x30
	pid->integratork1=0;
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	f04f 0200 	mov.w	r2, #0
 80007c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->deviatork1=0;
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	f04f 0200 	mov.w	r2, #0
 80007ca:	635a      	str	r2, [r3, #52]	@ 0x34

	pid->upper_saturation=upper_saturation;
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	641a      	str	r2, [r3, #64]	@ 0x40
	pid->lower_saturation=lower_saturation;
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	683a      	ldr	r2, [r7, #0]
 80007d6:	645a      	str	r2, [r3, #68]	@ 0x44

	pid->measurement=0;
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	f04f 0200 	mov.w	r2, #0
 80007de:	639a      	str	r2, [r3, #56]	@ 0x38

	pid->u=0;
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	f04f 0200 	mov.w	r2, #0
 80007e6:	64da      	str	r2, [r3, #76]	@ 0x4c

}
 80007e8:	bf00      	nop
 80007ea:	3724      	adds	r7, #36	@ 0x24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <pidUpdate>:
	pid->Ki=Ki;
	pid->Kd=Kd;
}

float pidUpdate(PIDControllers_Typedef* pid,float measurement,float input)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000800:	edc7 0a01 	vstr	s1, [r7, #4]
	//get pid input
	pid->expected=input;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	63da      	str	r2, [r3, #60]	@ 0x3c
	pid->measurement=measurement;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	68ba      	ldr	r2, [r7, #8]
 800080e:	639a      	str	r2, [r3, #56]	@ 0x38
	pid->et=pid->expected-pid->measurement;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800081c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	edc3 7a05 	vstr	s15, [r3, #20]
	{
		pid->eKik1=0;
		pid->eKit=0;
	}
#else
	pid->eKit=pid->et;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	695a      	ldr	r2, [r3, #20]
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	61da      	str	r2, [r3, #28]
	pid->eKik1=pid->ek1;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	699a      	ldr	r2, [r3, #24]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	621a      	str	r2, [r3, #32]
#endif
	//PID calculation
	pid->propotion=pid->Kp*pid->et;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	ed93 7a00 	vldr	s14, [r3]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	pid->integrator=((pid->Ki*pid->T)/2)*(pid->eKit+pid->eKik1)+pid->integratork1;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	edd3 7a04 	vldr	s15, [r3, #16]
 8000858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800085c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000860:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	edd3 6a07 	vldr	s13, [r3, #28]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	edd3 7a08 	vldr	s15, [r3, #32]
 8000870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000874:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800087e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	pid->deviator=((2*pid->Kd)/(2*pid->to+pid->T))*(pid->et-pid->ek1)+((2*pid->to-pid->T)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	edd3 7a02 	vldr	s15, [r3, #8]
 800088e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	edd3 7a03 	vldr	s15, [r3, #12]
 8000898:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	edd3 7a04 	vldr	s15, [r3, #16]
 80008a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	edd3 6a05 	vldr	s13, [r3, #20]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80008b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80008ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80008c4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80008ce:	ee36 6ae7 	vsub.f32	s12, s13, s15
			/(2*pid->to+pid->T))*pid->deviatork1;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80008d8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	edd3 7a04 	vldr	s15, [r3, #16]
 80008e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80008e6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80008f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
	pid->deviator=((2*pid->Kd)/(2*pid->to+pid->T))*(pid->et-pid->ek1)+((2*pid->to-pid->T)
 80008f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	pid->ek1=pid->et;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	695a      	ldr	r2, [r3, #20]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	619a      	str	r2, [r3, #24]
	pid->integratork1=pid->integrator;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->deviatork1=pid->deviator;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	635a      	str	r2, [r3, #52]	@ 0x34
	pid->v=pid->propotion+pid->integrator+pid->deviator;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000922:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800092c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

	//saturation
	if(pid->v>pid->upper_saturation)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8000942:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800094a:	dd04      	ble.n	8000956 <pidUpdate+0x162>
	{
		pid->u=pid->upper_saturation;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000954:	e013      	b.n	800097e <pidUpdate+0x18a>
	}
	else if(pid->v<(pid->lower_saturation))
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000962:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800096a:	d504      	bpl.n	8000976 <pidUpdate+0x182>
	{
		pid->u=pid->lower_saturation;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000974:	e003      	b.n	800097e <pidUpdate+0x18a>
	}
	else
	{
		pid->u=pid->v;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	64da      	str	r2, [r3, #76]	@ 0x4c
	}

	return pid->u;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	ee07 3a90 	vmov	s15, r3
}
 8000986:	eeb0 0a67 	vmov.f32	s0, s15
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4a07      	ldr	r2, [pc, #28]	@ (80009c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80009a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	4a06      	ldr	r2, [pc, #24]	@ (80009c4 <vApplicationGetIdleTaskMemory+0x30>)
 80009aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2280      	movs	r2, #128	@ 0x80
 80009b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009b2:	bf00      	nop
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000094 	.word	0x20000094
 80009c4:	20000134 	.word	0x20000134

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b5b0      	push	{r4, r5, r7, lr}
 80009ca:	b08a      	sub	sp, #40	@ 0x28
 80009cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ce:	f001 fa9d 	bl	8001f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d2:	f000 f911 	bl	8000bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d6:	f000 fad5 	bl	8000f84 <MX_GPIO_Init>
  MX_SPI1_Init();
 80009da:	f000 f975 	bl	8000cc8 <MX_SPI1_Init>
  MX_TIM2_Init();
 80009de:	f000 f9df 	bl	8000da0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009e2:	f000 fa57 	bl	8000e94 <MX_TIM3_Init>
  MX_SPI2_Init();
 80009e6:	f000 f9a5 	bl	8000d34 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80009ea:	f000 faa1 	bl	8000f30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */



  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009f4:	4864      	ldr	r0, [pc, #400]	@ (8000b88 <main+0x1c0>)
 80009f6:	f001 fd6d 	bl	80024d4 <HAL_GPIO_WritePin>
  float sample=powf(10,-3);
 80009fa:	4b64      	ldr	r3, [pc, #400]	@ (8000b8c <main+0x1c4>)
 80009fc:	61fb      	str	r3, [r7, #28]
  pidControllersInit(&yaw, 20, 15, 5,0.1,sample,0.1,-0.1);
 80009fe:	ed9f 3a64 	vldr	s6, [pc, #400]	@ 8000b90 <main+0x1c8>
 8000a02:	eddf 2a64 	vldr	s5, [pc, #400]	@ 8000b94 <main+0x1cc>
 8000a06:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a0a:	eddf 1a62 	vldr	s3, [pc, #392]	@ 8000b94 <main+0x1cc>
 8000a0e:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000a12:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8000a16:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000a1a:	485f      	ldr	r0, [pc, #380]	@ (8000b98 <main+0x1d0>)
 8000a1c:	f7ff fe91 	bl	8000742 <pidControllersInit>
  pidControllersInit(&yaw_rate, 100, 50,10, 0.1,sample,1500,-1500);
 8000a20:	ed9f 3a5e 	vldr	s6, [pc, #376]	@ 8000b9c <main+0x1d4>
 8000a24:	eddf 2a5e 	vldr	s5, [pc, #376]	@ 8000ba0 <main+0x1d8>
 8000a28:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a2c:	eddf 1a59 	vldr	s3, [pc, #356]	@ 8000b94 <main+0x1cc>
 8000a30:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000a34:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8000ba4 <main+0x1dc>
 8000a38:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 8000ba8 <main+0x1e0>
 8000a3c:	485b      	ldr	r0, [pc, #364]	@ (8000bac <main+0x1e4>)
 8000a3e:	f7ff fe80 	bl	8000742 <pidControllersInit>
  pidControllersInit(&pitch, 20, 15,5, 0.1,sample,0.1,-0.1);
 8000a42:	ed9f 3a53 	vldr	s6, [pc, #332]	@ 8000b90 <main+0x1c8>
 8000a46:	eddf 2a53 	vldr	s5, [pc, #332]	@ 8000b94 <main+0x1cc>
 8000a4a:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a4e:	eddf 1a51 	vldr	s3, [pc, #324]	@ 8000b94 <main+0x1cc>
 8000a52:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000a56:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8000a5a:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000a5e:	4854      	ldr	r0, [pc, #336]	@ (8000bb0 <main+0x1e8>)
 8000a60:	f7ff fe6f 	bl	8000742 <pidControllersInit>
  pidControllersInit(&pitch_rate, 100, 50,10, 0.1,sample,1500,-1500);
 8000a64:	ed9f 3a4d 	vldr	s6, [pc, #308]	@ 8000b9c <main+0x1d4>
 8000a68:	eddf 2a4d 	vldr	s5, [pc, #308]	@ 8000ba0 <main+0x1d8>
 8000a6c:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a70:	eddf 1a48 	vldr	s3, [pc, #288]	@ 8000b94 <main+0x1cc>
 8000a74:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000a78:	eddf 0a4a 	vldr	s1, [pc, #296]	@ 8000ba4 <main+0x1dc>
 8000a7c:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 8000ba8 <main+0x1e0>
 8000a80:	484c      	ldr	r0, [pc, #304]	@ (8000bb4 <main+0x1ec>)
 8000a82:	f7ff fe5e 	bl	8000742 <pidControllersInit>
  pidControllersInit(&roll, 20, 15,5 ,0.1,sample,0.1,-0.1);
 8000a86:	ed9f 3a42 	vldr	s6, [pc, #264]	@ 8000b90 <main+0x1c8>
 8000a8a:	eddf 2a42 	vldr	s5, [pc, #264]	@ 8000b94 <main+0x1cc>
 8000a8e:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a92:	eddf 1a40 	vldr	s3, [pc, #256]	@ 8000b94 <main+0x1cc>
 8000a96:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000a9a:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8000a9e:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000aa2:	4845      	ldr	r0, [pc, #276]	@ (8000bb8 <main+0x1f0>)
 8000aa4:	f7ff fe4d 	bl	8000742 <pidControllersInit>
  pidControllersInit(&roll_rate, 100, 50,10, 0.1,sample,1500,-1500);
 8000aa8:	ed9f 3a3c 	vldr	s6, [pc, #240]	@ 8000b9c <main+0x1d4>
 8000aac:	eddf 2a3c 	vldr	s5, [pc, #240]	@ 8000ba0 <main+0x1d8>
 8000ab0:	ed97 2a07 	vldr	s4, [r7, #28]
 8000ab4:	eddf 1a37 	vldr	s3, [pc, #220]	@ 8000b94 <main+0x1cc>
 8000ab8:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000abc:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8000ba4 <main+0x1dc>
 8000ac0:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8000ba8 <main+0x1e0>
 8000ac4:	483d      	ldr	r0, [pc, #244]	@ (8000bbc <main+0x1f4>)
 8000ac6:	f7ff fe3c 	bl	8000742 <pidControllersInit>
  pidControllersInit(&high, 50, 25,10 ,0.1,sample,6000,0);
 8000aca:	ed9f 3a3d 	vldr	s6, [pc, #244]	@ 8000bc0 <main+0x1f8>
 8000ace:	eddf 2a3d 	vldr	s5, [pc, #244]	@ 8000bc4 <main+0x1fc>
 8000ad2:	ed97 2a07 	vldr	s4, [r7, #28]
 8000ad6:	eddf 1a2f 	vldr	s3, [pc, #188]	@ 8000b94 <main+0x1cc>
 8000ada:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000ade:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 8000ae2:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8000ba4 <main+0x1dc>
 8000ae6:	4838      	ldr	r0, [pc, #224]	@ (8000bc8 <main+0x200>)
 8000ae8:	f7ff fe2b 	bl	8000742 <pidControllersInit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000aec:	2100      	movs	r1, #0
 8000aee:	4837      	ldr	r0, [pc, #220]	@ (8000bcc <main+0x204>)
 8000af0:	f003 f882 	bl	8003bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000af4:	2104      	movs	r1, #4
 8000af6:	4835      	ldr	r0, [pc, #212]	@ (8000bcc <main+0x204>)
 8000af8:	f003 f87e 	bl	8003bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000afc:	2108      	movs	r1, #8
 8000afe:	4833      	ldr	r0, [pc, #204]	@ (8000bcc <main+0x204>)
 8000b00:	f003 f87a 	bl	8003bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000b04:	210c      	movs	r1, #12
 8000b06:	4831      	ldr	r0, [pc, #196]	@ (8000bcc <main+0x204>)
 8000b08:	f003 f876 	bl	8003bf8 <HAL_TIM_PWM_Start>
 // Calibration(&htim2);
  HAL_TIM_Base_Start_IT(&htim3);
 8000b0c:	4830      	ldr	r0, [pc, #192]	@ (8000bd0 <main+0x208>)
 8000b0e:	f002 ffc1 	bl	8003a94 <HAL_TIM_Base_Start_IT>
  Two_Way_Commuination_Pipe0_Config(&nrf1,0xA2A2A2A2A2,0xC5C5C5C5C5);
 8000b12:	f04f 32c5 	mov.w	r2, #3318072773	@ 0xc5c5c5c5
 8000b16:	f04f 03c5 	mov.w	r3, #197	@ 0xc5
 8000b1a:	e9cd 2300 	strd	r2, r3, [sp]
 8000b1e:	f04f 32a2 	mov.w	r2, #2728567458	@ 0xa2a2a2a2
 8000b22:	f04f 03a2 	mov.w	r3, #162	@ 0xa2
 8000b26:	482b      	ldr	r0, [pc, #172]	@ (8000bd4 <main+0x20c>)
 8000b28:	f000 fe0a 	bl	8001740 <Two_Way_Commuination_Pipe0_Config>
  Select_Rx_Mode(&nrf1);
 8000b2c:	4829      	ldr	r0, [pc, #164]	@ (8000bd4 <main+0x20c>)
 8000b2e:	f000 fd8f 	bl	8001650 <Select_Rx_Mode>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b32:	4b29      	ldr	r3, [pc, #164]	@ (8000bd8 <main+0x210>)
 8000b34:	463c      	mov	r4, r7
 8000b36:	461d      	mov	r5, r3
 8000b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b44:	463b      	mov	r3, r7
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f004 f9de 	bl	8004f0a <osThreadCreate>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4a22      	ldr	r2, [pc, #136]	@ (8000bdc <main+0x214>)
 8000b52:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(ESC_Task, "ESC", 256,NULL,1, &ESC_Handle);
 8000b54:	4b22      	ldr	r3, [pc, #136]	@ (8000be0 <main+0x218>)
 8000b56:	9301      	str	r3, [sp, #4]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b62:	4920      	ldr	r1, [pc, #128]	@ (8000be4 <main+0x21c>)
 8000b64:	4820      	ldr	r0, [pc, #128]	@ (8000be8 <main+0x220>)
 8000b66:	f004 fb44 	bl	80051f2 <xTaskCreate>
  xTaskCreate(NRF_Task, "NRF", 256, NULL, 0, &NRF_Handle);
 8000b6a:	4b20      	ldr	r3, [pc, #128]	@ (8000bec <main+0x224>)
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2300      	movs	r3, #0
 8000b74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b78:	491d      	ldr	r1, [pc, #116]	@ (8000bf0 <main+0x228>)
 8000b7a:	481e      	ldr	r0, [pc, #120]	@ (8000bf4 <main+0x22c>)
 8000b7c:	f004 fb39 	bl	80051f2 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b80:	f004 f9bc 	bl	8004efc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <main+0x1bc>
 8000b88:	40020800 	.word	0x40020800
 8000b8c:	3a83126f 	.word	0x3a83126f
 8000b90:	bdcccccd 	.word	0xbdcccccd
 8000b94:	3dcccccd 	.word	0x3dcccccd
 8000b98:	20000664 	.word	0x20000664
 8000b9c:	c4bb8000 	.word	0xc4bb8000
 8000ba0:	44bb8000 	.word	0x44bb8000
 8000ba4:	42480000 	.word	0x42480000
 8000ba8:	42c80000 	.word	0x42c80000
 8000bac:	200006b8 	.word	0x200006b8
 8000bb0:	20000514 	.word	0x20000514
 8000bb4:	20000568 	.word	0x20000568
 8000bb8:	200005bc 	.word	0x200005bc
 8000bbc:	20000610 	.word	0x20000610
 8000bc0:	00000000 	.word	0x00000000
 8000bc4:	45bb8000 	.word	0x45bb8000
 8000bc8:	2000070c 	.word	0x2000070c
 8000bcc:	200003e4 	.word	0x200003e4
 8000bd0:	2000042c 	.word	0x2000042c
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	08006e0c 	.word	0x08006e0c
 8000bdc:	200004bc 	.word	0x200004bc
 8000be0:	200007b0 	.word	0x200007b0
 8000be4:	08006df8 	.word	0x08006df8
 8000be8:	080010b1 	.word	0x080010b1
 8000bec:	200007b4 	.word	0x200007b4
 8000bf0:	08006dfc 	.word	0x08006dfc
 8000bf4:	080012b1 	.word	0x080012b1

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b094      	sub	sp, #80	@ 0x50
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0320 	add.w	r3, r7, #32
 8000c02:	2230      	movs	r2, #48	@ 0x30
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f005 fc0e 	bl	8006428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	4b27      	ldr	r3, [pc, #156]	@ (8000cc0 <SystemClock_Config+0xc8>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c24:	4a26      	ldr	r2, [pc, #152]	@ (8000cc0 <SystemClock_Config+0xc8>)
 8000c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2c:	4b24      	ldr	r3, [pc, #144]	@ (8000cc0 <SystemClock_Config+0xc8>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c38:	2300      	movs	r3, #0
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	4b21      	ldr	r3, [pc, #132]	@ (8000cc4 <SystemClock_Config+0xcc>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a20      	ldr	r2, [pc, #128]	@ (8000cc4 <SystemClock_Config+0xcc>)
 8000c42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc4 <SystemClock_Config+0xcc>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c54:	2301      	movs	r3, #1
 8000c56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c62:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c68:	2319      	movs	r3, #25
 8000c6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c6c:	23a8      	movs	r3, #168	@ 0xa8
 8000c6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c70:	2302      	movs	r3, #2
 8000c72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c74:	2304      	movs	r3, #4
 8000c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c78:	f107 0320 	add.w	r3, r7, #32
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f001 fc5d 	bl	800253c <HAL_RCC_OscConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c88:	f000 fb60 	bl	800134c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c90:	2302      	movs	r3, #2
 8000c92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ca2:	f107 030c 	add.w	r3, r7, #12
 8000ca6:	2102      	movs	r1, #2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f001 febf 	bl	8002a2c <HAL_RCC_ClockConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cb4:	f000 fb4a 	bl	800134c <Error_Handler>
  }
}
 8000cb8:	bf00      	nop
 8000cba:	3750      	adds	r7, #80	@ 0x50
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40007000 	.word	0x40007000

08000cc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <MX_SPI1_Init+0x64>)
 8000cce:	4a18      	ldr	r2, [pc, #96]	@ (8000d30 <MX_SPI1_Init+0x68>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cd2:	4b16      	ldr	r3, [pc, #88]	@ (8000d2c <MX_SPI1_Init+0x64>)
 8000cd4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000cd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cda:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <MX_SPI1_Init+0x64>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <MX_SPI1_Init+0x64>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <MX_SPI1_Init+0x64>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <MX_SPI1_Init+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <MX_SPI1_Init+0x64>)
 8000cf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cf8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <MX_SPI1_Init+0x64>)
 8000cfc:	2210      	movs	r2, #16
 8000cfe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d00:	4b0a      	ldr	r3, [pc, #40]	@ (8000d2c <MX_SPI1_Init+0x64>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d06:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <MX_SPI1_Init+0x64>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d0c:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <MX_SPI1_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <MX_SPI1_Init+0x64>)
 8000d14:	220a      	movs	r2, #10
 8000d16:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d18:	4804      	ldr	r0, [pc, #16]	@ (8000d2c <MX_SPI1_Init+0x64>)
 8000d1a:	f002 f899 	bl	8002e50 <HAL_SPI_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d24:	f000 fb12 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000334 	.word	0x20000334
 8000d30:	40013000 	.word	0x40013000

08000d34 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d38:	4b17      	ldr	r3, [pc, #92]	@ (8000d98 <MX_SPI2_Init+0x64>)
 8000d3a:	4a18      	ldr	r2, [pc, #96]	@ (8000d9c <MX_SPI2_Init+0x68>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d3e:	4b16      	ldr	r3, [pc, #88]	@ (8000d98 <MX_SPI2_Init+0x64>)
 8000d40:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d46:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <MX_SPI2_Init+0x64>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <MX_SPI2_Init+0x64>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d52:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <MX_SPI2_Init+0x64>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <MX_SPI2_Init+0x64>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <MX_SPI2_Init+0x64>)
 8000d60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d64:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <MX_SPI2_Init+0x64>)
 8000d68:	2208      	movs	r2, #8
 8000d6a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d98 <MX_SPI2_Init+0x64>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d72:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <MX_SPI2_Init+0x64>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d78:	4b07      	ldr	r3, [pc, #28]	@ (8000d98 <MX_SPI2_Init+0x64>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <MX_SPI2_Init+0x64>)
 8000d80:	220a      	movs	r2, #10
 8000d82:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d84:	4804      	ldr	r0, [pc, #16]	@ (8000d98 <MX_SPI2_Init+0x64>)
 8000d86:	f002 f863 	bl	8002e50 <HAL_SPI_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d90:	f000 fadc 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	2000038c 	.word	0x2000038c
 8000d9c:	40003800 	.word	0x40003800

08000da0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	@ 0x28
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da6:	f107 0320 	add.w	r3, r7, #32
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]
 8000dbe:	615a      	str	r2, [r3, #20]
 8000dc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dc2:	4b33      	ldr	r3, [pc, #204]	@ (8000e90 <MX_TIM2_Init+0xf0>)
 8000dc4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dca:	4b31      	ldr	r3, [pc, #196]	@ (8000e90 <MX_TIM2_Init+0xf0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd0:	4b2f      	ldr	r3, [pc, #188]	@ (8000e90 <MX_TIM2_Init+0xf0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000dd6:	4b2e      	ldr	r3, [pc, #184]	@ (8000e90 <MX_TIM2_Init+0xf0>)
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ddc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dde:	4b2c      	ldr	r3, [pc, #176]	@ (8000e90 <MX_TIM2_Init+0xf0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e90 <MX_TIM2_Init+0xf0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dea:	4829      	ldr	r0, [pc, #164]	@ (8000e90 <MX_TIM2_Init+0xf0>)
 8000dec:	f002 feb4 	bl	8003b58 <HAL_TIM_PWM_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000df6:	f000 faa9 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e02:	f107 0320 	add.w	r3, r7, #32
 8000e06:	4619      	mov	r1, r3
 8000e08:	4821      	ldr	r0, [pc, #132]	@ (8000e90 <MX_TIM2_Init+0xf0>)
 8000e0a:	f003 fd19 	bl	8004840 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000e14:	f000 fa9a 	bl	800134c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e18:	2360      	movs	r3, #96	@ 0x60
 8000e1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4818      	ldr	r0, [pc, #96]	@ (8000e90 <MX_TIM2_Init+0xf0>)
 8000e30:	f003 f882 	bl	8003f38 <HAL_TIM_PWM_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000e3a:	f000 fa87 	bl	800134c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2204      	movs	r2, #4
 8000e42:	4619      	mov	r1, r3
 8000e44:	4812      	ldr	r0, [pc, #72]	@ (8000e90 <MX_TIM2_Init+0xf0>)
 8000e46:	f003 f877 	bl	8003f38 <HAL_TIM_PWM_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000e50:	f000 fa7c 	bl	800134c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2208      	movs	r2, #8
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480d      	ldr	r0, [pc, #52]	@ (8000e90 <MX_TIM2_Init+0xf0>)
 8000e5c:	f003 f86c 	bl	8003f38 <HAL_TIM_PWM_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000e66:	f000 fa71 	bl	800134c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	220c      	movs	r2, #12
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4807      	ldr	r0, [pc, #28]	@ (8000e90 <MX_TIM2_Init+0xf0>)
 8000e72:	f003 f861 	bl	8003f38 <HAL_TIM_PWM_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000e7c:	f000 fa66 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e80:	4803      	ldr	r0, [pc, #12]	@ (8000e90 <MX_TIM2_Init+0xf0>)
 8000e82:	f000 feaf 	bl	8001be4 <HAL_TIM_MspPostInit>

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	@ 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200003e4 	.word	0x200003e4

08000e94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <MX_TIM3_Init+0x94>)
 8000eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f2c <MX_TIM3_Init+0x98>)
 8000eb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <MX_TIM3_Init+0x94>)
 8000eb8:	2253      	movs	r2, #83	@ 0x53
 8000eba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <MX_TIM3_Init+0x94>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000ec2:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <MX_TIM3_Init+0x94>)
 8000ec4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ec8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eca:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <MX_TIM3_Init+0x94>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <MX_TIM3_Init+0x94>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ed6:	4814      	ldr	r0, [pc, #80]	@ (8000f28 <MX_TIM3_Init+0x94>)
 8000ed8:	f002 fd8c 	bl	80039f4 <HAL_TIM_Base_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000ee2:	f000 fa33 	bl	800134c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eec:	f107 0308 	add.w	r3, r7, #8
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480d      	ldr	r0, [pc, #52]	@ (8000f28 <MX_TIM3_Init+0x94>)
 8000ef4:	f003 f8e2 	bl	80040bc <HAL_TIM_ConfigClockSource>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000efe:	f000 fa25 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4806      	ldr	r0, [pc, #24]	@ (8000f28 <MX_TIM3_Init+0x94>)
 8000f10:	f003 fc96 	bl	8004840 <HAL_TIMEx_MasterConfigSynchronization>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f1a:	f000 fa17 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000042c 	.word	0x2000042c
 8000f2c:	40000400 	.word	0x40000400

08000f30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <MX_USART1_UART_Init+0x50>)
 8000f38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	@ (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f54:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f56:	220c      	movs	r2, #12
 8000f58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f60:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f68:	f003 fcec 	bl	8004944 <HAL_UART_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f72:	f000 f9eb 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000474 	.word	0x20000474
 8000f80:	40011000 	.word	0x40011000

08000f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	@ 0x28
 8000f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b40      	ldr	r3, [pc, #256]	@ (80010a0 <MX_GPIO_Init+0x11c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a3f      	ldr	r2, [pc, #252]	@ (80010a0 <MX_GPIO_Init+0x11c>)
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000faa:	4b3d      	ldr	r3, [pc, #244]	@ (80010a0 <MX_GPIO_Init+0x11c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f003 0304 	and.w	r3, r3, #4
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b39      	ldr	r3, [pc, #228]	@ (80010a0 <MX_GPIO_Init+0x11c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a38      	ldr	r2, [pc, #224]	@ (80010a0 <MX_GPIO_Init+0x11c>)
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b36      	ldr	r3, [pc, #216]	@ (80010a0 <MX_GPIO_Init+0x11c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	4b32      	ldr	r3, [pc, #200]	@ (80010a0 <MX_GPIO_Init+0x11c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a31      	ldr	r2, [pc, #196]	@ (80010a0 <MX_GPIO_Init+0x11c>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80010a0 <MX_GPIO_Init+0x11c>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b2b      	ldr	r3, [pc, #172]	@ (80010a0 <MX_GPIO_Init+0x11c>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a2a      	ldr	r2, [pc, #168]	@ (80010a0 <MX_GPIO_Init+0x11c>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b28      	ldr	r3, [pc, #160]	@ (80010a0 <MX_GPIO_Init+0x11c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001010:	4824      	ldr	r0, [pc, #144]	@ (80010a4 <MX_GPIO_Init+0x120>)
 8001012:	f001 fa5f 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	2110      	movs	r1, #16
 800101a:	4823      	ldr	r0, [pc, #140]	@ (80010a8 <MX_GPIO_Init+0x124>)
 800101c:	f001 fa5a 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|ICM_CS_Pin, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	2105      	movs	r1, #5
 8001024:	4821      	ldr	r0, [pc, #132]	@ (80010ac <MX_GPIO_Init+0x128>)
 8001026:	f001 fa55 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800102a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800102e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	4818      	ldr	r0, [pc, #96]	@ (80010a4 <MX_GPIO_Init+0x120>)
 8001044:	f001 f8aa 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CS_Pin */
  GPIO_InitStruct.Pin = NRF_CS_Pin;
 8001048:	2310      	movs	r3, #16
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CS_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4812      	ldr	r0, [pc, #72]	@ (80010a8 <MX_GPIO_Init+0x124>)
 8001060:	f001 f89c 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin ICM_CS_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|ICM_CS_Pin;
 8001064:	2305      	movs	r3, #5
 8001066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	2301      	movs	r3, #1
 800106a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4619      	mov	r1, r3
 800107a:	480c      	ldr	r0, [pc, #48]	@ (80010ac <MX_GPIO_Init+0x128>)
 800107c:	f001 f88e 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8001080:	2302      	movs	r3, #2
 8001082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001084:	2300      	movs	r3, #0
 8001086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	4806      	ldr	r0, [pc, #24]	@ (80010ac <MX_GPIO_Init+0x128>)
 8001094:	f001 f882 	bl	800219c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001098:	bf00      	nop
 800109a:	3728      	adds	r7, #40	@ 0x28
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020800 	.word	0x40020800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400

080010b0 <ESC_Task>:

/* USER CODE BEGIN 4 */
void ESC_Task(void *argument)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

	while(1)
	{
			if(timer3_flag==1)
 80010b8:	4b70      	ldr	r3, [pc, #448]	@ (800127c <ESC_Task+0x1cc>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	f040 80d9 	bne.w	8001274 <ESC_Task+0x1c4>
			{
				Calculate_Reference(&calculation, &control);
 80010c2:	496f      	ldr	r1, [pc, #444]	@ (8001280 <ESC_Task+0x1d0>)
 80010c4:	486f      	ldr	r0, [pc, #444]	@ (8001284 <ESC_Task+0x1d4>)
 80010c6:	f7ff fa71 	bl	80005ac <Calculate_Reference>
				pidUpdate(&pitch, calculation.picth_measurement, calculation.picth_reference);
 80010ca:	4b6e      	ldr	r3, [pc, #440]	@ (8001284 <ESC_Task+0x1d4>)
 80010cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80010d0:	4b6c      	ldr	r3, [pc, #432]	@ (8001284 <ESC_Task+0x1d4>)
 80010d2:	ed93 7a00 	vldr	s14, [r3]
 80010d6:	eef0 0a47 	vmov.f32	s1, s14
 80010da:	eeb0 0a67 	vmov.f32	s0, s15
 80010de:	486a      	ldr	r0, [pc, #424]	@ (8001288 <ESC_Task+0x1d8>)
 80010e0:	f7ff fb88 	bl	80007f4 <pidUpdate>
				/*
				 * get picth rate measuremet
				 */
				calculation.picth_rate_reference=pitch.u;
 80010e4:	4b68      	ldr	r3, [pc, #416]	@ (8001288 <ESC_Task+0x1d8>)
 80010e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e8:	4a66      	ldr	r2, [pc, #408]	@ (8001284 <ESC_Task+0x1d4>)
 80010ea:	6193      	str	r3, [r2, #24]
				pidUpdate(&pitch_rate, calculation.picth_rate_measurement, calculation.picth_rate_reference);
 80010ec:	4b65      	ldr	r3, [pc, #404]	@ (8001284 <ESC_Task+0x1d4>)
 80010ee:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80010f2:	4b64      	ldr	r3, [pc, #400]	@ (8001284 <ESC_Task+0x1d4>)
 80010f4:	ed93 7a06 	vldr	s14, [r3, #24]
 80010f8:	eef0 0a47 	vmov.f32	s1, s14
 80010fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001100:	4862      	ldr	r0, [pc, #392]	@ (800128c <ESC_Task+0x1dc>)
 8001102:	f7ff fb77 	bl	80007f4 <pidUpdate>

				/*
				 * get roll measurement
				 */
				pidUpdate(&roll, calculation.roll_measurement, calculation.roll_reference);
 8001106:	4b5f      	ldr	r3, [pc, #380]	@ (8001284 <ESC_Task+0x1d4>)
 8001108:	edd3 7a04 	vldr	s15, [r3, #16]
 800110c:	4b5d      	ldr	r3, [pc, #372]	@ (8001284 <ESC_Task+0x1d4>)
 800110e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001112:	eef0 0a47 	vmov.f32	s1, s14
 8001116:	eeb0 0a67 	vmov.f32	s0, s15
 800111a:	485d      	ldr	r0, [pc, #372]	@ (8001290 <ESC_Task+0x1e0>)
 800111c:	f7ff fb6a 	bl	80007f4 <pidUpdate>
				/*
				 * get roll rate measurement
				 */
				calculation.roll_rate_reference=roll.u;
 8001120:	4b5b      	ldr	r3, [pc, #364]	@ (8001290 <ESC_Task+0x1e0>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001124:	4a57      	ldr	r2, [pc, #348]	@ (8001284 <ESC_Task+0x1d4>)
 8001126:	61d3      	str	r3, [r2, #28]
				pidUpdate(&roll_rate, calculation.roll_rate_measurement, calculation.roll_rate_reference);
 8001128:	4b56      	ldr	r3, [pc, #344]	@ (8001284 <ESC_Task+0x1d4>)
 800112a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800112e:	4b55      	ldr	r3, [pc, #340]	@ (8001284 <ESC_Task+0x1d4>)
 8001130:	ed93 7a07 	vldr	s14, [r3, #28]
 8001134:	eef0 0a47 	vmov.f32	s1, s14
 8001138:	eeb0 0a67 	vmov.f32	s0, s15
 800113c:	4855      	ldr	r0, [pc, #340]	@ (8001294 <ESC_Task+0x1e4>)
 800113e:	f7ff fb59 	bl	80007f4 <pidUpdate>
				/*
				 * get yaw measurement
				 */
				pidUpdate(&yaw, calculation.yaw_measurement, calculation.yaw_reference);
 8001142:	4b50      	ldr	r3, [pc, #320]	@ (8001284 <ESC_Task+0x1d4>)
 8001144:	edd3 7a05 	vldr	s15, [r3, #20]
 8001148:	4b4e      	ldr	r3, [pc, #312]	@ (8001284 <ESC_Task+0x1d4>)
 800114a:	ed93 7a02 	vldr	s14, [r3, #8]
 800114e:	eef0 0a47 	vmov.f32	s1, s14
 8001152:	eeb0 0a67 	vmov.f32	s0, s15
 8001156:	4850      	ldr	r0, [pc, #320]	@ (8001298 <ESC_Task+0x1e8>)
 8001158:	f7ff fb4c 	bl	80007f4 <pidUpdate>
				/*
				* get yaw measurement
				*/
				calculation.yaw_rate_reference=yaw.u;
 800115c:	4b4e      	ldr	r3, [pc, #312]	@ (8001298 <ESC_Task+0x1e8>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001160:	4a48      	ldr	r2, [pc, #288]	@ (8001284 <ESC_Task+0x1d4>)
 8001162:	6213      	str	r3, [r2, #32]
				pidUpdate(&yaw_rate, calculation.yaw_rate_measurement, calculation.yaw_rate_reference);
 8001164:	4b47      	ldr	r3, [pc, #284]	@ (8001284 <ESC_Task+0x1d4>)
 8001166:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800116a:	4b46      	ldr	r3, [pc, #280]	@ (8001284 <ESC_Task+0x1d4>)
 800116c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001170:	eef0 0a47 	vmov.f32	s1, s14
 8001174:	eeb0 0a67 	vmov.f32	s0, s15
 8001178:	4848      	ldr	r0, [pc, #288]	@ (800129c <ESC_Task+0x1ec>)
 800117a:	f7ff fb3b 	bl	80007f4 <pidUpdate>
				/*
				* get high measurement and high reference
				*/
				pidUpdate(&high, calculation.high_measurement, calculation.high_reference);
 800117e:	4b41      	ldr	r3, [pc, #260]	@ (8001284 <ESC_Task+0x1d4>)
 8001180:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001184:	4b3f      	ldr	r3, [pc, #252]	@ (8001284 <ESC_Task+0x1d4>)
 8001186:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800118a:	eef0 0a47 	vmov.f32	s1, s14
 800118e:	eeb0 0a67 	vmov.f32	s0, s15
 8001192:	4843      	ldr	r0, [pc, #268]	@ (80012a0 <ESC_Task+0x1f0>)
 8001194:	f7ff fb2e 	bl	80007f4 <pidUpdate>

				speed.speed1=-pitch_rate.u+roll_rate.u-yaw_rate.u+high.u;
 8001198:	4b3e      	ldr	r3, [pc, #248]	@ (8001294 <ESC_Task+0x1e4>)
 800119a:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800119e:	4b3b      	ldr	r3, [pc, #236]	@ (800128c <ESC_Task+0x1dc>)
 80011a0:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80011a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011a8:	4b3c      	ldr	r3, [pc, #240]	@ (800129c <ESC_Task+0x1ec>)
 80011aa:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80011ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011b2:	4b3b      	ldr	r3, [pc, #236]	@ (80012a0 <ESC_Task+0x1f0>)
 80011b4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80011b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011c0:	ee17 2a90 	vmov	r2, s15
 80011c4:	4b37      	ldr	r3, [pc, #220]	@ (80012a4 <ESC_Task+0x1f4>)
 80011c6:	601a      	str	r2, [r3, #0]
				speed.speed2=+pitch_rate.u+roll_rate.u+yaw_rate.u+high.u;
 80011c8:	4b30      	ldr	r3, [pc, #192]	@ (800128c <ESC_Task+0x1dc>)
 80011ca:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80011ce:	4b31      	ldr	r3, [pc, #196]	@ (8001294 <ESC_Task+0x1e4>)
 80011d0:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80011d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d8:	4b30      	ldr	r3, [pc, #192]	@ (800129c <ESC_Task+0x1ec>)
 80011da:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80011de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011e2:	4b2f      	ldr	r3, [pc, #188]	@ (80012a0 <ESC_Task+0x1f0>)
 80011e4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011f0:	ee17 2a90 	vmov	r2, s15
 80011f4:	4b2b      	ldr	r3, [pc, #172]	@ (80012a4 <ESC_Task+0x1f4>)
 80011f6:	605a      	str	r2, [r3, #4]
				speed.speed3=+pitch_rate.u-roll_rate.u-yaw_rate.u+high.u;
 80011f8:	4b24      	ldr	r3, [pc, #144]	@ (800128c <ESC_Task+0x1dc>)
 80011fa:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80011fe:	4b25      	ldr	r3, [pc, #148]	@ (8001294 <ESC_Task+0x1e4>)
 8001200:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001204:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001208:	4b24      	ldr	r3, [pc, #144]	@ (800129c <ESC_Task+0x1ec>)
 800120a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800120e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001212:	4b23      	ldr	r3, [pc, #140]	@ (80012a0 <ESC_Task+0x1f0>)
 8001214:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001220:	ee17 2a90 	vmov	r2, s15
 8001224:	4b1f      	ldr	r3, [pc, #124]	@ (80012a4 <ESC_Task+0x1f4>)
 8001226:	609a      	str	r2, [r3, #8]
				speed.speed4=-pitch_rate.u-roll_rate.u-yaw_rate.u+high.u;
 8001228:	4b18      	ldr	r3, [pc, #96]	@ (800128c <ESC_Task+0x1dc>)
 800122a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800122e:	eeb1 7a67 	vneg.f32	s14, s15
 8001232:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <ESC_Task+0x1e4>)
 8001234:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001238:	ee37 7a67 	vsub.f32	s14, s14, s15
 800123c:	4b17      	ldr	r3, [pc, #92]	@ (800129c <ESC_Task+0x1ec>)
 800123e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001242:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001246:	4b16      	ldr	r3, [pc, #88]	@ (80012a0 <ESC_Task+0x1f0>)
 8001248:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800124c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001254:	ee17 2a90 	vmov	r2, s15
 8001258:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <ESC_Task+0x1f4>)
 800125a:	60da      	str	r2, [r3, #12]
				Control4Motor(&htim2, &speed);
 800125c:	4911      	ldr	r1, [pc, #68]	@ (80012a4 <ESC_Task+0x1f4>)
 800125e:	4812      	ldr	r0, [pc, #72]	@ (80012a8 <ESC_Task+0x1f8>)
 8001260:	f7ff fa4a 	bl	80006f8 <Control4Motor>
				a++;
 8001264:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <ESC_Task+0x1fc>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	4a10      	ldr	r2, [pc, #64]	@ (80012ac <ESC_Task+0x1fc>)
 800126c:	6013      	str	r3, [r2, #0]
				timer3_flag=0;
 800126e:	4b03      	ldr	r3, [pc, #12]	@ (800127c <ESC_Task+0x1cc>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
			}
			vTaskDelay(pdMS_TO_TICKS(1));
 8001274:	2001      	movs	r0, #1
 8001276:	f004 f90b 	bl	8005490 <vTaskDelay>
			if(timer3_flag==1)
 800127a:	e71d      	b.n	80010b8 <ESC_Task+0x8>
 800127c:	20000500 	.word	0x20000500
 8001280:	20000798 	.word	0x20000798
 8001284:	20000760 	.word	0x20000760
 8001288:	20000514 	.word	0x20000514
 800128c:	20000568 	.word	0x20000568
 8001290:	200005bc 	.word	0x200005bc
 8001294:	20000610 	.word	0x20000610
 8001298:	20000664 	.word	0x20000664
 800129c:	200006b8 	.word	0x200006b8
 80012a0:	2000070c 	.word	0x2000070c
 80012a4:	20000504 	.word	0x20000504
 80012a8:	200003e4 	.word	0x200003e4
 80012ac:	200007b8 	.word	0x200007b8

080012b0 <NRF_Task>:

	}
}

void NRF_Task(void *argument)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	int i=0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		sprintf((char*)spi_tx,"ngu+%d",i);
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	4907      	ldr	r1, [pc, #28]	@ (80012dc <NRF_Task+0x2c>)
 80012c0:	4807      	ldr	r0, [pc, #28]	@ (80012e0 <NRF_Task+0x30>)
 80012c2:	f005 f88f 	bl	80063e4 <siprintf>
		Two_Way_Commuination_RTOS(&nrf1, spi_tx, spi_rx);
 80012c6:	4a07      	ldr	r2, [pc, #28]	@ (80012e4 <NRF_Task+0x34>)
 80012c8:	4905      	ldr	r1, [pc, #20]	@ (80012e0 <NRF_Task+0x30>)
 80012ca:	4807      	ldr	r0, [pc, #28]	@ (80012e8 <NRF_Task+0x38>)
 80012cc:	f000 fa1a 	bl	8001704 <Two_Way_Commuination_RTOS>
		i++;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	3301      	adds	r3, #1
 80012d4:	60fb      	str	r3, [r7, #12]
		sprintf((char*)spi_tx,"ngu+%d",i);
 80012d6:	bf00      	nop
 80012d8:	e7f0      	b.n	80012bc <NRF_Task+0xc>
 80012da:	bf00      	nop
 80012dc:	08006e28 	.word	0x08006e28
 80012e0:	200004e0 	.word	0x200004e0
 80012e4:	200004c0 	.word	0x200004c0
 80012e8:	20000000 	.word	0x20000000

080012ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80012f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012f8:	4804      	ldr	r0, [pc, #16]	@ (800130c <StartDefaultTask+0x20>)
 80012fa:	f001 f904 	bl	8002506 <HAL_GPIO_TogglePin>
    osDelay(500);
 80012fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001302:	f003 fe4e 	bl	8004fa2 <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001306:	bf00      	nop
 8001308:	e7f4      	b.n	80012f4 <StartDefaultTask+0x8>
 800130a:	bf00      	nop
 800130c:	40020800 	.word	0x40020800

08001310 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
//	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a08      	ldr	r2, [pc, #32]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001322:	f000 fe15 	bl	8001f50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance==TIM3)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a06      	ldr	r2, [pc, #24]	@ (8001344 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d102      	bne.n	8001336 <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	  timer3_flag=1;
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
//	  xSemaphoreGiveFromISR(TimerISR_Semaphore,&xHigherPriorityTaskWoken);
  }
//  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
  /* USER CODE END Callback 1 */
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40010000 	.word	0x40010000
 8001344:	40000400 	.word	0x40000400
 8001348:	20000500 	.word	0x20000500

0800134c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001350:	b672      	cpsid	i
}
 8001352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <Error_Handler+0x8>

08001358 <Chip_Select>:
#include "main.h"

static NRF_MODE nrfmode;

void Chip_Select(NRF_HandleTypeDef *nrf)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CS_GPIO, nrf->CS_PIN, 0);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	899b      	ldrh	r3, [r3, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	4619      	mov	r1, r3
 800136c:	f001 f8b2 	bl	80024d4 <HAL_GPIO_WritePin>
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <Chip_Deselect>:

void Chip_Deselect(NRF_HandleTypeDef *nrf)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CS_GPIO, nrf->CS_PIN, 1);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6818      	ldr	r0, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	899b      	ldrh	r3, [r3, #12]
 8001388:	2201      	movs	r2, #1
 800138a:	4619      	mov	r1, r3
 800138c:	f001 f8a2 	bl	80024d4 <HAL_GPIO_WritePin>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <Set_CE_High>:

void Set_CE_High(NRF_HandleTypeDef *nrf)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CE_GPIO, nrf->CE_PIN, 1);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6858      	ldr	r0, [r3, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	89db      	ldrh	r3, [r3, #14]
 80013a8:	2201      	movs	r2, #1
 80013aa:	4619      	mov	r1, r3
 80013ac:	f001 f892 	bl	80024d4 <HAL_GPIO_WritePin>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <Set_CE_Low>:

void Set_CE_Low(NRF_HandleTypeDef *nrf)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CE_GPIO, nrf->CE_PIN, 0);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6858      	ldr	r0, [r3, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	89db      	ldrh	r3, [r3, #14]
 80013c8:	2200      	movs	r2, #0
 80013ca:	4619      	mov	r1, r3
 80013cc:	f001 f882 	bl	80024d4 <HAL_GPIO_WritePin>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <WaitForIRQ>:

void WaitForIRQ(NRF_HandleTypeDef *nrf)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	while (HAL_GPIO_ReadPin(nrf->IRQ_GPIO, nrf->IRQ_PIN) == 1)
 80013e0:	bf00      	nop
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	8a1b      	ldrh	r3, [r3, #16]
 80013ea:	4619      	mov	r1, r3
 80013ec:	4610      	mov	r0, r2
 80013ee:	f001 f859 	bl	80024a4 <HAL_GPIO_ReadPin>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d0f4      	beq.n	80013e2 <WaitForIRQ+0xa>
		;
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <nRF_WriteRegister>:

void nRF_WriteRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t *data, int size)
{
 8001402:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001406:	b089      	sub	sp, #36	@ 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	460b      	mov	r3, r1
 8001412:	72fb      	strb	r3, [r7, #11]
 8001414:	466b      	mov	r3, sp
 8001416:	461e      	mov	r6, r3
	uint8_t buff[size + 1];
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	1c59      	adds	r1, r3, #1
 800141c:	1e4b      	subs	r3, r1, #1
 800141e:	61bb      	str	r3, [r7, #24]
 8001420:	460a      	mov	r2, r1
 8001422:	2300      	movs	r3, #0
 8001424:	4690      	mov	r8, r2
 8001426:	4699      	mov	r9, r3
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001434:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001438:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800143c:	460a      	mov	r2, r1
 800143e:	2300      	movs	r3, #0
 8001440:	4614      	mov	r4, r2
 8001442:	461d      	mov	r5, r3
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	f04f 0300 	mov.w	r3, #0
 800144c:	00eb      	lsls	r3, r5, #3
 800144e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001452:	00e2      	lsls	r2, r4, #3
 8001454:	460b      	mov	r3, r1
 8001456:	3307      	adds	r3, #7
 8001458:	08db      	lsrs	r3, r3, #3
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	ebad 0d03 	sub.w	sp, sp, r3
 8001460:	466b      	mov	r3, sp
 8001462:	3300      	adds	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
	buff[0] = reg | (1 << 5);
 8001466:	7afb      	ldrb	r3, [r7, #11]
 8001468:	f043 0320 	orr.w	r3, r3, #32
 800146c:	b2da      	uxtb	r2, r3
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++)
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
 8001476:	e00a      	b.n	800148e <nRF_WriteRegister+0x8c>
	{
		buff[i + 1] = data[i];
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	441a      	add	r2, r3
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3301      	adds	r3, #1
 8001482:	7811      	ldrb	r1, [r2, #0]
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < size; i++)
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	3301      	adds	r3, #1
 800148c:	61fb      	str	r3, [r7, #28]
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	429a      	cmp	r2, r3
 8001494:	dbf0      	blt.n	8001478 <nRF_WriteRegister+0x76>
	}
	Chip_Select(nrf);
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f7ff ff5e 	bl	8001358 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, buff, (uint16_t)size + 1, NRF_SPI_TIMEOUT);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6958      	ldr	r0, [r3, #20]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	3301      	adds	r3, #1
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	2364      	movs	r3, #100	@ 0x64
 80014aa:	6979      	ldr	r1, [r7, #20]
 80014ac:	f001 fd59 	bl	8002f62 <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f7ff ff61 	bl	8001378 <Chip_Deselect>
 80014b6:	46b5      	mov	sp, r6
}
 80014b8:	bf00      	nop
 80014ba:	3724      	adds	r7, #36	@ 0x24
 80014bc:	46bd      	mov	sp, r7
 80014be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080014c2 <nRF_WriteOneRegister>:

void nRF_WriteOneRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t data)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b084      	sub	sp, #16
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	460b      	mov	r3, r1
 80014cc:	70fb      	strb	r3, [r7, #3]
 80014ce:	4613      	mov	r3, r2
 80014d0:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2];
	buff[0] = reg | (1 << 5);
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	f043 0320 	orr.w	r3, r3, #32
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	733b      	strb	r3, [r7, #12]
	buff[1] = data;
 80014dc:	78bb      	ldrb	r3, [r7, #2]
 80014de:	737b      	strb	r3, [r7, #13]
	Chip_Select(nrf);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff39 	bl	8001358 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, buff, 2, NRF_SPI_TIMEOUT);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6958      	ldr	r0, [r3, #20]
 80014ea:	f107 010c 	add.w	r1, r7, #12
 80014ee:	2364      	movs	r3, #100	@ 0x64
 80014f0:	2202      	movs	r2, #2
 80014f2:	f001 fd36 	bl	8002f62 <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ff3e 	bl	8001378 <Chip_Deselect>
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <nRF_ReadOneRegister>:
	HAL_SPI_Receive(nrf->hspi, receive_data, size, NRF_SPI_TIMEOUT * 10);
	Chip_Deselect(nrf);
}

void nRF_ReadOneRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t *receive_data)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	460b      	mov	r3, r1
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	72fb      	strb	r3, [r7, #11]

	uint8_t buff = reg;
 8001512:	7afb      	ldrb	r3, [r7, #11]
 8001514:	75fb      	strb	r3, [r7, #23]
	Chip_Select(nrf);
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f7ff ff1e 	bl	8001358 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6958      	ldr	r0, [r3, #20]
 8001520:	f107 0117 	add.w	r1, r7, #23
 8001524:	2364      	movs	r3, #100	@ 0x64
 8001526:	2201      	movs	r2, #1
 8001528:	f001 fd1b 	bl	8002f62 <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->hspi, receive_data, 1, NRF_SPI_TIMEOUT);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6958      	ldr	r0, [r3, #20]
 8001530:	2364      	movs	r3, #100	@ 0x64
 8001532:	2201      	movs	r2, #1
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	f001 fe58 	bl	80031ea <HAL_SPI_Receive>
	Chip_Deselect(nrf);
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f7ff ff1c 	bl	8001378 <Chip_Deselect>
}
 8001540:	bf00      	nop
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <nRF_SendCmd>:
void nRF_SendCmd(NRF_HandleTypeDef *nrf, uint8_t cmd)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	70fb      	strb	r3, [r7, #3]

	uint8_t buff = cmd;
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	73fb      	strb	r3, [r7, #15]
	Chip_Select(nrf);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff fefd 	bl	8001358 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6958      	ldr	r0, [r3, #20]
 8001562:	f107 010f 	add.w	r1, r7, #15
 8001566:	2364      	movs	r3, #100	@ 0x64
 8001568:	2201      	movs	r2, #1
 800156a:	f001 fcfa 	bl	8002f62 <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ff02 	bl	8001378 <Chip_Deselect>
}
 8001574:	bf00      	nop
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <nRF_GetStatus>:

uint8_t nRF_GetStatus(NRF_HandleTypeDef *nrf)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

	uint8_t buff = STATUS;
 8001584:	2307      	movs	r3, #7
 8001586:	73fb      	strb	r3, [r7, #15]
	uint8_t rx_data = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	73bb      	strb	r3, [r7, #14]
	Chip_Select(nrf);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff fee3 	bl	8001358 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6958      	ldr	r0, [r3, #20]
 8001596:	f107 010f 	add.w	r1, r7, #15
 800159a:	2364      	movs	r3, #100	@ 0x64
 800159c:	2201      	movs	r2, #1
 800159e:	f001 fce0 	bl	8002f62 <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->hspi, &rx_data, 1, NRF_SPI_TIMEOUT * 10);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6958      	ldr	r0, [r3, #20]
 80015a6:	f107 010e 	add.w	r1, r7, #14
 80015aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ae:	2201      	movs	r2, #1
 80015b0:	f001 fe1b 	bl	80031ea <HAL_SPI_Receive>
	Chip_Deselect(nrf);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fedf 	bl	8001378 <Chip_Deselect>
	return rx_data;
 80015ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <nRF_TX_Payload>:

void nRF_TX_Payload(NRF_HandleTypeDef *nrf, uint8_t *data, uint16_t size)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	4613      	mov	r3, r2
 80015d0:	80fb      	strh	r3, [r7, #6]
	Chip_Select(nrf);
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f7ff fec0 	bl	8001358 <Chip_Select>
	uint8_t buff = W_TX_PAYLOAD;
 80015d8:	23a0      	movs	r3, #160	@ 0xa0
 80015da:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6958      	ldr	r0, [r3, #20]
 80015e0:	f107 0117 	add.w	r1, r7, #23
 80015e4:	2364      	movs	r3, #100	@ 0x64
 80015e6:	2201      	movs	r2, #1
 80015e8:	f001 fcbb 	bl	8002f62 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf->hspi, data, size, NRF_SPI_TIMEOUT);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6958      	ldr	r0, [r3, #20]
 80015f0:	88fa      	ldrh	r2, [r7, #6]
 80015f2:	2364      	movs	r3, #100	@ 0x64
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	f001 fcb4 	bl	8002f62 <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f7ff febc 	bl	8001378 <Chip_Deselect>
}
 8001600:	bf00      	nop
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <nRF_RX_Payload>:

void nRF_RX_Payload(NRF_HandleTypeDef *nrf, uint8_t *rx_data, uint16_t size)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	4613      	mov	r3, r2
 8001614:	80fb      	strh	r3, [r7, #6]
	Chip_Select(nrf);
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f7ff fe9e 	bl	8001358 <Chip_Select>
	uint8_t buff = R_RX_PAYLOAD;
 800161c:	2361      	movs	r3, #97	@ 0x61
 800161e:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6958      	ldr	r0, [r3, #20]
 8001624:	f107 0117 	add.w	r1, r7, #23
 8001628:	2364      	movs	r3, #100	@ 0x64
 800162a:	2201      	movs	r2, #1
 800162c:	f001 fc99 	bl	8002f62 <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->hspi, rx_data, size, NRF_SPI_TIMEOUT * 10);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6958      	ldr	r0, [r3, #20]
 8001634:	88fa      	ldrh	r2, [r7, #6]
 8001636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800163a:	68b9      	ldr	r1, [r7, #8]
 800163c:	f001 fdd5 	bl	80031ea <HAL_SPI_Receive>
	Chip_Deselect(nrf);
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f7ff fe99 	bl	8001378 <Chip_Deselect>
}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <Select_Rx_Mode>:
	nRF_SendCmd(nrf, FLUSH_RX);
	nrfmode = MODE_RX;
}

void Select_Rx_Mode(NRF_HandleTypeDef *nrf)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	uint8_t buff = 0x0b;
 8001658:	230b      	movs	r3, #11
 800165a:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low(nrf);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff feab 	bl	80013b8 <Set_CE_Low>
	CONFIG_REG_Write(nrf, buff);
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	4619      	mov	r1, r3
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f912 	bl	8001890 <CONFIG_REG_Write>
	Set_CE_High(nrf);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fe93 	bl	8001398 <Set_CE_High>
	HAL_Delay(2);
 8001672:	2002      	movs	r0, #2
 8001674:	f000 fc8c 	bl	8001f90 <HAL_Delay>
	nrfmode = MODE_RX;
 8001678:	4b03      	ldr	r3, [pc, #12]	@ (8001688 <Select_Rx_Mode+0x38>)
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200007bc 	.word	0x200007bc

0800168c <Select_Tx_Mode_RTOS>:
	vTaskDelay(pdMS_TO_TICKS(2));
	nrfmode = MODE_TX;
}

void Select_Tx_Mode_RTOS(NRF_HandleTypeDef *nrf)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	uint8_t buff = 0x0a;
 8001694:	230a      	movs	r3, #10
 8001696:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low(nrf);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fe8d 	bl	80013b8 <Set_CE_Low>
	CONFIG_REG_Write(nrf, buff);
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	4619      	mov	r1, r3
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 f8f4 	bl	8001890 <CONFIG_REG_Write>
	Set_CE_High(nrf);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff fe75 	bl	8001398 <Set_CE_High>
	vTaskDelay(pdMS_TO_TICKS(2));
 80016ae:	2002      	movs	r0, #2
 80016b0:	f003 feee 	bl	8005490 <vTaskDelay>
	nrfmode = MODE_TX;
 80016b4:	4b03      	ldr	r3, [pc, #12]	@ (80016c4 <Select_Tx_Mode_RTOS+0x38>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200007bc 	.word	0x200007bc

080016c8 <Select_Rx_Mode_RTOS>:
	nRF_SendCmd(nrf, FLUSH_RX);
	nrfmode = MODE_RX;
}

void Select_Rx_Mode_RTOS(NRF_HandleTypeDef *nrf)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	uint8_t buff = 0x0b;
 80016d0:	230b      	movs	r3, #11
 80016d2:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low(nrf);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fe6f 	bl	80013b8 <Set_CE_Low>
	CONFIG_REG_Write(nrf, buff);
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	4619      	mov	r1, r3
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f8d6 	bl	8001890 <CONFIG_REG_Write>
	Set_CE_High(nrf);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fe57 	bl	8001398 <Set_CE_High>
	vTaskDelay(pdMS_TO_TICKS(2));
 80016ea:	2002      	movs	r0, #2
 80016ec:	f003 fed0 	bl	8005490 <vTaskDelay>
	nrfmode = MODE_RX;
 80016f0:	4b03      	ldr	r3, [pc, #12]	@ (8001700 <Select_Rx_Mode_RTOS+0x38>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200007bc 	.word	0x200007bc

08001704 <Two_Way_Commuination_RTOS>:

void Two_Way_Commuination_RTOS(NRF_HandleTypeDef *nrf,uint8_t *tx_data,uint8_t *rx_data)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
	TX_Communication(nrf,tx_data);
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 f846 	bl	80017a4 <TX_Communication>
	Select_Rx_Mode_RTOS(nrf);
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f7ff ffd5 	bl	80016c8 <Select_Rx_Mode_RTOS>
	vTaskDelay(pdMS_TO_TICKS(50));
 800171e:	2032      	movs	r0, #50	@ 0x32
 8001720:	f003 feb6 	bl	8005490 <vTaskDelay>
	RX_Communication(nrf,rx_data);
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f000 f882 	bl	8001830 <RX_Communication>
	Select_Tx_Mode_RTOS(nrf);
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f7ff ffad 	bl	800168c <Select_Tx_Mode_RTOS>
	vTaskDelay(pdMS_TO_TICKS(10));
 8001732:	200a      	movs	r0, #10
 8001734:	f003 feac 	bl	8005490 <vTaskDelay>
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <Two_Way_Commuination_Pipe0_Config>:

#endif

void Two_Way_Commuination_Pipe0_Config(NRF_HandleTypeDef *nrf, uint64_t tx_addr, uint64_t rx_addr)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	e9c7 2300 	strd	r2, r3, [r7]
	Set_CE_Low(nrf);
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f7ff fe33 	bl	80013b8 <Set_CE_Low>
	RX_PW_P_NUM_Number_Of_Bytes(nrf, 0, 8);
 8001752:	2208      	movs	r2, #8
 8001754:	2100      	movs	r1, #0
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 f91a 	bl	8001990 <RX_PW_P_NUM_Number_Of_Bytes>
	TX_ADDR_Write(nrf, tx_addr);
 800175c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 f8e3 	bl	800192c <TX_ADDR_Write>
	RX_ADDR_P0_Write(nrf, rx_addr);
 8001766:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 f8ac 	bl	80018c8 <RX_ADDR_P0_Write>
	nRF_WriteOneRegister(nrf, EN_RXADDR, 1);
 8001770:	2201      	movs	r2, #1
 8001772:	2102      	movs	r1, #2
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f7ff fea4 	bl	80014c2 <nRF_WriteOneRegister>
	nRF_WriteOneRegister(nrf, EN_AA, 0x00);
 800177a:	2200      	movs	r2, #0
 800177c:	2101      	movs	r1, #1
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f7ff fe9f 	bl	80014c2 <nRF_WriteOneRegister>
	nRF_WriteOneRegister(nrf, RF_SETUP, 0x7);
 8001784:	2207      	movs	r2, #7
 8001786:	2106      	movs	r1, #6
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f7ff fe9a 	bl	80014c2 <nRF_WriteOneRegister>
	Set_CE_High(nrf);
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f7ff fe02 	bl	8001398 <Set_CE_High>
	HAL_Delay(2);
 8001794:	2002      	movs	r0, #2
 8001796:	f000 fbfb 	bl	8001f90 <HAL_Delay>
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <TX_Communication>:
	Set_CE_High(nrf);
	HAL_Delay(2);
}

uint8_t TX_Communication(NRF_HandleTypeDef *nrf, uint8_t *data)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
	if (nrfmode == MODE_TX)
 80017ae:	4b1f      	ldr	r3, [pc, #124]	@ (800182c <TX_Communication+0x88>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d135      	bne.n	8001822 <TX_Communication+0x7e>
	{
		nRF_TX_Payload(nrf, data, 8);
 80017b6:	2208      	movs	r2, #8
 80017b8:	6839      	ldr	r1, [r7, #0]
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff ff02 	bl	80015c4 <nRF_TX_Payload>
		Set_CE_High(nrf);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff fde9 	bl	8001398 <Set_CE_High>
		WaitForIRQ(nrf);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff fe06 	bl	80013d8 <WaitForIRQ>
		nRF_SendCmd(nrf, FLUSH_TX);
 80017cc:	21e1      	movs	r1, #225	@ 0xe1
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff feba 	bl	8001548 <nRF_SendCmd>
		uint8_t status = nRF_GetStatus(nrf);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fed1 	bl	800157c <nRF_GetStatus>
 80017da:	4603      	mov	r3, r0
 80017dc:	73fb      	strb	r3, [r7, #15]
		if ((status & (1 << MAX_RT)) != 0)
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	f003 0310 	and.w	r3, r3, #16
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00b      	beq.n	8001800 <TX_Communication+0x5c>
		{
			status |= ((1 << MAX_RT) | (1 << TX_FULL));
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	f043 0311 	orr.w	r3, r3, #17
 80017ee:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(nrf, STATUS, status);
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	461a      	mov	r2, r3
 80017f4:	2107      	movs	r1, #7
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fe63 	bl	80014c2 <nRF_WriteOneRegister>
			return STATUS_TX_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e011      	b.n	8001824 <TX_Communication+0x80>
		}
		else if ((status & (1 << 5)) != 0)
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	f003 0320 	and.w	r3, r3, #32
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00b      	beq.n	8001822 <TX_Communication+0x7e>
		{
			status |= ((1 << TX_DS) | (1 << TX_FULL));
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 8001810:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(nrf, STATUS, status);
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	461a      	mov	r2, r3
 8001816:	2107      	movs	r1, #7
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff fe52 	bl	80014c2 <nRF_WriteOneRegister>
			return STATUS_TX_OK;
 800181e:	2302      	movs	r3, #2
 8001820:	e000      	b.n	8001824 <TX_Communication+0x80>
		}
	}
	return STATUS_TX_NONDEFINE;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200007bc 	.word	0x200007bc

08001830 <RX_Communication>:

uint8_t RX_Communication(NRF_HandleTypeDef *nrf, uint8_t *rx_data)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
	if (nrfmode == MODE_RX)
 800183a:	4b14      	ldr	r3, [pc, #80]	@ (800188c <RX_Communication+0x5c>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d11e      	bne.n	8001880 <RX_Communication+0x50>
	{
		Set_CE_High(nrf);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff fda8 	bl	8001398 <Set_CE_High>
		uint8_t status = nRF_GetStatus(nrf);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff fe97 	bl	800157c <nRF_GetStatus>
 800184e:	4603      	mov	r3, r0
 8001850:	73fb      	strb	r3, [r7, #15]
		if ((status & (1 << RX_DR)) != 0)
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00b      	beq.n	8001874 <RX_Communication+0x44>
		{
			nRF_WriteOneRegister(nrf, STATUS, (1 << 6));
 800185c:	2240      	movs	r2, #64	@ 0x40
 800185e:	2107      	movs	r1, #7
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff fe2e 	bl	80014c2 <nRF_WriteOneRegister>
			nRF_RX_Payload(nrf, rx_data, 8);
 8001866:	2208      	movs	r2, #8
 8001868:	6839      	ldr	r1, [r7, #0]
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fecc 	bl	8001608 <nRF_RX_Payload>
			return STATUS_RX_OK;
 8001870:	2302      	movs	r3, #2
 8001872:	e006      	b.n	8001882 <RX_Communication+0x52>
		}
		nRF_SendCmd(nrf, FLUSH_RX);
 8001874:	21e2      	movs	r1, #226	@ 0xe2
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fe66 	bl	8001548 <nRF_SendCmd>
		return STATUS_RX_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <RX_Communication+0x52>
	}
	return STATUS_RX_NONEDEFINE;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200007bc 	.word	0x200007bc

08001890 <CONFIG_REG_Write>:
}



void CONFIG_REG_Write(NRF_HandleTypeDef *nrf, uint8_t data)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	70fb      	strb	r3, [r7, #3]
	uint8_t read_reg;
	do
	{
		nRF_WriteOneRegister(nrf, CONFIG, data);
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	461a      	mov	r2, r3
 80018a0:	2100      	movs	r1, #0
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff fe0d 	bl	80014c2 <nRF_WriteOneRegister>
		nRF_ReadOneRegister(nrf, CONFIG, &read_reg);
 80018a8:	f107 030f 	add.w	r3, r7, #15
 80018ac:	461a      	mov	r2, r3
 80018ae:	2100      	movs	r1, #0
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff fe27 	bl	8001504 <nRF_ReadOneRegister>
	} while (read_reg != data);
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	78fa      	ldrb	r2, [r7, #3]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d1ee      	bne.n	800189c <CONFIG_REG_Write+0xc>
}
 80018be:	bf00      	nop
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <RX_ADDR_P0_Write>:
{
	nRF_WriteOneRegister(nrf, EN_AA, pipe & 0x3F);
}

void RX_ADDR_P0_Write(NRF_HandleTypeDef *nrf, uint64_t data)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	@ 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t buff[5];
	uint64_t temp = data;
 80018d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018d8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	e016      	b.n	8001910 <RX_ADDR_P0_Write+0x48>
	{
		buff[i] = (uint8_t)((temp) & 0xff);
 80018e2:	f897 1020 	ldrb.w	r1, [r7, #32]
 80018e6:	f107 0214 	add.w	r2, r7, #20
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	4413      	add	r3, r2
 80018ee:	460a      	mov	r2, r1
 80018f0:	701a      	strb	r2, [r3, #0]
		temp = temp >> 8;
 80018f2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	0a02      	lsrs	r2, r0, #8
 8001900:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001904:	0a0b      	lsrs	r3, r1, #8
 8001906:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3301      	adds	r3, #1
 800190e:	61fb      	str	r3, [r7, #28]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	2b04      	cmp	r3, #4
 8001914:	dde5      	ble.n	80018e2 <RX_ADDR_P0_Write+0x1a>
	}
	nRF_WriteRegister(nrf, RX_ADDR_P0, buff, 5);
 8001916:	f107 0214 	add.w	r2, r7, #20
 800191a:	2305      	movs	r3, #5
 800191c:	210a      	movs	r1, #10
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f7ff fd6f 	bl	8001402 <nRF_WriteRegister>
}
 8001924:	bf00      	nop
 8001926:	3728      	adds	r7, #40	@ 0x28
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <TX_ADDR_Write>:
	}
	nRF_WriteOneRegister(nrf, reg, data);
}

void TX_ADDR_Write(NRF_HandleTypeDef *nrf, uint64_t data)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	@ 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t buff[5];
	uint64_t temp = data;
 8001938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800193c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
 8001944:	e016      	b.n	8001974 <TX_ADDR_Write+0x48>
	{
		buff[i] = (uint8_t)((temp) & 0xff);
 8001946:	f897 1020 	ldrb.w	r1, [r7, #32]
 800194a:	f107 0214 	add.w	r2, r7, #20
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	4413      	add	r3, r2
 8001952:	460a      	mov	r2, r1
 8001954:	701a      	strb	r2, [r3, #0]
		temp = temp >> 8;
 8001956:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	0a02      	lsrs	r2, r0, #8
 8001964:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001968:	0a0b      	lsrs	r3, r1, #8
 800196a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3301      	adds	r3, #1
 8001972:	61fb      	str	r3, [r7, #28]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	2b04      	cmp	r3, #4
 8001978:	dde5      	ble.n	8001946 <TX_ADDR_Write+0x1a>
	}
	nRF_WriteRegister(nrf, TX_ADDR, buff, 5);
 800197a:	f107 0214 	add.w	r2, r7, #20
 800197e:	2305      	movs	r3, #5
 8001980:	2110      	movs	r1, #16
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f7ff fd3d 	bl	8001402 <nRF_WriteRegister>
}
 8001988:	bf00      	nop
 800198a:	3728      	adds	r7, #40	@ 0x28
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <RX_PW_P_NUM_Number_Of_Bytes>:

void RX_PW_P_NUM_Number_Of_Bytes(NRF_HandleTypeDef *nrf, int num, uint8_t data)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	4613      	mov	r3, r2
 800199c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	switch (num)
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d828      	bhi.n	80019f6 <RX_PW_P_NUM_Number_Of_Bytes+0x66>
 80019a4:	a201      	add	r2, pc, #4	@ (adr r2, 80019ac <RX_PW_P_NUM_Number_Of_Bytes+0x1c>)
 80019a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019aa:	bf00      	nop
 80019ac:	080019c5 	.word	0x080019c5
 80019b0:	080019cb 	.word	0x080019cb
 80019b4:	080019d1 	.word	0x080019d1
 80019b8:	080019d7 	.word	0x080019d7
 80019bc:	080019dd 	.word	0x080019dd
 80019c0:	080019e3 	.word	0x080019e3
	{
	case 0:
		reg = RX_PW_P0;
 80019c4:	2311      	movs	r3, #17
 80019c6:	75fb      	strb	r3, [r7, #23]
		break;
 80019c8:	e00e      	b.n	80019e8 <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 1:
		reg = RX_PW_P1;
 80019ca:	2312      	movs	r3, #18
 80019cc:	75fb      	strb	r3, [r7, #23]
		break;
 80019ce:	e00b      	b.n	80019e8 <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 2:
		reg = RX_PW_P2;
 80019d0:	2313      	movs	r3, #19
 80019d2:	75fb      	strb	r3, [r7, #23]
		break;
 80019d4:	e008      	b.n	80019e8 <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 3:
		reg = RX_PW_P3;
 80019d6:	2314      	movs	r3, #20
 80019d8:	75fb      	strb	r3, [r7, #23]
		break;
 80019da:	e005      	b.n	80019e8 <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 4:
		reg = RX_PW_P4;
 80019dc:	2315      	movs	r3, #21
 80019de:	75fb      	strb	r3, [r7, #23]
		break;
 80019e0:	e002      	b.n	80019e8 <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 5:
		reg = RX_PW_P5;
 80019e2:	2316      	movs	r3, #22
 80019e4:	75fb      	strb	r3, [r7, #23]
		break;
 80019e6:	bf00      	nop
	default:
		return;
	}
	nRF_WriteOneRegister(nrf, reg, data);
 80019e8:	79fa      	ldrb	r2, [r7, #7]
 80019ea:	7dfb      	ldrb	r3, [r7, #23]
 80019ec:	4619      	mov	r1, r3
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f7ff fd67 	bl	80014c2 <nRF_WriteOneRegister>
 80019f4:	e000      	b.n	80019f8 <RX_PW_P_NUM_Number_Of_Bytes+0x68>
		return;
 80019f6:	bf00      	nop
}
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop

08001a00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <HAL_MspInit+0x54>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0e:	4a11      	ldr	r2, [pc, #68]	@ (8001a54 <HAL_MspInit+0x54>)
 8001a10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a16:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <HAL_MspInit+0x54>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <HAL_MspInit+0x54>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a54 <HAL_MspInit+0x54>)
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a32:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <HAL_MspInit+0x54>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	210f      	movs	r1, #15
 8001a42:	f06f 0001 	mvn.w	r0, #1
 8001a46:	f000 fb7f 	bl	8002148 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800

08001a58 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08c      	sub	sp, #48	@ 0x30
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a32      	ldr	r2, [pc, #200]	@ (8001b40 <HAL_SPI_MspInit+0xe8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d12c      	bne.n	8001ad4 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	4b31      	ldr	r3, [pc, #196]	@ (8001b44 <HAL_SPI_MspInit+0xec>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	4a30      	ldr	r2, [pc, #192]	@ (8001b44 <HAL_SPI_MspInit+0xec>)
 8001a84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b44 <HAL_SPI_MspInit+0xec>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b44 <HAL_SPI_MspInit+0xec>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	4a29      	ldr	r2, [pc, #164]	@ (8001b44 <HAL_SPI_MspInit+0xec>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa6:	4b27      	ldr	r3, [pc, #156]	@ (8001b44 <HAL_SPI_MspInit+0xec>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ab2:	23e0      	movs	r3, #224	@ 0xe0
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ac2:	2305      	movs	r3, #5
 8001ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac6:	f107 031c 	add.w	r3, r7, #28
 8001aca:	4619      	mov	r1, r3
 8001acc:	481e      	ldr	r0, [pc, #120]	@ (8001b48 <HAL_SPI_MspInit+0xf0>)
 8001ace:	f000 fb65 	bl	800219c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ad2:	e031      	b.n	8001b38 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8001b4c <HAL_SPI_MspInit+0xf4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d12c      	bne.n	8001b38 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	4b18      	ldr	r3, [pc, #96]	@ (8001b44 <HAL_SPI_MspInit+0xec>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	4a17      	ldr	r2, [pc, #92]	@ (8001b44 <HAL_SPI_MspInit+0xec>)
 8001ae8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aee:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <HAL_SPI_MspInit+0xec>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <HAL_SPI_MspInit+0xec>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	4a10      	ldr	r2, [pc, #64]	@ (8001b44 <HAL_SPI_MspInit+0xec>)
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <HAL_SPI_MspInit+0xec>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001b16:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b28:	2305      	movs	r3, #5
 8001b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	4619      	mov	r1, r3
 8001b32:	4807      	ldr	r0, [pc, #28]	@ (8001b50 <HAL_SPI_MspInit+0xf8>)
 8001b34:	f000 fb32 	bl	800219c <HAL_GPIO_Init>
}
 8001b38:	bf00      	nop
 8001b3a:	3730      	adds	r7, #48	@ 0x30
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40013000 	.word	0x40013000
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	40003800 	.word	0x40003800
 8001b50:	40020400 	.word	0x40020400

08001b54 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b64:	d10d      	bne.n	8001b82 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	4a08      	ldr	r2, [pc, #32]	@ (8001b90 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800

08001b94 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	@ (8001bdc <HAL_TIM_Base_MspInit+0x48>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d115      	bne.n	8001bd2 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	4b0d      	ldr	r3, [pc, #52]	@ (8001be0 <HAL_TIM_Base_MspInit+0x4c>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	4a0c      	ldr	r2, [pc, #48]	@ (8001be0 <HAL_TIM_Base_MspInit+0x4c>)
 8001bb0:	f043 0302 	orr.w	r3, r3, #2
 8001bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <HAL_TIM_Base_MspInit+0x4c>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2105      	movs	r1, #5
 8001bc6:	201d      	movs	r0, #29
 8001bc8:	f000 fabe 	bl	8002148 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bcc:	201d      	movs	r0, #29
 8001bce:	f000 fad7 	bl	8002180 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40000400 	.word	0x40000400
 8001be0:	40023800 	.word	0x40023800

08001be4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c04:	d11d      	bne.n	8001c42 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <HAL_TIM_MspPostInit+0x68>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c4c <HAL_TIM_MspPostInit+0x68>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c16:	4b0d      	ldr	r3, [pc, #52]	@ (8001c4c <HAL_TIM_MspPostInit+0x68>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001c22:	230f      	movs	r3, #15
 8001c24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c32:	2301      	movs	r3, #1
 8001c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4804      	ldr	r0, [pc, #16]	@ (8001c50 <HAL_TIM_MspPostInit+0x6c>)
 8001c3e:	f000 faad 	bl	800219c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c42:	bf00      	nop
 8001c44:	3720      	adds	r7, #32
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020000 	.word	0x40020000

08001c54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	@ 0x28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a19      	ldr	r2, [pc, #100]	@ (8001cd8 <HAL_UART_MspInit+0x84>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d12c      	bne.n	8001cd0 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	4b18      	ldr	r3, [pc, #96]	@ (8001cdc <HAL_UART_MspInit+0x88>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7e:	4a17      	ldr	r2, [pc, #92]	@ (8001cdc <HAL_UART_MspInit+0x88>)
 8001c80:	f043 0310 	orr.w	r3, r3, #16
 8001c84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c86:	4b15      	ldr	r3, [pc, #84]	@ (8001cdc <HAL_UART_MspInit+0x88>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <HAL_UART_MspInit+0x88>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	4a10      	ldr	r2, [pc, #64]	@ (8001cdc <HAL_UART_MspInit+0x88>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <HAL_UART_MspInit+0x88>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cc0:	2307      	movs	r3, #7
 8001cc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4805      	ldr	r0, [pc, #20]	@ (8001ce0 <HAL_UART_MspInit+0x8c>)
 8001ccc:	f000 fa66 	bl	800219c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001cd0:	bf00      	nop
 8001cd2:	3728      	adds	r7, #40	@ 0x28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40011000 	.word	0x40011000
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40020000 	.word	0x40020000

08001ce4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08c      	sub	sp, #48	@ 0x30
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8001db4 <HAL_InitTick+0xd0>)
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8001db4 <HAL_InitTick+0xd0>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d04:	4b2b      	ldr	r3, [pc, #172]	@ (8001db4 <HAL_InitTick+0xd0>)
 8001d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d10:	f107 020c 	add.w	r2, r7, #12
 8001d14:	f107 0310 	add.w	r3, r7, #16
 8001d18:	4611      	mov	r1, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f001 f866 	bl	8002dec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d20:	f001 f850 	bl	8002dc4 <HAL_RCC_GetPCLK2Freq>
 8001d24:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d28:	4a23      	ldr	r2, [pc, #140]	@ (8001db8 <HAL_InitTick+0xd4>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	0c9b      	lsrs	r3, r3, #18
 8001d30:	3b01      	subs	r3, #1
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d34:	4b21      	ldr	r3, [pc, #132]	@ (8001dbc <HAL_InitTick+0xd8>)
 8001d36:	4a22      	ldr	r2, [pc, #136]	@ (8001dc0 <HAL_InitTick+0xdc>)
 8001d38:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d3a:	4b20      	ldr	r3, [pc, #128]	@ (8001dbc <HAL_InitTick+0xd8>)
 8001d3c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d40:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d42:	4a1e      	ldr	r2, [pc, #120]	@ (8001dbc <HAL_InitTick+0xd8>)
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d48:	4b1c      	ldr	r3, [pc, #112]	@ (8001dbc <HAL_InitTick+0xd8>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <HAL_InitTick+0xd8>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d54:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <HAL_InitTick+0xd8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001d5a:	4818      	ldr	r0, [pc, #96]	@ (8001dbc <HAL_InitTick+0xd8>)
 8001d5c:	f001 fe4a 	bl	80039f4 <HAL_TIM_Base_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001d66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d11b      	bne.n	8001da6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d6e:	4813      	ldr	r0, [pc, #76]	@ (8001dbc <HAL_InitTick+0xd8>)
 8001d70:	f001 fe90 	bl	8003a94 <HAL_TIM_Base_Start_IT>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001d7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d111      	bne.n	8001da6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d82:	2019      	movs	r0, #25
 8001d84:	f000 f9fc 	bl	8002180 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b0f      	cmp	r3, #15
 8001d8c:	d808      	bhi.n	8001da0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	2019      	movs	r0, #25
 8001d94:	f000 f9d8 	bl	8002148 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d98:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc4 <HAL_InitTick+0xe0>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e002      	b.n	8001da6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001da6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3730      	adds	r7, #48	@ 0x30
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	431bde83 	.word	0x431bde83
 8001dbc:	200007c0 	.word	0x200007c0
 8001dc0:	40010000 	.word	0x40010000
 8001dc4:	2000001c 	.word	0x2000001c

08001dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dcc:	bf00      	nop
 8001dce:	e7fd      	b.n	8001dcc <NMI_Handler+0x4>

08001dd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd4:	bf00      	nop
 8001dd6:	e7fd      	b.n	8001dd4 <HardFault_Handler+0x4>

08001dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ddc:	bf00      	nop
 8001dde:	e7fd      	b.n	8001ddc <MemManage_Handler+0x4>

08001de0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de4:	bf00      	nop
 8001de6:	e7fd      	b.n	8001de4 <BusFault_Handler+0x4>

08001de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <UsageFault_Handler+0x4>

08001df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e04:	4802      	ldr	r0, [pc, #8]	@ (8001e10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e06:	f001 ffa7 	bl	8003d58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200007c0 	.word	0x200007c0

08001e14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e18:	4802      	ldr	r0, [pc, #8]	@ (8001e24 <TIM3_IRQHandler+0x10>)
 8001e1a:	f001 ff9d 	bl	8003d58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	2000042c 	.word	0x2000042c

08001e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e30:	4a14      	ldr	r2, [pc, #80]	@ (8001e84 <_sbrk+0x5c>)
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <_sbrk+0x60>)
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e3c:	4b13      	ldr	r3, [pc, #76]	@ (8001e8c <_sbrk+0x64>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d102      	bne.n	8001e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e44:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <_sbrk+0x64>)
 8001e46:	4a12      	ldr	r2, [pc, #72]	@ (8001e90 <_sbrk+0x68>)
 8001e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e4a:	4b10      	ldr	r3, [pc, #64]	@ (8001e8c <_sbrk+0x64>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d207      	bcs.n	8001e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e58:	f004 fb4c 	bl	80064f4 <__errno>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	220c      	movs	r2, #12
 8001e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
 8001e66:	e009      	b.n	8001e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e68:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <_sbrk+0x64>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6e:	4b07      	ldr	r3, [pc, #28]	@ (8001e8c <_sbrk+0x64>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	4a05      	ldr	r2, [pc, #20]	@ (8001e8c <_sbrk+0x64>)
 8001e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20020000 	.word	0x20020000
 8001e88:	00000400 	.word	0x00000400
 8001e8c:	20000808 	.word	0x20000808
 8001e90:	200046b0 	.word	0x200046b0

08001e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e98:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <SystemInit+0x20>)
 8001e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e9e:	4a05      	ldr	r2, [pc, #20]	@ (8001eb4 <SystemInit+0x20>)
 8001ea0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ea4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001eb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ef0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ebc:	f7ff ffea 	bl	8001e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ec0:	480c      	ldr	r0, [pc, #48]	@ (8001ef4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ec2:	490d      	ldr	r1, [pc, #52]	@ (8001ef8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8001efc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec8:	e002      	b.n	8001ed0 <LoopCopyDataInit>

08001eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ece:	3304      	adds	r3, #4

08001ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed4:	d3f9      	bcc.n	8001eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ed8:	4c0a      	ldr	r4, [pc, #40]	@ (8001f04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001edc:	e001      	b.n	8001ee2 <LoopFillZerobss>

08001ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee0:	3204      	adds	r2, #4

08001ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee4:	d3fb      	bcc.n	8001ede <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ee6:	f004 fb0b 	bl	8006500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eea:	f7fe fd6d 	bl	80009c8 <main>
  bx  lr    
 8001eee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ef0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001efc:	08006e94 	.word	0x08006e94
  ldr r2, =_sbss
 8001f00:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001f04:	200046ac 	.word	0x200046ac

08001f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f08:	e7fe      	b.n	8001f08 <ADC_IRQHandler>
	...

08001f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f10:	4b0e      	ldr	r3, [pc, #56]	@ (8001f4c <HAL_Init+0x40>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0d      	ldr	r2, [pc, #52]	@ (8001f4c <HAL_Init+0x40>)
 8001f16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <HAL_Init+0x40>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0a      	ldr	r2, [pc, #40]	@ (8001f4c <HAL_Init+0x40>)
 8001f22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f28:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <HAL_Init+0x40>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a07      	ldr	r2, [pc, #28]	@ (8001f4c <HAL_Init+0x40>)
 8001f2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f34:	2003      	movs	r0, #3
 8001f36:	f000 f8fc 	bl	8002132 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f3a:	200f      	movs	r0, #15
 8001f3c:	f7ff fed2 	bl	8001ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f40:	f7ff fd5e 	bl	8001a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023c00 	.word	0x40023c00

08001f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f54:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <HAL_IncTick+0x20>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <HAL_IncTick+0x24>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	4a04      	ldr	r2, [pc, #16]	@ (8001f74 <HAL_IncTick+0x24>)
 8001f62:	6013      	str	r3, [r2, #0]
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000020 	.word	0x20000020
 8001f74:	2000080c 	.word	0x2000080c

08001f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	@ (8001f8c <HAL_GetTick+0x14>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	2000080c 	.word	0x2000080c

08001f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f98:	f7ff ffee 	bl	8001f78 <HAL_GetTick>
 8001f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa8:	d005      	beq.n	8001fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001faa:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd4 <HAL_Delay+0x44>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fb6:	bf00      	nop
 8001fb8:	f7ff ffde 	bl	8001f78 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d8f7      	bhi.n	8001fb8 <HAL_Delay+0x28>
  {
  }
}
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000020 	.word	0x20000020

08001fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <__NVIC_SetPriorityGrouping+0x44>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002000:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200a:	4a04      	ldr	r2, [pc, #16]	@ (800201c <__NVIC_SetPriorityGrouping+0x44>)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	60d3      	str	r3, [r2, #12]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002024:	4b04      	ldr	r3, [pc, #16]	@ (8002038 <__NVIC_GetPriorityGrouping+0x18>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	0a1b      	lsrs	r3, r3, #8
 800202a:	f003 0307 	and.w	r3, r3, #7
}
 800202e:	4618      	mov	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	2b00      	cmp	r3, #0
 800204c:	db0b      	blt.n	8002066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	f003 021f 	and.w	r2, r3, #31
 8002054:	4907      	ldr	r1, [pc, #28]	@ (8002074 <__NVIC_EnableIRQ+0x38>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	2001      	movs	r0, #1
 800205e:	fa00 f202 	lsl.w	r2, r0, r2
 8002062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000e100 	.word	0xe000e100

08002078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	6039      	str	r1, [r7, #0]
 8002082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	2b00      	cmp	r3, #0
 800208a:	db0a      	blt.n	80020a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	b2da      	uxtb	r2, r3
 8002090:	490c      	ldr	r1, [pc, #48]	@ (80020c4 <__NVIC_SetPriority+0x4c>)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	0112      	lsls	r2, r2, #4
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	440b      	add	r3, r1
 800209c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a0:	e00a      	b.n	80020b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4908      	ldr	r1, [pc, #32]	@ (80020c8 <__NVIC_SetPriority+0x50>)
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	3b04      	subs	r3, #4
 80020b0:	0112      	lsls	r2, r2, #4
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	440b      	add	r3, r1
 80020b6:	761a      	strb	r2, [r3, #24]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000e100 	.word	0xe000e100
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	@ 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f1c3 0307 	rsb	r3, r3, #7
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	bf28      	it	cs
 80020ea:	2304      	movcs	r3, #4
 80020ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3304      	adds	r3, #4
 80020f2:	2b06      	cmp	r3, #6
 80020f4:	d902      	bls.n	80020fc <NVIC_EncodePriority+0x30>
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3b03      	subs	r3, #3
 80020fa:	e000      	b.n	80020fe <NVIC_EncodePriority+0x32>
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002100:	f04f 32ff 	mov.w	r2, #4294967295
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43da      	mvns	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	401a      	ands	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002114:	f04f 31ff 	mov.w	r1, #4294967295
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	fa01 f303 	lsl.w	r3, r1, r3
 800211e:	43d9      	mvns	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002124:	4313      	orrs	r3, r2
         );
}
 8002126:	4618      	mov	r0, r3
 8002128:	3724      	adds	r7, #36	@ 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff ff4c 	bl	8001fd8 <__NVIC_SetPriorityGrouping>
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800215a:	f7ff ff61 	bl	8002020 <__NVIC_GetPriorityGrouping>
 800215e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	6978      	ldr	r0, [r7, #20]
 8002166:	f7ff ffb1 	bl	80020cc <NVIC_EncodePriority>
 800216a:	4602      	mov	r2, r0
 800216c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002170:	4611      	mov	r1, r2
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff80 	bl	8002078 <__NVIC_SetPriority>
}
 8002178:	bf00      	nop
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ff54 	bl	800203c <__NVIC_EnableIRQ>
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	@ 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	e159      	b.n	800246c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021b8:	2201      	movs	r2, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	f040 8148 	bne.w	8002466 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d005      	beq.n	80021ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d130      	bne.n	8002250 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	2203      	movs	r2, #3
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002224:	2201      	movs	r2, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 0201 	and.w	r2, r3, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b03      	cmp	r3, #3
 800225a:	d017      	beq.n	800228c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d123      	bne.n	80022e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	08da      	lsrs	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3208      	adds	r2, #8
 80022a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	220f      	movs	r2, #15
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	08da      	lsrs	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3208      	adds	r2, #8
 80022da:	69b9      	ldr	r1, [r7, #24]
 80022dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0203 	and.w	r2, r3, #3
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80a2 	beq.w	8002466 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	4b57      	ldr	r3, [pc, #348]	@ (8002484 <HAL_GPIO_Init+0x2e8>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232a:	4a56      	ldr	r2, [pc, #344]	@ (8002484 <HAL_GPIO_Init+0x2e8>)
 800232c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002330:	6453      	str	r3, [r2, #68]	@ 0x44
 8002332:	4b54      	ldr	r3, [pc, #336]	@ (8002484 <HAL_GPIO_Init+0x2e8>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800233e:	4a52      	ldr	r2, [pc, #328]	@ (8002488 <HAL_GPIO_Init+0x2ec>)
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	3302      	adds	r3, #2
 8002346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	220f      	movs	r2, #15
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a49      	ldr	r2, [pc, #292]	@ (800248c <HAL_GPIO_Init+0x2f0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d019      	beq.n	800239e <HAL_GPIO_Init+0x202>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a48      	ldr	r2, [pc, #288]	@ (8002490 <HAL_GPIO_Init+0x2f4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d013      	beq.n	800239a <HAL_GPIO_Init+0x1fe>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a47      	ldr	r2, [pc, #284]	@ (8002494 <HAL_GPIO_Init+0x2f8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00d      	beq.n	8002396 <HAL_GPIO_Init+0x1fa>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a46      	ldr	r2, [pc, #280]	@ (8002498 <HAL_GPIO_Init+0x2fc>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d007      	beq.n	8002392 <HAL_GPIO_Init+0x1f6>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a45      	ldr	r2, [pc, #276]	@ (800249c <HAL_GPIO_Init+0x300>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d101      	bne.n	800238e <HAL_GPIO_Init+0x1f2>
 800238a:	2304      	movs	r3, #4
 800238c:	e008      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 800238e:	2307      	movs	r3, #7
 8002390:	e006      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 8002392:	2303      	movs	r3, #3
 8002394:	e004      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 8002396:	2302      	movs	r3, #2
 8002398:	e002      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 800239e:	2300      	movs	r3, #0
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	f002 0203 	and.w	r2, r2, #3
 80023a6:	0092      	lsls	r2, r2, #2
 80023a8:	4093      	lsls	r3, r2
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b0:	4935      	ldr	r1, [pc, #212]	@ (8002488 <HAL_GPIO_Init+0x2ec>)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	089b      	lsrs	r3, r3, #2
 80023b6:	3302      	adds	r3, #2
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023be:	4b38      	ldr	r3, [pc, #224]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023e2:	4a2f      	ldr	r2, [pc, #188]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e8:	4b2d      	ldr	r3, [pc, #180]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800240c:	4a24      	ldr	r2, [pc, #144]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002412:	4b23      	ldr	r3, [pc, #140]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002436:	4a1a      	ldr	r2, [pc, #104]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800243c:	4b18      	ldr	r3, [pc, #96]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002460:	4a0f      	ldr	r2, [pc, #60]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3301      	adds	r3, #1
 800246a:	61fb      	str	r3, [r7, #28]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	2b0f      	cmp	r3, #15
 8002470:	f67f aea2 	bls.w	80021b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3724      	adds	r7, #36	@ 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800
 8002488:	40013800 	.word	0x40013800
 800248c:	40020000 	.word	0x40020000
 8002490:	40020400 	.word	0x40020400
 8002494:	40020800 	.word	0x40020800
 8002498:	40020c00 	.word	0x40020c00
 800249c:	40021000 	.word	0x40021000
 80024a0:	40013c00 	.word	0x40013c00

080024a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	887b      	ldrh	r3, [r7, #2]
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d002      	beq.n	80024c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
 80024c0:	e001      	b.n	80024c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	807b      	strh	r3, [r7, #2]
 80024e0:	4613      	mov	r3, r2
 80024e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024e4:	787b      	ldrb	r3, [r7, #1]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ea:	887a      	ldrh	r2, [r7, #2]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024f0:	e003      	b.n	80024fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024f2:	887b      	ldrh	r3, [r7, #2]
 80024f4:	041a      	lsls	r2, r3, #16
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	619a      	str	r2, [r3, #24]
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002506:	b480      	push	{r7}
 8002508:	b085      	sub	sp, #20
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	460b      	mov	r3, r1
 8002510:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002518:	887a      	ldrh	r2, [r7, #2]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4013      	ands	r3, r2
 800251e:	041a      	lsls	r2, r3, #16
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	43d9      	mvns	r1, r3
 8002524:	887b      	ldrh	r3, [r7, #2]
 8002526:	400b      	ands	r3, r1
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	619a      	str	r2, [r3, #24]
}
 800252e:	bf00      	nop
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e267      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d075      	beq.n	8002646 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800255a:	4b88      	ldr	r3, [pc, #544]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b04      	cmp	r3, #4
 8002564:	d00c      	beq.n	8002580 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002566:	4b85      	ldr	r3, [pc, #532]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800256e:	2b08      	cmp	r3, #8
 8002570:	d112      	bne.n	8002598 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002572:	4b82      	ldr	r3, [pc, #520]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800257a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800257e:	d10b      	bne.n	8002598 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002580:	4b7e      	ldr	r3, [pc, #504]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d05b      	beq.n	8002644 <HAL_RCC_OscConfig+0x108>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d157      	bne.n	8002644 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e242      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025a0:	d106      	bne.n	80025b0 <HAL_RCC_OscConfig+0x74>
 80025a2:	4b76      	ldr	r3, [pc, #472]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a75      	ldr	r2, [pc, #468]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 80025a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e01d      	b.n	80025ec <HAL_RCC_OscConfig+0xb0>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x98>
 80025ba:	4b70      	ldr	r3, [pc, #448]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a6f      	ldr	r2, [pc, #444]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 80025c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b6d      	ldr	r3, [pc, #436]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a6c      	ldr	r2, [pc, #432]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_OscConfig+0xb0>
 80025d4:	4b69      	ldr	r3, [pc, #420]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a68      	ldr	r2, [pc, #416]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 80025da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4b66      	ldr	r3, [pc, #408]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a65      	ldr	r2, [pc, #404]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 80025e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d013      	beq.n	800261c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7ff fcc0 	bl	8001f78 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025fc:	f7ff fcbc 	bl	8001f78 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	@ 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e207      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	4b5b      	ldr	r3, [pc, #364]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0xc0>
 800261a:	e014      	b.n	8002646 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7ff fcac 	bl	8001f78 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002624:	f7ff fca8 	bl	8001f78 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	@ 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e1f3      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002636:	4b51      	ldr	r3, [pc, #324]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0xe8>
 8002642:	e000      	b.n	8002646 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d063      	beq.n	800271a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002652:	4b4a      	ldr	r3, [pc, #296]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800265e:	4b47      	ldr	r3, [pc, #284]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002666:	2b08      	cmp	r3, #8
 8002668:	d11c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800266a:	4b44      	ldr	r3, [pc, #272]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d116      	bne.n	80026a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	4b41      	ldr	r3, [pc, #260]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_RCC_OscConfig+0x152>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d001      	beq.n	800268e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e1c7      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268e:	4b3b      	ldr	r3, [pc, #236]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4937      	ldr	r1, [pc, #220]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a2:	e03a      	b.n	800271a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d020      	beq.n	80026ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ac:	4b34      	ldr	r3, [pc, #208]	@ (8002780 <HAL_RCC_OscConfig+0x244>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b2:	f7ff fc61 	bl	8001f78 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ba:	f7ff fc5d 	bl	8001f78 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e1a8      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026cc:	4b2b      	ldr	r3, [pc, #172]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d8:	4b28      	ldr	r3, [pc, #160]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4925      	ldr	r1, [pc, #148]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	600b      	str	r3, [r1, #0]
 80026ec:	e015      	b.n	800271a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ee:	4b24      	ldr	r3, [pc, #144]	@ (8002780 <HAL_RCC_OscConfig+0x244>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7ff fc40 	bl	8001f78 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fc:	f7ff fc3c 	bl	8001f78 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e187      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270e:	4b1b      	ldr	r3, [pc, #108]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d036      	beq.n	8002794 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d016      	beq.n	800275c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272e:	4b15      	ldr	r3, [pc, #84]	@ (8002784 <HAL_RCC_OscConfig+0x248>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7ff fc20 	bl	8001f78 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273c:	f7ff fc1c 	bl	8001f78 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e167      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274e:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <HAL_RCC_OscConfig+0x240>)
 8002750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x200>
 800275a:	e01b      	b.n	8002794 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800275c:	4b09      	ldr	r3, [pc, #36]	@ (8002784 <HAL_RCC_OscConfig+0x248>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002762:	f7ff fc09 	bl	8001f78 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002768:	e00e      	b.n	8002788 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800276a:	f7ff fc05 	bl	8001f78 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d907      	bls.n	8002788 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e150      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
 800277c:	40023800 	.word	0x40023800
 8002780:	42470000 	.word	0x42470000
 8002784:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002788:	4b88      	ldr	r3, [pc, #544]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 800278a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1ea      	bne.n	800276a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 8097 	beq.w	80028d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a2:	2300      	movs	r3, #0
 80027a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a6:	4b81      	ldr	r3, [pc, #516]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10f      	bne.n	80027d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	4b7d      	ldr	r3, [pc, #500]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	4a7c      	ldr	r2, [pc, #496]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c2:	4b7a      	ldr	r3, [pc, #488]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ce:	2301      	movs	r3, #1
 80027d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d2:	4b77      	ldr	r3, [pc, #476]	@ (80029b0 <HAL_RCC_OscConfig+0x474>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d118      	bne.n	8002810 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027de:	4b74      	ldr	r3, [pc, #464]	@ (80029b0 <HAL_RCC_OscConfig+0x474>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a73      	ldr	r2, [pc, #460]	@ (80029b0 <HAL_RCC_OscConfig+0x474>)
 80027e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ea:	f7ff fbc5 	bl	8001f78 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f2:	f7ff fbc1 	bl	8001f78 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e10c      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002804:	4b6a      	ldr	r3, [pc, #424]	@ (80029b0 <HAL_RCC_OscConfig+0x474>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d106      	bne.n	8002826 <HAL_RCC_OscConfig+0x2ea>
 8002818:	4b64      	ldr	r3, [pc, #400]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281c:	4a63      	ldr	r2, [pc, #396]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	6713      	str	r3, [r2, #112]	@ 0x70
 8002824:	e01c      	b.n	8002860 <HAL_RCC_OscConfig+0x324>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b05      	cmp	r3, #5
 800282c:	d10c      	bne.n	8002848 <HAL_RCC_OscConfig+0x30c>
 800282e:	4b5f      	ldr	r3, [pc, #380]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002832:	4a5e      	ldr	r2, [pc, #376]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 8002834:	f043 0304 	orr.w	r3, r3, #4
 8002838:	6713      	str	r3, [r2, #112]	@ 0x70
 800283a:	4b5c      	ldr	r3, [pc, #368]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283e:	4a5b      	ldr	r2, [pc, #364]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6713      	str	r3, [r2, #112]	@ 0x70
 8002846:	e00b      	b.n	8002860 <HAL_RCC_OscConfig+0x324>
 8002848:	4b58      	ldr	r3, [pc, #352]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284c:	4a57      	ldr	r2, [pc, #348]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	6713      	str	r3, [r2, #112]	@ 0x70
 8002854:	4b55      	ldr	r3, [pc, #340]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002858:	4a54      	ldr	r2, [pc, #336]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 800285a:	f023 0304 	bic.w	r3, r3, #4
 800285e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d015      	beq.n	8002894 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002868:	f7ff fb86 	bl	8001f78 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286e:	e00a      	b.n	8002886 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002870:	f7ff fb82 	bl	8001f78 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e0cb      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	4b49      	ldr	r3, [pc, #292]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0ee      	beq.n	8002870 <HAL_RCC_OscConfig+0x334>
 8002892:	e014      	b.n	80028be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002894:	f7ff fb70 	bl	8001f78 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289c:	f7ff fb6c 	bl	8001f78 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e0b5      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b2:	4b3e      	ldr	r3, [pc, #248]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1ee      	bne.n	800289c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028be:	7dfb      	ldrb	r3, [r7, #23]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d105      	bne.n	80028d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c4:	4b39      	ldr	r3, [pc, #228]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 80028c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c8:	4a38      	ldr	r2, [pc, #224]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 80028ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80a1 	beq.w	8002a1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028da:	4b34      	ldr	r3, [pc, #208]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d05c      	beq.n	80029a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d141      	bne.n	8002972 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ee:	4b31      	ldr	r3, [pc, #196]	@ (80029b4 <HAL_RCC_OscConfig+0x478>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7ff fb40 	bl	8001f78 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fc:	f7ff fb3c 	bl	8001f78 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e087      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290e:	4b27      	ldr	r3, [pc, #156]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69da      	ldr	r2, [r3, #28]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002928:	019b      	lsls	r3, r3, #6
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002930:	085b      	lsrs	r3, r3, #1
 8002932:	3b01      	subs	r3, #1
 8002934:	041b      	lsls	r3, r3, #16
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293c:	061b      	lsls	r3, r3, #24
 800293e:	491b      	ldr	r1, [pc, #108]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002944:	4b1b      	ldr	r3, [pc, #108]	@ (80029b4 <HAL_RCC_OscConfig+0x478>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7ff fb15 	bl	8001f78 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002952:	f7ff fb11 	bl	8001f78 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e05c      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002964:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x416>
 8002970:	e054      	b.n	8002a1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002972:	4b10      	ldr	r3, [pc, #64]	@ (80029b4 <HAL_RCC_OscConfig+0x478>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7ff fafe 	bl	8001f78 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002980:	f7ff fafa 	bl	8001f78 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e045      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002992:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <HAL_RCC_OscConfig+0x470>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x444>
 800299e:	e03d      	b.n	8002a1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d107      	bne.n	80029b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e038      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40007000 	.word	0x40007000
 80029b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a28 <HAL_RCC_OscConfig+0x4ec>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d028      	beq.n	8002a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d121      	bne.n	8002a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	429a      	cmp	r2, r3
 80029e0:	d11a      	bne.n	8002a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029e8:	4013      	ands	r3, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d111      	bne.n	8002a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fe:	085b      	lsrs	r3, r3, #1
 8002a00:	3b01      	subs	r3, #1
 8002a02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d107      	bne.n	8002a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800

08002a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0cc      	b.n	8002bda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a40:	4b68      	ldr	r3, [pc, #416]	@ (8002be4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d90c      	bls.n	8002a68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4e:	4b65      	ldr	r3, [pc, #404]	@ (8002be4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a56:	4b63      	ldr	r3, [pc, #396]	@ (8002be4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0b8      	b.n	8002bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d020      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a80:	4b59      	ldr	r3, [pc, #356]	@ (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	4a58      	ldr	r2, [pc, #352]	@ (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a98:	4b53      	ldr	r3, [pc, #332]	@ (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4a52      	ldr	r2, [pc, #328]	@ (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002aa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa4:	4b50      	ldr	r3, [pc, #320]	@ (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	494d      	ldr	r1, [pc, #308]	@ (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d044      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d107      	bne.n	8002ada <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aca:	4b47      	ldr	r3, [pc, #284]	@ (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d119      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e07f      	b.n	8002bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d003      	beq.n	8002aea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d107      	bne.n	8002afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aea:	4b3f      	ldr	r3, [pc, #252]	@ (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e06f      	b.n	8002bda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afa:	4b3b      	ldr	r3, [pc, #236]	@ (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e067      	b.n	8002bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b0a:	4b37      	ldr	r3, [pc, #220]	@ (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f023 0203 	bic.w	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4934      	ldr	r1, [pc, #208]	@ (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b1c:	f7ff fa2c 	bl	8001f78 <HAL_GetTick>
 8002b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b22:	e00a      	b.n	8002b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b24:	f7ff fa28 	bl	8001f78 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e04f      	b.n	8002bda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 020c 	and.w	r2, r3, #12
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d1eb      	bne.n	8002b24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b25      	ldr	r3, [pc, #148]	@ (8002be4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d20c      	bcs.n	8002b74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b22      	ldr	r3, [pc, #136]	@ (8002be4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b62:	4b20      	ldr	r3, [pc, #128]	@ (8002be4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e032      	b.n	8002bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b80:	4b19      	ldr	r3, [pc, #100]	@ (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4916      	ldr	r1, [pc, #88]	@ (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b9e:	4b12      	ldr	r3, [pc, #72]	@ (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	490e      	ldr	r1, [pc, #56]	@ (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bb2:	f000 f821 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	490a      	ldr	r1, [pc, #40]	@ (8002bec <HAL_RCC_ClockConfig+0x1c0>)
 8002bc4:	5ccb      	ldrb	r3, [r1, r3]
 8002bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bca:	4a09      	ldr	r2, [pc, #36]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bce:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff f886 	bl	8001ce4 <HAL_InitTick>

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40023c00 	.word	0x40023c00
 8002be8:	40023800 	.word	0x40023800
 8002bec:	08006e38 	.word	0x08006e38
 8002bf0:	20000018 	.word	0x20000018
 8002bf4:	2000001c 	.word	0x2000001c

08002bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bfc:	b090      	sub	sp, #64	@ 0x40
 8002bfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c10:	4b59      	ldr	r3, [pc, #356]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d00d      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0x40>
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	f200 80a1 	bhi.w	8002d64 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x34>
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d003      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c2a:	e09b      	b.n	8002d64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c2c:	4b53      	ldr	r3, [pc, #332]	@ (8002d7c <HAL_RCC_GetSysClockFreq+0x184>)
 8002c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c30:	e09b      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c32:	4b53      	ldr	r3, [pc, #332]	@ (8002d80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c34:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c36:	e098      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c38:	4b4f      	ldr	r3, [pc, #316]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c40:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c42:	4b4d      	ldr	r3, [pc, #308]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d028      	beq.n	8002ca0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	099b      	lsrs	r3, r3, #6
 8002c54:	2200      	movs	r2, #0
 8002c56:	623b      	str	r3, [r7, #32]
 8002c58:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c60:	2100      	movs	r1, #0
 8002c62:	4b47      	ldr	r3, [pc, #284]	@ (8002d80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c64:	fb03 f201 	mul.w	r2, r3, r1
 8002c68:	2300      	movs	r3, #0
 8002c6a:	fb00 f303 	mul.w	r3, r0, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	4a43      	ldr	r2, [pc, #268]	@ (8002d80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c72:	fba0 1202 	umull	r1, r2, r0, r2
 8002c76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c78:	460a      	mov	r2, r1
 8002c7a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c7e:	4413      	add	r3, r2
 8002c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c84:	2200      	movs	r2, #0
 8002c86:	61bb      	str	r3, [r7, #24]
 8002c88:	61fa      	str	r2, [r7, #28]
 8002c8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c92:	f7fd faf5 	bl	8000280 <__aeabi_uldivmod>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c9e:	e053      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca0:	4b35      	ldr	r3, [pc, #212]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	099b      	lsrs	r3, r3, #6
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	617a      	str	r2, [r7, #20]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cb2:	f04f 0b00 	mov.w	fp, #0
 8002cb6:	4652      	mov	r2, sl
 8002cb8:	465b      	mov	r3, fp
 8002cba:	f04f 0000 	mov.w	r0, #0
 8002cbe:	f04f 0100 	mov.w	r1, #0
 8002cc2:	0159      	lsls	r1, r3, #5
 8002cc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cc8:	0150      	lsls	r0, r2, #5
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	ebb2 080a 	subs.w	r8, r2, sl
 8002cd2:	eb63 090b 	sbc.w	r9, r3, fp
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ce2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ce6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002cea:	ebb2 0408 	subs.w	r4, r2, r8
 8002cee:	eb63 0509 	sbc.w	r5, r3, r9
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	00eb      	lsls	r3, r5, #3
 8002cfc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d00:	00e2      	lsls	r2, r4, #3
 8002d02:	4614      	mov	r4, r2
 8002d04:	461d      	mov	r5, r3
 8002d06:	eb14 030a 	adds.w	r3, r4, sl
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	eb45 030b 	adc.w	r3, r5, fp
 8002d10:	607b      	str	r3, [r7, #4]
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d1e:	4629      	mov	r1, r5
 8002d20:	028b      	lsls	r3, r1, #10
 8002d22:	4621      	mov	r1, r4
 8002d24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d28:	4621      	mov	r1, r4
 8002d2a:	028a      	lsls	r2, r1, #10
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	4619      	mov	r1, r3
 8002d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d32:	2200      	movs	r2, #0
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	60fa      	str	r2, [r7, #12]
 8002d38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d3c:	f7fd faa0 	bl	8000280 <__aeabi_uldivmod>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4613      	mov	r3, r2
 8002d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d48:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	0c1b      	lsrs	r3, r3, #16
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	3301      	adds	r3, #1
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002d58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d62:	e002      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d64:	4b05      	ldr	r3, [pc, #20]	@ (8002d7c <HAL_RCC_GetSysClockFreq+0x184>)
 8002d66:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3740      	adds	r7, #64	@ 0x40
 8002d70:	46bd      	mov	sp, r7
 8002d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	00f42400 	.word	0x00f42400
 8002d80:	017d7840 	.word	0x017d7840

08002d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d88:	4b03      	ldr	r3, [pc, #12]	@ (8002d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	20000018 	.word	0x20000018

08002d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002da0:	f7ff fff0 	bl	8002d84 <HAL_RCC_GetHCLKFreq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b05      	ldr	r3, [pc, #20]	@ (8002dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	0a9b      	lsrs	r3, r3, #10
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	4903      	ldr	r1, [pc, #12]	@ (8002dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	08006e48 	.word	0x08006e48

08002dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dc8:	f7ff ffdc 	bl	8002d84 <HAL_RCC_GetHCLKFreq>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	4b05      	ldr	r3, [pc, #20]	@ (8002de4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	0b5b      	lsrs	r3, r3, #13
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	4903      	ldr	r1, [pc, #12]	@ (8002de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dda:	5ccb      	ldrb	r3, [r1, r3]
 8002ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40023800 	.word	0x40023800
 8002de8:	08006e48 	.word	0x08006e48

08002dec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	220f      	movs	r2, #15
 8002dfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002dfc:	4b12      	ldr	r3, [pc, #72]	@ (8002e48 <HAL_RCC_GetClockConfig+0x5c>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0203 	and.w	r2, r3, #3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e08:	4b0f      	ldr	r3, [pc, #60]	@ (8002e48 <HAL_RCC_GetClockConfig+0x5c>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e14:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <HAL_RCC_GetClockConfig+0x5c>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e20:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <HAL_RCC_GetClockConfig+0x5c>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	08db      	lsrs	r3, r3, #3
 8002e26:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e2e:	4b07      	ldr	r3, [pc, #28]	@ (8002e4c <HAL_RCC_GetClockConfig+0x60>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0207 	and.w	r2, r3, #7
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	601a      	str	r2, [r3, #0]
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40023c00 	.word	0x40023c00

08002e50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e07b      	b.n	8002f5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d108      	bne.n	8002e7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e72:	d009      	beq.n	8002e88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	61da      	str	r2, [r3, #28]
 8002e7a:	e005      	b.n	8002e88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fe fdd8 	bl	8001a58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ebe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0c:	ea42 0103 	orr.w	r1, r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f14:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	0c1b      	lsrs	r3, r3, #16
 8002f26:	f003 0104 	and.w	r1, r3, #4
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2e:	f003 0210 	and.w	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69da      	ldr	r2, [r3, #28]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b088      	sub	sp, #32
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	603b      	str	r3, [r7, #0]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f72:	f7ff f801 	bl	8001f78 <HAL_GetTick>
 8002f76:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d001      	beq.n	8002f8c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e12a      	b.n	80031e2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <HAL_SPI_Transmit+0x36>
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e122      	b.n	80031e2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_SPI_Transmit+0x48>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e11b      	b.n	80031e2 <HAL_SPI_Transmit+0x280>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	88fa      	ldrh	r2, [r7, #6]
 8002fca:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	88fa      	ldrh	r2, [r7, #6]
 8002fd0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ff8:	d10f      	bne.n	800301a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003008:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003018:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003024:	2b40      	cmp	r3, #64	@ 0x40
 8003026:	d007      	beq.n	8003038 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003036:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003040:	d152      	bne.n	80030e8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <HAL_SPI_Transmit+0xee>
 800304a:	8b7b      	ldrh	r3, [r7, #26]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d145      	bne.n	80030dc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003054:	881a      	ldrh	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003060:	1c9a      	adds	r2, r3, #2
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003074:	e032      	b.n	80030dc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b02      	cmp	r3, #2
 8003082:	d112      	bne.n	80030aa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003088:	881a      	ldrh	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	1c9a      	adds	r2, r3, #2
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80030a8:	e018      	b.n	80030dc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030aa:	f7fe ff65 	bl	8001f78 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d803      	bhi.n	80030c2 <HAL_SPI_Transmit+0x160>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c0:	d102      	bne.n	80030c8 <HAL_SPI_Transmit+0x166>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d109      	bne.n	80030dc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e082      	b.n	80031e2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1c7      	bne.n	8003076 <HAL_SPI_Transmit+0x114>
 80030e6:	e053      	b.n	8003190 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <HAL_SPI_Transmit+0x194>
 80030f0:	8b7b      	ldrh	r3, [r7, #26]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d147      	bne.n	8003186 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	330c      	adds	r3, #12
 8003100:	7812      	ldrb	r2, [r2, #0]
 8003102:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800311c:	e033      	b.n	8003186 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b02      	cmp	r3, #2
 800312a:	d113      	bne.n	8003154 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	330c      	adds	r3, #12
 8003136:	7812      	ldrb	r2, [r2, #0]
 8003138:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003152:	e018      	b.n	8003186 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003154:	f7fe ff10 	bl	8001f78 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d803      	bhi.n	800316c <HAL_SPI_Transmit+0x20a>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316a:	d102      	bne.n	8003172 <HAL_SPI_Transmit+0x210>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d109      	bne.n	8003186 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e02d      	b.n	80031e2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800318a:	b29b      	uxth	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1c6      	bne.n	800311e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	6839      	ldr	r1, [r7, #0]
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 fbd9 	bl	800394c <SPI_EndRxTxTransaction>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10a      	bne.n	80031c4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80031e0:	2300      	movs	r3, #0
  }
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3720      	adds	r7, #32
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b088      	sub	sp, #32
 80031ee:	af02      	add	r7, sp, #8
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	603b      	str	r3, [r7, #0]
 80031f6:	4613      	mov	r3, r2
 80031f8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b01      	cmp	r3, #1
 8003204:	d001      	beq.n	800320a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003206:	2302      	movs	r3, #2
 8003208:	e104      	b.n	8003414 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <HAL_SPI_Receive+0x2c>
 8003210:	88fb      	ldrh	r3, [r7, #6]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e0fc      	b.n	8003414 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003222:	d112      	bne.n	800324a <HAL_SPI_Receive+0x60>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10e      	bne.n	800324a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2204      	movs	r2, #4
 8003230:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003234:	88fa      	ldrh	r2, [r7, #6]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	4613      	mov	r3, r2
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	68b9      	ldr	r1, [r7, #8]
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f8eb 	bl	800341c <HAL_SPI_TransmitReceive>
 8003246:	4603      	mov	r3, r0
 8003248:	e0e4      	b.n	8003414 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800324a:	f7fe fe95 	bl	8001f78 <HAL_GetTick>
 800324e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_SPI_Receive+0x74>
 800325a:	2302      	movs	r3, #2
 800325c:	e0da      	b.n	8003414 <HAL_SPI_Receive+0x22a>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2204      	movs	r2, #4
 800326a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	88fa      	ldrh	r2, [r7, #6]
 800327e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	88fa      	ldrh	r2, [r7, #6]
 8003284:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ac:	d10f      	bne.n	80032ce <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d8:	2b40      	cmp	r3, #64	@ 0x40
 80032da:	d007      	beq.n	80032ec <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d170      	bne.n	80033d6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80032f4:	e035      	b.n	8003362 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d115      	bne.n	8003330 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f103 020c 	add.w	r2, r3, #12
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003310:	7812      	ldrb	r2, [r2, #0]
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800332e:	e018      	b.n	8003362 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003330:	f7fe fe22 	bl	8001f78 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d803      	bhi.n	8003348 <HAL_SPI_Receive+0x15e>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003346:	d102      	bne.n	800334e <HAL_SPI_Receive+0x164>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e058      	b.n	8003414 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1c4      	bne.n	80032f6 <HAL_SPI_Receive+0x10c>
 800336c:	e038      	b.n	80033e0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b01      	cmp	r3, #1
 800337a:	d113      	bne.n	80033a4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003386:	b292      	uxth	r2, r2
 8003388:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338e:	1c9a      	adds	r2, r3, #2
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033a2:	e018      	b.n	80033d6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033a4:	f7fe fde8 	bl	8001f78 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d803      	bhi.n	80033bc <HAL_SPI_Receive+0x1d2>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ba:	d102      	bne.n	80033c2 <HAL_SPI_Receive+0x1d8>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d109      	bne.n	80033d6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e01e      	b.n	8003414 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1c6      	bne.n	800336e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	6839      	ldr	r1, [r7, #0]
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 fa4b 	bl	8003880 <SPI_EndRxTransaction>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003412:	2300      	movs	r3, #0
  }
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08a      	sub	sp, #40	@ 0x28
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800342a:	2301      	movs	r3, #1
 800342c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800342e:	f7fe fda3 	bl	8001f78 <HAL_GetTick>
 8003432:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800343a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003442:	887b      	ldrh	r3, [r7, #2]
 8003444:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003446:	7ffb      	ldrb	r3, [r7, #31]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d00c      	beq.n	8003466 <HAL_SPI_TransmitReceive+0x4a>
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003452:	d106      	bne.n	8003462 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d102      	bne.n	8003462 <HAL_SPI_TransmitReceive+0x46>
 800345c:	7ffb      	ldrb	r3, [r7, #31]
 800345e:	2b04      	cmp	r3, #4
 8003460:	d001      	beq.n	8003466 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003462:	2302      	movs	r3, #2
 8003464:	e17f      	b.n	8003766 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_SPI_TransmitReceive+0x5c>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <HAL_SPI_TransmitReceive+0x5c>
 8003472:	887b      	ldrh	r3, [r7, #2]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e174      	b.n	8003766 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <HAL_SPI_TransmitReceive+0x6e>
 8003486:	2302      	movs	r3, #2
 8003488:	e16d      	b.n	8003766 <HAL_SPI_TransmitReceive+0x34a>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b04      	cmp	r3, #4
 800349c:	d003      	beq.n	80034a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2205      	movs	r2, #5
 80034a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	887a      	ldrh	r2, [r7, #2]
 80034b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	887a      	ldrh	r2, [r7, #2]
 80034bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	887a      	ldrh	r2, [r7, #2]
 80034c8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	887a      	ldrh	r2, [r7, #2]
 80034ce:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e6:	2b40      	cmp	r3, #64	@ 0x40
 80034e8:	d007      	beq.n	80034fa <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003502:	d17e      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <HAL_SPI_TransmitReceive+0xf6>
 800350c:	8afb      	ldrh	r3, [r7, #22]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d16c      	bne.n	80035ec <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003516:	881a      	ldrh	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003522:	1c9a      	adds	r2, r3, #2
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800352c:	b29b      	uxth	r3, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003536:	e059      	b.n	80035ec <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b02      	cmp	r3, #2
 8003544:	d11b      	bne.n	800357e <HAL_SPI_TransmitReceive+0x162>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d016      	beq.n	800357e <HAL_SPI_TransmitReceive+0x162>
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	2b01      	cmp	r3, #1
 8003554:	d113      	bne.n	800357e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355a:	881a      	ldrh	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003566:	1c9a      	adds	r2, r3, #2
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b01      	cmp	r3, #1
 800358a:	d119      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x1a4>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d014      	beq.n	80035c0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a0:	b292      	uxth	r2, r2
 80035a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a8:	1c9a      	adds	r2, r3, #2
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035bc:	2301      	movs	r3, #1
 80035be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035c0:	f7fe fcda 	bl	8001f78 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d80d      	bhi.n	80035ec <HAL_SPI_TransmitReceive+0x1d0>
 80035d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d6:	d009      	beq.n	80035ec <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e0bc      	b.n	8003766 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1a0      	bne.n	8003538 <HAL_SPI_TransmitReceive+0x11c>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d19b      	bne.n	8003538 <HAL_SPI_TransmitReceive+0x11c>
 8003600:	e082      	b.n	8003708 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <HAL_SPI_TransmitReceive+0x1f4>
 800360a:	8afb      	ldrh	r3, [r7, #22]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d171      	bne.n	80036f4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	330c      	adds	r3, #12
 800361a:	7812      	ldrb	r2, [r2, #0]
 800361c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003636:	e05d      	b.n	80036f4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b02      	cmp	r3, #2
 8003644:	d11c      	bne.n	8003680 <HAL_SPI_TransmitReceive+0x264>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d017      	beq.n	8003680 <HAL_SPI_TransmitReceive+0x264>
 8003650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003652:	2b01      	cmp	r3, #1
 8003654:	d114      	bne.n	8003680 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	330c      	adds	r3, #12
 8003660:	7812      	ldrb	r2, [r2, #0]
 8003662:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d119      	bne.n	80036c2 <HAL_SPI_TransmitReceive+0x2a6>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003692:	b29b      	uxth	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d014      	beq.n	80036c2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b01      	subs	r3, #1
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036be:	2301      	movs	r3, #1
 80036c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036c2:	f7fe fc59 	bl	8001f78 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d803      	bhi.n	80036da <HAL_SPI_TransmitReceive+0x2be>
 80036d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d102      	bne.n	80036e0 <HAL_SPI_TransmitReceive+0x2c4>
 80036da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d109      	bne.n	80036f4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e038      	b.n	8003766 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d19c      	bne.n	8003638 <HAL_SPI_TransmitReceive+0x21c>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d197      	bne.n	8003638 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003708:	6a3a      	ldr	r2, [r7, #32]
 800370a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 f91d 	bl	800394c <SPI_EndRxTxTransaction>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e01d      	b.n	8003766 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10a      	bne.n	8003748 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003732:	2300      	movs	r3, #0
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003764:	2300      	movs	r3, #0
  }
}
 8003766:	4618      	mov	r0, r3
 8003768:	3728      	adds	r7, #40	@ 0x28
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	4613      	mov	r3, r2
 800377e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003780:	f7fe fbfa 	bl	8001f78 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003788:	1a9b      	subs	r3, r3, r2
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	4413      	add	r3, r2
 800378e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003790:	f7fe fbf2 	bl	8001f78 <HAL_GetTick>
 8003794:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003796:	4b39      	ldr	r3, [pc, #228]	@ (800387c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	015b      	lsls	r3, r3, #5
 800379c:	0d1b      	lsrs	r3, r3, #20
 800379e:	69fa      	ldr	r2, [r7, #28]
 80037a0:	fb02 f303 	mul.w	r3, r2, r3
 80037a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037a6:	e055      	b.n	8003854 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ae:	d051      	beq.n	8003854 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037b0:	f7fe fbe2 	bl	8001f78 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d902      	bls.n	80037c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d13d      	bne.n	8003842 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80037d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037de:	d111      	bne.n	8003804 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037e8:	d004      	beq.n	80037f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037f2:	d107      	bne.n	8003804 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003802:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003808:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800380c:	d10f      	bne.n	800382e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800382c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e018      	b.n	8003874 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d102      	bne.n	800384e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	61fb      	str	r3, [r7, #28]
 800384c:	e002      	b.n	8003854 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	3b01      	subs	r3, #1
 8003852:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	4013      	ands	r3, r2
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	429a      	cmp	r2, r3
 8003862:	bf0c      	ite	eq
 8003864:	2301      	moveq	r3, #1
 8003866:	2300      	movne	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	461a      	mov	r2, r3
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	429a      	cmp	r2, r3
 8003870:	d19a      	bne.n	80037a8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3720      	adds	r7, #32
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20000018 	.word	0x20000018

08003880 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af02      	add	r7, sp, #8
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003894:	d111      	bne.n	80038ba <SPI_EndRxTransaction+0x3a>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800389e:	d004      	beq.n	80038aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038a8:	d107      	bne.n	80038ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038c2:	d12a      	bne.n	800391a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038cc:	d012      	beq.n	80038f4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2200      	movs	r2, #0
 80038d6:	2180      	movs	r1, #128	@ 0x80
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f7ff ff49 	bl	8003770 <SPI_WaitFlagStateUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d02d      	beq.n	8003940 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e026      	b.n	8003942 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2200      	movs	r2, #0
 80038fc:	2101      	movs	r1, #1
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f7ff ff36 	bl	8003770 <SPI_WaitFlagStateUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d01a      	beq.n	8003940 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390e:	f043 0220 	orr.w	r2, r3, #32
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e013      	b.n	8003942 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2200      	movs	r2, #0
 8003922:	2101      	movs	r1, #1
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f7ff ff23 	bl	8003770 <SPI_WaitFlagStateUntilTimeout>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003934:	f043 0220 	orr.w	r2, r3, #32
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e000      	b.n	8003942 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af02      	add	r7, sp, #8
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2201      	movs	r2, #1
 8003960:	2102      	movs	r1, #2
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f7ff ff04 	bl	8003770 <SPI_WaitFlagStateUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d007      	beq.n	800397e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003972:	f043 0220 	orr.w	r2, r3, #32
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e032      	b.n	80039e4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800397e:	4b1b      	ldr	r3, [pc, #108]	@ (80039ec <SPI_EndRxTxTransaction+0xa0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1b      	ldr	r2, [pc, #108]	@ (80039f0 <SPI_EndRxTxTransaction+0xa4>)
 8003984:	fba2 2303 	umull	r2, r3, r2, r3
 8003988:	0d5b      	lsrs	r3, r3, #21
 800398a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800399c:	d112      	bne.n	80039c4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2200      	movs	r2, #0
 80039a6:	2180      	movs	r1, #128	@ 0x80
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f7ff fee1 	bl	8003770 <SPI_WaitFlagStateUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d016      	beq.n	80039e2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b8:	f043 0220 	orr.w	r2, r3, #32
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e00f      	b.n	80039e4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039da:	2b80      	cmp	r3, #128	@ 0x80
 80039dc:	d0f2      	beq.n	80039c4 <SPI_EndRxTxTransaction+0x78>
 80039de:	e000      	b.n	80039e2 <SPI_EndRxTxTransaction+0x96>
        break;
 80039e0:	bf00      	nop
  }

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000018 	.word	0x20000018
 80039f0:	165e9f81 	.word	0x165e9f81

080039f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e041      	b.n	8003a8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fe f8ba 	bl	8001b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f000 fc32 	bl	800429c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d001      	beq.n	8003aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e044      	b.n	8003b36 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8003b44 <HAL_TIM_Base_Start_IT+0xb0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d018      	beq.n	8003b00 <HAL_TIM_Base_Start_IT+0x6c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad6:	d013      	beq.n	8003b00 <HAL_TIM_Base_Start_IT+0x6c>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1a      	ldr	r2, [pc, #104]	@ (8003b48 <HAL_TIM_Base_Start_IT+0xb4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00e      	beq.n	8003b00 <HAL_TIM_Base_Start_IT+0x6c>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a19      	ldr	r2, [pc, #100]	@ (8003b4c <HAL_TIM_Base_Start_IT+0xb8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d009      	beq.n	8003b00 <HAL_TIM_Base_Start_IT+0x6c>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a17      	ldr	r2, [pc, #92]	@ (8003b50 <HAL_TIM_Base_Start_IT+0xbc>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d004      	beq.n	8003b00 <HAL_TIM_Base_Start_IT+0x6c>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a16      	ldr	r2, [pc, #88]	@ (8003b54 <HAL_TIM_Base_Start_IT+0xc0>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d111      	bne.n	8003b24 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b06      	cmp	r3, #6
 8003b10:	d010      	beq.n	8003b34 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0201 	orr.w	r2, r2, #1
 8003b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b22:	e007      	b.n	8003b34 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40010000 	.word	0x40010000
 8003b48:	40000400 	.word	0x40000400
 8003b4c:	40000800 	.word	0x40000800
 8003b50:	40000c00 	.word	0x40000c00
 8003b54:	40014000 	.word	0x40014000

08003b58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e041      	b.n	8003bee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fd ffe8 	bl	8001b54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3304      	adds	r3, #4
 8003b94:	4619      	mov	r1, r3
 8003b96:	4610      	mov	r0, r2
 8003b98:	f000 fb80 	bl	800429c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d109      	bne.n	8003c1c <HAL_TIM_PWM_Start+0x24>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	bf14      	ite	ne
 8003c14:	2301      	movne	r3, #1
 8003c16:	2300      	moveq	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	e022      	b.n	8003c62 <HAL_TIM_PWM_Start+0x6a>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d109      	bne.n	8003c36 <HAL_TIM_PWM_Start+0x3e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	bf14      	ite	ne
 8003c2e:	2301      	movne	r3, #1
 8003c30:	2300      	moveq	r3, #0
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	e015      	b.n	8003c62 <HAL_TIM_PWM_Start+0x6a>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d109      	bne.n	8003c50 <HAL_TIM_PWM_Start+0x58>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	bf14      	ite	ne
 8003c48:	2301      	movne	r3, #1
 8003c4a:	2300      	moveq	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	e008      	b.n	8003c62 <HAL_TIM_PWM_Start+0x6a>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	bf14      	ite	ne
 8003c5c:	2301      	movne	r3, #1
 8003c5e:	2300      	moveq	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e068      	b.n	8003d3c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d104      	bne.n	8003c7a <HAL_TIM_PWM_Start+0x82>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c78:	e013      	b.n	8003ca2 <HAL_TIM_PWM_Start+0xaa>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d104      	bne.n	8003c8a <HAL_TIM_PWM_Start+0x92>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c88:	e00b      	b.n	8003ca2 <HAL_TIM_PWM_Start+0xaa>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d104      	bne.n	8003c9a <HAL_TIM_PWM_Start+0xa2>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c98:	e003      	b.n	8003ca2 <HAL_TIM_PWM_Start+0xaa>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	6839      	ldr	r1, [r7, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fda2 	bl	80047f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a23      	ldr	r2, [pc, #140]	@ (8003d44 <HAL_TIM_PWM_Start+0x14c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d107      	bne.n	8003cca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1d      	ldr	r2, [pc, #116]	@ (8003d44 <HAL_TIM_PWM_Start+0x14c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d018      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x10e>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cdc:	d013      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x10e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a19      	ldr	r2, [pc, #100]	@ (8003d48 <HAL_TIM_PWM_Start+0x150>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00e      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x10e>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a17      	ldr	r2, [pc, #92]	@ (8003d4c <HAL_TIM_PWM_Start+0x154>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d009      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x10e>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a16      	ldr	r2, [pc, #88]	@ (8003d50 <HAL_TIM_PWM_Start+0x158>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d004      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x10e>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a14      	ldr	r2, [pc, #80]	@ (8003d54 <HAL_TIM_PWM_Start+0x15c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d111      	bne.n	8003d2a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b06      	cmp	r3, #6
 8003d16:	d010      	beq.n	8003d3a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d28:	e007      	b.n	8003d3a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f042 0201 	orr.w	r2, r2, #1
 8003d38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40010000 	.word	0x40010000
 8003d48:	40000400 	.word	0x40000400
 8003d4c:	40000800 	.word	0x40000800
 8003d50:	40000c00 	.word	0x40000c00
 8003d54:	40014000 	.word	0x40014000

08003d58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d020      	beq.n	8003dbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01b      	beq.n	8003dbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0202 	mvn.w	r2, #2
 8003d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fa5b 	bl	800425e <HAL_TIM_IC_CaptureCallback>
 8003da8:	e005      	b.n	8003db6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fa4d 	bl	800424a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fa5e 	bl	8004272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d020      	beq.n	8003e08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01b      	beq.n	8003e08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f06f 0204 	mvn.w	r2, #4
 8003dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fa35 	bl	800425e <HAL_TIM_IC_CaptureCallback>
 8003df4:	e005      	b.n	8003e02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fa27 	bl	800424a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 fa38 	bl	8004272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d020      	beq.n	8003e54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01b      	beq.n	8003e54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f06f 0208 	mvn.w	r2, #8
 8003e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2204      	movs	r2, #4
 8003e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fa0f 	bl	800425e <HAL_TIM_IC_CaptureCallback>
 8003e40:	e005      	b.n	8003e4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 fa01 	bl	800424a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 fa12 	bl	8004272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f003 0310 	and.w	r3, r3, #16
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d020      	beq.n	8003ea0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d01b      	beq.n	8003ea0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f06f 0210 	mvn.w	r2, #16
 8003e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2208      	movs	r2, #8
 8003e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f9e9 	bl	800425e <HAL_TIM_IC_CaptureCallback>
 8003e8c:	e005      	b.n	8003e9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f9db 	bl	800424a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f9ec 	bl	8004272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00c      	beq.n	8003ec4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d007      	beq.n	8003ec4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0201 	mvn.w	r2, #1
 8003ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7fd fa26 	bl	8001310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00c      	beq.n	8003ee8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d007      	beq.n	8003ee8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fd24 	bl	8004930 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00c      	beq.n	8003f0c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d007      	beq.n	8003f0c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f9bd 	bl	8004286 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00c      	beq.n	8003f30 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f003 0320 	and.w	r3, r3, #32
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d007      	beq.n	8003f30 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0220 	mvn.w	r2, #32
 8003f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fcf6 	bl	800491c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f30:	bf00      	nop
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f52:	2302      	movs	r3, #2
 8003f54:	e0ae      	b.n	80040b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b0c      	cmp	r3, #12
 8003f62:	f200 809f 	bhi.w	80040a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f66:	a201      	add	r2, pc, #4	@ (adr r2, 8003f6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6c:	08003fa1 	.word	0x08003fa1
 8003f70:	080040a5 	.word	0x080040a5
 8003f74:	080040a5 	.word	0x080040a5
 8003f78:	080040a5 	.word	0x080040a5
 8003f7c:	08003fe1 	.word	0x08003fe1
 8003f80:	080040a5 	.word	0x080040a5
 8003f84:	080040a5 	.word	0x080040a5
 8003f88:	080040a5 	.word	0x080040a5
 8003f8c:	08004023 	.word	0x08004023
 8003f90:	080040a5 	.word	0x080040a5
 8003f94:	080040a5 	.word	0x080040a5
 8003f98:	080040a5 	.word	0x080040a5
 8003f9c:	08004063 	.word	0x08004063
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68b9      	ldr	r1, [r7, #8]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f9fe 	bl	80043a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699a      	ldr	r2, [r3, #24]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0208 	orr.w	r2, r2, #8
 8003fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0204 	bic.w	r2, r2, #4
 8003fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6999      	ldr	r1, [r3, #24]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	619a      	str	r2, [r3, #24]
      break;
 8003fde:	e064      	b.n	80040aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68b9      	ldr	r1, [r7, #8]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fa44 	bl	8004474 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800400a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6999      	ldr	r1, [r3, #24]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	021a      	lsls	r2, r3, #8
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	619a      	str	r2, [r3, #24]
      break;
 8004020:	e043      	b.n	80040aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fa8f 	bl	800454c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	69da      	ldr	r2, [r3, #28]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0208 	orr.w	r2, r2, #8
 800403c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69da      	ldr	r2, [r3, #28]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0204 	bic.w	r2, r2, #4
 800404c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69d9      	ldr	r1, [r3, #28]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	61da      	str	r2, [r3, #28]
      break;
 8004060:	e023      	b.n	80040aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68b9      	ldr	r1, [r7, #8]
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fad9 	bl	8004620 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69da      	ldr	r2, [r3, #28]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800407c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	69da      	ldr	r2, [r3, #28]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800408c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	69d9      	ldr	r1, [r3, #28]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	021a      	lsls	r2, r3, #8
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	61da      	str	r2, [r3, #28]
      break;
 80040a2:	e002      	b.n	80040aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	75fb      	strb	r3, [r7, #23]
      break;
 80040a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_TIM_ConfigClockSource+0x1c>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e0b4      	b.n	8004242 <HAL_TIM_ConfigClockSource+0x186>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004110:	d03e      	beq.n	8004190 <HAL_TIM_ConfigClockSource+0xd4>
 8004112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004116:	f200 8087 	bhi.w	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 800411a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800411e:	f000 8086 	beq.w	800422e <HAL_TIM_ConfigClockSource+0x172>
 8004122:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004126:	d87f      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 8004128:	2b70      	cmp	r3, #112	@ 0x70
 800412a:	d01a      	beq.n	8004162 <HAL_TIM_ConfigClockSource+0xa6>
 800412c:	2b70      	cmp	r3, #112	@ 0x70
 800412e:	d87b      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 8004130:	2b60      	cmp	r3, #96	@ 0x60
 8004132:	d050      	beq.n	80041d6 <HAL_TIM_ConfigClockSource+0x11a>
 8004134:	2b60      	cmp	r3, #96	@ 0x60
 8004136:	d877      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 8004138:	2b50      	cmp	r3, #80	@ 0x50
 800413a:	d03c      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0xfa>
 800413c:	2b50      	cmp	r3, #80	@ 0x50
 800413e:	d873      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 8004140:	2b40      	cmp	r3, #64	@ 0x40
 8004142:	d058      	beq.n	80041f6 <HAL_TIM_ConfigClockSource+0x13a>
 8004144:	2b40      	cmp	r3, #64	@ 0x40
 8004146:	d86f      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 8004148:	2b30      	cmp	r3, #48	@ 0x30
 800414a:	d064      	beq.n	8004216 <HAL_TIM_ConfigClockSource+0x15a>
 800414c:	2b30      	cmp	r3, #48	@ 0x30
 800414e:	d86b      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 8004150:	2b20      	cmp	r3, #32
 8004152:	d060      	beq.n	8004216 <HAL_TIM_ConfigClockSource+0x15a>
 8004154:	2b20      	cmp	r3, #32
 8004156:	d867      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d05c      	beq.n	8004216 <HAL_TIM_ConfigClockSource+0x15a>
 800415c:	2b10      	cmp	r3, #16
 800415e:	d05a      	beq.n	8004216 <HAL_TIM_ConfigClockSource+0x15a>
 8004160:	e062      	b.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004172:	f000 fb1f 	bl	80047b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004184:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	609a      	str	r2, [r3, #8]
      break;
 800418e:	e04f      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041a0:	f000 fb08 	bl	80047b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689a      	ldr	r2, [r3, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041b2:	609a      	str	r2, [r3, #8]
      break;
 80041b4:	e03c      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c2:	461a      	mov	r2, r3
 80041c4:	f000 fa7c 	bl	80046c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2150      	movs	r1, #80	@ 0x50
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fad5 	bl	800477e <TIM_ITRx_SetConfig>
      break;
 80041d4:	e02c      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041e2:	461a      	mov	r2, r3
 80041e4:	f000 fa9b 	bl	800471e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2160      	movs	r1, #96	@ 0x60
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fac5 	bl	800477e <TIM_ITRx_SetConfig>
      break;
 80041f4:	e01c      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004202:	461a      	mov	r2, r3
 8004204:	f000 fa5c 	bl	80046c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2140      	movs	r1, #64	@ 0x40
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fab5 	bl	800477e <TIM_ITRx_SetConfig>
      break;
 8004214:	e00c      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4619      	mov	r1, r3
 8004220:	4610      	mov	r0, r2
 8004222:	f000 faac 	bl	800477e <TIM_ITRx_SetConfig>
      break;
 8004226:	e003      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	73fb      	strb	r3, [r7, #15]
      break;
 800422c:	e000      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800422e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004240:	7bfb      	ldrb	r3, [r7, #15]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
	...

0800429c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a37      	ldr	r2, [pc, #220]	@ (800438c <TIM_Base_SetConfig+0xf0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00f      	beq.n	80042d4 <TIM_Base_SetConfig+0x38>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ba:	d00b      	beq.n	80042d4 <TIM_Base_SetConfig+0x38>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a34      	ldr	r2, [pc, #208]	@ (8004390 <TIM_Base_SetConfig+0xf4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d007      	beq.n	80042d4 <TIM_Base_SetConfig+0x38>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a33      	ldr	r2, [pc, #204]	@ (8004394 <TIM_Base_SetConfig+0xf8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d003      	beq.n	80042d4 <TIM_Base_SetConfig+0x38>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a32      	ldr	r2, [pc, #200]	@ (8004398 <TIM_Base_SetConfig+0xfc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d108      	bne.n	80042e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a28      	ldr	r2, [pc, #160]	@ (800438c <TIM_Base_SetConfig+0xf0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d01b      	beq.n	8004326 <TIM_Base_SetConfig+0x8a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f4:	d017      	beq.n	8004326 <TIM_Base_SetConfig+0x8a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a25      	ldr	r2, [pc, #148]	@ (8004390 <TIM_Base_SetConfig+0xf4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d013      	beq.n	8004326 <TIM_Base_SetConfig+0x8a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a24      	ldr	r2, [pc, #144]	@ (8004394 <TIM_Base_SetConfig+0xf8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00f      	beq.n	8004326 <TIM_Base_SetConfig+0x8a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a23      	ldr	r2, [pc, #140]	@ (8004398 <TIM_Base_SetConfig+0xfc>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00b      	beq.n	8004326 <TIM_Base_SetConfig+0x8a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a22      	ldr	r2, [pc, #136]	@ (800439c <TIM_Base_SetConfig+0x100>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d007      	beq.n	8004326 <TIM_Base_SetConfig+0x8a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a21      	ldr	r2, [pc, #132]	@ (80043a0 <TIM_Base_SetConfig+0x104>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d003      	beq.n	8004326 <TIM_Base_SetConfig+0x8a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a20      	ldr	r2, [pc, #128]	@ (80043a4 <TIM_Base_SetConfig+0x108>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d108      	bne.n	8004338 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800432c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a0c      	ldr	r2, [pc, #48]	@ (800438c <TIM_Base_SetConfig+0xf0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d103      	bne.n	8004366 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f043 0204 	orr.w	r2, r3, #4
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	601a      	str	r2, [r3, #0]
}
 800437e:	bf00      	nop
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40010000 	.word	0x40010000
 8004390:	40000400 	.word	0x40000400
 8004394:	40000800 	.word	0x40000800
 8004398:	40000c00 	.word	0x40000c00
 800439c:	40014000 	.word	0x40014000
 80043a0:	40014400 	.word	0x40014400
 80043a4:	40014800 	.word	0x40014800

080043a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	f023 0201 	bic.w	r2, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0303 	bic.w	r3, r3, #3
 80043de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f023 0302 	bic.w	r3, r3, #2
 80043f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004470 <TIM_OC1_SetConfig+0xc8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d10c      	bne.n	800441e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f023 0308 	bic.w	r3, r3, #8
 800440a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	4313      	orrs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f023 0304 	bic.w	r3, r3, #4
 800441c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a13      	ldr	r2, [pc, #76]	@ (8004470 <TIM_OC1_SetConfig+0xc8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d111      	bne.n	800444a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800442c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	621a      	str	r2, [r3, #32]
}
 8004464:	bf00      	nop
 8004466:	371c      	adds	r7, #28
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	40010000 	.word	0x40010000

08004474 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	f023 0210 	bic.w	r2, r3, #16
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	021b      	lsls	r3, r3, #8
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f023 0320 	bic.w	r3, r3, #32
 80044be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004548 <TIM_OC2_SetConfig+0xd4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d10d      	bne.n	80044f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a15      	ldr	r2, [pc, #84]	@ (8004548 <TIM_OC2_SetConfig+0xd4>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d113      	bne.n	8004520 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004506:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	621a      	str	r2, [r3, #32]
}
 800453a:	bf00      	nop
 800453c:	371c      	adds	r7, #28
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40010000 	.word	0x40010000

0800454c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800457a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0303 	bic.w	r3, r3, #3
 8004582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	021b      	lsls	r3, r3, #8
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a1d      	ldr	r2, [pc, #116]	@ (800461c <TIM_OC3_SetConfig+0xd0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d10d      	bne.n	80045c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	021b      	lsls	r3, r3, #8
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a14      	ldr	r2, [pc, #80]	@ (800461c <TIM_OC3_SetConfig+0xd0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d113      	bne.n	80045f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	621a      	str	r2, [r3, #32]
}
 8004610:	bf00      	nop
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	40010000 	.word	0x40010000

08004620 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800464e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800466a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	031b      	lsls	r3, r3, #12
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a10      	ldr	r2, [pc, #64]	@ (80046bc <TIM_OC4_SetConfig+0x9c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d109      	bne.n	8004694 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004686:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	019b      	lsls	r3, r3, #6
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	621a      	str	r2, [r3, #32]
}
 80046ae:	bf00      	nop
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40010000 	.word	0x40010000

080046c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	f023 0201 	bic.w	r2, r3, #1
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f023 030a 	bic.w	r3, r3, #10
 80046fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	621a      	str	r2, [r3, #32]
}
 8004712:	bf00      	nop
 8004714:	371c      	adds	r7, #28
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800471e:	b480      	push	{r7}
 8004720:	b087      	sub	sp, #28
 8004722:	af00      	add	r7, sp, #0
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	f023 0210 	bic.w	r2, r3, #16
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004748:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	031b      	lsls	r3, r3, #12
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800475a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	621a      	str	r2, [r3, #32]
}
 8004772:	bf00      	nop
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004794:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	f043 0307 	orr.w	r3, r3, #7
 80047a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	609a      	str	r2, [r3, #8]
}
 80047a8:	bf00      	nop
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
 80047c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	021a      	lsls	r2, r3, #8
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4313      	orrs	r3, r2
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	609a      	str	r2, [r3, #8]
}
 80047e8:	bf00      	nop
 80047ea:	371c      	adds	r7, #28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f003 031f 	and.w	r3, r3, #31
 8004806:	2201      	movs	r2, #1
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a1a      	ldr	r2, [r3, #32]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	43db      	mvns	r3, r3
 8004816:	401a      	ands	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a1a      	ldr	r2, [r3, #32]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	fa01 f303 	lsl.w	r3, r1, r3
 800482c:	431a      	orrs	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	621a      	str	r2, [r3, #32]
}
 8004832:	bf00      	nop
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
	...

08004840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004854:	2302      	movs	r3, #2
 8004856:	e050      	b.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800487e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a1c      	ldr	r2, [pc, #112]	@ (8004908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d018      	beq.n	80048ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048a4:	d013      	beq.n	80048ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a18      	ldr	r2, [pc, #96]	@ (800490c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00e      	beq.n	80048ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a16      	ldr	r2, [pc, #88]	@ (8004910 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d009      	beq.n	80048ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a15      	ldr	r2, [pc, #84]	@ (8004914 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a13      	ldr	r2, [pc, #76]	@ (8004918 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d10c      	bne.n	80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40010000 	.word	0x40010000
 800490c:	40000400 	.word	0x40000400
 8004910:	40000800 	.word	0x40000800
 8004914:	40000c00 	.word	0x40000c00
 8004918:	40014000 	.word	0x40014000

0800491c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e042      	b.n	80049dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fd f972 	bl	8001c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2224      	movs	r2, #36	@ 0x24
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004986:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f82b 	bl	80049e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800499c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695a      	ldr	r2, [r3, #20]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e8:	b0c0      	sub	sp, #256	@ 0x100
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a00:	68d9      	ldr	r1, [r3, #12]
 8004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	ea40 0301 	orr.w	r3, r0, r1
 8004a0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	431a      	orrs	r2, r3
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a3c:	f021 010c 	bic.w	r1, r1, #12
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a4a:	430b      	orrs	r3, r1
 8004a4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a5e:	6999      	ldr	r1, [r3, #24]
 8004a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	ea40 0301 	orr.w	r3, r0, r1
 8004a6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	4b8f      	ldr	r3, [pc, #572]	@ (8004cb0 <UART_SetConfig+0x2cc>)
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d005      	beq.n	8004a84 <UART_SetConfig+0xa0>
 8004a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	4b8d      	ldr	r3, [pc, #564]	@ (8004cb4 <UART_SetConfig+0x2d0>)
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d104      	bne.n	8004a8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a84:	f7fe f99e 	bl	8002dc4 <HAL_RCC_GetPCLK2Freq>
 8004a88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a8c:	e003      	b.n	8004a96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a8e:	f7fe f985 	bl	8002d9c <HAL_RCC_GetPCLK1Freq>
 8004a92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aa0:	f040 810c 	bne.w	8004cbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004aa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004aae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004ab2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004ab6:	4622      	mov	r2, r4
 8004ab8:	462b      	mov	r3, r5
 8004aba:	1891      	adds	r1, r2, r2
 8004abc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004abe:	415b      	adcs	r3, r3
 8004ac0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ac2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	eb12 0801 	adds.w	r8, r2, r1
 8004acc:	4629      	mov	r1, r5
 8004ace:	eb43 0901 	adc.w	r9, r3, r1
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ade:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ae2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ae6:	4690      	mov	r8, r2
 8004ae8:	4699      	mov	r9, r3
 8004aea:	4623      	mov	r3, r4
 8004aec:	eb18 0303 	adds.w	r3, r8, r3
 8004af0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004af4:	462b      	mov	r3, r5
 8004af6:	eb49 0303 	adc.w	r3, r9, r3
 8004afa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004b0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b12:	460b      	mov	r3, r1
 8004b14:	18db      	adds	r3, r3, r3
 8004b16:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b18:	4613      	mov	r3, r2
 8004b1a:	eb42 0303 	adc.w	r3, r2, r3
 8004b1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b28:	f7fb fbaa 	bl	8000280 <__aeabi_uldivmod>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4b61      	ldr	r3, [pc, #388]	@ (8004cb8 <UART_SetConfig+0x2d4>)
 8004b32:	fba3 2302 	umull	r2, r3, r3, r2
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	011c      	lsls	r4, r3, #4
 8004b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b4c:	4642      	mov	r2, r8
 8004b4e:	464b      	mov	r3, r9
 8004b50:	1891      	adds	r1, r2, r2
 8004b52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b54:	415b      	adcs	r3, r3
 8004b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b5c:	4641      	mov	r1, r8
 8004b5e:	eb12 0a01 	adds.w	sl, r2, r1
 8004b62:	4649      	mov	r1, r9
 8004b64:	eb43 0b01 	adc.w	fp, r3, r1
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b7c:	4692      	mov	sl, r2
 8004b7e:	469b      	mov	fp, r3
 8004b80:	4643      	mov	r3, r8
 8004b82:	eb1a 0303 	adds.w	r3, sl, r3
 8004b86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b8a:	464b      	mov	r3, r9
 8004b8c:	eb4b 0303 	adc.w	r3, fp, r3
 8004b90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ba0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ba4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	18db      	adds	r3, r3, r3
 8004bac:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bae:	4613      	mov	r3, r2
 8004bb0:	eb42 0303 	adc.w	r3, r2, r3
 8004bb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004bba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004bbe:	f7fb fb5f 	bl	8000280 <__aeabi_uldivmod>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8004cb8 <UART_SetConfig+0x2d4>)
 8004bca:	fba3 2301 	umull	r2, r3, r3, r1
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	2264      	movs	r2, #100	@ 0x64
 8004bd2:	fb02 f303 	mul.w	r3, r2, r3
 8004bd6:	1acb      	subs	r3, r1, r3
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004bde:	4b36      	ldr	r3, [pc, #216]	@ (8004cb8 <UART_SetConfig+0x2d4>)
 8004be0:	fba3 2302 	umull	r2, r3, r3, r2
 8004be4:	095b      	lsrs	r3, r3, #5
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004bec:	441c      	add	r4, r3
 8004bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bf8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004bfc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004c00:	4642      	mov	r2, r8
 8004c02:	464b      	mov	r3, r9
 8004c04:	1891      	adds	r1, r2, r2
 8004c06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c08:	415b      	adcs	r3, r3
 8004c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c10:	4641      	mov	r1, r8
 8004c12:	1851      	adds	r1, r2, r1
 8004c14:	6339      	str	r1, [r7, #48]	@ 0x30
 8004c16:	4649      	mov	r1, r9
 8004c18:	414b      	adcs	r3, r1
 8004c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c28:	4659      	mov	r1, fp
 8004c2a:	00cb      	lsls	r3, r1, #3
 8004c2c:	4651      	mov	r1, sl
 8004c2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c32:	4651      	mov	r1, sl
 8004c34:	00ca      	lsls	r2, r1, #3
 8004c36:	4610      	mov	r0, r2
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	4642      	mov	r2, r8
 8004c3e:	189b      	adds	r3, r3, r2
 8004c40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c44:	464b      	mov	r3, r9
 8004c46:	460a      	mov	r2, r1
 8004c48:	eb42 0303 	adc.w	r3, r2, r3
 8004c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c5c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c64:	460b      	mov	r3, r1
 8004c66:	18db      	adds	r3, r3, r3
 8004c68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	eb42 0303 	adc.w	r3, r2, r3
 8004c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c7a:	f7fb fb01 	bl	8000280 <__aeabi_uldivmod>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb8 <UART_SetConfig+0x2d4>)
 8004c84:	fba3 1302 	umull	r1, r3, r3, r2
 8004c88:	095b      	lsrs	r3, r3, #5
 8004c8a:	2164      	movs	r1, #100	@ 0x64
 8004c8c:	fb01 f303 	mul.w	r3, r1, r3
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	3332      	adds	r3, #50	@ 0x32
 8004c96:	4a08      	ldr	r2, [pc, #32]	@ (8004cb8 <UART_SetConfig+0x2d4>)
 8004c98:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	f003 0207 	and.w	r2, r3, #7
 8004ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4422      	add	r2, r4
 8004caa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cac:	e106      	b.n	8004ebc <UART_SetConfig+0x4d8>
 8004cae:	bf00      	nop
 8004cb0:	40011000 	.word	0x40011000
 8004cb4:	40011400 	.word	0x40011400
 8004cb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004cc6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004cca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004cce:	4642      	mov	r2, r8
 8004cd0:	464b      	mov	r3, r9
 8004cd2:	1891      	adds	r1, r2, r2
 8004cd4:	6239      	str	r1, [r7, #32]
 8004cd6:	415b      	adcs	r3, r3
 8004cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cde:	4641      	mov	r1, r8
 8004ce0:	1854      	adds	r4, r2, r1
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	eb43 0501 	adc.w	r5, r3, r1
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	00eb      	lsls	r3, r5, #3
 8004cf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cf6:	00e2      	lsls	r2, r4, #3
 8004cf8:	4614      	mov	r4, r2
 8004cfa:	461d      	mov	r5, r3
 8004cfc:	4643      	mov	r3, r8
 8004cfe:	18e3      	adds	r3, r4, r3
 8004d00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d04:	464b      	mov	r3, r9
 8004d06:	eb45 0303 	adc.w	r3, r5, r3
 8004d0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d2a:	4629      	mov	r1, r5
 8004d2c:	008b      	lsls	r3, r1, #2
 8004d2e:	4621      	mov	r1, r4
 8004d30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d34:	4621      	mov	r1, r4
 8004d36:	008a      	lsls	r2, r1, #2
 8004d38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d3c:	f7fb faa0 	bl	8000280 <__aeabi_uldivmod>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4b60      	ldr	r3, [pc, #384]	@ (8004ec8 <UART_SetConfig+0x4e4>)
 8004d46:	fba3 2302 	umull	r2, r3, r3, r2
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	011c      	lsls	r4, r3, #4
 8004d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d52:	2200      	movs	r2, #0
 8004d54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d60:	4642      	mov	r2, r8
 8004d62:	464b      	mov	r3, r9
 8004d64:	1891      	adds	r1, r2, r2
 8004d66:	61b9      	str	r1, [r7, #24]
 8004d68:	415b      	adcs	r3, r3
 8004d6a:	61fb      	str	r3, [r7, #28]
 8004d6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d70:	4641      	mov	r1, r8
 8004d72:	1851      	adds	r1, r2, r1
 8004d74:	6139      	str	r1, [r7, #16]
 8004d76:	4649      	mov	r1, r9
 8004d78:	414b      	adcs	r3, r1
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d88:	4659      	mov	r1, fp
 8004d8a:	00cb      	lsls	r3, r1, #3
 8004d8c:	4651      	mov	r1, sl
 8004d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d92:	4651      	mov	r1, sl
 8004d94:	00ca      	lsls	r2, r1, #3
 8004d96:	4610      	mov	r0, r2
 8004d98:	4619      	mov	r1, r3
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	4642      	mov	r2, r8
 8004d9e:	189b      	adds	r3, r3, r2
 8004da0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004da4:	464b      	mov	r3, r9
 8004da6:	460a      	mov	r2, r1
 8004da8:	eb42 0303 	adc.w	r3, r2, r3
 8004dac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004dba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	f04f 0300 	mov.w	r3, #0
 8004dc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004dc8:	4649      	mov	r1, r9
 8004dca:	008b      	lsls	r3, r1, #2
 8004dcc:	4641      	mov	r1, r8
 8004dce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dd2:	4641      	mov	r1, r8
 8004dd4:	008a      	lsls	r2, r1, #2
 8004dd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004dda:	f7fb fa51 	bl	8000280 <__aeabi_uldivmod>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4611      	mov	r1, r2
 8004de4:	4b38      	ldr	r3, [pc, #224]	@ (8004ec8 <UART_SetConfig+0x4e4>)
 8004de6:	fba3 2301 	umull	r2, r3, r3, r1
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	2264      	movs	r2, #100	@ 0x64
 8004dee:	fb02 f303 	mul.w	r3, r2, r3
 8004df2:	1acb      	subs	r3, r1, r3
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	3332      	adds	r3, #50	@ 0x32
 8004df8:	4a33      	ldr	r2, [pc, #204]	@ (8004ec8 <UART_SetConfig+0x4e4>)
 8004dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e04:	441c      	add	r4, r3
 8004e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004e14:	4642      	mov	r2, r8
 8004e16:	464b      	mov	r3, r9
 8004e18:	1891      	adds	r1, r2, r2
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	415b      	adcs	r3, r3
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e24:	4641      	mov	r1, r8
 8004e26:	1851      	adds	r1, r2, r1
 8004e28:	6039      	str	r1, [r7, #0]
 8004e2a:	4649      	mov	r1, r9
 8004e2c:	414b      	adcs	r3, r1
 8004e2e:	607b      	str	r3, [r7, #4]
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e3c:	4659      	mov	r1, fp
 8004e3e:	00cb      	lsls	r3, r1, #3
 8004e40:	4651      	mov	r1, sl
 8004e42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e46:	4651      	mov	r1, sl
 8004e48:	00ca      	lsls	r2, r1, #3
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4603      	mov	r3, r0
 8004e50:	4642      	mov	r2, r8
 8004e52:	189b      	adds	r3, r3, r2
 8004e54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e56:	464b      	mov	r3, r9
 8004e58:	460a      	mov	r2, r1
 8004e5a:	eb42 0303 	adc.w	r3, r2, r3
 8004e5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e78:	4649      	mov	r1, r9
 8004e7a:	008b      	lsls	r3, r1, #2
 8004e7c:	4641      	mov	r1, r8
 8004e7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e82:	4641      	mov	r1, r8
 8004e84:	008a      	lsls	r2, r1, #2
 8004e86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e8a:	f7fb f9f9 	bl	8000280 <__aeabi_uldivmod>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec8 <UART_SetConfig+0x4e4>)
 8004e94:	fba3 1302 	umull	r1, r3, r3, r2
 8004e98:	095b      	lsrs	r3, r3, #5
 8004e9a:	2164      	movs	r1, #100	@ 0x64
 8004e9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	011b      	lsls	r3, r3, #4
 8004ea4:	3332      	adds	r3, #50	@ 0x32
 8004ea6:	4a08      	ldr	r2, [pc, #32]	@ (8004ec8 <UART_SetConfig+0x4e4>)
 8004ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	f003 020f 	and.w	r2, r3, #15
 8004eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4422      	add	r2, r4
 8004eba:	609a      	str	r2, [r3, #8]
}
 8004ebc:	bf00      	nop
 8004ebe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ec8:	51eb851f 	.word	0x51eb851f

08004ecc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ede:	2b84      	cmp	r3, #132	@ 0x84
 8004ee0:	d005      	beq.n	8004eee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004ee2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4413      	add	r3, r2
 8004eea:	3303      	adds	r3, #3
 8004eec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004eee:	68fb      	ldr	r3, [r7, #12]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f00:	f000 fafc 	bl	80054fc <vTaskStartScheduler>
  
  return osOK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f0c:	b089      	sub	sp, #36	@ 0x24
 8004f0e:	af04      	add	r7, sp, #16
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d020      	beq.n	8004f5e <osThreadCreate+0x54>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d01c      	beq.n	8004f5e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685c      	ldr	r4, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691e      	ldr	r6, [r3, #16]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff ffc8 	bl	8004ecc <makeFreeRtosPriority>
 8004f3c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f46:	9202      	str	r2, [sp, #8]
 8004f48:	9301      	str	r3, [sp, #4]
 8004f4a:	9100      	str	r1, [sp, #0]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	4632      	mov	r2, r6
 8004f50:	4629      	mov	r1, r5
 8004f52:	4620      	mov	r0, r4
 8004f54:	f000 f8ed 	bl	8005132 <xTaskCreateStatic>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	e01c      	b.n	8004f98 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685c      	ldr	r4, [r3, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f6a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7ff ffaa 	bl	8004ecc <makeFreeRtosPriority>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	f107 030c 	add.w	r3, r7, #12
 8004f7e:	9301      	str	r3, [sp, #4]
 8004f80:	9200      	str	r2, [sp, #0]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	4632      	mov	r2, r6
 8004f86:	4629      	mov	r1, r5
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f000 f932 	bl	80051f2 <xTaskCreate>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d001      	beq.n	8004f98 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004f94:	2300      	movs	r3, #0
 8004f96:	e000      	b.n	8004f9a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004f98:	68fb      	ldr	r3, [r7, #12]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fa2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <osDelay+0x16>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	e000      	b.n	8004fba <osDelay+0x18>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fa68 	bl	8005490 <vTaskDelay>
  
  return osOK;
 8004fc0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f103 0208 	add.w	r2, r3, #8
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f103 0208 	add.w	r2, r3, #8
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f103 0208 	add.w	r2, r3, #8
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	601a      	str	r2, [r3, #0]
}
 8005060:	bf00      	nop
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005082:	d103      	bne.n	800508c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	e00c      	b.n	80050a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3308      	adds	r3, #8
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	e002      	b.n	800509a <vListInsert+0x2e>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d2f6      	bcs.n	8005094 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	601a      	str	r2, [r3, #0]
}
 80050d2:	bf00      	nop
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050de:	b480      	push	{r7}
 80050e0:	b085      	sub	sp, #20
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6892      	ldr	r2, [r2, #8]
 80050f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6852      	ldr	r2, [r2, #4]
 80050fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	429a      	cmp	r2, r3
 8005108:	d103      	bne.n	8005112 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	1e5a      	subs	r2, r3, #1
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005132:	b580      	push	{r7, lr}
 8005134:	b08e      	sub	sp, #56	@ 0x38
 8005136:	af04      	add	r7, sp, #16
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	607a      	str	r2, [r7, #4]
 800513e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10b      	bne.n	800515e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005158:	bf00      	nop
 800515a:	bf00      	nop
 800515c:	e7fd      	b.n	800515a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800515e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10b      	bne.n	800517c <xTaskCreateStatic+0x4a>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	61fb      	str	r3, [r7, #28]
}
 8005176:	bf00      	nop
 8005178:	bf00      	nop
 800517a:	e7fd      	b.n	8005178 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800517c:	23a0      	movs	r3, #160	@ 0xa0
 800517e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2ba0      	cmp	r3, #160	@ 0xa0
 8005184:	d00b      	beq.n	800519e <xTaskCreateStatic+0x6c>
	__asm volatile
 8005186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	61bb      	str	r3, [r7, #24]
}
 8005198:	bf00      	nop
 800519a:	bf00      	nop
 800519c:	e7fd      	b.n	800519a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800519e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d01e      	beq.n	80051e4 <xTaskCreateStatic+0xb2>
 80051a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01b      	beq.n	80051e4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ae:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051b4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b8:	2202      	movs	r2, #2
 80051ba:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051be:	2300      	movs	r3, #0
 80051c0:	9303      	str	r3, [sp, #12]
 80051c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c4:	9302      	str	r3, [sp, #8]
 80051c6:	f107 0314 	add.w	r3, r7, #20
 80051ca:	9301      	str	r3, [sp, #4]
 80051cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	68b9      	ldr	r1, [r7, #8]
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 f850 	bl	800527c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80051de:	f000 f8ed 	bl	80053bc <prvAddNewTaskToReadyList>
 80051e2:	e001      	b.n	80051e8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051e8:	697b      	ldr	r3, [r7, #20]
	}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3728      	adds	r7, #40	@ 0x28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b08c      	sub	sp, #48	@ 0x30
 80051f6:	af04      	add	r7, sp, #16
 80051f8:	60f8      	str	r0, [r7, #12]
 80051fa:	60b9      	str	r1, [r7, #8]
 80051fc:	603b      	str	r3, [r7, #0]
 80051fe:	4613      	mov	r3, r2
 8005200:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005202:	88fb      	ldrh	r3, [r7, #6]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fefe 	bl	8006008 <pvPortMalloc>
 800520c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00e      	beq.n	8005232 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005214:	20a0      	movs	r0, #160	@ 0xa0
 8005216:	f000 fef7 	bl	8006008 <pvPortMalloc>
 800521a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	631a      	str	r2, [r3, #48]	@ 0x30
 8005228:	e005      	b.n	8005236 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800522a:	6978      	ldr	r0, [r7, #20]
 800522c:	f000 ffba 	bl	80061a4 <vPortFree>
 8005230:	e001      	b.n	8005236 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005232:	2300      	movs	r3, #0
 8005234:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d017      	beq.n	800526c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005244:	88fa      	ldrh	r2, [r7, #6]
 8005246:	2300      	movs	r3, #0
 8005248:	9303      	str	r3, [sp, #12]
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	9302      	str	r3, [sp, #8]
 800524e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005250:	9301      	str	r3, [sp, #4]
 8005252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68b9      	ldr	r1, [r7, #8]
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f80e 	bl	800527c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005260:	69f8      	ldr	r0, [r7, #28]
 8005262:	f000 f8ab 	bl	80053bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005266:	2301      	movs	r3, #1
 8005268:	61bb      	str	r3, [r7, #24]
 800526a:	e002      	b.n	8005272 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800526c:	f04f 33ff 	mov.w	r3, #4294967295
 8005270:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005272:	69bb      	ldr	r3, [r7, #24]
	}
 8005274:	4618      	mov	r0, r3
 8005276:	3720      	adds	r7, #32
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b088      	sub	sp, #32
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
 8005288:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800528a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005294:	3b01      	subs	r3, #1
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	f023 0307 	bic.w	r3, r3, #7
 80052a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	617b      	str	r3, [r7, #20]
}
 80052c0:	bf00      	nop
 80052c2:	bf00      	nop
 80052c4:	e7fd      	b.n	80052c2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d01f      	beq.n	800530c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052cc:	2300      	movs	r3, #0
 80052ce:	61fb      	str	r3, [r7, #28]
 80052d0:	e012      	b.n	80052f8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	4413      	add	r3, r2
 80052d8:	7819      	ldrb	r1, [r3, #0]
 80052da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	4413      	add	r3, r2
 80052e0:	3334      	adds	r3, #52	@ 0x34
 80052e2:	460a      	mov	r2, r1
 80052e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	4413      	add	r3, r2
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d006      	beq.n	8005300 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	3301      	adds	r3, #1
 80052f6:	61fb      	str	r3, [r7, #28]
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	2b0f      	cmp	r3, #15
 80052fc:	d9e9      	bls.n	80052d2 <prvInitialiseNewTask+0x56>
 80052fe:	e000      	b.n	8005302 <prvInitialiseNewTask+0x86>
			{
				break;
 8005300:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800530a:	e003      	b.n	8005314 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800530c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005316:	2b06      	cmp	r3, #6
 8005318:	d901      	bls.n	800531e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800531a:	2306      	movs	r3, #6
 800531c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800531e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005320:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005322:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005326:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005328:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800532a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532c:	2200      	movs	r2, #0
 800532e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005332:	3304      	adds	r3, #4
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff fe68 	bl	800500a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800533a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533c:	3318      	adds	r3, #24
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff fe63 	bl	800500a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005348:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800534a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534c:	f1c3 0207 	rsb	r2, r3, #7
 8005350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005352:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005358:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800535a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535c:	2200      	movs	r2, #0
 800535e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005364:	2200      	movs	r2, #0
 8005366:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800536a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536c:	334c      	adds	r3, #76	@ 0x4c
 800536e:	224c      	movs	r2, #76	@ 0x4c
 8005370:	2100      	movs	r1, #0
 8005372:	4618      	mov	r0, r3
 8005374:	f001 f858 	bl	8006428 <memset>
 8005378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537a:	4a0d      	ldr	r2, [pc, #52]	@ (80053b0 <prvInitialiseNewTask+0x134>)
 800537c:	651a      	str	r2, [r3, #80]	@ 0x50
 800537e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005380:	4a0c      	ldr	r2, [pc, #48]	@ (80053b4 <prvInitialiseNewTask+0x138>)
 8005382:	655a      	str	r2, [r3, #84]	@ 0x54
 8005384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005386:	4a0c      	ldr	r2, [pc, #48]	@ (80053b8 <prvInitialiseNewTask+0x13c>)
 8005388:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	68f9      	ldr	r1, [r7, #12]
 800538e:	69b8      	ldr	r0, [r7, #24]
 8005390:	f000 fc2a 	bl	8005be8 <pxPortInitialiseStack>
 8005394:	4602      	mov	r2, r0
 8005396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005398:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800539a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053a6:	bf00      	nop
 80053a8:	3720      	adds	r7, #32
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20004564 	.word	0x20004564
 80053b4:	200045cc 	.word	0x200045cc
 80053b8:	20004634 	.word	0x20004634

080053bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053c4:	f000 fd40 	bl	8005e48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053c8:	4b2a      	ldr	r3, [pc, #168]	@ (8005474 <prvAddNewTaskToReadyList+0xb8>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3301      	adds	r3, #1
 80053ce:	4a29      	ldr	r2, [pc, #164]	@ (8005474 <prvAddNewTaskToReadyList+0xb8>)
 80053d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053d2:	4b29      	ldr	r3, [pc, #164]	@ (8005478 <prvAddNewTaskToReadyList+0xbc>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d109      	bne.n	80053ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053da:	4a27      	ldr	r2, [pc, #156]	@ (8005478 <prvAddNewTaskToReadyList+0xbc>)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053e0:	4b24      	ldr	r3, [pc, #144]	@ (8005474 <prvAddNewTaskToReadyList+0xb8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d110      	bne.n	800540a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053e8:	f000 fad4 	bl	8005994 <prvInitialiseTaskLists>
 80053ec:	e00d      	b.n	800540a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053ee:	4b23      	ldr	r3, [pc, #140]	@ (800547c <prvAddNewTaskToReadyList+0xc0>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d109      	bne.n	800540a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053f6:	4b20      	ldr	r3, [pc, #128]	@ (8005478 <prvAddNewTaskToReadyList+0xbc>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005400:	429a      	cmp	r2, r3
 8005402:	d802      	bhi.n	800540a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005404:	4a1c      	ldr	r2, [pc, #112]	@ (8005478 <prvAddNewTaskToReadyList+0xbc>)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800540a:	4b1d      	ldr	r3, [pc, #116]	@ (8005480 <prvAddNewTaskToReadyList+0xc4>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3301      	adds	r3, #1
 8005410:	4a1b      	ldr	r2, [pc, #108]	@ (8005480 <prvAddNewTaskToReadyList+0xc4>)
 8005412:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005418:	2201      	movs	r2, #1
 800541a:	409a      	lsls	r2, r3
 800541c:	4b19      	ldr	r3, [pc, #100]	@ (8005484 <prvAddNewTaskToReadyList+0xc8>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4313      	orrs	r3, r2
 8005422:	4a18      	ldr	r2, [pc, #96]	@ (8005484 <prvAddNewTaskToReadyList+0xc8>)
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800542a:	4613      	mov	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4a15      	ldr	r2, [pc, #84]	@ (8005488 <prvAddNewTaskToReadyList+0xcc>)
 8005434:	441a      	add	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3304      	adds	r3, #4
 800543a:	4619      	mov	r1, r3
 800543c:	4610      	mov	r0, r2
 800543e:	f7ff fdf1 	bl	8005024 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005442:	f000 fd33 	bl	8005eac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005446:	4b0d      	ldr	r3, [pc, #52]	@ (800547c <prvAddNewTaskToReadyList+0xc0>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00e      	beq.n	800546c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800544e:	4b0a      	ldr	r3, [pc, #40]	@ (8005478 <prvAddNewTaskToReadyList+0xbc>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005458:	429a      	cmp	r2, r3
 800545a:	d207      	bcs.n	800546c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800545c:	4b0b      	ldr	r3, [pc, #44]	@ (800548c <prvAddNewTaskToReadyList+0xd0>)
 800545e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800546c:	bf00      	nop
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	20000910 	.word	0x20000910
 8005478:	20000810 	.word	0x20000810
 800547c:	2000091c 	.word	0x2000091c
 8005480:	2000092c 	.word	0x2000092c
 8005484:	20000918 	.word	0x20000918
 8005488:	20000814 	.word	0x20000814
 800548c:	e000ed04 	.word	0xe000ed04

08005490 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005498:	2300      	movs	r3, #0
 800549a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d018      	beq.n	80054d4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054a2:	4b14      	ldr	r3, [pc, #80]	@ (80054f4 <vTaskDelay+0x64>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00b      	beq.n	80054c2 <vTaskDelay+0x32>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	60bb      	str	r3, [r7, #8]
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	e7fd      	b.n	80054be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80054c2:	f000 f885 	bl	80055d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054c6:	2100      	movs	r1, #0
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fb27 	bl	8005b1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054ce:	f000 f88d 	bl	80055ec <xTaskResumeAll>
 80054d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d107      	bne.n	80054ea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80054da:	4b07      	ldr	r3, [pc, #28]	@ (80054f8 <vTaskDelay+0x68>)
 80054dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054ea:	bf00      	nop
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	20000938 	.word	0x20000938
 80054f8:	e000ed04 	.word	0xe000ed04

080054fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08a      	sub	sp, #40	@ 0x28
 8005500:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005506:	2300      	movs	r3, #0
 8005508:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800550a:	463a      	mov	r2, r7
 800550c:	1d39      	adds	r1, r7, #4
 800550e:	f107 0308 	add.w	r3, r7, #8
 8005512:	4618      	mov	r0, r3
 8005514:	f7fb fa3e 	bl	8000994 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	9202      	str	r2, [sp, #8]
 8005520:	9301      	str	r3, [sp, #4]
 8005522:	2300      	movs	r3, #0
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	2300      	movs	r3, #0
 8005528:	460a      	mov	r2, r1
 800552a:	4921      	ldr	r1, [pc, #132]	@ (80055b0 <vTaskStartScheduler+0xb4>)
 800552c:	4821      	ldr	r0, [pc, #132]	@ (80055b4 <vTaskStartScheduler+0xb8>)
 800552e:	f7ff fe00 	bl	8005132 <xTaskCreateStatic>
 8005532:	4603      	mov	r3, r0
 8005534:	4a20      	ldr	r2, [pc, #128]	@ (80055b8 <vTaskStartScheduler+0xbc>)
 8005536:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005538:	4b1f      	ldr	r3, [pc, #124]	@ (80055b8 <vTaskStartScheduler+0xbc>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005540:	2301      	movs	r3, #1
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	e001      	b.n	800554a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005546:	2300      	movs	r3, #0
 8005548:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d11b      	bne.n	8005588 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	613b      	str	r3, [r7, #16]
}
 8005562:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005564:	4b15      	ldr	r3, [pc, #84]	@ (80055bc <vTaskStartScheduler+0xc0>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	334c      	adds	r3, #76	@ 0x4c
 800556a:	4a15      	ldr	r2, [pc, #84]	@ (80055c0 <vTaskStartScheduler+0xc4>)
 800556c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800556e:	4b15      	ldr	r3, [pc, #84]	@ (80055c4 <vTaskStartScheduler+0xc8>)
 8005570:	f04f 32ff 	mov.w	r2, #4294967295
 8005574:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005576:	4b14      	ldr	r3, [pc, #80]	@ (80055c8 <vTaskStartScheduler+0xcc>)
 8005578:	2201      	movs	r2, #1
 800557a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800557c:	4b13      	ldr	r3, [pc, #76]	@ (80055cc <vTaskStartScheduler+0xd0>)
 800557e:	2200      	movs	r2, #0
 8005580:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005582:	f000 fbbd 	bl	8005d00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005586:	e00f      	b.n	80055a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558e:	d10b      	bne.n	80055a8 <vTaskStartScheduler+0xac>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	60fb      	str	r3, [r7, #12]
}
 80055a2:	bf00      	nop
 80055a4:	bf00      	nop
 80055a6:	e7fd      	b.n	80055a4 <vTaskStartScheduler+0xa8>
}
 80055a8:	bf00      	nop
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	08006e30 	.word	0x08006e30
 80055b4:	08005965 	.word	0x08005965
 80055b8:	20000934 	.word	0x20000934
 80055bc:	20000810 	.word	0x20000810
 80055c0:	20000028 	.word	0x20000028
 80055c4:	20000930 	.word	0x20000930
 80055c8:	2000091c 	.word	0x2000091c
 80055cc:	20000914 	.word	0x20000914

080055d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80055d4:	4b04      	ldr	r3, [pc, #16]	@ (80055e8 <vTaskSuspendAll+0x18>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	4a03      	ldr	r2, [pc, #12]	@ (80055e8 <vTaskSuspendAll+0x18>)
 80055dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80055de:	bf00      	nop
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	20000938 	.word	0x20000938

080055ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055fa:	4b42      	ldr	r3, [pc, #264]	@ (8005704 <xTaskResumeAll+0x118>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10b      	bne.n	800561a <xTaskResumeAll+0x2e>
	__asm volatile
 8005602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	603b      	str	r3, [r7, #0]
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop
 8005618:	e7fd      	b.n	8005616 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800561a:	f000 fc15 	bl	8005e48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800561e:	4b39      	ldr	r3, [pc, #228]	@ (8005704 <xTaskResumeAll+0x118>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3b01      	subs	r3, #1
 8005624:	4a37      	ldr	r2, [pc, #220]	@ (8005704 <xTaskResumeAll+0x118>)
 8005626:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005628:	4b36      	ldr	r3, [pc, #216]	@ (8005704 <xTaskResumeAll+0x118>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d161      	bne.n	80056f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005630:	4b35      	ldr	r3, [pc, #212]	@ (8005708 <xTaskResumeAll+0x11c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d05d      	beq.n	80056f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005638:	e02e      	b.n	8005698 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800563a:	4b34      	ldr	r3, [pc, #208]	@ (800570c <xTaskResumeAll+0x120>)
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3318      	adds	r3, #24
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff fd49 	bl	80050de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	3304      	adds	r3, #4
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff fd44 	bl	80050de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565a:	2201      	movs	r2, #1
 800565c:	409a      	lsls	r2, r3
 800565e:	4b2c      	ldr	r3, [pc, #176]	@ (8005710 <xTaskResumeAll+0x124>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4313      	orrs	r3, r2
 8005664:	4a2a      	ldr	r2, [pc, #168]	@ (8005710 <xTaskResumeAll+0x124>)
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800566c:	4613      	mov	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4a27      	ldr	r2, [pc, #156]	@ (8005714 <xTaskResumeAll+0x128>)
 8005676:	441a      	add	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3304      	adds	r3, #4
 800567c:	4619      	mov	r1, r3
 800567e:	4610      	mov	r0, r2
 8005680:	f7ff fcd0 	bl	8005024 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005688:	4b23      	ldr	r3, [pc, #140]	@ (8005718 <xTaskResumeAll+0x12c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568e:	429a      	cmp	r2, r3
 8005690:	d302      	bcc.n	8005698 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005692:	4b22      	ldr	r3, [pc, #136]	@ (800571c <xTaskResumeAll+0x130>)
 8005694:	2201      	movs	r2, #1
 8005696:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005698:	4b1c      	ldr	r3, [pc, #112]	@ (800570c <xTaskResumeAll+0x120>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1cc      	bne.n	800563a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056a6:	f000 fa19 	bl	8005adc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005720 <xTaskResumeAll+0x134>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d010      	beq.n	80056d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056b6:	f000 f837 	bl	8005728 <xTaskIncrementTick>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80056c0:	4b16      	ldr	r3, [pc, #88]	@ (800571c <xTaskResumeAll+0x130>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f1      	bne.n	80056b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80056d2:	4b13      	ldr	r3, [pc, #76]	@ (8005720 <xTaskResumeAll+0x134>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056d8:	4b10      	ldr	r3, [pc, #64]	@ (800571c <xTaskResumeAll+0x130>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d009      	beq.n	80056f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056e0:	2301      	movs	r3, #1
 80056e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005724 <xTaskResumeAll+0x138>)
 80056e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056f4:	f000 fbda 	bl	8005eac <vPortExitCritical>

	return xAlreadyYielded;
 80056f8:	68bb      	ldr	r3, [r7, #8]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	20000938 	.word	0x20000938
 8005708:	20000910 	.word	0x20000910
 800570c:	200008d0 	.word	0x200008d0
 8005710:	20000918 	.word	0x20000918
 8005714:	20000814 	.word	0x20000814
 8005718:	20000810 	.word	0x20000810
 800571c:	20000924 	.word	0x20000924
 8005720:	20000920 	.word	0x20000920
 8005724:	e000ed04 	.word	0xe000ed04

08005728 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800572e:	2300      	movs	r3, #0
 8005730:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005732:	4b4f      	ldr	r3, [pc, #316]	@ (8005870 <xTaskIncrementTick+0x148>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	f040 808f 	bne.w	800585a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800573c:	4b4d      	ldr	r3, [pc, #308]	@ (8005874 <xTaskIncrementTick+0x14c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3301      	adds	r3, #1
 8005742:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005744:	4a4b      	ldr	r2, [pc, #300]	@ (8005874 <xTaskIncrementTick+0x14c>)
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d121      	bne.n	8005794 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005750:	4b49      	ldr	r3, [pc, #292]	@ (8005878 <xTaskIncrementTick+0x150>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00b      	beq.n	8005772 <xTaskIncrementTick+0x4a>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	603b      	str	r3, [r7, #0]
}
 800576c:	bf00      	nop
 800576e:	bf00      	nop
 8005770:	e7fd      	b.n	800576e <xTaskIncrementTick+0x46>
 8005772:	4b41      	ldr	r3, [pc, #260]	@ (8005878 <xTaskIncrementTick+0x150>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	4b40      	ldr	r3, [pc, #256]	@ (800587c <xTaskIncrementTick+0x154>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a3e      	ldr	r2, [pc, #248]	@ (8005878 <xTaskIncrementTick+0x150>)
 800577e:	6013      	str	r3, [r2, #0]
 8005780:	4a3e      	ldr	r2, [pc, #248]	@ (800587c <xTaskIncrementTick+0x154>)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	4b3e      	ldr	r3, [pc, #248]	@ (8005880 <xTaskIncrementTick+0x158>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3301      	adds	r3, #1
 800578c:	4a3c      	ldr	r2, [pc, #240]	@ (8005880 <xTaskIncrementTick+0x158>)
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	f000 f9a4 	bl	8005adc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005794:	4b3b      	ldr	r3, [pc, #236]	@ (8005884 <xTaskIncrementTick+0x15c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	429a      	cmp	r2, r3
 800579c:	d348      	bcc.n	8005830 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800579e:	4b36      	ldr	r3, [pc, #216]	@ (8005878 <xTaskIncrementTick+0x150>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d104      	bne.n	80057b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057a8:	4b36      	ldr	r3, [pc, #216]	@ (8005884 <xTaskIncrementTick+0x15c>)
 80057aa:	f04f 32ff 	mov.w	r2, #4294967295
 80057ae:	601a      	str	r2, [r3, #0]
					break;
 80057b0:	e03e      	b.n	8005830 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b2:	4b31      	ldr	r3, [pc, #196]	@ (8005878 <xTaskIncrementTick+0x150>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d203      	bcs.n	80057d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057ca:	4a2e      	ldr	r2, [pc, #184]	@ (8005884 <xTaskIncrementTick+0x15c>)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057d0:	e02e      	b.n	8005830 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	3304      	adds	r3, #4
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff fc81 	bl	80050de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d004      	beq.n	80057ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	3318      	adds	r3, #24
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff fc78 	bl	80050de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f2:	2201      	movs	r2, #1
 80057f4:	409a      	lsls	r2, r3
 80057f6:	4b24      	ldr	r3, [pc, #144]	@ (8005888 <xTaskIncrementTick+0x160>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	4a22      	ldr	r2, [pc, #136]	@ (8005888 <xTaskIncrementTick+0x160>)
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005804:	4613      	mov	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4a1f      	ldr	r2, [pc, #124]	@ (800588c <xTaskIncrementTick+0x164>)
 800580e:	441a      	add	r2, r3
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	3304      	adds	r3, #4
 8005814:	4619      	mov	r1, r3
 8005816:	4610      	mov	r0, r2
 8005818:	f7ff fc04 	bl	8005024 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005820:	4b1b      	ldr	r3, [pc, #108]	@ (8005890 <xTaskIncrementTick+0x168>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005826:	429a      	cmp	r2, r3
 8005828:	d3b9      	bcc.n	800579e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800582a:	2301      	movs	r3, #1
 800582c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800582e:	e7b6      	b.n	800579e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005830:	4b17      	ldr	r3, [pc, #92]	@ (8005890 <xTaskIncrementTick+0x168>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005836:	4915      	ldr	r1, [pc, #84]	@ (800588c <xTaskIncrementTick+0x164>)
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	440b      	add	r3, r1
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d901      	bls.n	800584c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005848:	2301      	movs	r3, #1
 800584a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800584c:	4b11      	ldr	r3, [pc, #68]	@ (8005894 <xTaskIncrementTick+0x16c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d007      	beq.n	8005864 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005854:	2301      	movs	r3, #1
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	e004      	b.n	8005864 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800585a:	4b0f      	ldr	r3, [pc, #60]	@ (8005898 <xTaskIncrementTick+0x170>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3301      	adds	r3, #1
 8005860:	4a0d      	ldr	r2, [pc, #52]	@ (8005898 <xTaskIncrementTick+0x170>)
 8005862:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005864:	697b      	ldr	r3, [r7, #20]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000938 	.word	0x20000938
 8005874:	20000914 	.word	0x20000914
 8005878:	200008c8 	.word	0x200008c8
 800587c:	200008cc 	.word	0x200008cc
 8005880:	20000928 	.word	0x20000928
 8005884:	20000930 	.word	0x20000930
 8005888:	20000918 	.word	0x20000918
 800588c:	20000814 	.word	0x20000814
 8005890:	20000810 	.word	0x20000810
 8005894:	20000924 	.word	0x20000924
 8005898:	20000920 	.word	0x20000920

0800589c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058a2:	4b2a      	ldr	r3, [pc, #168]	@ (800594c <vTaskSwitchContext+0xb0>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058aa:	4b29      	ldr	r3, [pc, #164]	@ (8005950 <vTaskSwitchContext+0xb4>)
 80058ac:	2201      	movs	r2, #1
 80058ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058b0:	e045      	b.n	800593e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80058b2:	4b27      	ldr	r3, [pc, #156]	@ (8005950 <vTaskSwitchContext+0xb4>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058b8:	4b26      	ldr	r3, [pc, #152]	@ (8005954 <vTaskSwitchContext+0xb8>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	fab3 f383 	clz	r3, r3
 80058c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80058c6:	7afb      	ldrb	r3, [r7, #11]
 80058c8:	f1c3 031f 	rsb	r3, r3, #31
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	4922      	ldr	r1, [pc, #136]	@ (8005958 <vTaskSwitchContext+0xbc>)
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	440b      	add	r3, r1
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10b      	bne.n	80058fa <vTaskSwitchContext+0x5e>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	607b      	str	r3, [r7, #4]
}
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop
 80058f8:	e7fd      	b.n	80058f6 <vTaskSwitchContext+0x5a>
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4a14      	ldr	r2, [pc, #80]	@ (8005958 <vTaskSwitchContext+0xbc>)
 8005906:	4413      	add	r3, r2
 8005908:	613b      	str	r3, [r7, #16]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	605a      	str	r2, [r3, #4]
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	3308      	adds	r3, #8
 800591c:	429a      	cmp	r2, r3
 800591e:	d104      	bne.n	800592a <vTaskSwitchContext+0x8e>
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	605a      	str	r2, [r3, #4]
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	4a0a      	ldr	r2, [pc, #40]	@ (800595c <vTaskSwitchContext+0xc0>)
 8005932:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005934:	4b09      	ldr	r3, [pc, #36]	@ (800595c <vTaskSwitchContext+0xc0>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	334c      	adds	r3, #76	@ 0x4c
 800593a:	4a09      	ldr	r2, [pc, #36]	@ (8005960 <vTaskSwitchContext+0xc4>)
 800593c:	6013      	str	r3, [r2, #0]
}
 800593e:	bf00      	nop
 8005940:	371c      	adds	r7, #28
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	20000938 	.word	0x20000938
 8005950:	20000924 	.word	0x20000924
 8005954:	20000918 	.word	0x20000918
 8005958:	20000814 	.word	0x20000814
 800595c:	20000810 	.word	0x20000810
 8005960:	20000028 	.word	0x20000028

08005964 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800596c:	f000 f852 	bl	8005a14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005970:	4b06      	ldr	r3, [pc, #24]	@ (800598c <prvIdleTask+0x28>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d9f9      	bls.n	800596c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005978:	4b05      	ldr	r3, [pc, #20]	@ (8005990 <prvIdleTask+0x2c>)
 800597a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005988:	e7f0      	b.n	800596c <prvIdleTask+0x8>
 800598a:	bf00      	nop
 800598c:	20000814 	.word	0x20000814
 8005990:	e000ed04 	.word	0xe000ed04

08005994 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800599a:	2300      	movs	r3, #0
 800599c:	607b      	str	r3, [r7, #4]
 800599e:	e00c      	b.n	80059ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4a12      	ldr	r2, [pc, #72]	@ (80059f4 <prvInitialiseTaskLists+0x60>)
 80059ac:	4413      	add	r3, r2
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7ff fb0b 	bl	8004fca <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	3301      	adds	r3, #1
 80059b8:	607b      	str	r3, [r7, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b06      	cmp	r3, #6
 80059be:	d9ef      	bls.n	80059a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059c0:	480d      	ldr	r0, [pc, #52]	@ (80059f8 <prvInitialiseTaskLists+0x64>)
 80059c2:	f7ff fb02 	bl	8004fca <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059c6:	480d      	ldr	r0, [pc, #52]	@ (80059fc <prvInitialiseTaskLists+0x68>)
 80059c8:	f7ff faff 	bl	8004fca <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059cc:	480c      	ldr	r0, [pc, #48]	@ (8005a00 <prvInitialiseTaskLists+0x6c>)
 80059ce:	f7ff fafc 	bl	8004fca <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059d2:	480c      	ldr	r0, [pc, #48]	@ (8005a04 <prvInitialiseTaskLists+0x70>)
 80059d4:	f7ff faf9 	bl	8004fca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059d8:	480b      	ldr	r0, [pc, #44]	@ (8005a08 <prvInitialiseTaskLists+0x74>)
 80059da:	f7ff faf6 	bl	8004fca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059de:	4b0b      	ldr	r3, [pc, #44]	@ (8005a0c <prvInitialiseTaskLists+0x78>)
 80059e0:	4a05      	ldr	r2, [pc, #20]	@ (80059f8 <prvInitialiseTaskLists+0x64>)
 80059e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005a10 <prvInitialiseTaskLists+0x7c>)
 80059e6:	4a05      	ldr	r2, [pc, #20]	@ (80059fc <prvInitialiseTaskLists+0x68>)
 80059e8:	601a      	str	r2, [r3, #0]
}
 80059ea:	bf00      	nop
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20000814 	.word	0x20000814
 80059f8:	200008a0 	.word	0x200008a0
 80059fc:	200008b4 	.word	0x200008b4
 8005a00:	200008d0 	.word	0x200008d0
 8005a04:	200008e4 	.word	0x200008e4
 8005a08:	200008fc 	.word	0x200008fc
 8005a0c:	200008c8 	.word	0x200008c8
 8005a10:	200008cc 	.word	0x200008cc

08005a14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a1a:	e019      	b.n	8005a50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a1c:	f000 fa14 	bl	8005e48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a20:	4b10      	ldr	r3, [pc, #64]	@ (8005a64 <prvCheckTasksWaitingTermination+0x50>)
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff fb56 	bl	80050de <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a32:	4b0d      	ldr	r3, [pc, #52]	@ (8005a68 <prvCheckTasksWaitingTermination+0x54>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	4a0b      	ldr	r2, [pc, #44]	@ (8005a68 <prvCheckTasksWaitingTermination+0x54>)
 8005a3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a6c <prvCheckTasksWaitingTermination+0x58>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3b01      	subs	r3, #1
 8005a42:	4a0a      	ldr	r2, [pc, #40]	@ (8005a6c <prvCheckTasksWaitingTermination+0x58>)
 8005a44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a46:	f000 fa31 	bl	8005eac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f810 	bl	8005a70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a50:	4b06      	ldr	r3, [pc, #24]	@ (8005a6c <prvCheckTasksWaitingTermination+0x58>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e1      	bne.n	8005a1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a58:	bf00      	nop
 8005a5a:	bf00      	nop
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	200008e4 	.word	0x200008e4
 8005a68:	20000910 	.word	0x20000910
 8005a6c:	200008f8 	.word	0x200008f8

08005a70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	334c      	adds	r3, #76	@ 0x4c
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 fcdb 	bl	8006438 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d108      	bne.n	8005a9e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 fb87 	bl	80061a4 <vPortFree>
				vPortFree( pxTCB );
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fb84 	bl	80061a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a9c:	e019      	b.n	8005ad2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d103      	bne.n	8005ab0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fb7b 	bl	80061a4 <vPortFree>
	}
 8005aae:	e010      	b.n	8005ad2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d00b      	beq.n	8005ad2 <prvDeleteTCB+0x62>
	__asm volatile
 8005aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	60fb      	str	r3, [r7, #12]
}
 8005acc:	bf00      	nop
 8005ace:	bf00      	nop
 8005ad0:	e7fd      	b.n	8005ace <prvDeleteTCB+0x5e>
	}
 8005ad2:	bf00      	nop
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8005b14 <prvResetNextTaskUnblockTime+0x38>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d104      	bne.n	8005af6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005aec:	4b0a      	ldr	r3, [pc, #40]	@ (8005b18 <prvResetNextTaskUnblockTime+0x3c>)
 8005aee:	f04f 32ff 	mov.w	r2, #4294967295
 8005af2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005af4:	e008      	b.n	8005b08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005af6:	4b07      	ldr	r3, [pc, #28]	@ (8005b14 <prvResetNextTaskUnblockTime+0x38>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	4a04      	ldr	r2, [pc, #16]	@ (8005b18 <prvResetNextTaskUnblockTime+0x3c>)
 8005b06:	6013      	str	r3, [r2, #0]
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	200008c8 	.word	0x200008c8
 8005b18:	20000930 	.word	0x20000930

08005b1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b26:	4b29      	ldr	r3, [pc, #164]	@ (8005bcc <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b2c:	4b28      	ldr	r3, [pc, #160]	@ (8005bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3304      	adds	r3, #4
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff fad3 	bl	80050de <uxListRemove>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10b      	bne.n	8005b56 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005b3e:	4b24      	ldr	r3, [pc, #144]	@ (8005bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b44:	2201      	movs	r2, #1
 8005b46:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4a:	43da      	mvns	r2, r3
 8005b4c:	4b21      	ldr	r3, [pc, #132]	@ (8005bd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4013      	ands	r3, r2
 8005b52:	4a20      	ldr	r2, [pc, #128]	@ (8005bd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b54:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5c:	d10a      	bne.n	8005b74 <prvAddCurrentTaskToDelayedList+0x58>
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d007      	beq.n	8005b74 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b64:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	481a      	ldr	r0, [pc, #104]	@ (8005bd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005b6e:	f7ff fa59 	bl	8005024 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b72:	e026      	b.n	8005bc2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4413      	add	r3, r2
 8005b7a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b7c:	4b14      	ldr	r3, [pc, #80]	@ (8005bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d209      	bcs.n	8005ba0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b8c:	4b13      	ldr	r3, [pc, #76]	@ (8005bdc <prvAddCurrentTaskToDelayedList+0xc0>)
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3304      	adds	r3, #4
 8005b96:	4619      	mov	r1, r3
 8005b98:	4610      	mov	r0, r2
 8005b9a:	f7ff fa67 	bl	800506c <vListInsert>
}
 8005b9e:	e010      	b.n	8005bc2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8005be0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	4619      	mov	r1, r3
 8005bac:	4610      	mov	r0, r2
 8005bae:	f7ff fa5d 	bl	800506c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8005be4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d202      	bcs.n	8005bc2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005bbc:	4a09      	ldr	r2, [pc, #36]	@ (8005be4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	6013      	str	r3, [r2, #0]
}
 8005bc2:	bf00      	nop
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20000914 	.word	0x20000914
 8005bd0:	20000810 	.word	0x20000810
 8005bd4:	20000918 	.word	0x20000918
 8005bd8:	200008fc 	.word	0x200008fc
 8005bdc:	200008cc 	.word	0x200008cc
 8005be0:	200008c8 	.word	0x200008c8
 8005be4:	20000930 	.word	0x20000930

08005be8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	3b04      	subs	r3, #4
 8005bf8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3b04      	subs	r3, #4
 8005c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f023 0201 	bic.w	r2, r3, #1
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	3b04      	subs	r3, #4
 8005c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c18:	4a0c      	ldr	r2, [pc, #48]	@ (8005c4c <pxPortInitialiseStack+0x64>)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	3b14      	subs	r3, #20
 8005c22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3b04      	subs	r3, #4
 8005c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f06f 0202 	mvn.w	r2, #2
 8005c36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	3b20      	subs	r3, #32
 8005c3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	08005c51 	.word	0x08005c51

08005c50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c56:	2300      	movs	r3, #0
 8005c58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c5a:	4b13      	ldr	r3, [pc, #76]	@ (8005ca8 <prvTaskExitError+0x58>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c62:	d00b      	beq.n	8005c7c <prvTaskExitError+0x2c>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	60fb      	str	r3, [r7, #12]
}
 8005c76:	bf00      	nop
 8005c78:	bf00      	nop
 8005c7a:	e7fd      	b.n	8005c78 <prvTaskExitError+0x28>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	60bb      	str	r3, [r7, #8]
}
 8005c8e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c90:	bf00      	nop
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d0fc      	beq.n	8005c92 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c98:	bf00      	nop
 8005c9a:	bf00      	nop
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	20000024 	.word	0x20000024
 8005cac:	00000000 	.word	0x00000000

08005cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005cb0:	4b07      	ldr	r3, [pc, #28]	@ (8005cd0 <pxCurrentTCBConst2>)
 8005cb2:	6819      	ldr	r1, [r3, #0]
 8005cb4:	6808      	ldr	r0, [r1, #0]
 8005cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cba:	f380 8809 	msr	PSP, r0
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f04f 0000 	mov.w	r0, #0
 8005cc6:	f380 8811 	msr	BASEPRI, r0
 8005cca:	4770      	bx	lr
 8005ccc:	f3af 8000 	nop.w

08005cd0 <pxCurrentTCBConst2>:
 8005cd0:	20000810 	.word	0x20000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005cd4:	bf00      	nop
 8005cd6:	bf00      	nop

08005cd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005cd8:	4808      	ldr	r0, [pc, #32]	@ (8005cfc <prvPortStartFirstTask+0x24>)
 8005cda:	6800      	ldr	r0, [r0, #0]
 8005cdc:	6800      	ldr	r0, [r0, #0]
 8005cde:	f380 8808 	msr	MSP, r0
 8005ce2:	f04f 0000 	mov.w	r0, #0
 8005ce6:	f380 8814 	msr	CONTROL, r0
 8005cea:	b662      	cpsie	i
 8005cec:	b661      	cpsie	f
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	df00      	svc	0
 8005cf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005cfa:	bf00      	nop
 8005cfc:	e000ed08 	.word	0xe000ed08

08005d00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d06:	4b47      	ldr	r3, [pc, #284]	@ (8005e24 <xPortStartScheduler+0x124>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a47      	ldr	r2, [pc, #284]	@ (8005e28 <xPortStartScheduler+0x128>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d10b      	bne.n	8005d28 <xPortStartScheduler+0x28>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	60fb      	str	r3, [r7, #12]
}
 8005d22:	bf00      	nop
 8005d24:	bf00      	nop
 8005d26:	e7fd      	b.n	8005d24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d28:	4b3e      	ldr	r3, [pc, #248]	@ (8005e24 <xPortStartScheduler+0x124>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a3f      	ldr	r2, [pc, #252]	@ (8005e2c <xPortStartScheduler+0x12c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d10b      	bne.n	8005d4a <xPortStartScheduler+0x4a>
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	613b      	str	r3, [r7, #16]
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop
 8005d48:	e7fd      	b.n	8005d46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d4a:	4b39      	ldr	r3, [pc, #228]	@ (8005e30 <xPortStartScheduler+0x130>)
 8005d4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	22ff      	movs	r2, #255	@ 0xff
 8005d5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d64:	78fb      	ldrb	r3, [r7, #3]
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	4b31      	ldr	r3, [pc, #196]	@ (8005e34 <xPortStartScheduler+0x134>)
 8005d70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d72:	4b31      	ldr	r3, [pc, #196]	@ (8005e38 <xPortStartScheduler+0x138>)
 8005d74:	2207      	movs	r2, #7
 8005d76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d78:	e009      	b.n	8005d8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8005e38 <xPortStartScheduler+0x138>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	4a2d      	ldr	r2, [pc, #180]	@ (8005e38 <xPortStartScheduler+0x138>)
 8005d82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d8e:	78fb      	ldrb	r3, [r7, #3]
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d96:	2b80      	cmp	r3, #128	@ 0x80
 8005d98:	d0ef      	beq.n	8005d7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d9a:	4b27      	ldr	r3, [pc, #156]	@ (8005e38 <xPortStartScheduler+0x138>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f1c3 0307 	rsb	r3, r3, #7
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d00b      	beq.n	8005dbe <xPortStartScheduler+0xbe>
	__asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	60bb      	str	r3, [r7, #8]
}
 8005db8:	bf00      	nop
 8005dba:	bf00      	nop
 8005dbc:	e7fd      	b.n	8005dba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8005e38 <xPortStartScheduler+0x138>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	021b      	lsls	r3, r3, #8
 8005dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8005e38 <xPortStartScheduler+0x138>)
 8005dc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8005e38 <xPortStartScheduler+0x138>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005dd0:	4a19      	ldr	r2, [pc, #100]	@ (8005e38 <xPortStartScheduler+0x138>)
 8005dd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ddc:	4b17      	ldr	r3, [pc, #92]	@ (8005e3c <xPortStartScheduler+0x13c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a16      	ldr	r2, [pc, #88]	@ (8005e3c <xPortStartScheduler+0x13c>)
 8005de2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005de6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005de8:	4b14      	ldr	r3, [pc, #80]	@ (8005e3c <xPortStartScheduler+0x13c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a13      	ldr	r2, [pc, #76]	@ (8005e3c <xPortStartScheduler+0x13c>)
 8005dee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005df2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005df4:	f000 f8da 	bl	8005fac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005df8:	4b11      	ldr	r3, [pc, #68]	@ (8005e40 <xPortStartScheduler+0x140>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005dfe:	f000 f8f9 	bl	8005ff4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e02:	4b10      	ldr	r3, [pc, #64]	@ (8005e44 <xPortStartScheduler+0x144>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a0f      	ldr	r2, [pc, #60]	@ (8005e44 <xPortStartScheduler+0x144>)
 8005e08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005e0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e0e:	f7ff ff63 	bl	8005cd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e12:	f7ff fd43 	bl	800589c <vTaskSwitchContext>
	prvTaskExitError();
 8005e16:	f7ff ff1b 	bl	8005c50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	e000ed00 	.word	0xe000ed00
 8005e28:	410fc271 	.word	0x410fc271
 8005e2c:	410fc270 	.word	0x410fc270
 8005e30:	e000e400 	.word	0xe000e400
 8005e34:	2000093c 	.word	0x2000093c
 8005e38:	20000940 	.word	0x20000940
 8005e3c:	e000ed20 	.word	0xe000ed20
 8005e40:	20000024 	.word	0x20000024
 8005e44:	e000ef34 	.word	0xe000ef34

08005e48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	607b      	str	r3, [r7, #4]
}
 8005e60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e62:	4b10      	ldr	r3, [pc, #64]	@ (8005ea4 <vPortEnterCritical+0x5c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3301      	adds	r3, #1
 8005e68:	4a0e      	ldr	r2, [pc, #56]	@ (8005ea4 <vPortEnterCritical+0x5c>)
 8005e6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ea4 <vPortEnterCritical+0x5c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d110      	bne.n	8005e96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e74:	4b0c      	ldr	r3, [pc, #48]	@ (8005ea8 <vPortEnterCritical+0x60>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00b      	beq.n	8005e96 <vPortEnterCritical+0x4e>
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	603b      	str	r3, [r7, #0]
}
 8005e90:	bf00      	nop
 8005e92:	bf00      	nop
 8005e94:	e7fd      	b.n	8005e92 <vPortEnterCritical+0x4a>
	}
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	20000024 	.word	0x20000024
 8005ea8:	e000ed04 	.word	0xe000ed04

08005eac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005eb2:	4b12      	ldr	r3, [pc, #72]	@ (8005efc <vPortExitCritical+0x50>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10b      	bne.n	8005ed2 <vPortExitCritical+0x26>
	__asm volatile
 8005eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	607b      	str	r3, [r7, #4]
}
 8005ecc:	bf00      	nop
 8005ece:	bf00      	nop
 8005ed0:	e7fd      	b.n	8005ece <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8005efc <vPortExitCritical+0x50>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	4a08      	ldr	r2, [pc, #32]	@ (8005efc <vPortExitCritical+0x50>)
 8005eda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005edc:	4b07      	ldr	r3, [pc, #28]	@ (8005efc <vPortExitCritical+0x50>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d105      	bne.n	8005ef0 <vPortExitCritical+0x44>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005eee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	20000024 	.word	0x20000024

08005f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f00:	f3ef 8009 	mrs	r0, PSP
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	4b15      	ldr	r3, [pc, #84]	@ (8005f60 <pxCurrentTCBConst>)
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	f01e 0f10 	tst.w	lr, #16
 8005f10:	bf08      	it	eq
 8005f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1a:	6010      	str	r0, [r2, #0]
 8005f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005f24:	f380 8811 	msr	BASEPRI, r0
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f7ff fcb4 	bl	800589c <vTaskSwitchContext>
 8005f34:	f04f 0000 	mov.w	r0, #0
 8005f38:	f380 8811 	msr	BASEPRI, r0
 8005f3c:	bc09      	pop	{r0, r3}
 8005f3e:	6819      	ldr	r1, [r3, #0]
 8005f40:	6808      	ldr	r0, [r1, #0]
 8005f42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f46:	f01e 0f10 	tst.w	lr, #16
 8005f4a:	bf08      	it	eq
 8005f4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f50:	f380 8809 	msr	PSP, r0
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	f3af 8000 	nop.w

08005f60 <pxCurrentTCBConst>:
 8005f60:	20000810 	.word	0x20000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f64:	bf00      	nop
 8005f66:	bf00      	nop

08005f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	607b      	str	r3, [r7, #4]
}
 8005f80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f82:	f7ff fbd1 	bl	8005728 <xTaskIncrementTick>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f8c:	4b06      	ldr	r3, [pc, #24]	@ (8005fa8 <SysTick_Handler+0x40>)
 8005f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	2300      	movs	r3, #0
 8005f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	f383 8811 	msr	BASEPRI, r3
}
 8005f9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005fa0:	bf00      	nop
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	e000ed04 	.word	0xe000ed04

08005fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe0 <vPortSetupTimerInterrupt+0x34>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe4 <vPortSetupTimerInterrupt+0x38>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe8 <vPortSetupTimerInterrupt+0x3c>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8005fec <vPortSetupTimerInterrupt+0x40>)
 8005fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc6:	099b      	lsrs	r3, r3, #6
 8005fc8:	4a09      	ldr	r2, [pc, #36]	@ (8005ff0 <vPortSetupTimerInterrupt+0x44>)
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005fce:	4b04      	ldr	r3, [pc, #16]	@ (8005fe0 <vPortSetupTimerInterrupt+0x34>)
 8005fd0:	2207      	movs	r2, #7
 8005fd2:	601a      	str	r2, [r3, #0]
}
 8005fd4:	bf00      	nop
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	e000e010 	.word	0xe000e010
 8005fe4:	e000e018 	.word	0xe000e018
 8005fe8:	20000018 	.word	0x20000018
 8005fec:	10624dd3 	.word	0x10624dd3
 8005ff0:	e000e014 	.word	0xe000e014

08005ff4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ff4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006004 <vPortEnableVFP+0x10>
 8005ff8:	6801      	ldr	r1, [r0, #0]
 8005ffa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005ffe:	6001      	str	r1, [r0, #0]
 8006000:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006002:	bf00      	nop
 8006004:	e000ed88 	.word	0xe000ed88

08006008 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	@ 0x28
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006010:	2300      	movs	r3, #0
 8006012:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006014:	f7ff fadc 	bl	80055d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006018:	4b5c      	ldr	r3, [pc, #368]	@ (800618c <pvPortMalloc+0x184>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006020:	f000 f924 	bl	800626c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006024:	4b5a      	ldr	r3, [pc, #360]	@ (8006190 <pvPortMalloc+0x188>)
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4013      	ands	r3, r2
 800602c:	2b00      	cmp	r3, #0
 800602e:	f040 8095 	bne.w	800615c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d01e      	beq.n	8006076 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006038:	2208      	movs	r2, #8
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4413      	add	r3, r2
 800603e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f003 0307 	and.w	r3, r3, #7
 8006046:	2b00      	cmp	r3, #0
 8006048:	d015      	beq.n	8006076 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f023 0307 	bic.w	r3, r3, #7
 8006050:	3308      	adds	r3, #8
 8006052:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f003 0307 	and.w	r3, r3, #7
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00b      	beq.n	8006076 <pvPortMalloc+0x6e>
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	617b      	str	r3, [r7, #20]
}
 8006070:	bf00      	nop
 8006072:	bf00      	nop
 8006074:	e7fd      	b.n	8006072 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d06f      	beq.n	800615c <pvPortMalloc+0x154>
 800607c:	4b45      	ldr	r3, [pc, #276]	@ (8006194 <pvPortMalloc+0x18c>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	429a      	cmp	r2, r3
 8006084:	d86a      	bhi.n	800615c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006086:	4b44      	ldr	r3, [pc, #272]	@ (8006198 <pvPortMalloc+0x190>)
 8006088:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800608a:	4b43      	ldr	r3, [pc, #268]	@ (8006198 <pvPortMalloc+0x190>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006090:	e004      	b.n	800609c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800609c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d903      	bls.n	80060ae <pvPortMalloc+0xa6>
 80060a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1f1      	bne.n	8006092 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80060ae:	4b37      	ldr	r3, [pc, #220]	@ (800618c <pvPortMalloc+0x184>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d051      	beq.n	800615c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2208      	movs	r2, #8
 80060be:	4413      	add	r3, r2
 80060c0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	1ad2      	subs	r2, r2, r3
 80060d2:	2308      	movs	r3, #8
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d920      	bls.n	800611c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4413      	add	r3, r2
 80060e0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00b      	beq.n	8006104 <pvPortMalloc+0xfc>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	613b      	str	r3, [r7, #16]
}
 80060fe:	bf00      	nop
 8006100:	bf00      	nop
 8006102:	e7fd      	b.n	8006100 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	1ad2      	subs	r2, r2, r3
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006116:	69b8      	ldr	r0, [r7, #24]
 8006118:	f000 f90a 	bl	8006330 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800611c:	4b1d      	ldr	r3, [pc, #116]	@ (8006194 <pvPortMalloc+0x18c>)
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	4a1b      	ldr	r2, [pc, #108]	@ (8006194 <pvPortMalloc+0x18c>)
 8006128:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800612a:	4b1a      	ldr	r3, [pc, #104]	@ (8006194 <pvPortMalloc+0x18c>)
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	4b1b      	ldr	r3, [pc, #108]	@ (800619c <pvPortMalloc+0x194>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d203      	bcs.n	800613e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006136:	4b17      	ldr	r3, [pc, #92]	@ (8006194 <pvPortMalloc+0x18c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a18      	ldr	r2, [pc, #96]	@ (800619c <pvPortMalloc+0x194>)
 800613c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800613e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	4b13      	ldr	r3, [pc, #76]	@ (8006190 <pvPortMalloc+0x188>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	431a      	orrs	r2, r3
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800614c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006152:	4b13      	ldr	r3, [pc, #76]	@ (80061a0 <pvPortMalloc+0x198>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3301      	adds	r3, #1
 8006158:	4a11      	ldr	r2, [pc, #68]	@ (80061a0 <pvPortMalloc+0x198>)
 800615a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800615c:	f7ff fa46 	bl	80055ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00b      	beq.n	8006182 <pvPortMalloc+0x17a>
	__asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	60fb      	str	r3, [r7, #12]
}
 800617c:	bf00      	nop
 800617e:	bf00      	nop
 8006180:	e7fd      	b.n	800617e <pvPortMalloc+0x176>
	return pvReturn;
 8006182:	69fb      	ldr	r3, [r7, #28]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3728      	adds	r7, #40	@ 0x28
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	2000454c 	.word	0x2000454c
 8006190:	20004560 	.word	0x20004560
 8006194:	20004550 	.word	0x20004550
 8006198:	20004544 	.word	0x20004544
 800619c:	20004554 	.word	0x20004554
 80061a0:	20004558 	.word	0x20004558

080061a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d04f      	beq.n	8006256 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80061b6:	2308      	movs	r3, #8
 80061b8:	425b      	negs	r3, r3
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	4413      	add	r3, r2
 80061be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	4b25      	ldr	r3, [pc, #148]	@ (8006260 <vPortFree+0xbc>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4013      	ands	r3, r2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10b      	bne.n	80061ea <vPortFree+0x46>
	__asm volatile
 80061d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	60fb      	str	r3, [r7, #12]
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop
 80061e8:	e7fd      	b.n	80061e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00b      	beq.n	800620a <vPortFree+0x66>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	60bb      	str	r3, [r7, #8]
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop
 8006208:	e7fd      	b.n	8006206 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	4b14      	ldr	r3, [pc, #80]	@ (8006260 <vPortFree+0xbc>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4013      	ands	r3, r2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01e      	beq.n	8006256 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d11a      	bne.n	8006256 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	4b0e      	ldr	r3, [pc, #56]	@ (8006260 <vPortFree+0xbc>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	43db      	mvns	r3, r3
 800622a:	401a      	ands	r2, r3
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006230:	f7ff f9ce 	bl	80055d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	4b0a      	ldr	r3, [pc, #40]	@ (8006264 <vPortFree+0xc0>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4413      	add	r3, r2
 800623e:	4a09      	ldr	r2, [pc, #36]	@ (8006264 <vPortFree+0xc0>)
 8006240:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006242:	6938      	ldr	r0, [r7, #16]
 8006244:	f000 f874 	bl	8006330 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006248:	4b07      	ldr	r3, [pc, #28]	@ (8006268 <vPortFree+0xc4>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3301      	adds	r3, #1
 800624e:	4a06      	ldr	r2, [pc, #24]	@ (8006268 <vPortFree+0xc4>)
 8006250:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006252:	f7ff f9cb 	bl	80055ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006256:	bf00      	nop
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	20004560 	.word	0x20004560
 8006264:	20004550 	.word	0x20004550
 8006268:	2000455c 	.word	0x2000455c

0800626c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006272:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006276:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006278:	4b27      	ldr	r3, [pc, #156]	@ (8006318 <prvHeapInit+0xac>)
 800627a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00c      	beq.n	80062a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3307      	adds	r3, #7
 800628a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0307 	bic.w	r3, r3, #7
 8006292:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	4a1f      	ldr	r2, [pc, #124]	@ (8006318 <prvHeapInit+0xac>)
 800629c:	4413      	add	r3, r2
 800629e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062a4:	4a1d      	ldr	r2, [pc, #116]	@ (800631c <prvHeapInit+0xb0>)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80062aa:	4b1c      	ldr	r3, [pc, #112]	@ (800631c <prvHeapInit+0xb0>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	4413      	add	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80062b8:	2208      	movs	r2, #8
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f023 0307 	bic.w	r3, r3, #7
 80062c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4a15      	ldr	r2, [pc, #84]	@ (8006320 <prvHeapInit+0xb4>)
 80062cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80062ce:	4b14      	ldr	r3, [pc, #80]	@ (8006320 <prvHeapInit+0xb4>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2200      	movs	r2, #0
 80062d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062d6:	4b12      	ldr	r3, [pc, #72]	@ (8006320 <prvHeapInit+0xb4>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	1ad2      	subs	r2, r2, r3
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006320 <prvHeapInit+0xb4>)
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	4a0a      	ldr	r2, [pc, #40]	@ (8006324 <prvHeapInit+0xb8>)
 80062fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	4a09      	ldr	r2, [pc, #36]	@ (8006328 <prvHeapInit+0xbc>)
 8006302:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006304:	4b09      	ldr	r3, [pc, #36]	@ (800632c <prvHeapInit+0xc0>)
 8006306:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800630a:	601a      	str	r2, [r3, #0]
}
 800630c:	bf00      	nop
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	20000944 	.word	0x20000944
 800631c:	20004544 	.word	0x20004544
 8006320:	2000454c 	.word	0x2000454c
 8006324:	20004554 	.word	0x20004554
 8006328:	20004550 	.word	0x20004550
 800632c:	20004560 	.word	0x20004560

08006330 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006338:	4b28      	ldr	r3, [pc, #160]	@ (80063dc <prvInsertBlockIntoFreeList+0xac>)
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	e002      	b.n	8006344 <prvInsertBlockIntoFreeList+0x14>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	60fb      	str	r3, [r7, #12]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	429a      	cmp	r2, r3
 800634c:	d8f7      	bhi.n	800633e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	4413      	add	r3, r2
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	429a      	cmp	r2, r3
 800635e:	d108      	bne.n	8006372 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	441a      	add	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	441a      	add	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d118      	bne.n	80063b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	4b15      	ldr	r3, [pc, #84]	@ (80063e0 <prvInsertBlockIntoFreeList+0xb0>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	429a      	cmp	r2, r3
 8006390:	d00d      	beq.n	80063ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	441a      	add	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	e008      	b.n	80063c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80063ae:	4b0c      	ldr	r3, [pc, #48]	@ (80063e0 <prvInsertBlockIntoFreeList+0xb0>)
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	e003      	b.n	80063c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d002      	beq.n	80063ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063ce:	bf00      	nop
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	20004544 	.word	0x20004544
 80063e0:	2000454c 	.word	0x2000454c

080063e4 <siprintf>:
 80063e4:	b40e      	push	{r1, r2, r3}
 80063e6:	b510      	push	{r4, lr}
 80063e8:	b09d      	sub	sp, #116	@ 0x74
 80063ea:	ab1f      	add	r3, sp, #124	@ 0x7c
 80063ec:	9002      	str	r0, [sp, #8]
 80063ee:	9006      	str	r0, [sp, #24]
 80063f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80063f4:	480a      	ldr	r0, [pc, #40]	@ (8006420 <siprintf+0x3c>)
 80063f6:	9107      	str	r1, [sp, #28]
 80063f8:	9104      	str	r1, [sp, #16]
 80063fa:	490a      	ldr	r1, [pc, #40]	@ (8006424 <siprintf+0x40>)
 80063fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006400:	9105      	str	r1, [sp, #20]
 8006402:	2400      	movs	r4, #0
 8006404:	a902      	add	r1, sp, #8
 8006406:	6800      	ldr	r0, [r0, #0]
 8006408:	9301      	str	r3, [sp, #4]
 800640a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800640c:	f000 fa00 	bl	8006810 <_svfiprintf_r>
 8006410:	9b02      	ldr	r3, [sp, #8]
 8006412:	701c      	strb	r4, [r3, #0]
 8006414:	b01d      	add	sp, #116	@ 0x74
 8006416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800641a:	b003      	add	sp, #12
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	20000028 	.word	0x20000028
 8006424:	ffff0208 	.word	0xffff0208

08006428 <memset>:
 8006428:	4402      	add	r2, r0
 800642a:	4603      	mov	r3, r0
 800642c:	4293      	cmp	r3, r2
 800642e:	d100      	bne.n	8006432 <memset+0xa>
 8006430:	4770      	bx	lr
 8006432:	f803 1b01 	strb.w	r1, [r3], #1
 8006436:	e7f9      	b.n	800642c <memset+0x4>

08006438 <_reclaim_reent>:
 8006438:	4b2d      	ldr	r3, [pc, #180]	@ (80064f0 <_reclaim_reent+0xb8>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4283      	cmp	r3, r0
 800643e:	b570      	push	{r4, r5, r6, lr}
 8006440:	4604      	mov	r4, r0
 8006442:	d053      	beq.n	80064ec <_reclaim_reent+0xb4>
 8006444:	69c3      	ldr	r3, [r0, #28]
 8006446:	b31b      	cbz	r3, 8006490 <_reclaim_reent+0x58>
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	b163      	cbz	r3, 8006466 <_reclaim_reent+0x2e>
 800644c:	2500      	movs	r5, #0
 800644e:	69e3      	ldr	r3, [r4, #28]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	5959      	ldr	r1, [r3, r5]
 8006454:	b9b1      	cbnz	r1, 8006484 <_reclaim_reent+0x4c>
 8006456:	3504      	adds	r5, #4
 8006458:	2d80      	cmp	r5, #128	@ 0x80
 800645a:	d1f8      	bne.n	800644e <_reclaim_reent+0x16>
 800645c:	69e3      	ldr	r3, [r4, #28]
 800645e:	4620      	mov	r0, r4
 8006460:	68d9      	ldr	r1, [r3, #12]
 8006462:	f000 f881 	bl	8006568 <_free_r>
 8006466:	69e3      	ldr	r3, [r4, #28]
 8006468:	6819      	ldr	r1, [r3, #0]
 800646a:	b111      	cbz	r1, 8006472 <_reclaim_reent+0x3a>
 800646c:	4620      	mov	r0, r4
 800646e:	f000 f87b 	bl	8006568 <_free_r>
 8006472:	69e3      	ldr	r3, [r4, #28]
 8006474:	689d      	ldr	r5, [r3, #8]
 8006476:	b15d      	cbz	r5, 8006490 <_reclaim_reent+0x58>
 8006478:	4629      	mov	r1, r5
 800647a:	4620      	mov	r0, r4
 800647c:	682d      	ldr	r5, [r5, #0]
 800647e:	f000 f873 	bl	8006568 <_free_r>
 8006482:	e7f8      	b.n	8006476 <_reclaim_reent+0x3e>
 8006484:	680e      	ldr	r6, [r1, #0]
 8006486:	4620      	mov	r0, r4
 8006488:	f000 f86e 	bl	8006568 <_free_r>
 800648c:	4631      	mov	r1, r6
 800648e:	e7e1      	b.n	8006454 <_reclaim_reent+0x1c>
 8006490:	6961      	ldr	r1, [r4, #20]
 8006492:	b111      	cbz	r1, 800649a <_reclaim_reent+0x62>
 8006494:	4620      	mov	r0, r4
 8006496:	f000 f867 	bl	8006568 <_free_r>
 800649a:	69e1      	ldr	r1, [r4, #28]
 800649c:	b111      	cbz	r1, 80064a4 <_reclaim_reent+0x6c>
 800649e:	4620      	mov	r0, r4
 80064a0:	f000 f862 	bl	8006568 <_free_r>
 80064a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80064a6:	b111      	cbz	r1, 80064ae <_reclaim_reent+0x76>
 80064a8:	4620      	mov	r0, r4
 80064aa:	f000 f85d 	bl	8006568 <_free_r>
 80064ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064b0:	b111      	cbz	r1, 80064b8 <_reclaim_reent+0x80>
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 f858 	bl	8006568 <_free_r>
 80064b8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80064ba:	b111      	cbz	r1, 80064c2 <_reclaim_reent+0x8a>
 80064bc:	4620      	mov	r0, r4
 80064be:	f000 f853 	bl	8006568 <_free_r>
 80064c2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80064c4:	b111      	cbz	r1, 80064cc <_reclaim_reent+0x94>
 80064c6:	4620      	mov	r0, r4
 80064c8:	f000 f84e 	bl	8006568 <_free_r>
 80064cc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80064ce:	b111      	cbz	r1, 80064d6 <_reclaim_reent+0x9e>
 80064d0:	4620      	mov	r0, r4
 80064d2:	f000 f849 	bl	8006568 <_free_r>
 80064d6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80064d8:	b111      	cbz	r1, 80064e0 <_reclaim_reent+0xa8>
 80064da:	4620      	mov	r0, r4
 80064dc:	f000 f844 	bl	8006568 <_free_r>
 80064e0:	6a23      	ldr	r3, [r4, #32]
 80064e2:	b11b      	cbz	r3, 80064ec <_reclaim_reent+0xb4>
 80064e4:	4620      	mov	r0, r4
 80064e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80064ea:	4718      	bx	r3
 80064ec:	bd70      	pop	{r4, r5, r6, pc}
 80064ee:	bf00      	nop
 80064f0:	20000028 	.word	0x20000028

080064f4 <__errno>:
 80064f4:	4b01      	ldr	r3, [pc, #4]	@ (80064fc <__errno+0x8>)
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	20000028 	.word	0x20000028

08006500 <__libc_init_array>:
 8006500:	b570      	push	{r4, r5, r6, lr}
 8006502:	4d0d      	ldr	r5, [pc, #52]	@ (8006538 <__libc_init_array+0x38>)
 8006504:	4c0d      	ldr	r4, [pc, #52]	@ (800653c <__libc_init_array+0x3c>)
 8006506:	1b64      	subs	r4, r4, r5
 8006508:	10a4      	asrs	r4, r4, #2
 800650a:	2600      	movs	r6, #0
 800650c:	42a6      	cmp	r6, r4
 800650e:	d109      	bne.n	8006524 <__libc_init_array+0x24>
 8006510:	4d0b      	ldr	r5, [pc, #44]	@ (8006540 <__libc_init_array+0x40>)
 8006512:	4c0c      	ldr	r4, [pc, #48]	@ (8006544 <__libc_init_array+0x44>)
 8006514:	f000 fc64 	bl	8006de0 <_init>
 8006518:	1b64      	subs	r4, r4, r5
 800651a:	10a4      	asrs	r4, r4, #2
 800651c:	2600      	movs	r6, #0
 800651e:	42a6      	cmp	r6, r4
 8006520:	d105      	bne.n	800652e <__libc_init_array+0x2e>
 8006522:	bd70      	pop	{r4, r5, r6, pc}
 8006524:	f855 3b04 	ldr.w	r3, [r5], #4
 8006528:	4798      	blx	r3
 800652a:	3601      	adds	r6, #1
 800652c:	e7ee      	b.n	800650c <__libc_init_array+0xc>
 800652e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006532:	4798      	blx	r3
 8006534:	3601      	adds	r6, #1
 8006536:	e7f2      	b.n	800651e <__libc_init_array+0x1e>
 8006538:	08006e8c 	.word	0x08006e8c
 800653c:	08006e8c 	.word	0x08006e8c
 8006540:	08006e8c 	.word	0x08006e8c
 8006544:	08006e90 	.word	0x08006e90

08006548 <__retarget_lock_acquire_recursive>:
 8006548:	4770      	bx	lr

0800654a <__retarget_lock_release_recursive>:
 800654a:	4770      	bx	lr

0800654c <memcpy>:
 800654c:	440a      	add	r2, r1
 800654e:	4291      	cmp	r1, r2
 8006550:	f100 33ff 	add.w	r3, r0, #4294967295
 8006554:	d100      	bne.n	8006558 <memcpy+0xc>
 8006556:	4770      	bx	lr
 8006558:	b510      	push	{r4, lr}
 800655a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800655e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006562:	4291      	cmp	r1, r2
 8006564:	d1f9      	bne.n	800655a <memcpy+0xe>
 8006566:	bd10      	pop	{r4, pc}

08006568 <_free_r>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4605      	mov	r5, r0
 800656c:	2900      	cmp	r1, #0
 800656e:	d041      	beq.n	80065f4 <_free_r+0x8c>
 8006570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006574:	1f0c      	subs	r4, r1, #4
 8006576:	2b00      	cmp	r3, #0
 8006578:	bfb8      	it	lt
 800657a:	18e4      	addlt	r4, r4, r3
 800657c:	f000 f8e0 	bl	8006740 <__malloc_lock>
 8006580:	4a1d      	ldr	r2, [pc, #116]	@ (80065f8 <_free_r+0x90>)
 8006582:	6813      	ldr	r3, [r2, #0]
 8006584:	b933      	cbnz	r3, 8006594 <_free_r+0x2c>
 8006586:	6063      	str	r3, [r4, #4]
 8006588:	6014      	str	r4, [r2, #0]
 800658a:	4628      	mov	r0, r5
 800658c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006590:	f000 b8dc 	b.w	800674c <__malloc_unlock>
 8006594:	42a3      	cmp	r3, r4
 8006596:	d908      	bls.n	80065aa <_free_r+0x42>
 8006598:	6820      	ldr	r0, [r4, #0]
 800659a:	1821      	adds	r1, r4, r0
 800659c:	428b      	cmp	r3, r1
 800659e:	bf01      	itttt	eq
 80065a0:	6819      	ldreq	r1, [r3, #0]
 80065a2:	685b      	ldreq	r3, [r3, #4]
 80065a4:	1809      	addeq	r1, r1, r0
 80065a6:	6021      	streq	r1, [r4, #0]
 80065a8:	e7ed      	b.n	8006586 <_free_r+0x1e>
 80065aa:	461a      	mov	r2, r3
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	b10b      	cbz	r3, 80065b4 <_free_r+0x4c>
 80065b0:	42a3      	cmp	r3, r4
 80065b2:	d9fa      	bls.n	80065aa <_free_r+0x42>
 80065b4:	6811      	ldr	r1, [r2, #0]
 80065b6:	1850      	adds	r0, r2, r1
 80065b8:	42a0      	cmp	r0, r4
 80065ba:	d10b      	bne.n	80065d4 <_free_r+0x6c>
 80065bc:	6820      	ldr	r0, [r4, #0]
 80065be:	4401      	add	r1, r0
 80065c0:	1850      	adds	r0, r2, r1
 80065c2:	4283      	cmp	r3, r0
 80065c4:	6011      	str	r1, [r2, #0]
 80065c6:	d1e0      	bne.n	800658a <_free_r+0x22>
 80065c8:	6818      	ldr	r0, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	6053      	str	r3, [r2, #4]
 80065ce:	4408      	add	r0, r1
 80065d0:	6010      	str	r0, [r2, #0]
 80065d2:	e7da      	b.n	800658a <_free_r+0x22>
 80065d4:	d902      	bls.n	80065dc <_free_r+0x74>
 80065d6:	230c      	movs	r3, #12
 80065d8:	602b      	str	r3, [r5, #0]
 80065da:	e7d6      	b.n	800658a <_free_r+0x22>
 80065dc:	6820      	ldr	r0, [r4, #0]
 80065de:	1821      	adds	r1, r4, r0
 80065e0:	428b      	cmp	r3, r1
 80065e2:	bf04      	itt	eq
 80065e4:	6819      	ldreq	r1, [r3, #0]
 80065e6:	685b      	ldreq	r3, [r3, #4]
 80065e8:	6063      	str	r3, [r4, #4]
 80065ea:	bf04      	itt	eq
 80065ec:	1809      	addeq	r1, r1, r0
 80065ee:	6021      	streq	r1, [r4, #0]
 80065f0:	6054      	str	r4, [r2, #4]
 80065f2:	e7ca      	b.n	800658a <_free_r+0x22>
 80065f4:	bd38      	pop	{r3, r4, r5, pc}
 80065f6:	bf00      	nop
 80065f8:	200046a8 	.word	0x200046a8

080065fc <sbrk_aligned>:
 80065fc:	b570      	push	{r4, r5, r6, lr}
 80065fe:	4e0f      	ldr	r6, [pc, #60]	@ (800663c <sbrk_aligned+0x40>)
 8006600:	460c      	mov	r4, r1
 8006602:	6831      	ldr	r1, [r6, #0]
 8006604:	4605      	mov	r5, r0
 8006606:	b911      	cbnz	r1, 800660e <sbrk_aligned+0x12>
 8006608:	f000 fba4 	bl	8006d54 <_sbrk_r>
 800660c:	6030      	str	r0, [r6, #0]
 800660e:	4621      	mov	r1, r4
 8006610:	4628      	mov	r0, r5
 8006612:	f000 fb9f 	bl	8006d54 <_sbrk_r>
 8006616:	1c43      	adds	r3, r0, #1
 8006618:	d103      	bne.n	8006622 <sbrk_aligned+0x26>
 800661a:	f04f 34ff 	mov.w	r4, #4294967295
 800661e:	4620      	mov	r0, r4
 8006620:	bd70      	pop	{r4, r5, r6, pc}
 8006622:	1cc4      	adds	r4, r0, #3
 8006624:	f024 0403 	bic.w	r4, r4, #3
 8006628:	42a0      	cmp	r0, r4
 800662a:	d0f8      	beq.n	800661e <sbrk_aligned+0x22>
 800662c:	1a21      	subs	r1, r4, r0
 800662e:	4628      	mov	r0, r5
 8006630:	f000 fb90 	bl	8006d54 <_sbrk_r>
 8006634:	3001      	adds	r0, #1
 8006636:	d1f2      	bne.n	800661e <sbrk_aligned+0x22>
 8006638:	e7ef      	b.n	800661a <sbrk_aligned+0x1e>
 800663a:	bf00      	nop
 800663c:	200046a4 	.word	0x200046a4

08006640 <_malloc_r>:
 8006640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006644:	1ccd      	adds	r5, r1, #3
 8006646:	f025 0503 	bic.w	r5, r5, #3
 800664a:	3508      	adds	r5, #8
 800664c:	2d0c      	cmp	r5, #12
 800664e:	bf38      	it	cc
 8006650:	250c      	movcc	r5, #12
 8006652:	2d00      	cmp	r5, #0
 8006654:	4606      	mov	r6, r0
 8006656:	db01      	blt.n	800665c <_malloc_r+0x1c>
 8006658:	42a9      	cmp	r1, r5
 800665a:	d904      	bls.n	8006666 <_malloc_r+0x26>
 800665c:	230c      	movs	r3, #12
 800665e:	6033      	str	r3, [r6, #0]
 8006660:	2000      	movs	r0, #0
 8006662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006666:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800673c <_malloc_r+0xfc>
 800666a:	f000 f869 	bl	8006740 <__malloc_lock>
 800666e:	f8d8 3000 	ldr.w	r3, [r8]
 8006672:	461c      	mov	r4, r3
 8006674:	bb44      	cbnz	r4, 80066c8 <_malloc_r+0x88>
 8006676:	4629      	mov	r1, r5
 8006678:	4630      	mov	r0, r6
 800667a:	f7ff ffbf 	bl	80065fc <sbrk_aligned>
 800667e:	1c43      	adds	r3, r0, #1
 8006680:	4604      	mov	r4, r0
 8006682:	d158      	bne.n	8006736 <_malloc_r+0xf6>
 8006684:	f8d8 4000 	ldr.w	r4, [r8]
 8006688:	4627      	mov	r7, r4
 800668a:	2f00      	cmp	r7, #0
 800668c:	d143      	bne.n	8006716 <_malloc_r+0xd6>
 800668e:	2c00      	cmp	r4, #0
 8006690:	d04b      	beq.n	800672a <_malloc_r+0xea>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	4639      	mov	r1, r7
 8006696:	4630      	mov	r0, r6
 8006698:	eb04 0903 	add.w	r9, r4, r3
 800669c:	f000 fb5a 	bl	8006d54 <_sbrk_r>
 80066a0:	4581      	cmp	r9, r0
 80066a2:	d142      	bne.n	800672a <_malloc_r+0xea>
 80066a4:	6821      	ldr	r1, [r4, #0]
 80066a6:	1a6d      	subs	r5, r5, r1
 80066a8:	4629      	mov	r1, r5
 80066aa:	4630      	mov	r0, r6
 80066ac:	f7ff ffa6 	bl	80065fc <sbrk_aligned>
 80066b0:	3001      	adds	r0, #1
 80066b2:	d03a      	beq.n	800672a <_malloc_r+0xea>
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	442b      	add	r3, r5
 80066b8:	6023      	str	r3, [r4, #0]
 80066ba:	f8d8 3000 	ldr.w	r3, [r8]
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	bb62      	cbnz	r2, 800671c <_malloc_r+0xdc>
 80066c2:	f8c8 7000 	str.w	r7, [r8]
 80066c6:	e00f      	b.n	80066e8 <_malloc_r+0xa8>
 80066c8:	6822      	ldr	r2, [r4, #0]
 80066ca:	1b52      	subs	r2, r2, r5
 80066cc:	d420      	bmi.n	8006710 <_malloc_r+0xd0>
 80066ce:	2a0b      	cmp	r2, #11
 80066d0:	d917      	bls.n	8006702 <_malloc_r+0xc2>
 80066d2:	1961      	adds	r1, r4, r5
 80066d4:	42a3      	cmp	r3, r4
 80066d6:	6025      	str	r5, [r4, #0]
 80066d8:	bf18      	it	ne
 80066da:	6059      	strne	r1, [r3, #4]
 80066dc:	6863      	ldr	r3, [r4, #4]
 80066de:	bf08      	it	eq
 80066e0:	f8c8 1000 	streq.w	r1, [r8]
 80066e4:	5162      	str	r2, [r4, r5]
 80066e6:	604b      	str	r3, [r1, #4]
 80066e8:	4630      	mov	r0, r6
 80066ea:	f000 f82f 	bl	800674c <__malloc_unlock>
 80066ee:	f104 000b 	add.w	r0, r4, #11
 80066f2:	1d23      	adds	r3, r4, #4
 80066f4:	f020 0007 	bic.w	r0, r0, #7
 80066f8:	1ac2      	subs	r2, r0, r3
 80066fa:	bf1c      	itt	ne
 80066fc:	1a1b      	subne	r3, r3, r0
 80066fe:	50a3      	strne	r3, [r4, r2]
 8006700:	e7af      	b.n	8006662 <_malloc_r+0x22>
 8006702:	6862      	ldr	r2, [r4, #4]
 8006704:	42a3      	cmp	r3, r4
 8006706:	bf0c      	ite	eq
 8006708:	f8c8 2000 	streq.w	r2, [r8]
 800670c:	605a      	strne	r2, [r3, #4]
 800670e:	e7eb      	b.n	80066e8 <_malloc_r+0xa8>
 8006710:	4623      	mov	r3, r4
 8006712:	6864      	ldr	r4, [r4, #4]
 8006714:	e7ae      	b.n	8006674 <_malloc_r+0x34>
 8006716:	463c      	mov	r4, r7
 8006718:	687f      	ldr	r7, [r7, #4]
 800671a:	e7b6      	b.n	800668a <_malloc_r+0x4a>
 800671c:	461a      	mov	r2, r3
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	42a3      	cmp	r3, r4
 8006722:	d1fb      	bne.n	800671c <_malloc_r+0xdc>
 8006724:	2300      	movs	r3, #0
 8006726:	6053      	str	r3, [r2, #4]
 8006728:	e7de      	b.n	80066e8 <_malloc_r+0xa8>
 800672a:	230c      	movs	r3, #12
 800672c:	6033      	str	r3, [r6, #0]
 800672e:	4630      	mov	r0, r6
 8006730:	f000 f80c 	bl	800674c <__malloc_unlock>
 8006734:	e794      	b.n	8006660 <_malloc_r+0x20>
 8006736:	6005      	str	r5, [r0, #0]
 8006738:	e7d6      	b.n	80066e8 <_malloc_r+0xa8>
 800673a:	bf00      	nop
 800673c:	200046a8 	.word	0x200046a8

08006740 <__malloc_lock>:
 8006740:	4801      	ldr	r0, [pc, #4]	@ (8006748 <__malloc_lock+0x8>)
 8006742:	f7ff bf01 	b.w	8006548 <__retarget_lock_acquire_recursive>
 8006746:	bf00      	nop
 8006748:	200046a0 	.word	0x200046a0

0800674c <__malloc_unlock>:
 800674c:	4801      	ldr	r0, [pc, #4]	@ (8006754 <__malloc_unlock+0x8>)
 800674e:	f7ff befc 	b.w	800654a <__retarget_lock_release_recursive>
 8006752:	bf00      	nop
 8006754:	200046a0 	.word	0x200046a0

08006758 <__ssputs_r>:
 8006758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800675c:	688e      	ldr	r6, [r1, #8]
 800675e:	461f      	mov	r7, r3
 8006760:	42be      	cmp	r6, r7
 8006762:	680b      	ldr	r3, [r1, #0]
 8006764:	4682      	mov	sl, r0
 8006766:	460c      	mov	r4, r1
 8006768:	4690      	mov	r8, r2
 800676a:	d82d      	bhi.n	80067c8 <__ssputs_r+0x70>
 800676c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006770:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006774:	d026      	beq.n	80067c4 <__ssputs_r+0x6c>
 8006776:	6965      	ldr	r5, [r4, #20]
 8006778:	6909      	ldr	r1, [r1, #16]
 800677a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800677e:	eba3 0901 	sub.w	r9, r3, r1
 8006782:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006786:	1c7b      	adds	r3, r7, #1
 8006788:	444b      	add	r3, r9
 800678a:	106d      	asrs	r5, r5, #1
 800678c:	429d      	cmp	r5, r3
 800678e:	bf38      	it	cc
 8006790:	461d      	movcc	r5, r3
 8006792:	0553      	lsls	r3, r2, #21
 8006794:	d527      	bpl.n	80067e6 <__ssputs_r+0x8e>
 8006796:	4629      	mov	r1, r5
 8006798:	f7ff ff52 	bl	8006640 <_malloc_r>
 800679c:	4606      	mov	r6, r0
 800679e:	b360      	cbz	r0, 80067fa <__ssputs_r+0xa2>
 80067a0:	6921      	ldr	r1, [r4, #16]
 80067a2:	464a      	mov	r2, r9
 80067a4:	f7ff fed2 	bl	800654c <memcpy>
 80067a8:	89a3      	ldrh	r3, [r4, #12]
 80067aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80067ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b2:	81a3      	strh	r3, [r4, #12]
 80067b4:	6126      	str	r6, [r4, #16]
 80067b6:	6165      	str	r5, [r4, #20]
 80067b8:	444e      	add	r6, r9
 80067ba:	eba5 0509 	sub.w	r5, r5, r9
 80067be:	6026      	str	r6, [r4, #0]
 80067c0:	60a5      	str	r5, [r4, #8]
 80067c2:	463e      	mov	r6, r7
 80067c4:	42be      	cmp	r6, r7
 80067c6:	d900      	bls.n	80067ca <__ssputs_r+0x72>
 80067c8:	463e      	mov	r6, r7
 80067ca:	6820      	ldr	r0, [r4, #0]
 80067cc:	4632      	mov	r2, r6
 80067ce:	4641      	mov	r1, r8
 80067d0:	f000 faa6 	bl	8006d20 <memmove>
 80067d4:	68a3      	ldr	r3, [r4, #8]
 80067d6:	1b9b      	subs	r3, r3, r6
 80067d8:	60a3      	str	r3, [r4, #8]
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	4433      	add	r3, r6
 80067de:	6023      	str	r3, [r4, #0]
 80067e0:	2000      	movs	r0, #0
 80067e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e6:	462a      	mov	r2, r5
 80067e8:	f000 fac4 	bl	8006d74 <_realloc_r>
 80067ec:	4606      	mov	r6, r0
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d1e0      	bne.n	80067b4 <__ssputs_r+0x5c>
 80067f2:	6921      	ldr	r1, [r4, #16]
 80067f4:	4650      	mov	r0, sl
 80067f6:	f7ff feb7 	bl	8006568 <_free_r>
 80067fa:	230c      	movs	r3, #12
 80067fc:	f8ca 3000 	str.w	r3, [sl]
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006806:	81a3      	strh	r3, [r4, #12]
 8006808:	f04f 30ff 	mov.w	r0, #4294967295
 800680c:	e7e9      	b.n	80067e2 <__ssputs_r+0x8a>
	...

08006810 <_svfiprintf_r>:
 8006810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006814:	4698      	mov	r8, r3
 8006816:	898b      	ldrh	r3, [r1, #12]
 8006818:	061b      	lsls	r3, r3, #24
 800681a:	b09d      	sub	sp, #116	@ 0x74
 800681c:	4607      	mov	r7, r0
 800681e:	460d      	mov	r5, r1
 8006820:	4614      	mov	r4, r2
 8006822:	d510      	bpl.n	8006846 <_svfiprintf_r+0x36>
 8006824:	690b      	ldr	r3, [r1, #16]
 8006826:	b973      	cbnz	r3, 8006846 <_svfiprintf_r+0x36>
 8006828:	2140      	movs	r1, #64	@ 0x40
 800682a:	f7ff ff09 	bl	8006640 <_malloc_r>
 800682e:	6028      	str	r0, [r5, #0]
 8006830:	6128      	str	r0, [r5, #16]
 8006832:	b930      	cbnz	r0, 8006842 <_svfiprintf_r+0x32>
 8006834:	230c      	movs	r3, #12
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	f04f 30ff 	mov.w	r0, #4294967295
 800683c:	b01d      	add	sp, #116	@ 0x74
 800683e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006842:	2340      	movs	r3, #64	@ 0x40
 8006844:	616b      	str	r3, [r5, #20]
 8006846:	2300      	movs	r3, #0
 8006848:	9309      	str	r3, [sp, #36]	@ 0x24
 800684a:	2320      	movs	r3, #32
 800684c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006850:	f8cd 800c 	str.w	r8, [sp, #12]
 8006854:	2330      	movs	r3, #48	@ 0x30
 8006856:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80069f4 <_svfiprintf_r+0x1e4>
 800685a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800685e:	f04f 0901 	mov.w	r9, #1
 8006862:	4623      	mov	r3, r4
 8006864:	469a      	mov	sl, r3
 8006866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800686a:	b10a      	cbz	r2, 8006870 <_svfiprintf_r+0x60>
 800686c:	2a25      	cmp	r2, #37	@ 0x25
 800686e:	d1f9      	bne.n	8006864 <_svfiprintf_r+0x54>
 8006870:	ebba 0b04 	subs.w	fp, sl, r4
 8006874:	d00b      	beq.n	800688e <_svfiprintf_r+0x7e>
 8006876:	465b      	mov	r3, fp
 8006878:	4622      	mov	r2, r4
 800687a:	4629      	mov	r1, r5
 800687c:	4638      	mov	r0, r7
 800687e:	f7ff ff6b 	bl	8006758 <__ssputs_r>
 8006882:	3001      	adds	r0, #1
 8006884:	f000 80a7 	beq.w	80069d6 <_svfiprintf_r+0x1c6>
 8006888:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800688a:	445a      	add	r2, fp
 800688c:	9209      	str	r2, [sp, #36]	@ 0x24
 800688e:	f89a 3000 	ldrb.w	r3, [sl]
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 809f 	beq.w	80069d6 <_svfiprintf_r+0x1c6>
 8006898:	2300      	movs	r3, #0
 800689a:	f04f 32ff 	mov.w	r2, #4294967295
 800689e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068a2:	f10a 0a01 	add.w	sl, sl, #1
 80068a6:	9304      	str	r3, [sp, #16]
 80068a8:	9307      	str	r3, [sp, #28]
 80068aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80068b0:	4654      	mov	r4, sl
 80068b2:	2205      	movs	r2, #5
 80068b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068b8:	484e      	ldr	r0, [pc, #312]	@ (80069f4 <_svfiprintf_r+0x1e4>)
 80068ba:	f7f9 fc91 	bl	80001e0 <memchr>
 80068be:	9a04      	ldr	r2, [sp, #16]
 80068c0:	b9d8      	cbnz	r0, 80068fa <_svfiprintf_r+0xea>
 80068c2:	06d0      	lsls	r0, r2, #27
 80068c4:	bf44      	itt	mi
 80068c6:	2320      	movmi	r3, #32
 80068c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068cc:	0711      	lsls	r1, r2, #28
 80068ce:	bf44      	itt	mi
 80068d0:	232b      	movmi	r3, #43	@ 0x2b
 80068d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068d6:	f89a 3000 	ldrb.w	r3, [sl]
 80068da:	2b2a      	cmp	r3, #42	@ 0x2a
 80068dc:	d015      	beq.n	800690a <_svfiprintf_r+0xfa>
 80068de:	9a07      	ldr	r2, [sp, #28]
 80068e0:	4654      	mov	r4, sl
 80068e2:	2000      	movs	r0, #0
 80068e4:	f04f 0c0a 	mov.w	ip, #10
 80068e8:	4621      	mov	r1, r4
 80068ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068ee:	3b30      	subs	r3, #48	@ 0x30
 80068f0:	2b09      	cmp	r3, #9
 80068f2:	d94b      	bls.n	800698c <_svfiprintf_r+0x17c>
 80068f4:	b1b0      	cbz	r0, 8006924 <_svfiprintf_r+0x114>
 80068f6:	9207      	str	r2, [sp, #28]
 80068f8:	e014      	b.n	8006924 <_svfiprintf_r+0x114>
 80068fa:	eba0 0308 	sub.w	r3, r0, r8
 80068fe:	fa09 f303 	lsl.w	r3, r9, r3
 8006902:	4313      	orrs	r3, r2
 8006904:	9304      	str	r3, [sp, #16]
 8006906:	46a2      	mov	sl, r4
 8006908:	e7d2      	b.n	80068b0 <_svfiprintf_r+0xa0>
 800690a:	9b03      	ldr	r3, [sp, #12]
 800690c:	1d19      	adds	r1, r3, #4
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	9103      	str	r1, [sp, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	bfbb      	ittet	lt
 8006916:	425b      	neglt	r3, r3
 8006918:	f042 0202 	orrlt.w	r2, r2, #2
 800691c:	9307      	strge	r3, [sp, #28]
 800691e:	9307      	strlt	r3, [sp, #28]
 8006920:	bfb8      	it	lt
 8006922:	9204      	strlt	r2, [sp, #16]
 8006924:	7823      	ldrb	r3, [r4, #0]
 8006926:	2b2e      	cmp	r3, #46	@ 0x2e
 8006928:	d10a      	bne.n	8006940 <_svfiprintf_r+0x130>
 800692a:	7863      	ldrb	r3, [r4, #1]
 800692c:	2b2a      	cmp	r3, #42	@ 0x2a
 800692e:	d132      	bne.n	8006996 <_svfiprintf_r+0x186>
 8006930:	9b03      	ldr	r3, [sp, #12]
 8006932:	1d1a      	adds	r2, r3, #4
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	9203      	str	r2, [sp, #12]
 8006938:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800693c:	3402      	adds	r4, #2
 800693e:	9305      	str	r3, [sp, #20]
 8006940:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006a04 <_svfiprintf_r+0x1f4>
 8006944:	7821      	ldrb	r1, [r4, #0]
 8006946:	2203      	movs	r2, #3
 8006948:	4650      	mov	r0, sl
 800694a:	f7f9 fc49 	bl	80001e0 <memchr>
 800694e:	b138      	cbz	r0, 8006960 <_svfiprintf_r+0x150>
 8006950:	9b04      	ldr	r3, [sp, #16]
 8006952:	eba0 000a 	sub.w	r0, r0, sl
 8006956:	2240      	movs	r2, #64	@ 0x40
 8006958:	4082      	lsls	r2, r0
 800695a:	4313      	orrs	r3, r2
 800695c:	3401      	adds	r4, #1
 800695e:	9304      	str	r3, [sp, #16]
 8006960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006964:	4824      	ldr	r0, [pc, #144]	@ (80069f8 <_svfiprintf_r+0x1e8>)
 8006966:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800696a:	2206      	movs	r2, #6
 800696c:	f7f9 fc38 	bl	80001e0 <memchr>
 8006970:	2800      	cmp	r0, #0
 8006972:	d036      	beq.n	80069e2 <_svfiprintf_r+0x1d2>
 8006974:	4b21      	ldr	r3, [pc, #132]	@ (80069fc <_svfiprintf_r+0x1ec>)
 8006976:	bb1b      	cbnz	r3, 80069c0 <_svfiprintf_r+0x1b0>
 8006978:	9b03      	ldr	r3, [sp, #12]
 800697a:	3307      	adds	r3, #7
 800697c:	f023 0307 	bic.w	r3, r3, #7
 8006980:	3308      	adds	r3, #8
 8006982:	9303      	str	r3, [sp, #12]
 8006984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006986:	4433      	add	r3, r6
 8006988:	9309      	str	r3, [sp, #36]	@ 0x24
 800698a:	e76a      	b.n	8006862 <_svfiprintf_r+0x52>
 800698c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006990:	460c      	mov	r4, r1
 8006992:	2001      	movs	r0, #1
 8006994:	e7a8      	b.n	80068e8 <_svfiprintf_r+0xd8>
 8006996:	2300      	movs	r3, #0
 8006998:	3401      	adds	r4, #1
 800699a:	9305      	str	r3, [sp, #20]
 800699c:	4619      	mov	r1, r3
 800699e:	f04f 0c0a 	mov.w	ip, #10
 80069a2:	4620      	mov	r0, r4
 80069a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069a8:	3a30      	subs	r2, #48	@ 0x30
 80069aa:	2a09      	cmp	r2, #9
 80069ac:	d903      	bls.n	80069b6 <_svfiprintf_r+0x1a6>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0c6      	beq.n	8006940 <_svfiprintf_r+0x130>
 80069b2:	9105      	str	r1, [sp, #20]
 80069b4:	e7c4      	b.n	8006940 <_svfiprintf_r+0x130>
 80069b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80069ba:	4604      	mov	r4, r0
 80069bc:	2301      	movs	r3, #1
 80069be:	e7f0      	b.n	80069a2 <_svfiprintf_r+0x192>
 80069c0:	ab03      	add	r3, sp, #12
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	462a      	mov	r2, r5
 80069c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006a00 <_svfiprintf_r+0x1f0>)
 80069c8:	a904      	add	r1, sp, #16
 80069ca:	4638      	mov	r0, r7
 80069cc:	f3af 8000 	nop.w
 80069d0:	1c42      	adds	r2, r0, #1
 80069d2:	4606      	mov	r6, r0
 80069d4:	d1d6      	bne.n	8006984 <_svfiprintf_r+0x174>
 80069d6:	89ab      	ldrh	r3, [r5, #12]
 80069d8:	065b      	lsls	r3, r3, #25
 80069da:	f53f af2d 	bmi.w	8006838 <_svfiprintf_r+0x28>
 80069de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069e0:	e72c      	b.n	800683c <_svfiprintf_r+0x2c>
 80069e2:	ab03      	add	r3, sp, #12
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	462a      	mov	r2, r5
 80069e8:	4b05      	ldr	r3, [pc, #20]	@ (8006a00 <_svfiprintf_r+0x1f0>)
 80069ea:	a904      	add	r1, sp, #16
 80069ec:	4638      	mov	r0, r7
 80069ee:	f000 f879 	bl	8006ae4 <_printf_i>
 80069f2:	e7ed      	b.n	80069d0 <_svfiprintf_r+0x1c0>
 80069f4:	08006e50 	.word	0x08006e50
 80069f8:	08006e5a 	.word	0x08006e5a
 80069fc:	00000000 	.word	0x00000000
 8006a00:	08006759 	.word	0x08006759
 8006a04:	08006e56 	.word	0x08006e56

08006a08 <_printf_common>:
 8006a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a0c:	4616      	mov	r6, r2
 8006a0e:	4698      	mov	r8, r3
 8006a10:	688a      	ldr	r2, [r1, #8]
 8006a12:	690b      	ldr	r3, [r1, #16]
 8006a14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	bfb8      	it	lt
 8006a1c:	4613      	movlt	r3, r2
 8006a1e:	6033      	str	r3, [r6, #0]
 8006a20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a24:	4607      	mov	r7, r0
 8006a26:	460c      	mov	r4, r1
 8006a28:	b10a      	cbz	r2, 8006a2e <_printf_common+0x26>
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	6033      	str	r3, [r6, #0]
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	0699      	lsls	r1, r3, #26
 8006a32:	bf42      	ittt	mi
 8006a34:	6833      	ldrmi	r3, [r6, #0]
 8006a36:	3302      	addmi	r3, #2
 8006a38:	6033      	strmi	r3, [r6, #0]
 8006a3a:	6825      	ldr	r5, [r4, #0]
 8006a3c:	f015 0506 	ands.w	r5, r5, #6
 8006a40:	d106      	bne.n	8006a50 <_printf_common+0x48>
 8006a42:	f104 0a19 	add.w	sl, r4, #25
 8006a46:	68e3      	ldr	r3, [r4, #12]
 8006a48:	6832      	ldr	r2, [r6, #0]
 8006a4a:	1a9b      	subs	r3, r3, r2
 8006a4c:	42ab      	cmp	r3, r5
 8006a4e:	dc26      	bgt.n	8006a9e <_printf_common+0x96>
 8006a50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a54:	6822      	ldr	r2, [r4, #0]
 8006a56:	3b00      	subs	r3, #0
 8006a58:	bf18      	it	ne
 8006a5a:	2301      	movne	r3, #1
 8006a5c:	0692      	lsls	r2, r2, #26
 8006a5e:	d42b      	bmi.n	8006ab8 <_printf_common+0xb0>
 8006a60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a64:	4641      	mov	r1, r8
 8006a66:	4638      	mov	r0, r7
 8006a68:	47c8      	blx	r9
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	d01e      	beq.n	8006aac <_printf_common+0xa4>
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	6922      	ldr	r2, [r4, #16]
 8006a72:	f003 0306 	and.w	r3, r3, #6
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	bf02      	ittt	eq
 8006a7a:	68e5      	ldreq	r5, [r4, #12]
 8006a7c:	6833      	ldreq	r3, [r6, #0]
 8006a7e:	1aed      	subeq	r5, r5, r3
 8006a80:	68a3      	ldr	r3, [r4, #8]
 8006a82:	bf0c      	ite	eq
 8006a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a88:	2500      	movne	r5, #0
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	bfc4      	itt	gt
 8006a8e:	1a9b      	subgt	r3, r3, r2
 8006a90:	18ed      	addgt	r5, r5, r3
 8006a92:	2600      	movs	r6, #0
 8006a94:	341a      	adds	r4, #26
 8006a96:	42b5      	cmp	r5, r6
 8006a98:	d11a      	bne.n	8006ad0 <_printf_common+0xc8>
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	e008      	b.n	8006ab0 <_printf_common+0xa8>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	4652      	mov	r2, sl
 8006aa2:	4641      	mov	r1, r8
 8006aa4:	4638      	mov	r0, r7
 8006aa6:	47c8      	blx	r9
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	d103      	bne.n	8006ab4 <_printf_common+0xac>
 8006aac:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab4:	3501      	adds	r5, #1
 8006ab6:	e7c6      	b.n	8006a46 <_printf_common+0x3e>
 8006ab8:	18e1      	adds	r1, r4, r3
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	2030      	movs	r0, #48	@ 0x30
 8006abe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ac2:	4422      	add	r2, r4
 8006ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ac8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006acc:	3302      	adds	r3, #2
 8006ace:	e7c7      	b.n	8006a60 <_printf_common+0x58>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	4622      	mov	r2, r4
 8006ad4:	4641      	mov	r1, r8
 8006ad6:	4638      	mov	r0, r7
 8006ad8:	47c8      	blx	r9
 8006ada:	3001      	adds	r0, #1
 8006adc:	d0e6      	beq.n	8006aac <_printf_common+0xa4>
 8006ade:	3601      	adds	r6, #1
 8006ae0:	e7d9      	b.n	8006a96 <_printf_common+0x8e>
	...

08006ae4 <_printf_i>:
 8006ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae8:	7e0f      	ldrb	r7, [r1, #24]
 8006aea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006aec:	2f78      	cmp	r7, #120	@ 0x78
 8006aee:	4691      	mov	r9, r2
 8006af0:	4680      	mov	r8, r0
 8006af2:	460c      	mov	r4, r1
 8006af4:	469a      	mov	sl, r3
 8006af6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006afa:	d807      	bhi.n	8006b0c <_printf_i+0x28>
 8006afc:	2f62      	cmp	r7, #98	@ 0x62
 8006afe:	d80a      	bhi.n	8006b16 <_printf_i+0x32>
 8006b00:	2f00      	cmp	r7, #0
 8006b02:	f000 80d1 	beq.w	8006ca8 <_printf_i+0x1c4>
 8006b06:	2f58      	cmp	r7, #88	@ 0x58
 8006b08:	f000 80b8 	beq.w	8006c7c <_printf_i+0x198>
 8006b0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b14:	e03a      	b.n	8006b8c <_printf_i+0xa8>
 8006b16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b1a:	2b15      	cmp	r3, #21
 8006b1c:	d8f6      	bhi.n	8006b0c <_printf_i+0x28>
 8006b1e:	a101      	add	r1, pc, #4	@ (adr r1, 8006b24 <_printf_i+0x40>)
 8006b20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b24:	08006b7d 	.word	0x08006b7d
 8006b28:	08006b91 	.word	0x08006b91
 8006b2c:	08006b0d 	.word	0x08006b0d
 8006b30:	08006b0d 	.word	0x08006b0d
 8006b34:	08006b0d 	.word	0x08006b0d
 8006b38:	08006b0d 	.word	0x08006b0d
 8006b3c:	08006b91 	.word	0x08006b91
 8006b40:	08006b0d 	.word	0x08006b0d
 8006b44:	08006b0d 	.word	0x08006b0d
 8006b48:	08006b0d 	.word	0x08006b0d
 8006b4c:	08006b0d 	.word	0x08006b0d
 8006b50:	08006c8f 	.word	0x08006c8f
 8006b54:	08006bbb 	.word	0x08006bbb
 8006b58:	08006c49 	.word	0x08006c49
 8006b5c:	08006b0d 	.word	0x08006b0d
 8006b60:	08006b0d 	.word	0x08006b0d
 8006b64:	08006cb1 	.word	0x08006cb1
 8006b68:	08006b0d 	.word	0x08006b0d
 8006b6c:	08006bbb 	.word	0x08006bbb
 8006b70:	08006b0d 	.word	0x08006b0d
 8006b74:	08006b0d 	.word	0x08006b0d
 8006b78:	08006c51 	.word	0x08006c51
 8006b7c:	6833      	ldr	r3, [r6, #0]
 8006b7e:	1d1a      	adds	r2, r3, #4
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6032      	str	r2, [r6, #0]
 8006b84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e09c      	b.n	8006cca <_printf_i+0x1e6>
 8006b90:	6833      	ldr	r3, [r6, #0]
 8006b92:	6820      	ldr	r0, [r4, #0]
 8006b94:	1d19      	adds	r1, r3, #4
 8006b96:	6031      	str	r1, [r6, #0]
 8006b98:	0606      	lsls	r6, r0, #24
 8006b9a:	d501      	bpl.n	8006ba0 <_printf_i+0xbc>
 8006b9c:	681d      	ldr	r5, [r3, #0]
 8006b9e:	e003      	b.n	8006ba8 <_printf_i+0xc4>
 8006ba0:	0645      	lsls	r5, r0, #25
 8006ba2:	d5fb      	bpl.n	8006b9c <_printf_i+0xb8>
 8006ba4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ba8:	2d00      	cmp	r5, #0
 8006baa:	da03      	bge.n	8006bb4 <_printf_i+0xd0>
 8006bac:	232d      	movs	r3, #45	@ 0x2d
 8006bae:	426d      	negs	r5, r5
 8006bb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bb4:	4858      	ldr	r0, [pc, #352]	@ (8006d18 <_printf_i+0x234>)
 8006bb6:	230a      	movs	r3, #10
 8006bb8:	e011      	b.n	8006bde <_printf_i+0xfa>
 8006bba:	6821      	ldr	r1, [r4, #0]
 8006bbc:	6833      	ldr	r3, [r6, #0]
 8006bbe:	0608      	lsls	r0, r1, #24
 8006bc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bc4:	d402      	bmi.n	8006bcc <_printf_i+0xe8>
 8006bc6:	0649      	lsls	r1, r1, #25
 8006bc8:	bf48      	it	mi
 8006bca:	b2ad      	uxthmi	r5, r5
 8006bcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006bce:	4852      	ldr	r0, [pc, #328]	@ (8006d18 <_printf_i+0x234>)
 8006bd0:	6033      	str	r3, [r6, #0]
 8006bd2:	bf14      	ite	ne
 8006bd4:	230a      	movne	r3, #10
 8006bd6:	2308      	moveq	r3, #8
 8006bd8:	2100      	movs	r1, #0
 8006bda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bde:	6866      	ldr	r6, [r4, #4]
 8006be0:	60a6      	str	r6, [r4, #8]
 8006be2:	2e00      	cmp	r6, #0
 8006be4:	db05      	blt.n	8006bf2 <_printf_i+0x10e>
 8006be6:	6821      	ldr	r1, [r4, #0]
 8006be8:	432e      	orrs	r6, r5
 8006bea:	f021 0104 	bic.w	r1, r1, #4
 8006bee:	6021      	str	r1, [r4, #0]
 8006bf0:	d04b      	beq.n	8006c8a <_printf_i+0x1a6>
 8006bf2:	4616      	mov	r6, r2
 8006bf4:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bf8:	fb03 5711 	mls	r7, r3, r1, r5
 8006bfc:	5dc7      	ldrb	r7, [r0, r7]
 8006bfe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c02:	462f      	mov	r7, r5
 8006c04:	42bb      	cmp	r3, r7
 8006c06:	460d      	mov	r5, r1
 8006c08:	d9f4      	bls.n	8006bf4 <_printf_i+0x110>
 8006c0a:	2b08      	cmp	r3, #8
 8006c0c:	d10b      	bne.n	8006c26 <_printf_i+0x142>
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	07df      	lsls	r7, r3, #31
 8006c12:	d508      	bpl.n	8006c26 <_printf_i+0x142>
 8006c14:	6923      	ldr	r3, [r4, #16]
 8006c16:	6861      	ldr	r1, [r4, #4]
 8006c18:	4299      	cmp	r1, r3
 8006c1a:	bfde      	ittt	le
 8006c1c:	2330      	movle	r3, #48	@ 0x30
 8006c1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c22:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c26:	1b92      	subs	r2, r2, r6
 8006c28:	6122      	str	r2, [r4, #16]
 8006c2a:	f8cd a000 	str.w	sl, [sp]
 8006c2e:	464b      	mov	r3, r9
 8006c30:	aa03      	add	r2, sp, #12
 8006c32:	4621      	mov	r1, r4
 8006c34:	4640      	mov	r0, r8
 8006c36:	f7ff fee7 	bl	8006a08 <_printf_common>
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	d14a      	bne.n	8006cd4 <_printf_i+0x1f0>
 8006c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c42:	b004      	add	sp, #16
 8006c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	f043 0320 	orr.w	r3, r3, #32
 8006c4e:	6023      	str	r3, [r4, #0]
 8006c50:	4832      	ldr	r0, [pc, #200]	@ (8006d1c <_printf_i+0x238>)
 8006c52:	2778      	movs	r7, #120	@ 0x78
 8006c54:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	6831      	ldr	r1, [r6, #0]
 8006c5c:	061f      	lsls	r7, r3, #24
 8006c5e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c62:	d402      	bmi.n	8006c6a <_printf_i+0x186>
 8006c64:	065f      	lsls	r7, r3, #25
 8006c66:	bf48      	it	mi
 8006c68:	b2ad      	uxthmi	r5, r5
 8006c6a:	6031      	str	r1, [r6, #0]
 8006c6c:	07d9      	lsls	r1, r3, #31
 8006c6e:	bf44      	itt	mi
 8006c70:	f043 0320 	orrmi.w	r3, r3, #32
 8006c74:	6023      	strmi	r3, [r4, #0]
 8006c76:	b11d      	cbz	r5, 8006c80 <_printf_i+0x19c>
 8006c78:	2310      	movs	r3, #16
 8006c7a:	e7ad      	b.n	8006bd8 <_printf_i+0xf4>
 8006c7c:	4826      	ldr	r0, [pc, #152]	@ (8006d18 <_printf_i+0x234>)
 8006c7e:	e7e9      	b.n	8006c54 <_printf_i+0x170>
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	f023 0320 	bic.w	r3, r3, #32
 8006c86:	6023      	str	r3, [r4, #0]
 8006c88:	e7f6      	b.n	8006c78 <_printf_i+0x194>
 8006c8a:	4616      	mov	r6, r2
 8006c8c:	e7bd      	b.n	8006c0a <_printf_i+0x126>
 8006c8e:	6833      	ldr	r3, [r6, #0]
 8006c90:	6825      	ldr	r5, [r4, #0]
 8006c92:	6961      	ldr	r1, [r4, #20]
 8006c94:	1d18      	adds	r0, r3, #4
 8006c96:	6030      	str	r0, [r6, #0]
 8006c98:	062e      	lsls	r6, r5, #24
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	d501      	bpl.n	8006ca2 <_printf_i+0x1be>
 8006c9e:	6019      	str	r1, [r3, #0]
 8006ca0:	e002      	b.n	8006ca8 <_printf_i+0x1c4>
 8006ca2:	0668      	lsls	r0, r5, #25
 8006ca4:	d5fb      	bpl.n	8006c9e <_printf_i+0x1ba>
 8006ca6:	8019      	strh	r1, [r3, #0]
 8006ca8:	2300      	movs	r3, #0
 8006caa:	6123      	str	r3, [r4, #16]
 8006cac:	4616      	mov	r6, r2
 8006cae:	e7bc      	b.n	8006c2a <_printf_i+0x146>
 8006cb0:	6833      	ldr	r3, [r6, #0]
 8006cb2:	1d1a      	adds	r2, r3, #4
 8006cb4:	6032      	str	r2, [r6, #0]
 8006cb6:	681e      	ldr	r6, [r3, #0]
 8006cb8:	6862      	ldr	r2, [r4, #4]
 8006cba:	2100      	movs	r1, #0
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	f7f9 fa8f 	bl	80001e0 <memchr>
 8006cc2:	b108      	cbz	r0, 8006cc8 <_printf_i+0x1e4>
 8006cc4:	1b80      	subs	r0, r0, r6
 8006cc6:	6060      	str	r0, [r4, #4]
 8006cc8:	6863      	ldr	r3, [r4, #4]
 8006cca:	6123      	str	r3, [r4, #16]
 8006ccc:	2300      	movs	r3, #0
 8006cce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cd2:	e7aa      	b.n	8006c2a <_printf_i+0x146>
 8006cd4:	6923      	ldr	r3, [r4, #16]
 8006cd6:	4632      	mov	r2, r6
 8006cd8:	4649      	mov	r1, r9
 8006cda:	4640      	mov	r0, r8
 8006cdc:	47d0      	blx	sl
 8006cde:	3001      	adds	r0, #1
 8006ce0:	d0ad      	beq.n	8006c3e <_printf_i+0x15a>
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	079b      	lsls	r3, r3, #30
 8006ce6:	d413      	bmi.n	8006d10 <_printf_i+0x22c>
 8006ce8:	68e0      	ldr	r0, [r4, #12]
 8006cea:	9b03      	ldr	r3, [sp, #12]
 8006cec:	4298      	cmp	r0, r3
 8006cee:	bfb8      	it	lt
 8006cf0:	4618      	movlt	r0, r3
 8006cf2:	e7a6      	b.n	8006c42 <_printf_i+0x15e>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	4632      	mov	r2, r6
 8006cf8:	4649      	mov	r1, r9
 8006cfa:	4640      	mov	r0, r8
 8006cfc:	47d0      	blx	sl
 8006cfe:	3001      	adds	r0, #1
 8006d00:	d09d      	beq.n	8006c3e <_printf_i+0x15a>
 8006d02:	3501      	adds	r5, #1
 8006d04:	68e3      	ldr	r3, [r4, #12]
 8006d06:	9903      	ldr	r1, [sp, #12]
 8006d08:	1a5b      	subs	r3, r3, r1
 8006d0a:	42ab      	cmp	r3, r5
 8006d0c:	dcf2      	bgt.n	8006cf4 <_printf_i+0x210>
 8006d0e:	e7eb      	b.n	8006ce8 <_printf_i+0x204>
 8006d10:	2500      	movs	r5, #0
 8006d12:	f104 0619 	add.w	r6, r4, #25
 8006d16:	e7f5      	b.n	8006d04 <_printf_i+0x220>
 8006d18:	08006e61 	.word	0x08006e61
 8006d1c:	08006e72 	.word	0x08006e72

08006d20 <memmove>:
 8006d20:	4288      	cmp	r0, r1
 8006d22:	b510      	push	{r4, lr}
 8006d24:	eb01 0402 	add.w	r4, r1, r2
 8006d28:	d902      	bls.n	8006d30 <memmove+0x10>
 8006d2a:	4284      	cmp	r4, r0
 8006d2c:	4623      	mov	r3, r4
 8006d2e:	d807      	bhi.n	8006d40 <memmove+0x20>
 8006d30:	1e43      	subs	r3, r0, #1
 8006d32:	42a1      	cmp	r1, r4
 8006d34:	d008      	beq.n	8006d48 <memmove+0x28>
 8006d36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d3e:	e7f8      	b.n	8006d32 <memmove+0x12>
 8006d40:	4402      	add	r2, r0
 8006d42:	4601      	mov	r1, r0
 8006d44:	428a      	cmp	r2, r1
 8006d46:	d100      	bne.n	8006d4a <memmove+0x2a>
 8006d48:	bd10      	pop	{r4, pc}
 8006d4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d52:	e7f7      	b.n	8006d44 <memmove+0x24>

08006d54 <_sbrk_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4d06      	ldr	r5, [pc, #24]	@ (8006d70 <_sbrk_r+0x1c>)
 8006d58:	2300      	movs	r3, #0
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	4608      	mov	r0, r1
 8006d5e:	602b      	str	r3, [r5, #0]
 8006d60:	f7fb f862 	bl	8001e28 <_sbrk>
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	d102      	bne.n	8006d6e <_sbrk_r+0x1a>
 8006d68:	682b      	ldr	r3, [r5, #0]
 8006d6a:	b103      	cbz	r3, 8006d6e <_sbrk_r+0x1a>
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
 8006d70:	2000469c 	.word	0x2000469c

08006d74 <_realloc_r>:
 8006d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d78:	4607      	mov	r7, r0
 8006d7a:	4614      	mov	r4, r2
 8006d7c:	460d      	mov	r5, r1
 8006d7e:	b921      	cbnz	r1, 8006d8a <_realloc_r+0x16>
 8006d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d84:	4611      	mov	r1, r2
 8006d86:	f7ff bc5b 	b.w	8006640 <_malloc_r>
 8006d8a:	b92a      	cbnz	r2, 8006d98 <_realloc_r+0x24>
 8006d8c:	f7ff fbec 	bl	8006568 <_free_r>
 8006d90:	4625      	mov	r5, r4
 8006d92:	4628      	mov	r0, r5
 8006d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d98:	f000 f81a 	bl	8006dd0 <_malloc_usable_size_r>
 8006d9c:	4284      	cmp	r4, r0
 8006d9e:	4606      	mov	r6, r0
 8006da0:	d802      	bhi.n	8006da8 <_realloc_r+0x34>
 8006da2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006da6:	d8f4      	bhi.n	8006d92 <_realloc_r+0x1e>
 8006da8:	4621      	mov	r1, r4
 8006daa:	4638      	mov	r0, r7
 8006dac:	f7ff fc48 	bl	8006640 <_malloc_r>
 8006db0:	4680      	mov	r8, r0
 8006db2:	b908      	cbnz	r0, 8006db8 <_realloc_r+0x44>
 8006db4:	4645      	mov	r5, r8
 8006db6:	e7ec      	b.n	8006d92 <_realloc_r+0x1e>
 8006db8:	42b4      	cmp	r4, r6
 8006dba:	4622      	mov	r2, r4
 8006dbc:	4629      	mov	r1, r5
 8006dbe:	bf28      	it	cs
 8006dc0:	4632      	movcs	r2, r6
 8006dc2:	f7ff fbc3 	bl	800654c <memcpy>
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	4638      	mov	r0, r7
 8006dca:	f7ff fbcd 	bl	8006568 <_free_r>
 8006dce:	e7f1      	b.n	8006db4 <_realloc_r+0x40>

08006dd0 <_malloc_usable_size_r>:
 8006dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dd4:	1f18      	subs	r0, r3, #4
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	bfbc      	itt	lt
 8006dda:	580b      	ldrlt	r3, [r1, r0]
 8006ddc:	18c0      	addlt	r0, r0, r3
 8006dde:	4770      	bx	lr

08006de0 <_init>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	bf00      	nop
 8006de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de6:	bc08      	pop	{r3}
 8006de8:	469e      	mov	lr, r3
 8006dea:	4770      	bx	lr

08006dec <_fini>:
 8006dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dee:	bf00      	nop
 8006df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006df2:	bc08      	pop	{r3}
 8006df4:	469e      	mov	lr, r3
 8006df6:	4770      	bx	lr
