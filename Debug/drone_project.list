
drone_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c08  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08006da8  08006da8  00007da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e34  08006e34  0000807c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006e34  08006e34  00007e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e3c  08006e3c  0000807c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e3c  08006e3c  00007e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e40  08006e40  00007e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08006e44  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004630  2000007c  08006ec0  0000807c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200046ac  08006ec0  000086ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017346  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034cd  00000000  00000000  0001f3f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  000228c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc4  00000000  00000000  00023d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001965e  00000000  00000000  00024ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016dfc  00000000  00000000  0003e342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a30b  00000000  00000000  0005513e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef449  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b8  00000000  00000000  000ef48c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000f4e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d90 	.word	0x08006d90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08006d90 	.word	0x08006d90

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <Calculate_Reference>:
 */

#include "Drone_control.h"

void Calculate_Reference(Drone_Calculation_Typedef *dr,Drone_Control_Typedef *dc)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	dr->picth_reference=(dc->RV-1500)*0.1f;//we can send reference direct from control
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	885b      	ldrh	r3, [r3, #2]
 80005ba:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80005be:	ee07 3a90 	vmov	s15, r3
 80005c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800063c <Calculate_Reference+0x90>
 80005ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	edc3 7a00 	vstr	s15, [r3]
	dr->roll_reference=(dc->RH-1500)*0.1f;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80005dc:	ee07 3a90 	vmov	s15, r3
 80005e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005e4:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800063c <Calculate_Reference+0x90>
 80005e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	edc3 7a01 	vstr	s15, [r3, #4]
	dr->yaw_reference=(dc->LH-1500)*0.1f;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	88db      	ldrh	r3, [r3, #6]
 80005f6:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80005fa:	ee07 3a90 	vmov	s15, r3
 80005fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000602:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800063c <Calculate_Reference+0x90>
 8000606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	edc3 7a02 	vstr	s15, [r3, #8]
	dr->high_reference=(dc->LV-1000)*10;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	889b      	ldrh	r3, [r3, #4]
 8000614:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8000618:	4613      	mov	r3, r2
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4413      	add	r3, r2
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	ee07 3a90 	vmov	s15, r3
 8000624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	3dcccccd 	.word	0x3dcccccd

08000640 <escNormalOneshot125>:
	HAL_Delay(8000);
	HAL_Delay(1000);
}

void escNormalOneshot125(TIM_HandleTypeDef *htim,uint32_t speed,Timer_channel_enumTypedef CHANNEL)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	4613      	mov	r3, r2
 800064c:	71fb      	strb	r3, [r7, #7]
	if(speed>=MAXIMUM_SPEED)
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000654:	4293      	cmp	r3, r2
 8000656:	d903      	bls.n	8000660 <escNormalOneshot125+0x20>
	{
		speed=MAXIMUM_SPEED;
 8000658:	f642 1304 	movw	r3, #10500	@ 0x2904
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	e004      	b.n	800066a <escNormalOneshot125+0x2a>
	}
	else if(speed<=MINIMUM_SPEED)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d101      	bne.n	800066a <escNormalOneshot125+0x2a>
	{
		speed=MINIMUM_SPEED;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
	}
	switch(CHANNEL)
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b0c      	cmp	r3, #12
 800066e:	d83d      	bhi.n	80006ec <escNormalOneshot125+0xac>
 8000670:	a201      	add	r2, pc, #4	@ (adr r2, 8000678 <escNormalOneshot125+0x38>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	080006ad 	.word	0x080006ad
 800067c:	080006ed 	.word	0x080006ed
 8000680:	080006ed 	.word	0x080006ed
 8000684:	080006ed 	.word	0x080006ed
 8000688:	080006bd 	.word	0x080006bd
 800068c:	080006ed 	.word	0x080006ed
 8000690:	080006ed 	.word	0x080006ed
 8000694:	080006ed 	.word	0x080006ed
 8000698:	080006cd 	.word	0x080006cd
 800069c:	080006ed 	.word	0x080006ed
 80006a0:	080006ed 	.word	0x080006ed
 80006a4:	080006ed 	.word	0x080006ed
 80006a8:	080006dd 	.word	0x080006dd
	{
	case CHANNEL1:
		htim->Instance->CCR1=speed+MINIMUM_ESC_PWM;
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80006b6:	3304      	adds	r3, #4
 80006b8:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 80006ba:	e017      	b.n	80006ec <escNormalOneshot125+0xac>
	case CHANNEL2:
			htim->Instance->CCR2=speed+MINIMUM_ESC_PWM;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80006c6:	3304      	adds	r3, #4
 80006c8:	6393      	str	r3, [r2, #56]	@ 0x38
			break;
 80006ca:	e00f      	b.n	80006ec <escNormalOneshot125+0xac>
	case CHANNEL3:
			htim->Instance->CCR3=speed+MINIMUM_ESC_PWM;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80006d6:	3304      	adds	r3, #4
 80006d8:	63d3      	str	r3, [r2, #60]	@ 0x3c
			break;
 80006da:	e007      	b.n	80006ec <escNormalOneshot125+0xac>
	case CHANNEL4:
			htim->Instance->CCR4=speed+MINIMUM_ESC_PWM;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80006e6:	3304      	adds	r3, #4
 80006e8:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 80006ea:	bf00      	nop
	}
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <Control4Motor>:

void Control4Motor(TIM_HandleTypeDef *htim,Motor_speed_Typedef *speed)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
	escNormalOneshot125(htim, speed->speed1, CHANNEL1);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2200      	movs	r2, #0
 8000708:	4619      	mov	r1, r3
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ff98 	bl	8000640 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed2, CHANNEL2);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	2204      	movs	r2, #4
 8000716:	4619      	mov	r1, r3
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ff91 	bl	8000640 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed3, CHANNEL3);
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	2208      	movs	r2, #8
 8000724:	4619      	mov	r1, r3
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ff8a 	bl	8000640 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed4, CHANNEL4);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	220c      	movs	r2, #12
 8000732:	4619      	mov	r1, r3
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ff83 	bl	8000640 <escNormalOneshot125>

}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <pidControllersInit>:
 */

#include "PID.h"

void pidControllersInit(PIDControllers_Typedef* pid,float Kp,float Ki,float Kd,float to,float T,float upper_saturation,float lower_saturation)
{
 8000742:	b480      	push	{r7}
 8000744:	b089      	sub	sp, #36	@ 0x24
 8000746:	af00      	add	r7, sp, #0
 8000748:	61f8      	str	r0, [r7, #28]
 800074a:	ed87 0a06 	vstr	s0, [r7, #24]
 800074e:	edc7 0a05 	vstr	s1, [r7, #20]
 8000752:	ed87 1a04 	vstr	s2, [r7, #16]
 8000756:	edc7 1a03 	vstr	s3, [r7, #12]
 800075a:	ed87 2a02 	vstr	s4, [r7, #8]
 800075e:	edc7 2a01 	vstr	s5, [r7, #4]
 8000762:	ed87 3a00 	vstr	s6, [r7]
	pid->Kp=Kp;
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	69ba      	ldr	r2, [r7, #24]
 800076a:	601a      	str	r2, [r3, #0]
	pid->Ki=Ki;
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	605a      	str	r2, [r3, #4]
	pid->Kd=Kd;
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	693a      	ldr	r2, [r7, #16]
 8000776:	609a      	str	r2, [r3, #8]
	pid->to=to;
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	60da      	str	r2, [r3, #12]
	pid->T=T;
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	68ba      	ldr	r2, [r7, #8]
 8000782:	611a      	str	r2, [r3, #16]

	pid->et=0;
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	f04f 0200 	mov.w	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
	pid->ek1=0;
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	f04f 0200 	mov.w	r2, #0
 8000792:	619a      	str	r2, [r3, #24]

	pid->eKit=0;
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	f04f 0200 	mov.w	r2, #0
 800079a:	61da      	str	r2, [r3, #28]
	pid->eKik1=0;
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	f04f 0200 	mov.w	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]

	pid->propotion=0;
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	f04f 0200 	mov.w	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->integrator=0;
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	f04f 0200 	mov.w	r2, #0
 80007b2:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->deviator=0;
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f04f 0200 	mov.w	r2, #0
 80007ba:	631a      	str	r2, [r3, #48]	@ 0x30
	pid->integratork1=0;
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	f04f 0200 	mov.w	r2, #0
 80007c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->deviatork1=0;
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	f04f 0200 	mov.w	r2, #0
 80007ca:	635a      	str	r2, [r3, #52]	@ 0x34

	pid->upper_saturation=upper_saturation;
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	641a      	str	r2, [r3, #64]	@ 0x40
	pid->lower_saturation=lower_saturation;
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	683a      	ldr	r2, [r7, #0]
 80007d6:	645a      	str	r2, [r3, #68]	@ 0x44

	pid->measurement=0;
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	f04f 0200 	mov.w	r2, #0
 80007de:	639a      	str	r2, [r3, #56]	@ 0x38

	pid->u=0;
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	f04f 0200 	mov.w	r2, #0
 80007e6:	64da      	str	r2, [r3, #76]	@ 0x4c

}
 80007e8:	bf00      	nop
 80007ea:	3724      	adds	r7, #36	@ 0x24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <pidUpdate>:
	pid->Ki=Ki;
	pid->Kd=Kd;
}

float pidUpdate(PIDControllers_Typedef* pid,float measurement,float input)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000800:	edc7 0a01 	vstr	s1, [r7, #4]
	//get pid input
	pid->expected=input;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	63da      	str	r2, [r3, #60]	@ 0x3c
	pid->measurement=measurement;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	68ba      	ldr	r2, [r7, #8]
 800080e:	639a      	str	r2, [r3, #56]	@ 0x38
	pid->et=pid->expected-pid->measurement;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800081c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	edc3 7a05 	vstr	s15, [r3, #20]
	{
		pid->eKik1=0;
		pid->eKit=0;
	}
#else
	pid->eKit=pid->et;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	695a      	ldr	r2, [r3, #20]
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	61da      	str	r2, [r3, #28]
	pid->eKik1=pid->ek1;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	699a      	ldr	r2, [r3, #24]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	621a      	str	r2, [r3, #32]
#endif
	//PID calculation
	pid->propotion=pid->Kp*pid->et;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	ed93 7a00 	vldr	s14, [r3]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	pid->integrator=((pid->Ki*pid->T)/2)*(pid->eKit+pid->eKik1)+pid->integratork1;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	edd3 7a04 	vldr	s15, [r3, #16]
 8000858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800085c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000860:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	edd3 6a07 	vldr	s13, [r3, #28]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	edd3 7a08 	vldr	s15, [r3, #32]
 8000870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000874:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800087e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	pid->deviator=((2*pid->Kd)/(2*pid->to+pid->T))*(pid->et-pid->ek1)+((2*pid->to-pid->T)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	edd3 7a02 	vldr	s15, [r3, #8]
 800088e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	edd3 7a03 	vldr	s15, [r3, #12]
 8000898:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	edd3 7a04 	vldr	s15, [r3, #16]
 80008a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	edd3 6a05 	vldr	s13, [r3, #20]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80008b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80008ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80008c4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80008ce:	ee36 6ae7 	vsub.f32	s12, s13, s15
			/(2*pid->to+pid->T))*pid->deviatork1;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80008d8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	edd3 7a04 	vldr	s15, [r3, #16]
 80008e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80008e6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80008f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
	pid->deviator=((2*pid->Kd)/(2*pid->to+pid->T))*(pid->et-pid->ek1)+((2*pid->to-pid->T)
 80008f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	pid->ek1=pid->et;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	695a      	ldr	r2, [r3, #20]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	619a      	str	r2, [r3, #24]
	pid->integratork1=pid->integrator;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->deviatork1=pid->deviator;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	635a      	str	r2, [r3, #52]	@ 0x34
	pid->v=pid->propotion+pid->integrator+pid->deviator;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000922:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800092c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

	//saturation
	if(pid->v>pid->upper_saturation)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8000942:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800094a:	dd04      	ble.n	8000956 <pidUpdate+0x162>
	{
		pid->u=pid->upper_saturation;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000954:	e013      	b.n	800097e <pidUpdate+0x18a>
	}
	else if(pid->v<(pid->lower_saturation))
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000962:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800096a:	d504      	bpl.n	8000976 <pidUpdate+0x182>
	{
		pid->u=pid->lower_saturation;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000974:	e003      	b.n	800097e <pidUpdate+0x18a>
	}
	else
	{
		pid->u=pid->v;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	64da      	str	r2, [r3, #76]	@ 0x4c
	}

	return pid->u;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	ee07 3a90 	vmov	s15, r3
}
 8000986:	eeb0 0a67 	vmov.f32	s0, s15
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4a07      	ldr	r2, [pc, #28]	@ (80009c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80009a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	4a06      	ldr	r2, [pc, #24]	@ (80009c4 <vApplicationGetIdleTaskMemory+0x30>)
 80009aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2280      	movs	r2, #128	@ 0x80
 80009b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009b2:	bf00      	nop
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000098 	.word	0x20000098
 80009c4:	20000138 	.word	0x20000138

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b5b0      	push	{r4, r5, r7, lr}
 80009ca:	b08a      	sub	sp, #40	@ 0x28
 80009cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ce:	f001 fa77 	bl	8001ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d2:	f000 f90f 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d6:	f000 fad3 	bl	8000f80 <MX_GPIO_Init>
  MX_SPI1_Init();
 80009da:	f000 f973 	bl	8000cc4 <MX_SPI1_Init>
  MX_TIM2_Init();
 80009de:	f000 f9dd 	bl	8000d9c <MX_TIM2_Init>
  MX_TIM3_Init();
 80009e2:	f000 fa55 	bl	8000e90 <MX_TIM3_Init>
  MX_SPI2_Init();
 80009e6:	f000 f9a3 	bl	8000d30 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80009ea:	f000 fa9f 	bl	8000f2c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */



  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009f4:	4863      	ldr	r0, [pc, #396]	@ (8000b84 <main+0x1bc>)
 80009f6:	f001 fd47 	bl	8002488 <HAL_GPIO_WritePin>
  float sample=powf(10,-3);
 80009fa:	4b63      	ldr	r3, [pc, #396]	@ (8000b88 <main+0x1c0>)
 80009fc:	61fb      	str	r3, [r7, #28]
  pidControllersInit(&yaw, 20, 15, 5,0.1,sample,0.1,-0.1);
 80009fe:	ed9f 3a63 	vldr	s6, [pc, #396]	@ 8000b8c <main+0x1c4>
 8000a02:	eddf 2a63 	vldr	s5, [pc, #396]	@ 8000b90 <main+0x1c8>
 8000a06:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a0a:	eddf 1a61 	vldr	s3, [pc, #388]	@ 8000b90 <main+0x1c8>
 8000a0e:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000a12:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8000a16:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000a1a:	485e      	ldr	r0, [pc, #376]	@ (8000b94 <main+0x1cc>)
 8000a1c:	f7ff fe91 	bl	8000742 <pidControllersInit>
  pidControllersInit(&yaw_rate, 100, 50,10, 0.1,sample,1500,-1500);
 8000a20:	ed9f 3a5d 	vldr	s6, [pc, #372]	@ 8000b98 <main+0x1d0>
 8000a24:	eddf 2a5d 	vldr	s5, [pc, #372]	@ 8000b9c <main+0x1d4>
 8000a28:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a2c:	eddf 1a58 	vldr	s3, [pc, #352]	@ 8000b90 <main+0x1c8>
 8000a30:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000a34:	eddf 0a5a 	vldr	s1, [pc, #360]	@ 8000ba0 <main+0x1d8>
 8000a38:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 8000ba4 <main+0x1dc>
 8000a3c:	485a      	ldr	r0, [pc, #360]	@ (8000ba8 <main+0x1e0>)
 8000a3e:	f7ff fe80 	bl	8000742 <pidControllersInit>
  pidControllersInit(&pitch, 20, 15,5, 0.1,sample,0.1,-0.1);
 8000a42:	ed9f 3a52 	vldr	s6, [pc, #328]	@ 8000b8c <main+0x1c4>
 8000a46:	eddf 2a52 	vldr	s5, [pc, #328]	@ 8000b90 <main+0x1c8>
 8000a4a:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a4e:	eddf 1a50 	vldr	s3, [pc, #320]	@ 8000b90 <main+0x1c8>
 8000a52:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000a56:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8000a5a:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000a5e:	4853      	ldr	r0, [pc, #332]	@ (8000bac <main+0x1e4>)
 8000a60:	f7ff fe6f 	bl	8000742 <pidControllersInit>
  pidControllersInit(&pitch_rate, 100, 50,10, 0.1,sample,1500,-1500);
 8000a64:	ed9f 3a4c 	vldr	s6, [pc, #304]	@ 8000b98 <main+0x1d0>
 8000a68:	eddf 2a4c 	vldr	s5, [pc, #304]	@ 8000b9c <main+0x1d4>
 8000a6c:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a70:	eddf 1a47 	vldr	s3, [pc, #284]	@ 8000b90 <main+0x1c8>
 8000a74:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000a78:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8000ba0 <main+0x1d8>
 8000a7c:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 8000ba4 <main+0x1dc>
 8000a80:	484b      	ldr	r0, [pc, #300]	@ (8000bb0 <main+0x1e8>)
 8000a82:	f7ff fe5e 	bl	8000742 <pidControllersInit>
  pidControllersInit(&roll, 20, 15,5 ,0.1,sample,0.1,-0.1);
 8000a86:	ed9f 3a41 	vldr	s6, [pc, #260]	@ 8000b8c <main+0x1c4>
 8000a8a:	eddf 2a41 	vldr	s5, [pc, #260]	@ 8000b90 <main+0x1c8>
 8000a8e:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a92:	eddf 1a3f 	vldr	s3, [pc, #252]	@ 8000b90 <main+0x1c8>
 8000a96:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000a9a:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8000a9e:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000aa2:	4844      	ldr	r0, [pc, #272]	@ (8000bb4 <main+0x1ec>)
 8000aa4:	f7ff fe4d 	bl	8000742 <pidControllersInit>
  pidControllersInit(&roll_rate, 100, 50,10, 0.1,sample,1500,-1500);
 8000aa8:	ed9f 3a3b 	vldr	s6, [pc, #236]	@ 8000b98 <main+0x1d0>
 8000aac:	eddf 2a3b 	vldr	s5, [pc, #236]	@ 8000b9c <main+0x1d4>
 8000ab0:	ed97 2a07 	vldr	s4, [r7, #28]
 8000ab4:	eddf 1a36 	vldr	s3, [pc, #216]	@ 8000b90 <main+0x1c8>
 8000ab8:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000abc:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8000ba0 <main+0x1d8>
 8000ac0:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8000ba4 <main+0x1dc>
 8000ac4:	483c      	ldr	r0, [pc, #240]	@ (8000bb8 <main+0x1f0>)
 8000ac6:	f7ff fe3c 	bl	8000742 <pidControllersInit>
  pidControllersInit(&high, 50, 25,10 ,0.1,sample,6000,0);
 8000aca:	ed9f 3a3c 	vldr	s6, [pc, #240]	@ 8000bbc <main+0x1f4>
 8000ace:	eddf 2a3c 	vldr	s5, [pc, #240]	@ 8000bc0 <main+0x1f8>
 8000ad2:	ed97 2a07 	vldr	s4, [r7, #28]
 8000ad6:	eddf 1a2e 	vldr	s3, [pc, #184]	@ 8000b90 <main+0x1c8>
 8000ada:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000ade:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 8000ae2:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8000ba0 <main+0x1d8>
 8000ae6:	4837      	ldr	r0, [pc, #220]	@ (8000bc4 <main+0x1fc>)
 8000ae8:	f7ff fe2b 	bl	8000742 <pidControllersInit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000aec:	2100      	movs	r1, #0
 8000aee:	4836      	ldr	r0, [pc, #216]	@ (8000bc8 <main+0x200>)
 8000af0:	f003 f85c 	bl	8003bac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000af4:	2104      	movs	r1, #4
 8000af6:	4834      	ldr	r0, [pc, #208]	@ (8000bc8 <main+0x200>)
 8000af8:	f003 f858 	bl	8003bac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000afc:	2108      	movs	r1, #8
 8000afe:	4832      	ldr	r0, [pc, #200]	@ (8000bc8 <main+0x200>)
 8000b00:	f003 f854 	bl	8003bac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000b04:	210c      	movs	r1, #12
 8000b06:	4830      	ldr	r0, [pc, #192]	@ (8000bc8 <main+0x200>)
 8000b08:	f003 f850 	bl	8003bac <HAL_TIM_PWM_Start>
 // Calibration(&htim2);
  HAL_TIM_Base_Start_IT(&htim3);
 8000b0c:	482f      	ldr	r0, [pc, #188]	@ (8000bcc <main+0x204>)
 8000b0e:	f002 ff9b 	bl	8003a48 <HAL_TIM_Base_Start_IT>
  Two_Way_Commuination_Pipe0_Config(&nrf1, 0xA2A2A2A2A2, 0xC5C5C5C5C5);
 8000b12:	f04f 32c5 	mov.w	r2, #3318072773	@ 0xc5c5c5c5
 8000b16:	f04f 03c5 	mov.w	r3, #197	@ 0xc5
 8000b1a:	e9cd 2300 	strd	r2, r3, [sp]
 8000b1e:	f04f 32a2 	mov.w	r2, #2728567458	@ 0xa2a2a2a2
 8000b22:	f04f 03a2 	mov.w	r3, #162	@ 0xa2
 8000b26:	482a      	ldr	r0, [pc, #168]	@ (8000bd0 <main+0x208>)
 8000b28:	f000 fde5 	bl	80016f6 <Two_Way_Commuination_Pipe0_Config>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b2c:	4b29      	ldr	r3, [pc, #164]	@ (8000bd4 <main+0x20c>)
 8000b2e:	463c      	mov	r4, r7
 8000b30:	461d      	mov	r5, r3
 8000b32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b3e:	463b      	mov	r3, r7
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f004 f9bb 	bl	8004ebe <osThreadCreate>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	4a23      	ldr	r2, [pc, #140]	@ (8000bd8 <main+0x210>)
 8000b4c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(ESC_Task, "ESC", 256,NULL,1, &ESC_Handle);
 8000b4e:	4b23      	ldr	r3, [pc, #140]	@ (8000bdc <main+0x214>)
 8000b50:	9301      	str	r3, [sp, #4]
 8000b52:	2301      	movs	r3, #1
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	2300      	movs	r3, #0
 8000b58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b5c:	4920      	ldr	r1, [pc, #128]	@ (8000be0 <main+0x218>)
 8000b5e:	4821      	ldr	r0, [pc, #132]	@ (8000be4 <main+0x21c>)
 8000b60:	f004 fb21 	bl	80051a6 <xTaskCreate>
  xTaskCreate(NRF_Task, "NRF", 256, NULL, 0, &NRF_Handle);
 8000b64:	4b20      	ldr	r3, [pc, #128]	@ (8000be8 <main+0x220>)
 8000b66:	9301      	str	r3, [sp, #4]
 8000b68:	2300      	movs	r3, #0
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b72:	491e      	ldr	r1, [pc, #120]	@ (8000bec <main+0x224>)
 8000b74:	481e      	ldr	r0, [pc, #120]	@ (8000bf0 <main+0x228>)
 8000b76:	f004 fb16 	bl	80051a6 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b7a:	f004 f999 	bl	8004eb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b7e:	bf00      	nop
 8000b80:	e7fd      	b.n	8000b7e <main+0x1b6>
 8000b82:	bf00      	nop
 8000b84:	40020800 	.word	0x40020800
 8000b88:	3a83126f 	.word	0x3a83126f
 8000b8c:	bdcccccd 	.word	0xbdcccccd
 8000b90:	3dcccccd 	.word	0x3dcccccd
 8000b94:	20000668 	.word	0x20000668
 8000b98:	c4bb8000 	.word	0xc4bb8000
 8000b9c:	44bb8000 	.word	0x44bb8000
 8000ba0:	42480000 	.word	0x42480000
 8000ba4:	42c80000 	.word	0x42c80000
 8000ba8:	200006bc 	.word	0x200006bc
 8000bac:	20000518 	.word	0x20000518
 8000bb0:	2000056c 	.word	0x2000056c
 8000bb4:	200005c0 	.word	0x200005c0
 8000bb8:	20000614 	.word	0x20000614
 8000bbc:	00000000 	.word	0x00000000
 8000bc0:	45bb8000 	.word	0x45bb8000
 8000bc4:	20000710 	.word	0x20000710
 8000bc8:	200003e8 	.word	0x200003e8
 8000bcc:	20000430 	.word	0x20000430
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	08006dbc 	.word	0x08006dbc
 8000bd8:	200004c0 	.word	0x200004c0
 8000bdc:	200007b4 	.word	0x200007b4
 8000be0:	08006da8 	.word	0x08006da8
 8000be4:	080010ad 	.word	0x080010ad
 8000be8:	200007b8 	.word	0x200007b8
 8000bec:	08006dac 	.word	0x08006dac
 8000bf0:	080012ad 	.word	0x080012ad

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b094      	sub	sp, #80	@ 0x50
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 0320 	add.w	r3, r7, #32
 8000bfe:	2230      	movs	r2, #48	@ 0x30
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f005 fbe8 	bl	80063d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	4b27      	ldr	r3, [pc, #156]	@ (8000cbc <SystemClock_Config+0xc8>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c20:	4a26      	ldr	r2, [pc, #152]	@ (8000cbc <SystemClock_Config+0xc8>)
 8000c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c28:	4b24      	ldr	r3, [pc, #144]	@ (8000cbc <SystemClock_Config+0xc8>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c34:	2300      	movs	r3, #0
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	4b21      	ldr	r3, [pc, #132]	@ (8000cc0 <SystemClock_Config+0xcc>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a20      	ldr	r2, [pc, #128]	@ (8000cc0 <SystemClock_Config+0xcc>)
 8000c3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc0 <SystemClock_Config+0xcc>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c50:	2301      	movs	r3, #1
 8000c52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c58:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c5e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c64:	2319      	movs	r3, #25
 8000c66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c68:	23a8      	movs	r3, #168	@ 0xa8
 8000c6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c70:	2304      	movs	r3, #4
 8000c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c74:	f107 0320 	add.w	r3, r7, #32
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f001 fc39 	bl	80024f0 <HAL_RCC_OscConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c84:	f000 fb62 	bl	800134c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c88:	230f      	movs	r3, #15
 8000c8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	2102      	movs	r1, #2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 fe9b 	bl	80029e0 <HAL_RCC_ClockConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cb0:	f000 fb4c 	bl	800134c <Error_Handler>
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	3750      	adds	r7, #80	@ 0x50
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40007000 	.word	0x40007000

08000cc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cc8:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <MX_SPI1_Init+0x64>)
 8000cca:	4a18      	ldr	r2, [pc, #96]	@ (8000d2c <MX_SPI1_Init+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cce:	4b16      	ldr	r3, [pc, #88]	@ (8000d28 <MX_SPI1_Init+0x64>)
 8000cd0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000cd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <MX_SPI1_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <MX_SPI1_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <MX_SPI1_Init+0x64>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <MX_SPI1_Init+0x64>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <MX_SPI1_Init+0x64>)
 8000cf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cf4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <MX_SPI1_Init+0x64>)
 8000cf8:	2210      	movs	r2, #16
 8000cfa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <MX_SPI1_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d02:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <MX_SPI1_Init+0x64>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d08:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <MX_SPI1_Init+0x64>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <MX_SPI1_Init+0x64>)
 8000d10:	220a      	movs	r2, #10
 8000d12:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	@ (8000d28 <MX_SPI1_Init+0x64>)
 8000d16:	f002 f875 	bl	8002e04 <HAL_SPI_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d20:	f000 fb14 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000338 	.word	0x20000338
 8000d2c:	40013000 	.word	0x40013000

08000d30 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d34:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d36:	4a18      	ldr	r2, [pc, #96]	@ (8000d98 <MX_SPI2_Init+0x68>)
 8000d38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d3a:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d42:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d48:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d60:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d62:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d64:	2208      	movs	r2, #8
 8000d66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d68:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d6e:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d74:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d7a:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d7c:	220a      	movs	r2, #10
 8000d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d80:	4804      	ldr	r0, [pc, #16]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d82:	f002 f83f 	bl	8002e04 <HAL_SPI_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d8c:	f000 fade 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000390 	.word	0x20000390
 8000d98:	40003800 	.word	0x40003800

08000d9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	@ 0x28
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da2:	f107 0320 	add.w	r3, r7, #32
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]
 8000dba:	615a      	str	r2, [r3, #20]
 8000dbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dbe:	4b33      	ldr	r3, [pc, #204]	@ (8000e8c <MX_TIM2_Init+0xf0>)
 8000dc0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dc4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dc6:	4b31      	ldr	r3, [pc, #196]	@ (8000e8c <MX_TIM2_Init+0xf0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8000e8c <MX_TIM2_Init+0xf0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000dd2:	4b2e      	ldr	r3, [pc, #184]	@ (8000e8c <MX_TIM2_Init+0xf0>)
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dda:	4b2c      	ldr	r3, [pc, #176]	@ (8000e8c <MX_TIM2_Init+0xf0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e8c <MX_TIM2_Init+0xf0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000de6:	4829      	ldr	r0, [pc, #164]	@ (8000e8c <MX_TIM2_Init+0xf0>)
 8000de8:	f002 fe90 	bl	8003b0c <HAL_TIM_PWM_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000df2:	f000 faab 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dfe:	f107 0320 	add.w	r3, r7, #32
 8000e02:	4619      	mov	r1, r3
 8000e04:	4821      	ldr	r0, [pc, #132]	@ (8000e8c <MX_TIM2_Init+0xf0>)
 8000e06:	f003 fcf5 	bl	80047f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000e10:	f000 fa9c 	bl	800134c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e14:	2360      	movs	r3, #96	@ 0x60
 8000e16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2200      	movs	r2, #0
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4818      	ldr	r0, [pc, #96]	@ (8000e8c <MX_TIM2_Init+0xf0>)
 8000e2c:	f003 f85e 	bl	8003eec <HAL_TIM_PWM_ConfigChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000e36:	f000 fa89 	bl	800134c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4812      	ldr	r0, [pc, #72]	@ (8000e8c <MX_TIM2_Init+0xf0>)
 8000e42:	f003 f853 	bl	8003eec <HAL_TIM_PWM_ConfigChannel>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000e4c:	f000 fa7e 	bl	800134c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2208      	movs	r2, #8
 8000e54:	4619      	mov	r1, r3
 8000e56:	480d      	ldr	r0, [pc, #52]	@ (8000e8c <MX_TIM2_Init+0xf0>)
 8000e58:	f003 f848 	bl	8003eec <HAL_TIM_PWM_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000e62:	f000 fa73 	bl	800134c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	220c      	movs	r2, #12
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4807      	ldr	r0, [pc, #28]	@ (8000e8c <MX_TIM2_Init+0xf0>)
 8000e6e:	f003 f83d 	bl	8003eec <HAL_TIM_PWM_ConfigChannel>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000e78:	f000 fa68 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e7c:	4803      	ldr	r0, [pc, #12]	@ (8000e8c <MX_TIM2_Init+0xf0>)
 8000e7e:	f000 fe8b 	bl	8001b98 <HAL_TIM_MspPostInit>

}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	@ 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200003e8 	.word	0x200003e8

08000e90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eac:	4b1d      	ldr	r3, [pc, #116]	@ (8000f24 <MX_TIM3_Init+0x94>)
 8000eae:	4a1e      	ldr	r2, [pc, #120]	@ (8000f28 <MX_TIM3_Init+0x98>)
 8000eb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f24 <MX_TIM3_Init+0x94>)
 8000eb4:	2253      	movs	r2, #83	@ 0x53
 8000eb6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <MX_TIM3_Init+0x94>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000ebe:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <MX_TIM3_Init+0x94>)
 8000ec0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ec4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec6:	4b17      	ldr	r3, [pc, #92]	@ (8000f24 <MX_TIM3_Init+0x94>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <MX_TIM3_Init+0x94>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ed2:	4814      	ldr	r0, [pc, #80]	@ (8000f24 <MX_TIM3_Init+0x94>)
 8000ed4:	f002 fd68 	bl	80039a8 <HAL_TIM_Base_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000ede:	f000 fa35 	bl	800134c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	4619      	mov	r1, r3
 8000eee:	480d      	ldr	r0, [pc, #52]	@ (8000f24 <MX_TIM3_Init+0x94>)
 8000ef0:	f003 f8be 	bl	8004070 <HAL_TIM_ConfigClockSource>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000efa:	f000 fa27 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4806      	ldr	r0, [pc, #24]	@ (8000f24 <MX_TIM3_Init+0x94>)
 8000f0c:	f003 fc72 	bl	80047f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f16:	f000 fa19 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000430 	.word	0x20000430
 8000f28:	40000400 	.word	0x40000400

08000f2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f30:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	@ (8000f7c <MX_USART1_UART_Init+0x50>)
 8000f34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f36:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f50:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f52:	220c      	movs	r2, #12
 8000f54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f56:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f62:	4805      	ldr	r0, [pc, #20]	@ (8000f78 <MX_USART1_UART_Init+0x4c>)
 8000f64:	f003 fcc8 	bl	80048f8 <HAL_UART_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f6e:	f000 f9ed 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000478 	.word	0x20000478
 8000f7c:	40011000 	.word	0x40011000

08000f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	@ 0x28
 8000f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b40      	ldr	r3, [pc, #256]	@ (800109c <MX_GPIO_Init+0x11c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a3f      	ldr	r2, [pc, #252]	@ (800109c <MX_GPIO_Init+0x11c>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800109c <MX_GPIO_Init+0x11c>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b39      	ldr	r3, [pc, #228]	@ (800109c <MX_GPIO_Init+0x11c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a38      	ldr	r2, [pc, #224]	@ (800109c <MX_GPIO_Init+0x11c>)
 8000fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b36      	ldr	r3, [pc, #216]	@ (800109c <MX_GPIO_Init+0x11c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	4b32      	ldr	r3, [pc, #200]	@ (800109c <MX_GPIO_Init+0x11c>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a31      	ldr	r2, [pc, #196]	@ (800109c <MX_GPIO_Init+0x11c>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b2f      	ldr	r3, [pc, #188]	@ (800109c <MX_GPIO_Init+0x11c>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b2b      	ldr	r3, [pc, #172]	@ (800109c <MX_GPIO_Init+0x11c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a2a      	ldr	r2, [pc, #168]	@ (800109c <MX_GPIO_Init+0x11c>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b28      	ldr	r3, [pc, #160]	@ (800109c <MX_GPIO_Init+0x11c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800100c:	4824      	ldr	r0, [pc, #144]	@ (80010a0 <MX_GPIO_Init+0x120>)
 800100e:	f001 fa3b 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2110      	movs	r1, #16
 8001016:	4823      	ldr	r0, [pc, #140]	@ (80010a4 <MX_GPIO_Init+0x124>)
 8001018:	f001 fa36 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|ICM_CS_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2105      	movs	r1, #5
 8001020:	4821      	ldr	r0, [pc, #132]	@ (80010a8 <MX_GPIO_Init+0x128>)
 8001022:	f001 fa31 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001026:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800102a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4818      	ldr	r0, [pc, #96]	@ (80010a0 <MX_GPIO_Init+0x120>)
 8001040:	f001 f886 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CS_Pin */
  GPIO_InitStruct.Pin = NRF_CS_Pin;
 8001044:	2310      	movs	r3, #16
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CS_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4812      	ldr	r0, [pc, #72]	@ (80010a4 <MX_GPIO_Init+0x124>)
 800105c:	f001 f878 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin ICM_CS_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|ICM_CS_Pin;
 8001060:	2305      	movs	r3, #5
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <MX_GPIO_Init+0x128>)
 8001078:	f001 f86a 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 800107c:	2302      	movs	r3, #2
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	4806      	ldr	r0, [pc, #24]	@ (80010a8 <MX_GPIO_Init+0x128>)
 8001090:	f001 f85e 	bl	8002150 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001094:	bf00      	nop
 8001096:	3728      	adds	r7, #40	@ 0x28
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020800 	.word	0x40020800
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020400 	.word	0x40020400

080010ac <ESC_Task>:

/* USER CODE BEGIN 4 */
void ESC_Task(void *argument)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

	while(1)
	{
			if(timer3_flag==1)
 80010b4:	4b70      	ldr	r3, [pc, #448]	@ (8001278 <ESC_Task+0x1cc>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	f040 80d9 	bne.w	8001270 <ESC_Task+0x1c4>
			{
				Calculate_Reference(&calculation, &control);
 80010be:	496f      	ldr	r1, [pc, #444]	@ (800127c <ESC_Task+0x1d0>)
 80010c0:	486f      	ldr	r0, [pc, #444]	@ (8001280 <ESC_Task+0x1d4>)
 80010c2:	f7ff fa73 	bl	80005ac <Calculate_Reference>
				pidUpdate(&pitch, calculation.picth_measurement, calculation.picth_reference);
 80010c6:	4b6e      	ldr	r3, [pc, #440]	@ (8001280 <ESC_Task+0x1d4>)
 80010c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80010cc:	4b6c      	ldr	r3, [pc, #432]	@ (8001280 <ESC_Task+0x1d4>)
 80010ce:	ed93 7a00 	vldr	s14, [r3]
 80010d2:	eef0 0a47 	vmov.f32	s1, s14
 80010d6:	eeb0 0a67 	vmov.f32	s0, s15
 80010da:	486a      	ldr	r0, [pc, #424]	@ (8001284 <ESC_Task+0x1d8>)
 80010dc:	f7ff fb8a 	bl	80007f4 <pidUpdate>
				/*
				 * get picth rate measuremet
				 */
				calculation.picth_rate_reference=pitch.u;
 80010e0:	4b68      	ldr	r3, [pc, #416]	@ (8001284 <ESC_Task+0x1d8>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e4:	4a66      	ldr	r2, [pc, #408]	@ (8001280 <ESC_Task+0x1d4>)
 80010e6:	6193      	str	r3, [r2, #24]
				pidUpdate(&pitch_rate, calculation.picth_rate_measurement, calculation.picth_rate_reference);
 80010e8:	4b65      	ldr	r3, [pc, #404]	@ (8001280 <ESC_Task+0x1d4>)
 80010ea:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80010ee:	4b64      	ldr	r3, [pc, #400]	@ (8001280 <ESC_Task+0x1d4>)
 80010f0:	ed93 7a06 	vldr	s14, [r3, #24]
 80010f4:	eef0 0a47 	vmov.f32	s1, s14
 80010f8:	eeb0 0a67 	vmov.f32	s0, s15
 80010fc:	4862      	ldr	r0, [pc, #392]	@ (8001288 <ESC_Task+0x1dc>)
 80010fe:	f7ff fb79 	bl	80007f4 <pidUpdate>

				/*
				 * get roll measurement
				 */
				pidUpdate(&roll, calculation.roll_measurement, calculation.roll_reference);
 8001102:	4b5f      	ldr	r3, [pc, #380]	@ (8001280 <ESC_Task+0x1d4>)
 8001104:	edd3 7a04 	vldr	s15, [r3, #16]
 8001108:	4b5d      	ldr	r3, [pc, #372]	@ (8001280 <ESC_Task+0x1d4>)
 800110a:	ed93 7a01 	vldr	s14, [r3, #4]
 800110e:	eef0 0a47 	vmov.f32	s1, s14
 8001112:	eeb0 0a67 	vmov.f32	s0, s15
 8001116:	485d      	ldr	r0, [pc, #372]	@ (800128c <ESC_Task+0x1e0>)
 8001118:	f7ff fb6c 	bl	80007f4 <pidUpdate>
				/*
				 * get roll rate measurement
				 */
				calculation.roll_rate_reference=roll.u;
 800111c:	4b5b      	ldr	r3, [pc, #364]	@ (800128c <ESC_Task+0x1e0>)
 800111e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001120:	4a57      	ldr	r2, [pc, #348]	@ (8001280 <ESC_Task+0x1d4>)
 8001122:	61d3      	str	r3, [r2, #28]
				pidUpdate(&roll_rate, calculation.roll_rate_measurement, calculation.roll_rate_reference);
 8001124:	4b56      	ldr	r3, [pc, #344]	@ (8001280 <ESC_Task+0x1d4>)
 8001126:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800112a:	4b55      	ldr	r3, [pc, #340]	@ (8001280 <ESC_Task+0x1d4>)
 800112c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001130:	eef0 0a47 	vmov.f32	s1, s14
 8001134:	eeb0 0a67 	vmov.f32	s0, s15
 8001138:	4855      	ldr	r0, [pc, #340]	@ (8001290 <ESC_Task+0x1e4>)
 800113a:	f7ff fb5b 	bl	80007f4 <pidUpdate>
				/*
				 * get yaw measurement
				 */
				pidUpdate(&yaw, calculation.yaw_measurement, calculation.yaw_reference);
 800113e:	4b50      	ldr	r3, [pc, #320]	@ (8001280 <ESC_Task+0x1d4>)
 8001140:	edd3 7a05 	vldr	s15, [r3, #20]
 8001144:	4b4e      	ldr	r3, [pc, #312]	@ (8001280 <ESC_Task+0x1d4>)
 8001146:	ed93 7a02 	vldr	s14, [r3, #8]
 800114a:	eef0 0a47 	vmov.f32	s1, s14
 800114e:	eeb0 0a67 	vmov.f32	s0, s15
 8001152:	4850      	ldr	r0, [pc, #320]	@ (8001294 <ESC_Task+0x1e8>)
 8001154:	f7ff fb4e 	bl	80007f4 <pidUpdate>
				/*
				* get yaw measurement
				*/
				calculation.yaw_rate_reference=yaw.u;
 8001158:	4b4e      	ldr	r3, [pc, #312]	@ (8001294 <ESC_Task+0x1e8>)
 800115a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115c:	4a48      	ldr	r2, [pc, #288]	@ (8001280 <ESC_Task+0x1d4>)
 800115e:	6213      	str	r3, [r2, #32]
				pidUpdate(&yaw_rate, calculation.yaw_rate_measurement, calculation.yaw_rate_reference);
 8001160:	4b47      	ldr	r3, [pc, #284]	@ (8001280 <ESC_Task+0x1d4>)
 8001162:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001166:	4b46      	ldr	r3, [pc, #280]	@ (8001280 <ESC_Task+0x1d4>)
 8001168:	ed93 7a08 	vldr	s14, [r3, #32]
 800116c:	eef0 0a47 	vmov.f32	s1, s14
 8001170:	eeb0 0a67 	vmov.f32	s0, s15
 8001174:	4848      	ldr	r0, [pc, #288]	@ (8001298 <ESC_Task+0x1ec>)
 8001176:	f7ff fb3d 	bl	80007f4 <pidUpdate>
				/*
				* get high measurement and high reference
				*/
				pidUpdate(&high, calculation.high_measurement, calculation.high_reference);
 800117a:	4b41      	ldr	r3, [pc, #260]	@ (8001280 <ESC_Task+0x1d4>)
 800117c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001180:	4b3f      	ldr	r3, [pc, #252]	@ (8001280 <ESC_Task+0x1d4>)
 8001182:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001186:	eef0 0a47 	vmov.f32	s1, s14
 800118a:	eeb0 0a67 	vmov.f32	s0, s15
 800118e:	4843      	ldr	r0, [pc, #268]	@ (800129c <ESC_Task+0x1f0>)
 8001190:	f7ff fb30 	bl	80007f4 <pidUpdate>

				speed.speed1=-pitch_rate.u+roll_rate.u-yaw_rate.u+high.u;
 8001194:	4b3e      	ldr	r3, [pc, #248]	@ (8001290 <ESC_Task+0x1e4>)
 8001196:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800119a:	4b3b      	ldr	r3, [pc, #236]	@ (8001288 <ESC_Task+0x1dc>)
 800119c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80011a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001298 <ESC_Task+0x1ec>)
 80011a6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80011aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011ae:	4b3b      	ldr	r3, [pc, #236]	@ (800129c <ESC_Task+0x1f0>)
 80011b0:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011bc:	ee17 2a90 	vmov	r2, s15
 80011c0:	4b37      	ldr	r3, [pc, #220]	@ (80012a0 <ESC_Task+0x1f4>)
 80011c2:	601a      	str	r2, [r3, #0]
				speed.speed2=+pitch_rate.u+roll_rate.u+yaw_rate.u+high.u;
 80011c4:	4b30      	ldr	r3, [pc, #192]	@ (8001288 <ESC_Task+0x1dc>)
 80011c6:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80011ca:	4b31      	ldr	r3, [pc, #196]	@ (8001290 <ESC_Task+0x1e4>)
 80011cc:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80011d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d4:	4b30      	ldr	r3, [pc, #192]	@ (8001298 <ESC_Task+0x1ec>)
 80011d6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80011da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011de:	4b2f      	ldr	r3, [pc, #188]	@ (800129c <ESC_Task+0x1f0>)
 80011e0:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80011e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ec:	ee17 2a90 	vmov	r2, s15
 80011f0:	4b2b      	ldr	r3, [pc, #172]	@ (80012a0 <ESC_Task+0x1f4>)
 80011f2:	605a      	str	r2, [r3, #4]
				speed.speed3=+pitch_rate.u-roll_rate.u-yaw_rate.u+high.u;
 80011f4:	4b24      	ldr	r3, [pc, #144]	@ (8001288 <ESC_Task+0x1dc>)
 80011f6:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80011fa:	4b25      	ldr	r3, [pc, #148]	@ (8001290 <ESC_Task+0x1e4>)
 80011fc:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001200:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001204:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <ESC_Task+0x1ec>)
 8001206:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800120a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800120e:	4b23      	ldr	r3, [pc, #140]	@ (800129c <ESC_Task+0x1f0>)
 8001210:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800121c:	ee17 2a90 	vmov	r2, s15
 8001220:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <ESC_Task+0x1f4>)
 8001222:	609a      	str	r2, [r3, #8]
				speed.speed4=-pitch_rate.u-roll_rate.u-yaw_rate.u+high.u;
 8001224:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <ESC_Task+0x1dc>)
 8001226:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800122a:	eeb1 7a67 	vneg.f32	s14, s15
 800122e:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <ESC_Task+0x1e4>)
 8001230:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001234:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001238:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <ESC_Task+0x1ec>)
 800123a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800123e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001242:	4b16      	ldr	r3, [pc, #88]	@ (800129c <ESC_Task+0x1f0>)
 8001244:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800124c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001250:	ee17 2a90 	vmov	r2, s15
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <ESC_Task+0x1f4>)
 8001256:	60da      	str	r2, [r3, #12]
				Control4Motor(&htim2, &speed);
 8001258:	4911      	ldr	r1, [pc, #68]	@ (80012a0 <ESC_Task+0x1f4>)
 800125a:	4812      	ldr	r0, [pc, #72]	@ (80012a4 <ESC_Task+0x1f8>)
 800125c:	f7ff fa4c 	bl	80006f8 <Control4Motor>
				a++;
 8001260:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <ESC_Task+0x1fc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	4a10      	ldr	r2, [pc, #64]	@ (80012a8 <ESC_Task+0x1fc>)
 8001268:	6013      	str	r3, [r2, #0]
				timer3_flag=0;
 800126a:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <ESC_Task+0x1cc>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
			}
			vTaskDelay(pdMS_TO_TICKS(1));
 8001270:	2001      	movs	r0, #1
 8001272:	f004 f8e7 	bl	8005444 <vTaskDelay>
			if(timer3_flag==1)
 8001276:	e71d      	b.n	80010b4 <ESC_Task+0x8>
 8001278:	20000504 	.word	0x20000504
 800127c:	2000079c 	.word	0x2000079c
 8001280:	20000764 	.word	0x20000764
 8001284:	20000518 	.word	0x20000518
 8001288:	2000056c 	.word	0x2000056c
 800128c:	200005c0 	.word	0x200005c0
 8001290:	20000614 	.word	0x20000614
 8001294:	20000668 	.word	0x20000668
 8001298:	200006bc 	.word	0x200006bc
 800129c:	20000710 	.word	0x20000710
 80012a0:	20000508 	.word	0x20000508
 80012a4:	200003e8 	.word	0x200003e8
 80012a8:	200007bc 	.word	0x200007bc

080012ac <NRF_Task>:

	}
}

void NRF_Task(void *argument)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	int i=0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		sprintf((char*)spi_tx,"ngu+%d",i);
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	4908      	ldr	r1, [pc, #32]	@ (80012dc <NRF_Task+0x30>)
 80012bc:	4808      	ldr	r0, [pc, #32]	@ (80012e0 <NRF_Task+0x34>)
 80012be:	f005 f869 	bl	8006394 <siprintf>
		Two_Way_Commuination_RTOS(&nrf1, spi_tx, spi_rx);
 80012c2:	4a08      	ldr	r2, [pc, #32]	@ (80012e4 <NRF_Task+0x38>)
 80012c4:	4906      	ldr	r1, [pc, #24]	@ (80012e0 <NRF_Task+0x34>)
 80012c6:	4808      	ldr	r0, [pc, #32]	@ (80012e8 <NRF_Task+0x3c>)
 80012c8:	f000 f9f7 	bl	80016ba <Two_Way_Commuination_RTOS>
		vTaskDelay(pdMS_TO_TICKS(10));
 80012cc:	200a      	movs	r0, #10
 80012ce:	f004 f8b9 	bl	8005444 <vTaskDelay>
		i++;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	3301      	adds	r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
		sprintf((char*)spi_tx,"ngu+%d",i);
 80012d8:	bf00      	nop
 80012da:	e7ed      	b.n	80012b8 <NRF_Task+0xc>
 80012dc:	08006dd8 	.word	0x08006dd8
 80012e0:	200004e4 	.word	0x200004e4
 80012e4:	200004c4 	.word	0x200004c4
 80012e8:	20000000 	.word	0x20000000

080012ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80012f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012f8:	4804      	ldr	r0, [pc, #16]	@ (800130c <StartDefaultTask+0x20>)
 80012fa:	f001 f8de 	bl	80024ba <HAL_GPIO_TogglePin>
    osDelay(500);
 80012fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001302:	f003 fe28 	bl	8004f56 <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001306:	bf00      	nop
 8001308:	e7f4      	b.n	80012f4 <StartDefaultTask+0x8>
 800130a:	bf00      	nop
 800130c:	40020800 	.word	0x40020800

08001310 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
//	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a08      	ldr	r2, [pc, #32]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001322:	f000 fdef 	bl	8001f04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance==TIM3)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a06      	ldr	r2, [pc, #24]	@ (8001344 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d102      	bne.n	8001336 <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	  timer3_flag=1;
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
//	  xSemaphoreGiveFromISR(TimerISR_Semaphore,&xHigherPriorityTaskWoken);
  }
//  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
  /* USER CODE END Callback 1 */
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40010000 	.word	0x40010000
 8001344:	40000400 	.word	0x40000400
 8001348:	20000504 	.word	0x20000504

0800134c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001350:	b672      	cpsid	i
}
 8001352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <Error_Handler+0x8>

08001358 <Chip_Select>:

#include "nRF24L01.h"
#include "main.h"

void Chip_Select(NRF_HandleTypeDef *nrf)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CS_GPIO, nrf->CS_PIN, 0);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	899b      	ldrh	r3, [r3, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	4619      	mov	r1, r3
 800136c:	f001 f88c 	bl	8002488 <HAL_GPIO_WritePin>
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <Chip_Deselect>:

void Chip_Deselect(NRF_HandleTypeDef *nrf)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CS_GPIO, nrf->CS_PIN, 1);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6818      	ldr	r0, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	899b      	ldrh	r3, [r3, #12]
 8001388:	2201      	movs	r2, #1
 800138a:	4619      	mov	r1, r3
 800138c:	f001 f87c 	bl	8002488 <HAL_GPIO_WritePin>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <Set_CE_High>:

void Set_CE_High(NRF_HandleTypeDef *nrf)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CE_GPIO, nrf->CE_PIN, 1);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6858      	ldr	r0, [r3, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	89db      	ldrh	r3, [r3, #14]
 80013a8:	2201      	movs	r2, #1
 80013aa:	4619      	mov	r1, r3
 80013ac:	f001 f86c 	bl	8002488 <HAL_GPIO_WritePin>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <Set_CE_Low>:

void Set_CE_Low(NRF_HandleTypeDef *nrf)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CE_GPIO, nrf->CE_PIN, 0);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6858      	ldr	r0, [r3, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	89db      	ldrh	r3, [r3, #14]
 80013c8:	2200      	movs	r2, #0
 80013ca:	4619      	mov	r1, r3
 80013cc:	f001 f85c 	bl	8002488 <HAL_GPIO_WritePin>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <WaitForIRQ>:

void WaitForIRQ(NRF_HandleTypeDef *nrf)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	while (HAL_GPIO_ReadPin(nrf->IRQ_GPIO, nrf->IRQ_PIN) == 1)
 80013e0:	bf00      	nop
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	8a1b      	ldrh	r3, [r3, #16]
 80013ea:	4619      	mov	r1, r3
 80013ec:	4610      	mov	r0, r2
 80013ee:	f001 f833 	bl	8002458 <HAL_GPIO_ReadPin>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d0f4      	beq.n	80013e2 <WaitForIRQ+0xa>
		;
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <nRF_WriteRegister>:

void nRF_WriteRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t *data, int size)
{
 8001402:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001406:	b089      	sub	sp, #36	@ 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	460b      	mov	r3, r1
 8001412:	72fb      	strb	r3, [r7, #11]
 8001414:	466b      	mov	r3, sp
 8001416:	461e      	mov	r6, r3
	uint8_t buff[size + 1];
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	1c59      	adds	r1, r3, #1
 800141c:	1e4b      	subs	r3, r1, #1
 800141e:	61bb      	str	r3, [r7, #24]
 8001420:	460a      	mov	r2, r1
 8001422:	2300      	movs	r3, #0
 8001424:	4690      	mov	r8, r2
 8001426:	4699      	mov	r9, r3
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001434:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001438:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800143c:	460a      	mov	r2, r1
 800143e:	2300      	movs	r3, #0
 8001440:	4614      	mov	r4, r2
 8001442:	461d      	mov	r5, r3
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	f04f 0300 	mov.w	r3, #0
 800144c:	00eb      	lsls	r3, r5, #3
 800144e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001452:	00e2      	lsls	r2, r4, #3
 8001454:	460b      	mov	r3, r1
 8001456:	3307      	adds	r3, #7
 8001458:	08db      	lsrs	r3, r3, #3
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	ebad 0d03 	sub.w	sp, sp, r3
 8001460:	466b      	mov	r3, sp
 8001462:	3300      	adds	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
	buff[0] = reg | (1 << 5);
 8001466:	7afb      	ldrb	r3, [r7, #11]
 8001468:	f043 0320 	orr.w	r3, r3, #32
 800146c:	b2da      	uxtb	r2, r3
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++)
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
 8001476:	e00a      	b.n	800148e <nRF_WriteRegister+0x8c>
	{
		buff[i + 1] = data[i];
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	441a      	add	r2, r3
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3301      	adds	r3, #1
 8001482:	7811      	ldrb	r1, [r2, #0]
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < size; i++)
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	3301      	adds	r3, #1
 800148c:	61fb      	str	r3, [r7, #28]
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	429a      	cmp	r2, r3
 8001494:	dbf0      	blt.n	8001478 <nRF_WriteRegister+0x76>
	}
	Chip_Select(nrf);
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f7ff ff5e 	bl	8001358 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, buff, (uint16_t)size + 1, NRF_SPI_TIMEOUT);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6958      	ldr	r0, [r3, #20]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	3301      	adds	r3, #1
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	2364      	movs	r3, #100	@ 0x64
 80014aa:	6979      	ldr	r1, [r7, #20]
 80014ac:	f001 fd33 	bl	8002f16 <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f7ff ff61 	bl	8001378 <Chip_Deselect>
 80014b6:	46b5      	mov	sp, r6
}
 80014b8:	bf00      	nop
 80014ba:	3724      	adds	r7, #36	@ 0x24
 80014bc:	46bd      	mov	sp, r7
 80014be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080014c2 <nRF_WriteOneRegister>:

void nRF_WriteOneRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t data)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b084      	sub	sp, #16
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	460b      	mov	r3, r1
 80014cc:	70fb      	strb	r3, [r7, #3]
 80014ce:	4613      	mov	r3, r2
 80014d0:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2];
	buff[0] = reg | (1 << 5);
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	f043 0320 	orr.w	r3, r3, #32
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	733b      	strb	r3, [r7, #12]
	buff[1] = data;
 80014dc:	78bb      	ldrb	r3, [r7, #2]
 80014de:	737b      	strb	r3, [r7, #13]
	Chip_Select(nrf);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff39 	bl	8001358 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, buff, 2, NRF_SPI_TIMEOUT);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6958      	ldr	r0, [r3, #20]
 80014ea:	f107 010c 	add.w	r1, r7, #12
 80014ee:	2364      	movs	r3, #100	@ 0x64
 80014f0:	2202      	movs	r2, #2
 80014f2:	f001 fd10 	bl	8002f16 <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ff3e 	bl	8001378 <Chip_Deselect>
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <nRF_ReadOneRegister>:
	HAL_SPI_Receive(nrf->hspi, receive_data, size, NRF_SPI_TIMEOUT * 10);
	Chip_Deselect(nrf);
}

void nRF_ReadOneRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t *receive_data)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	460b      	mov	r3, r1
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	72fb      	strb	r3, [r7, #11]

	uint8_t buff = reg;
 8001512:	7afb      	ldrb	r3, [r7, #11]
 8001514:	75fb      	strb	r3, [r7, #23]
	Chip_Select(nrf);
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f7ff ff1e 	bl	8001358 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6958      	ldr	r0, [r3, #20]
 8001520:	f107 0117 	add.w	r1, r7, #23
 8001524:	2364      	movs	r3, #100	@ 0x64
 8001526:	2201      	movs	r2, #1
 8001528:	f001 fcf5 	bl	8002f16 <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->hspi, receive_data, 1, NRF_SPI_TIMEOUT);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6958      	ldr	r0, [r3, #20]
 8001530:	2364      	movs	r3, #100	@ 0x64
 8001532:	2201      	movs	r2, #1
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	f001 fe32 	bl	800319e <HAL_SPI_Receive>
	Chip_Deselect(nrf);
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f7ff ff1c 	bl	8001378 <Chip_Deselect>
}
 8001540:	bf00      	nop
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <nRF_SendCmd>:
void nRF_SendCmd(NRF_HandleTypeDef *nrf, uint8_t cmd)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	70fb      	strb	r3, [r7, #3]

	uint8_t buff = cmd;
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	73fb      	strb	r3, [r7, #15]
	Chip_Select(nrf);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff fefd 	bl	8001358 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6958      	ldr	r0, [r3, #20]
 8001562:	f107 010f 	add.w	r1, r7, #15
 8001566:	2364      	movs	r3, #100	@ 0x64
 8001568:	2201      	movs	r2, #1
 800156a:	f001 fcd4 	bl	8002f16 <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ff02 	bl	8001378 <Chip_Deselect>
}
 8001574:	bf00      	nop
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <nRF_GetStatus>:

uint8_t nRF_GetStatus(NRF_HandleTypeDef *nrf)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

	uint8_t buff = STATUS;
 8001584:	2307      	movs	r3, #7
 8001586:	73fb      	strb	r3, [r7, #15]
	uint8_t rx_data = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	73bb      	strb	r3, [r7, #14]
	Chip_Select(nrf);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff fee3 	bl	8001358 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6958      	ldr	r0, [r3, #20]
 8001596:	f107 010f 	add.w	r1, r7, #15
 800159a:	2364      	movs	r3, #100	@ 0x64
 800159c:	2201      	movs	r2, #1
 800159e:	f001 fcba 	bl	8002f16 <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->hspi, &rx_data, 1, NRF_SPI_TIMEOUT * 10);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6958      	ldr	r0, [r3, #20]
 80015a6:	f107 010e 	add.w	r1, r7, #14
 80015aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ae:	2201      	movs	r2, #1
 80015b0:	f001 fdf5 	bl	800319e <HAL_SPI_Receive>
	Chip_Deselect(nrf);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fedf 	bl	8001378 <Chip_Deselect>
	return rx_data;
 80015ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <nRF_TX_Payload>:

void nRF_TX_Payload(NRF_HandleTypeDef *nrf, uint8_t *data, uint16_t size)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	4613      	mov	r3, r2
 80015d0:	80fb      	strh	r3, [r7, #6]
	Chip_Select(nrf);
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f7ff fec0 	bl	8001358 <Chip_Select>
	uint8_t buff = W_TX_PAYLOAD;
 80015d8:	23a0      	movs	r3, #160	@ 0xa0
 80015da:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6958      	ldr	r0, [r3, #20]
 80015e0:	f107 0117 	add.w	r1, r7, #23
 80015e4:	2364      	movs	r3, #100	@ 0x64
 80015e6:	2201      	movs	r2, #1
 80015e8:	f001 fc95 	bl	8002f16 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf->hspi, data, size, NRF_SPI_TIMEOUT);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6958      	ldr	r0, [r3, #20]
 80015f0:	88fa      	ldrh	r2, [r7, #6]
 80015f2:	2364      	movs	r3, #100	@ 0x64
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	f001 fc8e 	bl	8002f16 <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f7ff febc 	bl	8001378 <Chip_Deselect>
}
 8001600:	bf00      	nop
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <nRF_RX_Payload>:

void nRF_RX_Payload(NRF_HandleTypeDef *nrf, uint8_t *rx_data, uint16_t size)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	4613      	mov	r3, r2
 8001614:	80fb      	strh	r3, [r7, #6]
	Chip_Select(nrf);
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f7ff fe9e 	bl	8001358 <Chip_Select>
	uint8_t buff = R_RX_PAYLOAD;
 800161c:	2361      	movs	r3, #97	@ 0x61
 800161e:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6958      	ldr	r0, [r3, #20]
 8001624:	f107 0117 	add.w	r1, r7, #23
 8001628:	2364      	movs	r3, #100	@ 0x64
 800162a:	2201      	movs	r2, #1
 800162c:	f001 fc73 	bl	8002f16 <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->hspi, rx_data, size, NRF_SPI_TIMEOUT * 10);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6958      	ldr	r0, [r3, #20]
 8001634:	88fa      	ldrh	r2, [r7, #6]
 8001636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800163a:	68b9      	ldr	r1, [r7, #8]
 800163c:	f001 fdaf 	bl	800319e <HAL_SPI_Receive>
	Chip_Deselect(nrf);
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f7ff fe99 	bl	8001378 <Chip_Deselect>
}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <Select_Tx_Mode_RTOS>:
	vTaskDelay(pdMS_TO_TICKS(2));
	nrf->nrfmode = MODE_TX;
}

void Select_Tx_Mode_RTOS(NRF_HandleTypeDef *nrf)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
	uint8_t buff = 0x0a;
 8001656:	230a      	movs	r3, #10
 8001658:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low(nrf);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff feac 	bl	80013b8 <Set_CE_Low>
	CONFIG_REG_Write(nrf, buff);
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	4619      	mov	r1, r3
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 f8ec 	bl	8001842 <CONFIG_REG_Write>
	Set_CE_High(nrf);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fe94 	bl	8001398 <Set_CE_High>
	vTaskDelay(pdMS_TO_TICKS(2));
 8001670:	2002      	movs	r0, #2
 8001672:	f003 fee7 	bl	8005444 <vTaskDelay>
	nrf->nrfmode = MODE_TX;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	761a      	strb	r2, [r3, #24]
}
 800167c:	bf00      	nop
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <Select_Rx_Mode_RTOS>:
	nRF_SendCmd(nrf, FLUSH_RX);
	nrf->nrfmode = MODE_RX;
}

void Select_Rx_Mode_RTOS(NRF_HandleTypeDef *nrf)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	uint8_t buff = 0x0b;
 800168c:	230b      	movs	r3, #11
 800168e:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low(nrf);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fe91 	bl	80013b8 <Set_CE_Low>
	CONFIG_REG_Write(nrf, buff);
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	4619      	mov	r1, r3
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f8d1 	bl	8001842 <CONFIG_REG_Write>
	Set_CE_High(nrf);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff fe79 	bl	8001398 <Set_CE_High>
	vTaskDelay(pdMS_TO_TICKS(2));
 80016a6:	2002      	movs	r0, #2
 80016a8:	f003 fecc 	bl	8005444 <vTaskDelay>
	nrf->nrfmode = MODE_RX;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	761a      	strb	r2, [r3, #24]
}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <Two_Way_Commuination_RTOS>:

void Two_Way_Commuination_RTOS(NRF_HandleTypeDef *nrf,uint8_t *tx_data,uint8_t *rx_data)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	60f8      	str	r0, [r7, #12]
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
	TX_Communication(nrf,tx_data);
 80016c6:	68b9      	ldr	r1, [r7, #8]
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f000 f849 	bl	8001760 <TX_Communication>
	Select_Rx_Mode_RTOS(nrf);
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f7ff ffd8 	bl	8001684 <Select_Rx_Mode_RTOS>
	vTaskDelay(pdMS_TO_TICKS(50));
 80016d4:	2032      	movs	r0, #50	@ 0x32
 80016d6:	f003 feb5 	bl	8005444 <vTaskDelay>
	RX_Communication(nrf,rx_data);
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f000 f883 	bl	80017e8 <RX_Communication>
	Select_Tx_Mode_RTOS(nrf);
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f7ff ffb3 	bl	800164e <Select_Tx_Mode_RTOS>
	vTaskDelay(pdMS_TO_TICKS(10));
 80016e8:	200a      	movs	r0, #10
 80016ea:	f003 feab 	bl	8005444 <vTaskDelay>
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <Two_Way_Commuination_Pipe0_Config>:

#endif

void Two_Way_Commuination_Pipe0_Config(NRF_HandleTypeDef *nrf, uint64_t tx_addr, uint64_t rx_addr)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	e9c7 2300 	strd	r2, r3, [r7]
	Set_CE_Low(nrf);
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f7ff fe58 	bl	80013b8 <Set_CE_Low>
	RX_PW_P_NUM_Number_Of_Bytes(nrf, 0, 32);
 8001708:	2220      	movs	r2, #32
 800170a:	2100      	movs	r1, #0
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f000 f919 	bl	8001944 <RX_PW_P_NUM_Number_Of_Bytes>
	TX_ADDR_Write(nrf, tx_addr);
 8001712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 f8e1 	bl	80018de <TX_ADDR_Write>
	RX_ADDR_P0_Write(nrf, rx_addr);
 800171c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f000 f8aa 	bl	800187a <RX_ADDR_P0_Write>
	nRF_WriteOneRegister(nrf, EN_RXADDR, 1);
 8001726:	2201      	movs	r2, #1
 8001728:	2102      	movs	r1, #2
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f7ff fec9 	bl	80014c2 <nRF_WriteOneRegister>
	nRF_WriteOneRegister(nrf, EN_AA, 0x00);
 8001730:	2200      	movs	r2, #0
 8001732:	2101      	movs	r1, #1
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f7ff fec4 	bl	80014c2 <nRF_WriteOneRegister>
	nRF_WriteOneRegister(nrf, RF_SETUP, 0x7);
 800173a:	2207      	movs	r2, #7
 800173c:	2106      	movs	r1, #6
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f7ff febf 	bl	80014c2 <nRF_WriteOneRegister>
	CONFIG_REG_Write(nrf, 0xa);
 8001744:	210a      	movs	r1, #10
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 f87b 	bl	8001842 <CONFIG_REG_Write>
	Set_CE_High(nrf);
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f7ff fe23 	bl	8001398 <Set_CE_High>
	HAL_Delay(2);
 8001752:	2002      	movs	r0, #2
 8001754:	f000 fbf6 	bl	8001f44 <HAL_Delay>
}
 8001758:	bf00      	nop
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <TX_Communication>:
	Set_CE_High(nrf);
	HAL_Delay(2);
}

uint8_t TX_Communication(NRF_HandleTypeDef *nrf, uint8_t *data)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
	if (nrf->nrfmode == MODE_TX)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7e1b      	ldrb	r3, [r3, #24]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d135      	bne.n	80017de <TX_Communication+0x7e>
	{
		nRF_TX_Payload(nrf, data, 32);
 8001772:	2220      	movs	r2, #32
 8001774:	6839      	ldr	r1, [r7, #0]
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ff24 	bl	80015c4 <nRF_TX_Payload>
		Set_CE_High(nrf);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fe0b 	bl	8001398 <Set_CE_High>
		WaitForIRQ(nrf);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff fe28 	bl	80013d8 <WaitForIRQ>
		nRF_SendCmd(nrf, FLUSH_TX);
 8001788:	21e1      	movs	r1, #225	@ 0xe1
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fedc 	bl	8001548 <nRF_SendCmd>
		uint8_t status = nRF_GetStatus(nrf);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fef3 	bl	800157c <nRF_GetStatus>
 8001796:	4603      	mov	r3, r0
 8001798:	73fb      	strb	r3, [r7, #15]
		if ((status & (1 << MAX_RT)) != 0)
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00b      	beq.n	80017bc <TX_Communication+0x5c>
		{
			status |= ((1 << MAX_RT) | (1 << TX_FULL));
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	f043 0311 	orr.w	r3, r3, #17
 80017aa:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(nrf, STATUS, status);
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	461a      	mov	r2, r3
 80017b0:	2107      	movs	r1, #7
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff fe85 	bl	80014c2 <nRF_WriteOneRegister>
			return STATUS_TX_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e011      	b.n	80017e0 <TX_Communication+0x80>
		}
		else if ((status & (1 << 5)) != 0)
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	f003 0320 	and.w	r3, r3, #32
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00b      	beq.n	80017de <TX_Communication+0x7e>
		{
			status |= ((1 << TX_DS) | (1 << TX_FULL));
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 80017cc:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(nrf, STATUS, status);
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	461a      	mov	r2, r3
 80017d2:	2107      	movs	r1, #7
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fe74 	bl	80014c2 <nRF_WriteOneRegister>
			return STATUS_TX_OK;
 80017da:	2302      	movs	r3, #2
 80017dc:	e000      	b.n	80017e0 <TX_Communication+0x80>
		}
	}
	return STATUS_TX_NONDEFINE;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <RX_Communication>:

uint8_t RX_Communication(NRF_HandleTypeDef *nrf, uint8_t *rx_data)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
	if (nrf->nrfmode == MODE_RX)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7e1b      	ldrb	r3, [r3, #24]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d11e      	bne.n	8001838 <RX_Communication+0x50>
	{
		Set_CE_High(nrf);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff fdcc 	bl	8001398 <Set_CE_High>
		uint8_t status = nRF_GetStatus(nrf);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff febb 	bl	800157c <nRF_GetStatus>
 8001806:	4603      	mov	r3, r0
 8001808:	73fb      	strb	r3, [r7, #15]
		if ((status & (1 << RX_DR)) != 0)
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001810:	2b00      	cmp	r3, #0
 8001812:	d00b      	beq.n	800182c <RX_Communication+0x44>
		{
			nRF_WriteOneRegister(nrf, STATUS, (1 << 6));
 8001814:	2240      	movs	r2, #64	@ 0x40
 8001816:	2107      	movs	r1, #7
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff fe52 	bl	80014c2 <nRF_WriteOneRegister>
			nRF_RX_Payload(nrf, rx_data, 32);
 800181e:	2220      	movs	r2, #32
 8001820:	6839      	ldr	r1, [r7, #0]
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fef0 	bl	8001608 <nRF_RX_Payload>
			return STATUS_RX_OK;
 8001828:	2302      	movs	r3, #2
 800182a:	e006      	b.n	800183a <RX_Communication+0x52>
		}
		nRF_SendCmd(nrf, FLUSH_RX);
 800182c:	21e2      	movs	r1, #226	@ 0xe2
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fe8a 	bl	8001548 <nRF_SendCmd>
		return STATUS_RX_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <RX_Communication+0x52>
	}
	return STATUS_RX_NONEDEFINE;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <CONFIG_REG_Write>:
}



void CONFIG_REG_Write(NRF_HandleTypeDef *nrf, uint8_t data)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b084      	sub	sp, #16
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	460b      	mov	r3, r1
 800184c:	70fb      	strb	r3, [r7, #3]
	uint8_t read_reg;
	do
	{
		nRF_WriteOneRegister(nrf, CONFIG, data);
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	461a      	mov	r2, r3
 8001852:	2100      	movs	r1, #0
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff fe34 	bl	80014c2 <nRF_WriteOneRegister>
		nRF_ReadOneRegister(nrf, CONFIG, &read_reg);
 800185a:	f107 030f 	add.w	r3, r7, #15
 800185e:	461a      	mov	r2, r3
 8001860:	2100      	movs	r1, #0
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff fe4e 	bl	8001504 <nRF_ReadOneRegister>
	} while (read_reg != data);
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	78fa      	ldrb	r2, [r7, #3]
 800186c:	429a      	cmp	r2, r3
 800186e:	d1ee      	bne.n	800184e <CONFIG_REG_Write+0xc>
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <RX_ADDR_P0_Write>:
{
	nRF_WriteOneRegister(nrf, EN_AA, pipe & 0x3F);
}

void RX_ADDR_P0_Write(NRF_HandleTypeDef *nrf, uint64_t data)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b08a      	sub	sp, #40	@ 0x28
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t buff[5];
	uint64_t temp = data;
 8001886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800188a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	e016      	b.n	80018c2 <RX_ADDR_P0_Write+0x48>
	{
		buff[i] = (uint8_t)((temp) & 0xff);
 8001894:	f897 1020 	ldrb.w	r1, [r7, #32]
 8001898:	f107 0214 	add.w	r2, r7, #20
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	4413      	add	r3, r2
 80018a0:	460a      	mov	r2, r1
 80018a2:	701a      	strb	r2, [r3, #0]
		temp = temp >> 8;
 80018a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	0a02      	lsrs	r2, r0, #8
 80018b2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80018b6:	0a0b      	lsrs	r3, r1, #8
 80018b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	3301      	adds	r3, #1
 80018c0:	61fb      	str	r3, [r7, #28]
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	dde5      	ble.n	8001894 <RX_ADDR_P0_Write+0x1a>
	}
	nRF_WriteRegister(nrf, RX_ADDR_P0, buff, 5);
 80018c8:	f107 0214 	add.w	r2, r7, #20
 80018cc:	2305      	movs	r3, #5
 80018ce:	210a      	movs	r1, #10
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f7ff fd96 	bl	8001402 <nRF_WriteRegister>
}
 80018d6:	bf00      	nop
 80018d8:	3728      	adds	r7, #40	@ 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <TX_ADDR_Write>:
	}
	nRF_WriteOneRegister(nrf, reg, data);
}

void TX_ADDR_Write(NRF_HandleTypeDef *nrf, uint64_t data)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b08a      	sub	sp, #40	@ 0x28
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t buff[5];
	uint64_t temp = data;
 80018ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018ee:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	e016      	b.n	8001926 <TX_ADDR_Write+0x48>
	{
		buff[i] = (uint8_t)((temp) & 0xff);
 80018f8:	f897 1020 	ldrb.w	r1, [r7, #32]
 80018fc:	f107 0214 	add.w	r2, r7, #20
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	4413      	add	r3, r2
 8001904:	460a      	mov	r2, r1
 8001906:	701a      	strb	r2, [r3, #0]
		temp = temp >> 8;
 8001908:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	0a02      	lsrs	r2, r0, #8
 8001916:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800191a:	0a0b      	lsrs	r3, r1, #8
 800191c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3301      	adds	r3, #1
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	2b04      	cmp	r3, #4
 800192a:	dde5      	ble.n	80018f8 <TX_ADDR_Write+0x1a>
	}
	nRF_WriteRegister(nrf, TX_ADDR, buff, 5);
 800192c:	f107 0214 	add.w	r2, r7, #20
 8001930:	2305      	movs	r3, #5
 8001932:	2110      	movs	r1, #16
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f7ff fd64 	bl	8001402 <nRF_WriteRegister>
}
 800193a:	bf00      	nop
 800193c:	3728      	adds	r7, #40	@ 0x28
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <RX_PW_P_NUM_Number_Of_Bytes>:

void RX_PW_P_NUM_Number_Of_Bytes(NRF_HandleTypeDef *nrf, int num, uint8_t data)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	4613      	mov	r3, r2
 8001950:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	switch (num)
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2b05      	cmp	r3, #5
 8001956:	d828      	bhi.n	80019aa <RX_PW_P_NUM_Number_Of_Bytes+0x66>
 8001958:	a201      	add	r2, pc, #4	@ (adr r2, 8001960 <RX_PW_P_NUM_Number_Of_Bytes+0x1c>)
 800195a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195e:	bf00      	nop
 8001960:	08001979 	.word	0x08001979
 8001964:	0800197f 	.word	0x0800197f
 8001968:	08001985 	.word	0x08001985
 800196c:	0800198b 	.word	0x0800198b
 8001970:	08001991 	.word	0x08001991
 8001974:	08001997 	.word	0x08001997
	{
	case 0:
		reg = RX_PW_P0;
 8001978:	2311      	movs	r3, #17
 800197a:	75fb      	strb	r3, [r7, #23]
		break;
 800197c:	e00e      	b.n	800199c <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 1:
		reg = RX_PW_P1;
 800197e:	2312      	movs	r3, #18
 8001980:	75fb      	strb	r3, [r7, #23]
		break;
 8001982:	e00b      	b.n	800199c <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 2:
		reg = RX_PW_P2;
 8001984:	2313      	movs	r3, #19
 8001986:	75fb      	strb	r3, [r7, #23]
		break;
 8001988:	e008      	b.n	800199c <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 3:
		reg = RX_PW_P3;
 800198a:	2314      	movs	r3, #20
 800198c:	75fb      	strb	r3, [r7, #23]
		break;
 800198e:	e005      	b.n	800199c <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 4:
		reg = RX_PW_P4;
 8001990:	2315      	movs	r3, #21
 8001992:	75fb      	strb	r3, [r7, #23]
		break;
 8001994:	e002      	b.n	800199c <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 5:
		reg = RX_PW_P5;
 8001996:	2316      	movs	r3, #22
 8001998:	75fb      	strb	r3, [r7, #23]
		break;
 800199a:	bf00      	nop
	default:
		return;
	}
	nRF_WriteOneRegister(nrf, reg, data);
 800199c:	79fa      	ldrb	r2, [r7, #7]
 800199e:	7dfb      	ldrb	r3, [r7, #23]
 80019a0:	4619      	mov	r1, r3
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f7ff fd8d 	bl	80014c2 <nRF_WriteOneRegister>
 80019a8:	e000      	b.n	80019ac <RX_PW_P_NUM_Number_Of_Bytes+0x68>
		return;
 80019aa:	bf00      	nop
}
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop

080019b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <HAL_MspInit+0x54>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c2:	4a11      	ldr	r2, [pc, #68]	@ (8001a08 <HAL_MspInit+0x54>)
 80019c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <HAL_MspInit+0x54>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	603b      	str	r3, [r7, #0]
 80019da:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <HAL_MspInit+0x54>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <HAL_MspInit+0x54>)
 80019e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e6:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <HAL_MspInit+0x54>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	210f      	movs	r1, #15
 80019f6:	f06f 0001 	mvn.w	r0, #1
 80019fa:	f000 fb7f 	bl	80020fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800

08001a0c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08c      	sub	sp, #48	@ 0x30
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a32      	ldr	r2, [pc, #200]	@ (8001af4 <HAL_SPI_MspInit+0xe8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d12c      	bne.n	8001a88 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	4b31      	ldr	r3, [pc, #196]	@ (8001af8 <HAL_SPI_MspInit+0xec>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a36:	4a30      	ldr	r2, [pc, #192]	@ (8001af8 <HAL_SPI_MspInit+0xec>)
 8001a38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001af8 <HAL_SPI_MspInit+0xec>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a46:	61bb      	str	r3, [r7, #24]
 8001a48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001af8 <HAL_SPI_MspInit+0xec>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	4a29      	ldr	r2, [pc, #164]	@ (8001af8 <HAL_SPI_MspInit+0xec>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5a:	4b27      	ldr	r3, [pc, #156]	@ (8001af8 <HAL_SPI_MspInit+0xec>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a66:	23e0      	movs	r3, #224	@ 0xe0
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a72:	2303      	movs	r3, #3
 8001a74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a76:	2305      	movs	r3, #5
 8001a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	4619      	mov	r1, r3
 8001a80:	481e      	ldr	r0, [pc, #120]	@ (8001afc <HAL_SPI_MspInit+0xf0>)
 8001a82:	f000 fb65 	bl	8002150 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a86:	e031      	b.n	8001aec <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001b00 <HAL_SPI_MspInit+0xf4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d12c      	bne.n	8001aec <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b18      	ldr	r3, [pc, #96]	@ (8001af8 <HAL_SPI_MspInit+0xec>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	4a17      	ldr	r2, [pc, #92]	@ (8001af8 <HAL_SPI_MspInit+0xec>)
 8001a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa2:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <HAL_SPI_MspInit+0xec>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <HAL_SPI_MspInit+0xec>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	4a10      	ldr	r2, [pc, #64]	@ (8001af8 <HAL_SPI_MspInit+0xec>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001abe:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <HAL_SPI_MspInit+0xec>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001aca:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001adc:	2305      	movs	r3, #5
 8001ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4807      	ldr	r0, [pc, #28]	@ (8001b04 <HAL_SPI_MspInit+0xf8>)
 8001ae8:	f000 fb32 	bl	8002150 <HAL_GPIO_Init>
}
 8001aec:	bf00      	nop
 8001aee:	3730      	adds	r7, #48	@ 0x30
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40013000 	.word	0x40013000
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40003800 	.word	0x40003800
 8001b04:	40020400 	.word	0x40020400

08001b08 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b18:	d10d      	bne.n	8001b36 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	4a08      	ldr	r2, [pc, #32]	@ (8001b44 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b2a:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800

08001b48 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0e      	ldr	r2, [pc, #56]	@ (8001b90 <HAL_TIM_Base_MspInit+0x48>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d115      	bne.n	8001b86 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <HAL_TIM_Base_MspInit+0x4c>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	4a0c      	ldr	r2, [pc, #48]	@ (8001b94 <HAL_TIM_Base_MspInit+0x4c>)
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <HAL_TIM_Base_MspInit+0x4c>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2105      	movs	r1, #5
 8001b7a:	201d      	movs	r0, #29
 8001b7c:	f000 fabe 	bl	80020fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b80:	201d      	movs	r0, #29
 8001b82:	f000 fad7 	bl	8002134 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40000400 	.word	0x40000400
 8001b94:	40023800 	.word	0x40023800

08001b98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bb8:	d11d      	bne.n	8001bf6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <HAL_TIM_MspPostInit+0x68>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8001c00 <HAL_TIM_MspPostInit+0x68>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bca:	4b0d      	ldr	r3, [pc, #52]	@ (8001c00 <HAL_TIM_MspPostInit+0x68>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001bd6:	230f      	movs	r3, #15
 8001bd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001be6:	2301      	movs	r3, #1
 8001be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4804      	ldr	r0, [pc, #16]	@ (8001c04 <HAL_TIM_MspPostInit+0x6c>)
 8001bf2:	f000 faad 	bl	8002150 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001bf6:	bf00      	nop
 8001bf8:	3720      	adds	r7, #32
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40020000 	.word	0x40020000

08001c08 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	@ 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a19      	ldr	r2, [pc, #100]	@ (8001c8c <HAL_UART_MspInit+0x84>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d12c      	bne.n	8001c84 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	4b18      	ldr	r3, [pc, #96]	@ (8001c90 <HAL_UART_MspInit+0x88>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	4a17      	ldr	r2, [pc, #92]	@ (8001c90 <HAL_UART_MspInit+0x88>)
 8001c34:	f043 0310 	orr.w	r3, r3, #16
 8001c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3a:	4b15      	ldr	r3, [pc, #84]	@ (8001c90 <HAL_UART_MspInit+0x88>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3e:	f003 0310 	and.w	r3, r3, #16
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <HAL_UART_MspInit+0x88>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	4a10      	ldr	r2, [pc, #64]	@ (8001c90 <HAL_UART_MspInit+0x88>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c56:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <HAL_UART_MspInit+0x88>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c62:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c70:	2303      	movs	r3, #3
 8001c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c74:	2307      	movs	r3, #7
 8001c76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4805      	ldr	r0, [pc, #20]	@ (8001c94 <HAL_UART_MspInit+0x8c>)
 8001c80:	f000 fa66 	bl	8002150 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001c84:	bf00      	nop
 8001c86:	3728      	adds	r7, #40	@ 0x28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40011000 	.word	0x40011000
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40020000 	.word	0x40020000

08001c98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08c      	sub	sp, #48	@ 0x30
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	4b2e      	ldr	r3, [pc, #184]	@ (8001d68 <HAL_InitTick+0xd0>)
 8001cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8001d68 <HAL_InitTick+0xd0>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d68 <HAL_InitTick+0xd0>)
 8001cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cc4:	f107 020c 	add.w	r2, r7, #12
 8001cc8:	f107 0310 	add.w	r3, r7, #16
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f001 f866 	bl	8002da0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001cd4:	f001 f850 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 8001cd8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cdc:	4a23      	ldr	r2, [pc, #140]	@ (8001d6c <HAL_InitTick+0xd4>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	0c9b      	lsrs	r3, r3, #18
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ce8:	4b21      	ldr	r3, [pc, #132]	@ (8001d70 <HAL_InitTick+0xd8>)
 8001cea:	4a22      	ldr	r2, [pc, #136]	@ (8001d74 <HAL_InitTick+0xdc>)
 8001cec:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001cee:	4b20      	ldr	r3, [pc, #128]	@ (8001d70 <HAL_InitTick+0xd8>)
 8001cf0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cf4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d70 <HAL_InitTick+0xd8>)
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d70 <HAL_InitTick+0xd8>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d02:	4b1b      	ldr	r3, [pc, #108]	@ (8001d70 <HAL_InitTick+0xd8>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d08:	4b19      	ldr	r3, [pc, #100]	@ (8001d70 <HAL_InitTick+0xd8>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001d0e:	4818      	ldr	r0, [pc, #96]	@ (8001d70 <HAL_InitTick+0xd8>)
 8001d10:	f001 fe4a 	bl	80039a8 <HAL_TIM_Base_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d11b      	bne.n	8001d5a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d22:	4813      	ldr	r0, [pc, #76]	@ (8001d70 <HAL_InitTick+0xd8>)
 8001d24:	f001 fe90 	bl	8003a48 <HAL_TIM_Base_Start_IT>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001d2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d111      	bne.n	8001d5a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d36:	2019      	movs	r0, #25
 8001d38:	f000 f9fc 	bl	8002134 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b0f      	cmp	r3, #15
 8001d40:	d808      	bhi.n	8001d54 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001d42:	2200      	movs	r2, #0
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	2019      	movs	r0, #25
 8001d48:	f000 f9d8 	bl	80020fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d78 <HAL_InitTick+0xe0>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e002      	b.n	8001d5a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3730      	adds	r7, #48	@ 0x30
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	431bde83 	.word	0x431bde83
 8001d70:	200007c0 	.word	0x200007c0
 8001d74:	40010000 	.word	0x40010000
 8001d78:	20000020 	.word	0x20000020

08001d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <NMI_Handler+0x4>

08001d84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <HardFault_Handler+0x4>

08001d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d90:	bf00      	nop
 8001d92:	e7fd      	b.n	8001d90 <MemManage_Handler+0x4>

08001d94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d98:	bf00      	nop
 8001d9a:	e7fd      	b.n	8001d98 <BusFault_Handler+0x4>

08001d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da0:	bf00      	nop
 8001da2:	e7fd      	b.n	8001da0 <UsageFault_Handler+0x4>

08001da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001db8:	4802      	ldr	r0, [pc, #8]	@ (8001dc4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001dba:	f001 ffa7 	bl	8003d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200007c0 	.word	0x200007c0

08001dc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dcc:	4802      	ldr	r0, [pc, #8]	@ (8001dd8 <TIM3_IRQHandler+0x10>)
 8001dce:	f001 ff9d 	bl	8003d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000430 	.word	0x20000430

08001ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de4:	4a14      	ldr	r2, [pc, #80]	@ (8001e38 <_sbrk+0x5c>)
 8001de6:	4b15      	ldr	r3, [pc, #84]	@ (8001e3c <_sbrk+0x60>)
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df0:	4b13      	ldr	r3, [pc, #76]	@ (8001e40 <_sbrk+0x64>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d102      	bne.n	8001dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df8:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <_sbrk+0x64>)
 8001dfa:	4a12      	ldr	r2, [pc, #72]	@ (8001e44 <_sbrk+0x68>)
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dfe:	4b10      	ldr	r3, [pc, #64]	@ (8001e40 <_sbrk+0x64>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d207      	bcs.n	8001e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e0c:	f004 fb4a 	bl	80064a4 <__errno>
 8001e10:	4603      	mov	r3, r0
 8001e12:	220c      	movs	r2, #12
 8001e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1a:	e009      	b.n	8001e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <_sbrk+0x64>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e22:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	4a05      	ldr	r2, [pc, #20]	@ (8001e40 <_sbrk+0x64>)
 8001e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20020000 	.word	0x20020000
 8001e3c:	00000400 	.word	0x00000400
 8001e40:	20000808 	.word	0x20000808
 8001e44:	200046b0 	.word	0x200046b0

08001e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e4c:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <SystemInit+0x20>)
 8001e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e52:	4a05      	ldr	r2, [pc, #20]	@ (8001e68 <SystemInit+0x20>)
 8001e54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ea4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e70:	f7ff ffea 	bl	8001e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e74:	480c      	ldr	r0, [pc, #48]	@ (8001ea8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e76:	490d      	ldr	r1, [pc, #52]	@ (8001eac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e78:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e7c:	e002      	b.n	8001e84 <LoopCopyDataInit>

08001e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e82:	3304      	adds	r3, #4

08001e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e88:	d3f9      	bcc.n	8001e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001eb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e90:	e001      	b.n	8001e96 <LoopFillZerobss>

08001e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e94:	3204      	adds	r2, #4

08001e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e98:	d3fb      	bcc.n	8001e92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e9a:	f004 fb09 	bl	80064b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e9e:	f7fe fd93 	bl	80009c8 <main>
  bx  lr    
 8001ea2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ea4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eac:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001eb0:	08006e44 	.word	0x08006e44
  ldr r2, =_sbss
 8001eb4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001eb8:	200046ac 	.word	0x200046ac

08001ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ebc:	e7fe      	b.n	8001ebc <ADC_IRQHandler>
	...

08001ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f00 <HAL_Init+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f00 <HAL_Init+0x40>)
 8001eca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <HAL_Init+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8001f00 <HAL_Init+0x40>)
 8001ed6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001edc:	4b08      	ldr	r3, [pc, #32]	@ (8001f00 <HAL_Init+0x40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a07      	ldr	r2, [pc, #28]	@ (8001f00 <HAL_Init+0x40>)
 8001ee2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee8:	2003      	movs	r0, #3
 8001eea:	f000 f8fc 	bl	80020e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eee:	200f      	movs	r0, #15
 8001ef0:	f7ff fed2 	bl	8001c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef4:	f7ff fd5e 	bl	80019b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40023c00 	.word	0x40023c00

08001f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f08:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <HAL_IncTick+0x20>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <HAL_IncTick+0x24>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	4a04      	ldr	r2, [pc, #16]	@ (8001f28 <HAL_IncTick+0x24>)
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000024 	.word	0x20000024
 8001f28:	2000080c 	.word	0x2000080c

08001f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f30:	4b03      	ldr	r3, [pc, #12]	@ (8001f40 <HAL_GetTick+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	2000080c 	.word	0x2000080c

08001f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f4c:	f7ff ffee 	bl	8001f2c <HAL_GetTick>
 8001f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5c:	d005      	beq.n	8001f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <HAL_Delay+0x44>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4413      	add	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f6a:	bf00      	nop
 8001f6c:	f7ff ffde 	bl	8001f2c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d8f7      	bhi.n	8001f6c <HAL_Delay+0x28>
  {
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000024 	.word	0x20000024

08001f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fbe:	4a04      	ldr	r2, [pc, #16]	@ (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	60d3      	str	r3, [r2, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd8:	4b04      	ldr	r3, [pc, #16]	@ (8001fec <__NVIC_GetPriorityGrouping+0x18>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	f003 0307 	and.w	r3, r3, #7
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	db0b      	blt.n	800201a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	f003 021f 	and.w	r2, r3, #31
 8002008:	4907      	ldr	r1, [pc, #28]	@ (8002028 <__NVIC_EnableIRQ+0x38>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	2001      	movs	r0, #1
 8002012:	fa00 f202 	lsl.w	r2, r0, r2
 8002016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000e100 	.word	0xe000e100

0800202c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	6039      	str	r1, [r7, #0]
 8002036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	2b00      	cmp	r3, #0
 800203e:	db0a      	blt.n	8002056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	b2da      	uxtb	r2, r3
 8002044:	490c      	ldr	r1, [pc, #48]	@ (8002078 <__NVIC_SetPriority+0x4c>)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	0112      	lsls	r2, r2, #4
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	440b      	add	r3, r1
 8002050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002054:	e00a      	b.n	800206c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4908      	ldr	r1, [pc, #32]	@ (800207c <__NVIC_SetPriority+0x50>)
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	3b04      	subs	r3, #4
 8002064:	0112      	lsls	r2, r2, #4
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	440b      	add	r3, r1
 800206a:	761a      	strb	r2, [r3, #24]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000e100 	.word	0xe000e100
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	@ 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f1c3 0307 	rsb	r3, r3, #7
 800209a:	2b04      	cmp	r3, #4
 800209c:	bf28      	it	cs
 800209e:	2304      	movcs	r3, #4
 80020a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3304      	adds	r3, #4
 80020a6:	2b06      	cmp	r3, #6
 80020a8:	d902      	bls.n	80020b0 <NVIC_EncodePriority+0x30>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3b03      	subs	r3, #3
 80020ae:	e000      	b.n	80020b2 <NVIC_EncodePriority+0x32>
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	401a      	ands	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c8:	f04f 31ff 	mov.w	r1, #4294967295
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	43d9      	mvns	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	4313      	orrs	r3, r2
         );
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3724      	adds	r7, #36	@ 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ff4c 	bl	8001f8c <__NVIC_SetPriorityGrouping>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800210e:	f7ff ff61 	bl	8001fd4 <__NVIC_GetPriorityGrouping>
 8002112:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	68b9      	ldr	r1, [r7, #8]
 8002118:	6978      	ldr	r0, [r7, #20]
 800211a:	f7ff ffb1 	bl	8002080 <NVIC_EncodePriority>
 800211e:	4602      	mov	r2, r0
 8002120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002124:	4611      	mov	r1, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff ff80 	bl	800202c <__NVIC_SetPriority>
}
 800212c:	bf00      	nop
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ff54 	bl	8001ff0 <__NVIC_EnableIRQ>
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	@ 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	e159      	b.n	8002420 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800216c:	2201      	movs	r2, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	429a      	cmp	r2, r3
 8002186:	f040 8148 	bne.w	800241a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b01      	cmp	r3, #1
 8002194:	d005      	beq.n	80021a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d130      	bne.n	8002204 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2203      	movs	r2, #3
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d8:	2201      	movs	r2, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 0201 	and.w	r2, r3, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b03      	cmp	r3, #3
 800220e:	d017      	beq.n	8002240 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d123      	bne.n	8002294 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	08da      	lsrs	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3208      	adds	r2, #8
 8002254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	220f      	movs	r2, #15
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	08da      	lsrs	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3208      	adds	r2, #8
 800228e:	69b9      	ldr	r1, [r7, #24]
 8002290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0203 	and.w	r2, r3, #3
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 80a2 	beq.w	800241a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b57      	ldr	r3, [pc, #348]	@ (8002438 <HAL_GPIO_Init+0x2e8>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	4a56      	ldr	r2, [pc, #344]	@ (8002438 <HAL_GPIO_Init+0x2e8>)
 80022e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e6:	4b54      	ldr	r3, [pc, #336]	@ (8002438 <HAL_GPIO_Init+0x2e8>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022f2:	4a52      	ldr	r2, [pc, #328]	@ (800243c <HAL_GPIO_Init+0x2ec>)
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	3302      	adds	r3, #2
 80022fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	220f      	movs	r2, #15
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a49      	ldr	r2, [pc, #292]	@ (8002440 <HAL_GPIO_Init+0x2f0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d019      	beq.n	8002352 <HAL_GPIO_Init+0x202>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a48      	ldr	r2, [pc, #288]	@ (8002444 <HAL_GPIO_Init+0x2f4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d013      	beq.n	800234e <HAL_GPIO_Init+0x1fe>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a47      	ldr	r2, [pc, #284]	@ (8002448 <HAL_GPIO_Init+0x2f8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d00d      	beq.n	800234a <HAL_GPIO_Init+0x1fa>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a46      	ldr	r2, [pc, #280]	@ (800244c <HAL_GPIO_Init+0x2fc>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d007      	beq.n	8002346 <HAL_GPIO_Init+0x1f6>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a45      	ldr	r2, [pc, #276]	@ (8002450 <HAL_GPIO_Init+0x300>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d101      	bne.n	8002342 <HAL_GPIO_Init+0x1f2>
 800233e:	2304      	movs	r3, #4
 8002340:	e008      	b.n	8002354 <HAL_GPIO_Init+0x204>
 8002342:	2307      	movs	r3, #7
 8002344:	e006      	b.n	8002354 <HAL_GPIO_Init+0x204>
 8002346:	2303      	movs	r3, #3
 8002348:	e004      	b.n	8002354 <HAL_GPIO_Init+0x204>
 800234a:	2302      	movs	r3, #2
 800234c:	e002      	b.n	8002354 <HAL_GPIO_Init+0x204>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_GPIO_Init+0x204>
 8002352:	2300      	movs	r3, #0
 8002354:	69fa      	ldr	r2, [r7, #28]
 8002356:	f002 0203 	and.w	r2, r2, #3
 800235a:	0092      	lsls	r2, r2, #2
 800235c:	4093      	lsls	r3, r2
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002364:	4935      	ldr	r1, [pc, #212]	@ (800243c <HAL_GPIO_Init+0x2ec>)
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	3302      	adds	r3, #2
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002372:	4b38      	ldr	r3, [pc, #224]	@ (8002454 <HAL_GPIO_Init+0x304>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002396:	4a2f      	ldr	r2, [pc, #188]	@ (8002454 <HAL_GPIO_Init+0x304>)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800239c:	4b2d      	ldr	r3, [pc, #180]	@ (8002454 <HAL_GPIO_Init+0x304>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023c0:	4a24      	ldr	r2, [pc, #144]	@ (8002454 <HAL_GPIO_Init+0x304>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023c6:	4b23      	ldr	r3, [pc, #140]	@ (8002454 <HAL_GPIO_Init+0x304>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002454 <HAL_GPIO_Init+0x304>)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023f0:	4b18      	ldr	r3, [pc, #96]	@ (8002454 <HAL_GPIO_Init+0x304>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002414:	4a0f      	ldr	r2, [pc, #60]	@ (8002454 <HAL_GPIO_Init+0x304>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3301      	adds	r3, #1
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2b0f      	cmp	r3, #15
 8002424:	f67f aea2 	bls.w	800216c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	3724      	adds	r7, #36	@ 0x24
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800
 800243c:	40013800 	.word	0x40013800
 8002440:	40020000 	.word	0x40020000
 8002444:	40020400 	.word	0x40020400
 8002448:	40020800 	.word	0x40020800
 800244c:	40020c00 	.word	0x40020c00
 8002450:	40021000 	.word	0x40021000
 8002454:	40013c00 	.word	0x40013c00

08002458 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	887b      	ldrh	r3, [r7, #2]
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
 8002474:	e001      	b.n	800247a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002476:	2300      	movs	r3, #0
 8002478:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800247a:	7bfb      	ldrb	r3, [r7, #15]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	807b      	strh	r3, [r7, #2]
 8002494:	4613      	mov	r3, r2
 8002496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002498:	787b      	ldrb	r3, [r7, #1]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024a4:	e003      	b.n	80024ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024a6:	887b      	ldrh	r3, [r7, #2]
 80024a8:	041a      	lsls	r2, r3, #16
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	619a      	str	r2, [r3, #24]
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b085      	sub	sp, #20
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	460b      	mov	r3, r1
 80024c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024cc:	887a      	ldrh	r2, [r7, #2]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4013      	ands	r3, r2
 80024d2:	041a      	lsls	r2, r3, #16
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	43d9      	mvns	r1, r3
 80024d8:	887b      	ldrh	r3, [r7, #2]
 80024da:	400b      	ands	r3, r1
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	619a      	str	r2, [r3, #24]
}
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e267      	b.n	80029d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d075      	beq.n	80025fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800250e:	4b88      	ldr	r3, [pc, #544]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b04      	cmp	r3, #4
 8002518:	d00c      	beq.n	8002534 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800251a:	4b85      	ldr	r3, [pc, #532]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002522:	2b08      	cmp	r3, #8
 8002524:	d112      	bne.n	800254c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002526:	4b82      	ldr	r3, [pc, #520]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800252e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002532:	d10b      	bne.n	800254c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002534:	4b7e      	ldr	r3, [pc, #504]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d05b      	beq.n	80025f8 <HAL_RCC_OscConfig+0x108>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d157      	bne.n	80025f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e242      	b.n	80029d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002554:	d106      	bne.n	8002564 <HAL_RCC_OscConfig+0x74>
 8002556:	4b76      	ldr	r3, [pc, #472]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a75      	ldr	r2, [pc, #468]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e01d      	b.n	80025a0 <HAL_RCC_OscConfig+0xb0>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800256c:	d10c      	bne.n	8002588 <HAL_RCC_OscConfig+0x98>
 800256e:	4b70      	ldr	r3, [pc, #448]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a6f      	ldr	r2, [pc, #444]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 8002574:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b6d      	ldr	r3, [pc, #436]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a6c      	ldr	r2, [pc, #432]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 8002580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e00b      	b.n	80025a0 <HAL_RCC_OscConfig+0xb0>
 8002588:	4b69      	ldr	r3, [pc, #420]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a68      	ldr	r2, [pc, #416]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 800258e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	4b66      	ldr	r3, [pc, #408]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a65      	ldr	r2, [pc, #404]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 800259a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800259e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d013      	beq.n	80025d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7ff fcc0 	bl	8001f2c <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b0:	f7ff fcbc 	bl	8001f2c <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	@ 0x64
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e207      	b.n	80029d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0xc0>
 80025ce:	e014      	b.n	80025fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7ff fcac 	bl	8001f2c <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d8:	f7ff fca8 	bl	8001f2c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b64      	cmp	r3, #100	@ 0x64
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e1f3      	b.n	80029d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ea:	4b51      	ldr	r3, [pc, #324]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0xe8>
 80025f6:	e000      	b.n	80025fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d063      	beq.n	80026ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002606:	4b4a      	ldr	r3, [pc, #296]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00b      	beq.n	800262a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002612:	4b47      	ldr	r3, [pc, #284]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800261a:	2b08      	cmp	r3, #8
 800261c:	d11c      	bne.n	8002658 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800261e:	4b44      	ldr	r3, [pc, #272]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d116      	bne.n	8002658 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262a:	4b41      	ldr	r3, [pc, #260]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <HAL_RCC_OscConfig+0x152>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d001      	beq.n	8002642 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e1c7      	b.n	80029d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002642:	4b3b      	ldr	r3, [pc, #236]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4937      	ldr	r1, [pc, #220]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 8002652:	4313      	orrs	r3, r2
 8002654:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002656:	e03a      	b.n	80026ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d020      	beq.n	80026a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002660:	4b34      	ldr	r3, [pc, #208]	@ (8002734 <HAL_RCC_OscConfig+0x244>)
 8002662:	2201      	movs	r2, #1
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002666:	f7ff fc61 	bl	8001f2c <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800266e:	f7ff fc5d 	bl	8001f2c <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e1a8      	b.n	80029d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002680:	4b2b      	ldr	r3, [pc, #172]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268c:	4b28      	ldr	r3, [pc, #160]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4925      	ldr	r1, [pc, #148]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 800269c:	4313      	orrs	r3, r2
 800269e:	600b      	str	r3, [r1, #0]
 80026a0:	e015      	b.n	80026ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a2:	4b24      	ldr	r3, [pc, #144]	@ (8002734 <HAL_RCC_OscConfig+0x244>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7ff fc40 	bl	8001f2c <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b0:	f7ff fc3c 	bl	8001f2c <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e187      	b.n	80029d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d036      	beq.n	8002748 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d016      	beq.n	8002710 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e2:	4b15      	ldr	r3, [pc, #84]	@ (8002738 <HAL_RCC_OscConfig+0x248>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e8:	f7ff fc20 	bl	8001f2c <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f0:	f7ff fc1c 	bl	8001f2c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e167      	b.n	80029d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002702:	4b0b      	ldr	r3, [pc, #44]	@ (8002730 <HAL_RCC_OscConfig+0x240>)
 8002704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x200>
 800270e:	e01b      	b.n	8002748 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002710:	4b09      	ldr	r3, [pc, #36]	@ (8002738 <HAL_RCC_OscConfig+0x248>)
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002716:	f7ff fc09 	bl	8001f2c <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800271c:	e00e      	b.n	800273c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800271e:	f7ff fc05 	bl	8001f2c <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d907      	bls.n	800273c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e150      	b.n	80029d2 <HAL_RCC_OscConfig+0x4e2>
 8002730:	40023800 	.word	0x40023800
 8002734:	42470000 	.word	0x42470000
 8002738:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273c:	4b88      	ldr	r3, [pc, #544]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 800273e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1ea      	bne.n	800271e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 8097 	beq.w	8002884 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002756:	2300      	movs	r3, #0
 8002758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275a:	4b81      	ldr	r3, [pc, #516]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10f      	bne.n	8002786 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	4b7d      	ldr	r3, [pc, #500]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	4a7c      	ldr	r2, [pc, #496]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 8002770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002774:	6413      	str	r3, [r2, #64]	@ 0x40
 8002776:	4b7a      	ldr	r3, [pc, #488]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002782:	2301      	movs	r3, #1
 8002784:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002786:	4b77      	ldr	r3, [pc, #476]	@ (8002964 <HAL_RCC_OscConfig+0x474>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278e:	2b00      	cmp	r3, #0
 8002790:	d118      	bne.n	80027c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002792:	4b74      	ldr	r3, [pc, #464]	@ (8002964 <HAL_RCC_OscConfig+0x474>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a73      	ldr	r2, [pc, #460]	@ (8002964 <HAL_RCC_OscConfig+0x474>)
 8002798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800279c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800279e:	f7ff fbc5 	bl	8001f2c <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a6:	f7ff fbc1 	bl	8001f2c <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e10c      	b.n	80029d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002964 <HAL_RCC_OscConfig+0x474>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d106      	bne.n	80027da <HAL_RCC_OscConfig+0x2ea>
 80027cc:	4b64      	ldr	r3, [pc, #400]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d0:	4a63      	ldr	r2, [pc, #396]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d8:	e01c      	b.n	8002814 <HAL_RCC_OscConfig+0x324>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b05      	cmp	r3, #5
 80027e0:	d10c      	bne.n	80027fc <HAL_RCC_OscConfig+0x30c>
 80027e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 80027e8:	f043 0304 	orr.w	r3, r3, #4
 80027ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027fa:	e00b      	b.n	8002814 <HAL_RCC_OscConfig+0x324>
 80027fc:	4b58      	ldr	r3, [pc, #352]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002800:	4a57      	ldr	r2, [pc, #348]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 8002802:	f023 0301 	bic.w	r3, r3, #1
 8002806:	6713      	str	r3, [r2, #112]	@ 0x70
 8002808:	4b55      	ldr	r3, [pc, #340]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280c:	4a54      	ldr	r2, [pc, #336]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 800280e:	f023 0304 	bic.w	r3, r3, #4
 8002812:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d015      	beq.n	8002848 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281c:	f7ff fb86 	bl	8001f2c <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002822:	e00a      	b.n	800283a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002824:	f7ff fb82 	bl	8001f2c <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e0cb      	b.n	80029d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283a:	4b49      	ldr	r3, [pc, #292]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0ee      	beq.n	8002824 <HAL_RCC_OscConfig+0x334>
 8002846:	e014      	b.n	8002872 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002848:	f7ff fb70 	bl	8001f2c <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284e:	e00a      	b.n	8002866 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002850:	f7ff fb6c 	bl	8001f2c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e0b5      	b.n	80029d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002866:	4b3e      	ldr	r3, [pc, #248]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1ee      	bne.n	8002850 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002872:	7dfb      	ldrb	r3, [r7, #23]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d105      	bne.n	8002884 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002878:	4b39      	ldr	r3, [pc, #228]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	4a38      	ldr	r2, [pc, #224]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 800287e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002882:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80a1 	beq.w	80029d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800288e:	4b34      	ldr	r3, [pc, #208]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	2b08      	cmp	r3, #8
 8002898:	d05c      	beq.n	8002954 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d141      	bne.n	8002926 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a2:	4b31      	ldr	r3, [pc, #196]	@ (8002968 <HAL_RCC_OscConfig+0x478>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7ff fb40 	bl	8001f2c <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b0:	f7ff fb3c 	bl	8001f2c <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e087      	b.n	80029d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c2:	4b27      	ldr	r3, [pc, #156]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69da      	ldr	r2, [r3, #28]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	019b      	lsls	r3, r3, #6
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e4:	085b      	lsrs	r3, r3, #1
 80028e6:	3b01      	subs	r3, #1
 80028e8:	041b      	lsls	r3, r3, #16
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f0:	061b      	lsls	r3, r3, #24
 80028f2:	491b      	ldr	r1, [pc, #108]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002968 <HAL_RCC_OscConfig+0x478>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fe:	f7ff fb15 	bl	8001f2c <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002906:	f7ff fb11 	bl	8001f2c <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e05c      	b.n	80029d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002918:	4b11      	ldr	r3, [pc, #68]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x416>
 8002924:	e054      	b.n	80029d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002926:	4b10      	ldr	r3, [pc, #64]	@ (8002968 <HAL_RCC_OscConfig+0x478>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7ff fafe 	bl	8001f2c <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7ff fafa 	bl	8001f2c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e045      	b.n	80029d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002946:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <HAL_RCC_OscConfig+0x470>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x444>
 8002952:	e03d      	b.n	80029d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d107      	bne.n	800296c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e038      	b.n	80029d2 <HAL_RCC_OscConfig+0x4e2>
 8002960:	40023800 	.word	0x40023800
 8002964:	40007000 	.word	0x40007000
 8002968:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800296c:	4b1b      	ldr	r3, [pc, #108]	@ (80029dc <HAL_RCC_OscConfig+0x4ec>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d028      	beq.n	80029cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002984:	429a      	cmp	r2, r3
 8002986:	d121      	bne.n	80029cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d11a      	bne.n	80029cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800299c:	4013      	ands	r3, r2
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d111      	bne.n	80029cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b2:	085b      	lsrs	r3, r3, #1
 80029b4:	3b01      	subs	r3, #1
 80029b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d107      	bne.n	80029cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e000      	b.n	80029d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40023800 	.word	0x40023800

080029e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0cc      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029f4:	4b68      	ldr	r3, [pc, #416]	@ (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d90c      	bls.n	8002a1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b65      	ldr	r3, [pc, #404]	@ (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b63      	ldr	r3, [pc, #396]	@ (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0b8      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d020      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a34:	4b59      	ldr	r3, [pc, #356]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4a58      	ldr	r2, [pc, #352]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a4c:	4b53      	ldr	r3, [pc, #332]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4a52      	ldr	r2, [pc, #328]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a58:	4b50      	ldr	r3, [pc, #320]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	494d      	ldr	r1, [pc, #308]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d044      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	4b47      	ldr	r3, [pc, #284]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d119      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e07f      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d003      	beq.n	8002a9e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e06f      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aae:	4b3b      	ldr	r3, [pc, #236]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e067      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002abe:	4b37      	ldr	r3, [pc, #220]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f023 0203 	bic.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4934      	ldr	r1, [pc, #208]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad0:	f7ff fa2c 	bl	8001f2c <HAL_GetTick>
 8002ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad8:	f7ff fa28 	bl	8001f2c <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e04f      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	4b2b      	ldr	r3, [pc, #172]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 020c 	and.w	r2, r3, #12
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d1eb      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b00:	4b25      	ldr	r3, [pc, #148]	@ (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d20c      	bcs.n	8002b28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b22      	ldr	r3, [pc, #136]	@ (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b20      	ldr	r3, [pc, #128]	@ (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e032      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b34:	4b19      	ldr	r3, [pc, #100]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4916      	ldr	r1, [pc, #88]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b52:	4b12      	ldr	r3, [pc, #72]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	490e      	ldr	r1, [pc, #56]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b66:	f000 f821 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	490a      	ldr	r1, [pc, #40]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b78:	5ccb      	ldrb	r3, [r1, r3]
 8002b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7e:	4a09      	ldr	r2, [pc, #36]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b82:	4b09      	ldr	r3, [pc, #36]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff f886 	bl	8001c98 <HAL_InitTick>

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40023c00 	.word	0x40023c00
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	08006de8 	.word	0x08006de8
 8002ba4:	2000001c 	.word	0x2000001c
 8002ba8:	20000020 	.word	0x20000020

08002bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bb0:	b090      	sub	sp, #64	@ 0x40
 8002bb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bc4:	4b59      	ldr	r3, [pc, #356]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 030c 	and.w	r3, r3, #12
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d00d      	beq.n	8002bec <HAL_RCC_GetSysClockFreq+0x40>
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	f200 80a1 	bhi.w	8002d18 <HAL_RCC_GetSysClockFreq+0x16c>
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d003      	beq.n	8002be6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bde:	e09b      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002be0:	4b53      	ldr	r3, [pc, #332]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x184>)
 8002be2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002be4:	e09b      	b.n	8002d1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002be6:	4b53      	ldr	r3, [pc, #332]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002be8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bea:	e098      	b.n	8002d1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bec:	4b4f      	ldr	r3, [pc, #316]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bf4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bf6:	4b4d      	ldr	r3, [pc, #308]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d028      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c02:	4b4a      	ldr	r3, [pc, #296]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	099b      	lsrs	r3, r3, #6
 8002c08:	2200      	movs	r2, #0
 8002c0a:	623b      	str	r3, [r7, #32]
 8002c0c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c14:	2100      	movs	r1, #0
 8002c16:	4b47      	ldr	r3, [pc, #284]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c18:	fb03 f201 	mul.w	r2, r3, r1
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	fb00 f303 	mul.w	r3, r0, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	4a43      	ldr	r2, [pc, #268]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c26:	fba0 1202 	umull	r1, r2, r0, r2
 8002c2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c2c:	460a      	mov	r2, r1
 8002c2e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c32:	4413      	add	r3, r2
 8002c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c38:	2200      	movs	r2, #0
 8002c3a:	61bb      	str	r3, [r7, #24]
 8002c3c:	61fa      	str	r2, [r7, #28]
 8002c3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c46:	f7fd fb1b 	bl	8000280 <__aeabi_uldivmod>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4613      	mov	r3, r2
 8002c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c52:	e053      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c54:	4b35      	ldr	r3, [pc, #212]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	099b      	lsrs	r3, r3, #6
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	617a      	str	r2, [r7, #20]
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c66:	f04f 0b00 	mov.w	fp, #0
 8002c6a:	4652      	mov	r2, sl
 8002c6c:	465b      	mov	r3, fp
 8002c6e:	f04f 0000 	mov.w	r0, #0
 8002c72:	f04f 0100 	mov.w	r1, #0
 8002c76:	0159      	lsls	r1, r3, #5
 8002c78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c7c:	0150      	lsls	r0, r2, #5
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	ebb2 080a 	subs.w	r8, r2, sl
 8002c86:	eb63 090b 	sbc.w	r9, r3, fp
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c9e:	ebb2 0408 	subs.w	r4, r2, r8
 8002ca2:	eb63 0509 	sbc.w	r5, r3, r9
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	00eb      	lsls	r3, r5, #3
 8002cb0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cb4:	00e2      	lsls	r2, r4, #3
 8002cb6:	4614      	mov	r4, r2
 8002cb8:	461d      	mov	r5, r3
 8002cba:	eb14 030a 	adds.w	r3, r4, sl
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	eb45 030b 	adc.w	r3, r5, fp
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	028b      	lsls	r3, r1, #10
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cdc:	4621      	mov	r1, r4
 8002cde:	028a      	lsls	r2, r1, #10
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	60fa      	str	r2, [r7, #12]
 8002cec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cf0:	f7fd fac6 	bl	8000280 <__aeabi_uldivmod>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	0c1b      	lsrs	r3, r3, #16
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	3301      	adds	r3, #1
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002d0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d16:	e002      	b.n	8002d1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d18:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3740      	adds	r7, #64	@ 0x40
 8002d24:	46bd      	mov	sp, r7
 8002d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	00f42400 	.word	0x00f42400
 8002d34:	017d7840 	.word	0x017d7840

08002d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d3c:	4b03      	ldr	r3, [pc, #12]	@ (8002d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	2000001c 	.word	0x2000001c

08002d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d54:	f7ff fff0 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b05      	ldr	r3, [pc, #20]	@ (8002d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	0a9b      	lsrs	r3, r3, #10
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4903      	ldr	r1, [pc, #12]	@ (8002d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40023800 	.word	0x40023800
 8002d74:	08006df8 	.word	0x08006df8

08002d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d7c:	f7ff ffdc 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b05      	ldr	r3, [pc, #20]	@ (8002d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	0b5b      	lsrs	r3, r3, #13
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	4903      	ldr	r1, [pc, #12]	@ (8002d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d8e:	5ccb      	ldrb	r3, [r1, r3]
 8002d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	08006df8 	.word	0x08006df8

08002da0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	220f      	movs	r2, #15
 8002dae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002db0:	4b12      	ldr	r3, [pc, #72]	@ (8002dfc <HAL_RCC_GetClockConfig+0x5c>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0203 	and.w	r2, r3, #3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002dfc <HAL_RCC_GetClockConfig+0x5c>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dfc <HAL_RCC_GetClockConfig+0x5c>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002dd4:	4b09      	ldr	r3, [pc, #36]	@ (8002dfc <HAL_RCC_GetClockConfig+0x5c>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	08db      	lsrs	r3, r3, #3
 8002dda:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002de2:	4b07      	ldr	r3, [pc, #28]	@ (8002e00 <HAL_RCC_GetClockConfig+0x60>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0207 	and.w	r2, r3, #7
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	601a      	str	r2, [r3, #0]
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40023c00 	.word	0x40023c00

08002e04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e07b      	b.n	8002f0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d108      	bne.n	8002e30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e26:	d009      	beq.n	8002e3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	61da      	str	r2, [r3, #28]
 8002e2e:	e005      	b.n	8002e3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fe fdd8 	bl	8001a0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec0:	ea42 0103 	orr.w	r1, r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	0c1b      	lsrs	r3, r3, #16
 8002eda:	f003 0104 	and.w	r1, r3, #4
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee2:	f003 0210 	and.w	r2, r3, #16
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	69da      	ldr	r2, [r3, #28]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002efc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b088      	sub	sp, #32
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	603b      	str	r3, [r7, #0]
 8002f22:	4613      	mov	r3, r2
 8002f24:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f26:	f7ff f801 	bl	8001f2c <HAL_GetTick>
 8002f2a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d001      	beq.n	8002f40 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e12a      	b.n	8003196 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_SPI_Transmit+0x36>
 8002f46:	88fb      	ldrh	r3, [r7, #6]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e122      	b.n	8003196 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_SPI_Transmit+0x48>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e11b      	b.n	8003196 <HAL_SPI_Transmit+0x280>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2203      	movs	r2, #3
 8002f6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	88fa      	ldrh	r2, [r7, #6]
 8002f7e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	88fa      	ldrh	r2, [r7, #6]
 8002f84:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fac:	d10f      	bne.n	8002fce <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fbc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fcc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd8:	2b40      	cmp	r3, #64	@ 0x40
 8002fda:	d007      	beq.n	8002fec <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ff4:	d152      	bne.n	800309c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <HAL_SPI_Transmit+0xee>
 8002ffe:	8b7b      	ldrh	r3, [r7, #26]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d145      	bne.n	8003090 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003008:	881a      	ldrh	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003014:	1c9a      	adds	r2, r3, #2
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003028:	e032      	b.n	8003090 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b02      	cmp	r3, #2
 8003036:	d112      	bne.n	800305e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303c:	881a      	ldrh	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003048:	1c9a      	adds	r2, r3, #2
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003052:	b29b      	uxth	r3, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800305c:	e018      	b.n	8003090 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800305e:	f7fe ff65 	bl	8001f2c <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d803      	bhi.n	8003076 <HAL_SPI_Transmit+0x160>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d102      	bne.n	800307c <HAL_SPI_Transmit+0x166>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d109      	bne.n	8003090 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e082      	b.n	8003196 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1c7      	bne.n	800302a <HAL_SPI_Transmit+0x114>
 800309a:	e053      	b.n	8003144 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HAL_SPI_Transmit+0x194>
 80030a4:	8b7b      	ldrh	r3, [r7, #26]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d147      	bne.n	800313a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	330c      	adds	r3, #12
 80030b4:	7812      	ldrb	r2, [r2, #0]
 80030b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80030d0:	e033      	b.n	800313a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d113      	bne.n	8003108 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	7812      	ldrb	r2, [r2, #0]
 80030ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003106:	e018      	b.n	800313a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003108:	f7fe ff10 	bl	8001f2c <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d803      	bhi.n	8003120 <HAL_SPI_Transmit+0x20a>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	d102      	bne.n	8003126 <HAL_SPI_Transmit+0x210>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e02d      	b.n	8003196 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1c6      	bne.n	80030d2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003144:	69fa      	ldr	r2, [r7, #28]
 8003146:	6839      	ldr	r1, [r7, #0]
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 fbd9 	bl	8003900 <SPI_EndRxTxTransaction>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10a      	bne.n	8003178 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003194:	2300      	movs	r3, #0
  }
}
 8003196:	4618      	mov	r0, r3
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b088      	sub	sp, #32
 80031a2:	af02      	add	r7, sp, #8
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	603b      	str	r3, [r7, #0]
 80031aa:	4613      	mov	r3, r2
 80031ac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d001      	beq.n	80031be <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
 80031bc:	e104      	b.n	80033c8 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <HAL_SPI_Receive+0x2c>
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e0fc      	b.n	80033c8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031d6:	d112      	bne.n	80031fe <HAL_SPI_Receive+0x60>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10e      	bne.n	80031fe <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2204      	movs	r2, #4
 80031e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80031e8:	88fa      	ldrh	r2, [r7, #6]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	4613      	mov	r3, r2
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	68b9      	ldr	r1, [r7, #8]
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f8eb 	bl	80033d0 <HAL_SPI_TransmitReceive>
 80031fa:	4603      	mov	r3, r0
 80031fc:	e0e4      	b.n	80033c8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031fe:	f7fe fe95 	bl	8001f2c <HAL_GetTick>
 8003202:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_SPI_Receive+0x74>
 800320e:	2302      	movs	r3, #2
 8003210:	e0da      	b.n	80033c8 <HAL_SPI_Receive+0x22a>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2204      	movs	r2, #4
 800321e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	88fa      	ldrh	r2, [r7, #6]
 8003232:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	88fa      	ldrh	r2, [r7, #6]
 8003238:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003260:	d10f      	bne.n	8003282 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003270:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003280:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328c:	2b40      	cmp	r3, #64	@ 0x40
 800328e:	d007      	beq.n	80032a0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800329e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d170      	bne.n	800338a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80032a8:	e035      	b.n	8003316 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d115      	bne.n	80032e4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f103 020c 	add.w	r2, r3, #12
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c4:	7812      	ldrb	r2, [r2, #0]
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032e2:	e018      	b.n	8003316 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032e4:	f7fe fe22 	bl	8001f2c <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d803      	bhi.n	80032fc <HAL_SPI_Receive+0x15e>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fa:	d102      	bne.n	8003302 <HAL_SPI_Receive+0x164>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e058      	b.n	80033c8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1c4      	bne.n	80032aa <HAL_SPI_Receive+0x10c>
 8003320:	e038      	b.n	8003394 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b01      	cmp	r3, #1
 800332e:	d113      	bne.n	8003358 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800333a:	b292      	uxth	r2, r2
 800333c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003342:	1c9a      	adds	r2, r3, #2
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003356:	e018      	b.n	800338a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003358:	f7fe fde8 	bl	8001f2c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d803      	bhi.n	8003370 <HAL_SPI_Receive+0x1d2>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336e:	d102      	bne.n	8003376 <HAL_SPI_Receive+0x1d8>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e01e      	b.n	80033c8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1c6      	bne.n	8003322 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	6839      	ldr	r1, [r7, #0]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 fa4b 	bl	8003834 <SPI_EndRxTransaction>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2220      	movs	r2, #32
 80033a8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80033c6:	2300      	movs	r3, #0
  }
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08a      	sub	sp, #40	@ 0x28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
 80033dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033de:	2301      	movs	r3, #1
 80033e0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033e2:	f7fe fda3 	bl	8001f2c <HAL_GetTick>
 80033e6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033ee:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80033f6:	887b      	ldrh	r3, [r7, #2]
 80033f8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033fa:	7ffb      	ldrb	r3, [r7, #31]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d00c      	beq.n	800341a <HAL_SPI_TransmitReceive+0x4a>
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003406:	d106      	bne.n	8003416 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d102      	bne.n	8003416 <HAL_SPI_TransmitReceive+0x46>
 8003410:	7ffb      	ldrb	r3, [r7, #31]
 8003412:	2b04      	cmp	r3, #4
 8003414:	d001      	beq.n	800341a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003416:	2302      	movs	r3, #2
 8003418:	e17f      	b.n	800371a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_SPI_TransmitReceive+0x5c>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <HAL_SPI_TransmitReceive+0x5c>
 8003426:	887b      	ldrh	r3, [r7, #2]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e174      	b.n	800371a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_SPI_TransmitReceive+0x6e>
 800343a:	2302      	movs	r3, #2
 800343c:	e16d      	b.n	800371a <HAL_SPI_TransmitReceive+0x34a>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b04      	cmp	r3, #4
 8003450:	d003      	beq.n	800345a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2205      	movs	r2, #5
 8003456:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	887a      	ldrh	r2, [r7, #2]
 800346a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	887a      	ldrh	r2, [r7, #2]
 8003470:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	887a      	ldrh	r2, [r7, #2]
 800347c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	887a      	ldrh	r2, [r7, #2]
 8003482:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349a:	2b40      	cmp	r3, #64	@ 0x40
 800349c:	d007      	beq.n	80034ae <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034b6:	d17e      	bne.n	80035b6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <HAL_SPI_TransmitReceive+0xf6>
 80034c0:	8afb      	ldrh	r3, [r7, #22]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d16c      	bne.n	80035a0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	881a      	ldrh	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d6:	1c9a      	adds	r2, r3, #2
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034ea:	e059      	b.n	80035a0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d11b      	bne.n	8003532 <HAL_SPI_TransmitReceive+0x162>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d016      	beq.n	8003532 <HAL_SPI_TransmitReceive+0x162>
 8003504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003506:	2b01      	cmp	r3, #1
 8003508:	d113      	bne.n	8003532 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350e:	881a      	ldrh	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351a:	1c9a      	adds	r2, r3, #2
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003524:	b29b      	uxth	r3, r3
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b01      	cmp	r3, #1
 800353e:	d119      	bne.n	8003574 <HAL_SPI_TransmitReceive+0x1a4>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d014      	beq.n	8003574 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003554:	b292      	uxth	r2, r2
 8003556:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355c:	1c9a      	adds	r2, r3, #2
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003570:	2301      	movs	r3, #1
 8003572:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003574:	f7fe fcda 	bl	8001f2c <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003580:	429a      	cmp	r2, r3
 8003582:	d80d      	bhi.n	80035a0 <HAL_SPI_TransmitReceive+0x1d0>
 8003584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358a:	d009      	beq.n	80035a0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e0bc      	b.n	800371a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1a0      	bne.n	80034ec <HAL_SPI_TransmitReceive+0x11c>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d19b      	bne.n	80034ec <HAL_SPI_TransmitReceive+0x11c>
 80035b4:	e082      	b.n	80036bc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_SPI_TransmitReceive+0x1f4>
 80035be:	8afb      	ldrh	r3, [r7, #22]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d171      	bne.n	80036a8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	330c      	adds	r3, #12
 80035ce:	7812      	ldrb	r2, [r2, #0]
 80035d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035ea:	e05d      	b.n	80036a8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d11c      	bne.n	8003634 <HAL_SPI_TransmitReceive+0x264>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d017      	beq.n	8003634 <HAL_SPI_TransmitReceive+0x264>
 8003604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003606:	2b01      	cmp	r3, #1
 8003608:	d114      	bne.n	8003634 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	330c      	adds	r3, #12
 8003614:	7812      	ldrb	r2, [r2, #0]
 8003616:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b01      	cmp	r3, #1
 8003640:	d119      	bne.n	8003676 <HAL_SPI_TransmitReceive+0x2a6>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d014      	beq.n	8003676 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003672:	2301      	movs	r3, #1
 8003674:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003676:	f7fe fc59 	bl	8001f2c <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003682:	429a      	cmp	r2, r3
 8003684:	d803      	bhi.n	800368e <HAL_SPI_TransmitReceive+0x2be>
 8003686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368c:	d102      	bne.n	8003694 <HAL_SPI_TransmitReceive+0x2c4>
 800368e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003690:	2b00      	cmp	r3, #0
 8003692:	d109      	bne.n	80036a8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e038      	b.n	800371a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d19c      	bne.n	80035ec <HAL_SPI_TransmitReceive+0x21c>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d197      	bne.n	80035ec <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036bc:	6a3a      	ldr	r2, [r7, #32]
 80036be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f91d 	bl	8003900 <SPI_EndRxTxTransaction>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e01d      	b.n	800371a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10a      	bne.n	80036fc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003718:	2300      	movs	r3, #0
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	3728      	adds	r7, #40	@ 0x28
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	4613      	mov	r3, r2
 8003732:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003734:	f7fe fbfa 	bl	8001f2c <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	4413      	add	r3, r2
 8003742:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003744:	f7fe fbf2 	bl	8001f2c <HAL_GetTick>
 8003748:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800374a:	4b39      	ldr	r3, [pc, #228]	@ (8003830 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	015b      	lsls	r3, r3, #5
 8003750:	0d1b      	lsrs	r3, r3, #20
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	fb02 f303 	mul.w	r3, r2, r3
 8003758:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800375a:	e055      	b.n	8003808 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003762:	d051      	beq.n	8003808 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003764:	f7fe fbe2 	bl	8001f2c <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	429a      	cmp	r2, r3
 8003772:	d902      	bls.n	800377a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d13d      	bne.n	80037f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003788:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003792:	d111      	bne.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800379c:	d004      	beq.n	80037a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a6:	d107      	bne.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037c0:	d10f      	bne.n	80037e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e018      	b.n	8003828 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d102      	bne.n	8003802 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61fb      	str	r3, [r7, #28]
 8003800:	e002      	b.n	8003808 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	3b01      	subs	r3, #1
 8003806:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	4013      	ands	r3, r2
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	429a      	cmp	r2, r3
 8003816:	bf0c      	ite	eq
 8003818:	2301      	moveq	r3, #1
 800381a:	2300      	movne	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	461a      	mov	r2, r3
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	429a      	cmp	r2, r3
 8003824:	d19a      	bne.n	800375c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3720      	adds	r7, #32
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	2000001c 	.word	0x2000001c

08003834 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003848:	d111      	bne.n	800386e <SPI_EndRxTransaction+0x3a>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003852:	d004      	beq.n	800385e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800385c:	d107      	bne.n	800386e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800386c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003876:	d12a      	bne.n	80038ce <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003880:	d012      	beq.n	80038a8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2200      	movs	r2, #0
 800388a:	2180      	movs	r1, #128	@ 0x80
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f7ff ff49 	bl	8003724 <SPI_WaitFlagStateUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d02d      	beq.n	80038f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800389c:	f043 0220 	orr.w	r2, r3, #32
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e026      	b.n	80038f6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2200      	movs	r2, #0
 80038b0:	2101      	movs	r1, #1
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f7ff ff36 	bl	8003724 <SPI_WaitFlagStateUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d01a      	beq.n	80038f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c2:	f043 0220 	orr.w	r2, r3, #32
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e013      	b.n	80038f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2200      	movs	r2, #0
 80038d6:	2101      	movs	r1, #1
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f7ff ff23 	bl	8003724 <SPI_WaitFlagStateUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d007      	beq.n	80038f4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e000      	b.n	80038f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af02      	add	r7, sp, #8
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2201      	movs	r2, #1
 8003914:	2102      	movs	r1, #2
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f7ff ff04 	bl	8003724 <SPI_WaitFlagStateUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d007      	beq.n	8003932 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003926:	f043 0220 	orr.w	r2, r3, #32
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e032      	b.n	8003998 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003932:	4b1b      	ldr	r3, [pc, #108]	@ (80039a0 <SPI_EndRxTxTransaction+0xa0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1b      	ldr	r2, [pc, #108]	@ (80039a4 <SPI_EndRxTxTransaction+0xa4>)
 8003938:	fba2 2303 	umull	r2, r3, r2, r3
 800393c:	0d5b      	lsrs	r3, r3, #21
 800393e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003950:	d112      	bne.n	8003978 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2200      	movs	r2, #0
 800395a:	2180      	movs	r1, #128	@ 0x80
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f7ff fee1 	bl	8003724 <SPI_WaitFlagStateUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d016      	beq.n	8003996 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396c:	f043 0220 	orr.w	r2, r3, #32
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e00f      	b.n	8003998 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	3b01      	subs	r3, #1
 8003982:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800398e:	2b80      	cmp	r3, #128	@ 0x80
 8003990:	d0f2      	beq.n	8003978 <SPI_EndRxTxTransaction+0x78>
 8003992:	e000      	b.n	8003996 <SPI_EndRxTxTransaction+0x96>
        break;
 8003994:	bf00      	nop
  }

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	2000001c 	.word	0x2000001c
 80039a4:	165e9f81 	.word	0x165e9f81

080039a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e041      	b.n	8003a3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fe f8ba 	bl	8001b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3304      	adds	r3, #4
 80039e4:	4619      	mov	r1, r3
 80039e6:	4610      	mov	r0, r2
 80039e8:	f000 fc32 	bl	8004250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d001      	beq.n	8003a60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e044      	b.n	8003aea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1e      	ldr	r2, [pc, #120]	@ (8003af8 <HAL_TIM_Base_Start_IT+0xb0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d018      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x6c>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a8a:	d013      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x6c>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1a      	ldr	r2, [pc, #104]	@ (8003afc <HAL_TIM_Base_Start_IT+0xb4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00e      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x6c>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a19      	ldr	r2, [pc, #100]	@ (8003b00 <HAL_TIM_Base_Start_IT+0xb8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d009      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x6c>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a17      	ldr	r2, [pc, #92]	@ (8003b04 <HAL_TIM_Base_Start_IT+0xbc>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d004      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x6c>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a16      	ldr	r2, [pc, #88]	@ (8003b08 <HAL_TIM_Base_Start_IT+0xc0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d111      	bne.n	8003ad8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b06      	cmp	r3, #6
 8003ac4:	d010      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0201 	orr.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad6:	e007      	b.n	8003ae8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40010000 	.word	0x40010000
 8003afc:	40000400 	.word	0x40000400
 8003b00:	40000800 	.word	0x40000800
 8003b04:	40000c00 	.word	0x40000c00
 8003b08:	40014000 	.word	0x40014000

08003b0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e041      	b.n	8003ba2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fd ffe8 	bl	8001b08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3304      	adds	r3, #4
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	f000 fb80 	bl	8004250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d109      	bne.n	8003bd0 <HAL_TIM_PWM_Start+0x24>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	bf14      	ite	ne
 8003bc8:	2301      	movne	r3, #1
 8003bca:	2300      	moveq	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	e022      	b.n	8003c16 <HAL_TIM_PWM_Start+0x6a>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d109      	bne.n	8003bea <HAL_TIM_PWM_Start+0x3e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	bf14      	ite	ne
 8003be2:	2301      	movne	r3, #1
 8003be4:	2300      	moveq	r3, #0
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	e015      	b.n	8003c16 <HAL_TIM_PWM_Start+0x6a>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d109      	bne.n	8003c04 <HAL_TIM_PWM_Start+0x58>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	bf14      	ite	ne
 8003bfc:	2301      	movne	r3, #1
 8003bfe:	2300      	moveq	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	e008      	b.n	8003c16 <HAL_TIM_PWM_Start+0x6a>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	bf14      	ite	ne
 8003c10:	2301      	movne	r3, #1
 8003c12:	2300      	moveq	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e068      	b.n	8003cf0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d104      	bne.n	8003c2e <HAL_TIM_PWM_Start+0x82>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c2c:	e013      	b.n	8003c56 <HAL_TIM_PWM_Start+0xaa>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d104      	bne.n	8003c3e <HAL_TIM_PWM_Start+0x92>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c3c:	e00b      	b.n	8003c56 <HAL_TIM_PWM_Start+0xaa>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d104      	bne.n	8003c4e <HAL_TIM_PWM_Start+0xa2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c4c:	e003      	b.n	8003c56 <HAL_TIM_PWM_Start+0xaa>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2202      	movs	r2, #2
 8003c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	6839      	ldr	r1, [r7, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fda2 	bl	80047a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a23      	ldr	r2, [pc, #140]	@ (8003cf8 <HAL_TIM_PWM_Start+0x14c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d107      	bne.n	8003c7e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a1d      	ldr	r2, [pc, #116]	@ (8003cf8 <HAL_TIM_PWM_Start+0x14c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d018      	beq.n	8003cba <HAL_TIM_PWM_Start+0x10e>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c90:	d013      	beq.n	8003cba <HAL_TIM_PWM_Start+0x10e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a19      	ldr	r2, [pc, #100]	@ (8003cfc <HAL_TIM_PWM_Start+0x150>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00e      	beq.n	8003cba <HAL_TIM_PWM_Start+0x10e>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a17      	ldr	r2, [pc, #92]	@ (8003d00 <HAL_TIM_PWM_Start+0x154>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d009      	beq.n	8003cba <HAL_TIM_PWM_Start+0x10e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a16      	ldr	r2, [pc, #88]	@ (8003d04 <HAL_TIM_PWM_Start+0x158>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d004      	beq.n	8003cba <HAL_TIM_PWM_Start+0x10e>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a14      	ldr	r2, [pc, #80]	@ (8003d08 <HAL_TIM_PWM_Start+0x15c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d111      	bne.n	8003cde <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b06      	cmp	r3, #6
 8003cca:	d010      	beq.n	8003cee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cdc:	e007      	b.n	8003cee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0201 	orr.w	r2, r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40010000 	.word	0x40010000
 8003cfc:	40000400 	.word	0x40000400
 8003d00:	40000800 	.word	0x40000800
 8003d04:	40000c00 	.word	0x40000c00
 8003d08:	40014000 	.word	0x40014000

08003d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d020      	beq.n	8003d70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d01b      	beq.n	8003d70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f06f 0202 	mvn.w	r2, #2
 8003d40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fa5b 	bl	8004212 <HAL_TIM_IC_CaptureCallback>
 8003d5c:	e005      	b.n	8003d6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fa4d 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 fa5e 	bl	8004226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d020      	beq.n	8003dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01b      	beq.n	8003dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0204 	mvn.w	r2, #4
 8003d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2202      	movs	r2, #2
 8003d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fa35 	bl	8004212 <HAL_TIM_IC_CaptureCallback>
 8003da8:	e005      	b.n	8003db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fa27 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fa38 	bl	8004226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d020      	beq.n	8003e08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f003 0308 	and.w	r3, r3, #8
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01b      	beq.n	8003e08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f06f 0208 	mvn.w	r2, #8
 8003dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2204      	movs	r2, #4
 8003dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fa0f 	bl	8004212 <HAL_TIM_IC_CaptureCallback>
 8003df4:	e005      	b.n	8003e02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fa01 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 fa12 	bl	8004226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d020      	beq.n	8003e54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01b      	beq.n	8003e54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f06f 0210 	mvn.w	r2, #16
 8003e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2208      	movs	r2, #8
 8003e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f9e9 	bl	8004212 <HAL_TIM_IC_CaptureCallback>
 8003e40:	e005      	b.n	8003e4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f9db 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f9ec 	bl	8004226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00c      	beq.n	8003e78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d007      	beq.n	8003e78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f06f 0201 	mvn.w	r2, #1
 8003e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fd fa4c 	bl	8001310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00c      	beq.n	8003e9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d007      	beq.n	8003e9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fd24 	bl	80048e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00c      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f9bd 	bl	800423a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00c      	beq.n	8003ee4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0220 	mvn.w	r2, #32
 8003edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fcf6 	bl	80048d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f06:	2302      	movs	r3, #2
 8003f08:	e0ae      	b.n	8004068 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b0c      	cmp	r3, #12
 8003f16:	f200 809f 	bhi.w	8004058 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f20:	08003f55 	.word	0x08003f55
 8003f24:	08004059 	.word	0x08004059
 8003f28:	08004059 	.word	0x08004059
 8003f2c:	08004059 	.word	0x08004059
 8003f30:	08003f95 	.word	0x08003f95
 8003f34:	08004059 	.word	0x08004059
 8003f38:	08004059 	.word	0x08004059
 8003f3c:	08004059 	.word	0x08004059
 8003f40:	08003fd7 	.word	0x08003fd7
 8003f44:	08004059 	.word	0x08004059
 8003f48:	08004059 	.word	0x08004059
 8003f4c:	08004059 	.word	0x08004059
 8003f50:	08004017 	.word	0x08004017
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 f9fe 	bl	800435c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699a      	ldr	r2, [r3, #24]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0208 	orr.w	r2, r2, #8
 8003f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0204 	bic.w	r2, r2, #4
 8003f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6999      	ldr	r1, [r3, #24]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	619a      	str	r2, [r3, #24]
      break;
 8003f92:	e064      	b.n	800405e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fa44 	bl	8004428 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699a      	ldr	r2, [r3, #24]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6999      	ldr	r1, [r3, #24]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	021a      	lsls	r2, r3, #8
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	619a      	str	r2, [r3, #24]
      break;
 8003fd4:	e043      	b.n	800405e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68b9      	ldr	r1, [r7, #8]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fa8f 	bl	8004500 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69da      	ldr	r2, [r3, #28]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0208 	orr.w	r2, r2, #8
 8003ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69da      	ldr	r2, [r3, #28]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0204 	bic.w	r2, r2, #4
 8004000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69d9      	ldr	r1, [r3, #28]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	61da      	str	r2, [r3, #28]
      break;
 8004014:	e023      	b.n	800405e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68b9      	ldr	r1, [r7, #8]
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fad9 	bl	80045d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69da      	ldr	r2, [r3, #28]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69d9      	ldr	r1, [r3, #28]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	021a      	lsls	r2, r3, #8
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	61da      	str	r2, [r3, #28]
      break;
 8004056:	e002      	b.n	800405e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	75fb      	strb	r3, [r7, #23]
      break;
 800405c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004066:	7dfb      	ldrb	r3, [r7, #23]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_TIM_ConfigClockSource+0x1c>
 8004088:	2302      	movs	r3, #2
 800408a:	e0b4      	b.n	80041f6 <HAL_TIM_ConfigClockSource+0x186>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040c4:	d03e      	beq.n	8004144 <HAL_TIM_ConfigClockSource+0xd4>
 80040c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ca:	f200 8087 	bhi.w	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 80040ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040d2:	f000 8086 	beq.w	80041e2 <HAL_TIM_ConfigClockSource+0x172>
 80040d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040da:	d87f      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 80040dc:	2b70      	cmp	r3, #112	@ 0x70
 80040de:	d01a      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0xa6>
 80040e0:	2b70      	cmp	r3, #112	@ 0x70
 80040e2:	d87b      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 80040e4:	2b60      	cmp	r3, #96	@ 0x60
 80040e6:	d050      	beq.n	800418a <HAL_TIM_ConfigClockSource+0x11a>
 80040e8:	2b60      	cmp	r3, #96	@ 0x60
 80040ea:	d877      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 80040ec:	2b50      	cmp	r3, #80	@ 0x50
 80040ee:	d03c      	beq.n	800416a <HAL_TIM_ConfigClockSource+0xfa>
 80040f0:	2b50      	cmp	r3, #80	@ 0x50
 80040f2:	d873      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 80040f4:	2b40      	cmp	r3, #64	@ 0x40
 80040f6:	d058      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x13a>
 80040f8:	2b40      	cmp	r3, #64	@ 0x40
 80040fa:	d86f      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 80040fc:	2b30      	cmp	r3, #48	@ 0x30
 80040fe:	d064      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x15a>
 8004100:	2b30      	cmp	r3, #48	@ 0x30
 8004102:	d86b      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 8004104:	2b20      	cmp	r3, #32
 8004106:	d060      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x15a>
 8004108:	2b20      	cmp	r3, #32
 800410a:	d867      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d05c      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x15a>
 8004110:	2b10      	cmp	r3, #16
 8004112:	d05a      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x15a>
 8004114:	e062      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004126:	f000 fb1f 	bl	8004768 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004138:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	609a      	str	r2, [r3, #8]
      break;
 8004142:	e04f      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004154:	f000 fb08 	bl	8004768 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004166:	609a      	str	r2, [r3, #8]
      break;
 8004168:	e03c      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004176:	461a      	mov	r2, r3
 8004178:	f000 fa7c 	bl	8004674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2150      	movs	r1, #80	@ 0x50
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fad5 	bl	8004732 <TIM_ITRx_SetConfig>
      break;
 8004188:	e02c      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004196:	461a      	mov	r2, r3
 8004198:	f000 fa9b 	bl	80046d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2160      	movs	r1, #96	@ 0x60
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fac5 	bl	8004732 <TIM_ITRx_SetConfig>
      break;
 80041a8:	e01c      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041b6:	461a      	mov	r2, r3
 80041b8:	f000 fa5c 	bl	8004674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2140      	movs	r1, #64	@ 0x40
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fab5 	bl	8004732 <TIM_ITRx_SetConfig>
      break;
 80041c8:	e00c      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4619      	mov	r1, r3
 80041d4:	4610      	mov	r0, r2
 80041d6:	f000 faac 	bl	8004732 <TIM_ITRx_SetConfig>
      break;
 80041da:	e003      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
      break;
 80041e0:	e000      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
	...

08004250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a37      	ldr	r2, [pc, #220]	@ (8004340 <TIM_Base_SetConfig+0xf0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00f      	beq.n	8004288 <TIM_Base_SetConfig+0x38>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800426e:	d00b      	beq.n	8004288 <TIM_Base_SetConfig+0x38>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a34      	ldr	r2, [pc, #208]	@ (8004344 <TIM_Base_SetConfig+0xf4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d007      	beq.n	8004288 <TIM_Base_SetConfig+0x38>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a33      	ldr	r2, [pc, #204]	@ (8004348 <TIM_Base_SetConfig+0xf8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d003      	beq.n	8004288 <TIM_Base_SetConfig+0x38>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a32      	ldr	r2, [pc, #200]	@ (800434c <TIM_Base_SetConfig+0xfc>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d108      	bne.n	800429a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800428e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a28      	ldr	r2, [pc, #160]	@ (8004340 <TIM_Base_SetConfig+0xf0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d01b      	beq.n	80042da <TIM_Base_SetConfig+0x8a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042a8:	d017      	beq.n	80042da <TIM_Base_SetConfig+0x8a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a25      	ldr	r2, [pc, #148]	@ (8004344 <TIM_Base_SetConfig+0xf4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <TIM_Base_SetConfig+0x8a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a24      	ldr	r2, [pc, #144]	@ (8004348 <TIM_Base_SetConfig+0xf8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00f      	beq.n	80042da <TIM_Base_SetConfig+0x8a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a23      	ldr	r2, [pc, #140]	@ (800434c <TIM_Base_SetConfig+0xfc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00b      	beq.n	80042da <TIM_Base_SetConfig+0x8a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a22      	ldr	r2, [pc, #136]	@ (8004350 <TIM_Base_SetConfig+0x100>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d007      	beq.n	80042da <TIM_Base_SetConfig+0x8a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a21      	ldr	r2, [pc, #132]	@ (8004354 <TIM_Base_SetConfig+0x104>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d003      	beq.n	80042da <TIM_Base_SetConfig+0x8a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a20      	ldr	r2, [pc, #128]	@ (8004358 <TIM_Base_SetConfig+0x108>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d108      	bne.n	80042ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a0c      	ldr	r2, [pc, #48]	@ (8004340 <TIM_Base_SetConfig+0xf0>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d103      	bne.n	800431a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	691a      	ldr	r2, [r3, #16]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f043 0204 	orr.w	r2, r3, #4
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	601a      	str	r2, [r3, #0]
}
 8004332:	bf00      	nop
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40010000 	.word	0x40010000
 8004344:	40000400 	.word	0x40000400
 8004348:	40000800 	.word	0x40000800
 800434c:	40000c00 	.word	0x40000c00
 8004350:	40014000 	.word	0x40014000
 8004354:	40014400 	.word	0x40014400
 8004358:	40014800 	.word	0x40014800

0800435c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	f023 0201 	bic.w	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800438a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0303 	bic.w	r3, r3, #3
 8004392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f023 0302 	bic.w	r3, r3, #2
 80043a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004424 <TIM_OC1_SetConfig+0xc8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d10c      	bne.n	80043d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f023 0308 	bic.w	r3, r3, #8
 80043be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f023 0304 	bic.w	r3, r3, #4
 80043d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a13      	ldr	r2, [pc, #76]	@ (8004424 <TIM_OC1_SetConfig+0xc8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d111      	bne.n	80043fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	621a      	str	r2, [r3, #32]
}
 8004418:	bf00      	nop
 800441a:	371c      	adds	r7, #28
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	40010000 	.word	0x40010000

08004428 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	f023 0210 	bic.w	r2, r3, #16
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800445e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	021b      	lsls	r3, r3, #8
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f023 0320 	bic.w	r3, r3, #32
 8004472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a1e      	ldr	r2, [pc, #120]	@ (80044fc <TIM_OC2_SetConfig+0xd4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d10d      	bne.n	80044a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800448e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a15      	ldr	r2, [pc, #84]	@ (80044fc <TIM_OC2_SetConfig+0xd4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d113      	bne.n	80044d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	621a      	str	r2, [r3, #32]
}
 80044ee:	bf00      	nop
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40010000 	.word	0x40010000

08004500 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800452e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0303 	bic.w	r3, r3, #3
 8004536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004548:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	021b      	lsls	r3, r3, #8
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a1d      	ldr	r2, [pc, #116]	@ (80045d0 <TIM_OC3_SetConfig+0xd0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d10d      	bne.n	800457a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004564:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	4313      	orrs	r3, r2
 8004570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a14      	ldr	r2, [pc, #80]	@ (80045d0 <TIM_OC3_SetConfig+0xd0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d113      	bne.n	80045aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	621a      	str	r2, [r3, #32]
}
 80045c4:	bf00      	nop
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	40010000 	.word	0x40010000

080045d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800460a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	021b      	lsls	r3, r3, #8
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800461e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	031b      	lsls	r3, r3, #12
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a10      	ldr	r2, [pc, #64]	@ (8004670 <TIM_OC4_SetConfig+0x9c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d109      	bne.n	8004648 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800463a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	019b      	lsls	r3, r3, #6
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	621a      	str	r2, [r3, #32]
}
 8004662:	bf00      	nop
 8004664:	371c      	adds	r7, #28
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40010000 	.word	0x40010000

08004674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	f023 0201 	bic.w	r2, r3, #1
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800469e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f023 030a 	bic.w	r3, r3, #10
 80046b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b087      	sub	sp, #28
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f023 0210 	bic.w	r2, r3, #16
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	031b      	lsls	r3, r3, #12
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800470e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	4313      	orrs	r3, r2
 8004718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	621a      	str	r2, [r3, #32]
}
 8004726:	bf00      	nop
 8004728:	371c      	adds	r7, #28
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004732:	b480      	push	{r7}
 8004734:	b085      	sub	sp, #20
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004748:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	f043 0307 	orr.w	r3, r3, #7
 8004754:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	609a      	str	r2, [r3, #8]
}
 800475c:	bf00      	nop
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004782:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	021a      	lsls	r2, r3, #8
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	431a      	orrs	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4313      	orrs	r3, r2
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	609a      	str	r2, [r3, #8]
}
 800479c:	bf00      	nop
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f003 031f 	and.w	r3, r3, #31
 80047ba:	2201      	movs	r2, #1
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6a1a      	ldr	r2, [r3, #32]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	43db      	mvns	r3, r3
 80047ca:	401a      	ands	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6a1a      	ldr	r2, [r3, #32]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f003 031f 	and.w	r3, r3, #31
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	fa01 f303 	lsl.w	r3, r1, r3
 80047e0:	431a      	orrs	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	621a      	str	r2, [r3, #32]
}
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
	...

080047f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004808:	2302      	movs	r3, #2
 800480a:	e050      	b.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004832:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1c      	ldr	r2, [pc, #112]	@ (80048bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d018      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004858:	d013      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a18      	ldr	r2, [pc, #96]	@ (80048c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00e      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a16      	ldr	r2, [pc, #88]	@ (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d009      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a15      	ldr	r2, [pc, #84]	@ (80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d004      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a13      	ldr	r2, [pc, #76]	@ (80048cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d10c      	bne.n	800489c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	4313      	orrs	r3, r2
 8004892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40010000 	.word	0x40010000
 80048c0:	40000400 	.word	0x40000400
 80048c4:	40000800 	.word	0x40000800
 80048c8:	40000c00 	.word	0x40000c00
 80048cc:	40014000 	.word	0x40014000

080048d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e042      	b.n	8004990 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d106      	bne.n	8004924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fd f972 	bl	8001c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2224      	movs	r2, #36	@ 0x24
 8004928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800493a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f82b 	bl	8004998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004950:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695a      	ldr	r2, [r3, #20]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004960:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68da      	ldr	r2, [r3, #12]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004970:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800499c:	b0c0      	sub	sp, #256	@ 0x100
 800499e:	af00      	add	r7, sp, #0
 80049a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b4:	68d9      	ldr	r1, [r3, #12]
 80049b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	ea40 0301 	orr.w	r3, r0, r1
 80049c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80049f0:	f021 010c 	bic.w	r1, r1, #12
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049fe:	430b      	orrs	r3, r1
 8004a00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a12:	6999      	ldr	r1, [r3, #24]
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	ea40 0301 	orr.w	r3, r0, r1
 8004a1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b8f      	ldr	r3, [pc, #572]	@ (8004c64 <UART_SetConfig+0x2cc>)
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d005      	beq.n	8004a38 <UART_SetConfig+0xa0>
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	4b8d      	ldr	r3, [pc, #564]	@ (8004c68 <UART_SetConfig+0x2d0>)
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d104      	bne.n	8004a42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a38:	f7fe f99e 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 8004a3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a40:	e003      	b.n	8004a4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a42:	f7fe f985 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8004a46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a54:	f040 810c 	bne.w	8004c70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	462b      	mov	r3, r5
 8004a6e:	1891      	adds	r1, r2, r2
 8004a70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a72:	415b      	adcs	r3, r3
 8004a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	eb12 0801 	adds.w	r8, r2, r1
 8004a80:	4629      	mov	r1, r5
 8004a82:	eb43 0901 	adc.w	r9, r3, r1
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a9a:	4690      	mov	r8, r2
 8004a9c:	4699      	mov	r9, r3
 8004a9e:	4623      	mov	r3, r4
 8004aa0:	eb18 0303 	adds.w	r3, r8, r3
 8004aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004aa8:	462b      	mov	r3, r5
 8004aaa:	eb49 0303 	adc.w	r3, r9, r3
 8004aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004abe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ac2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	18db      	adds	r3, r3, r3
 8004aca:	653b      	str	r3, [r7, #80]	@ 0x50
 8004acc:	4613      	mov	r3, r2
 8004ace:	eb42 0303 	adc.w	r3, r2, r3
 8004ad2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ad4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ad8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004adc:	f7fb fbd0 	bl	8000280 <__aeabi_uldivmod>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4b61      	ldr	r3, [pc, #388]	@ (8004c6c <UART_SetConfig+0x2d4>)
 8004ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	011c      	lsls	r4, r3, #4
 8004aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004af2:	2200      	movs	r2, #0
 8004af4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004af8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004afc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b00:	4642      	mov	r2, r8
 8004b02:	464b      	mov	r3, r9
 8004b04:	1891      	adds	r1, r2, r2
 8004b06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b08:	415b      	adcs	r3, r3
 8004b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b10:	4641      	mov	r1, r8
 8004b12:	eb12 0a01 	adds.w	sl, r2, r1
 8004b16:	4649      	mov	r1, r9
 8004b18:	eb43 0b01 	adc.w	fp, r3, r1
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b30:	4692      	mov	sl, r2
 8004b32:	469b      	mov	fp, r3
 8004b34:	4643      	mov	r3, r8
 8004b36:	eb1a 0303 	adds.w	r3, sl, r3
 8004b3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b3e:	464b      	mov	r3, r9
 8004b40:	eb4b 0303 	adc.w	r3, fp, r3
 8004b44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	18db      	adds	r3, r3, r3
 8004b60:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b62:	4613      	mov	r3, r2
 8004b64:	eb42 0303 	adc.w	r3, r2, r3
 8004b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b72:	f7fb fb85 	bl	8000280 <__aeabi_uldivmod>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8004c6c <UART_SetConfig+0x2d4>)
 8004b7e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	2264      	movs	r2, #100	@ 0x64
 8004b86:	fb02 f303 	mul.w	r3, r2, r3
 8004b8a:	1acb      	subs	r3, r1, r3
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b92:	4b36      	ldr	r3, [pc, #216]	@ (8004c6c <UART_SetConfig+0x2d4>)
 8004b94:	fba3 2302 	umull	r2, r3, r3, r2
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ba0:	441c      	add	r4, r3
 8004ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004bb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	464b      	mov	r3, r9
 8004bb8:	1891      	adds	r1, r2, r2
 8004bba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004bbc:	415b      	adcs	r3, r3
 8004bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004bc4:	4641      	mov	r1, r8
 8004bc6:	1851      	adds	r1, r2, r1
 8004bc8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004bca:	4649      	mov	r1, r9
 8004bcc:	414b      	adcs	r3, r1
 8004bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004bdc:	4659      	mov	r1, fp
 8004bde:	00cb      	lsls	r3, r1, #3
 8004be0:	4651      	mov	r1, sl
 8004be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004be6:	4651      	mov	r1, sl
 8004be8:	00ca      	lsls	r2, r1, #3
 8004bea:	4610      	mov	r0, r2
 8004bec:	4619      	mov	r1, r3
 8004bee:	4603      	mov	r3, r0
 8004bf0:	4642      	mov	r2, r8
 8004bf2:	189b      	adds	r3, r3, r2
 8004bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bf8:	464b      	mov	r3, r9
 8004bfa:	460a      	mov	r2, r1
 8004bfc:	eb42 0303 	adc.w	r3, r2, r3
 8004c00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c18:	460b      	mov	r3, r1
 8004c1a:	18db      	adds	r3, r3, r3
 8004c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c1e:	4613      	mov	r3, r2
 8004c20:	eb42 0303 	adc.w	r3, r2, r3
 8004c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c2e:	f7fb fb27 	bl	8000280 <__aeabi_uldivmod>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	4b0d      	ldr	r3, [pc, #52]	@ (8004c6c <UART_SetConfig+0x2d4>)
 8004c38:	fba3 1302 	umull	r1, r3, r3, r2
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	2164      	movs	r1, #100	@ 0x64
 8004c40:	fb01 f303 	mul.w	r3, r1, r3
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	3332      	adds	r3, #50	@ 0x32
 8004c4a:	4a08      	ldr	r2, [pc, #32]	@ (8004c6c <UART_SetConfig+0x2d4>)
 8004c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c50:	095b      	lsrs	r3, r3, #5
 8004c52:	f003 0207 	and.w	r2, r3, #7
 8004c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4422      	add	r2, r4
 8004c5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c60:	e106      	b.n	8004e70 <UART_SetConfig+0x4d8>
 8004c62:	bf00      	nop
 8004c64:	40011000 	.word	0x40011000
 8004c68:	40011400 	.word	0x40011400
 8004c6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c74:	2200      	movs	r2, #0
 8004c76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c82:	4642      	mov	r2, r8
 8004c84:	464b      	mov	r3, r9
 8004c86:	1891      	adds	r1, r2, r2
 8004c88:	6239      	str	r1, [r7, #32]
 8004c8a:	415b      	adcs	r3, r3
 8004c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c92:	4641      	mov	r1, r8
 8004c94:	1854      	adds	r4, r2, r1
 8004c96:	4649      	mov	r1, r9
 8004c98:	eb43 0501 	adc.w	r5, r3, r1
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	00eb      	lsls	r3, r5, #3
 8004ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004caa:	00e2      	lsls	r2, r4, #3
 8004cac:	4614      	mov	r4, r2
 8004cae:	461d      	mov	r5, r3
 8004cb0:	4643      	mov	r3, r8
 8004cb2:	18e3      	adds	r3, r4, r3
 8004cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cb8:	464b      	mov	r3, r9
 8004cba:	eb45 0303 	adc.w	r3, r5, r3
 8004cbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004cde:	4629      	mov	r1, r5
 8004ce0:	008b      	lsls	r3, r1, #2
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ce8:	4621      	mov	r1, r4
 8004cea:	008a      	lsls	r2, r1, #2
 8004cec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004cf0:	f7fb fac6 	bl	8000280 <__aeabi_uldivmod>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4b60      	ldr	r3, [pc, #384]	@ (8004e7c <UART_SetConfig+0x4e4>)
 8004cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	011c      	lsls	r4, r3, #4
 8004d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d14:	4642      	mov	r2, r8
 8004d16:	464b      	mov	r3, r9
 8004d18:	1891      	adds	r1, r2, r2
 8004d1a:	61b9      	str	r1, [r7, #24]
 8004d1c:	415b      	adcs	r3, r3
 8004d1e:	61fb      	str	r3, [r7, #28]
 8004d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d24:	4641      	mov	r1, r8
 8004d26:	1851      	adds	r1, r2, r1
 8004d28:	6139      	str	r1, [r7, #16]
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	414b      	adcs	r3, r1
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d3c:	4659      	mov	r1, fp
 8004d3e:	00cb      	lsls	r3, r1, #3
 8004d40:	4651      	mov	r1, sl
 8004d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d46:	4651      	mov	r1, sl
 8004d48:	00ca      	lsls	r2, r1, #3
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4603      	mov	r3, r0
 8004d50:	4642      	mov	r2, r8
 8004d52:	189b      	adds	r3, r3, r2
 8004d54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d58:	464b      	mov	r3, r9
 8004d5a:	460a      	mov	r2, r1
 8004d5c:	eb42 0303 	adc.w	r3, r2, r3
 8004d60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d7c:	4649      	mov	r1, r9
 8004d7e:	008b      	lsls	r3, r1, #2
 8004d80:	4641      	mov	r1, r8
 8004d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d86:	4641      	mov	r1, r8
 8004d88:	008a      	lsls	r2, r1, #2
 8004d8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d8e:	f7fb fa77 	bl	8000280 <__aeabi_uldivmod>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4611      	mov	r1, r2
 8004d98:	4b38      	ldr	r3, [pc, #224]	@ (8004e7c <UART_SetConfig+0x4e4>)
 8004d9a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	2264      	movs	r2, #100	@ 0x64
 8004da2:	fb02 f303 	mul.w	r3, r2, r3
 8004da6:	1acb      	subs	r3, r1, r3
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	3332      	adds	r3, #50	@ 0x32
 8004dac:	4a33      	ldr	r2, [pc, #204]	@ (8004e7c <UART_SetConfig+0x4e4>)
 8004dae:	fba2 2303 	umull	r2, r3, r2, r3
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004db8:	441c      	add	r4, r3
 8004dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004dc2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004dc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004dc8:	4642      	mov	r2, r8
 8004dca:	464b      	mov	r3, r9
 8004dcc:	1891      	adds	r1, r2, r2
 8004dce:	60b9      	str	r1, [r7, #8]
 8004dd0:	415b      	adcs	r3, r3
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dd8:	4641      	mov	r1, r8
 8004dda:	1851      	adds	r1, r2, r1
 8004ddc:	6039      	str	r1, [r7, #0]
 8004dde:	4649      	mov	r1, r9
 8004de0:	414b      	adcs	r3, r1
 8004de2:	607b      	str	r3, [r7, #4]
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004df0:	4659      	mov	r1, fp
 8004df2:	00cb      	lsls	r3, r1, #3
 8004df4:	4651      	mov	r1, sl
 8004df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	00ca      	lsls	r2, r1, #3
 8004dfe:	4610      	mov	r0, r2
 8004e00:	4619      	mov	r1, r3
 8004e02:	4603      	mov	r3, r0
 8004e04:	4642      	mov	r2, r8
 8004e06:	189b      	adds	r3, r3, r2
 8004e08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e0a:	464b      	mov	r3, r9
 8004e0c:	460a      	mov	r2, r1
 8004e0e:	eb42 0303 	adc.w	r3, r2, r3
 8004e12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e2c:	4649      	mov	r1, r9
 8004e2e:	008b      	lsls	r3, r1, #2
 8004e30:	4641      	mov	r1, r8
 8004e32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e36:	4641      	mov	r1, r8
 8004e38:	008a      	lsls	r2, r1, #2
 8004e3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e3e:	f7fb fa1f 	bl	8000280 <__aeabi_uldivmod>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4b0d      	ldr	r3, [pc, #52]	@ (8004e7c <UART_SetConfig+0x4e4>)
 8004e48:	fba3 1302 	umull	r1, r3, r3, r2
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	2164      	movs	r1, #100	@ 0x64
 8004e50:	fb01 f303 	mul.w	r3, r1, r3
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	3332      	adds	r3, #50	@ 0x32
 8004e5a:	4a08      	ldr	r2, [pc, #32]	@ (8004e7c <UART_SetConfig+0x4e4>)
 8004e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e60:	095b      	lsrs	r3, r3, #5
 8004e62:	f003 020f 	and.w	r2, r3, #15
 8004e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4422      	add	r2, r4
 8004e6e:	609a      	str	r2, [r3, #8]
}
 8004e70:	bf00      	nop
 8004e72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e76:	46bd      	mov	sp, r7
 8004e78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e7c:	51eb851f 	.word	0x51eb851f

08004e80 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	4603      	mov	r3, r0
 8004e88:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e92:	2b84      	cmp	r3, #132	@ 0x84
 8004e94:	d005      	beq.n	8004ea2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004e96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	3303      	adds	r3, #3
 8004ea0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004eb4:	f000 fafc 	bl	80054b0 <vTaskStartScheduler>
  
  return osOK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ec0:	b089      	sub	sp, #36	@ 0x24
 8004ec2:	af04      	add	r7, sp, #16
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d020      	beq.n	8004f12 <osThreadCreate+0x54>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d01c      	beq.n	8004f12 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685c      	ldr	r4, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691e      	ldr	r6, [r3, #16]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff ffc8 	bl	8004e80 <makeFreeRtosPriority>
 8004ef0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004efa:	9202      	str	r2, [sp, #8]
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	9100      	str	r1, [sp, #0]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	4632      	mov	r2, r6
 8004f04:	4629      	mov	r1, r5
 8004f06:	4620      	mov	r0, r4
 8004f08:	f000 f8ed 	bl	80050e6 <xTaskCreateStatic>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	e01c      	b.n	8004f4c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685c      	ldr	r4, [r3, #4]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f1e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff ffaa 	bl	8004e80 <makeFreeRtosPriority>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	f107 030c 	add.w	r3, r7, #12
 8004f32:	9301      	str	r3, [sp, #4]
 8004f34:	9200      	str	r2, [sp, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	4632      	mov	r2, r6
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f000 f932 	bl	80051a6 <xTaskCreate>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d001      	beq.n	8004f4c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	e000      	b.n	8004f4e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f56 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b084      	sub	sp, #16
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <osDelay+0x16>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	e000      	b.n	8004f6e <osDelay+0x18>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fa68 	bl	8005444 <vTaskDelay>
  
  return osOK;
 8004f74:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f103 0208 	add.w	r2, r3, #8
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f04f 32ff 	mov.w	r2, #4294967295
 8004f96:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f103 0208 	add.w	r2, r3, #8
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f103 0208 	add.w	r2, r3, #8
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	601a      	str	r2, [r3, #0]
}
 8005014:	bf00      	nop
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d103      	bne.n	8005040 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	e00c      	b.n	800505a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3308      	adds	r3, #8
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	e002      	b.n	800504e <vListInsert+0x2e>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	429a      	cmp	r2, r3
 8005058:	d2f6      	bcs.n	8005048 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	601a      	str	r2, [r3, #0]
}
 8005086:	bf00      	nop
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005092:	b480      	push	{r7}
 8005094:	b085      	sub	sp, #20
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6892      	ldr	r2, [r2, #8]
 80050a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6852      	ldr	r2, [r2, #4]
 80050b2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d103      	bne.n	80050c6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	1e5a      	subs	r2, r3, #1
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b08e      	sub	sp, #56	@ 0x38
 80050ea:	af04      	add	r7, sp, #16
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	607a      	str	r2, [r7, #4]
 80050f2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10b      	bne.n	8005112 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800510c:	bf00      	nop
 800510e:	bf00      	nop
 8005110:	e7fd      	b.n	800510e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10b      	bne.n	8005130 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511c:	f383 8811 	msr	BASEPRI, r3
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	61fb      	str	r3, [r7, #28]
}
 800512a:	bf00      	nop
 800512c:	bf00      	nop
 800512e:	e7fd      	b.n	800512c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005130:	23a0      	movs	r3, #160	@ 0xa0
 8005132:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	2ba0      	cmp	r3, #160	@ 0xa0
 8005138:	d00b      	beq.n	8005152 <xTaskCreateStatic+0x6c>
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	61bb      	str	r3, [r7, #24]
}
 800514c:	bf00      	nop
 800514e:	bf00      	nop
 8005150:	e7fd      	b.n	800514e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005152:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005156:	2b00      	cmp	r3, #0
 8005158:	d01e      	beq.n	8005198 <xTaskCreateStatic+0xb2>
 800515a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01b      	beq.n	8005198 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005162:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005168:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	2202      	movs	r2, #2
 800516e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005172:	2300      	movs	r3, #0
 8005174:	9303      	str	r3, [sp, #12]
 8005176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005178:	9302      	str	r3, [sp, #8]
 800517a:	f107 0314 	add.w	r3, r7, #20
 800517e:	9301      	str	r3, [sp, #4]
 8005180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	68b9      	ldr	r1, [r7, #8]
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 f850 	bl	8005230 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005190:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005192:	f000 f8ed 	bl	8005370 <prvAddNewTaskToReadyList>
 8005196:	e001      	b.n	800519c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800519c:	697b      	ldr	r3, [r7, #20]
	}
 800519e:	4618      	mov	r0, r3
 80051a0:	3728      	adds	r7, #40	@ 0x28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b08c      	sub	sp, #48	@ 0x30
 80051aa:	af04      	add	r7, sp, #16
 80051ac:	60f8      	str	r0, [r7, #12]
 80051ae:	60b9      	str	r1, [r7, #8]
 80051b0:	603b      	str	r3, [r7, #0]
 80051b2:	4613      	mov	r3, r2
 80051b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80051b6:	88fb      	ldrh	r3, [r7, #6]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fefc 	bl	8005fb8 <pvPortMalloc>
 80051c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00e      	beq.n	80051e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051c8:	20a0      	movs	r0, #160	@ 0xa0
 80051ca:	f000 fef5 	bl	8005fb8 <pvPortMalloc>
 80051ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	631a      	str	r2, [r3, #48]	@ 0x30
 80051dc:	e005      	b.n	80051ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051de:	6978      	ldr	r0, [r7, #20]
 80051e0:	f000 ffb8 	bl	8006154 <vPortFree>
 80051e4:	e001      	b.n	80051ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d017      	beq.n	8005220 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051f8:	88fa      	ldrh	r2, [r7, #6]
 80051fa:	2300      	movs	r3, #0
 80051fc:	9303      	str	r3, [sp, #12]
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	9302      	str	r3, [sp, #8]
 8005202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005204:	9301      	str	r3, [sp, #4]
 8005206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 f80e 	bl	8005230 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005214:	69f8      	ldr	r0, [r7, #28]
 8005216:	f000 f8ab 	bl	8005370 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800521a:	2301      	movs	r3, #1
 800521c:	61bb      	str	r3, [r7, #24]
 800521e:	e002      	b.n	8005226 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005220:	f04f 33ff 	mov.w	r3, #4294967295
 8005224:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005226:	69bb      	ldr	r3, [r7, #24]
	}
 8005228:	4618      	mov	r0, r3
 800522a:	3720      	adds	r7, #32
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800523e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005240:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005248:	3b01      	subs	r3, #1
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	f023 0307 	bic.w	r3, r3, #7
 8005256:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00b      	beq.n	800527a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	617b      	str	r3, [r7, #20]
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop
 8005278:	e7fd      	b.n	8005276 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01f      	beq.n	80052c0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005280:	2300      	movs	r3, #0
 8005282:	61fb      	str	r3, [r7, #28]
 8005284:	e012      	b.n	80052ac <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	4413      	add	r3, r2
 800528c:	7819      	ldrb	r1, [r3, #0]
 800528e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	4413      	add	r3, r2
 8005294:	3334      	adds	r3, #52	@ 0x34
 8005296:	460a      	mov	r2, r1
 8005298:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	4413      	add	r3, r2
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d006      	beq.n	80052b4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	3301      	adds	r3, #1
 80052aa:	61fb      	str	r3, [r7, #28]
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	2b0f      	cmp	r3, #15
 80052b0:	d9e9      	bls.n	8005286 <prvInitialiseNewTask+0x56>
 80052b2:	e000      	b.n	80052b6 <prvInitialiseNewTask+0x86>
			{
				break;
 80052b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052be:	e003      	b.n	80052c8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ca:	2b06      	cmp	r3, #6
 80052cc:	d901      	bls.n	80052d2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052ce:	2306      	movs	r3, #6
 80052d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052dc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80052de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e0:	2200      	movs	r2, #0
 80052e2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e6:	3304      	adds	r3, #4
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7ff fe68 	bl	8004fbe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f0:	3318      	adds	r3, #24
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fe63 	bl	8004fbe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005300:	f1c3 0207 	rsb	r2, r3, #7
 8005304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005306:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800530c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800530e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005310:	2200      	movs	r2, #0
 8005312:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005318:	2200      	movs	r2, #0
 800531a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800531e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005320:	334c      	adds	r3, #76	@ 0x4c
 8005322:	224c      	movs	r2, #76	@ 0x4c
 8005324:	2100      	movs	r1, #0
 8005326:	4618      	mov	r0, r3
 8005328:	f001 f856 	bl	80063d8 <memset>
 800532c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532e:	4a0d      	ldr	r2, [pc, #52]	@ (8005364 <prvInitialiseNewTask+0x134>)
 8005330:	651a      	str	r2, [r3, #80]	@ 0x50
 8005332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005334:	4a0c      	ldr	r2, [pc, #48]	@ (8005368 <prvInitialiseNewTask+0x138>)
 8005336:	655a      	str	r2, [r3, #84]	@ 0x54
 8005338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533a:	4a0c      	ldr	r2, [pc, #48]	@ (800536c <prvInitialiseNewTask+0x13c>)
 800533c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	68f9      	ldr	r1, [r7, #12]
 8005342:	69b8      	ldr	r0, [r7, #24]
 8005344:	f000 fc2a 	bl	8005b9c <pxPortInitialiseStack>
 8005348:	4602      	mov	r2, r0
 800534a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800534e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005358:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800535a:	bf00      	nop
 800535c:	3720      	adds	r7, #32
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20004564 	.word	0x20004564
 8005368:	200045cc 	.word	0x200045cc
 800536c:	20004634 	.word	0x20004634

08005370 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005378:	f000 fd3e 	bl	8005df8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800537c:	4b2a      	ldr	r3, [pc, #168]	@ (8005428 <prvAddNewTaskToReadyList+0xb8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3301      	adds	r3, #1
 8005382:	4a29      	ldr	r2, [pc, #164]	@ (8005428 <prvAddNewTaskToReadyList+0xb8>)
 8005384:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005386:	4b29      	ldr	r3, [pc, #164]	@ (800542c <prvAddNewTaskToReadyList+0xbc>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800538e:	4a27      	ldr	r2, [pc, #156]	@ (800542c <prvAddNewTaskToReadyList+0xbc>)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005394:	4b24      	ldr	r3, [pc, #144]	@ (8005428 <prvAddNewTaskToReadyList+0xb8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d110      	bne.n	80053be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800539c:	f000 fad4 	bl	8005948 <prvInitialiseTaskLists>
 80053a0:	e00d      	b.n	80053be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053a2:	4b23      	ldr	r3, [pc, #140]	@ (8005430 <prvAddNewTaskToReadyList+0xc0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d109      	bne.n	80053be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053aa:	4b20      	ldr	r3, [pc, #128]	@ (800542c <prvAddNewTaskToReadyList+0xbc>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d802      	bhi.n	80053be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053b8:	4a1c      	ldr	r2, [pc, #112]	@ (800542c <prvAddNewTaskToReadyList+0xbc>)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053be:	4b1d      	ldr	r3, [pc, #116]	@ (8005434 <prvAddNewTaskToReadyList+0xc4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3301      	adds	r3, #1
 80053c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005434 <prvAddNewTaskToReadyList+0xc4>)
 80053c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053cc:	2201      	movs	r2, #1
 80053ce:	409a      	lsls	r2, r3
 80053d0:	4b19      	ldr	r3, [pc, #100]	@ (8005438 <prvAddNewTaskToReadyList+0xc8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	4a18      	ldr	r2, [pc, #96]	@ (8005438 <prvAddNewTaskToReadyList+0xc8>)
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053de:	4613      	mov	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4a15      	ldr	r2, [pc, #84]	@ (800543c <prvAddNewTaskToReadyList+0xcc>)
 80053e8:	441a      	add	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3304      	adds	r3, #4
 80053ee:	4619      	mov	r1, r3
 80053f0:	4610      	mov	r0, r2
 80053f2:	f7ff fdf1 	bl	8004fd8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053f6:	f000 fd31 	bl	8005e5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005430 <prvAddNewTaskToReadyList+0xc0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00e      	beq.n	8005420 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005402:	4b0a      	ldr	r3, [pc, #40]	@ (800542c <prvAddNewTaskToReadyList+0xbc>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540c:	429a      	cmp	r2, r3
 800540e:	d207      	bcs.n	8005420 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005410:	4b0b      	ldr	r3, [pc, #44]	@ (8005440 <prvAddNewTaskToReadyList+0xd0>)
 8005412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	20000910 	.word	0x20000910
 800542c:	20000810 	.word	0x20000810
 8005430:	2000091c 	.word	0x2000091c
 8005434:	2000092c 	.word	0x2000092c
 8005438:	20000918 	.word	0x20000918
 800543c:	20000814 	.word	0x20000814
 8005440:	e000ed04 	.word	0xe000ed04

08005444 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d018      	beq.n	8005488 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005456:	4b14      	ldr	r3, [pc, #80]	@ (80054a8 <vTaskDelay+0x64>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00b      	beq.n	8005476 <vTaskDelay+0x32>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	60bb      	str	r3, [r7, #8]
}
 8005470:	bf00      	nop
 8005472:	bf00      	nop
 8005474:	e7fd      	b.n	8005472 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005476:	f000 f885 	bl	8005584 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800547a:	2100      	movs	r1, #0
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 fb27 	bl	8005ad0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005482:	f000 f88d 	bl	80055a0 <xTaskResumeAll>
 8005486:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d107      	bne.n	800549e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800548e:	4b07      	ldr	r3, [pc, #28]	@ (80054ac <vTaskDelay+0x68>)
 8005490:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800549e:	bf00      	nop
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20000938 	.word	0x20000938
 80054ac:	e000ed04 	.word	0xe000ed04

080054b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08a      	sub	sp, #40	@ 0x28
 80054b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054be:	463a      	mov	r2, r7
 80054c0:	1d39      	adds	r1, r7, #4
 80054c2:	f107 0308 	add.w	r3, r7, #8
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fb fa64 	bl	8000994 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054cc:	6839      	ldr	r1, [r7, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	9202      	str	r2, [sp, #8]
 80054d4:	9301      	str	r3, [sp, #4]
 80054d6:	2300      	movs	r3, #0
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	2300      	movs	r3, #0
 80054dc:	460a      	mov	r2, r1
 80054de:	4921      	ldr	r1, [pc, #132]	@ (8005564 <vTaskStartScheduler+0xb4>)
 80054e0:	4821      	ldr	r0, [pc, #132]	@ (8005568 <vTaskStartScheduler+0xb8>)
 80054e2:	f7ff fe00 	bl	80050e6 <xTaskCreateStatic>
 80054e6:	4603      	mov	r3, r0
 80054e8:	4a20      	ldr	r2, [pc, #128]	@ (800556c <vTaskStartScheduler+0xbc>)
 80054ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054ec:	4b1f      	ldr	r3, [pc, #124]	@ (800556c <vTaskStartScheduler+0xbc>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054f4:	2301      	movs	r3, #1
 80054f6:	617b      	str	r3, [r7, #20]
 80054f8:	e001      	b.n	80054fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d11b      	bne.n	800553c <vTaskStartScheduler+0x8c>
	__asm volatile
 8005504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005508:	f383 8811 	msr	BASEPRI, r3
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	613b      	str	r3, [r7, #16]
}
 8005516:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005518:	4b15      	ldr	r3, [pc, #84]	@ (8005570 <vTaskStartScheduler+0xc0>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	334c      	adds	r3, #76	@ 0x4c
 800551e:	4a15      	ldr	r2, [pc, #84]	@ (8005574 <vTaskStartScheduler+0xc4>)
 8005520:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005522:	4b15      	ldr	r3, [pc, #84]	@ (8005578 <vTaskStartScheduler+0xc8>)
 8005524:	f04f 32ff 	mov.w	r2, #4294967295
 8005528:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800552a:	4b14      	ldr	r3, [pc, #80]	@ (800557c <vTaskStartScheduler+0xcc>)
 800552c:	2201      	movs	r2, #1
 800552e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005530:	4b13      	ldr	r3, [pc, #76]	@ (8005580 <vTaskStartScheduler+0xd0>)
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005536:	f000 fbbb 	bl	8005cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800553a:	e00f      	b.n	800555c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005542:	d10b      	bne.n	800555c <vTaskStartScheduler+0xac>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	60fb      	str	r3, [r7, #12]
}
 8005556:	bf00      	nop
 8005558:	bf00      	nop
 800555a:	e7fd      	b.n	8005558 <vTaskStartScheduler+0xa8>
}
 800555c:	bf00      	nop
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	08006de0 	.word	0x08006de0
 8005568:	08005919 	.word	0x08005919
 800556c:	20000934 	.word	0x20000934
 8005570:	20000810 	.word	0x20000810
 8005574:	2000002c 	.word	0x2000002c
 8005578:	20000930 	.word	0x20000930
 800557c:	2000091c 	.word	0x2000091c
 8005580:	20000914 	.word	0x20000914

08005584 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005588:	4b04      	ldr	r3, [pc, #16]	@ (800559c <vTaskSuspendAll+0x18>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3301      	adds	r3, #1
 800558e:	4a03      	ldr	r2, [pc, #12]	@ (800559c <vTaskSuspendAll+0x18>)
 8005590:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005592:	bf00      	nop
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	20000938 	.word	0x20000938

080055a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055ae:	4b42      	ldr	r3, [pc, #264]	@ (80056b8 <xTaskResumeAll+0x118>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10b      	bne.n	80055ce <xTaskResumeAll+0x2e>
	__asm volatile
 80055b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	603b      	str	r3, [r7, #0]
}
 80055c8:	bf00      	nop
 80055ca:	bf00      	nop
 80055cc:	e7fd      	b.n	80055ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055ce:	f000 fc13 	bl	8005df8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055d2:	4b39      	ldr	r3, [pc, #228]	@ (80056b8 <xTaskResumeAll+0x118>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	4a37      	ldr	r2, [pc, #220]	@ (80056b8 <xTaskResumeAll+0x118>)
 80055da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055dc:	4b36      	ldr	r3, [pc, #216]	@ (80056b8 <xTaskResumeAll+0x118>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d161      	bne.n	80056a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055e4:	4b35      	ldr	r3, [pc, #212]	@ (80056bc <xTaskResumeAll+0x11c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d05d      	beq.n	80056a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055ec:	e02e      	b.n	800564c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ee:	4b34      	ldr	r3, [pc, #208]	@ (80056c0 <xTaskResumeAll+0x120>)
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3318      	adds	r3, #24
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff fd49 	bl	8005092 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3304      	adds	r3, #4
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff fd44 	bl	8005092 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560e:	2201      	movs	r2, #1
 8005610:	409a      	lsls	r2, r3
 8005612:	4b2c      	ldr	r3, [pc, #176]	@ (80056c4 <xTaskResumeAll+0x124>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4313      	orrs	r3, r2
 8005618:	4a2a      	ldr	r2, [pc, #168]	@ (80056c4 <xTaskResumeAll+0x124>)
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005620:	4613      	mov	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4a27      	ldr	r2, [pc, #156]	@ (80056c8 <xTaskResumeAll+0x128>)
 800562a:	441a      	add	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	3304      	adds	r3, #4
 8005630:	4619      	mov	r1, r3
 8005632:	4610      	mov	r0, r2
 8005634:	f7ff fcd0 	bl	8004fd8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800563c:	4b23      	ldr	r3, [pc, #140]	@ (80056cc <xTaskResumeAll+0x12c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005642:	429a      	cmp	r2, r3
 8005644:	d302      	bcc.n	800564c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005646:	4b22      	ldr	r3, [pc, #136]	@ (80056d0 <xTaskResumeAll+0x130>)
 8005648:	2201      	movs	r2, #1
 800564a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800564c:	4b1c      	ldr	r3, [pc, #112]	@ (80056c0 <xTaskResumeAll+0x120>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1cc      	bne.n	80055ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800565a:	f000 fa19 	bl	8005a90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800565e:	4b1d      	ldr	r3, [pc, #116]	@ (80056d4 <xTaskResumeAll+0x134>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d010      	beq.n	800568c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800566a:	f000 f837 	bl	80056dc <xTaskIncrementTick>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005674:	4b16      	ldr	r3, [pc, #88]	@ (80056d0 <xTaskResumeAll+0x130>)
 8005676:	2201      	movs	r2, #1
 8005678:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	3b01      	subs	r3, #1
 800567e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1f1      	bne.n	800566a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005686:	4b13      	ldr	r3, [pc, #76]	@ (80056d4 <xTaskResumeAll+0x134>)
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800568c:	4b10      	ldr	r3, [pc, #64]	@ (80056d0 <xTaskResumeAll+0x130>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d009      	beq.n	80056a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005694:	2301      	movs	r3, #1
 8005696:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005698:	4b0f      	ldr	r3, [pc, #60]	@ (80056d8 <xTaskResumeAll+0x138>)
 800569a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056a8:	f000 fbd8 	bl	8005e5c <vPortExitCritical>

	return xAlreadyYielded;
 80056ac:	68bb      	ldr	r3, [r7, #8]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000938 	.word	0x20000938
 80056bc:	20000910 	.word	0x20000910
 80056c0:	200008d0 	.word	0x200008d0
 80056c4:	20000918 	.word	0x20000918
 80056c8:	20000814 	.word	0x20000814
 80056cc:	20000810 	.word	0x20000810
 80056d0:	20000924 	.word	0x20000924
 80056d4:	20000920 	.word	0x20000920
 80056d8:	e000ed04 	.word	0xe000ed04

080056dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056e2:	2300      	movs	r3, #0
 80056e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056e6:	4b4f      	ldr	r3, [pc, #316]	@ (8005824 <xTaskIncrementTick+0x148>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f040 808f 	bne.w	800580e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056f0:	4b4d      	ldr	r3, [pc, #308]	@ (8005828 <xTaskIncrementTick+0x14c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3301      	adds	r3, #1
 80056f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056f8:	4a4b      	ldr	r2, [pc, #300]	@ (8005828 <xTaskIncrementTick+0x14c>)
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d121      	bne.n	8005748 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005704:	4b49      	ldr	r3, [pc, #292]	@ (800582c <xTaskIncrementTick+0x150>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00b      	beq.n	8005726 <xTaskIncrementTick+0x4a>
	__asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	603b      	str	r3, [r7, #0]
}
 8005720:	bf00      	nop
 8005722:	bf00      	nop
 8005724:	e7fd      	b.n	8005722 <xTaskIncrementTick+0x46>
 8005726:	4b41      	ldr	r3, [pc, #260]	@ (800582c <xTaskIncrementTick+0x150>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	4b40      	ldr	r3, [pc, #256]	@ (8005830 <xTaskIncrementTick+0x154>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a3e      	ldr	r2, [pc, #248]	@ (800582c <xTaskIncrementTick+0x150>)
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	4a3e      	ldr	r2, [pc, #248]	@ (8005830 <xTaskIncrementTick+0x154>)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	4b3e      	ldr	r3, [pc, #248]	@ (8005834 <xTaskIncrementTick+0x158>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3301      	adds	r3, #1
 8005740:	4a3c      	ldr	r2, [pc, #240]	@ (8005834 <xTaskIncrementTick+0x158>)
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	f000 f9a4 	bl	8005a90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005748:	4b3b      	ldr	r3, [pc, #236]	@ (8005838 <xTaskIncrementTick+0x15c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	429a      	cmp	r2, r3
 8005750:	d348      	bcc.n	80057e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005752:	4b36      	ldr	r3, [pc, #216]	@ (800582c <xTaskIncrementTick+0x150>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d104      	bne.n	8005766 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800575c:	4b36      	ldr	r3, [pc, #216]	@ (8005838 <xTaskIncrementTick+0x15c>)
 800575e:	f04f 32ff 	mov.w	r2, #4294967295
 8005762:	601a      	str	r2, [r3, #0]
					break;
 8005764:	e03e      	b.n	80057e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005766:	4b31      	ldr	r3, [pc, #196]	@ (800582c <xTaskIncrementTick+0x150>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	429a      	cmp	r2, r3
 800577c:	d203      	bcs.n	8005786 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800577e:	4a2e      	ldr	r2, [pc, #184]	@ (8005838 <xTaskIncrementTick+0x15c>)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005784:	e02e      	b.n	80057e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	3304      	adds	r3, #4
 800578a:	4618      	mov	r0, r3
 800578c:	f7ff fc81 	bl	8005092 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005794:	2b00      	cmp	r3, #0
 8005796:	d004      	beq.n	80057a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	3318      	adds	r3, #24
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff fc78 	bl	8005092 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a6:	2201      	movs	r2, #1
 80057a8:	409a      	lsls	r2, r3
 80057aa:	4b24      	ldr	r3, [pc, #144]	@ (800583c <xTaskIncrementTick+0x160>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	4a22      	ldr	r2, [pc, #136]	@ (800583c <xTaskIncrementTick+0x160>)
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b8:	4613      	mov	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4a1f      	ldr	r2, [pc, #124]	@ (8005840 <xTaskIncrementTick+0x164>)
 80057c2:	441a      	add	r2, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	3304      	adds	r3, #4
 80057c8:	4619      	mov	r1, r3
 80057ca:	4610      	mov	r0, r2
 80057cc:	f7ff fc04 	bl	8004fd8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005844 <xTaskIncrementTick+0x168>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057da:	429a      	cmp	r2, r3
 80057dc:	d3b9      	bcc.n	8005752 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80057de:	2301      	movs	r3, #1
 80057e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057e2:	e7b6      	b.n	8005752 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057e4:	4b17      	ldr	r3, [pc, #92]	@ (8005844 <xTaskIncrementTick+0x168>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ea:	4915      	ldr	r1, [pc, #84]	@ (8005840 <xTaskIncrementTick+0x164>)
 80057ec:	4613      	mov	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	440b      	add	r3, r1
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d901      	bls.n	8005800 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80057fc:	2301      	movs	r3, #1
 80057fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005800:	4b11      	ldr	r3, [pc, #68]	@ (8005848 <xTaskIncrementTick+0x16c>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d007      	beq.n	8005818 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005808:	2301      	movs	r3, #1
 800580a:	617b      	str	r3, [r7, #20]
 800580c:	e004      	b.n	8005818 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800580e:	4b0f      	ldr	r3, [pc, #60]	@ (800584c <xTaskIncrementTick+0x170>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3301      	adds	r3, #1
 8005814:	4a0d      	ldr	r2, [pc, #52]	@ (800584c <xTaskIncrementTick+0x170>)
 8005816:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005818:	697b      	ldr	r3, [r7, #20]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20000938 	.word	0x20000938
 8005828:	20000914 	.word	0x20000914
 800582c:	200008c8 	.word	0x200008c8
 8005830:	200008cc 	.word	0x200008cc
 8005834:	20000928 	.word	0x20000928
 8005838:	20000930 	.word	0x20000930
 800583c:	20000918 	.word	0x20000918
 8005840:	20000814 	.word	0x20000814
 8005844:	20000810 	.word	0x20000810
 8005848:	20000924 	.word	0x20000924
 800584c:	20000920 	.word	0x20000920

08005850 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005856:	4b2a      	ldr	r3, [pc, #168]	@ (8005900 <vTaskSwitchContext+0xb0>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800585e:	4b29      	ldr	r3, [pc, #164]	@ (8005904 <vTaskSwitchContext+0xb4>)
 8005860:	2201      	movs	r2, #1
 8005862:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005864:	e045      	b.n	80058f2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005866:	4b27      	ldr	r3, [pc, #156]	@ (8005904 <vTaskSwitchContext+0xb4>)
 8005868:	2200      	movs	r2, #0
 800586a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800586c:	4b26      	ldr	r3, [pc, #152]	@ (8005908 <vTaskSwitchContext+0xb8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	fab3 f383 	clz	r3, r3
 8005878:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800587a:	7afb      	ldrb	r3, [r7, #11]
 800587c:	f1c3 031f 	rsb	r3, r3, #31
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	4922      	ldr	r1, [pc, #136]	@ (800590c <vTaskSwitchContext+0xbc>)
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	4613      	mov	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	440b      	add	r3, r1
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10b      	bne.n	80058ae <vTaskSwitchContext+0x5e>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	607b      	str	r3, [r7, #4]
}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	e7fd      	b.n	80058aa <vTaskSwitchContext+0x5a>
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4613      	mov	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4a14      	ldr	r2, [pc, #80]	@ (800590c <vTaskSwitchContext+0xbc>)
 80058ba:	4413      	add	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	605a      	str	r2, [r3, #4]
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	3308      	adds	r3, #8
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d104      	bne.n	80058de <vTaskSwitchContext+0x8e>
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	605a      	str	r2, [r3, #4]
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005910 <vTaskSwitchContext+0xc0>)
 80058e6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058e8:	4b09      	ldr	r3, [pc, #36]	@ (8005910 <vTaskSwitchContext+0xc0>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	334c      	adds	r3, #76	@ 0x4c
 80058ee:	4a09      	ldr	r2, [pc, #36]	@ (8005914 <vTaskSwitchContext+0xc4>)
 80058f0:	6013      	str	r3, [r2, #0]
}
 80058f2:	bf00      	nop
 80058f4:	371c      	adds	r7, #28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	20000938 	.word	0x20000938
 8005904:	20000924 	.word	0x20000924
 8005908:	20000918 	.word	0x20000918
 800590c:	20000814 	.word	0x20000814
 8005910:	20000810 	.word	0x20000810
 8005914:	2000002c 	.word	0x2000002c

08005918 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005920:	f000 f852 	bl	80059c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005924:	4b06      	ldr	r3, [pc, #24]	@ (8005940 <prvIdleTask+0x28>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d9f9      	bls.n	8005920 <prvIdleTask+0x8>
			{
				taskYIELD();
 800592c:	4b05      	ldr	r3, [pc, #20]	@ (8005944 <prvIdleTask+0x2c>)
 800592e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800593c:	e7f0      	b.n	8005920 <prvIdleTask+0x8>
 800593e:	bf00      	nop
 8005940:	20000814 	.word	0x20000814
 8005944:	e000ed04 	.word	0xe000ed04

08005948 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800594e:	2300      	movs	r3, #0
 8005950:	607b      	str	r3, [r7, #4]
 8005952:	e00c      	b.n	800596e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	4613      	mov	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4a12      	ldr	r2, [pc, #72]	@ (80059a8 <prvInitialiseTaskLists+0x60>)
 8005960:	4413      	add	r3, r2
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff fb0b 	bl	8004f7e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3301      	adds	r3, #1
 800596c:	607b      	str	r3, [r7, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b06      	cmp	r3, #6
 8005972:	d9ef      	bls.n	8005954 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005974:	480d      	ldr	r0, [pc, #52]	@ (80059ac <prvInitialiseTaskLists+0x64>)
 8005976:	f7ff fb02 	bl	8004f7e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800597a:	480d      	ldr	r0, [pc, #52]	@ (80059b0 <prvInitialiseTaskLists+0x68>)
 800597c:	f7ff faff 	bl	8004f7e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005980:	480c      	ldr	r0, [pc, #48]	@ (80059b4 <prvInitialiseTaskLists+0x6c>)
 8005982:	f7ff fafc 	bl	8004f7e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005986:	480c      	ldr	r0, [pc, #48]	@ (80059b8 <prvInitialiseTaskLists+0x70>)
 8005988:	f7ff faf9 	bl	8004f7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800598c:	480b      	ldr	r0, [pc, #44]	@ (80059bc <prvInitialiseTaskLists+0x74>)
 800598e:	f7ff faf6 	bl	8004f7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005992:	4b0b      	ldr	r3, [pc, #44]	@ (80059c0 <prvInitialiseTaskLists+0x78>)
 8005994:	4a05      	ldr	r2, [pc, #20]	@ (80059ac <prvInitialiseTaskLists+0x64>)
 8005996:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005998:	4b0a      	ldr	r3, [pc, #40]	@ (80059c4 <prvInitialiseTaskLists+0x7c>)
 800599a:	4a05      	ldr	r2, [pc, #20]	@ (80059b0 <prvInitialiseTaskLists+0x68>)
 800599c:	601a      	str	r2, [r3, #0]
}
 800599e:	bf00      	nop
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	20000814 	.word	0x20000814
 80059ac:	200008a0 	.word	0x200008a0
 80059b0:	200008b4 	.word	0x200008b4
 80059b4:	200008d0 	.word	0x200008d0
 80059b8:	200008e4 	.word	0x200008e4
 80059bc:	200008fc 	.word	0x200008fc
 80059c0:	200008c8 	.word	0x200008c8
 80059c4:	200008cc 	.word	0x200008cc

080059c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059ce:	e019      	b.n	8005a04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059d0:	f000 fa12 	bl	8005df8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059d4:	4b10      	ldr	r3, [pc, #64]	@ (8005a18 <prvCheckTasksWaitingTermination+0x50>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3304      	adds	r3, #4
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7ff fb56 	bl	8005092 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059e6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a1c <prvCheckTasksWaitingTermination+0x54>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	4a0b      	ldr	r2, [pc, #44]	@ (8005a1c <prvCheckTasksWaitingTermination+0x54>)
 80059ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005a20 <prvCheckTasksWaitingTermination+0x58>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005a20 <prvCheckTasksWaitingTermination+0x58>)
 80059f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059fa:	f000 fa2f 	bl	8005e5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f810 	bl	8005a24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a04:	4b06      	ldr	r3, [pc, #24]	@ (8005a20 <prvCheckTasksWaitingTermination+0x58>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e1      	bne.n	80059d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a0c:	bf00      	nop
 8005a0e:	bf00      	nop
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	200008e4 	.word	0x200008e4
 8005a1c:	20000910 	.word	0x20000910
 8005a20:	200008f8 	.word	0x200008f8

08005a24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	334c      	adds	r3, #76	@ 0x4c
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fcd9 	bl	80063e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d108      	bne.n	8005a52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 fb85 	bl	8006154 <vPortFree>
				vPortFree( pxTCB );
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fb82 	bl	8006154 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a50:	e019      	b.n	8005a86 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d103      	bne.n	8005a64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fb79 	bl	8006154 <vPortFree>
	}
 8005a62:	e010      	b.n	8005a86 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d00b      	beq.n	8005a86 <prvDeleteTCB+0x62>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	60fb      	str	r3, [r7, #12]
}
 8005a80:	bf00      	nop
 8005a82:	bf00      	nop
 8005a84:	e7fd      	b.n	8005a82 <prvDeleteTCB+0x5e>
	}
 8005a86:	bf00      	nop
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a96:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac8 <prvResetNextTaskUnblockTime+0x38>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d104      	bne.n	8005aaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8005acc <prvResetNextTaskUnblockTime+0x3c>)
 8005aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005aa8:	e008      	b.n	8005abc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aaa:	4b07      	ldr	r3, [pc, #28]	@ (8005ac8 <prvResetNextTaskUnblockTime+0x38>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	4a04      	ldr	r2, [pc, #16]	@ (8005acc <prvResetNextTaskUnblockTime+0x3c>)
 8005aba:	6013      	str	r3, [r2, #0]
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	200008c8 	.word	0x200008c8
 8005acc:	20000930 	.word	0x20000930

08005ad0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ada:	4b29      	ldr	r3, [pc, #164]	@ (8005b80 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ae0:	4b28      	ldr	r3, [pc, #160]	@ (8005b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3304      	adds	r3, #4
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7ff fad3 	bl	8005092 <uxListRemove>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10b      	bne.n	8005b0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005af2:	4b24      	ldr	r3, [pc, #144]	@ (8005b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af8:	2201      	movs	r2, #1
 8005afa:	fa02 f303 	lsl.w	r3, r2, r3
 8005afe:	43da      	mvns	r2, r3
 8005b00:	4b21      	ldr	r3, [pc, #132]	@ (8005b88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4013      	ands	r3, r2
 8005b06:	4a20      	ldr	r2, [pc, #128]	@ (8005b88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b10:	d10a      	bne.n	8005b28 <prvAddCurrentTaskToDelayedList+0x58>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d007      	beq.n	8005b28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b18:	4b1a      	ldr	r3, [pc, #104]	@ (8005b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	4619      	mov	r1, r3
 8005b20:	481a      	ldr	r0, [pc, #104]	@ (8005b8c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005b22:	f7ff fa59 	bl	8004fd8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b26:	e026      	b.n	8005b76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b30:	4b14      	ldr	r3, [pc, #80]	@ (8005b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d209      	bcs.n	8005b54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b40:	4b13      	ldr	r3, [pc, #76]	@ (8005b90 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	4b0f      	ldr	r3, [pc, #60]	@ (8005b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3304      	adds	r3, #4
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	f7ff fa67 	bl	8005020 <vListInsert>
}
 8005b52:	e010      	b.n	8005b76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b54:	4b0f      	ldr	r3, [pc, #60]	@ (8005b94 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	4b0a      	ldr	r3, [pc, #40]	@ (8005b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4610      	mov	r0, r2
 8005b62:	f7ff fa5d 	bl	8005020 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b66:	4b0c      	ldr	r3, [pc, #48]	@ (8005b98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d202      	bcs.n	8005b76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005b70:	4a09      	ldr	r2, [pc, #36]	@ (8005b98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	6013      	str	r3, [r2, #0]
}
 8005b76:	bf00      	nop
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20000914 	.word	0x20000914
 8005b84:	20000810 	.word	0x20000810
 8005b88:	20000918 	.word	0x20000918
 8005b8c:	200008fc 	.word	0x200008fc
 8005b90:	200008cc 	.word	0x200008cc
 8005b94:	200008c8 	.word	0x200008c8
 8005b98:	20000930 	.word	0x20000930

08005b9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	3b04      	subs	r3, #4
 8005bac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3b04      	subs	r3, #4
 8005bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f023 0201 	bic.w	r2, r3, #1
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3b04      	subs	r3, #4
 8005bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8005c00 <pxPortInitialiseStack+0x64>)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3b14      	subs	r3, #20
 8005bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3b04      	subs	r3, #4
 8005be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f06f 0202 	mvn.w	r2, #2
 8005bea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3b20      	subs	r3, #32
 8005bf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	08005c05 	.word	0x08005c05

08005c04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c0e:	4b13      	ldr	r3, [pc, #76]	@ (8005c5c <prvTaskExitError+0x58>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c16:	d00b      	beq.n	8005c30 <prvTaskExitError+0x2c>
	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	60fb      	str	r3, [r7, #12]
}
 8005c2a:	bf00      	nop
 8005c2c:	bf00      	nop
 8005c2e:	e7fd      	b.n	8005c2c <prvTaskExitError+0x28>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	60bb      	str	r3, [r7, #8]
}
 8005c42:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c44:	bf00      	nop
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0fc      	beq.n	8005c46 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c4c:	bf00      	nop
 8005c4e:	bf00      	nop
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	20000028 	.word	0x20000028

08005c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c60:	4b07      	ldr	r3, [pc, #28]	@ (8005c80 <pxCurrentTCBConst2>)
 8005c62:	6819      	ldr	r1, [r3, #0]
 8005c64:	6808      	ldr	r0, [r1, #0]
 8005c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c6a:	f380 8809 	msr	PSP, r0
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f04f 0000 	mov.w	r0, #0
 8005c76:	f380 8811 	msr	BASEPRI, r0
 8005c7a:	4770      	bx	lr
 8005c7c:	f3af 8000 	nop.w

08005c80 <pxCurrentTCBConst2>:
 8005c80:	20000810 	.word	0x20000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop

08005c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c88:	4808      	ldr	r0, [pc, #32]	@ (8005cac <prvPortStartFirstTask+0x24>)
 8005c8a:	6800      	ldr	r0, [r0, #0]
 8005c8c:	6800      	ldr	r0, [r0, #0]
 8005c8e:	f380 8808 	msr	MSP, r0
 8005c92:	f04f 0000 	mov.w	r0, #0
 8005c96:	f380 8814 	msr	CONTROL, r0
 8005c9a:	b662      	cpsie	i
 8005c9c:	b661      	cpsie	f
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	df00      	svc	0
 8005ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005caa:	bf00      	nop
 8005cac:	e000ed08 	.word	0xe000ed08

08005cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005cb6:	4b47      	ldr	r3, [pc, #284]	@ (8005dd4 <xPortStartScheduler+0x124>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a47      	ldr	r2, [pc, #284]	@ (8005dd8 <xPortStartScheduler+0x128>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d10b      	bne.n	8005cd8 <xPortStartScheduler+0x28>
	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	60fb      	str	r3, [r7, #12]
}
 8005cd2:	bf00      	nop
 8005cd4:	bf00      	nop
 8005cd6:	e7fd      	b.n	8005cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8005dd4 <xPortStartScheduler+0x124>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a3f      	ldr	r2, [pc, #252]	@ (8005ddc <xPortStartScheduler+0x12c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d10b      	bne.n	8005cfa <xPortStartScheduler+0x4a>
	__asm volatile
 8005ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	613b      	str	r3, [r7, #16]
}
 8005cf4:	bf00      	nop
 8005cf6:	bf00      	nop
 8005cf8:	e7fd      	b.n	8005cf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005cfa:	4b39      	ldr	r3, [pc, #228]	@ (8005de0 <xPortStartScheduler+0x130>)
 8005cfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	22ff      	movs	r2, #255	@ 0xff
 8005d0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	4b31      	ldr	r3, [pc, #196]	@ (8005de4 <xPortStartScheduler+0x134>)
 8005d20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d22:	4b31      	ldr	r3, [pc, #196]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d24:	2207      	movs	r2, #7
 8005d26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d28:	e009      	b.n	8005d3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	4a2d      	ldr	r2, [pc, #180]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d34:	78fb      	ldrb	r3, [r7, #3]
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d3e:	78fb      	ldrb	r3, [r7, #3]
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d46:	2b80      	cmp	r3, #128	@ 0x80
 8005d48:	d0ef      	beq.n	8005d2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d4a:	4b27      	ldr	r3, [pc, #156]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f1c3 0307 	rsb	r3, r3, #7
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	d00b      	beq.n	8005d6e <xPortStartScheduler+0xbe>
	__asm volatile
 8005d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	60bb      	str	r3, [r7, #8]
}
 8005d68:	bf00      	nop
 8005d6a:	bf00      	nop
 8005d6c:	e7fd      	b.n	8005d6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	4a1c      	ldr	r2, [pc, #112]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d78:	4b1b      	ldr	r3, [pc, #108]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d80:	4a19      	ldr	r2, [pc, #100]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d8c:	4b17      	ldr	r3, [pc, #92]	@ (8005dec <xPortStartScheduler+0x13c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a16      	ldr	r2, [pc, #88]	@ (8005dec <xPortStartScheduler+0x13c>)
 8005d92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005d96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d98:	4b14      	ldr	r3, [pc, #80]	@ (8005dec <xPortStartScheduler+0x13c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a13      	ldr	r2, [pc, #76]	@ (8005dec <xPortStartScheduler+0x13c>)
 8005d9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005da2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005da4:	f000 f8da 	bl	8005f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005da8:	4b11      	ldr	r3, [pc, #68]	@ (8005df0 <xPortStartScheduler+0x140>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005dae:	f000 f8f9 	bl	8005fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005db2:	4b10      	ldr	r3, [pc, #64]	@ (8005df4 <xPortStartScheduler+0x144>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a0f      	ldr	r2, [pc, #60]	@ (8005df4 <xPortStartScheduler+0x144>)
 8005db8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005dbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005dbe:	f7ff ff63 	bl	8005c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005dc2:	f7ff fd45 	bl	8005850 <vTaskSwitchContext>
	prvTaskExitError();
 8005dc6:	f7ff ff1d 	bl	8005c04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	e000ed00 	.word	0xe000ed00
 8005dd8:	410fc271 	.word	0x410fc271
 8005ddc:	410fc270 	.word	0x410fc270
 8005de0:	e000e400 	.word	0xe000e400
 8005de4:	2000093c 	.word	0x2000093c
 8005de8:	20000940 	.word	0x20000940
 8005dec:	e000ed20 	.word	0xe000ed20
 8005df0:	20000028 	.word	0x20000028
 8005df4:	e000ef34 	.word	0xe000ef34

08005df8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	607b      	str	r3, [r7, #4]
}
 8005e10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e12:	4b10      	ldr	r3, [pc, #64]	@ (8005e54 <vPortEnterCritical+0x5c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3301      	adds	r3, #1
 8005e18:	4a0e      	ldr	r2, [pc, #56]	@ (8005e54 <vPortEnterCritical+0x5c>)
 8005e1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e54 <vPortEnterCritical+0x5c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d110      	bne.n	8005e46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e24:	4b0c      	ldr	r3, [pc, #48]	@ (8005e58 <vPortEnterCritical+0x60>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00b      	beq.n	8005e46 <vPortEnterCritical+0x4e>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	603b      	str	r3, [r7, #0]
}
 8005e40:	bf00      	nop
 8005e42:	bf00      	nop
 8005e44:	e7fd      	b.n	8005e42 <vPortEnterCritical+0x4a>
	}
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	20000028 	.word	0x20000028
 8005e58:	e000ed04 	.word	0xe000ed04

08005e5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e62:	4b12      	ldr	r3, [pc, #72]	@ (8005eac <vPortExitCritical+0x50>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10b      	bne.n	8005e82 <vPortExitCritical+0x26>
	__asm volatile
 8005e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	607b      	str	r3, [r7, #4]
}
 8005e7c:	bf00      	nop
 8005e7e:	bf00      	nop
 8005e80:	e7fd      	b.n	8005e7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e82:	4b0a      	ldr	r3, [pc, #40]	@ (8005eac <vPortExitCritical+0x50>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	3b01      	subs	r3, #1
 8005e88:	4a08      	ldr	r2, [pc, #32]	@ (8005eac <vPortExitCritical+0x50>)
 8005e8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e8c:	4b07      	ldr	r3, [pc, #28]	@ (8005eac <vPortExitCritical+0x50>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d105      	bne.n	8005ea0 <vPortExitCritical+0x44>
 8005e94:	2300      	movs	r3, #0
 8005e96:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	20000028 	.word	0x20000028

08005eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005eb0:	f3ef 8009 	mrs	r0, PSP
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	4b15      	ldr	r3, [pc, #84]	@ (8005f10 <pxCurrentTCBConst>)
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	f01e 0f10 	tst.w	lr, #16
 8005ec0:	bf08      	it	eq
 8005ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eca:	6010      	str	r0, [r2, #0]
 8005ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ed0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005ed4:	f380 8811 	msr	BASEPRI, r0
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f7ff fcb6 	bl	8005850 <vTaskSwitchContext>
 8005ee4:	f04f 0000 	mov.w	r0, #0
 8005ee8:	f380 8811 	msr	BASEPRI, r0
 8005eec:	bc09      	pop	{r0, r3}
 8005eee:	6819      	ldr	r1, [r3, #0]
 8005ef0:	6808      	ldr	r0, [r1, #0]
 8005ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef6:	f01e 0f10 	tst.w	lr, #16
 8005efa:	bf08      	it	eq
 8005efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f00:	f380 8809 	msr	PSP, r0
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	f3af 8000 	nop.w

08005f10 <pxCurrentTCBConst>:
 8005f10:	20000810 	.word	0x20000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop

08005f18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	607b      	str	r3, [r7, #4]
}
 8005f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f32:	f7ff fbd3 	bl	80056dc <xTaskIncrementTick>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f3c:	4b06      	ldr	r3, [pc, #24]	@ (8005f58 <SysTick_Handler+0x40>)
 8005f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	2300      	movs	r3, #0
 8005f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	f383 8811 	msr	BASEPRI, r3
}
 8005f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f50:	bf00      	nop
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	e000ed04 	.word	0xe000ed04

08005f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f60:	4b0b      	ldr	r3, [pc, #44]	@ (8005f90 <vPortSetupTimerInterrupt+0x34>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f66:	4b0b      	ldr	r3, [pc, #44]	@ (8005f94 <vPortSetupTimerInterrupt+0x38>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f98 <vPortSetupTimerInterrupt+0x3c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a0a      	ldr	r2, [pc, #40]	@ (8005f9c <vPortSetupTimerInterrupt+0x40>)
 8005f72:	fba2 2303 	umull	r2, r3, r2, r3
 8005f76:	099b      	lsrs	r3, r3, #6
 8005f78:	4a09      	ldr	r2, [pc, #36]	@ (8005fa0 <vPortSetupTimerInterrupt+0x44>)
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f7e:	4b04      	ldr	r3, [pc, #16]	@ (8005f90 <vPortSetupTimerInterrupt+0x34>)
 8005f80:	2207      	movs	r2, #7
 8005f82:	601a      	str	r2, [r3, #0]
}
 8005f84:	bf00      	nop
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	e000e010 	.word	0xe000e010
 8005f94:	e000e018 	.word	0xe000e018
 8005f98:	2000001c 	.word	0x2000001c
 8005f9c:	10624dd3 	.word	0x10624dd3
 8005fa0:	e000e014 	.word	0xe000e014

08005fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005fb4 <vPortEnableVFP+0x10>
 8005fa8:	6801      	ldr	r1, [r0, #0]
 8005faa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005fae:	6001      	str	r1, [r0, #0]
 8005fb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005fb2:	bf00      	nop
 8005fb4:	e000ed88 	.word	0xe000ed88

08005fb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08a      	sub	sp, #40	@ 0x28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fc4:	f7ff fade 	bl	8005584 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fc8:	4b5c      	ldr	r3, [pc, #368]	@ (800613c <pvPortMalloc+0x184>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fd0:	f000 f924 	bl	800621c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fd4:	4b5a      	ldr	r3, [pc, #360]	@ (8006140 <pvPortMalloc+0x188>)
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f040 8095 	bne.w	800610c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d01e      	beq.n	8006026 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005fe8:	2208      	movs	r2, #8
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4413      	add	r3, r2
 8005fee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d015      	beq.n	8006026 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f023 0307 	bic.w	r3, r3, #7
 8006000:	3308      	adds	r3, #8
 8006002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00b      	beq.n	8006026 <pvPortMalloc+0x6e>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	617b      	str	r3, [r7, #20]
}
 8006020:	bf00      	nop
 8006022:	bf00      	nop
 8006024:	e7fd      	b.n	8006022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d06f      	beq.n	800610c <pvPortMalloc+0x154>
 800602c:	4b45      	ldr	r3, [pc, #276]	@ (8006144 <pvPortMalloc+0x18c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	429a      	cmp	r2, r3
 8006034:	d86a      	bhi.n	800610c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006036:	4b44      	ldr	r3, [pc, #272]	@ (8006148 <pvPortMalloc+0x190>)
 8006038:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800603a:	4b43      	ldr	r3, [pc, #268]	@ (8006148 <pvPortMalloc+0x190>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006040:	e004      	b.n	800604c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006044:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800604c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	429a      	cmp	r2, r3
 8006054:	d903      	bls.n	800605e <pvPortMalloc+0xa6>
 8006056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1f1      	bne.n	8006042 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800605e:	4b37      	ldr	r3, [pc, #220]	@ (800613c <pvPortMalloc+0x184>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006064:	429a      	cmp	r2, r3
 8006066:	d051      	beq.n	800610c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2208      	movs	r2, #8
 800606e:	4413      	add	r3, r2
 8006070:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	1ad2      	subs	r2, r2, r3
 8006082:	2308      	movs	r3, #8
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	429a      	cmp	r2, r3
 8006088:	d920      	bls.n	80060cc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800608a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4413      	add	r3, r2
 8006090:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	f003 0307 	and.w	r3, r3, #7
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00b      	beq.n	80060b4 <pvPortMalloc+0xfc>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	613b      	str	r3, [r7, #16]
}
 80060ae:	bf00      	nop
 80060b0:	bf00      	nop
 80060b2:	e7fd      	b.n	80060b0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	1ad2      	subs	r2, r2, r3
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060c6:	69b8      	ldr	r0, [r7, #24]
 80060c8:	f000 f90a 	bl	80062e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060cc:	4b1d      	ldr	r3, [pc, #116]	@ (8006144 <pvPortMalloc+0x18c>)
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006144 <pvPortMalloc+0x18c>)
 80060d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060da:	4b1a      	ldr	r3, [pc, #104]	@ (8006144 <pvPortMalloc+0x18c>)
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	4b1b      	ldr	r3, [pc, #108]	@ (800614c <pvPortMalloc+0x194>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d203      	bcs.n	80060ee <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060e6:	4b17      	ldr	r3, [pc, #92]	@ (8006144 <pvPortMalloc+0x18c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a18      	ldr	r2, [pc, #96]	@ (800614c <pvPortMalloc+0x194>)
 80060ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	4b13      	ldr	r3, [pc, #76]	@ (8006140 <pvPortMalloc+0x188>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	431a      	orrs	r2, r3
 80060f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fe:	2200      	movs	r2, #0
 8006100:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006102:	4b13      	ldr	r3, [pc, #76]	@ (8006150 <pvPortMalloc+0x198>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3301      	adds	r3, #1
 8006108:	4a11      	ldr	r2, [pc, #68]	@ (8006150 <pvPortMalloc+0x198>)
 800610a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800610c:	f7ff fa48 	bl	80055a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	f003 0307 	and.w	r3, r3, #7
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00b      	beq.n	8006132 <pvPortMalloc+0x17a>
	__asm volatile
 800611a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	60fb      	str	r3, [r7, #12]
}
 800612c:	bf00      	nop
 800612e:	bf00      	nop
 8006130:	e7fd      	b.n	800612e <pvPortMalloc+0x176>
	return pvReturn;
 8006132:	69fb      	ldr	r3, [r7, #28]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3728      	adds	r7, #40	@ 0x28
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	2000454c 	.word	0x2000454c
 8006140:	20004560 	.word	0x20004560
 8006144:	20004550 	.word	0x20004550
 8006148:	20004544 	.word	0x20004544
 800614c:	20004554 	.word	0x20004554
 8006150:	20004558 	.word	0x20004558

08006154 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d04f      	beq.n	8006206 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006166:	2308      	movs	r3, #8
 8006168:	425b      	negs	r3, r3
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4413      	add	r3, r2
 800616e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	4b25      	ldr	r3, [pc, #148]	@ (8006210 <vPortFree+0xbc>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4013      	ands	r3, r2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10b      	bne.n	800619a <vPortFree+0x46>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	60fb      	str	r3, [r7, #12]
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop
 8006198:	e7fd      	b.n	8006196 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00b      	beq.n	80061ba <vPortFree+0x66>
	__asm volatile
 80061a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	60bb      	str	r3, [r7, #8]
}
 80061b4:	bf00      	nop
 80061b6:	bf00      	nop
 80061b8:	e7fd      	b.n	80061b6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	4b14      	ldr	r3, [pc, #80]	@ (8006210 <vPortFree+0xbc>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4013      	ands	r3, r2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01e      	beq.n	8006206 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d11a      	bne.n	8006206 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	4b0e      	ldr	r3, [pc, #56]	@ (8006210 <vPortFree+0xbc>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	43db      	mvns	r3, r3
 80061da:	401a      	ands	r2, r3
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061e0:	f7ff f9d0 	bl	8005584 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006214 <vPortFree+0xc0>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4413      	add	r3, r2
 80061ee:	4a09      	ldr	r2, [pc, #36]	@ (8006214 <vPortFree+0xc0>)
 80061f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061f2:	6938      	ldr	r0, [r7, #16]
 80061f4:	f000 f874 	bl	80062e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80061f8:	4b07      	ldr	r3, [pc, #28]	@ (8006218 <vPortFree+0xc4>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3301      	adds	r3, #1
 80061fe:	4a06      	ldr	r2, [pc, #24]	@ (8006218 <vPortFree+0xc4>)
 8006200:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006202:	f7ff f9cd 	bl	80055a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006206:	bf00      	nop
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	20004560 	.word	0x20004560
 8006214:	20004550 	.word	0x20004550
 8006218:	2000455c 	.word	0x2000455c

0800621c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006222:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006226:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006228:	4b27      	ldr	r3, [pc, #156]	@ (80062c8 <prvHeapInit+0xac>)
 800622a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00c      	beq.n	8006250 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3307      	adds	r3, #7
 800623a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 0307 	bic.w	r3, r3, #7
 8006242:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	4a1f      	ldr	r2, [pc, #124]	@ (80062c8 <prvHeapInit+0xac>)
 800624c:	4413      	add	r3, r2
 800624e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006254:	4a1d      	ldr	r2, [pc, #116]	@ (80062cc <prvHeapInit+0xb0>)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800625a:	4b1c      	ldr	r3, [pc, #112]	@ (80062cc <prvHeapInit+0xb0>)
 800625c:	2200      	movs	r2, #0
 800625e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	4413      	add	r3, r2
 8006266:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006268:	2208      	movs	r2, #8
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	1a9b      	subs	r3, r3, r2
 800626e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 0307 	bic.w	r3, r3, #7
 8006276:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4a15      	ldr	r2, [pc, #84]	@ (80062d0 <prvHeapInit+0xb4>)
 800627c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800627e:	4b14      	ldr	r3, [pc, #80]	@ (80062d0 <prvHeapInit+0xb4>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2200      	movs	r2, #0
 8006284:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006286:	4b12      	ldr	r3, [pc, #72]	@ (80062d0 <prvHeapInit+0xb4>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	1ad2      	subs	r2, r2, r3
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800629c:	4b0c      	ldr	r3, [pc, #48]	@ (80062d0 <prvHeapInit+0xb4>)
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	4a0a      	ldr	r2, [pc, #40]	@ (80062d4 <prvHeapInit+0xb8>)
 80062aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	4a09      	ldr	r2, [pc, #36]	@ (80062d8 <prvHeapInit+0xbc>)
 80062b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062b4:	4b09      	ldr	r3, [pc, #36]	@ (80062dc <prvHeapInit+0xc0>)
 80062b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80062ba:	601a      	str	r2, [r3, #0]
}
 80062bc:	bf00      	nop
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	20000944 	.word	0x20000944
 80062cc:	20004544 	.word	0x20004544
 80062d0:	2000454c 	.word	0x2000454c
 80062d4:	20004554 	.word	0x20004554
 80062d8:	20004550 	.word	0x20004550
 80062dc:	20004560 	.word	0x20004560

080062e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062e8:	4b28      	ldr	r3, [pc, #160]	@ (800638c <prvInsertBlockIntoFreeList+0xac>)
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	e002      	b.n	80062f4 <prvInsertBlockIntoFreeList+0x14>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d8f7      	bhi.n	80062ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	4413      	add	r3, r2
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	429a      	cmp	r2, r3
 800630e:	d108      	bne.n	8006322 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	441a      	add	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	441a      	add	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	429a      	cmp	r2, r3
 8006334:	d118      	bne.n	8006368 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	4b15      	ldr	r3, [pc, #84]	@ (8006390 <prvInsertBlockIntoFreeList+0xb0>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	429a      	cmp	r2, r3
 8006340:	d00d      	beq.n	800635e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	441a      	add	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	e008      	b.n	8006370 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800635e:	4b0c      	ldr	r3, [pc, #48]	@ (8006390 <prvInsertBlockIntoFreeList+0xb0>)
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	e003      	b.n	8006370 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	429a      	cmp	r2, r3
 8006376:	d002      	beq.n	800637e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800637e:	bf00      	nop
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	20004544 	.word	0x20004544
 8006390:	2000454c 	.word	0x2000454c

08006394 <siprintf>:
 8006394:	b40e      	push	{r1, r2, r3}
 8006396:	b510      	push	{r4, lr}
 8006398:	b09d      	sub	sp, #116	@ 0x74
 800639a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800639c:	9002      	str	r0, [sp, #8]
 800639e:	9006      	str	r0, [sp, #24]
 80063a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80063a4:	480a      	ldr	r0, [pc, #40]	@ (80063d0 <siprintf+0x3c>)
 80063a6:	9107      	str	r1, [sp, #28]
 80063a8:	9104      	str	r1, [sp, #16]
 80063aa:	490a      	ldr	r1, [pc, #40]	@ (80063d4 <siprintf+0x40>)
 80063ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80063b0:	9105      	str	r1, [sp, #20]
 80063b2:	2400      	movs	r4, #0
 80063b4:	a902      	add	r1, sp, #8
 80063b6:	6800      	ldr	r0, [r0, #0]
 80063b8:	9301      	str	r3, [sp, #4]
 80063ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 80063bc:	f000 fa00 	bl	80067c0 <_svfiprintf_r>
 80063c0:	9b02      	ldr	r3, [sp, #8]
 80063c2:	701c      	strb	r4, [r3, #0]
 80063c4:	b01d      	add	sp, #116	@ 0x74
 80063c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063ca:	b003      	add	sp, #12
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	2000002c 	.word	0x2000002c
 80063d4:	ffff0208 	.word	0xffff0208

080063d8 <memset>:
 80063d8:	4402      	add	r2, r0
 80063da:	4603      	mov	r3, r0
 80063dc:	4293      	cmp	r3, r2
 80063de:	d100      	bne.n	80063e2 <memset+0xa>
 80063e0:	4770      	bx	lr
 80063e2:	f803 1b01 	strb.w	r1, [r3], #1
 80063e6:	e7f9      	b.n	80063dc <memset+0x4>

080063e8 <_reclaim_reent>:
 80063e8:	4b2d      	ldr	r3, [pc, #180]	@ (80064a0 <_reclaim_reent+0xb8>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4283      	cmp	r3, r0
 80063ee:	b570      	push	{r4, r5, r6, lr}
 80063f0:	4604      	mov	r4, r0
 80063f2:	d053      	beq.n	800649c <_reclaim_reent+0xb4>
 80063f4:	69c3      	ldr	r3, [r0, #28]
 80063f6:	b31b      	cbz	r3, 8006440 <_reclaim_reent+0x58>
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	b163      	cbz	r3, 8006416 <_reclaim_reent+0x2e>
 80063fc:	2500      	movs	r5, #0
 80063fe:	69e3      	ldr	r3, [r4, #28]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	5959      	ldr	r1, [r3, r5]
 8006404:	b9b1      	cbnz	r1, 8006434 <_reclaim_reent+0x4c>
 8006406:	3504      	adds	r5, #4
 8006408:	2d80      	cmp	r5, #128	@ 0x80
 800640a:	d1f8      	bne.n	80063fe <_reclaim_reent+0x16>
 800640c:	69e3      	ldr	r3, [r4, #28]
 800640e:	4620      	mov	r0, r4
 8006410:	68d9      	ldr	r1, [r3, #12]
 8006412:	f000 f881 	bl	8006518 <_free_r>
 8006416:	69e3      	ldr	r3, [r4, #28]
 8006418:	6819      	ldr	r1, [r3, #0]
 800641a:	b111      	cbz	r1, 8006422 <_reclaim_reent+0x3a>
 800641c:	4620      	mov	r0, r4
 800641e:	f000 f87b 	bl	8006518 <_free_r>
 8006422:	69e3      	ldr	r3, [r4, #28]
 8006424:	689d      	ldr	r5, [r3, #8]
 8006426:	b15d      	cbz	r5, 8006440 <_reclaim_reent+0x58>
 8006428:	4629      	mov	r1, r5
 800642a:	4620      	mov	r0, r4
 800642c:	682d      	ldr	r5, [r5, #0]
 800642e:	f000 f873 	bl	8006518 <_free_r>
 8006432:	e7f8      	b.n	8006426 <_reclaim_reent+0x3e>
 8006434:	680e      	ldr	r6, [r1, #0]
 8006436:	4620      	mov	r0, r4
 8006438:	f000 f86e 	bl	8006518 <_free_r>
 800643c:	4631      	mov	r1, r6
 800643e:	e7e1      	b.n	8006404 <_reclaim_reent+0x1c>
 8006440:	6961      	ldr	r1, [r4, #20]
 8006442:	b111      	cbz	r1, 800644a <_reclaim_reent+0x62>
 8006444:	4620      	mov	r0, r4
 8006446:	f000 f867 	bl	8006518 <_free_r>
 800644a:	69e1      	ldr	r1, [r4, #28]
 800644c:	b111      	cbz	r1, 8006454 <_reclaim_reent+0x6c>
 800644e:	4620      	mov	r0, r4
 8006450:	f000 f862 	bl	8006518 <_free_r>
 8006454:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006456:	b111      	cbz	r1, 800645e <_reclaim_reent+0x76>
 8006458:	4620      	mov	r0, r4
 800645a:	f000 f85d 	bl	8006518 <_free_r>
 800645e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006460:	b111      	cbz	r1, 8006468 <_reclaim_reent+0x80>
 8006462:	4620      	mov	r0, r4
 8006464:	f000 f858 	bl	8006518 <_free_r>
 8006468:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800646a:	b111      	cbz	r1, 8006472 <_reclaim_reent+0x8a>
 800646c:	4620      	mov	r0, r4
 800646e:	f000 f853 	bl	8006518 <_free_r>
 8006472:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006474:	b111      	cbz	r1, 800647c <_reclaim_reent+0x94>
 8006476:	4620      	mov	r0, r4
 8006478:	f000 f84e 	bl	8006518 <_free_r>
 800647c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800647e:	b111      	cbz	r1, 8006486 <_reclaim_reent+0x9e>
 8006480:	4620      	mov	r0, r4
 8006482:	f000 f849 	bl	8006518 <_free_r>
 8006486:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006488:	b111      	cbz	r1, 8006490 <_reclaim_reent+0xa8>
 800648a:	4620      	mov	r0, r4
 800648c:	f000 f844 	bl	8006518 <_free_r>
 8006490:	6a23      	ldr	r3, [r4, #32]
 8006492:	b11b      	cbz	r3, 800649c <_reclaim_reent+0xb4>
 8006494:	4620      	mov	r0, r4
 8006496:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800649a:	4718      	bx	r3
 800649c:	bd70      	pop	{r4, r5, r6, pc}
 800649e:	bf00      	nop
 80064a0:	2000002c 	.word	0x2000002c

080064a4 <__errno>:
 80064a4:	4b01      	ldr	r3, [pc, #4]	@ (80064ac <__errno+0x8>)
 80064a6:	6818      	ldr	r0, [r3, #0]
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	2000002c 	.word	0x2000002c

080064b0 <__libc_init_array>:
 80064b0:	b570      	push	{r4, r5, r6, lr}
 80064b2:	4d0d      	ldr	r5, [pc, #52]	@ (80064e8 <__libc_init_array+0x38>)
 80064b4:	4c0d      	ldr	r4, [pc, #52]	@ (80064ec <__libc_init_array+0x3c>)
 80064b6:	1b64      	subs	r4, r4, r5
 80064b8:	10a4      	asrs	r4, r4, #2
 80064ba:	2600      	movs	r6, #0
 80064bc:	42a6      	cmp	r6, r4
 80064be:	d109      	bne.n	80064d4 <__libc_init_array+0x24>
 80064c0:	4d0b      	ldr	r5, [pc, #44]	@ (80064f0 <__libc_init_array+0x40>)
 80064c2:	4c0c      	ldr	r4, [pc, #48]	@ (80064f4 <__libc_init_array+0x44>)
 80064c4:	f000 fc64 	bl	8006d90 <_init>
 80064c8:	1b64      	subs	r4, r4, r5
 80064ca:	10a4      	asrs	r4, r4, #2
 80064cc:	2600      	movs	r6, #0
 80064ce:	42a6      	cmp	r6, r4
 80064d0:	d105      	bne.n	80064de <__libc_init_array+0x2e>
 80064d2:	bd70      	pop	{r4, r5, r6, pc}
 80064d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d8:	4798      	blx	r3
 80064da:	3601      	adds	r6, #1
 80064dc:	e7ee      	b.n	80064bc <__libc_init_array+0xc>
 80064de:	f855 3b04 	ldr.w	r3, [r5], #4
 80064e2:	4798      	blx	r3
 80064e4:	3601      	adds	r6, #1
 80064e6:	e7f2      	b.n	80064ce <__libc_init_array+0x1e>
 80064e8:	08006e3c 	.word	0x08006e3c
 80064ec:	08006e3c 	.word	0x08006e3c
 80064f0:	08006e3c 	.word	0x08006e3c
 80064f4:	08006e40 	.word	0x08006e40

080064f8 <__retarget_lock_acquire_recursive>:
 80064f8:	4770      	bx	lr

080064fa <__retarget_lock_release_recursive>:
 80064fa:	4770      	bx	lr

080064fc <memcpy>:
 80064fc:	440a      	add	r2, r1
 80064fe:	4291      	cmp	r1, r2
 8006500:	f100 33ff 	add.w	r3, r0, #4294967295
 8006504:	d100      	bne.n	8006508 <memcpy+0xc>
 8006506:	4770      	bx	lr
 8006508:	b510      	push	{r4, lr}
 800650a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800650e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006512:	4291      	cmp	r1, r2
 8006514:	d1f9      	bne.n	800650a <memcpy+0xe>
 8006516:	bd10      	pop	{r4, pc}

08006518 <_free_r>:
 8006518:	b538      	push	{r3, r4, r5, lr}
 800651a:	4605      	mov	r5, r0
 800651c:	2900      	cmp	r1, #0
 800651e:	d041      	beq.n	80065a4 <_free_r+0x8c>
 8006520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006524:	1f0c      	subs	r4, r1, #4
 8006526:	2b00      	cmp	r3, #0
 8006528:	bfb8      	it	lt
 800652a:	18e4      	addlt	r4, r4, r3
 800652c:	f000 f8e0 	bl	80066f0 <__malloc_lock>
 8006530:	4a1d      	ldr	r2, [pc, #116]	@ (80065a8 <_free_r+0x90>)
 8006532:	6813      	ldr	r3, [r2, #0]
 8006534:	b933      	cbnz	r3, 8006544 <_free_r+0x2c>
 8006536:	6063      	str	r3, [r4, #4]
 8006538:	6014      	str	r4, [r2, #0]
 800653a:	4628      	mov	r0, r5
 800653c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006540:	f000 b8dc 	b.w	80066fc <__malloc_unlock>
 8006544:	42a3      	cmp	r3, r4
 8006546:	d908      	bls.n	800655a <_free_r+0x42>
 8006548:	6820      	ldr	r0, [r4, #0]
 800654a:	1821      	adds	r1, r4, r0
 800654c:	428b      	cmp	r3, r1
 800654e:	bf01      	itttt	eq
 8006550:	6819      	ldreq	r1, [r3, #0]
 8006552:	685b      	ldreq	r3, [r3, #4]
 8006554:	1809      	addeq	r1, r1, r0
 8006556:	6021      	streq	r1, [r4, #0]
 8006558:	e7ed      	b.n	8006536 <_free_r+0x1e>
 800655a:	461a      	mov	r2, r3
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	b10b      	cbz	r3, 8006564 <_free_r+0x4c>
 8006560:	42a3      	cmp	r3, r4
 8006562:	d9fa      	bls.n	800655a <_free_r+0x42>
 8006564:	6811      	ldr	r1, [r2, #0]
 8006566:	1850      	adds	r0, r2, r1
 8006568:	42a0      	cmp	r0, r4
 800656a:	d10b      	bne.n	8006584 <_free_r+0x6c>
 800656c:	6820      	ldr	r0, [r4, #0]
 800656e:	4401      	add	r1, r0
 8006570:	1850      	adds	r0, r2, r1
 8006572:	4283      	cmp	r3, r0
 8006574:	6011      	str	r1, [r2, #0]
 8006576:	d1e0      	bne.n	800653a <_free_r+0x22>
 8006578:	6818      	ldr	r0, [r3, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	6053      	str	r3, [r2, #4]
 800657e:	4408      	add	r0, r1
 8006580:	6010      	str	r0, [r2, #0]
 8006582:	e7da      	b.n	800653a <_free_r+0x22>
 8006584:	d902      	bls.n	800658c <_free_r+0x74>
 8006586:	230c      	movs	r3, #12
 8006588:	602b      	str	r3, [r5, #0]
 800658a:	e7d6      	b.n	800653a <_free_r+0x22>
 800658c:	6820      	ldr	r0, [r4, #0]
 800658e:	1821      	adds	r1, r4, r0
 8006590:	428b      	cmp	r3, r1
 8006592:	bf04      	itt	eq
 8006594:	6819      	ldreq	r1, [r3, #0]
 8006596:	685b      	ldreq	r3, [r3, #4]
 8006598:	6063      	str	r3, [r4, #4]
 800659a:	bf04      	itt	eq
 800659c:	1809      	addeq	r1, r1, r0
 800659e:	6021      	streq	r1, [r4, #0]
 80065a0:	6054      	str	r4, [r2, #4]
 80065a2:	e7ca      	b.n	800653a <_free_r+0x22>
 80065a4:	bd38      	pop	{r3, r4, r5, pc}
 80065a6:	bf00      	nop
 80065a8:	200046a8 	.word	0x200046a8

080065ac <sbrk_aligned>:
 80065ac:	b570      	push	{r4, r5, r6, lr}
 80065ae:	4e0f      	ldr	r6, [pc, #60]	@ (80065ec <sbrk_aligned+0x40>)
 80065b0:	460c      	mov	r4, r1
 80065b2:	6831      	ldr	r1, [r6, #0]
 80065b4:	4605      	mov	r5, r0
 80065b6:	b911      	cbnz	r1, 80065be <sbrk_aligned+0x12>
 80065b8:	f000 fba4 	bl	8006d04 <_sbrk_r>
 80065bc:	6030      	str	r0, [r6, #0]
 80065be:	4621      	mov	r1, r4
 80065c0:	4628      	mov	r0, r5
 80065c2:	f000 fb9f 	bl	8006d04 <_sbrk_r>
 80065c6:	1c43      	adds	r3, r0, #1
 80065c8:	d103      	bne.n	80065d2 <sbrk_aligned+0x26>
 80065ca:	f04f 34ff 	mov.w	r4, #4294967295
 80065ce:	4620      	mov	r0, r4
 80065d0:	bd70      	pop	{r4, r5, r6, pc}
 80065d2:	1cc4      	adds	r4, r0, #3
 80065d4:	f024 0403 	bic.w	r4, r4, #3
 80065d8:	42a0      	cmp	r0, r4
 80065da:	d0f8      	beq.n	80065ce <sbrk_aligned+0x22>
 80065dc:	1a21      	subs	r1, r4, r0
 80065de:	4628      	mov	r0, r5
 80065e0:	f000 fb90 	bl	8006d04 <_sbrk_r>
 80065e4:	3001      	adds	r0, #1
 80065e6:	d1f2      	bne.n	80065ce <sbrk_aligned+0x22>
 80065e8:	e7ef      	b.n	80065ca <sbrk_aligned+0x1e>
 80065ea:	bf00      	nop
 80065ec:	200046a4 	.word	0x200046a4

080065f0 <_malloc_r>:
 80065f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065f4:	1ccd      	adds	r5, r1, #3
 80065f6:	f025 0503 	bic.w	r5, r5, #3
 80065fa:	3508      	adds	r5, #8
 80065fc:	2d0c      	cmp	r5, #12
 80065fe:	bf38      	it	cc
 8006600:	250c      	movcc	r5, #12
 8006602:	2d00      	cmp	r5, #0
 8006604:	4606      	mov	r6, r0
 8006606:	db01      	blt.n	800660c <_malloc_r+0x1c>
 8006608:	42a9      	cmp	r1, r5
 800660a:	d904      	bls.n	8006616 <_malloc_r+0x26>
 800660c:	230c      	movs	r3, #12
 800660e:	6033      	str	r3, [r6, #0]
 8006610:	2000      	movs	r0, #0
 8006612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006616:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80066ec <_malloc_r+0xfc>
 800661a:	f000 f869 	bl	80066f0 <__malloc_lock>
 800661e:	f8d8 3000 	ldr.w	r3, [r8]
 8006622:	461c      	mov	r4, r3
 8006624:	bb44      	cbnz	r4, 8006678 <_malloc_r+0x88>
 8006626:	4629      	mov	r1, r5
 8006628:	4630      	mov	r0, r6
 800662a:	f7ff ffbf 	bl	80065ac <sbrk_aligned>
 800662e:	1c43      	adds	r3, r0, #1
 8006630:	4604      	mov	r4, r0
 8006632:	d158      	bne.n	80066e6 <_malloc_r+0xf6>
 8006634:	f8d8 4000 	ldr.w	r4, [r8]
 8006638:	4627      	mov	r7, r4
 800663a:	2f00      	cmp	r7, #0
 800663c:	d143      	bne.n	80066c6 <_malloc_r+0xd6>
 800663e:	2c00      	cmp	r4, #0
 8006640:	d04b      	beq.n	80066da <_malloc_r+0xea>
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	4639      	mov	r1, r7
 8006646:	4630      	mov	r0, r6
 8006648:	eb04 0903 	add.w	r9, r4, r3
 800664c:	f000 fb5a 	bl	8006d04 <_sbrk_r>
 8006650:	4581      	cmp	r9, r0
 8006652:	d142      	bne.n	80066da <_malloc_r+0xea>
 8006654:	6821      	ldr	r1, [r4, #0]
 8006656:	1a6d      	subs	r5, r5, r1
 8006658:	4629      	mov	r1, r5
 800665a:	4630      	mov	r0, r6
 800665c:	f7ff ffa6 	bl	80065ac <sbrk_aligned>
 8006660:	3001      	adds	r0, #1
 8006662:	d03a      	beq.n	80066da <_malloc_r+0xea>
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	442b      	add	r3, r5
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	f8d8 3000 	ldr.w	r3, [r8]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	bb62      	cbnz	r2, 80066cc <_malloc_r+0xdc>
 8006672:	f8c8 7000 	str.w	r7, [r8]
 8006676:	e00f      	b.n	8006698 <_malloc_r+0xa8>
 8006678:	6822      	ldr	r2, [r4, #0]
 800667a:	1b52      	subs	r2, r2, r5
 800667c:	d420      	bmi.n	80066c0 <_malloc_r+0xd0>
 800667e:	2a0b      	cmp	r2, #11
 8006680:	d917      	bls.n	80066b2 <_malloc_r+0xc2>
 8006682:	1961      	adds	r1, r4, r5
 8006684:	42a3      	cmp	r3, r4
 8006686:	6025      	str	r5, [r4, #0]
 8006688:	bf18      	it	ne
 800668a:	6059      	strne	r1, [r3, #4]
 800668c:	6863      	ldr	r3, [r4, #4]
 800668e:	bf08      	it	eq
 8006690:	f8c8 1000 	streq.w	r1, [r8]
 8006694:	5162      	str	r2, [r4, r5]
 8006696:	604b      	str	r3, [r1, #4]
 8006698:	4630      	mov	r0, r6
 800669a:	f000 f82f 	bl	80066fc <__malloc_unlock>
 800669e:	f104 000b 	add.w	r0, r4, #11
 80066a2:	1d23      	adds	r3, r4, #4
 80066a4:	f020 0007 	bic.w	r0, r0, #7
 80066a8:	1ac2      	subs	r2, r0, r3
 80066aa:	bf1c      	itt	ne
 80066ac:	1a1b      	subne	r3, r3, r0
 80066ae:	50a3      	strne	r3, [r4, r2]
 80066b0:	e7af      	b.n	8006612 <_malloc_r+0x22>
 80066b2:	6862      	ldr	r2, [r4, #4]
 80066b4:	42a3      	cmp	r3, r4
 80066b6:	bf0c      	ite	eq
 80066b8:	f8c8 2000 	streq.w	r2, [r8]
 80066bc:	605a      	strne	r2, [r3, #4]
 80066be:	e7eb      	b.n	8006698 <_malloc_r+0xa8>
 80066c0:	4623      	mov	r3, r4
 80066c2:	6864      	ldr	r4, [r4, #4]
 80066c4:	e7ae      	b.n	8006624 <_malloc_r+0x34>
 80066c6:	463c      	mov	r4, r7
 80066c8:	687f      	ldr	r7, [r7, #4]
 80066ca:	e7b6      	b.n	800663a <_malloc_r+0x4a>
 80066cc:	461a      	mov	r2, r3
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	42a3      	cmp	r3, r4
 80066d2:	d1fb      	bne.n	80066cc <_malloc_r+0xdc>
 80066d4:	2300      	movs	r3, #0
 80066d6:	6053      	str	r3, [r2, #4]
 80066d8:	e7de      	b.n	8006698 <_malloc_r+0xa8>
 80066da:	230c      	movs	r3, #12
 80066dc:	6033      	str	r3, [r6, #0]
 80066de:	4630      	mov	r0, r6
 80066e0:	f000 f80c 	bl	80066fc <__malloc_unlock>
 80066e4:	e794      	b.n	8006610 <_malloc_r+0x20>
 80066e6:	6005      	str	r5, [r0, #0]
 80066e8:	e7d6      	b.n	8006698 <_malloc_r+0xa8>
 80066ea:	bf00      	nop
 80066ec:	200046a8 	.word	0x200046a8

080066f0 <__malloc_lock>:
 80066f0:	4801      	ldr	r0, [pc, #4]	@ (80066f8 <__malloc_lock+0x8>)
 80066f2:	f7ff bf01 	b.w	80064f8 <__retarget_lock_acquire_recursive>
 80066f6:	bf00      	nop
 80066f8:	200046a0 	.word	0x200046a0

080066fc <__malloc_unlock>:
 80066fc:	4801      	ldr	r0, [pc, #4]	@ (8006704 <__malloc_unlock+0x8>)
 80066fe:	f7ff befc 	b.w	80064fa <__retarget_lock_release_recursive>
 8006702:	bf00      	nop
 8006704:	200046a0 	.word	0x200046a0

08006708 <__ssputs_r>:
 8006708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800670c:	688e      	ldr	r6, [r1, #8]
 800670e:	461f      	mov	r7, r3
 8006710:	42be      	cmp	r6, r7
 8006712:	680b      	ldr	r3, [r1, #0]
 8006714:	4682      	mov	sl, r0
 8006716:	460c      	mov	r4, r1
 8006718:	4690      	mov	r8, r2
 800671a:	d82d      	bhi.n	8006778 <__ssputs_r+0x70>
 800671c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006720:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006724:	d026      	beq.n	8006774 <__ssputs_r+0x6c>
 8006726:	6965      	ldr	r5, [r4, #20]
 8006728:	6909      	ldr	r1, [r1, #16]
 800672a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800672e:	eba3 0901 	sub.w	r9, r3, r1
 8006732:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006736:	1c7b      	adds	r3, r7, #1
 8006738:	444b      	add	r3, r9
 800673a:	106d      	asrs	r5, r5, #1
 800673c:	429d      	cmp	r5, r3
 800673e:	bf38      	it	cc
 8006740:	461d      	movcc	r5, r3
 8006742:	0553      	lsls	r3, r2, #21
 8006744:	d527      	bpl.n	8006796 <__ssputs_r+0x8e>
 8006746:	4629      	mov	r1, r5
 8006748:	f7ff ff52 	bl	80065f0 <_malloc_r>
 800674c:	4606      	mov	r6, r0
 800674e:	b360      	cbz	r0, 80067aa <__ssputs_r+0xa2>
 8006750:	6921      	ldr	r1, [r4, #16]
 8006752:	464a      	mov	r2, r9
 8006754:	f7ff fed2 	bl	80064fc <memcpy>
 8006758:	89a3      	ldrh	r3, [r4, #12]
 800675a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800675e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006762:	81a3      	strh	r3, [r4, #12]
 8006764:	6126      	str	r6, [r4, #16]
 8006766:	6165      	str	r5, [r4, #20]
 8006768:	444e      	add	r6, r9
 800676a:	eba5 0509 	sub.w	r5, r5, r9
 800676e:	6026      	str	r6, [r4, #0]
 8006770:	60a5      	str	r5, [r4, #8]
 8006772:	463e      	mov	r6, r7
 8006774:	42be      	cmp	r6, r7
 8006776:	d900      	bls.n	800677a <__ssputs_r+0x72>
 8006778:	463e      	mov	r6, r7
 800677a:	6820      	ldr	r0, [r4, #0]
 800677c:	4632      	mov	r2, r6
 800677e:	4641      	mov	r1, r8
 8006780:	f000 faa6 	bl	8006cd0 <memmove>
 8006784:	68a3      	ldr	r3, [r4, #8]
 8006786:	1b9b      	subs	r3, r3, r6
 8006788:	60a3      	str	r3, [r4, #8]
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	4433      	add	r3, r6
 800678e:	6023      	str	r3, [r4, #0]
 8006790:	2000      	movs	r0, #0
 8006792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006796:	462a      	mov	r2, r5
 8006798:	f000 fac4 	bl	8006d24 <_realloc_r>
 800679c:	4606      	mov	r6, r0
 800679e:	2800      	cmp	r0, #0
 80067a0:	d1e0      	bne.n	8006764 <__ssputs_r+0x5c>
 80067a2:	6921      	ldr	r1, [r4, #16]
 80067a4:	4650      	mov	r0, sl
 80067a6:	f7ff feb7 	bl	8006518 <_free_r>
 80067aa:	230c      	movs	r3, #12
 80067ac:	f8ca 3000 	str.w	r3, [sl]
 80067b0:	89a3      	ldrh	r3, [r4, #12]
 80067b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067b6:	81a3      	strh	r3, [r4, #12]
 80067b8:	f04f 30ff 	mov.w	r0, #4294967295
 80067bc:	e7e9      	b.n	8006792 <__ssputs_r+0x8a>
	...

080067c0 <_svfiprintf_r>:
 80067c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c4:	4698      	mov	r8, r3
 80067c6:	898b      	ldrh	r3, [r1, #12]
 80067c8:	061b      	lsls	r3, r3, #24
 80067ca:	b09d      	sub	sp, #116	@ 0x74
 80067cc:	4607      	mov	r7, r0
 80067ce:	460d      	mov	r5, r1
 80067d0:	4614      	mov	r4, r2
 80067d2:	d510      	bpl.n	80067f6 <_svfiprintf_r+0x36>
 80067d4:	690b      	ldr	r3, [r1, #16]
 80067d6:	b973      	cbnz	r3, 80067f6 <_svfiprintf_r+0x36>
 80067d8:	2140      	movs	r1, #64	@ 0x40
 80067da:	f7ff ff09 	bl	80065f0 <_malloc_r>
 80067de:	6028      	str	r0, [r5, #0]
 80067e0:	6128      	str	r0, [r5, #16]
 80067e2:	b930      	cbnz	r0, 80067f2 <_svfiprintf_r+0x32>
 80067e4:	230c      	movs	r3, #12
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ec:	b01d      	add	sp, #116	@ 0x74
 80067ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f2:	2340      	movs	r3, #64	@ 0x40
 80067f4:	616b      	str	r3, [r5, #20]
 80067f6:	2300      	movs	r3, #0
 80067f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80067fa:	2320      	movs	r3, #32
 80067fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006800:	f8cd 800c 	str.w	r8, [sp, #12]
 8006804:	2330      	movs	r3, #48	@ 0x30
 8006806:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80069a4 <_svfiprintf_r+0x1e4>
 800680a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800680e:	f04f 0901 	mov.w	r9, #1
 8006812:	4623      	mov	r3, r4
 8006814:	469a      	mov	sl, r3
 8006816:	f813 2b01 	ldrb.w	r2, [r3], #1
 800681a:	b10a      	cbz	r2, 8006820 <_svfiprintf_r+0x60>
 800681c:	2a25      	cmp	r2, #37	@ 0x25
 800681e:	d1f9      	bne.n	8006814 <_svfiprintf_r+0x54>
 8006820:	ebba 0b04 	subs.w	fp, sl, r4
 8006824:	d00b      	beq.n	800683e <_svfiprintf_r+0x7e>
 8006826:	465b      	mov	r3, fp
 8006828:	4622      	mov	r2, r4
 800682a:	4629      	mov	r1, r5
 800682c:	4638      	mov	r0, r7
 800682e:	f7ff ff6b 	bl	8006708 <__ssputs_r>
 8006832:	3001      	adds	r0, #1
 8006834:	f000 80a7 	beq.w	8006986 <_svfiprintf_r+0x1c6>
 8006838:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800683a:	445a      	add	r2, fp
 800683c:	9209      	str	r2, [sp, #36]	@ 0x24
 800683e:	f89a 3000 	ldrb.w	r3, [sl]
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 809f 	beq.w	8006986 <_svfiprintf_r+0x1c6>
 8006848:	2300      	movs	r3, #0
 800684a:	f04f 32ff 	mov.w	r2, #4294967295
 800684e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006852:	f10a 0a01 	add.w	sl, sl, #1
 8006856:	9304      	str	r3, [sp, #16]
 8006858:	9307      	str	r3, [sp, #28]
 800685a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800685e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006860:	4654      	mov	r4, sl
 8006862:	2205      	movs	r2, #5
 8006864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006868:	484e      	ldr	r0, [pc, #312]	@ (80069a4 <_svfiprintf_r+0x1e4>)
 800686a:	f7f9 fcb9 	bl	80001e0 <memchr>
 800686e:	9a04      	ldr	r2, [sp, #16]
 8006870:	b9d8      	cbnz	r0, 80068aa <_svfiprintf_r+0xea>
 8006872:	06d0      	lsls	r0, r2, #27
 8006874:	bf44      	itt	mi
 8006876:	2320      	movmi	r3, #32
 8006878:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800687c:	0711      	lsls	r1, r2, #28
 800687e:	bf44      	itt	mi
 8006880:	232b      	movmi	r3, #43	@ 0x2b
 8006882:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006886:	f89a 3000 	ldrb.w	r3, [sl]
 800688a:	2b2a      	cmp	r3, #42	@ 0x2a
 800688c:	d015      	beq.n	80068ba <_svfiprintf_r+0xfa>
 800688e:	9a07      	ldr	r2, [sp, #28]
 8006890:	4654      	mov	r4, sl
 8006892:	2000      	movs	r0, #0
 8006894:	f04f 0c0a 	mov.w	ip, #10
 8006898:	4621      	mov	r1, r4
 800689a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800689e:	3b30      	subs	r3, #48	@ 0x30
 80068a0:	2b09      	cmp	r3, #9
 80068a2:	d94b      	bls.n	800693c <_svfiprintf_r+0x17c>
 80068a4:	b1b0      	cbz	r0, 80068d4 <_svfiprintf_r+0x114>
 80068a6:	9207      	str	r2, [sp, #28]
 80068a8:	e014      	b.n	80068d4 <_svfiprintf_r+0x114>
 80068aa:	eba0 0308 	sub.w	r3, r0, r8
 80068ae:	fa09 f303 	lsl.w	r3, r9, r3
 80068b2:	4313      	orrs	r3, r2
 80068b4:	9304      	str	r3, [sp, #16]
 80068b6:	46a2      	mov	sl, r4
 80068b8:	e7d2      	b.n	8006860 <_svfiprintf_r+0xa0>
 80068ba:	9b03      	ldr	r3, [sp, #12]
 80068bc:	1d19      	adds	r1, r3, #4
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	9103      	str	r1, [sp, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	bfbb      	ittet	lt
 80068c6:	425b      	neglt	r3, r3
 80068c8:	f042 0202 	orrlt.w	r2, r2, #2
 80068cc:	9307      	strge	r3, [sp, #28]
 80068ce:	9307      	strlt	r3, [sp, #28]
 80068d0:	bfb8      	it	lt
 80068d2:	9204      	strlt	r2, [sp, #16]
 80068d4:	7823      	ldrb	r3, [r4, #0]
 80068d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80068d8:	d10a      	bne.n	80068f0 <_svfiprintf_r+0x130>
 80068da:	7863      	ldrb	r3, [r4, #1]
 80068dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80068de:	d132      	bne.n	8006946 <_svfiprintf_r+0x186>
 80068e0:	9b03      	ldr	r3, [sp, #12]
 80068e2:	1d1a      	adds	r2, r3, #4
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	9203      	str	r2, [sp, #12]
 80068e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80068ec:	3402      	adds	r4, #2
 80068ee:	9305      	str	r3, [sp, #20]
 80068f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80069b4 <_svfiprintf_r+0x1f4>
 80068f4:	7821      	ldrb	r1, [r4, #0]
 80068f6:	2203      	movs	r2, #3
 80068f8:	4650      	mov	r0, sl
 80068fa:	f7f9 fc71 	bl	80001e0 <memchr>
 80068fe:	b138      	cbz	r0, 8006910 <_svfiprintf_r+0x150>
 8006900:	9b04      	ldr	r3, [sp, #16]
 8006902:	eba0 000a 	sub.w	r0, r0, sl
 8006906:	2240      	movs	r2, #64	@ 0x40
 8006908:	4082      	lsls	r2, r0
 800690a:	4313      	orrs	r3, r2
 800690c:	3401      	adds	r4, #1
 800690e:	9304      	str	r3, [sp, #16]
 8006910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006914:	4824      	ldr	r0, [pc, #144]	@ (80069a8 <_svfiprintf_r+0x1e8>)
 8006916:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800691a:	2206      	movs	r2, #6
 800691c:	f7f9 fc60 	bl	80001e0 <memchr>
 8006920:	2800      	cmp	r0, #0
 8006922:	d036      	beq.n	8006992 <_svfiprintf_r+0x1d2>
 8006924:	4b21      	ldr	r3, [pc, #132]	@ (80069ac <_svfiprintf_r+0x1ec>)
 8006926:	bb1b      	cbnz	r3, 8006970 <_svfiprintf_r+0x1b0>
 8006928:	9b03      	ldr	r3, [sp, #12]
 800692a:	3307      	adds	r3, #7
 800692c:	f023 0307 	bic.w	r3, r3, #7
 8006930:	3308      	adds	r3, #8
 8006932:	9303      	str	r3, [sp, #12]
 8006934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006936:	4433      	add	r3, r6
 8006938:	9309      	str	r3, [sp, #36]	@ 0x24
 800693a:	e76a      	b.n	8006812 <_svfiprintf_r+0x52>
 800693c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006940:	460c      	mov	r4, r1
 8006942:	2001      	movs	r0, #1
 8006944:	e7a8      	b.n	8006898 <_svfiprintf_r+0xd8>
 8006946:	2300      	movs	r3, #0
 8006948:	3401      	adds	r4, #1
 800694a:	9305      	str	r3, [sp, #20]
 800694c:	4619      	mov	r1, r3
 800694e:	f04f 0c0a 	mov.w	ip, #10
 8006952:	4620      	mov	r0, r4
 8006954:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006958:	3a30      	subs	r2, #48	@ 0x30
 800695a:	2a09      	cmp	r2, #9
 800695c:	d903      	bls.n	8006966 <_svfiprintf_r+0x1a6>
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0c6      	beq.n	80068f0 <_svfiprintf_r+0x130>
 8006962:	9105      	str	r1, [sp, #20]
 8006964:	e7c4      	b.n	80068f0 <_svfiprintf_r+0x130>
 8006966:	fb0c 2101 	mla	r1, ip, r1, r2
 800696a:	4604      	mov	r4, r0
 800696c:	2301      	movs	r3, #1
 800696e:	e7f0      	b.n	8006952 <_svfiprintf_r+0x192>
 8006970:	ab03      	add	r3, sp, #12
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	462a      	mov	r2, r5
 8006976:	4b0e      	ldr	r3, [pc, #56]	@ (80069b0 <_svfiprintf_r+0x1f0>)
 8006978:	a904      	add	r1, sp, #16
 800697a:	4638      	mov	r0, r7
 800697c:	f3af 8000 	nop.w
 8006980:	1c42      	adds	r2, r0, #1
 8006982:	4606      	mov	r6, r0
 8006984:	d1d6      	bne.n	8006934 <_svfiprintf_r+0x174>
 8006986:	89ab      	ldrh	r3, [r5, #12]
 8006988:	065b      	lsls	r3, r3, #25
 800698a:	f53f af2d 	bmi.w	80067e8 <_svfiprintf_r+0x28>
 800698e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006990:	e72c      	b.n	80067ec <_svfiprintf_r+0x2c>
 8006992:	ab03      	add	r3, sp, #12
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	462a      	mov	r2, r5
 8006998:	4b05      	ldr	r3, [pc, #20]	@ (80069b0 <_svfiprintf_r+0x1f0>)
 800699a:	a904      	add	r1, sp, #16
 800699c:	4638      	mov	r0, r7
 800699e:	f000 f879 	bl	8006a94 <_printf_i>
 80069a2:	e7ed      	b.n	8006980 <_svfiprintf_r+0x1c0>
 80069a4:	08006e00 	.word	0x08006e00
 80069a8:	08006e0a 	.word	0x08006e0a
 80069ac:	00000000 	.word	0x00000000
 80069b0:	08006709 	.word	0x08006709
 80069b4:	08006e06 	.word	0x08006e06

080069b8 <_printf_common>:
 80069b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069bc:	4616      	mov	r6, r2
 80069be:	4698      	mov	r8, r3
 80069c0:	688a      	ldr	r2, [r1, #8]
 80069c2:	690b      	ldr	r3, [r1, #16]
 80069c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069c8:	4293      	cmp	r3, r2
 80069ca:	bfb8      	it	lt
 80069cc:	4613      	movlt	r3, r2
 80069ce:	6033      	str	r3, [r6, #0]
 80069d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80069d4:	4607      	mov	r7, r0
 80069d6:	460c      	mov	r4, r1
 80069d8:	b10a      	cbz	r2, 80069de <_printf_common+0x26>
 80069da:	3301      	adds	r3, #1
 80069dc:	6033      	str	r3, [r6, #0]
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	0699      	lsls	r1, r3, #26
 80069e2:	bf42      	ittt	mi
 80069e4:	6833      	ldrmi	r3, [r6, #0]
 80069e6:	3302      	addmi	r3, #2
 80069e8:	6033      	strmi	r3, [r6, #0]
 80069ea:	6825      	ldr	r5, [r4, #0]
 80069ec:	f015 0506 	ands.w	r5, r5, #6
 80069f0:	d106      	bne.n	8006a00 <_printf_common+0x48>
 80069f2:	f104 0a19 	add.w	sl, r4, #25
 80069f6:	68e3      	ldr	r3, [r4, #12]
 80069f8:	6832      	ldr	r2, [r6, #0]
 80069fa:	1a9b      	subs	r3, r3, r2
 80069fc:	42ab      	cmp	r3, r5
 80069fe:	dc26      	bgt.n	8006a4e <_printf_common+0x96>
 8006a00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a04:	6822      	ldr	r2, [r4, #0]
 8006a06:	3b00      	subs	r3, #0
 8006a08:	bf18      	it	ne
 8006a0a:	2301      	movne	r3, #1
 8006a0c:	0692      	lsls	r2, r2, #26
 8006a0e:	d42b      	bmi.n	8006a68 <_printf_common+0xb0>
 8006a10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a14:	4641      	mov	r1, r8
 8006a16:	4638      	mov	r0, r7
 8006a18:	47c8      	blx	r9
 8006a1a:	3001      	adds	r0, #1
 8006a1c:	d01e      	beq.n	8006a5c <_printf_common+0xa4>
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	6922      	ldr	r2, [r4, #16]
 8006a22:	f003 0306 	and.w	r3, r3, #6
 8006a26:	2b04      	cmp	r3, #4
 8006a28:	bf02      	ittt	eq
 8006a2a:	68e5      	ldreq	r5, [r4, #12]
 8006a2c:	6833      	ldreq	r3, [r6, #0]
 8006a2e:	1aed      	subeq	r5, r5, r3
 8006a30:	68a3      	ldr	r3, [r4, #8]
 8006a32:	bf0c      	ite	eq
 8006a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a38:	2500      	movne	r5, #0
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	bfc4      	itt	gt
 8006a3e:	1a9b      	subgt	r3, r3, r2
 8006a40:	18ed      	addgt	r5, r5, r3
 8006a42:	2600      	movs	r6, #0
 8006a44:	341a      	adds	r4, #26
 8006a46:	42b5      	cmp	r5, r6
 8006a48:	d11a      	bne.n	8006a80 <_printf_common+0xc8>
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	e008      	b.n	8006a60 <_printf_common+0xa8>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	4652      	mov	r2, sl
 8006a52:	4641      	mov	r1, r8
 8006a54:	4638      	mov	r0, r7
 8006a56:	47c8      	blx	r9
 8006a58:	3001      	adds	r0, #1
 8006a5a:	d103      	bne.n	8006a64 <_printf_common+0xac>
 8006a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a64:	3501      	adds	r5, #1
 8006a66:	e7c6      	b.n	80069f6 <_printf_common+0x3e>
 8006a68:	18e1      	adds	r1, r4, r3
 8006a6a:	1c5a      	adds	r2, r3, #1
 8006a6c:	2030      	movs	r0, #48	@ 0x30
 8006a6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a72:	4422      	add	r2, r4
 8006a74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a7c:	3302      	adds	r3, #2
 8006a7e:	e7c7      	b.n	8006a10 <_printf_common+0x58>
 8006a80:	2301      	movs	r3, #1
 8006a82:	4622      	mov	r2, r4
 8006a84:	4641      	mov	r1, r8
 8006a86:	4638      	mov	r0, r7
 8006a88:	47c8      	blx	r9
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	d0e6      	beq.n	8006a5c <_printf_common+0xa4>
 8006a8e:	3601      	adds	r6, #1
 8006a90:	e7d9      	b.n	8006a46 <_printf_common+0x8e>
	...

08006a94 <_printf_i>:
 8006a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a98:	7e0f      	ldrb	r7, [r1, #24]
 8006a9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a9c:	2f78      	cmp	r7, #120	@ 0x78
 8006a9e:	4691      	mov	r9, r2
 8006aa0:	4680      	mov	r8, r0
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	469a      	mov	sl, r3
 8006aa6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006aaa:	d807      	bhi.n	8006abc <_printf_i+0x28>
 8006aac:	2f62      	cmp	r7, #98	@ 0x62
 8006aae:	d80a      	bhi.n	8006ac6 <_printf_i+0x32>
 8006ab0:	2f00      	cmp	r7, #0
 8006ab2:	f000 80d1 	beq.w	8006c58 <_printf_i+0x1c4>
 8006ab6:	2f58      	cmp	r7, #88	@ 0x58
 8006ab8:	f000 80b8 	beq.w	8006c2c <_printf_i+0x198>
 8006abc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ac0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ac4:	e03a      	b.n	8006b3c <_printf_i+0xa8>
 8006ac6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006aca:	2b15      	cmp	r3, #21
 8006acc:	d8f6      	bhi.n	8006abc <_printf_i+0x28>
 8006ace:	a101      	add	r1, pc, #4	@ (adr r1, 8006ad4 <_printf_i+0x40>)
 8006ad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ad4:	08006b2d 	.word	0x08006b2d
 8006ad8:	08006b41 	.word	0x08006b41
 8006adc:	08006abd 	.word	0x08006abd
 8006ae0:	08006abd 	.word	0x08006abd
 8006ae4:	08006abd 	.word	0x08006abd
 8006ae8:	08006abd 	.word	0x08006abd
 8006aec:	08006b41 	.word	0x08006b41
 8006af0:	08006abd 	.word	0x08006abd
 8006af4:	08006abd 	.word	0x08006abd
 8006af8:	08006abd 	.word	0x08006abd
 8006afc:	08006abd 	.word	0x08006abd
 8006b00:	08006c3f 	.word	0x08006c3f
 8006b04:	08006b6b 	.word	0x08006b6b
 8006b08:	08006bf9 	.word	0x08006bf9
 8006b0c:	08006abd 	.word	0x08006abd
 8006b10:	08006abd 	.word	0x08006abd
 8006b14:	08006c61 	.word	0x08006c61
 8006b18:	08006abd 	.word	0x08006abd
 8006b1c:	08006b6b 	.word	0x08006b6b
 8006b20:	08006abd 	.word	0x08006abd
 8006b24:	08006abd 	.word	0x08006abd
 8006b28:	08006c01 	.word	0x08006c01
 8006b2c:	6833      	ldr	r3, [r6, #0]
 8006b2e:	1d1a      	adds	r2, r3, #4
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6032      	str	r2, [r6, #0]
 8006b34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e09c      	b.n	8006c7a <_printf_i+0x1e6>
 8006b40:	6833      	ldr	r3, [r6, #0]
 8006b42:	6820      	ldr	r0, [r4, #0]
 8006b44:	1d19      	adds	r1, r3, #4
 8006b46:	6031      	str	r1, [r6, #0]
 8006b48:	0606      	lsls	r6, r0, #24
 8006b4a:	d501      	bpl.n	8006b50 <_printf_i+0xbc>
 8006b4c:	681d      	ldr	r5, [r3, #0]
 8006b4e:	e003      	b.n	8006b58 <_printf_i+0xc4>
 8006b50:	0645      	lsls	r5, r0, #25
 8006b52:	d5fb      	bpl.n	8006b4c <_printf_i+0xb8>
 8006b54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b58:	2d00      	cmp	r5, #0
 8006b5a:	da03      	bge.n	8006b64 <_printf_i+0xd0>
 8006b5c:	232d      	movs	r3, #45	@ 0x2d
 8006b5e:	426d      	negs	r5, r5
 8006b60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b64:	4858      	ldr	r0, [pc, #352]	@ (8006cc8 <_printf_i+0x234>)
 8006b66:	230a      	movs	r3, #10
 8006b68:	e011      	b.n	8006b8e <_printf_i+0xfa>
 8006b6a:	6821      	ldr	r1, [r4, #0]
 8006b6c:	6833      	ldr	r3, [r6, #0]
 8006b6e:	0608      	lsls	r0, r1, #24
 8006b70:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b74:	d402      	bmi.n	8006b7c <_printf_i+0xe8>
 8006b76:	0649      	lsls	r1, r1, #25
 8006b78:	bf48      	it	mi
 8006b7a:	b2ad      	uxthmi	r5, r5
 8006b7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b7e:	4852      	ldr	r0, [pc, #328]	@ (8006cc8 <_printf_i+0x234>)
 8006b80:	6033      	str	r3, [r6, #0]
 8006b82:	bf14      	ite	ne
 8006b84:	230a      	movne	r3, #10
 8006b86:	2308      	moveq	r3, #8
 8006b88:	2100      	movs	r1, #0
 8006b8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b8e:	6866      	ldr	r6, [r4, #4]
 8006b90:	60a6      	str	r6, [r4, #8]
 8006b92:	2e00      	cmp	r6, #0
 8006b94:	db05      	blt.n	8006ba2 <_printf_i+0x10e>
 8006b96:	6821      	ldr	r1, [r4, #0]
 8006b98:	432e      	orrs	r6, r5
 8006b9a:	f021 0104 	bic.w	r1, r1, #4
 8006b9e:	6021      	str	r1, [r4, #0]
 8006ba0:	d04b      	beq.n	8006c3a <_printf_i+0x1a6>
 8006ba2:	4616      	mov	r6, r2
 8006ba4:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ba8:	fb03 5711 	mls	r7, r3, r1, r5
 8006bac:	5dc7      	ldrb	r7, [r0, r7]
 8006bae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bb2:	462f      	mov	r7, r5
 8006bb4:	42bb      	cmp	r3, r7
 8006bb6:	460d      	mov	r5, r1
 8006bb8:	d9f4      	bls.n	8006ba4 <_printf_i+0x110>
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	d10b      	bne.n	8006bd6 <_printf_i+0x142>
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	07df      	lsls	r7, r3, #31
 8006bc2:	d508      	bpl.n	8006bd6 <_printf_i+0x142>
 8006bc4:	6923      	ldr	r3, [r4, #16]
 8006bc6:	6861      	ldr	r1, [r4, #4]
 8006bc8:	4299      	cmp	r1, r3
 8006bca:	bfde      	ittt	le
 8006bcc:	2330      	movle	r3, #48	@ 0x30
 8006bce:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bd2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006bd6:	1b92      	subs	r2, r2, r6
 8006bd8:	6122      	str	r2, [r4, #16]
 8006bda:	f8cd a000 	str.w	sl, [sp]
 8006bde:	464b      	mov	r3, r9
 8006be0:	aa03      	add	r2, sp, #12
 8006be2:	4621      	mov	r1, r4
 8006be4:	4640      	mov	r0, r8
 8006be6:	f7ff fee7 	bl	80069b8 <_printf_common>
 8006bea:	3001      	adds	r0, #1
 8006bec:	d14a      	bne.n	8006c84 <_printf_i+0x1f0>
 8006bee:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf2:	b004      	add	sp, #16
 8006bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	f043 0320 	orr.w	r3, r3, #32
 8006bfe:	6023      	str	r3, [r4, #0]
 8006c00:	4832      	ldr	r0, [pc, #200]	@ (8006ccc <_printf_i+0x238>)
 8006c02:	2778      	movs	r7, #120	@ 0x78
 8006c04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	6831      	ldr	r1, [r6, #0]
 8006c0c:	061f      	lsls	r7, r3, #24
 8006c0e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c12:	d402      	bmi.n	8006c1a <_printf_i+0x186>
 8006c14:	065f      	lsls	r7, r3, #25
 8006c16:	bf48      	it	mi
 8006c18:	b2ad      	uxthmi	r5, r5
 8006c1a:	6031      	str	r1, [r6, #0]
 8006c1c:	07d9      	lsls	r1, r3, #31
 8006c1e:	bf44      	itt	mi
 8006c20:	f043 0320 	orrmi.w	r3, r3, #32
 8006c24:	6023      	strmi	r3, [r4, #0]
 8006c26:	b11d      	cbz	r5, 8006c30 <_printf_i+0x19c>
 8006c28:	2310      	movs	r3, #16
 8006c2a:	e7ad      	b.n	8006b88 <_printf_i+0xf4>
 8006c2c:	4826      	ldr	r0, [pc, #152]	@ (8006cc8 <_printf_i+0x234>)
 8006c2e:	e7e9      	b.n	8006c04 <_printf_i+0x170>
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	f023 0320 	bic.w	r3, r3, #32
 8006c36:	6023      	str	r3, [r4, #0]
 8006c38:	e7f6      	b.n	8006c28 <_printf_i+0x194>
 8006c3a:	4616      	mov	r6, r2
 8006c3c:	e7bd      	b.n	8006bba <_printf_i+0x126>
 8006c3e:	6833      	ldr	r3, [r6, #0]
 8006c40:	6825      	ldr	r5, [r4, #0]
 8006c42:	6961      	ldr	r1, [r4, #20]
 8006c44:	1d18      	adds	r0, r3, #4
 8006c46:	6030      	str	r0, [r6, #0]
 8006c48:	062e      	lsls	r6, r5, #24
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	d501      	bpl.n	8006c52 <_printf_i+0x1be>
 8006c4e:	6019      	str	r1, [r3, #0]
 8006c50:	e002      	b.n	8006c58 <_printf_i+0x1c4>
 8006c52:	0668      	lsls	r0, r5, #25
 8006c54:	d5fb      	bpl.n	8006c4e <_printf_i+0x1ba>
 8006c56:	8019      	strh	r1, [r3, #0]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	6123      	str	r3, [r4, #16]
 8006c5c:	4616      	mov	r6, r2
 8006c5e:	e7bc      	b.n	8006bda <_printf_i+0x146>
 8006c60:	6833      	ldr	r3, [r6, #0]
 8006c62:	1d1a      	adds	r2, r3, #4
 8006c64:	6032      	str	r2, [r6, #0]
 8006c66:	681e      	ldr	r6, [r3, #0]
 8006c68:	6862      	ldr	r2, [r4, #4]
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	f7f9 fab7 	bl	80001e0 <memchr>
 8006c72:	b108      	cbz	r0, 8006c78 <_printf_i+0x1e4>
 8006c74:	1b80      	subs	r0, r0, r6
 8006c76:	6060      	str	r0, [r4, #4]
 8006c78:	6863      	ldr	r3, [r4, #4]
 8006c7a:	6123      	str	r3, [r4, #16]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c82:	e7aa      	b.n	8006bda <_printf_i+0x146>
 8006c84:	6923      	ldr	r3, [r4, #16]
 8006c86:	4632      	mov	r2, r6
 8006c88:	4649      	mov	r1, r9
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	47d0      	blx	sl
 8006c8e:	3001      	adds	r0, #1
 8006c90:	d0ad      	beq.n	8006bee <_printf_i+0x15a>
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	079b      	lsls	r3, r3, #30
 8006c96:	d413      	bmi.n	8006cc0 <_printf_i+0x22c>
 8006c98:	68e0      	ldr	r0, [r4, #12]
 8006c9a:	9b03      	ldr	r3, [sp, #12]
 8006c9c:	4298      	cmp	r0, r3
 8006c9e:	bfb8      	it	lt
 8006ca0:	4618      	movlt	r0, r3
 8006ca2:	e7a6      	b.n	8006bf2 <_printf_i+0x15e>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	4632      	mov	r2, r6
 8006ca8:	4649      	mov	r1, r9
 8006caa:	4640      	mov	r0, r8
 8006cac:	47d0      	blx	sl
 8006cae:	3001      	adds	r0, #1
 8006cb0:	d09d      	beq.n	8006bee <_printf_i+0x15a>
 8006cb2:	3501      	adds	r5, #1
 8006cb4:	68e3      	ldr	r3, [r4, #12]
 8006cb6:	9903      	ldr	r1, [sp, #12]
 8006cb8:	1a5b      	subs	r3, r3, r1
 8006cba:	42ab      	cmp	r3, r5
 8006cbc:	dcf2      	bgt.n	8006ca4 <_printf_i+0x210>
 8006cbe:	e7eb      	b.n	8006c98 <_printf_i+0x204>
 8006cc0:	2500      	movs	r5, #0
 8006cc2:	f104 0619 	add.w	r6, r4, #25
 8006cc6:	e7f5      	b.n	8006cb4 <_printf_i+0x220>
 8006cc8:	08006e11 	.word	0x08006e11
 8006ccc:	08006e22 	.word	0x08006e22

08006cd0 <memmove>:
 8006cd0:	4288      	cmp	r0, r1
 8006cd2:	b510      	push	{r4, lr}
 8006cd4:	eb01 0402 	add.w	r4, r1, r2
 8006cd8:	d902      	bls.n	8006ce0 <memmove+0x10>
 8006cda:	4284      	cmp	r4, r0
 8006cdc:	4623      	mov	r3, r4
 8006cde:	d807      	bhi.n	8006cf0 <memmove+0x20>
 8006ce0:	1e43      	subs	r3, r0, #1
 8006ce2:	42a1      	cmp	r1, r4
 8006ce4:	d008      	beq.n	8006cf8 <memmove+0x28>
 8006ce6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cee:	e7f8      	b.n	8006ce2 <memmove+0x12>
 8006cf0:	4402      	add	r2, r0
 8006cf2:	4601      	mov	r1, r0
 8006cf4:	428a      	cmp	r2, r1
 8006cf6:	d100      	bne.n	8006cfa <memmove+0x2a>
 8006cf8:	bd10      	pop	{r4, pc}
 8006cfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d02:	e7f7      	b.n	8006cf4 <memmove+0x24>

08006d04 <_sbrk_r>:
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	4d06      	ldr	r5, [pc, #24]	@ (8006d20 <_sbrk_r+0x1c>)
 8006d08:	2300      	movs	r3, #0
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	4608      	mov	r0, r1
 8006d0e:	602b      	str	r3, [r5, #0]
 8006d10:	f7fb f864 	bl	8001ddc <_sbrk>
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	d102      	bne.n	8006d1e <_sbrk_r+0x1a>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	b103      	cbz	r3, 8006d1e <_sbrk_r+0x1a>
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	bd38      	pop	{r3, r4, r5, pc}
 8006d20:	2000469c 	.word	0x2000469c

08006d24 <_realloc_r>:
 8006d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d28:	4607      	mov	r7, r0
 8006d2a:	4614      	mov	r4, r2
 8006d2c:	460d      	mov	r5, r1
 8006d2e:	b921      	cbnz	r1, 8006d3a <_realloc_r+0x16>
 8006d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d34:	4611      	mov	r1, r2
 8006d36:	f7ff bc5b 	b.w	80065f0 <_malloc_r>
 8006d3a:	b92a      	cbnz	r2, 8006d48 <_realloc_r+0x24>
 8006d3c:	f7ff fbec 	bl	8006518 <_free_r>
 8006d40:	4625      	mov	r5, r4
 8006d42:	4628      	mov	r0, r5
 8006d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d48:	f000 f81a 	bl	8006d80 <_malloc_usable_size_r>
 8006d4c:	4284      	cmp	r4, r0
 8006d4e:	4606      	mov	r6, r0
 8006d50:	d802      	bhi.n	8006d58 <_realloc_r+0x34>
 8006d52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d56:	d8f4      	bhi.n	8006d42 <_realloc_r+0x1e>
 8006d58:	4621      	mov	r1, r4
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	f7ff fc48 	bl	80065f0 <_malloc_r>
 8006d60:	4680      	mov	r8, r0
 8006d62:	b908      	cbnz	r0, 8006d68 <_realloc_r+0x44>
 8006d64:	4645      	mov	r5, r8
 8006d66:	e7ec      	b.n	8006d42 <_realloc_r+0x1e>
 8006d68:	42b4      	cmp	r4, r6
 8006d6a:	4622      	mov	r2, r4
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	bf28      	it	cs
 8006d70:	4632      	movcs	r2, r6
 8006d72:	f7ff fbc3 	bl	80064fc <memcpy>
 8006d76:	4629      	mov	r1, r5
 8006d78:	4638      	mov	r0, r7
 8006d7a:	f7ff fbcd 	bl	8006518 <_free_r>
 8006d7e:	e7f1      	b.n	8006d64 <_realloc_r+0x40>

08006d80 <_malloc_usable_size_r>:
 8006d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d84:	1f18      	subs	r0, r3, #4
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	bfbc      	itt	lt
 8006d8a:	580b      	ldrlt	r3, [r1, r0]
 8006d8c:	18c0      	addlt	r0, r0, r3
 8006d8e:	4770      	bx	lr

08006d90 <_init>:
 8006d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d92:	bf00      	nop
 8006d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d96:	bc08      	pop	{r3}
 8006d98:	469e      	mov	lr, r3
 8006d9a:	4770      	bx	lr

08006d9c <_fini>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	bf00      	nop
 8006da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da2:	bc08      	pop	{r3}
 8006da4:	469e      	mov	lr, r3
 8006da6:	4770      	bx	lr
