
drone_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cec4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  0800d068  0800d068  0000e068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d734  0800d734  0000f200  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d734  0800d734  0000e734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d73c  0800d73c  0000f200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d73c  0800d73c  0000e73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d740  0800d740  0000e740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800d744  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046d0  20000200  0800d944  0000f200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200048d0  0800d944  0000f8d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af42  00000000  00000000  0000f230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003baa  00000000  00000000  0002a172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  0002dd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000136b  00000000  00000000  0002f608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad41  00000000  00000000  00030973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0e3  00000000  00000000  0004b6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fa16  00000000  00000000  00067797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001071ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ec8  00000000  00000000  001071f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0010f0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d04c 	.word	0x0800d04c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	0800d04c 	.word	0x0800d04c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <Calculate_Reference>:
 */

#include "Drone_control.h"

void Calculate_Reference(Drone_Calculation_Typedef *dr,Drone_Control_Typedef *dc)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
	dr->picth_reference=(dc->RV-1500)*0.1f;//we can send reference direct from control
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	885b      	ldrh	r3, [r3, #2]
 800103e:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8001042:	ee07 3a90 	vmov	s15, r3
 8001046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800104a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80010c0 <Calculate_Reference+0x90>
 800104e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	edc3 7a00 	vstr	s15, [r3]
	dr->roll_reference=(dc->RH-1500)*0.1f;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001068:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80010c0 <Calculate_Reference+0x90>
 800106c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	edc3 7a01 	vstr	s15, [r3, #4]
	dr->yaw_reference=(dc->LH-1500)*0.1f;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	88db      	ldrh	r3, [r3, #6]
 800107a:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800107e:	ee07 3a90 	vmov	s15, r3
 8001082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001086:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80010c0 <Calculate_Reference+0x90>
 800108a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	edc3 7a02 	vstr	s15, [r3, #8]
	dr->high_reference=(dc->LV-1000)*10;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	889b      	ldrh	r3, [r3, #4]
 8001098:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	ee07 3a90 	vmov	s15, r3
 80010a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	3dcccccd 	.word	0x3dcccccd

080010c4 <escNormalOneshot125>:
	HAL_Delay(8000);
	HAL_Delay(1000);
}

void escNormalOneshot125(TIM_HandleTypeDef *htim,uint32_t speed,Timer_channel_enumTypedef CHANNEL)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	4613      	mov	r3, r2
 80010d0:	71fb      	strb	r3, [r7, #7]
	if(speed>=MAXIMUM_SPEED)
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	f642 1203 	movw	r2, #10499	@ 0x2903
 80010d8:	4293      	cmp	r3, r2
 80010da:	d903      	bls.n	80010e4 <escNormalOneshot125+0x20>
	{
		speed=MAXIMUM_SPEED;
 80010dc:	f642 1304 	movw	r3, #10500	@ 0x2904
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	e004      	b.n	80010ee <escNormalOneshot125+0x2a>
	}
	else if(speed<=MINIMUM_SPEED)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <escNormalOneshot125+0x2a>
	{
		speed=MINIMUM_SPEED;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
	}
	switch(CHANNEL)
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2b0c      	cmp	r3, #12
 80010f2:	d83d      	bhi.n	8001170 <escNormalOneshot125+0xac>
 80010f4:	a201      	add	r2, pc, #4	@ (adr r2, 80010fc <escNormalOneshot125+0x38>)
 80010f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fa:	bf00      	nop
 80010fc:	08001131 	.word	0x08001131
 8001100:	08001171 	.word	0x08001171
 8001104:	08001171 	.word	0x08001171
 8001108:	08001171 	.word	0x08001171
 800110c:	08001141 	.word	0x08001141
 8001110:	08001171 	.word	0x08001171
 8001114:	08001171 	.word	0x08001171
 8001118:	08001171 	.word	0x08001171
 800111c:	08001151 	.word	0x08001151
 8001120:	08001171 	.word	0x08001171
 8001124:	08001171 	.word	0x08001171
 8001128:	08001171 	.word	0x08001171
 800112c:	08001161 	.word	0x08001161
	{
	case CHANNEL1:
		htim->Instance->CCR1=speed+MINIMUM_ESC_PWM;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800113a:	3304      	adds	r3, #4
 800113c:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 800113e:	e017      	b.n	8001170 <escNormalOneshot125+0xac>
	case CHANNEL2:
			htim->Instance->CCR2=speed+MINIMUM_ESC_PWM;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800114a:	3304      	adds	r3, #4
 800114c:	6393      	str	r3, [r2, #56]	@ 0x38
			break;
 800114e:	e00f      	b.n	8001170 <escNormalOneshot125+0xac>
	case CHANNEL3:
			htim->Instance->CCR3=speed+MINIMUM_ESC_PWM;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800115a:	3304      	adds	r3, #4
 800115c:	63d3      	str	r3, [r2, #60]	@ 0x3c
			break;
 800115e:	e007      	b.n	8001170 <escNormalOneshot125+0xac>
	case CHANNEL4:
			htim->Instance->CCR4=speed+MINIMUM_ESC_PWM;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800116a:	3304      	adds	r3, #4
 800116c:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 800116e:	bf00      	nop
	}
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <Control4Motor>:

void Control4Motor(TIM_HandleTypeDef *htim,Motor_speed_Typedef *speed)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
	escNormalOneshot125(htim, speed->speed1, CHANNEL1);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2200      	movs	r2, #0
 800118c:	4619      	mov	r1, r3
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ff98 	bl	80010c4 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed2, CHANNEL2);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2204      	movs	r2, #4
 800119a:	4619      	mov	r1, r3
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff91 	bl	80010c4 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed3, CHANNEL3);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2208      	movs	r2, #8
 80011a8:	4619      	mov	r1, r3
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ff8a 	bl	80010c4 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed4, CHANNEL4);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	220c      	movs	r2, #12
 80011b6:	4619      	mov	r1, r3
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff83 	bl	80010c4 <escNormalOneshot125>

}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <pidControllersInit>:
 */

#include "PID.h"

void pidControllersInit(PIDControllers_Typedef* pid,float Kp,float Ki,float Kd,float to,float T,float upper_saturation,float lower_saturation)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b089      	sub	sp, #36	@ 0x24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	61f8      	str	r0, [r7, #28]
 80011ce:	ed87 0a06 	vstr	s0, [r7, #24]
 80011d2:	edc7 0a05 	vstr	s1, [r7, #20]
 80011d6:	ed87 1a04 	vstr	s2, [r7, #16]
 80011da:	edc7 1a03 	vstr	s3, [r7, #12]
 80011de:	ed87 2a02 	vstr	s4, [r7, #8]
 80011e2:	edc7 2a01 	vstr	s5, [r7, #4]
 80011e6:	ed87 3a00 	vstr	s6, [r7]
	pid->Kp=Kp;
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	601a      	str	r2, [r3, #0]
	pid->Ki=Ki;
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	605a      	str	r2, [r3, #4]
	pid->Kd=Kd;
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	609a      	str	r2, [r3, #8]
	pid->to=to;
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	60da      	str	r2, [r3, #12]
	pid->T=T;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	68ba      	ldr	r2, [r7, #8]
 8001206:	611a      	str	r2, [r3, #16]

	pid->et=0;
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
	pid->ek1=0;
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	619a      	str	r2, [r3, #24]

	pid->eKit=0;
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	61da      	str	r2, [r3, #28]
	pid->eKik1=0;
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	621a      	str	r2, [r3, #32]

	pid->propotion=0;
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->integrator=0;
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->deviator=0;
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	631a      	str	r2, [r3, #48]	@ 0x30
	pid->integratork1=0;
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->deviatork1=0;
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	635a      	str	r2, [r3, #52]	@ 0x34

	pid->upper_saturation=upper_saturation;
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	641a      	str	r2, [r3, #64]	@ 0x40
	pid->lower_saturation=lower_saturation;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	645a      	str	r2, [r3, #68]	@ 0x44

	pid->measurement=0;
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	639a      	str	r2, [r3, #56]	@ 0x38

	pid->u=0;
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	64da      	str	r2, [r3, #76]	@ 0x4c

}
 800126c:	bf00      	nop
 800126e:	3724      	adds	r7, #36	@ 0x24
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <pidUpdate>:
	pid->Ki=Ki;
	pid->Kd=Kd;
}

float pidUpdate(PIDControllers_Typedef* pid,float measurement,float input)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	ed87 0a02 	vstr	s0, [r7, #8]
 8001284:	edc7 0a01 	vstr	s1, [r7, #4]
	//get pid input
	pid->expected=input;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pid->measurement=measurement;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	639a      	str	r2, [r3, #56]	@ 0x38
	pid->et=pid->expected-pid->measurement;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80012a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	edc3 7a05 	vstr	s15, [r3, #20]
	{
		pid->eKik1=0;
		pid->eKit=0;
	}
#else
	pid->eKit=pid->et;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	695a      	ldr	r2, [r3, #20]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	61da      	str	r2, [r3, #28]
	pid->eKik1=pid->ek1;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	699a      	ldr	r2, [r3, #24]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	621a      	str	r2, [r3, #32]
#endif
	//PID calculation
	pid->propotion=pid->Kp*pid->et;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	ed93 7a00 	vldr	s14, [r3]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80012c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	pid->integrator=((pid->Ki*pid->T)/2)*(pid->eKit+pid->eKik1)+pid->integratork1;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80012dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80012e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	edd3 6a07 	vldr	s13, [r3, #28]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80012f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80012f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	pid->deviator=((2*pid->Kd)/(2*pid->to+pid->T))*(pid->et-pid->ek1)+((2*pid->to-pid->T)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001312:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	edd3 7a03 	vldr	s15, [r3, #12]
 800131c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	edd3 7a04 	vldr	s15, [r3, #16]
 8001326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800132a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	edd3 6a05 	vldr	s13, [r3, #20]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	edd3 7a06 	vldr	s15, [r3, #24]
 800133a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800133e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	edd3 7a03 	vldr	s15, [r3, #12]
 8001348:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001352:	ee36 6ae7 	vsub.f32	s12, s13, s15
			/(2*pid->to+pid->T))*pid->deviatork1;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	edd3 7a03 	vldr	s15, [r3, #12]
 800135c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	edd3 7a04 	vldr	s15, [r3, #16]
 8001366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800136a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001374:	ee66 7aa7 	vmul.f32	s15, s13, s15
	pid->deviator=((2*pid->Kd)/(2*pid->to+pid->T))*(pid->et-pid->ek1)+((2*pid->to-pid->T)
 8001378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	pid->ek1=pid->et;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	695a      	ldr	r2, [r3, #20]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	619a      	str	r2, [r3, #24]
	pid->integratork1=pid->integrator;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->deviatork1=pid->deviator;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	635a      	str	r2, [r3, #52]	@ 0x34
	pid->v=pid->propotion+pid->integrator+pid->deviator;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80013a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80013b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

	//saturation
	if(pid->v>pid->upper_saturation)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80013c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ce:	dd04      	ble.n	80013da <pidUpdate+0x162>
	{
		pid->u=pid->upper_saturation;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80013d8:	e013      	b.n	8001402 <pidUpdate+0x18a>
	}
	else if(pid->v<(pid->lower_saturation))
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80013e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d504      	bpl.n	80013fa <pidUpdate+0x182>
	{
		pid->u=pid->lower_saturation;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80013f8:	e003      	b.n	8001402 <pidUpdate+0x18a>
	}
	else
	{
		pid->u=pid->v;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	64da      	str	r2, [r3, #76]	@ 0x4c
	}

	return pid->u;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	ee07 3a90 	vmov	s15, r3
}
 800140a:	eeb0 0a67 	vmov.f32	s0, s15
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	4619      	mov	r1, r3
 8001426:	2007      	movs	r0, #7
 8001428:	f000 fa64 	bl	80018f4 <bno055_writeData>
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	4619      	mov	r1, r3
 8001442:	203d      	movs	r0, #61	@ 0x3d
 8001444:	f000 fa56 	bl	80018f4 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d103      	bne.n	8001456 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800144e:	2013      	movs	r0, #19
 8001450:	f000 fa44 	bl	80018dc <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001454:	e002      	b.n	800145c <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001456:	2007      	movs	r0, #7
 8001458:	f000 fa40 	bl	80018dc <bno055_delay>
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff ffe3 	bl	8001434 <bno055_setOperationMode>
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}

08001472 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001472:	b580      	push	{r7, lr}
 8001474:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001476:	200c      	movs	r0, #12
 8001478:	f7ff ffdc 	bl	8001434 <bno055_setOperationMode>
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}

08001480 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001484:	2120      	movs	r1, #32
 8001486:	203f      	movs	r0, #63	@ 0x3f
 8001488:	f000 fa34 	bl	80018f4 <bno055_writeData>
  bno055_delay(700);
 800148c:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001490:	f000 fa24 	bl	80018dc <bno055_delay>
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
  bno055_reset();
 800149e:	f7ff ffef 	bl	8001480 <bno055_reset>

  uint8_t id = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80014a6:	1dfb      	adds	r3, r7, #7
 80014a8:	2201      	movs	r2, #1
 80014aa:	4619      	mov	r1, r3
 80014ac:	2000      	movs	r0, #0
 80014ae:	f000 fb0d 	bl	8001acc <bno055_readData>
  if (id != BNO055_ID) {
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2ba0      	cmp	r3, #160	@ 0xa0
 80014b6:	d004      	beq.n	80014c2 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	4619      	mov	r1, r3
 80014bc:	4809      	ldr	r0, [pc, #36]	@ (80014e4 <bno055_setup+0x4c>)
 80014be:	f008 f8b7 	bl	8009630 <iprintf>
  }
  bno055_setPage(0);
 80014c2:	2000      	movs	r0, #0
 80014c4:	f7ff ffa8 	bl	8001418 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80014c8:	2100      	movs	r1, #0
 80014ca:	203f      	movs	r0, #63	@ 0x3f
 80014cc:	f000 fa12 	bl	80018f4 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80014d0:	f7ff ffc8 	bl	8001464 <bno055_setOperationModeConfig>
  bno055_delay(10);
 80014d4:	200a      	movs	r0, #10
 80014d6:	f000 fa01 	bl	80018dc <bno055_delay>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	0800d068 	.word	0x0800d068

080014e8 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80014e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014ec:	b09e      	sub	sp, #120	@ 0x78
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff ff8e 	bl	8001418 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80014fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001500:	2b20      	cmp	r3, #32
 8001502:	d108      	bne.n	8001516 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001504:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800150c:	2208      	movs	r2, #8
 800150e:	4618      	mov	r0, r3
 8001510:	f000 fadc 	bl	8001acc <bno055_readData>
 8001514:	e007      	b.n	8001526 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001516:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800151a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800151e:	2206      	movs	r2, #6
 8001520:	4618      	mov	r0, r3
 8001522:	f000 fad3 	bl	8001acc <bno055_readData>

  double scale = 1;
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	4b8e      	ldr	r3, [pc, #568]	@ (8001764 <bno055_getVector+0x27c>)
 800152c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001534:	2b0e      	cmp	r3, #14
 8001536:	d109      	bne.n	800154c <bno055_getVector+0x64>
    scale = magScale;
 8001538:	4b8b      	ldr	r3, [pc, #556]	@ (8001768 <bno055_getVector+0x280>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe ffe9 	bl	8000514 <__aeabi_ui2d>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800154a:	e03e      	b.n	80015ca <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 800154c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001550:	2b08      	cmp	r3, #8
 8001552:	d007      	beq.n	8001564 <bno055_getVector+0x7c>
 8001554:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001558:	2b28      	cmp	r3, #40	@ 0x28
 800155a:	d003      	beq.n	8001564 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 800155c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001560:	2b2e      	cmp	r3, #46	@ 0x2e
 8001562:	d109      	bne.n	8001578 <bno055_getVector+0x90>
    scale = accelScale;
 8001564:	4b81      	ldr	r3, [pc, #516]	@ (800176c <bno055_getVector+0x284>)
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ffd3 	bl	8000514 <__aeabi_ui2d>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001576:	e028      	b.n	80015ca <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001578:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800157c:	2b14      	cmp	r3, #20
 800157e:	d109      	bne.n	8001594 <bno055_getVector+0xac>
    scale = angularRateScale;
 8001580:	4b7b      	ldr	r3, [pc, #492]	@ (8001770 <bno055_getVector+0x288>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ffc5 	bl	8000514 <__aeabi_ui2d>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001592:	e01a      	b.n	80015ca <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001594:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001598:	2b1a      	cmp	r3, #26
 800159a:	d109      	bne.n	80015b0 <bno055_getVector+0xc8>
    scale = eulerScale;
 800159c:	4b75      	ldr	r3, [pc, #468]	@ (8001774 <bno055_getVector+0x28c>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffb7 	bl	8000514 <__aeabi_ui2d>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80015ae:	e00c      	b.n	80015ca <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80015b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015b4:	2b20      	cmp	r3, #32
 80015b6:	d108      	bne.n	80015ca <bno055_getVector+0xe2>
    scale = quaScale;
 80015b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001778 <bno055_getVector+0x290>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffa9 	bl	8000514 <__aeabi_ui2d>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80015ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ce:	2220      	movs	r2, #32
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f008 f996 	bl	8009904 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80015d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d154      	bne.n	800168a <bno055_getVector+0x1a2>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80015e0:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ff9d 	bl	8000534 <__aeabi_i2d>
 80015fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015fe:	f7ff f92d 	bl	800085c <__aeabi_ddiv>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800160a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800160e:	b21b      	sxth	r3, r3
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	b21a      	sxth	r2, r3
 8001614:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001618:	b21b      	sxth	r3, r3
 800161a:	4313      	orrs	r3, r2
 800161c:	b21b      	sxth	r3, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff88 	bl	8000534 <__aeabi_i2d>
 8001624:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001628:	f7ff f918 	bl	800085c <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001634:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001638:	b21b      	sxth	r3, r3
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	b21a      	sxth	r2, r3
 800163e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001642:	b21b      	sxth	r3, r3
 8001644:	4313      	orrs	r3, r2
 8001646:	b21b      	sxth	r3, r3
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ff73 	bl	8000534 <__aeabi_i2d>
 800164e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001652:	f7ff f903 	bl	800085c <__aeabi_ddiv>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 800165e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001662:	b21b      	sxth	r3, r3
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	b21a      	sxth	r2, r3
 8001668:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b21b      	sxth	r3, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff5e 	bl	8000534 <__aeabi_i2d>
 8001678:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800167c:	f7ff f8ee 	bl	800085c <__aeabi_ddiv>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001688:	e03e      	b.n	8001708 <bno055_getVector+0x220>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800168a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800168e:	b21b      	sxth	r3, r3
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21a      	sxth	r2, r3
 8001694:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001698:	b21b      	sxth	r3, r3
 800169a:	4313      	orrs	r3, r2
 800169c:	b21b      	sxth	r3, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff48 	bl	8000534 <__aeabi_i2d>
 80016a4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80016a8:	f7ff f8d8 	bl	800085c <__aeabi_ddiv>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80016b4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	b21a      	sxth	r2, r3
 80016be:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80016c2:	b21b      	sxth	r3, r3
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff33 	bl	8000534 <__aeabi_i2d>
 80016ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80016d2:	f7ff f8c3 	bl	800085c <__aeabi_ddiv>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80016de:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	b21a      	sxth	r2, r3
 80016e8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	4313      	orrs	r3, r2
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe ff1e 	bl	8000534 <__aeabi_i2d>
 80016f8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80016fc:	f7ff f8ae 	bl	800085c <__aeabi_ddiv>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 8001708:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800170c:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8001710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001714:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001718:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800171c:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001720:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001724:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001728:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800172c:	ec49 8b14 	vmov	d4, r8, r9
 8001730:	ec45 4b15 	vmov	d5, r4, r5
 8001734:	ec41 0b16 	vmov	d6, r0, r1
 8001738:	ec43 2b17 	vmov	d7, r2, r3
}
 800173c:	eeb0 0a44 	vmov.f32	s0, s8
 8001740:	eef0 0a64 	vmov.f32	s1, s9
 8001744:	eeb0 1a45 	vmov.f32	s2, s10
 8001748:	eef0 1a65 	vmov.f32	s3, s11
 800174c:	eeb0 2a46 	vmov.f32	s4, s12
 8001750:	eef0 2a66 	vmov.f32	s5, s13
 8001754:	eeb0 3a47 	vmov.f32	s6, s14
 8001758:	eef0 3a67 	vmov.f32	s7, s15
 800175c:	3778      	adds	r7, #120	@ 0x78
 800175e:	46bd      	mov	sp, r7
 8001760:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001764:	3ff00000 	.word	0x3ff00000
 8001768:	20000006 	.word	0x20000006
 800176c:	20000000 	.word	0x20000000
 8001770:	20000002 	.word	0x20000002
 8001774:	20000004 	.word	0x20000004
 8001778:	20000008 	.word	0x20000008

0800177c <bno055_getVectorGyroscope>:
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 800177c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001780:	b090      	sub	sp, #64	@ 0x40
 8001782:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 8001784:	2014      	movs	r0, #20
 8001786:	f7ff feaf 	bl	80014e8 <bno055_getVector>
 800178a:	eeb0 4a40 	vmov.f32	s8, s0
 800178e:	eef0 4a60 	vmov.f32	s9, s1
 8001792:	eeb0 5a41 	vmov.f32	s10, s2
 8001796:	eef0 5a61 	vmov.f32	s11, s3
 800179a:	eeb0 6a42 	vmov.f32	s12, s4
 800179e:	eef0 6a62 	vmov.f32	s13, s5
 80017a2:	eeb0 7a43 	vmov.f32	s14, s6
 80017a6:	eef0 7a63 	vmov.f32	s15, s7
 80017aa:	ed87 4b08 	vstr	d4, [r7, #32]
 80017ae:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80017b2:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80017b6:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80017ba:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017be:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80017c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80017c6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80017ca:	ec49 8b14 	vmov	d4, r8, r9
 80017ce:	ec45 4b15 	vmov	d5, r4, r5
 80017d2:	ec41 0b16 	vmov	d6, r0, r1
 80017d6:	ec43 2b17 	vmov	d7, r2, r3
}
 80017da:	eeb0 0a44 	vmov.f32	s0, s8
 80017de:	eef0 0a64 	vmov.f32	s1, s9
 80017e2:	eeb0 1a45 	vmov.f32	s2, s10
 80017e6:	eef0 1a65 	vmov.f32	s3, s11
 80017ea:	eeb0 2a46 	vmov.f32	s4, s12
 80017ee:	eef0 2a66 	vmov.f32	s5, s13
 80017f2:	eeb0 3a47 	vmov.f32	s6, s14
 80017f6:	eef0 3a67 	vmov.f32	s7, s15
 80017fa:	3740      	adds	r7, #64	@ 0x40
 80017fc:	46bd      	mov	sp, r7
 80017fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001802 <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 8001802:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001806:	b090      	sub	sp, #64	@ 0x40
 8001808:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 800180a:	201a      	movs	r0, #26
 800180c:	f7ff fe6c 	bl	80014e8 <bno055_getVector>
 8001810:	eeb0 4a40 	vmov.f32	s8, s0
 8001814:	eef0 4a60 	vmov.f32	s9, s1
 8001818:	eeb0 5a41 	vmov.f32	s10, s2
 800181c:	eef0 5a61 	vmov.f32	s11, s3
 8001820:	eeb0 6a42 	vmov.f32	s12, s4
 8001824:	eef0 6a62 	vmov.f32	s13, s5
 8001828:	eeb0 7a43 	vmov.f32	s14, s6
 800182c:	eef0 7a63 	vmov.f32	s15, s7
 8001830:	ed87 4b08 	vstr	d4, [r7, #32]
 8001834:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001838:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800183c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001840:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001844:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001848:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800184c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001850:	ec49 8b14 	vmov	d4, r8, r9
 8001854:	ec45 4b15 	vmov	d5, r4, r5
 8001858:	ec41 0b16 	vmov	d6, r0, r1
 800185c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001860:	eeb0 0a44 	vmov.f32	s0, s8
 8001864:	eef0 0a64 	vmov.f32	s1, s9
 8001868:	eeb0 1a45 	vmov.f32	s2, s10
 800186c:	eef0 1a65 	vmov.f32	s3, s11
 8001870:	eeb0 2a46 	vmov.f32	s4, s12
 8001874:	eef0 2a66 	vmov.f32	s5, s13
 8001878:	eeb0 3a47 	vmov.f32	s6, s14
 800187c:	eef0 3a67 	vmov.f32	s7, s15
 8001880:	3740      	adds	r7, #64	@ 0x40
 8001882:	46bd      	mov	sp, r7
 8001884:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001888 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4a07      	ldr	r2, [pc, #28]	@ (80018b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001898:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	4a06      	ldr	r2, [pc, #24]	@ (80018b8 <vApplicationGetIdleTaskMemory+0x30>)
 800189e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2280      	movs	r2, #128	@ 0x80
 80018a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	2000021c 	.word	0x2000021c
 80018b8:	200002bc 	.word	0x200002bc

080018bc <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80018c4:	4a04      	ldr	r2, [pc, #16]	@ (80018d8 <bno055_assignI2C+0x1c>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6013      	str	r3, [r2, #0]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	200004bc 	.word	0x200004bc

080018dc <bno055_delay>:

void bno055_delay(int time) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f005 fd5b 	bl	80073a2 <osDelay>
#else
  HAL_Delay(time);
#endif
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	4603      	mov	r3, r0
 80018fc:	460a      	mov	r2, r1
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	4613      	mov	r3, r2
 8001902:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	733b      	strb	r3, [r7, #12]
 8001908:	79bb      	ldrb	r3, [r7, #6]
 800190a:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 800190c:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <bno055_writeData+0x184>)
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	f107 020c 	add.w	r2, r7, #12
 8001914:	230a      	movs	r3, #10
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	2302      	movs	r3, #2
 800191a:	2150      	movs	r1, #80	@ 0x50
 800191c:	f002 f93e 	bl	8003b9c <HAL_I2C_Master_Transmit>
 8001920:	4603      	mov	r3, r0
 8001922:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001924:	7dfb      	ldrb	r3, [r7, #23]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80a0 	beq.w	8001a6c <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 800192c:	7dfb      	ldrb	r3, [r7, #23]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d103      	bne.n	800193a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001932:	4852      	ldr	r0, [pc, #328]	@ (8001a7c <bno055_writeData+0x188>)
 8001934:	f007 fee4 	bl	8009700 <puts>
 8001938:	e012      	b.n	8001960 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 800193a:	7dfb      	ldrb	r3, [r7, #23]
 800193c:	2b03      	cmp	r3, #3
 800193e:	d103      	bne.n	8001948 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001940:	484f      	ldr	r0, [pc, #316]	@ (8001a80 <bno055_writeData+0x18c>)
 8001942:	f007 fedd 	bl	8009700 <puts>
 8001946:	e00b      	b.n	8001960 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001948:	7dfb      	ldrb	r3, [r7, #23]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d103      	bne.n	8001956 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800194e:	484d      	ldr	r0, [pc, #308]	@ (8001a84 <bno055_writeData+0x190>)
 8001950:	f007 fed6 	bl	8009700 <puts>
 8001954:	e004      	b.n	8001960 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001956:	7dfb      	ldrb	r3, [r7, #23]
 8001958:	4619      	mov	r1, r3
 800195a:	484b      	ldr	r0, [pc, #300]	@ (8001a88 <bno055_writeData+0x194>)
 800195c:	f007 fe68 	bl	8009630 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001960:	4b45      	ldr	r3, [pc, #276]	@ (8001a78 <bno055_writeData+0x184>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f002 fc57 	bl	8004218 <HAL_I2C_GetError>
 800196a:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d07e      	beq.n	8001a70 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d103      	bne.n	8001980 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001978:	4844      	ldr	r0, [pc, #272]	@ (8001a8c <bno055_writeData+0x198>)
 800197a:	f007 fec1 	bl	8009700 <puts>
 800197e:	e021      	b.n	80019c4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d103      	bne.n	800198e <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001986:	4842      	ldr	r0, [pc, #264]	@ (8001a90 <bno055_writeData+0x19c>)
 8001988:	f007 feba 	bl	8009700 <puts>
 800198c:	e01a      	b.n	80019c4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	2b04      	cmp	r3, #4
 8001992:	d103      	bne.n	800199c <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001994:	483f      	ldr	r0, [pc, #252]	@ (8001a94 <bno055_writeData+0x1a0>)
 8001996:	f007 feb3 	bl	8009700 <puts>
 800199a:	e013      	b.n	80019c4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d103      	bne.n	80019aa <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 80019a2:	483d      	ldr	r0, [pc, #244]	@ (8001a98 <bno055_writeData+0x1a4>)
 80019a4:	f007 feac 	bl	8009700 <puts>
 80019a8:	e00c      	b.n	80019c4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	2b10      	cmp	r3, #16
 80019ae:	d103      	bne.n	80019b8 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80019b0:	483a      	ldr	r0, [pc, #232]	@ (8001a9c <bno055_writeData+0x1a8>)
 80019b2:	f007 fea5 	bl	8009700 <puts>
 80019b6:	e005      	b.n	80019c4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	2b20      	cmp	r3, #32
 80019bc:	d102      	bne.n	80019c4 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80019be:	4838      	ldr	r0, [pc, #224]	@ (8001aa0 <bno055_writeData+0x1ac>)
 80019c0:	f007 fe9e 	bl	8009700 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80019c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a78 <bno055_writeData+0x184>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f002 fc17 	bl	80041fc <HAL_I2C_GetState>
 80019ce:	4603      	mov	r3, r0
 80019d0:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d103      	bne.n	80019e0 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80019d8:	4832      	ldr	r0, [pc, #200]	@ (8001aa4 <bno055_writeData+0x1b0>)
 80019da:	f007 fe91 	bl	8009700 <puts>
 80019de:	e048      	b.n	8001a72 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	2b20      	cmp	r3, #32
 80019e4:	d103      	bne.n	80019ee <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80019e6:	482f      	ldr	r0, [pc, #188]	@ (8001aa4 <bno055_writeData+0x1b0>)
 80019e8:	f007 fe8a 	bl	8009700 <puts>
 80019ec:	e041      	b.n	8001a72 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	2b24      	cmp	r3, #36	@ 0x24
 80019f2:	d103      	bne.n	80019fc <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80019f4:	482c      	ldr	r0, [pc, #176]	@ (8001aa8 <bno055_writeData+0x1b4>)
 80019f6:	f007 fe83 	bl	8009700 <puts>
 80019fa:	e03a      	b.n	8001a72 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	2b21      	cmp	r3, #33	@ 0x21
 8001a00:	d103      	bne.n	8001a0a <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001a02:	482a      	ldr	r0, [pc, #168]	@ (8001aac <bno055_writeData+0x1b8>)
 8001a04:	f007 fe7c 	bl	8009700 <puts>
 8001a08:	e033      	b.n	8001a72 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	2b22      	cmp	r3, #34	@ 0x22
 8001a0e:	d103      	bne.n	8001a18 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001a10:	4827      	ldr	r0, [pc, #156]	@ (8001ab0 <bno055_writeData+0x1bc>)
 8001a12:	f007 fe75 	bl	8009700 <puts>
 8001a16:	e02c      	b.n	8001a72 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	2b28      	cmp	r3, #40	@ 0x28
 8001a1c:	d103      	bne.n	8001a26 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001a1e:	4825      	ldr	r0, [pc, #148]	@ (8001ab4 <bno055_writeData+0x1c0>)
 8001a20:	f007 fe6e 	bl	8009700 <puts>
 8001a24:	e025      	b.n	8001a72 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	2b29      	cmp	r3, #41	@ 0x29
 8001a2a:	d103      	bne.n	8001a34 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001a2c:	4822      	ldr	r0, [pc, #136]	@ (8001ab8 <bno055_writeData+0x1c4>)
 8001a2e:	f007 fe67 	bl	8009700 <puts>
 8001a32:	e01e      	b.n	8001a72 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a38:	d103      	bne.n	8001a42 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001a3a:	4820      	ldr	r0, [pc, #128]	@ (8001abc <bno055_writeData+0x1c8>)
 8001a3c:	f007 fe60 	bl	8009700 <puts>
 8001a40:	e017      	b.n	8001a72 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	2b60      	cmp	r3, #96	@ 0x60
 8001a46:	d103      	bne.n	8001a50 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001a48:	481d      	ldr	r0, [pc, #116]	@ (8001ac0 <bno055_writeData+0x1cc>)
 8001a4a:	f007 fe59 	bl	8009700 <puts>
 8001a4e:	e010      	b.n	8001a72 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	2ba0      	cmp	r3, #160	@ 0xa0
 8001a54:	d103      	bne.n	8001a5e <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001a56:	481b      	ldr	r0, [pc, #108]	@ (8001ac4 <bno055_writeData+0x1d0>)
 8001a58:	f007 fe52 	bl	8009700 <puts>
 8001a5c:	e009      	b.n	8001a72 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	2be0      	cmp	r3, #224	@ 0xe0
 8001a62:	d106      	bne.n	8001a72 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001a64:	4818      	ldr	r0, [pc, #96]	@ (8001ac8 <bno055_writeData+0x1d4>)
 8001a66:	f007 fe4b 	bl	8009700 <puts>
 8001a6a:	e002      	b.n	8001a72 <bno055_writeData+0x17e>
    return;
 8001a6c:	bf00      	nop
 8001a6e:	e000      	b.n	8001a72 <bno055_writeData+0x17e>
    return;
 8001a70:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200004bc 	.word	0x200004bc
 8001a7c:	0800d0a4 	.word	0x0800d0a4
 8001a80:	0800d0c8 	.word	0x0800d0c8
 8001a84:	0800d0f0 	.word	0x0800d0f0
 8001a88:	0800d114 	.word	0x0800d114
 8001a8c:	0800d12c 	.word	0x0800d12c
 8001a90:	0800d140 	.word	0x0800d140
 8001a94:	0800d154 	.word	0x0800d154
 8001a98:	0800d168 	.word	0x0800d168
 8001a9c:	0800d17c 	.word	0x0800d17c
 8001aa0:	0800d190 	.word	0x0800d190
 8001aa4:	0800d1a8 	.word	0x0800d1a8
 8001aa8:	0800d1c0 	.word	0x0800d1c0
 8001aac:	0800d1d4 	.word	0x0800d1d4
 8001ab0:	0800d1ec 	.word	0x0800d1ec
 8001ab4:	0800d204 	.word	0x0800d204
 8001ab8:	0800d21c 	.word	0x0800d21c
 8001abc:	0800d23c 	.word	0x0800d23c
 8001ac0:	0800d25c 	.word	0x0800d25c
 8001ac4:	0800d274 	.word	0x0800d274
 8001ac8:	0800d28c 	.word	0x0800d28c

08001acc <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	71fb      	strb	r3, [r7, #7]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001adc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <bno055_readData+0x40>)
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	1dfa      	adds	r2, r7, #7
 8001ae2:	2364      	movs	r3, #100	@ 0x64
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	2150      	movs	r1, #80	@ 0x50
 8001aea:	f002 f857 	bl	8003b9c <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001aee:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <bno055_readData+0x40>)
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	79bb      	ldrb	r3, [r7, #6]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	2264      	movs	r2, #100	@ 0x64
 8001af8:	9200      	str	r2, [sp, #0]
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	2150      	movs	r1, #80	@ 0x50
 8001afe:	f002 f94b 	bl	8003d98 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200004bc 	.word	0x200004bc

08001b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	b08a      	sub	sp, #40	@ 0x28
 8001b14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b16:	f001 fbe5 	bl	80032e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b1a:	f000 f923 	bl	8001d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b1e:	f000 fb15 	bl	800214c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b22:	f000 f9b5 	bl	8001e90 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001b26:	f000 fa1f 	bl	8001f68 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b2a:	f000 fa97 	bl	800205c <MX_TIM3_Init>
  MX_SPI2_Init();
 8001b2e:	f000 f9e5 	bl	8001efc <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001b32:	f000 fae1 	bl	80020f8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001b36:	f000 f97d 	bl	8001e34 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */



  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b40:	4868      	ldr	r0, [pc, #416]	@ (8001ce4 <main+0x1d4>)
 8001b42:	f001 feb3 	bl	80038ac <HAL_GPIO_WritePin>
  float sample=powf(10,-3);
 8001b46:	4b68      	ldr	r3, [pc, #416]	@ (8001ce8 <main+0x1d8>)
 8001b48:	61fb      	str	r3, [r7, #28]
  pidControllersInit(&yaw, 20, 15, 5,0.1,sample,0.1,-0.1);
 8001b4a:	ed9f 3a68 	vldr	s6, [pc, #416]	@ 8001cec <main+0x1dc>
 8001b4e:	eddf 2a68 	vldr	s5, [pc, #416]	@ 8001cf0 <main+0x1e0>
 8001b52:	ed97 2a07 	vldr	s4, [r7, #28]
 8001b56:	eddf 1a66 	vldr	s3, [pc, #408]	@ 8001cf0 <main+0x1e0>
 8001b5a:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8001b5e:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8001b62:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8001b66:	4863      	ldr	r0, [pc, #396]	@ (8001cf4 <main+0x1e4>)
 8001b68:	f7ff fb2d 	bl	80011c6 <pidControllersInit>
  pidControllersInit(&yaw_rate, 100, 50,10, 0.1,sample,1500,-1500);
 8001b6c:	ed9f 3a62 	vldr	s6, [pc, #392]	@ 8001cf8 <main+0x1e8>
 8001b70:	eddf 2a62 	vldr	s5, [pc, #392]	@ 8001cfc <main+0x1ec>
 8001b74:	ed97 2a07 	vldr	s4, [r7, #28]
 8001b78:	eddf 1a5d 	vldr	s3, [pc, #372]	@ 8001cf0 <main+0x1e0>
 8001b7c:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8001b80:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001d00 <main+0x1f0>
 8001b84:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 8001d04 <main+0x1f4>
 8001b88:	485f      	ldr	r0, [pc, #380]	@ (8001d08 <main+0x1f8>)
 8001b8a:	f7ff fb1c 	bl	80011c6 <pidControllersInit>
  pidControllersInit(&pitch, 20, 15,5, 0.1,sample,0.1,-0.1);
 8001b8e:	ed9f 3a57 	vldr	s6, [pc, #348]	@ 8001cec <main+0x1dc>
 8001b92:	eddf 2a57 	vldr	s5, [pc, #348]	@ 8001cf0 <main+0x1e0>
 8001b96:	ed97 2a07 	vldr	s4, [r7, #28]
 8001b9a:	eddf 1a55 	vldr	s3, [pc, #340]	@ 8001cf0 <main+0x1e0>
 8001b9e:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8001ba2:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8001ba6:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8001baa:	4858      	ldr	r0, [pc, #352]	@ (8001d0c <main+0x1fc>)
 8001bac:	f7ff fb0b 	bl	80011c6 <pidControllersInit>
  pidControllersInit(&pitch_rate, 100, 50,10, 0.1,sample,1500,-1500);
 8001bb0:	ed9f 3a51 	vldr	s6, [pc, #324]	@ 8001cf8 <main+0x1e8>
 8001bb4:	eddf 2a51 	vldr	s5, [pc, #324]	@ 8001cfc <main+0x1ec>
 8001bb8:	ed97 2a07 	vldr	s4, [r7, #28]
 8001bbc:	eddf 1a4c 	vldr	s3, [pc, #304]	@ 8001cf0 <main+0x1e0>
 8001bc0:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8001bc4:	eddf 0a4e 	vldr	s1, [pc, #312]	@ 8001d00 <main+0x1f0>
 8001bc8:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8001d04 <main+0x1f4>
 8001bcc:	4850      	ldr	r0, [pc, #320]	@ (8001d10 <main+0x200>)
 8001bce:	f7ff fafa 	bl	80011c6 <pidControllersInit>
  pidControllersInit(&roll, 20, 15,5 ,0.1,sample,0.1,-0.1);
 8001bd2:	ed9f 3a46 	vldr	s6, [pc, #280]	@ 8001cec <main+0x1dc>
 8001bd6:	eddf 2a46 	vldr	s5, [pc, #280]	@ 8001cf0 <main+0x1e0>
 8001bda:	ed97 2a07 	vldr	s4, [r7, #28]
 8001bde:	eddf 1a44 	vldr	s3, [pc, #272]	@ 8001cf0 <main+0x1e0>
 8001be2:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8001be6:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8001bea:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8001bee:	4849      	ldr	r0, [pc, #292]	@ (8001d14 <main+0x204>)
 8001bf0:	f7ff fae9 	bl	80011c6 <pidControllersInit>
  pidControllersInit(&roll_rate, 100, 50,10, 0.1,sample,1500,-1500);
 8001bf4:	ed9f 3a40 	vldr	s6, [pc, #256]	@ 8001cf8 <main+0x1e8>
 8001bf8:	eddf 2a40 	vldr	s5, [pc, #256]	@ 8001cfc <main+0x1ec>
 8001bfc:	ed97 2a07 	vldr	s4, [r7, #28]
 8001c00:	eddf 1a3b 	vldr	s3, [pc, #236]	@ 8001cf0 <main+0x1e0>
 8001c04:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8001c08:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 8001d00 <main+0x1f0>
 8001c0c:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8001d04 <main+0x1f4>
 8001c10:	4841      	ldr	r0, [pc, #260]	@ (8001d18 <main+0x208>)
 8001c12:	f7ff fad8 	bl	80011c6 <pidControllersInit>
  pidControllersInit(&high, 50, 25,10 ,0.1,sample,6000,0);
 8001c16:	ed9f 3a41 	vldr	s6, [pc, #260]	@ 8001d1c <main+0x20c>
 8001c1a:	eddf 2a41 	vldr	s5, [pc, #260]	@ 8001d20 <main+0x210>
 8001c1e:	ed97 2a07 	vldr	s4, [r7, #28]
 8001c22:	eddf 1a33 	vldr	s3, [pc, #204]	@ 8001cf0 <main+0x1e0>
 8001c26:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8001c2a:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 8001c2e:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8001d00 <main+0x1f0>
 8001c32:	483c      	ldr	r0, [pc, #240]	@ (8001d24 <main+0x214>)
 8001c34:	f7ff fac7 	bl	80011c6 <pidControllersInit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001c38:	2100      	movs	r1, #0
 8001c3a:	483b      	ldr	r0, [pc, #236]	@ (8001d28 <main+0x218>)
 8001c3c:	f004 f9dc 	bl	8005ff8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001c40:	2104      	movs	r1, #4
 8001c42:	4839      	ldr	r0, [pc, #228]	@ (8001d28 <main+0x218>)
 8001c44:	f004 f9d8 	bl	8005ff8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001c48:	2108      	movs	r1, #8
 8001c4a:	4837      	ldr	r0, [pc, #220]	@ (8001d28 <main+0x218>)
 8001c4c:	f004 f9d4 	bl	8005ff8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001c50:	210c      	movs	r1, #12
 8001c52:	4835      	ldr	r0, [pc, #212]	@ (8001d28 <main+0x218>)
 8001c54:	f004 f9d0 	bl	8005ff8 <HAL_TIM_PWM_Start>
 // Calibration(&htim2);
  HAL_TIM_Base_Start_IT(&htim3);
 8001c58:	4834      	ldr	r0, [pc, #208]	@ (8001d2c <main+0x21c>)
 8001c5a:	f004 f91b 	bl	8005e94 <HAL_TIM_Base_Start_IT>
  Two_Way_Commuination_Pipe0_Config(&nrf1, 0xA2A2A2A2A2, 0xC5C5C5C5C5);
 8001c5e:	f04f 32c5 	mov.w	r2, #3318072773	@ 0xc5c5c5c5
 8001c62:	f04f 03c5 	mov.w	r3, #197	@ 0xc5
 8001c66:	e9cd 2300 	strd	r2, r3, [sp]
 8001c6a:	f04f 32a2 	mov.w	r2, #2728567458	@ 0xa2a2a2a2
 8001c6e:	f04f 03a2 	mov.w	r3, #162	@ 0xa2
 8001c72:	482f      	ldr	r0, [pc, #188]	@ (8001d30 <main+0x220>)
 8001c74:	f000 fe79 	bl	800296a <Two_Way_Commuination_Pipe0_Config>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001c78:	4b2e      	ldr	r3, [pc, #184]	@ (8001d34 <main+0x224>)
 8001c7a:	463c      	mov	r4, r7
 8001c7c:	461d      	mov	r5, r3
 8001c7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f005 fb3b 	bl	800730a <osThreadCreate>
 8001c94:	4603      	mov	r3, r0
 8001c96:	4a28      	ldr	r2, [pc, #160]	@ (8001d38 <main+0x228>)
 8001c98:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(ESC_Task, "ESC", 256,NULL,1, &ESC_Handle);
 8001c9a:	4b28      	ldr	r3, [pc, #160]	@ (8001d3c <main+0x22c>)
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ca8:	4925      	ldr	r1, [pc, #148]	@ (8001d40 <main+0x230>)
 8001caa:	4826      	ldr	r0, [pc, #152]	@ (8001d44 <main+0x234>)
 8001cac:	f005 fca1 	bl	80075f2 <xTaskCreate>
  xTaskCreate(NRF_Task, "NRF", 256, (void*)&euler, 0, &NRF_Handle);
 8001cb0:	4b25      	ldr	r3, [pc, #148]	@ (8001d48 <main+0x238>)
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	4b24      	ldr	r3, [pc, #144]	@ (8001d4c <main+0x23c>)
 8001cba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cbe:	4924      	ldr	r1, [pc, #144]	@ (8001d50 <main+0x240>)
 8001cc0:	4824      	ldr	r0, [pc, #144]	@ (8001d54 <main+0x244>)
 8001cc2:	f005 fc96 	bl	80075f2 <xTaskCreate>
  xTaskCreate(BNO_Task, "BNO", 256, NULL, 0, &BNO_Handle);
 8001cc6:	4b24      	ldr	r3, [pc, #144]	@ (8001d58 <main+0x248>)
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cd4:	4921      	ldr	r1, [pc, #132]	@ (8001d5c <main+0x24c>)
 8001cd6:	4822      	ldr	r0, [pc, #136]	@ (8001d60 <main+0x250>)
 8001cd8:	f005 fc8b 	bl	80075f2 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001cdc:	f005 fb0e 	bl	80072fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <main+0x1d0>
 8001ce4:	40020800 	.word	0x40020800
 8001ce8:	3a83126f 	.word	0x3a83126f
 8001cec:	bdcccccd 	.word	0xbdcccccd
 8001cf0:	3dcccccd 	.word	0x3dcccccd
 8001cf4:	20000844 	.word	0x20000844
 8001cf8:	c4bb8000 	.word	0xc4bb8000
 8001cfc:	44bb8000 	.word	0x44bb8000
 8001d00:	42480000 	.word	0x42480000
 8001d04:	42c80000 	.word	0x42c80000
 8001d08:	20000898 	.word	0x20000898
 8001d0c:	200006f4 	.word	0x200006f4
 8001d10:	20000748 	.word	0x20000748
 8001d14:	2000079c 	.word	0x2000079c
 8001d18:	200007f0 	.word	0x200007f0
 8001d1c:	00000000 	.word	0x00000000
 8001d20:	45bb8000 	.word	0x45bb8000
 8001d24:	200008ec 	.word	0x200008ec
 8001d28:	200005c4 	.word	0x200005c4
 8001d2c:	2000060c 	.word	0x2000060c
 8001d30:	2000000c 	.word	0x2000000c
 8001d34:	0800d2bc 	.word	0x0800d2bc
 8001d38:	2000069c 	.word	0x2000069c
 8001d3c:	20000990 	.word	0x20000990
 8001d40:	0800d2a4 	.word	0x0800d2a4
 8001d44:	08002279 	.word	0x08002279
 8001d48:	20000994 	.word	0x20000994
 8001d4c:	200009a0 	.word	0x200009a0
 8001d50:	0800d2a8 	.word	0x0800d2a8
 8001d54:	08002471 	.word	0x08002471
 8001d58:	20000998 	.word	0x20000998
 8001d5c:	0800d2ac 	.word	0x0800d2ac
 8001d60:	080024c9 	.word	0x080024c9

08001d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b094      	sub	sp, #80	@ 0x50
 8001d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d6a:	f107 0320 	add.w	r3, r7, #32
 8001d6e:	2230      	movs	r2, #48	@ 0x30
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f007 fdc6 	bl	8009904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d78:	f107 030c 	add.w	r3, r7, #12
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	4b27      	ldr	r3, [pc, #156]	@ (8001e2c <SystemClock_Config+0xc8>)
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d90:	4a26      	ldr	r2, [pc, #152]	@ (8001e2c <SystemClock_Config+0xc8>)
 8001d92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d96:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d98:	4b24      	ldr	r3, [pc, #144]	@ (8001e2c <SystemClock_Config+0xc8>)
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001da4:	2300      	movs	r3, #0
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	4b21      	ldr	r3, [pc, #132]	@ (8001e30 <SystemClock_Config+0xcc>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a20      	ldr	r2, [pc, #128]	@ (8001e30 <SystemClock_Config+0xcc>)
 8001dae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e30 <SystemClock_Config+0xcc>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001dd4:	2319      	movs	r3, #25
 8001dd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001dd8:	23a8      	movs	r3, #168	@ 0xa8
 8001dda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001de0:	2304      	movs	r3, #4
 8001de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de4:	f107 0320 	add.w	r3, r7, #32
 8001de8:	4618      	mov	r0, r3
 8001dea:	f002 fda7 	bl	800493c <HAL_RCC_OscConfig>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001df4:	f000 fbe4 	bl	80025c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df8:	230f      	movs	r3, #15
 8001dfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e0e:	f107 030c 	add.w	r3, r7, #12
 8001e12:	2102      	movs	r1, #2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f003 f809 	bl	8004e2c <HAL_RCC_ClockConfig>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e20:	f000 fbce 	bl	80025c0 <Error_Handler>
  }
}
 8001e24:	bf00      	nop
 8001e26:	3750      	adds	r7, #80	@ 0x50
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40007000 	.word	0x40007000

08001e34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e38:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <MX_I2C1_Init+0x50>)
 8001e3a:	4a13      	ldr	r2, [pc, #76]	@ (8001e88 <MX_I2C1_Init+0x54>)
 8001e3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e3e:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <MX_I2C1_Init+0x50>)
 8001e40:	4a12      	ldr	r2, [pc, #72]	@ (8001e8c <MX_I2C1_Init+0x58>)
 8001e42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e44:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <MX_I2C1_Init+0x50>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <MX_I2C1_Init+0x50>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e50:	4b0c      	ldr	r3, [pc, #48]	@ (8001e84 <MX_I2C1_Init+0x50>)
 8001e52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e58:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <MX_I2C1_Init+0x50>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e5e:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <MX_I2C1_Init+0x50>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e64:	4b07      	ldr	r3, [pc, #28]	@ (8001e84 <MX_I2C1_Init+0x50>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e6a:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <MX_I2C1_Init+0x50>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e70:	4804      	ldr	r0, [pc, #16]	@ (8001e84 <MX_I2C1_Init+0x50>)
 8001e72:	f001 fd4f 	bl	8003914 <HAL_I2C_Init>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e7c:	f000 fba0 	bl	80025c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	200004c0 	.word	0x200004c0
 8001e88:	40005400 	.word	0x40005400
 8001e8c:	000186a0 	.word	0x000186a0

08001e90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e94:	4b17      	ldr	r3, [pc, #92]	@ (8001ef4 <MX_SPI1_Init+0x64>)
 8001e96:	4a18      	ldr	r2, [pc, #96]	@ (8001ef8 <MX_SPI1_Init+0x68>)
 8001e98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ef4 <MX_SPI1_Init+0x64>)
 8001e9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ea0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ea2:	4b14      	ldr	r3, [pc, #80]	@ (8001ef4 <MX_SPI1_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ea8:	4b12      	ldr	r3, [pc, #72]	@ (8001ef4 <MX_SPI1_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eae:	4b11      	ldr	r3, [pc, #68]	@ (8001ef4 <MX_SPI1_Init+0x64>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef4 <MX_SPI1_Init+0x64>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001eba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef4 <MX_SPI1_Init+0x64>)
 8001ebc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ec0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <MX_SPI1_Init+0x64>)
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <MX_SPI1_Init+0x64>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ece:	4b09      	ldr	r3, [pc, #36]	@ (8001ef4 <MX_SPI1_Init+0x64>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ed4:	4b07      	ldr	r3, [pc, #28]	@ (8001ef4 <MX_SPI1_Init+0x64>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001eda:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <MX_SPI1_Init+0x64>)
 8001edc:	220a      	movs	r2, #10
 8001ede:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ee0:	4804      	ldr	r0, [pc, #16]	@ (8001ef4 <MX_SPI1_Init+0x64>)
 8001ee2:	f003 f9b5 	bl	8005250 <HAL_SPI_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001eec:	f000 fb68 	bl	80025c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000514 	.word	0x20000514
 8001ef8:	40013000 	.word	0x40013000

08001efc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f00:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <MX_SPI2_Init+0x64>)
 8001f02:	4a18      	ldr	r2, [pc, #96]	@ (8001f64 <MX_SPI2_Init+0x68>)
 8001f04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f06:	4b16      	ldr	r3, [pc, #88]	@ (8001f60 <MX_SPI2_Init+0x64>)
 8001f08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f0e:	4b14      	ldr	r3, [pc, #80]	@ (8001f60 <MX_SPI2_Init+0x64>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f14:	4b12      	ldr	r3, [pc, #72]	@ (8001f60 <MX_SPI2_Init+0x64>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f1a:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <MX_SPI2_Init+0x64>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f20:	4b0f      	ldr	r3, [pc, #60]	@ (8001f60 <MX_SPI2_Init+0x64>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f26:	4b0e      	ldr	r3, [pc, #56]	@ (8001f60 <MX_SPI2_Init+0x64>)
 8001f28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f2c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <MX_SPI2_Init+0x64>)
 8001f30:	2208      	movs	r2, #8
 8001f32:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f34:	4b0a      	ldr	r3, [pc, #40]	@ (8001f60 <MX_SPI2_Init+0x64>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f3a:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <MX_SPI2_Init+0x64>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f40:	4b07      	ldr	r3, [pc, #28]	@ (8001f60 <MX_SPI2_Init+0x64>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f46:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <MX_SPI2_Init+0x64>)
 8001f48:	220a      	movs	r2, #10
 8001f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f4c:	4804      	ldr	r0, [pc, #16]	@ (8001f60 <MX_SPI2_Init+0x64>)
 8001f4e:	f003 f97f 	bl	8005250 <HAL_SPI_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f58:	f000 fb32 	bl	80025c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	2000056c 	.word	0x2000056c
 8001f64:	40003800 	.word	0x40003800

08001f68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	@ 0x28
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6e:	f107 0320 	add.w	r3, r7, #32
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]
 8001f86:	615a      	str	r2, [r3, #20]
 8001f88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f8a:	4b33      	ldr	r3, [pc, #204]	@ (8002058 <MX_TIM2_Init+0xf0>)
 8001f8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f92:	4b31      	ldr	r3, [pc, #196]	@ (8002058 <MX_TIM2_Init+0xf0>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f98:	4b2f      	ldr	r3, [pc, #188]	@ (8002058 <MX_TIM2_Init+0xf0>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f9e:	4b2e      	ldr	r3, [pc, #184]	@ (8002058 <MX_TIM2_Init+0xf0>)
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa6:	4b2c      	ldr	r3, [pc, #176]	@ (8002058 <MX_TIM2_Init+0xf0>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fac:	4b2a      	ldr	r3, [pc, #168]	@ (8002058 <MX_TIM2_Init+0xf0>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fb2:	4829      	ldr	r0, [pc, #164]	@ (8002058 <MX_TIM2_Init+0xf0>)
 8001fb4:	f003 ffd0 	bl	8005f58 <HAL_TIM_PWM_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001fbe:	f000 faff 	bl	80025c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fca:	f107 0320 	add.w	r3, r7, #32
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4821      	ldr	r0, [pc, #132]	@ (8002058 <MX_TIM2_Init+0xf0>)
 8001fd2:	f004 fe35 	bl	8006c40 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001fdc:	f000 faf0 	bl	80025c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe0:	2360      	movs	r3, #96	@ 0x60
 8001fe2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4818      	ldr	r0, [pc, #96]	@ (8002058 <MX_TIM2_Init+0xf0>)
 8001ff8:	f004 f99e 	bl	8006338 <HAL_TIM_PWM_ConfigChannel>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002002:	f000 fadd 	bl	80025c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	2204      	movs	r2, #4
 800200a:	4619      	mov	r1, r3
 800200c:	4812      	ldr	r0, [pc, #72]	@ (8002058 <MX_TIM2_Init+0xf0>)
 800200e:	f004 f993 	bl	8006338 <HAL_TIM_PWM_ConfigChannel>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002018:	f000 fad2 	bl	80025c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	2208      	movs	r2, #8
 8002020:	4619      	mov	r1, r3
 8002022:	480d      	ldr	r0, [pc, #52]	@ (8002058 <MX_TIM2_Init+0xf0>)
 8002024:	f004 f988 	bl	8006338 <HAL_TIM_PWM_ConfigChannel>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800202e:	f000 fac7 	bl	80025c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	220c      	movs	r2, #12
 8002036:	4619      	mov	r1, r3
 8002038:	4807      	ldr	r0, [pc, #28]	@ (8002058 <MX_TIM2_Init+0xf0>)
 800203a:	f004 f97d 	bl	8006338 <HAL_TIM_PWM_ConfigChannel>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8002044:	f000 fabc 	bl	80025c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002048:	4803      	ldr	r0, [pc, #12]	@ (8002058 <MX_TIM2_Init+0xf0>)
 800204a:	f000 ff27 	bl	8002e9c <HAL_TIM_MspPostInit>

}
 800204e:	bf00      	nop
 8002050:	3728      	adds	r7, #40	@ 0x28
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	200005c4 	.word	0x200005c4

0800205c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002062:	f107 0308 	add.w	r3, r7, #8
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002070:	463b      	mov	r3, r7
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002078:	4b1d      	ldr	r3, [pc, #116]	@ (80020f0 <MX_TIM3_Init+0x94>)
 800207a:	4a1e      	ldr	r2, [pc, #120]	@ (80020f4 <MX_TIM3_Init+0x98>)
 800207c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800207e:	4b1c      	ldr	r3, [pc, #112]	@ (80020f0 <MX_TIM3_Init+0x94>)
 8002080:	2253      	movs	r2, #83	@ 0x53
 8002082:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002084:	4b1a      	ldr	r3, [pc, #104]	@ (80020f0 <MX_TIM3_Init+0x94>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800208a:	4b19      	ldr	r3, [pc, #100]	@ (80020f0 <MX_TIM3_Init+0x94>)
 800208c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002090:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002092:	4b17      	ldr	r3, [pc, #92]	@ (80020f0 <MX_TIM3_Init+0x94>)
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002098:	4b15      	ldr	r3, [pc, #84]	@ (80020f0 <MX_TIM3_Init+0x94>)
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800209e:	4814      	ldr	r0, [pc, #80]	@ (80020f0 <MX_TIM3_Init+0x94>)
 80020a0:	f003 fea8 	bl	8005df4 <HAL_TIM_Base_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80020aa:	f000 fa89 	bl	80025c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020b4:	f107 0308 	add.w	r3, r7, #8
 80020b8:	4619      	mov	r1, r3
 80020ba:	480d      	ldr	r0, [pc, #52]	@ (80020f0 <MX_TIM3_Init+0x94>)
 80020bc:	f004 f9fe 	bl	80064bc <HAL_TIM_ConfigClockSource>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80020c6:	f000 fa7b 	bl	80025c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ca:	2300      	movs	r3, #0
 80020cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020d2:	463b      	mov	r3, r7
 80020d4:	4619      	mov	r1, r3
 80020d6:	4806      	ldr	r0, [pc, #24]	@ (80020f0 <MX_TIM3_Init+0x94>)
 80020d8:	f004 fdb2 	bl	8006c40 <HAL_TIMEx_MasterConfigSynchronization>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80020e2:	f000 fa6d 	bl	80025c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	2000060c 	.word	0x2000060c
 80020f4:	40000400 	.word	0x40000400

080020f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020fc:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <MX_USART1_UART_Init+0x4c>)
 80020fe:	4a12      	ldr	r2, [pc, #72]	@ (8002148 <MX_USART1_UART_Init+0x50>)
 8002100:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002102:	4b10      	ldr	r3, [pc, #64]	@ (8002144 <MX_USART1_UART_Init+0x4c>)
 8002104:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002108:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800210a:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <MX_USART1_UART_Init+0x4c>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002110:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <MX_USART1_UART_Init+0x4c>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002116:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <MX_USART1_UART_Init+0x4c>)
 8002118:	2200      	movs	r2, #0
 800211a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800211c:	4b09      	ldr	r3, [pc, #36]	@ (8002144 <MX_USART1_UART_Init+0x4c>)
 800211e:	220c      	movs	r2, #12
 8002120:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002122:	4b08      	ldr	r3, [pc, #32]	@ (8002144 <MX_USART1_UART_Init+0x4c>)
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002128:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <MX_USART1_UART_Init+0x4c>)
 800212a:	2200      	movs	r2, #0
 800212c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800212e:	4805      	ldr	r0, [pc, #20]	@ (8002144 <MX_USART1_UART_Init+0x4c>)
 8002130:	f004 fe08 	bl	8006d44 <HAL_UART_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800213a:	f000 fa41 	bl	80025c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000654 	.word	0x20000654
 8002148:	40011000 	.word	0x40011000

0800214c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	@ 0x28
 8002150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	60da      	str	r2, [r3, #12]
 8002160:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	4b40      	ldr	r3, [pc, #256]	@ (8002268 <MX_GPIO_Init+0x11c>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	4a3f      	ldr	r2, [pc, #252]	@ (8002268 <MX_GPIO_Init+0x11c>)
 800216c:	f043 0304 	orr.w	r3, r3, #4
 8002170:	6313      	str	r3, [r2, #48]	@ 0x30
 8002172:	4b3d      	ldr	r3, [pc, #244]	@ (8002268 <MX_GPIO_Init+0x11c>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	4b39      	ldr	r3, [pc, #228]	@ (8002268 <MX_GPIO_Init+0x11c>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	4a38      	ldr	r2, [pc, #224]	@ (8002268 <MX_GPIO_Init+0x11c>)
 8002188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800218c:	6313      	str	r3, [r2, #48]	@ 0x30
 800218e:	4b36      	ldr	r3, [pc, #216]	@ (8002268 <MX_GPIO_Init+0x11c>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	4b32      	ldr	r3, [pc, #200]	@ (8002268 <MX_GPIO_Init+0x11c>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	4a31      	ldr	r2, [pc, #196]	@ (8002268 <MX_GPIO_Init+0x11c>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002268 <MX_GPIO_Init+0x11c>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002268 <MX_GPIO_Init+0x11c>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	4a2a      	ldr	r2, [pc, #168]	@ (8002268 <MX_GPIO_Init+0x11c>)
 80021c0:	f043 0302 	orr.w	r3, r3, #2
 80021c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c6:	4b28      	ldr	r3, [pc, #160]	@ (8002268 <MX_GPIO_Init+0x11c>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80021d2:	2200      	movs	r2, #0
 80021d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021d8:	4824      	ldr	r0, [pc, #144]	@ (800226c <MX_GPIO_Init+0x120>)
 80021da:	f001 fb67 	bl	80038ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 80021de:	2200      	movs	r2, #0
 80021e0:	2110      	movs	r1, #16
 80021e2:	4823      	ldr	r0, [pc, #140]	@ (8002270 <MX_GPIO_Init+0x124>)
 80021e4:	f001 fb62 	bl	80038ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|ICM_CS_Pin, GPIO_PIN_RESET);
 80021e8:	2200      	movs	r2, #0
 80021ea:	2105      	movs	r1, #5
 80021ec:	4821      	ldr	r0, [pc, #132]	@ (8002274 <MX_GPIO_Init+0x128>)
 80021ee:	f001 fb5d 	bl	80038ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80021f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f8:	2301      	movs	r3, #1
 80021fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	4619      	mov	r1, r3
 800220a:	4818      	ldr	r0, [pc, #96]	@ (800226c <MX_GPIO_Init+0x120>)
 800220c:	f001 f9b2 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CS_Pin */
  GPIO_InitStruct.Pin = NRF_CS_Pin;
 8002210:	2310      	movs	r3, #16
 8002212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002214:	2301      	movs	r3, #1
 8002216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CS_GPIO_Port, &GPIO_InitStruct);
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4619      	mov	r1, r3
 8002226:	4812      	ldr	r0, [pc, #72]	@ (8002270 <MX_GPIO_Init+0x124>)
 8002228:	f001 f9a4 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin ICM_CS_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|ICM_CS_Pin;
 800222c:	2305      	movs	r3, #5
 800222e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002230:	2301      	movs	r3, #1
 8002232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	2300      	movs	r3, #0
 800223a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	4619      	mov	r1, r3
 8002242:	480c      	ldr	r0, [pc, #48]	@ (8002274 <MX_GPIO_Init+0x128>)
 8002244:	f001 f996 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8002248:	2302      	movs	r3, #2
 800224a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800224c:	2300      	movs	r3, #0
 800224e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	4619      	mov	r1, r3
 800225a:	4806      	ldr	r0, [pc, #24]	@ (8002274 <MX_GPIO_Init+0x128>)
 800225c:	f001 f98a 	bl	8003574 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002260:	bf00      	nop
 8002262:	3728      	adds	r7, #40	@ 0x28
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40023800 	.word	0x40023800
 800226c:	40020800 	.word	0x40020800
 8002270:	40020000 	.word	0x40020000
 8002274:	40020400 	.word	0x40020400

08002278 <ESC_Task>:

/* USER CODE BEGIN 4 */
void ESC_Task(void *argument)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

	while(1)
	{

				Calculate_Reference(&calculation, &control);
 8002280:	496e      	ldr	r1, [pc, #440]	@ (800243c <ESC_Task+0x1c4>)
 8002282:	486f      	ldr	r0, [pc, #444]	@ (8002440 <ESC_Task+0x1c8>)
 8002284:	f7fe fed4 	bl	8001030 <Calculate_Reference>
				pidUpdate(&pitch, calculation.picth_measurement, calculation.picth_reference);
 8002288:	4b6d      	ldr	r3, [pc, #436]	@ (8002440 <ESC_Task+0x1c8>)
 800228a:	edd3 7a03 	vldr	s15, [r3, #12]
 800228e:	4b6c      	ldr	r3, [pc, #432]	@ (8002440 <ESC_Task+0x1c8>)
 8002290:	ed93 7a00 	vldr	s14, [r3]
 8002294:	eef0 0a47 	vmov.f32	s1, s14
 8002298:	eeb0 0a67 	vmov.f32	s0, s15
 800229c:	4869      	ldr	r0, [pc, #420]	@ (8002444 <ESC_Task+0x1cc>)
 800229e:	f7fe ffeb 	bl	8001278 <pidUpdate>
				/*
				 * get picth rate measuremet
				 */
				calculation.picth_rate_reference=pitch.u;
 80022a2:	4b68      	ldr	r3, [pc, #416]	@ (8002444 <ESC_Task+0x1cc>)
 80022a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a6:	4a66      	ldr	r2, [pc, #408]	@ (8002440 <ESC_Task+0x1c8>)
 80022a8:	6193      	str	r3, [r2, #24]
				pidUpdate(&pitch_rate, calculation.picth_rate_measurement, calculation.picth_rate_reference);
 80022aa:	4b65      	ldr	r3, [pc, #404]	@ (8002440 <ESC_Task+0x1c8>)
 80022ac:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80022b0:	4b63      	ldr	r3, [pc, #396]	@ (8002440 <ESC_Task+0x1c8>)
 80022b2:	ed93 7a06 	vldr	s14, [r3, #24]
 80022b6:	eef0 0a47 	vmov.f32	s1, s14
 80022ba:	eeb0 0a67 	vmov.f32	s0, s15
 80022be:	4862      	ldr	r0, [pc, #392]	@ (8002448 <ESC_Task+0x1d0>)
 80022c0:	f7fe ffda 	bl	8001278 <pidUpdate>

				/*
				 * get roll measurement
				 */
				pidUpdate(&roll, calculation.roll_measurement, calculation.roll_reference);
 80022c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002440 <ESC_Task+0x1c8>)
 80022c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80022ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002440 <ESC_Task+0x1c8>)
 80022cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80022d0:	eef0 0a47 	vmov.f32	s1, s14
 80022d4:	eeb0 0a67 	vmov.f32	s0, s15
 80022d8:	485c      	ldr	r0, [pc, #368]	@ (800244c <ESC_Task+0x1d4>)
 80022da:	f7fe ffcd 	bl	8001278 <pidUpdate>
				/*
				 * get roll rate measurement
				 */
				calculation.roll_rate_reference=roll.u;
 80022de:	4b5b      	ldr	r3, [pc, #364]	@ (800244c <ESC_Task+0x1d4>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e2:	4a57      	ldr	r2, [pc, #348]	@ (8002440 <ESC_Task+0x1c8>)
 80022e4:	61d3      	str	r3, [r2, #28]
				pidUpdate(&roll_rate, calculation.roll_rate_measurement, calculation.roll_rate_reference);
 80022e6:	4b56      	ldr	r3, [pc, #344]	@ (8002440 <ESC_Task+0x1c8>)
 80022e8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80022ec:	4b54      	ldr	r3, [pc, #336]	@ (8002440 <ESC_Task+0x1c8>)
 80022ee:	ed93 7a07 	vldr	s14, [r3, #28]
 80022f2:	eef0 0a47 	vmov.f32	s1, s14
 80022f6:	eeb0 0a67 	vmov.f32	s0, s15
 80022fa:	4855      	ldr	r0, [pc, #340]	@ (8002450 <ESC_Task+0x1d8>)
 80022fc:	f7fe ffbc 	bl	8001278 <pidUpdate>
				/*
				 * get yaw measurement
				 */
				pidUpdate(&yaw, calculation.yaw_measurement, calculation.yaw_reference);
 8002300:	4b4f      	ldr	r3, [pc, #316]	@ (8002440 <ESC_Task+0x1c8>)
 8002302:	edd3 7a05 	vldr	s15, [r3, #20]
 8002306:	4b4e      	ldr	r3, [pc, #312]	@ (8002440 <ESC_Task+0x1c8>)
 8002308:	ed93 7a02 	vldr	s14, [r3, #8]
 800230c:	eef0 0a47 	vmov.f32	s1, s14
 8002310:	eeb0 0a67 	vmov.f32	s0, s15
 8002314:	484f      	ldr	r0, [pc, #316]	@ (8002454 <ESC_Task+0x1dc>)
 8002316:	f7fe ffaf 	bl	8001278 <pidUpdate>
				/*
				* get yaw measurement
				*/
				calculation.yaw_rate_reference=yaw.u;
 800231a:	4b4e      	ldr	r3, [pc, #312]	@ (8002454 <ESC_Task+0x1dc>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231e:	4a48      	ldr	r2, [pc, #288]	@ (8002440 <ESC_Task+0x1c8>)
 8002320:	6213      	str	r3, [r2, #32]
				pidUpdate(&yaw_rate, calculation.yaw_rate_measurement, calculation.yaw_rate_reference);
 8002322:	4b47      	ldr	r3, [pc, #284]	@ (8002440 <ESC_Task+0x1c8>)
 8002324:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002328:	4b45      	ldr	r3, [pc, #276]	@ (8002440 <ESC_Task+0x1c8>)
 800232a:	ed93 7a08 	vldr	s14, [r3, #32]
 800232e:	eef0 0a47 	vmov.f32	s1, s14
 8002332:	eeb0 0a67 	vmov.f32	s0, s15
 8002336:	4848      	ldr	r0, [pc, #288]	@ (8002458 <ESC_Task+0x1e0>)
 8002338:	f7fe ff9e 	bl	8001278 <pidUpdate>
				/*
				* get high measurement and high reference
				*/
				pidUpdate(&high, calculation.high_measurement, calculation.high_reference);
 800233c:	4b40      	ldr	r3, [pc, #256]	@ (8002440 <ESC_Task+0x1c8>)
 800233e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002342:	4b3f      	ldr	r3, [pc, #252]	@ (8002440 <ESC_Task+0x1c8>)
 8002344:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8002348:	eef0 0a47 	vmov.f32	s1, s14
 800234c:	eeb0 0a67 	vmov.f32	s0, s15
 8002350:	4842      	ldr	r0, [pc, #264]	@ (800245c <ESC_Task+0x1e4>)
 8002352:	f7fe ff91 	bl	8001278 <pidUpdate>

				speed.speed1=-pitch_rate.u+roll_rate.u-yaw_rate.u+high.u;
 8002356:	4b3e      	ldr	r3, [pc, #248]	@ (8002450 <ESC_Task+0x1d8>)
 8002358:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800235c:	4b3a      	ldr	r3, [pc, #232]	@ (8002448 <ESC_Task+0x1d0>)
 800235e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002362:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002366:	4b3c      	ldr	r3, [pc, #240]	@ (8002458 <ESC_Task+0x1e0>)
 8002368:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800236c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002370:	4b3a      	ldr	r3, [pc, #232]	@ (800245c <ESC_Task+0x1e4>)
 8002372:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800237e:	ee17 2a90 	vmov	r2, s15
 8002382:	4b37      	ldr	r3, [pc, #220]	@ (8002460 <ESC_Task+0x1e8>)
 8002384:	601a      	str	r2, [r3, #0]
				speed.speed2=+pitch_rate.u+roll_rate.u+yaw_rate.u+high.u;
 8002386:	4b30      	ldr	r3, [pc, #192]	@ (8002448 <ESC_Task+0x1d0>)
 8002388:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800238c:	4b30      	ldr	r3, [pc, #192]	@ (8002450 <ESC_Task+0x1d8>)
 800238e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002396:	4b30      	ldr	r3, [pc, #192]	@ (8002458 <ESC_Task+0x1e0>)
 8002398:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800239c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023a0:	4b2e      	ldr	r3, [pc, #184]	@ (800245c <ESC_Task+0x1e4>)
 80023a2:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80023a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ae:	ee17 2a90 	vmov	r2, s15
 80023b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002460 <ESC_Task+0x1e8>)
 80023b4:	605a      	str	r2, [r3, #4]
				speed.speed3=+pitch_rate.u-roll_rate.u-yaw_rate.u+high.u;
 80023b6:	4b24      	ldr	r3, [pc, #144]	@ (8002448 <ESC_Task+0x1d0>)
 80023b8:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80023bc:	4b24      	ldr	r3, [pc, #144]	@ (8002450 <ESC_Task+0x1d8>)
 80023be:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80023c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023c6:	4b24      	ldr	r3, [pc, #144]	@ (8002458 <ESC_Task+0x1e0>)
 80023c8:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80023cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023d0:	4b22      	ldr	r3, [pc, #136]	@ (800245c <ESC_Task+0x1e4>)
 80023d2:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80023d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023de:	ee17 2a90 	vmov	r2, s15
 80023e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002460 <ESC_Task+0x1e8>)
 80023e4:	609a      	str	r2, [r3, #8]
				speed.speed4=-pitch_rate.u-roll_rate.u-yaw_rate.u+high.u;
 80023e6:	4b18      	ldr	r3, [pc, #96]	@ (8002448 <ESC_Task+0x1d0>)
 80023e8:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80023ec:	eeb1 7a67 	vneg.f32	s14, s15
 80023f0:	4b17      	ldr	r3, [pc, #92]	@ (8002450 <ESC_Task+0x1d8>)
 80023f2:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80023f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023fa:	4b17      	ldr	r3, [pc, #92]	@ (8002458 <ESC_Task+0x1e0>)
 80023fc:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002400:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002404:	4b15      	ldr	r3, [pc, #84]	@ (800245c <ESC_Task+0x1e4>)
 8002406:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800240a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002412:	ee17 2a90 	vmov	r2, s15
 8002416:	4b12      	ldr	r3, [pc, #72]	@ (8002460 <ESC_Task+0x1e8>)
 8002418:	60da      	str	r2, [r3, #12]
				Control4Motor(&htim2, &speed);
 800241a:	4911      	ldr	r1, [pc, #68]	@ (8002460 <ESC_Task+0x1e8>)
 800241c:	4811      	ldr	r0, [pc, #68]	@ (8002464 <ESC_Task+0x1ec>)
 800241e:	f7fe fead 	bl	800117c <Control4Motor>
				a++;
 8002422:	4b11      	ldr	r3, [pc, #68]	@ (8002468 <ESC_Task+0x1f0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	3301      	adds	r3, #1
 8002428:	4a0f      	ldr	r2, [pc, #60]	@ (8002468 <ESC_Task+0x1f0>)
 800242a:	6013      	str	r3, [r2, #0]
				timer3_flag=0;
 800242c:	4b0f      	ldr	r3, [pc, #60]	@ (800246c <ESC_Task+0x1f4>)
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]

			vTaskDelay(pdMS_TO_TICKS(1));
 8002432:	2001      	movs	r0, #1
 8002434:	f005 fa2c 	bl	8007890 <vTaskDelay>
				Calculate_Reference(&calculation, &control);
 8002438:	bf00      	nop
 800243a:	e721      	b.n	8002280 <ESC_Task+0x8>
 800243c:	20000978 	.word	0x20000978
 8002440:	20000940 	.word	0x20000940
 8002444:	200006f4 	.word	0x200006f4
 8002448:	20000748 	.word	0x20000748
 800244c:	2000079c 	.word	0x2000079c
 8002450:	200007f0 	.word	0x200007f0
 8002454:	20000844 	.word	0x20000844
 8002458:	20000898 	.word	0x20000898
 800245c:	200008ec 	.word	0x200008ec
 8002460:	200006e4 	.word	0x200006e4
 8002464:	200005c4 	.word	0x200005c4
 8002468:	2000099c 	.word	0x2000099c
 800246c:	200006e0 	.word	0x200006e0

08002470 <NRF_Task>:

	}
}

void NRF_Task(void *argument)
{
 8002470:	b5b0      	push	{r4, r5, r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af04      	add	r7, sp, #16
 8002476:	6078      	str	r0, [r7, #4]
	bno055_vector_t *g=argument;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	60fb      	str	r3, [r7, #12]
	while(1)
	{

		sprintf((char*)spi_tx,"%.4f  %.4f  %.4f",g->y,g->z,g->x);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002488:	68f9      	ldr	r1, [r7, #12]
 800248a:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 800248e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002492:	e9cd 2300 	strd	r2, r3, [sp]
 8002496:	4622      	mov	r2, r4
 8002498:	462b      	mov	r3, r5
 800249a:	4907      	ldr	r1, [pc, #28]	@ (80024b8 <NRF_Task+0x48>)
 800249c:	4807      	ldr	r0, [pc, #28]	@ (80024bc <NRF_Task+0x4c>)
 800249e:	f007 f937 	bl	8009710 <siprintf>
		Two_Way_Commuination_RTOS(&nrf1, spi_tx, spi_rx);
 80024a2:	4a07      	ldr	r2, [pc, #28]	@ (80024c0 <NRF_Task+0x50>)
 80024a4:	4905      	ldr	r1, [pc, #20]	@ (80024bc <NRF_Task+0x4c>)
 80024a6:	4807      	ldr	r0, [pc, #28]	@ (80024c4 <NRF_Task+0x54>)
 80024a8:	f000 fa41 	bl	800292e <Two_Way_Commuination_RTOS>
		vTaskDelay(pdMS_TO_TICKS(10));
 80024ac:	200a      	movs	r0, #10
 80024ae:	f005 f9ef 	bl	8007890 <vTaskDelay>
		sprintf((char*)spi_tx,"%.4f  %.4f  %.4f",g->y,g->z,g->x);
 80024b2:	bf00      	nop
 80024b4:	e7e2      	b.n	800247c <NRF_Task+0xc>
 80024b6:	bf00      	nop
 80024b8:	0800d2d8 	.word	0x0800d2d8
 80024bc:	200006c0 	.word	0x200006c0
 80024c0:	200006a0 	.word	0x200006a0
 80024c4:	2000000c 	.word	0x2000000c

080024c8 <BNO_Task>:
	}
}

void BNO_Task(void *argument)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	bno055_assignI2C(&hi2c1);
 80024d0:	4820      	ldr	r0, [pc, #128]	@ (8002554 <BNO_Task+0x8c>)
 80024d2:	f7ff f9f3 	bl	80018bc <bno055_assignI2C>
	bno055_setup();
 80024d6:	f7fe ffdf 	bl	8001498 <bno055_setup>
	bno055_setOperationModeNDOF();
 80024da:	f7fe ffca 	bl	8001472 <bno055_setOperationModeNDOF>
	while(1)
	{
		gyro=bno055_getVectorGyroscope();
 80024de:	f7ff f94d 	bl	800177c <bno055_getVectorGyroscope>
 80024e2:	eeb0 4a40 	vmov.f32	s8, s0
 80024e6:	eef0 4a60 	vmov.f32	s9, s1
 80024ea:	eeb0 5a41 	vmov.f32	s10, s2
 80024ee:	eef0 5a61 	vmov.f32	s11, s3
 80024f2:	eeb0 6a42 	vmov.f32	s12, s4
 80024f6:	eef0 6a62 	vmov.f32	s13, s5
 80024fa:	eeb0 7a43 	vmov.f32	s14, s6
 80024fe:	eef0 7a63 	vmov.f32	s15, s7
 8002502:	4b15      	ldr	r3, [pc, #84]	@ (8002558 <BNO_Task+0x90>)
 8002504:	ed83 4b00 	vstr	d4, [r3]
 8002508:	ed83 5b02 	vstr	d5, [r3, #8]
 800250c:	ed83 6b04 	vstr	d6, [r3, #16]
 8002510:	ed83 7b06 	vstr	d7, [r3, #24]
		euler=bno055_getVectorEuler();
 8002514:	f7ff f975 	bl	8001802 <bno055_getVectorEuler>
 8002518:	eeb0 4a40 	vmov.f32	s8, s0
 800251c:	eef0 4a60 	vmov.f32	s9, s1
 8002520:	eeb0 5a41 	vmov.f32	s10, s2
 8002524:	eef0 5a61 	vmov.f32	s11, s3
 8002528:	eeb0 6a42 	vmov.f32	s12, s4
 800252c:	eef0 6a62 	vmov.f32	s13, s5
 8002530:	eeb0 7a43 	vmov.f32	s14, s6
 8002534:	eef0 7a63 	vmov.f32	s15, s7
 8002538:	4b08      	ldr	r3, [pc, #32]	@ (800255c <BNO_Task+0x94>)
 800253a:	ed83 4b00 	vstr	d4, [r3]
 800253e:	ed83 5b02 	vstr	d5, [r3, #8]
 8002542:	ed83 6b04 	vstr	d6, [r3, #16]
 8002546:	ed83 7b06 	vstr	d7, [r3, #24]
		vTaskDelay(pdMS_TO_TICKS(10));
 800254a:	200a      	movs	r0, #10
 800254c:	f005 f9a0 	bl	8007890 <vTaskDelay>
		gyro=bno055_getVectorGyroscope();
 8002550:	bf00      	nop
 8002552:	e7c4      	b.n	80024de <BNO_Task+0x16>
 8002554:	200004c0 	.word	0x200004c0
 8002558:	200009c0 	.word	0x200009c0
 800255c:	200009a0 	.word	0x200009a0

08002560 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002568:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800256c:	4804      	ldr	r0, [pc, #16]	@ (8002580 <StartDefaultTask+0x20>)
 800256e:	f001 f9b6 	bl	80038de <HAL_GPIO_TogglePin>
    osDelay(500);
 8002572:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002576:	f004 ff14 	bl	80073a2 <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800257a:	bf00      	nop
 800257c:	e7f4      	b.n	8002568 <StartDefaultTask+0x8>
 800257e:	bf00      	nop
 8002580:	40020800 	.word	0x40020800

08002584 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
//	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a08      	ldr	r2, [pc, #32]	@ (80025b4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d101      	bne.n	800259a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002596:	f000 fec7 	bl	8003328 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance==TIM3)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a06      	ldr	r2, [pc, #24]	@ (80025b8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d102      	bne.n	80025aa <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	  timer3_flag=1;
 80025a4:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	701a      	strb	r2, [r3, #0]
//	  xSemaphoreGiveFromISR(TimerISR_Semaphore,&xHigherPriorityTaskWoken);
  }
//  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
  /* USER CODE END Callback 1 */
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40010000 	.word	0x40010000
 80025b8:	40000400 	.word	0x40000400
 80025bc:	200006e0 	.word	0x200006e0

080025c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025c4:	b672      	cpsid	i
}
 80025c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025c8:	bf00      	nop
 80025ca:	e7fd      	b.n	80025c8 <Error_Handler+0x8>

080025cc <Chip_Select>:

#include "nRF24L01.h"
#include "main.h"

void Chip_Select(NRF_HandleTypeDef *nrf)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CS_GPIO, nrf->CS_PIN, 0);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	899b      	ldrh	r3, [r3, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	4619      	mov	r1, r3
 80025e0:	f001 f964 	bl	80038ac <HAL_GPIO_WritePin>
}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <Chip_Deselect>:

void Chip_Deselect(NRF_HandleTypeDef *nrf)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CS_GPIO, nrf->CS_PIN, 1);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	899b      	ldrh	r3, [r3, #12]
 80025fc:	2201      	movs	r2, #1
 80025fe:	4619      	mov	r1, r3
 8002600:	f001 f954 	bl	80038ac <HAL_GPIO_WritePin>
}
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <Set_CE_High>:

void Set_CE_High(NRF_HandleTypeDef *nrf)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CE_GPIO, nrf->CE_PIN, 1);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6858      	ldr	r0, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	89db      	ldrh	r3, [r3, #14]
 800261c:	2201      	movs	r2, #1
 800261e:	4619      	mov	r1, r3
 8002620:	f001 f944 	bl	80038ac <HAL_GPIO_WritePin>
}
 8002624:	bf00      	nop
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <Set_CE_Low>:

void Set_CE_Low(NRF_HandleTypeDef *nrf)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CE_GPIO, nrf->CE_PIN, 0);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6858      	ldr	r0, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	89db      	ldrh	r3, [r3, #14]
 800263c:	2200      	movs	r2, #0
 800263e:	4619      	mov	r1, r3
 8002640:	f001 f934 	bl	80038ac <HAL_GPIO_WritePin>
}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <WaitForIRQ>:

void WaitForIRQ(NRF_HandleTypeDef *nrf)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	while (HAL_GPIO_ReadPin(nrf->IRQ_GPIO, nrf->IRQ_PIN) == 1)
 8002654:	bf00      	nop
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	8a1b      	ldrh	r3, [r3, #16]
 800265e:	4619      	mov	r1, r3
 8002660:	4610      	mov	r0, r2
 8002662:	f001 f90b 	bl	800387c <HAL_GPIO_ReadPin>
 8002666:	4603      	mov	r3, r0
 8002668:	2b01      	cmp	r3, #1
 800266a:	d0f4      	beq.n	8002656 <WaitForIRQ+0xa>
		;
}
 800266c:	bf00      	nop
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <nRF_WriteRegister>:

void nRF_WriteRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t *data, int size)
{
 8002676:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800267a:	b089      	sub	sp, #36	@ 0x24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	460b      	mov	r3, r1
 8002686:	72fb      	strb	r3, [r7, #11]
 8002688:	466b      	mov	r3, sp
 800268a:	461e      	mov	r6, r3
	uint8_t buff[size + 1];
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	1c59      	adds	r1, r3, #1
 8002690:	1e4b      	subs	r3, r1, #1
 8002692:	61bb      	str	r3, [r7, #24]
 8002694:	460a      	mov	r2, r1
 8002696:	2300      	movs	r3, #0
 8002698:	4690      	mov	r8, r2
 800269a:	4699      	mov	r9, r3
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026b0:	460a      	mov	r2, r1
 80026b2:	2300      	movs	r3, #0
 80026b4:	4614      	mov	r4, r2
 80026b6:	461d      	mov	r5, r3
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	00eb      	lsls	r3, r5, #3
 80026c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026c6:	00e2      	lsls	r2, r4, #3
 80026c8:	460b      	mov	r3, r1
 80026ca:	3307      	adds	r3, #7
 80026cc:	08db      	lsrs	r3, r3, #3
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	ebad 0d03 	sub.w	sp, sp, r3
 80026d4:	466b      	mov	r3, sp
 80026d6:	3300      	adds	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
	buff[0] = reg | (1 << 5);
 80026da:	7afb      	ldrb	r3, [r7, #11]
 80026dc:	f043 0320 	orr.w	r3, r3, #32
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++)
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	e00a      	b.n	8002702 <nRF_WriteRegister+0x8c>
	{
		buff[i + 1] = data[i];
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	441a      	add	r2, r3
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3301      	adds	r3, #1
 80026f6:	7811      	ldrb	r1, [r2, #0]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < size; i++)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	3301      	adds	r3, #1
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	dbf0      	blt.n	80026ec <nRF_WriteRegister+0x76>
	}
	Chip_Select(nrf);
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f7ff ff5e 	bl	80025cc <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, buff, (uint16_t)size + 1, NRF_SPI_TIMEOUT);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6958      	ldr	r0, [r3, #20]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	b29b      	uxth	r3, r3
 8002718:	3301      	adds	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	2364      	movs	r3, #100	@ 0x64
 800271e:	6979      	ldr	r1, [r7, #20]
 8002720:	f002 fe1f 	bl	8005362 <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f7ff ff61 	bl	80025ec <Chip_Deselect>
 800272a:	46b5      	mov	sp, r6
}
 800272c:	bf00      	nop
 800272e:	3724      	adds	r7, #36	@ 0x24
 8002730:	46bd      	mov	sp, r7
 8002732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002736 <nRF_WriteOneRegister>:

void nRF_WriteOneRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t data)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	460b      	mov	r3, r1
 8002740:	70fb      	strb	r3, [r7, #3]
 8002742:	4613      	mov	r3, r2
 8002744:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2];
	buff[0] = reg | (1 << 5);
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	f043 0320 	orr.w	r3, r3, #32
 800274c:	b2db      	uxtb	r3, r3
 800274e:	733b      	strb	r3, [r7, #12]
	buff[1] = data;
 8002750:	78bb      	ldrb	r3, [r7, #2]
 8002752:	737b      	strb	r3, [r7, #13]
	Chip_Select(nrf);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff ff39 	bl	80025cc <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, buff, 2, NRF_SPI_TIMEOUT);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6958      	ldr	r0, [r3, #20]
 800275e:	f107 010c 	add.w	r1, r7, #12
 8002762:	2364      	movs	r3, #100	@ 0x64
 8002764:	2202      	movs	r2, #2
 8002766:	f002 fdfc 	bl	8005362 <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ff3e 	bl	80025ec <Chip_Deselect>
}
 8002770:	bf00      	nop
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <nRF_ReadOneRegister>:
	HAL_SPI_Receive(nrf->hspi, receive_data, size, NRF_SPI_TIMEOUT * 10);
	Chip_Deselect(nrf);
}

void nRF_ReadOneRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t *receive_data)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	460b      	mov	r3, r1
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	72fb      	strb	r3, [r7, #11]

	uint8_t buff = reg;
 8002786:	7afb      	ldrb	r3, [r7, #11]
 8002788:	75fb      	strb	r3, [r7, #23]
	Chip_Select(nrf);
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f7ff ff1e 	bl	80025cc <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6958      	ldr	r0, [r3, #20]
 8002794:	f107 0117 	add.w	r1, r7, #23
 8002798:	2364      	movs	r3, #100	@ 0x64
 800279a:	2201      	movs	r2, #1
 800279c:	f002 fde1 	bl	8005362 <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->hspi, receive_data, 1, NRF_SPI_TIMEOUT);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6958      	ldr	r0, [r3, #20]
 80027a4:	2364      	movs	r3, #100	@ 0x64
 80027a6:	2201      	movs	r2, #1
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	f002 ff1e 	bl	80055ea <HAL_SPI_Receive>
	Chip_Deselect(nrf);
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f7ff ff1c 	bl	80025ec <Chip_Deselect>
}
 80027b4:	bf00      	nop
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <nRF_SendCmd>:
void nRF_SendCmd(NRF_HandleTypeDef *nrf, uint8_t cmd)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	70fb      	strb	r3, [r7, #3]

	uint8_t buff = cmd;
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	73fb      	strb	r3, [r7, #15]
	Chip_Select(nrf);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff fefd 	bl	80025cc <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6958      	ldr	r0, [r3, #20]
 80027d6:	f107 010f 	add.w	r1, r7, #15
 80027da:	2364      	movs	r3, #100	@ 0x64
 80027dc:	2201      	movs	r2, #1
 80027de:	f002 fdc0 	bl	8005362 <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ff02 	bl	80025ec <Chip_Deselect>
}
 80027e8:	bf00      	nop
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <nRF_GetStatus>:

uint8_t nRF_GetStatus(NRF_HandleTypeDef *nrf)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

	uint8_t buff = STATUS;
 80027f8:	2307      	movs	r3, #7
 80027fa:	73fb      	strb	r3, [r7, #15]
	uint8_t rx_data = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	73bb      	strb	r3, [r7, #14]
	Chip_Select(nrf);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff fee3 	bl	80025cc <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6958      	ldr	r0, [r3, #20]
 800280a:	f107 010f 	add.w	r1, r7, #15
 800280e:	2364      	movs	r3, #100	@ 0x64
 8002810:	2201      	movs	r2, #1
 8002812:	f002 fda6 	bl	8005362 <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->hspi, &rx_data, 1, NRF_SPI_TIMEOUT * 10);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6958      	ldr	r0, [r3, #20]
 800281a:	f107 010e 	add.w	r1, r7, #14
 800281e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002822:	2201      	movs	r2, #1
 8002824:	f002 fee1 	bl	80055ea <HAL_SPI_Receive>
	Chip_Deselect(nrf);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff fedf 	bl	80025ec <Chip_Deselect>
	return rx_data;
 800282e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <nRF_TX_Payload>:

void nRF_TX_Payload(NRF_HandleTypeDef *nrf, uint8_t *data, uint16_t size)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	4613      	mov	r3, r2
 8002844:	80fb      	strh	r3, [r7, #6]
	Chip_Select(nrf);
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f7ff fec0 	bl	80025cc <Chip_Select>
	uint8_t buff = W_TX_PAYLOAD;
 800284c:	23a0      	movs	r3, #160	@ 0xa0
 800284e:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6958      	ldr	r0, [r3, #20]
 8002854:	f107 0117 	add.w	r1, r7, #23
 8002858:	2364      	movs	r3, #100	@ 0x64
 800285a:	2201      	movs	r2, #1
 800285c:	f002 fd81 	bl	8005362 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf->hspi, data, size, NRF_SPI_TIMEOUT);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6958      	ldr	r0, [r3, #20]
 8002864:	88fa      	ldrh	r2, [r7, #6]
 8002866:	2364      	movs	r3, #100	@ 0x64
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	f002 fd7a 	bl	8005362 <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f7ff febc 	bl	80025ec <Chip_Deselect>
}
 8002874:	bf00      	nop
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <nRF_RX_Payload>:

void nRF_RX_Payload(NRF_HandleTypeDef *nrf, uint8_t *rx_data, uint16_t size)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	4613      	mov	r3, r2
 8002888:	80fb      	strh	r3, [r7, #6]
	Chip_Select(nrf);
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f7ff fe9e 	bl	80025cc <Chip_Select>
	uint8_t buff = R_RX_PAYLOAD;
 8002890:	2361      	movs	r3, #97	@ 0x61
 8002892:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6958      	ldr	r0, [r3, #20]
 8002898:	f107 0117 	add.w	r1, r7, #23
 800289c:	2364      	movs	r3, #100	@ 0x64
 800289e:	2201      	movs	r2, #1
 80028a0:	f002 fd5f 	bl	8005362 <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->hspi, rx_data, size, NRF_SPI_TIMEOUT * 10);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6958      	ldr	r0, [r3, #20]
 80028a8:	88fa      	ldrh	r2, [r7, #6]
 80028aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	f002 fe9b 	bl	80055ea <HAL_SPI_Receive>
	Chip_Deselect(nrf);
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f7ff fe99 	bl	80025ec <Chip_Deselect>
}
 80028ba:	bf00      	nop
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <Select_Tx_Mode_RTOS>:
	vTaskDelay(pdMS_TO_TICKS(2));
	nrf->nrfmode = MODE_TX;
}

void Select_Tx_Mode_RTOS(NRF_HandleTypeDef *nrf)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
	uint8_t buff = 0x0a;
 80028ca:	230a      	movs	r3, #10
 80028cc:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low(nrf);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff feac 	bl	800262c <Set_CE_Low>
	CONFIG_REG_Write(nrf, buff);
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	4619      	mov	r1, r3
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f8ec 	bl	8002ab6 <CONFIG_REG_Write>
	Set_CE_High(nrf);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff fe94 	bl	800260c <Set_CE_High>
	vTaskDelay(pdMS_TO_TICKS(2));
 80028e4:	2002      	movs	r0, #2
 80028e6:	f004 ffd3 	bl	8007890 <vTaskDelay>
	nrf->nrfmode = MODE_TX;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	761a      	strb	r2, [r3, #24]
}
 80028f0:	bf00      	nop
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <Select_Rx_Mode_RTOS>:
	nRF_SendCmd(nrf, FLUSH_RX);
	nrf->nrfmode = MODE_RX;
}

void Select_Rx_Mode_RTOS(NRF_HandleTypeDef *nrf)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	uint8_t buff = 0x0b;
 8002900:	230b      	movs	r3, #11
 8002902:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low(nrf);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff fe91 	bl	800262c <Set_CE_Low>
	CONFIG_REG_Write(nrf, buff);
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	4619      	mov	r1, r3
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f8d1 	bl	8002ab6 <CONFIG_REG_Write>
	Set_CE_High(nrf);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff fe79 	bl	800260c <Set_CE_High>
	vTaskDelay(pdMS_TO_TICKS(2));
 800291a:	2002      	movs	r0, #2
 800291c:	f004 ffb8 	bl	8007890 <vTaskDelay>
	nrf->nrfmode = MODE_RX;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	761a      	strb	r2, [r3, #24]
}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <Two_Way_Commuination_RTOS>:

void Two_Way_Commuination_RTOS(NRF_HandleTypeDef *nrf,uint8_t *tx_data,uint8_t *rx_data)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b084      	sub	sp, #16
 8002932:	af00      	add	r7, sp, #0
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
	TX_Communication(nrf,tx_data);
 800293a:	68b9      	ldr	r1, [r7, #8]
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f849 	bl	80029d4 <TX_Communication>
	Select_Rx_Mode_RTOS(nrf);
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f7ff ffd8 	bl	80028f8 <Select_Rx_Mode_RTOS>
	vTaskDelay(pdMS_TO_TICKS(50));
 8002948:	2032      	movs	r0, #50	@ 0x32
 800294a:	f004 ffa1 	bl	8007890 <vTaskDelay>
	RX_Communication(nrf,rx_data);
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f883 	bl	8002a5c <RX_Communication>
	Select_Tx_Mode_RTOS(nrf);
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f7ff ffb3 	bl	80028c2 <Select_Tx_Mode_RTOS>
	vTaskDelay(pdMS_TO_TICKS(10));
 800295c:	200a      	movs	r0, #10
 800295e:	f004 ff97 	bl	8007890 <vTaskDelay>
}
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <Two_Way_Commuination_Pipe0_Config>:

#endif

void Two_Way_Commuination_Pipe0_Config(NRF_HandleTypeDef *nrf, uint64_t tx_addr, uint64_t rx_addr)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	e9c7 2300 	strd	r2, r3, [r7]
	Set_CE_Low(nrf);
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f7ff fe58 	bl	800262c <Set_CE_Low>
	RX_PW_P_NUM_Number_Of_Bytes(nrf, 0, 32);
 800297c:	2220      	movs	r2, #32
 800297e:	2100      	movs	r1, #0
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f919 	bl	8002bb8 <RX_PW_P_NUM_Number_Of_Bytes>
	TX_ADDR_Write(nrf, tx_addr);
 8002986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f8e1 	bl	8002b52 <TX_ADDR_Write>
	RX_ADDR_P0_Write(nrf, rx_addr);
 8002990:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 f8aa 	bl	8002aee <RX_ADDR_P0_Write>
	nRF_WriteOneRegister(nrf, EN_RXADDR, 1);
 800299a:	2201      	movs	r2, #1
 800299c:	2102      	movs	r1, #2
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f7ff fec9 	bl	8002736 <nRF_WriteOneRegister>
	nRF_WriteOneRegister(nrf, EN_AA, 0x00);
 80029a4:	2200      	movs	r2, #0
 80029a6:	2101      	movs	r1, #1
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f7ff fec4 	bl	8002736 <nRF_WriteOneRegister>
	nRF_WriteOneRegister(nrf, RF_SETUP, 0x7);
 80029ae:	2207      	movs	r2, #7
 80029b0:	2106      	movs	r1, #6
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f7ff febf 	bl	8002736 <nRF_WriteOneRegister>
	CONFIG_REG_Write(nrf, 0xa);
 80029b8:	210a      	movs	r1, #10
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f87b 	bl	8002ab6 <CONFIG_REG_Write>
	Set_CE_High(nrf);
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f7ff fe23 	bl	800260c <Set_CE_High>
	HAL_Delay(2);
 80029c6:	2002      	movs	r0, #2
 80029c8:	f000 fcce 	bl	8003368 <HAL_Delay>
}
 80029cc:	bf00      	nop
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <TX_Communication>:
	Set_CE_High(nrf);
	HAL_Delay(2);
}

uint8_t TX_Communication(NRF_HandleTypeDef *nrf, uint8_t *data)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
	if (nrf->nrfmode == MODE_TX)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7e1b      	ldrb	r3, [r3, #24]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d135      	bne.n	8002a52 <TX_Communication+0x7e>
	{
		nRF_TX_Payload(nrf, data, 32);
 80029e6:	2220      	movs	r2, #32
 80029e8:	6839      	ldr	r1, [r7, #0]
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff ff24 	bl	8002838 <nRF_TX_Payload>
		Set_CE_High(nrf);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff fe0b 	bl	800260c <Set_CE_High>
		WaitForIRQ(nrf);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff fe28 	bl	800264c <WaitForIRQ>
		nRF_SendCmd(nrf, FLUSH_TX);
 80029fc:	21e1      	movs	r1, #225	@ 0xe1
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff fedc 	bl	80027bc <nRF_SendCmd>
		uint8_t status = nRF_GetStatus(nrf);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff fef3 	bl	80027f0 <nRF_GetStatus>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	73fb      	strb	r3, [r7, #15]
		if ((status & (1 << MAX_RT)) != 0)
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00b      	beq.n	8002a30 <TX_Communication+0x5c>
		{
			status |= ((1 << MAX_RT) | (1 << TX_FULL));
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	f043 0311 	orr.w	r3, r3, #17
 8002a1e:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(nrf, STATUS, status);
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	461a      	mov	r2, r3
 8002a24:	2107      	movs	r1, #7
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff fe85 	bl	8002736 <nRF_WriteOneRegister>
			return STATUS_TX_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e011      	b.n	8002a54 <TX_Communication+0x80>
		}
		else if ((status & (1 << 5)) != 0)
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00b      	beq.n	8002a52 <TX_Communication+0x7e>
		{
			status |= ((1 << TX_DS) | (1 << TX_FULL));
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 8002a40:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(nrf, STATUS, status);
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	461a      	mov	r2, r3
 8002a46:	2107      	movs	r1, #7
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff fe74 	bl	8002736 <nRF_WriteOneRegister>
			return STATUS_TX_OK;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e000      	b.n	8002a54 <TX_Communication+0x80>
		}
	}
	return STATUS_TX_NONDEFINE;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <RX_Communication>:

uint8_t RX_Communication(NRF_HandleTypeDef *nrf, uint8_t *rx_data)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
	if (nrf->nrfmode == MODE_RX)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	7e1b      	ldrb	r3, [r3, #24]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d11e      	bne.n	8002aac <RX_Communication+0x50>
	{
		Set_CE_High(nrf);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff fdcc 	bl	800260c <Set_CE_High>
		uint8_t status = nRF_GetStatus(nrf);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff febb 	bl	80027f0 <nRF_GetStatus>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	73fb      	strb	r3, [r7, #15]
		if ((status & (1 << RX_DR)) != 0)
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00b      	beq.n	8002aa0 <RX_Communication+0x44>
		{
			nRF_WriteOneRegister(nrf, STATUS, (1 << 6));
 8002a88:	2240      	movs	r2, #64	@ 0x40
 8002a8a:	2107      	movs	r1, #7
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff fe52 	bl	8002736 <nRF_WriteOneRegister>
			nRF_RX_Payload(nrf, rx_data, 32);
 8002a92:	2220      	movs	r2, #32
 8002a94:	6839      	ldr	r1, [r7, #0]
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff fef0 	bl	800287c <nRF_RX_Payload>
			return STATUS_RX_OK;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e006      	b.n	8002aae <RX_Communication+0x52>
		}
		nRF_SendCmd(nrf, FLUSH_RX);
 8002aa0:	21e2      	movs	r1, #226	@ 0xe2
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff fe8a 	bl	80027bc <nRF_SendCmd>
		return STATUS_RX_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <RX_Communication+0x52>
	}
	return STATUS_RX_NONEDEFINE;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <CONFIG_REG_Write>:
}



void CONFIG_REG_Write(NRF_HandleTypeDef *nrf, uint8_t data)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	70fb      	strb	r3, [r7, #3]
	uint8_t read_reg;
	do
	{
		nRF_WriteOneRegister(nrf, CONFIG, data);
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff fe34 	bl	8002736 <nRF_WriteOneRegister>
		nRF_ReadOneRegister(nrf, CONFIG, &read_reg);
 8002ace:	f107 030f 	add.w	r3, r7, #15
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff fe4e 	bl	8002778 <nRF_ReadOneRegister>
	} while (read_reg != data);
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d1ee      	bne.n	8002ac2 <CONFIG_REG_Write+0xc>
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <RX_ADDR_P0_Write>:
{
	nRF_WriteOneRegister(nrf, EN_AA, pipe & 0x3F);
}

void RX_ADDR_P0_Write(NRF_HandleTypeDef *nrf, uint64_t data)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b08a      	sub	sp, #40	@ 0x28
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t buff[5];
	uint64_t temp = data;
 8002afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002afe:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	e016      	b.n	8002b36 <RX_ADDR_P0_Write+0x48>
	{
		buff[i] = (uint8_t)((temp) & 0xff);
 8002b08:	f897 1020 	ldrb.w	r1, [r7, #32]
 8002b0c:	f107 0214 	add.w	r2, r7, #20
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	4413      	add	r3, r2
 8002b14:	460a      	mov	r2, r1
 8002b16:	701a      	strb	r2, [r3, #0]
		temp = temp >> 8;
 8002b18:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	0a02      	lsrs	r2, r0, #8
 8002b26:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002b2a:	0a0b      	lsrs	r3, r1, #8
 8002b2c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	3301      	adds	r3, #1
 8002b34:	61fb      	str	r3, [r7, #28]
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	dde5      	ble.n	8002b08 <RX_ADDR_P0_Write+0x1a>
	}
	nRF_WriteRegister(nrf, RX_ADDR_P0, buff, 5);
 8002b3c:	f107 0214 	add.w	r2, r7, #20
 8002b40:	2305      	movs	r3, #5
 8002b42:	210a      	movs	r1, #10
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7ff fd96 	bl	8002676 <nRF_WriteRegister>
}
 8002b4a:	bf00      	nop
 8002b4c:	3728      	adds	r7, #40	@ 0x28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <TX_ADDR_Write>:
	}
	nRF_WriteOneRegister(nrf, reg, data);
}

void TX_ADDR_Write(NRF_HandleTypeDef *nrf, uint64_t data)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b08a      	sub	sp, #40	@ 0x28
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t buff[5];
	uint64_t temp = data;
 8002b5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b62:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	e016      	b.n	8002b9a <TX_ADDR_Write+0x48>
	{
		buff[i] = (uint8_t)((temp) & 0xff);
 8002b6c:	f897 1020 	ldrb.w	r1, [r7, #32]
 8002b70:	f107 0214 	add.w	r2, r7, #20
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	4413      	add	r3, r2
 8002b78:	460a      	mov	r2, r1
 8002b7a:	701a      	strb	r2, [r3, #0]
		temp = temp >> 8;
 8002b7c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	0a02      	lsrs	r2, r0, #8
 8002b8a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002b8e:	0a0b      	lsrs	r3, r1, #8
 8002b90:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	3301      	adds	r3, #1
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	dde5      	ble.n	8002b6c <TX_ADDR_Write+0x1a>
	}
	nRF_WriteRegister(nrf, TX_ADDR, buff, 5);
 8002ba0:	f107 0214 	add.w	r2, r7, #20
 8002ba4:	2305      	movs	r3, #5
 8002ba6:	2110      	movs	r1, #16
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f7ff fd64 	bl	8002676 <nRF_WriteRegister>
}
 8002bae:	bf00      	nop
 8002bb0:	3728      	adds	r7, #40	@ 0x28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <RX_PW_P_NUM_Number_Of_Bytes>:

void RX_PW_P_NUM_Number_Of_Bytes(NRF_HandleTypeDef *nrf, int num, uint8_t data)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	switch (num)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b05      	cmp	r3, #5
 8002bca:	d828      	bhi.n	8002c1e <RX_PW_P_NUM_Number_Of_Bytes+0x66>
 8002bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8002bd4 <RX_PW_P_NUM_Number_Of_Bytes+0x1c>)
 8002bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd2:	bf00      	nop
 8002bd4:	08002bed 	.word	0x08002bed
 8002bd8:	08002bf3 	.word	0x08002bf3
 8002bdc:	08002bf9 	.word	0x08002bf9
 8002be0:	08002bff 	.word	0x08002bff
 8002be4:	08002c05 	.word	0x08002c05
 8002be8:	08002c0b 	.word	0x08002c0b
	{
	case 0:
		reg = RX_PW_P0;
 8002bec:	2311      	movs	r3, #17
 8002bee:	75fb      	strb	r3, [r7, #23]
		break;
 8002bf0:	e00e      	b.n	8002c10 <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 1:
		reg = RX_PW_P1;
 8002bf2:	2312      	movs	r3, #18
 8002bf4:	75fb      	strb	r3, [r7, #23]
		break;
 8002bf6:	e00b      	b.n	8002c10 <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 2:
		reg = RX_PW_P2;
 8002bf8:	2313      	movs	r3, #19
 8002bfa:	75fb      	strb	r3, [r7, #23]
		break;
 8002bfc:	e008      	b.n	8002c10 <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 3:
		reg = RX_PW_P3;
 8002bfe:	2314      	movs	r3, #20
 8002c00:	75fb      	strb	r3, [r7, #23]
		break;
 8002c02:	e005      	b.n	8002c10 <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 4:
		reg = RX_PW_P4;
 8002c04:	2315      	movs	r3, #21
 8002c06:	75fb      	strb	r3, [r7, #23]
		break;
 8002c08:	e002      	b.n	8002c10 <RX_PW_P_NUM_Number_Of_Bytes+0x58>
	case 5:
		reg = RX_PW_P5;
 8002c0a:	2316      	movs	r3, #22
 8002c0c:	75fb      	strb	r3, [r7, #23]
		break;
 8002c0e:	bf00      	nop
	default:
		return;
	}
	nRF_WriteOneRegister(nrf, reg, data);
 8002c10:	79fa      	ldrb	r2, [r7, #7]
 8002c12:	7dfb      	ldrb	r3, [r7, #23]
 8002c14:	4619      	mov	r1, r3
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f7ff fd8d 	bl	8002736 <nRF_WriteOneRegister>
 8002c1c:	e000      	b.n	8002c20 <RX_PW_P_NUM_Number_Of_Bytes+0x68>
		return;
 8002c1e:	bf00      	nop
}
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop

08002c28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	607b      	str	r3, [r7, #4]
 8002c32:	4b12      	ldr	r3, [pc, #72]	@ (8002c7c <HAL_MspInit+0x54>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c36:	4a11      	ldr	r2, [pc, #68]	@ (8002c7c <HAL_MspInit+0x54>)
 8002c38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c7c <HAL_MspInit+0x54>)
 8002c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c46:	607b      	str	r3, [r7, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	603b      	str	r3, [r7, #0]
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c7c <HAL_MspInit+0x54>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	4a0a      	ldr	r2, [pc, #40]	@ (8002c7c <HAL_MspInit+0x54>)
 8002c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c5a:	4b08      	ldr	r3, [pc, #32]	@ (8002c7c <HAL_MspInit+0x54>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c66:	2200      	movs	r2, #0
 8002c68:	210f      	movs	r1, #15
 8002c6a:	f06f 0001 	mvn.w	r0, #1
 8002c6e:	f000 fc57 	bl	8003520 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40023800 	.word	0x40023800

08002c80 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08a      	sub	sp, #40	@ 0x28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a19      	ldr	r2, [pc, #100]	@ (8002d04 <HAL_I2C_MspInit+0x84>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d12b      	bne.n	8002cfa <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	4b18      	ldr	r3, [pc, #96]	@ (8002d08 <HAL_I2C_MspInit+0x88>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	4a17      	ldr	r2, [pc, #92]	@ (8002d08 <HAL_I2C_MspInit+0x88>)
 8002cac:	f043 0302 	orr.w	r3, r3, #2
 8002cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cb2:	4b15      	ldr	r3, [pc, #84]	@ (8002d08 <HAL_I2C_MspInit+0x88>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cbe:	23c0      	movs	r3, #192	@ 0xc0
 8002cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cc2:	2312      	movs	r3, #18
 8002cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cce:	2304      	movs	r3, #4
 8002cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	480c      	ldr	r0, [pc, #48]	@ (8002d0c <HAL_I2C_MspInit+0x8c>)
 8002cda:	f000 fc4b 	bl	8003574 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <HAL_I2C_MspInit+0x88>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	4a08      	ldr	r2, [pc, #32]	@ (8002d08 <HAL_I2C_MspInit+0x88>)
 8002ce8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cee:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <HAL_I2C_MspInit+0x88>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002cfa:	bf00      	nop
 8002cfc:	3728      	adds	r7, #40	@ 0x28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40005400 	.word	0x40005400
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40020400 	.word	0x40020400

08002d10 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	@ 0x30
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	f107 031c 	add.w	r3, r7, #28
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a32      	ldr	r2, [pc, #200]	@ (8002df8 <HAL_SPI_MspInit+0xe8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d12c      	bne.n	8002d8c <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	4b31      	ldr	r3, [pc, #196]	@ (8002dfc <HAL_SPI_MspInit+0xec>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3a:	4a30      	ldr	r2, [pc, #192]	@ (8002dfc <HAL_SPI_MspInit+0xec>)
 8002d3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d42:	4b2e      	ldr	r3, [pc, #184]	@ (8002dfc <HAL_SPI_MspInit+0xec>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d4a:	61bb      	str	r3, [r7, #24]
 8002d4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	4b2a      	ldr	r3, [pc, #168]	@ (8002dfc <HAL_SPI_MspInit+0xec>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	4a29      	ldr	r2, [pc, #164]	@ (8002dfc <HAL_SPI_MspInit+0xec>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d5e:	4b27      	ldr	r3, [pc, #156]	@ (8002dfc <HAL_SPI_MspInit+0xec>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d6a:	23e0      	movs	r3, #224	@ 0xe0
 8002d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d76:	2303      	movs	r3, #3
 8002d78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d7a:	2305      	movs	r3, #5
 8002d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7e:	f107 031c 	add.w	r3, r7, #28
 8002d82:	4619      	mov	r1, r3
 8002d84:	481e      	ldr	r0, [pc, #120]	@ (8002e00 <HAL_SPI_MspInit+0xf0>)
 8002d86:	f000 fbf5 	bl	8003574 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002d8a:	e031      	b.n	8002df0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1c      	ldr	r2, [pc, #112]	@ (8002e04 <HAL_SPI_MspInit+0xf4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d12c      	bne.n	8002df0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	4b18      	ldr	r3, [pc, #96]	@ (8002dfc <HAL_SPI_MspInit+0xec>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	4a17      	ldr	r2, [pc, #92]	@ (8002dfc <HAL_SPI_MspInit+0xec>)
 8002da0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002da6:	4b15      	ldr	r3, [pc, #84]	@ (8002dfc <HAL_SPI_MspInit+0xec>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <HAL_SPI_MspInit+0xec>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dba:	4a10      	ldr	r2, [pc, #64]	@ (8002dfc <HAL_SPI_MspInit+0xec>)
 8002dbc:	f043 0302 	orr.w	r3, r3, #2
 8002dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <HAL_SPI_MspInit+0xec>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002dce:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8002dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002de0:	2305      	movs	r3, #5
 8002de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de4:	f107 031c 	add.w	r3, r7, #28
 8002de8:	4619      	mov	r1, r3
 8002dea:	4807      	ldr	r0, [pc, #28]	@ (8002e08 <HAL_SPI_MspInit+0xf8>)
 8002dec:	f000 fbc2 	bl	8003574 <HAL_GPIO_Init>
}
 8002df0:	bf00      	nop
 8002df2:	3730      	adds	r7, #48	@ 0x30
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40013000 	.word	0x40013000
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40020000 	.word	0x40020000
 8002e04:	40003800 	.word	0x40003800
 8002e08:	40020400 	.word	0x40020400

08002e0c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e1c:	d10d      	bne.n	8002e3a <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	4a08      	ldr	r2, [pc, #32]	@ (8002e48 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e2e:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002e3a:	bf00      	nop
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800

08002e4c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0e      	ldr	r2, [pc, #56]	@ (8002e94 <HAL_TIM_Base_MspInit+0x48>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d115      	bne.n	8002e8a <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	4b0d      	ldr	r3, [pc, #52]	@ (8002e98 <HAL_TIM_Base_MspInit+0x4c>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e66:	4a0c      	ldr	r2, [pc, #48]	@ (8002e98 <HAL_TIM_Base_MspInit+0x4c>)
 8002e68:	f043 0302 	orr.w	r3, r3, #2
 8002e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e98 <HAL_TIM_Base_MspInit+0x4c>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2105      	movs	r1, #5
 8002e7e:	201d      	movs	r0, #29
 8002e80:	f000 fb4e 	bl	8003520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e84:	201d      	movs	r0, #29
 8002e86:	f000 fb67 	bl	8003558 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002e8a:	bf00      	nop
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40000400 	.word	0x40000400
 8002e98:	40023800 	.word	0x40023800

08002e9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea4:	f107 030c 	add.w	r3, r7, #12
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	60da      	str	r2, [r3, #12]
 8002eb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ebc:	d11d      	bne.n	8002efa <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	4b10      	ldr	r3, [pc, #64]	@ (8002f04 <HAL_TIM_MspPostInit+0x68>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8002f04 <HAL_TIM_MspPostInit+0x68>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ece:	4b0d      	ldr	r3, [pc, #52]	@ (8002f04 <HAL_TIM_MspPostInit+0x68>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002eda:	230f      	movs	r3, #15
 8002edc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002eea:	2301      	movs	r3, #1
 8002eec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eee:	f107 030c 	add.w	r3, r7, #12
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4804      	ldr	r0, [pc, #16]	@ (8002f08 <HAL_TIM_MspPostInit+0x6c>)
 8002ef6:	f000 fb3d 	bl	8003574 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002efa:	bf00      	nop
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40020000 	.word	0x40020000

08002f0c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	@ 0x28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f14:	f107 0314 	add.w	r3, r7, #20
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a19      	ldr	r2, [pc, #100]	@ (8002f90 <HAL_UART_MspInit+0x84>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d12c      	bne.n	8002f88 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	4b18      	ldr	r3, [pc, #96]	@ (8002f94 <HAL_UART_MspInit+0x88>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f36:	4a17      	ldr	r2, [pc, #92]	@ (8002f94 <HAL_UART_MspInit+0x88>)
 8002f38:	f043 0310 	orr.w	r3, r3, #16
 8002f3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f3e:	4b15      	ldr	r3, [pc, #84]	@ (8002f94 <HAL_UART_MspInit+0x88>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	4b11      	ldr	r3, [pc, #68]	@ (8002f94 <HAL_UART_MspInit+0x88>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	4a10      	ldr	r2, [pc, #64]	@ (8002f94 <HAL_UART_MspInit+0x88>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f94 <HAL_UART_MspInit+0x88>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f66:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f74:	2303      	movs	r3, #3
 8002f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f78:	2307      	movs	r3, #7
 8002f7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	4619      	mov	r1, r3
 8002f82:	4805      	ldr	r0, [pc, #20]	@ (8002f98 <HAL_UART_MspInit+0x8c>)
 8002f84:	f000 faf6 	bl	8003574 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002f88:	bf00      	nop
 8002f8a:	3728      	adds	r7, #40	@ 0x28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40011000 	.word	0x40011000
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40020000 	.word	0x40020000

08002f9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08c      	sub	sp, #48	@ 0x30
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002fac:	2300      	movs	r3, #0
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	4b2e      	ldr	r3, [pc, #184]	@ (800306c <HAL_InitTick+0xd0>)
 8002fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb4:	4a2d      	ldr	r2, [pc, #180]	@ (800306c <HAL_InitTick+0xd0>)
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800306c <HAL_InitTick+0xd0>)
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fc8:	f107 020c 	add.w	r2, r7, #12
 8002fcc:	f107 0310 	add.w	r3, r7, #16
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f002 f90a 	bl	80051ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002fd8:	f002 f8f4 	bl	80051c4 <HAL_RCC_GetPCLK2Freq>
 8002fdc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe0:	4a23      	ldr	r2, [pc, #140]	@ (8003070 <HAL_InitTick+0xd4>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	0c9b      	lsrs	r3, r3, #18
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002fec:	4b21      	ldr	r3, [pc, #132]	@ (8003074 <HAL_InitTick+0xd8>)
 8002fee:	4a22      	ldr	r2, [pc, #136]	@ (8003078 <HAL_InitTick+0xdc>)
 8002ff0:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002ff2:	4b20      	ldr	r3, [pc, #128]	@ (8003074 <HAL_InitTick+0xd8>)
 8002ff4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002ff8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8003074 <HAL_InitTick+0xd8>)
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003000:	4b1c      	ldr	r3, [pc, #112]	@ (8003074 <HAL_InitTick+0xd8>)
 8003002:	2200      	movs	r2, #0
 8003004:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003006:	4b1b      	ldr	r3, [pc, #108]	@ (8003074 <HAL_InitTick+0xd8>)
 8003008:	2200      	movs	r2, #0
 800300a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800300c:	4b19      	ldr	r3, [pc, #100]	@ (8003074 <HAL_InitTick+0xd8>)
 800300e:	2200      	movs	r2, #0
 8003010:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003012:	4818      	ldr	r0, [pc, #96]	@ (8003074 <HAL_InitTick+0xd8>)
 8003014:	f002 feee 	bl	8005df4 <HAL_TIM_Base_Init>
 8003018:	4603      	mov	r3, r0
 800301a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800301e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003022:	2b00      	cmp	r3, #0
 8003024:	d11b      	bne.n	800305e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003026:	4813      	ldr	r0, [pc, #76]	@ (8003074 <HAL_InitTick+0xd8>)
 8003028:	f002 ff34 	bl	8005e94 <HAL_TIM_Base_Start_IT>
 800302c:	4603      	mov	r3, r0
 800302e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003032:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003036:	2b00      	cmp	r3, #0
 8003038:	d111      	bne.n	800305e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800303a:	2019      	movs	r0, #25
 800303c:	f000 fa8c 	bl	8003558 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b0f      	cmp	r3, #15
 8003044:	d808      	bhi.n	8003058 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003046:	2200      	movs	r2, #0
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	2019      	movs	r0, #25
 800304c:	f000 fa68 	bl	8003520 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003050:	4a0a      	ldr	r2, [pc, #40]	@ (800307c <HAL_InitTick+0xe0>)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	e002      	b.n	800305e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800305e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003062:	4618      	mov	r0, r3
 8003064:	3730      	adds	r7, #48	@ 0x30
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800
 8003070:	431bde83 	.word	0x431bde83
 8003074:	200009e0 	.word	0x200009e0
 8003078:	40010000 	.word	0x40010000
 800307c:	2000002c 	.word	0x2000002c

08003080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003084:	bf00      	nop
 8003086:	e7fd      	b.n	8003084 <NMI_Handler+0x4>

08003088 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <HardFault_Handler+0x4>

08003090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003094:	bf00      	nop
 8003096:	e7fd      	b.n	8003094 <MemManage_Handler+0x4>

08003098 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <BusFault_Handler+0x4>

080030a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030a4:	bf00      	nop
 80030a6:	e7fd      	b.n	80030a4 <UsageFault_Handler+0x4>

080030a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030bc:	4802      	ldr	r0, [pc, #8]	@ (80030c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80030be:	f003 f84b 	bl	8006158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	200009e0 	.word	0x200009e0

080030cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80030d0:	4802      	ldr	r0, [pc, #8]	@ (80030dc <TIM3_IRQHandler+0x10>)
 80030d2:	f003 f841 	bl	8006158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	2000060c 	.word	0x2000060c

080030e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return 1;
 80030e4:	2301      	movs	r3, #1
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <_kill>:

int _kill(int pid, int sig)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030fa:	f006 fcb3 	bl	8009a64 <__errno>
 80030fe:	4603      	mov	r3, r0
 8003100:	2216      	movs	r2, #22
 8003102:	601a      	str	r2, [r3, #0]
  return -1;
 8003104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <_exit>:

void _exit (int status)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003118:	f04f 31ff 	mov.w	r1, #4294967295
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff ffe7 	bl	80030f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003122:	bf00      	nop
 8003124:	e7fd      	b.n	8003122 <_exit+0x12>

08003126 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b086      	sub	sp, #24
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	e00a      	b.n	800314e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003138:	f3af 8000 	nop.w
 800313c:	4601      	mov	r1, r0
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	60ba      	str	r2, [r7, #8]
 8003144:	b2ca      	uxtb	r2, r1
 8003146:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	3301      	adds	r3, #1
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	429a      	cmp	r2, r3
 8003154:	dbf0      	blt.n	8003138 <_read+0x12>
  }

  return len;
 8003156:	687b      	ldr	r3, [r7, #4]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	e009      	b.n	8003186 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	60ba      	str	r2, [r7, #8]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	3301      	adds	r3, #1
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	429a      	cmp	r2, r3
 800318c:	dbf1      	blt.n	8003172 <_write+0x12>
  }
  return len;
 800318e:	687b      	ldr	r3, [r7, #4]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <_close>:

int _close(int file)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031c0:	605a      	str	r2, [r3, #4]
  return 0;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <_isatty>:

int _isatty(int file)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031d8:	2301      	movs	r3, #1
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b085      	sub	sp, #20
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003208:	4a14      	ldr	r2, [pc, #80]	@ (800325c <_sbrk+0x5c>)
 800320a:	4b15      	ldr	r3, [pc, #84]	@ (8003260 <_sbrk+0x60>)
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003214:	4b13      	ldr	r3, [pc, #76]	@ (8003264 <_sbrk+0x64>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d102      	bne.n	8003222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800321c:	4b11      	ldr	r3, [pc, #68]	@ (8003264 <_sbrk+0x64>)
 800321e:	4a12      	ldr	r2, [pc, #72]	@ (8003268 <_sbrk+0x68>)
 8003220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003222:	4b10      	ldr	r3, [pc, #64]	@ (8003264 <_sbrk+0x64>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	429a      	cmp	r2, r3
 800322e:	d207      	bcs.n	8003240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003230:	f006 fc18 	bl	8009a64 <__errno>
 8003234:	4603      	mov	r3, r0
 8003236:	220c      	movs	r2, #12
 8003238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800323a:	f04f 33ff 	mov.w	r3, #4294967295
 800323e:	e009      	b.n	8003254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003240:	4b08      	ldr	r3, [pc, #32]	@ (8003264 <_sbrk+0x64>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003246:	4b07      	ldr	r3, [pc, #28]	@ (8003264 <_sbrk+0x64>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	4a05      	ldr	r2, [pc, #20]	@ (8003264 <_sbrk+0x64>)
 8003250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003252:	68fb      	ldr	r3, [r7, #12]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20020000 	.word	0x20020000
 8003260:	00000400 	.word	0x00000400
 8003264:	20000a28 	.word	0x20000a28
 8003268:	200048d0 	.word	0x200048d0

0800326c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003270:	4b06      	ldr	r3, [pc, #24]	@ (800328c <SystemInit+0x20>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003276:	4a05      	ldr	r2, [pc, #20]	@ (800328c <SystemInit+0x20>)
 8003278:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800327c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003290:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003294:	f7ff ffea 	bl	800326c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003298:	480c      	ldr	r0, [pc, #48]	@ (80032cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800329a:	490d      	ldr	r1, [pc, #52]	@ (80032d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800329c:	4a0d      	ldr	r2, [pc, #52]	@ (80032d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800329e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032a0:	e002      	b.n	80032a8 <LoopCopyDataInit>

080032a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032a6:	3304      	adds	r3, #4

080032a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032ac:	d3f9      	bcc.n	80032a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032ae:	4a0a      	ldr	r2, [pc, #40]	@ (80032d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032b0:	4c0a      	ldr	r4, [pc, #40]	@ (80032dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80032b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032b4:	e001      	b.n	80032ba <LoopFillZerobss>

080032b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032b8:	3204      	adds	r2, #4

080032ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032bc:	d3fb      	bcc.n	80032b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032be:	f006 fbd7 	bl	8009a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032c2:	f7fe fc25 	bl	8001b10 <main>
  bx  lr    
 80032c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80032c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032d0:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80032d4:	0800d744 	.word	0x0800d744
  ldr r2, =_sbss
 80032d8:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80032dc:	200048d0 	.word	0x200048d0

080032e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032e0:	e7fe      	b.n	80032e0 <ADC_IRQHandler>
	...

080032e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003324 <HAL_Init+0x40>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003324 <HAL_Init+0x40>)
 80032ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003324 <HAL_Init+0x40>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003324 <HAL_Init+0x40>)
 80032fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003300:	4b08      	ldr	r3, [pc, #32]	@ (8003324 <HAL_Init+0x40>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a07      	ldr	r2, [pc, #28]	@ (8003324 <HAL_Init+0x40>)
 8003306:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800330a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800330c:	2003      	movs	r0, #3
 800330e:	f000 f8fc 	bl	800350a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003312:	200f      	movs	r0, #15
 8003314:	f7ff fe42 	bl	8002f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003318:	f7ff fc86 	bl	8002c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40023c00 	.word	0x40023c00

08003328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <HAL_IncTick+0x20>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	4b06      	ldr	r3, [pc, #24]	@ (800334c <HAL_IncTick+0x24>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4413      	add	r3, r2
 8003338:	4a04      	ldr	r2, [pc, #16]	@ (800334c <HAL_IncTick+0x24>)
 800333a:	6013      	str	r3, [r2, #0]
}
 800333c:	bf00      	nop
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000030 	.word	0x20000030
 800334c:	20000a2c 	.word	0x20000a2c

08003350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return uwTick;
 8003354:	4b03      	ldr	r3, [pc, #12]	@ (8003364 <HAL_GetTick+0x14>)
 8003356:	681b      	ldr	r3, [r3, #0]
}
 8003358:	4618      	mov	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	20000a2c 	.word	0x20000a2c

08003368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003370:	f7ff ffee 	bl	8003350 <HAL_GetTick>
 8003374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d005      	beq.n	800338e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003382:	4b0a      	ldr	r3, [pc, #40]	@ (80033ac <HAL_Delay+0x44>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800338e:	bf00      	nop
 8003390:	f7ff ffde 	bl	8003350 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	429a      	cmp	r2, r3
 800339e:	d8f7      	bhi.n	8003390 <HAL_Delay+0x28>
  {
  }
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000030 	.word	0x20000030

080033b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033c0:	4b0c      	ldr	r3, [pc, #48]	@ (80033f4 <__NVIC_SetPriorityGrouping+0x44>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033cc:	4013      	ands	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033e2:	4a04      	ldr	r2, [pc, #16]	@ (80033f4 <__NVIC_SetPriorityGrouping+0x44>)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	60d3      	str	r3, [r2, #12]
}
 80033e8:	bf00      	nop
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033fc:	4b04      	ldr	r3, [pc, #16]	@ (8003410 <__NVIC_GetPriorityGrouping+0x18>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	0a1b      	lsrs	r3, r3, #8
 8003402:	f003 0307 	and.w	r3, r3, #7
}
 8003406:	4618      	mov	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	2b00      	cmp	r3, #0
 8003424:	db0b      	blt.n	800343e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	f003 021f 	and.w	r2, r3, #31
 800342c:	4907      	ldr	r1, [pc, #28]	@ (800344c <__NVIC_EnableIRQ+0x38>)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	2001      	movs	r0, #1
 8003436:	fa00 f202 	lsl.w	r2, r0, r2
 800343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	e000e100 	.word	0xe000e100

08003450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	6039      	str	r1, [r7, #0]
 800345a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800345c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003460:	2b00      	cmp	r3, #0
 8003462:	db0a      	blt.n	800347a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	b2da      	uxtb	r2, r3
 8003468:	490c      	ldr	r1, [pc, #48]	@ (800349c <__NVIC_SetPriority+0x4c>)
 800346a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346e:	0112      	lsls	r2, r2, #4
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	440b      	add	r3, r1
 8003474:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003478:	e00a      	b.n	8003490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	b2da      	uxtb	r2, r3
 800347e:	4908      	ldr	r1, [pc, #32]	@ (80034a0 <__NVIC_SetPriority+0x50>)
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	3b04      	subs	r3, #4
 8003488:	0112      	lsls	r2, r2, #4
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	440b      	add	r3, r1
 800348e:	761a      	strb	r2, [r3, #24]
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	e000e100 	.word	0xe000e100
 80034a0:	e000ed00 	.word	0xe000ed00

080034a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b089      	sub	sp, #36	@ 0x24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f1c3 0307 	rsb	r3, r3, #7
 80034be:	2b04      	cmp	r3, #4
 80034c0:	bf28      	it	cs
 80034c2:	2304      	movcs	r3, #4
 80034c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	3304      	adds	r3, #4
 80034ca:	2b06      	cmp	r3, #6
 80034cc:	d902      	bls.n	80034d4 <NVIC_EncodePriority+0x30>
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3b03      	subs	r3, #3
 80034d2:	e000      	b.n	80034d6 <NVIC_EncodePriority+0x32>
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d8:	f04f 32ff 	mov.w	r2, #4294967295
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43da      	mvns	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	401a      	ands	r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034ec:	f04f 31ff 	mov.w	r1, #4294967295
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	fa01 f303 	lsl.w	r3, r1, r3
 80034f6:	43d9      	mvns	r1, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034fc:	4313      	orrs	r3, r2
         );
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3724      	adds	r7, #36	@ 0x24
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff ff4c 	bl	80033b0 <__NVIC_SetPriorityGrouping>
}
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003532:	f7ff ff61 	bl	80033f8 <__NVIC_GetPriorityGrouping>
 8003536:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	68b9      	ldr	r1, [r7, #8]
 800353c:	6978      	ldr	r0, [r7, #20]
 800353e:	f7ff ffb1 	bl	80034a4 <NVIC_EncodePriority>
 8003542:	4602      	mov	r2, r0
 8003544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003548:	4611      	mov	r1, r2
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff ff80 	bl	8003450 <__NVIC_SetPriority>
}
 8003550:	bf00      	nop
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff ff54 	bl	8003414 <__NVIC_EnableIRQ>
}
 800356c:	bf00      	nop
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003574:	b480      	push	{r7}
 8003576:	b089      	sub	sp, #36	@ 0x24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003582:	2300      	movs	r3, #0
 8003584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003586:	2300      	movs	r3, #0
 8003588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
 800358e:	e159      	b.n	8003844 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003590:	2201      	movs	r2, #1
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	f040 8148 	bne.w	800383e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d005      	beq.n	80035c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d130      	bne.n	8003628 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	2203      	movs	r2, #3
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43db      	mvns	r3, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4013      	ands	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035fc:	2201      	movs	r2, #1
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	f003 0201 	and.w	r2, r3, #1
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	2b03      	cmp	r3, #3
 8003632:	d017      	beq.n	8003664 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	2203      	movs	r2, #3
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d123      	bne.n	80036b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	08da      	lsrs	r2, r3, #3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3208      	adds	r2, #8
 8003678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800367c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	220f      	movs	r2, #15
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	08da      	lsrs	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3208      	adds	r2, #8
 80036b2:	69b9      	ldr	r1, [r7, #24]
 80036b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	2203      	movs	r2, #3
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0203 	and.w	r2, r3, #3
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 80a2 	beq.w	800383e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	4b57      	ldr	r3, [pc, #348]	@ (800385c <HAL_GPIO_Init+0x2e8>)
 8003700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003702:	4a56      	ldr	r2, [pc, #344]	@ (800385c <HAL_GPIO_Init+0x2e8>)
 8003704:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003708:	6453      	str	r3, [r2, #68]	@ 0x44
 800370a:	4b54      	ldr	r3, [pc, #336]	@ (800385c <HAL_GPIO_Init+0x2e8>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003716:	4a52      	ldr	r2, [pc, #328]	@ (8003860 <HAL_GPIO_Init+0x2ec>)
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	089b      	lsrs	r3, r3, #2
 800371c:	3302      	adds	r3, #2
 800371e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	220f      	movs	r2, #15
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43db      	mvns	r3, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4013      	ands	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a49      	ldr	r2, [pc, #292]	@ (8003864 <HAL_GPIO_Init+0x2f0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d019      	beq.n	8003776 <HAL_GPIO_Init+0x202>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a48      	ldr	r2, [pc, #288]	@ (8003868 <HAL_GPIO_Init+0x2f4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d013      	beq.n	8003772 <HAL_GPIO_Init+0x1fe>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a47      	ldr	r2, [pc, #284]	@ (800386c <HAL_GPIO_Init+0x2f8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d00d      	beq.n	800376e <HAL_GPIO_Init+0x1fa>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a46      	ldr	r2, [pc, #280]	@ (8003870 <HAL_GPIO_Init+0x2fc>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d007      	beq.n	800376a <HAL_GPIO_Init+0x1f6>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a45      	ldr	r2, [pc, #276]	@ (8003874 <HAL_GPIO_Init+0x300>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d101      	bne.n	8003766 <HAL_GPIO_Init+0x1f2>
 8003762:	2304      	movs	r3, #4
 8003764:	e008      	b.n	8003778 <HAL_GPIO_Init+0x204>
 8003766:	2307      	movs	r3, #7
 8003768:	e006      	b.n	8003778 <HAL_GPIO_Init+0x204>
 800376a:	2303      	movs	r3, #3
 800376c:	e004      	b.n	8003778 <HAL_GPIO_Init+0x204>
 800376e:	2302      	movs	r3, #2
 8003770:	e002      	b.n	8003778 <HAL_GPIO_Init+0x204>
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <HAL_GPIO_Init+0x204>
 8003776:	2300      	movs	r3, #0
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	f002 0203 	and.w	r2, r2, #3
 800377e:	0092      	lsls	r2, r2, #2
 8003780:	4093      	lsls	r3, r2
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4313      	orrs	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003788:	4935      	ldr	r1, [pc, #212]	@ (8003860 <HAL_GPIO_Init+0x2ec>)
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	089b      	lsrs	r3, r3, #2
 800378e:	3302      	adds	r3, #2
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003796:	4b38      	ldr	r3, [pc, #224]	@ (8003878 <HAL_GPIO_Init+0x304>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	43db      	mvns	r3, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4013      	ands	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037ba:	4a2f      	ldr	r2, [pc, #188]	@ (8003878 <HAL_GPIO_Init+0x304>)
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003878 <HAL_GPIO_Init+0x304>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037e4:	4a24      	ldr	r2, [pc, #144]	@ (8003878 <HAL_GPIO_Init+0x304>)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037ea:	4b23      	ldr	r3, [pc, #140]	@ (8003878 <HAL_GPIO_Init+0x304>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	43db      	mvns	r3, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4013      	ands	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800380e:	4a1a      	ldr	r2, [pc, #104]	@ (8003878 <HAL_GPIO_Init+0x304>)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003814:	4b18      	ldr	r3, [pc, #96]	@ (8003878 <HAL_GPIO_Init+0x304>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	43db      	mvns	r3, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4013      	ands	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003838:	4a0f      	ldr	r2, [pc, #60]	@ (8003878 <HAL_GPIO_Init+0x304>)
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3301      	adds	r3, #1
 8003842:	61fb      	str	r3, [r7, #28]
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	2b0f      	cmp	r3, #15
 8003848:	f67f aea2 	bls.w	8003590 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	3724      	adds	r7, #36	@ 0x24
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40023800 	.word	0x40023800
 8003860:	40013800 	.word	0x40013800
 8003864:	40020000 	.word	0x40020000
 8003868:	40020400 	.word	0x40020400
 800386c:	40020800 	.word	0x40020800
 8003870:	40020c00 	.word	0x40020c00
 8003874:	40021000 	.word	0x40021000
 8003878:	40013c00 	.word	0x40013c00

0800387c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	887b      	ldrh	r3, [r7, #2]
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003894:	2301      	movs	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
 8003898:	e001      	b.n	800389e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800389a:	2300      	movs	r3, #0
 800389c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800389e:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	807b      	strh	r3, [r7, #2]
 80038b8:	4613      	mov	r3, r2
 80038ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038bc:	787b      	ldrb	r3, [r7, #1]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038c2:	887a      	ldrh	r2, [r7, #2]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038c8:	e003      	b.n	80038d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038ca:	887b      	ldrh	r3, [r7, #2]
 80038cc:	041a      	lsls	r2, r3, #16
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	619a      	str	r2, [r3, #24]
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038de:	b480      	push	{r7}
 80038e0:	b085      	sub	sp, #20
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	460b      	mov	r3, r1
 80038e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038f0:	887a      	ldrh	r2, [r7, #2]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4013      	ands	r3, r2
 80038f6:	041a      	lsls	r2, r3, #16
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	43d9      	mvns	r1, r3
 80038fc:	887b      	ldrh	r3, [r7, #2]
 80038fe:	400b      	ands	r3, r1
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	619a      	str	r2, [r3, #24]
}
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e12b      	b.n	8003b7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff f9a0 	bl	8002c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2224      	movs	r2, #36	@ 0x24
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003966:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003976:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003978:	f001 fc10 	bl	800519c <HAL_RCC_GetPCLK1Freq>
 800397c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	4a81      	ldr	r2, [pc, #516]	@ (8003b88 <HAL_I2C_Init+0x274>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d807      	bhi.n	8003998 <HAL_I2C_Init+0x84>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4a80      	ldr	r2, [pc, #512]	@ (8003b8c <HAL_I2C_Init+0x278>)
 800398c:	4293      	cmp	r3, r2
 800398e:	bf94      	ite	ls
 8003990:	2301      	movls	r3, #1
 8003992:	2300      	movhi	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	e006      	b.n	80039a6 <HAL_I2C_Init+0x92>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4a7d      	ldr	r2, [pc, #500]	@ (8003b90 <HAL_I2C_Init+0x27c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	bf94      	ite	ls
 80039a0:	2301      	movls	r3, #1
 80039a2:	2300      	movhi	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e0e7      	b.n	8003b7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4a78      	ldr	r2, [pc, #480]	@ (8003b94 <HAL_I2C_Init+0x280>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	0c9b      	lsrs	r3, r3, #18
 80039b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	4a6a      	ldr	r2, [pc, #424]	@ (8003b88 <HAL_I2C_Init+0x274>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d802      	bhi.n	80039e8 <HAL_I2C_Init+0xd4>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	3301      	adds	r3, #1
 80039e6:	e009      	b.n	80039fc <HAL_I2C_Init+0xe8>
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039ee:	fb02 f303 	mul.w	r3, r2, r3
 80039f2:	4a69      	ldr	r2, [pc, #420]	@ (8003b98 <HAL_I2C_Init+0x284>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	099b      	lsrs	r3, r3, #6
 80039fa:	3301      	adds	r3, #1
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	430b      	orrs	r3, r1
 8003a02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a0e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	495c      	ldr	r1, [pc, #368]	@ (8003b88 <HAL_I2C_Init+0x274>)
 8003a18:	428b      	cmp	r3, r1
 8003a1a:	d819      	bhi.n	8003a50 <HAL_I2C_Init+0x13c>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1e59      	subs	r1, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a2a:	1c59      	adds	r1, r3, #1
 8003a2c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a30:	400b      	ands	r3, r1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <HAL_I2C_Init+0x138>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	1e59      	subs	r1, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a44:	3301      	adds	r3, #1
 8003a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4a:	e051      	b.n	8003af0 <HAL_I2C_Init+0x1dc>
 8003a4c:	2304      	movs	r3, #4
 8003a4e:	e04f      	b.n	8003af0 <HAL_I2C_Init+0x1dc>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d111      	bne.n	8003a7c <HAL_I2C_Init+0x168>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	1e58      	subs	r0, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6859      	ldr	r1, [r3, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	440b      	add	r3, r1
 8003a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bf0c      	ite	eq
 8003a74:	2301      	moveq	r3, #1
 8003a76:	2300      	movne	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	e012      	b.n	8003aa2 <HAL_I2C_Init+0x18e>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1e58      	subs	r0, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6859      	ldr	r1, [r3, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	0099      	lsls	r1, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a92:	3301      	adds	r3, #1
 8003a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf0c      	ite	eq
 8003a9c:	2301      	moveq	r3, #1
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_I2C_Init+0x196>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e022      	b.n	8003af0 <HAL_I2C_Init+0x1dc>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10e      	bne.n	8003ad0 <HAL_I2C_Init+0x1bc>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1e58      	subs	r0, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6859      	ldr	r1, [r3, #4]
 8003aba:	460b      	mov	r3, r1
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	440b      	add	r3, r1
 8003ac0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ace:	e00f      	b.n	8003af0 <HAL_I2C_Init+0x1dc>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1e58      	subs	r0, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6859      	ldr	r1, [r3, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	0099      	lsls	r1, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	6809      	ldr	r1, [r1, #0]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69da      	ldr	r2, [r3, #28]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6911      	ldr	r1, [r2, #16]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68d2      	ldr	r2, [r2, #12]
 8003b2a:	4311      	orrs	r1, r2
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	430b      	orrs	r3, r1
 8003b32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695a      	ldr	r2, [r3, #20]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	000186a0 	.word	0x000186a0
 8003b8c:	001e847f 	.word	0x001e847f
 8003b90:	003d08ff 	.word	0x003d08ff
 8003b94:	431bde83 	.word	0x431bde83
 8003b98:	10624dd3 	.word	0x10624dd3

08003b9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	607a      	str	r2, [r7, #4]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	460b      	mov	r3, r1
 8003baa:	817b      	strh	r3, [r7, #10]
 8003bac:	4613      	mov	r3, r2
 8003bae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bb0:	f7ff fbce 	bl	8003350 <HAL_GetTick>
 8003bb4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	f040 80e0 	bne.w	8003d84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	2319      	movs	r3, #25
 8003bca:	2201      	movs	r2, #1
 8003bcc:	4970      	ldr	r1, [pc, #448]	@ (8003d90 <HAL_I2C_Master_Transmit+0x1f4>)
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 fc7e 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e0d3      	b.n	8003d86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_I2C_Master_Transmit+0x50>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e0cc      	b.n	8003d86 <HAL_I2C_Master_Transmit+0x1ea>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d007      	beq.n	8003c12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 0201 	orr.w	r2, r2, #1
 8003c10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2221      	movs	r2, #33	@ 0x21
 8003c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2210      	movs	r2, #16
 8003c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	893a      	ldrh	r2, [r7, #8]
 8003c42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4a50      	ldr	r2, [pc, #320]	@ (8003d94 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c54:	8979      	ldrh	r1, [r7, #10]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	6a3a      	ldr	r2, [r7, #32]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 fae8 	bl	8004230 <I2C_MasterRequestWrite>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e08d      	b.n	8003d86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	613b      	str	r3, [r7, #16]
 8003c7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c80:	e066      	b.n	8003d50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	6a39      	ldr	r1, [r7, #32]
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 fd3c 	bl	8004704 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00d      	beq.n	8003cae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d107      	bne.n	8003caa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ca8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e06b      	b.n	8003d86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	781a      	ldrb	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d11b      	bne.n	8003d24 <HAL_I2C_Master_Transmit+0x188>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d017      	beq.n	8003d24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf8:	781a      	ldrb	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	6a39      	ldr	r1, [r7, #32]
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 fd33 	bl	8004794 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00d      	beq.n	8003d50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d107      	bne.n	8003d4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e01a      	b.n	8003d86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d194      	bne.n	8003c82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	e000      	b.n	8003d86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d84:	2302      	movs	r3, #2
  }
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	00100002 	.word	0x00100002
 8003d94:	ffff0000 	.word	0xffff0000

08003d98 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08c      	sub	sp, #48	@ 0x30
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	607a      	str	r2, [r7, #4]
 8003da2:	461a      	mov	r2, r3
 8003da4:	460b      	mov	r3, r1
 8003da6:	817b      	strh	r3, [r7, #10]
 8003da8:	4613      	mov	r3, r2
 8003daa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dac:	f7ff fad0 	bl	8003350 <HAL_GetTick>
 8003db0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	f040 8217 	bne.w	80041ee <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	2319      	movs	r3, #25
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	497c      	ldr	r1, [pc, #496]	@ (8003fbc <HAL_I2C_Master_Receive+0x224>)
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 fb80 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e20a      	b.n	80041f0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_I2C_Master_Receive+0x50>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e203      	b.n	80041f0 <HAL_I2C_Master_Receive+0x458>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d007      	beq.n	8003e0e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0201 	orr.w	r2, r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2222      	movs	r2, #34	@ 0x22
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2210      	movs	r2, #16
 8003e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	893a      	ldrh	r2, [r7, #8]
 8003e3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4a5c      	ldr	r2, [pc, #368]	@ (8003fc0 <HAL_I2C_Master_Receive+0x228>)
 8003e4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e50:	8979      	ldrh	r1, [r7, #10]
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 fa6c 	bl	8004334 <I2C_MasterRequestRead>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e1c4      	b.n	80041f0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d113      	bne.n	8003e96 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6e:	2300      	movs	r3, #0
 8003e70:	623b      	str	r3, [r7, #32]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	623b      	str	r3, [r7, #32]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	623b      	str	r3, [r7, #32]
 8003e82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	e198      	b.n	80041c8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d11b      	bne.n	8003ed6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	e178      	b.n	80041c8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d11b      	bne.n	8003f16 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003efc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efe:	2300      	movs	r3, #0
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	e158      	b.n	80041c8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	617b      	str	r3, [r7, #20]
 8003f3a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f3c:	e144      	b.n	80041c8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	f200 80f1 	bhi.w	800412a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d123      	bne.n	8003f98 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 fc65 	bl	8004824 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e145      	b.n	80041f0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f96:	e117      	b.n	80041c8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d14e      	bne.n	800403e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	4906      	ldr	r1, [pc, #24]	@ (8003fc4 <HAL_I2C_Master_Receive+0x22c>)
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 fa90 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d008      	beq.n	8003fc8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e11a      	b.n	80041f0 <HAL_I2C_Master_Receive+0x458>
 8003fba:	bf00      	nop
 8003fbc:	00100002 	.word	0x00100002
 8003fc0:	ffff0000 	.word	0xffff0000
 8003fc4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691a      	ldr	r2, [r3, #16]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800403c:	e0c4      	b.n	80041c8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004044:	2200      	movs	r2, #0
 8004046:	496c      	ldr	r1, [pc, #432]	@ (80041f8 <HAL_I2C_Master_Receive+0x460>)
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fa41 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e0cb      	b.n	80041f0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004066:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004090:	b29b      	uxth	r3, r3
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a0:	2200      	movs	r2, #0
 80040a2:	4955      	ldr	r1, [pc, #340]	@ (80041f8 <HAL_I2C_Master_Receive+0x460>)
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 fa13 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e09d      	b.n	80041f0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691a      	ldr	r2, [r3, #16]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004128:	e04e      	b.n	80041c8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800412a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800412c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 fb78 	bl	8004824 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e058      	b.n	80041f0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b04      	cmp	r3, #4
 800417c:	d124      	bne.n	80041c8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004182:	2b03      	cmp	r3, #3
 8004184:	d107      	bne.n	8004196 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004194:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a0:	b2d2      	uxtb	r2, r2
 80041a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041be:	b29b      	uxth	r3, r3
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f47f aeb6 	bne.w	8003f3e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	e000      	b.n	80041f0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80041ee:	2302      	movs	r3, #2
  }
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3728      	adds	r7, #40	@ 0x28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	00010004 	.word	0x00010004

080041fc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800420a:	b2db      	uxtb	r3, r3
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af02      	add	r7, sp, #8
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	607a      	str	r2, [r7, #4]
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	460b      	mov	r3, r1
 800423e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004244:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b08      	cmp	r3, #8
 800424a:	d006      	beq.n	800425a <I2C_MasterRequestWrite+0x2a>
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d003      	beq.n	800425a <I2C_MasterRequestWrite+0x2a>
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004258:	d108      	bne.n	800426c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	e00b      	b.n	8004284 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004270:	2b12      	cmp	r3, #18
 8004272:	d107      	bne.n	8004284 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004282:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f91d 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00d      	beq.n	80042b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042aa:	d103      	bne.n	80042b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e035      	b.n	8004324 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042c0:	d108      	bne.n	80042d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042c2:	897b      	ldrh	r3, [r7, #10]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042d0:	611a      	str	r2, [r3, #16]
 80042d2:	e01b      	b.n	800430c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042d4:	897b      	ldrh	r3, [r7, #10]
 80042d6:	11db      	asrs	r3, r3, #7
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	f003 0306 	and.w	r3, r3, #6
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f063 030f 	orn	r3, r3, #15
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	490e      	ldr	r1, [pc, #56]	@ (800432c <I2C_MasterRequestWrite+0xfc>)
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 f966 	bl	80045c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e010      	b.n	8004324 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004302:	897b      	ldrh	r3, [r7, #10]
 8004304:	b2da      	uxtb	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	4907      	ldr	r1, [pc, #28]	@ (8004330 <I2C_MasterRequestWrite+0x100>)
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 f956 	bl	80045c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	00010008 	.word	0x00010008
 8004330:	00010002 	.word	0x00010002

08004334 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	607a      	str	r2, [r7, #4]
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	460b      	mov	r3, r1
 8004342:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004348:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004358:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b08      	cmp	r3, #8
 800435e:	d006      	beq.n	800436e <I2C_MasterRequestRead+0x3a>
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d003      	beq.n	800436e <I2C_MasterRequestRead+0x3a>
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800436c:	d108      	bne.n	8004380 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	e00b      	b.n	8004398 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004384:	2b11      	cmp	r3, #17
 8004386:	d107      	bne.n	8004398 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004396:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f893 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00d      	beq.n	80043cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043be:	d103      	bne.n	80043c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e079      	b.n	80044c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043d4:	d108      	bne.n	80043e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043d6:	897b      	ldrh	r3, [r7, #10]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	611a      	str	r2, [r3, #16]
 80043e6:	e05f      	b.n	80044a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043e8:	897b      	ldrh	r3, [r7, #10]
 80043ea:	11db      	asrs	r3, r3, #7
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f003 0306 	and.w	r3, r3, #6
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	f063 030f 	orn	r3, r3, #15
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	4930      	ldr	r1, [pc, #192]	@ (80044c8 <I2C_MasterRequestRead+0x194>)
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f8dc 	bl	80045c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e054      	b.n	80044c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004416:	897b      	ldrh	r3, [r7, #10]
 8004418:	b2da      	uxtb	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	4929      	ldr	r1, [pc, #164]	@ (80044cc <I2C_MasterRequestRead+0x198>)
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 f8cc 	bl	80045c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e044      	b.n	80044c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004436:	2300      	movs	r3, #0
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800445a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f831 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00d      	beq.n	8004490 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800447e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004482:	d103      	bne.n	800448c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800448a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e017      	b.n	80044c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004490:	897b      	ldrh	r3, [r7, #10]
 8004492:	11db      	asrs	r3, r3, #7
 8004494:	b2db      	uxtb	r3, r3
 8004496:	f003 0306 	and.w	r3, r3, #6
 800449a:	b2db      	uxtb	r3, r3
 800449c:	f063 030e 	orn	r3, r3, #14
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4907      	ldr	r1, [pc, #28]	@ (80044cc <I2C_MasterRequestRead+0x198>)
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f888 	bl	80045c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	00010008 	.word	0x00010008
 80044cc:	00010002 	.word	0x00010002

080044d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	4613      	mov	r3, r2
 80044de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044e0:	e048      	b.n	8004574 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e8:	d044      	beq.n	8004574 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ea:	f7fe ff31 	bl	8003350 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d302      	bcc.n	8004500 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d139      	bne.n	8004574 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	0c1b      	lsrs	r3, r3, #16
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b01      	cmp	r3, #1
 8004508:	d10d      	bne.n	8004526 <I2C_WaitOnFlagUntilTimeout+0x56>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	43da      	mvns	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4013      	ands	r3, r2
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	bf0c      	ite	eq
 800451c:	2301      	moveq	r3, #1
 800451e:	2300      	movne	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	e00c      	b.n	8004540 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	43da      	mvns	r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4013      	ands	r3, r2
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	bf0c      	ite	eq
 8004538:	2301      	moveq	r3, #1
 800453a:	2300      	movne	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	429a      	cmp	r2, r3
 8004544:	d116      	bne.n	8004574 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004560:	f043 0220 	orr.w	r2, r3, #32
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e023      	b.n	80045bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	0c1b      	lsrs	r3, r3, #16
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b01      	cmp	r3, #1
 800457c:	d10d      	bne.n	800459a <I2C_WaitOnFlagUntilTimeout+0xca>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	43da      	mvns	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	4013      	ands	r3, r2
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	bf0c      	ite	eq
 8004590:	2301      	moveq	r3, #1
 8004592:	2300      	movne	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	461a      	mov	r2, r3
 8004598:	e00c      	b.n	80045b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	43da      	mvns	r2, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	4013      	ands	r3, r2
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	bf0c      	ite	eq
 80045ac:	2301      	moveq	r3, #1
 80045ae:	2300      	movne	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	79fb      	ldrb	r3, [r7, #7]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d093      	beq.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045d2:	e071      	b.n	80046b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045e2:	d123      	bne.n	800462c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004618:	f043 0204 	orr.w	r2, r3, #4
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e067      	b.n	80046fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004632:	d041      	beq.n	80046b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004634:	f7fe fe8c 	bl	8003350 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	429a      	cmp	r2, r3
 8004642:	d302      	bcc.n	800464a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d136      	bne.n	80046b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	0c1b      	lsrs	r3, r3, #16
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b01      	cmp	r3, #1
 8004652:	d10c      	bne.n	800466e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	43da      	mvns	r2, r3
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4013      	ands	r3, r2
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	bf14      	ite	ne
 8004666:	2301      	movne	r3, #1
 8004668:	2300      	moveq	r3, #0
 800466a:	b2db      	uxtb	r3, r3
 800466c:	e00b      	b.n	8004686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	43da      	mvns	r2, r3
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	4013      	ands	r3, r2
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	bf14      	ite	ne
 8004680:	2301      	movne	r3, #1
 8004682:	2300      	moveq	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d016      	beq.n	80046b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a4:	f043 0220 	orr.w	r2, r3, #32
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e021      	b.n	80046fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	0c1b      	lsrs	r3, r3, #16
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d10c      	bne.n	80046dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	43da      	mvns	r2, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	4013      	ands	r3, r2
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	bf14      	ite	ne
 80046d4:	2301      	movne	r3, #1
 80046d6:	2300      	moveq	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	e00b      	b.n	80046f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	43da      	mvns	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4013      	ands	r3, r2
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	bf14      	ite	ne
 80046ee:	2301      	movne	r3, #1
 80046f0:	2300      	moveq	r3, #0
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f47f af6d 	bne.w	80045d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004710:	e034      	b.n	800477c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f8e3 	bl	80048de <I2C_IsAcknowledgeFailed>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e034      	b.n	800478c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d028      	beq.n	800477c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472a:	f7fe fe11 	bl	8003350 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	429a      	cmp	r2, r3
 8004738:	d302      	bcc.n	8004740 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d11d      	bne.n	800477c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800474a:	2b80      	cmp	r3, #128	@ 0x80
 800474c:	d016      	beq.n	800477c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004768:	f043 0220 	orr.w	r2, r3, #32
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e007      	b.n	800478c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004786:	2b80      	cmp	r3, #128	@ 0x80
 8004788:	d1c3      	bne.n	8004712 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047a0:	e034      	b.n	800480c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f89b 	bl	80048de <I2C_IsAcknowledgeFailed>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e034      	b.n	800481c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d028      	beq.n	800480c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ba:	f7fe fdc9 	bl	8003350 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d302      	bcc.n	80047d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d11d      	bne.n	800480c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d016      	beq.n	800480c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f8:	f043 0220 	orr.w	r2, r3, #32
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e007      	b.n	800481c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	2b04      	cmp	r3, #4
 8004818:	d1c3      	bne.n	80047a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004830:	e049      	b.n	80048c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	f003 0310 	and.w	r3, r3, #16
 800483c:	2b10      	cmp	r3, #16
 800483e:	d119      	bne.n	8004874 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f06f 0210 	mvn.w	r2, #16
 8004848:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e030      	b.n	80048d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004874:	f7fe fd6c 	bl	8003350 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	429a      	cmp	r2, r3
 8004882:	d302      	bcc.n	800488a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d11d      	bne.n	80048c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004894:	2b40      	cmp	r3, #64	@ 0x40
 8004896:	d016      	beq.n	80048c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b2:	f043 0220 	orr.w	r2, r3, #32
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e007      	b.n	80048d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048d0:	2b40      	cmp	r3, #64	@ 0x40
 80048d2:	d1ae      	bne.n	8004832 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048f4:	d11b      	bne.n	800492e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	f043 0204 	orr.w	r2, r3, #4
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e267      	b.n	8004e1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d075      	beq.n	8004a46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800495a:	4b88      	ldr	r3, [pc, #544]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 030c 	and.w	r3, r3, #12
 8004962:	2b04      	cmp	r3, #4
 8004964:	d00c      	beq.n	8004980 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004966:	4b85      	ldr	r3, [pc, #532]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800496e:	2b08      	cmp	r3, #8
 8004970:	d112      	bne.n	8004998 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004972:	4b82      	ldr	r3, [pc, #520]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800497a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800497e:	d10b      	bne.n	8004998 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004980:	4b7e      	ldr	r3, [pc, #504]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d05b      	beq.n	8004a44 <HAL_RCC_OscConfig+0x108>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d157      	bne.n	8004a44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e242      	b.n	8004e1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049a0:	d106      	bne.n	80049b0 <HAL_RCC_OscConfig+0x74>
 80049a2:	4b76      	ldr	r3, [pc, #472]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a75      	ldr	r2, [pc, #468]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 80049a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	e01d      	b.n	80049ec <HAL_RCC_OscConfig+0xb0>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049b8:	d10c      	bne.n	80049d4 <HAL_RCC_OscConfig+0x98>
 80049ba:	4b70      	ldr	r3, [pc, #448]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a6f      	ldr	r2, [pc, #444]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 80049c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	4b6d      	ldr	r3, [pc, #436]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a6c      	ldr	r2, [pc, #432]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 80049cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	e00b      	b.n	80049ec <HAL_RCC_OscConfig+0xb0>
 80049d4:	4b69      	ldr	r3, [pc, #420]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a68      	ldr	r2, [pc, #416]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 80049da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	4b66      	ldr	r3, [pc, #408]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a65      	ldr	r2, [pc, #404]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 80049e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d013      	beq.n	8004a1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f4:	f7fe fcac 	bl	8003350 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049fc:	f7fe fca8 	bl	8003350 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b64      	cmp	r3, #100	@ 0x64
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e207      	b.n	8004e1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0e:	4b5b      	ldr	r3, [pc, #364]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0f0      	beq.n	80049fc <HAL_RCC_OscConfig+0xc0>
 8004a1a:	e014      	b.n	8004a46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1c:	f7fe fc98 	bl	8003350 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a24:	f7fe fc94 	bl	8003350 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b64      	cmp	r3, #100	@ 0x64
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e1f3      	b.n	8004e1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a36:	4b51      	ldr	r3, [pc, #324]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f0      	bne.n	8004a24 <HAL_RCC_OscConfig+0xe8>
 8004a42:	e000      	b.n	8004a46 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d063      	beq.n	8004b1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a52:	4b4a      	ldr	r3, [pc, #296]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a5e:	4b47      	ldr	r3, [pc, #284]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d11c      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a6a:	4b44      	ldr	r3, [pc, #272]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d116      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a76:	4b41      	ldr	r3, [pc, #260]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <HAL_RCC_OscConfig+0x152>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d001      	beq.n	8004a8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e1c7      	b.n	8004e1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	4937      	ldr	r1, [pc, #220]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa2:	e03a      	b.n	8004b1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d020      	beq.n	8004aee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aac:	4b34      	ldr	r3, [pc, #208]	@ (8004b80 <HAL_RCC_OscConfig+0x244>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab2:	f7fe fc4d 	bl	8003350 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aba:	f7fe fc49 	bl	8003350 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e1a8      	b.n	8004e1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004acc:	4b2b      	ldr	r3, [pc, #172]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0f0      	beq.n	8004aba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad8:	4b28      	ldr	r3, [pc, #160]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	4925      	ldr	r1, [pc, #148]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	600b      	str	r3, [r1, #0]
 8004aec:	e015      	b.n	8004b1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aee:	4b24      	ldr	r3, [pc, #144]	@ (8004b80 <HAL_RCC_OscConfig+0x244>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af4:	f7fe fc2c 	bl	8003350 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004afc:	f7fe fc28 	bl	8003350 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e187      	b.n	8004e1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d036      	beq.n	8004b94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d016      	beq.n	8004b5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b2e:	4b15      	ldr	r3, [pc, #84]	@ (8004b84 <HAL_RCC_OscConfig+0x248>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b34:	f7fe fc0c 	bl	8003350 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b3c:	f7fe fc08 	bl	8003350 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e167      	b.n	8004e1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b7c <HAL_RCC_OscConfig+0x240>)
 8004b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCC_OscConfig+0x200>
 8004b5a:	e01b      	b.n	8004b94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b5c:	4b09      	ldr	r3, [pc, #36]	@ (8004b84 <HAL_RCC_OscConfig+0x248>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b62:	f7fe fbf5 	bl	8003350 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b68:	e00e      	b.n	8004b88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b6a:	f7fe fbf1 	bl	8003350 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d907      	bls.n	8004b88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e150      	b.n	8004e1e <HAL_RCC_OscConfig+0x4e2>
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	42470000 	.word	0x42470000
 8004b84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b88:	4b88      	ldr	r3, [pc, #544]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004b8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1ea      	bne.n	8004b6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 8097 	beq.w	8004cd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ba6:	4b81      	ldr	r3, [pc, #516]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10f      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60bb      	str	r3, [r7, #8]
 8004bb6:	4b7d      	ldr	r3, [pc, #500]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bba:	4a7c      	ldr	r2, [pc, #496]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bc2:	4b7a      	ldr	r3, [pc, #488]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bca:	60bb      	str	r3, [r7, #8]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd2:	4b77      	ldr	r3, [pc, #476]	@ (8004db0 <HAL_RCC_OscConfig+0x474>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d118      	bne.n	8004c10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bde:	4b74      	ldr	r3, [pc, #464]	@ (8004db0 <HAL_RCC_OscConfig+0x474>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a73      	ldr	r2, [pc, #460]	@ (8004db0 <HAL_RCC_OscConfig+0x474>)
 8004be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bea:	f7fe fbb1 	bl	8003350 <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf2:	f7fe fbad 	bl	8003350 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e10c      	b.n	8004e1e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c04:	4b6a      	ldr	r3, [pc, #424]	@ (8004db0 <HAL_RCC_OscConfig+0x474>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0f0      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d106      	bne.n	8004c26 <HAL_RCC_OscConfig+0x2ea>
 8004c18:	4b64      	ldr	r3, [pc, #400]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c1c:	4a63      	ldr	r2, [pc, #396]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c24:	e01c      	b.n	8004c60 <HAL_RCC_OscConfig+0x324>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b05      	cmp	r3, #5
 8004c2c:	d10c      	bne.n	8004c48 <HAL_RCC_OscConfig+0x30c>
 8004c2e:	4b5f      	ldr	r3, [pc, #380]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c32:	4a5e      	ldr	r2, [pc, #376]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004c34:	f043 0304 	orr.w	r3, r3, #4
 8004c38:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c3a:	4b5c      	ldr	r3, [pc, #368]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c3e:	4a5b      	ldr	r2, [pc, #364]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004c40:	f043 0301 	orr.w	r3, r3, #1
 8004c44:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c46:	e00b      	b.n	8004c60 <HAL_RCC_OscConfig+0x324>
 8004c48:	4b58      	ldr	r3, [pc, #352]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c4c:	4a57      	ldr	r2, [pc, #348]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004c4e:	f023 0301 	bic.w	r3, r3, #1
 8004c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c54:	4b55      	ldr	r3, [pc, #340]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c58:	4a54      	ldr	r2, [pc, #336]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004c5a:	f023 0304 	bic.w	r3, r3, #4
 8004c5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d015      	beq.n	8004c94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c68:	f7fe fb72 	bl	8003350 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c6e:	e00a      	b.n	8004c86 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c70:	f7fe fb6e 	bl	8003350 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e0cb      	b.n	8004e1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c86:	4b49      	ldr	r3, [pc, #292]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0ee      	beq.n	8004c70 <HAL_RCC_OscConfig+0x334>
 8004c92:	e014      	b.n	8004cbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c94:	f7fe fb5c 	bl	8003350 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c9a:	e00a      	b.n	8004cb2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c9c:	f7fe fb58 	bl	8003350 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e0b5      	b.n	8004e1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cb2:	4b3e      	ldr	r3, [pc, #248]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1ee      	bne.n	8004c9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d105      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cc4:	4b39      	ldr	r3, [pc, #228]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc8:	4a38      	ldr	r2, [pc, #224]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004cca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80a1 	beq.w	8004e1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cda:	4b34      	ldr	r3, [pc, #208]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 030c 	and.w	r3, r3, #12
 8004ce2:	2b08      	cmp	r3, #8
 8004ce4:	d05c      	beq.n	8004da0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d141      	bne.n	8004d72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cee:	4b31      	ldr	r3, [pc, #196]	@ (8004db4 <HAL_RCC_OscConfig+0x478>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf4:	f7fe fb2c 	bl	8003350 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cfc:	f7fe fb28 	bl	8003350 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e087      	b.n	8004e1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0e:	4b27      	ldr	r3, [pc, #156]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1f0      	bne.n	8004cfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69da      	ldr	r2, [r3, #28]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d28:	019b      	lsls	r3, r3, #6
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d30:	085b      	lsrs	r3, r3, #1
 8004d32:	3b01      	subs	r3, #1
 8004d34:	041b      	lsls	r3, r3, #16
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3c:	061b      	lsls	r3, r3, #24
 8004d3e:	491b      	ldr	r1, [pc, #108]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d44:	4b1b      	ldr	r3, [pc, #108]	@ (8004db4 <HAL_RCC_OscConfig+0x478>)
 8004d46:	2201      	movs	r2, #1
 8004d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4a:	f7fe fb01 	bl	8003350 <HAL_GetTick>
 8004d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d52:	f7fe fafd 	bl	8003350 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e05c      	b.n	8004e1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d64:	4b11      	ldr	r3, [pc, #68]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0f0      	beq.n	8004d52 <HAL_RCC_OscConfig+0x416>
 8004d70:	e054      	b.n	8004e1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d72:	4b10      	ldr	r3, [pc, #64]	@ (8004db4 <HAL_RCC_OscConfig+0x478>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d78:	f7fe faea 	bl	8003350 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d80:	f7fe fae6 	bl	8003350 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e045      	b.n	8004e1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d92:	4b06      	ldr	r3, [pc, #24]	@ (8004dac <HAL_RCC_OscConfig+0x470>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0x444>
 8004d9e:	e03d      	b.n	8004e1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d107      	bne.n	8004db8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e038      	b.n	8004e1e <HAL_RCC_OscConfig+0x4e2>
 8004dac:	40023800 	.word	0x40023800
 8004db0:	40007000 	.word	0x40007000
 8004db4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004db8:	4b1b      	ldr	r3, [pc, #108]	@ (8004e28 <HAL_RCC_OscConfig+0x4ec>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d028      	beq.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d121      	bne.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d11a      	bne.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004de8:	4013      	ands	r3, r2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004dee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d111      	bne.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfe:	085b      	lsrs	r3, r3, #1
 8004e00:	3b01      	subs	r3, #1
 8004e02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d107      	bne.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d001      	beq.n	8004e1c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40023800 	.word	0x40023800

08004e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e0cc      	b.n	8004fda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e40:	4b68      	ldr	r3, [pc, #416]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d90c      	bls.n	8004e68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4e:	4b65      	ldr	r3, [pc, #404]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e56:	4b63      	ldr	r3, [pc, #396]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d001      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e0b8      	b.n	8004fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d020      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d005      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e80:	4b59      	ldr	r3, [pc, #356]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	4a58      	ldr	r2, [pc, #352]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e98:	4b53      	ldr	r3, [pc, #332]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	4a52      	ldr	r2, [pc, #328]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ea2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ea4:	4b50      	ldr	r3, [pc, #320]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	494d      	ldr	r1, [pc, #308]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d044      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d107      	bne.n	8004eda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eca:	4b47      	ldr	r3, [pc, #284]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d119      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e07f      	b.n	8004fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d003      	beq.n	8004eea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d107      	bne.n	8004efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eea:	4b3f      	ldr	r3, [pc, #252]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d109      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e06f      	b.n	8004fda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004efa:	4b3b      	ldr	r3, [pc, #236]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e067      	b.n	8004fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f0a:	4b37      	ldr	r3, [pc, #220]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f023 0203 	bic.w	r2, r3, #3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	4934      	ldr	r1, [pc, #208]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f1c:	f7fe fa18 	bl	8003350 <HAL_GetTick>
 8004f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f22:	e00a      	b.n	8004f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f24:	f7fe fa14 	bl	8003350 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e04f      	b.n	8004fda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f3a:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 020c 	and.w	r2, r3, #12
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d1eb      	bne.n	8004f24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f4c:	4b25      	ldr	r3, [pc, #148]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d20c      	bcs.n	8004f74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5a:	4b22      	ldr	r3, [pc, #136]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f62:	4b20      	ldr	r3, [pc, #128]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d001      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e032      	b.n	8004fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d008      	beq.n	8004f92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f80:	4b19      	ldr	r3, [pc, #100]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	4916      	ldr	r1, [pc, #88]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0308 	and.w	r3, r3, #8
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d009      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f9e:	4b12      	ldr	r3, [pc, #72]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	490e      	ldr	r1, [pc, #56]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fb2:	f000 f821 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	091b      	lsrs	r3, r3, #4
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	490a      	ldr	r1, [pc, #40]	@ (8004fec <HAL_RCC_ClockConfig+0x1c0>)
 8004fc4:	5ccb      	ldrb	r3, [r1, r3]
 8004fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fca:	4a09      	ldr	r2, [pc, #36]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004fce:	4b09      	ldr	r3, [pc, #36]	@ (8004ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fd ffe2 	bl	8002f9c <HAL_InitTick>

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40023c00 	.word	0x40023c00
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	0800d2f4 	.word	0x0800d2f4
 8004ff0:	20000028 	.word	0x20000028
 8004ff4:	2000002c 	.word	0x2000002c

08004ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ffc:	b090      	sub	sp, #64	@ 0x40
 8004ffe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005010:	4b59      	ldr	r3, [pc, #356]	@ (8005178 <HAL_RCC_GetSysClockFreq+0x180>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 030c 	and.w	r3, r3, #12
 8005018:	2b08      	cmp	r3, #8
 800501a:	d00d      	beq.n	8005038 <HAL_RCC_GetSysClockFreq+0x40>
 800501c:	2b08      	cmp	r3, #8
 800501e:	f200 80a1 	bhi.w	8005164 <HAL_RCC_GetSysClockFreq+0x16c>
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <HAL_RCC_GetSysClockFreq+0x34>
 8005026:	2b04      	cmp	r3, #4
 8005028:	d003      	beq.n	8005032 <HAL_RCC_GetSysClockFreq+0x3a>
 800502a:	e09b      	b.n	8005164 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800502c:	4b53      	ldr	r3, [pc, #332]	@ (800517c <HAL_RCC_GetSysClockFreq+0x184>)
 800502e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005030:	e09b      	b.n	800516a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005032:	4b53      	ldr	r3, [pc, #332]	@ (8005180 <HAL_RCC_GetSysClockFreq+0x188>)
 8005034:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005036:	e098      	b.n	800516a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005038:	4b4f      	ldr	r3, [pc, #316]	@ (8005178 <HAL_RCC_GetSysClockFreq+0x180>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005040:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005042:	4b4d      	ldr	r3, [pc, #308]	@ (8005178 <HAL_RCC_GetSysClockFreq+0x180>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d028      	beq.n	80050a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800504e:	4b4a      	ldr	r3, [pc, #296]	@ (8005178 <HAL_RCC_GetSysClockFreq+0x180>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	099b      	lsrs	r3, r3, #6
 8005054:	2200      	movs	r2, #0
 8005056:	623b      	str	r3, [r7, #32]
 8005058:	627a      	str	r2, [r7, #36]	@ 0x24
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005060:	2100      	movs	r1, #0
 8005062:	4b47      	ldr	r3, [pc, #284]	@ (8005180 <HAL_RCC_GetSysClockFreq+0x188>)
 8005064:	fb03 f201 	mul.w	r2, r3, r1
 8005068:	2300      	movs	r3, #0
 800506a:	fb00 f303 	mul.w	r3, r0, r3
 800506e:	4413      	add	r3, r2
 8005070:	4a43      	ldr	r2, [pc, #268]	@ (8005180 <HAL_RCC_GetSysClockFreq+0x188>)
 8005072:	fba0 1202 	umull	r1, r2, r0, r2
 8005076:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005078:	460a      	mov	r2, r1
 800507a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800507c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800507e:	4413      	add	r3, r2
 8005080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005084:	2200      	movs	r2, #0
 8005086:	61bb      	str	r3, [r7, #24]
 8005088:	61fa      	str	r2, [r7, #28]
 800508a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800508e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005092:	f7fb fe01 	bl	8000c98 <__aeabi_uldivmod>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	4613      	mov	r3, r2
 800509c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800509e:	e053      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050a0:	4b35      	ldr	r3, [pc, #212]	@ (8005178 <HAL_RCC_GetSysClockFreq+0x180>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	099b      	lsrs	r3, r3, #6
 80050a6:	2200      	movs	r2, #0
 80050a8:	613b      	str	r3, [r7, #16]
 80050aa:	617a      	str	r2, [r7, #20]
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80050b2:	f04f 0b00 	mov.w	fp, #0
 80050b6:	4652      	mov	r2, sl
 80050b8:	465b      	mov	r3, fp
 80050ba:	f04f 0000 	mov.w	r0, #0
 80050be:	f04f 0100 	mov.w	r1, #0
 80050c2:	0159      	lsls	r1, r3, #5
 80050c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050c8:	0150      	lsls	r0, r2, #5
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	ebb2 080a 	subs.w	r8, r2, sl
 80050d2:	eb63 090b 	sbc.w	r9, r3, fp
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	f04f 0300 	mov.w	r3, #0
 80050de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80050e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80050e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80050ea:	ebb2 0408 	subs.w	r4, r2, r8
 80050ee:	eb63 0509 	sbc.w	r5, r3, r9
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	f04f 0300 	mov.w	r3, #0
 80050fa:	00eb      	lsls	r3, r5, #3
 80050fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005100:	00e2      	lsls	r2, r4, #3
 8005102:	4614      	mov	r4, r2
 8005104:	461d      	mov	r5, r3
 8005106:	eb14 030a 	adds.w	r3, r4, sl
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	eb45 030b 	adc.w	r3, r5, fp
 8005110:	607b      	str	r3, [r7, #4]
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	f04f 0300 	mov.w	r3, #0
 800511a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800511e:	4629      	mov	r1, r5
 8005120:	028b      	lsls	r3, r1, #10
 8005122:	4621      	mov	r1, r4
 8005124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005128:	4621      	mov	r1, r4
 800512a:	028a      	lsls	r2, r1, #10
 800512c:	4610      	mov	r0, r2
 800512e:	4619      	mov	r1, r3
 8005130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005132:	2200      	movs	r2, #0
 8005134:	60bb      	str	r3, [r7, #8]
 8005136:	60fa      	str	r2, [r7, #12]
 8005138:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800513c:	f7fb fdac 	bl	8000c98 <__aeabi_uldivmod>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4613      	mov	r3, r2
 8005146:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005148:	4b0b      	ldr	r3, [pc, #44]	@ (8005178 <HAL_RCC_GetSysClockFreq+0x180>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	0c1b      	lsrs	r3, r3, #16
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	3301      	adds	r3, #1
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005158:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800515a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005160:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005162:	e002      	b.n	800516a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005164:	4b05      	ldr	r3, [pc, #20]	@ (800517c <HAL_RCC_GetSysClockFreq+0x184>)
 8005166:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800516a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800516c:	4618      	mov	r0, r3
 800516e:	3740      	adds	r7, #64	@ 0x40
 8005170:	46bd      	mov	sp, r7
 8005172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005176:	bf00      	nop
 8005178:	40023800 	.word	0x40023800
 800517c:	00f42400 	.word	0x00f42400
 8005180:	017d7840 	.word	0x017d7840

08005184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005188:	4b03      	ldr	r3, [pc, #12]	@ (8005198 <HAL_RCC_GetHCLKFreq+0x14>)
 800518a:	681b      	ldr	r3, [r3, #0]
}
 800518c:	4618      	mov	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	20000028 	.word	0x20000028

0800519c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051a0:	f7ff fff0 	bl	8005184 <HAL_RCC_GetHCLKFreq>
 80051a4:	4602      	mov	r2, r0
 80051a6:	4b05      	ldr	r3, [pc, #20]	@ (80051bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	0a9b      	lsrs	r3, r3, #10
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	4903      	ldr	r1, [pc, #12]	@ (80051c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051b2:	5ccb      	ldrb	r3, [r1, r3]
 80051b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40023800 	.word	0x40023800
 80051c0:	0800d304 	.word	0x0800d304

080051c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051c8:	f7ff ffdc 	bl	8005184 <HAL_RCC_GetHCLKFreq>
 80051cc:	4602      	mov	r2, r0
 80051ce:	4b05      	ldr	r3, [pc, #20]	@ (80051e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	0b5b      	lsrs	r3, r3, #13
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	4903      	ldr	r1, [pc, #12]	@ (80051e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051da:	5ccb      	ldrb	r3, [r1, r3]
 80051dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	40023800 	.word	0x40023800
 80051e8:	0800d304 	.word	0x0800d304

080051ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	220f      	movs	r2, #15
 80051fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051fc:	4b12      	ldr	r3, [pc, #72]	@ (8005248 <HAL_RCC_GetClockConfig+0x5c>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 0203 	and.w	r2, r3, #3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005208:	4b0f      	ldr	r3, [pc, #60]	@ (8005248 <HAL_RCC_GetClockConfig+0x5c>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005214:	4b0c      	ldr	r3, [pc, #48]	@ (8005248 <HAL_RCC_GetClockConfig+0x5c>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005220:	4b09      	ldr	r3, [pc, #36]	@ (8005248 <HAL_RCC_GetClockConfig+0x5c>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	08db      	lsrs	r3, r3, #3
 8005226:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800522e:	4b07      	ldr	r3, [pc, #28]	@ (800524c <HAL_RCC_GetClockConfig+0x60>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0207 	and.w	r2, r3, #7
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	601a      	str	r2, [r3, #0]
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40023800 	.word	0x40023800
 800524c:	40023c00 	.word	0x40023c00

08005250 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e07b      	b.n	800535a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005266:	2b00      	cmp	r3, #0
 8005268:	d108      	bne.n	800527c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005272:	d009      	beq.n	8005288 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	61da      	str	r2, [r3, #28]
 800527a:	e005      	b.n	8005288 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d106      	bne.n	80052a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fd fd34 	bl	8002d10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80052d0:	431a      	orrs	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	431a      	orrs	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052f8:	431a      	orrs	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800530c:	ea42 0103 	orr.w	r1, r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005314:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	0c1b      	lsrs	r3, r3, #16
 8005326:	f003 0104 	and.w	r1, r3, #4
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532e:	f003 0210 	and.w	r2, r3, #16
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	69da      	ldr	r2, [r3, #28]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005348:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b088      	sub	sp, #32
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	603b      	str	r3, [r7, #0]
 800536e:	4613      	mov	r3, r2
 8005370:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005372:	f7fd ffed 	bl	8003350 <HAL_GetTick>
 8005376:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005378:	88fb      	ldrh	r3, [r7, #6]
 800537a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b01      	cmp	r3, #1
 8005386:	d001      	beq.n	800538c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005388:	2302      	movs	r3, #2
 800538a:	e12a      	b.n	80055e2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <HAL_SPI_Transmit+0x36>
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e122      	b.n	80055e2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_SPI_Transmit+0x48>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e11b      	b.n	80055e2 <HAL_SPI_Transmit+0x280>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2203      	movs	r2, #3
 80053b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	88fa      	ldrh	r2, [r7, #6]
 80053ca:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	88fa      	ldrh	r2, [r7, #6]
 80053d0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053f8:	d10f      	bne.n	800541a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005408:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005418:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005424:	2b40      	cmp	r3, #64	@ 0x40
 8005426:	d007      	beq.n	8005438 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005436:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005440:	d152      	bne.n	80054e8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_SPI_Transmit+0xee>
 800544a:	8b7b      	ldrh	r3, [r7, #26]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d145      	bne.n	80054dc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005454:	881a      	ldrh	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005460:	1c9a      	adds	r2, r3, #2
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800546a:	b29b      	uxth	r3, r3
 800546c:	3b01      	subs	r3, #1
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005474:	e032      	b.n	80054dc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b02      	cmp	r3, #2
 8005482:	d112      	bne.n	80054aa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005488:	881a      	ldrh	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005494:	1c9a      	adds	r2, r3, #2
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80054a8:	e018      	b.n	80054dc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054aa:	f7fd ff51 	bl	8003350 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d803      	bhi.n	80054c2 <HAL_SPI_Transmit+0x160>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c0:	d102      	bne.n	80054c8 <HAL_SPI_Transmit+0x166>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e082      	b.n	80055e2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1c7      	bne.n	8005476 <HAL_SPI_Transmit+0x114>
 80054e6:	e053      	b.n	8005590 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <HAL_SPI_Transmit+0x194>
 80054f0:	8b7b      	ldrh	r3, [r7, #26]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d147      	bne.n	8005586 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	330c      	adds	r3, #12
 8005500:	7812      	ldrb	r2, [r2, #0]
 8005502:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005512:	b29b      	uxth	r3, r3
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800551c:	e033      	b.n	8005586 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b02      	cmp	r3, #2
 800552a:	d113      	bne.n	8005554 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	330c      	adds	r3, #12
 8005536:	7812      	ldrb	r2, [r2, #0]
 8005538:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005548:	b29b      	uxth	r3, r3
 800554a:	3b01      	subs	r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005552:	e018      	b.n	8005586 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005554:	f7fd fefc 	bl	8003350 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	429a      	cmp	r2, r3
 8005562:	d803      	bhi.n	800556c <HAL_SPI_Transmit+0x20a>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556a:	d102      	bne.n	8005572 <HAL_SPI_Transmit+0x210>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d109      	bne.n	8005586 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e02d      	b.n	80055e2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800558a:	b29b      	uxth	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1c6      	bne.n	800551e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	6839      	ldr	r1, [r7, #0]
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 fbd9 	bl	8005d4c <SPI_EndRxTxTransaction>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2220      	movs	r2, #32
 80055a4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10a      	bne.n	80055c4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055ae:	2300      	movs	r3, #0
 80055b0:	617b      	str	r3, [r7, #20]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e000      	b.n	80055e2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80055e0:	2300      	movs	r3, #0
  }
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3720      	adds	r7, #32
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b088      	sub	sp, #32
 80055ee:	af02      	add	r7, sp, #8
 80055f0:	60f8      	str	r0, [r7, #12]
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	603b      	str	r3, [r7, #0]
 80055f6:	4613      	mov	r3, r2
 80055f8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b01      	cmp	r3, #1
 8005604:	d001      	beq.n	800560a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005606:	2302      	movs	r3, #2
 8005608:	e104      	b.n	8005814 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <HAL_SPI_Receive+0x2c>
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e0fc      	b.n	8005814 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005622:	d112      	bne.n	800564a <HAL_SPI_Receive+0x60>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10e      	bne.n	800564a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2204      	movs	r2, #4
 8005630:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005634:	88fa      	ldrh	r2, [r7, #6]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	4613      	mov	r3, r2
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	68b9      	ldr	r1, [r7, #8]
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 f8eb 	bl	800581c <HAL_SPI_TransmitReceive>
 8005646:	4603      	mov	r3, r0
 8005648:	e0e4      	b.n	8005814 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800564a:	f7fd fe81 	bl	8003350 <HAL_GetTick>
 800564e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005656:	2b01      	cmp	r3, #1
 8005658:	d101      	bne.n	800565e <HAL_SPI_Receive+0x74>
 800565a:	2302      	movs	r3, #2
 800565c:	e0da      	b.n	8005814 <HAL_SPI_Receive+0x22a>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2204      	movs	r2, #4
 800566a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	88fa      	ldrh	r2, [r7, #6]
 800567e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	88fa      	ldrh	r2, [r7, #6]
 8005684:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056ac:	d10f      	bne.n	80056ce <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80056cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d8:	2b40      	cmp	r3, #64	@ 0x40
 80056da:	d007      	beq.n	80056ec <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d170      	bne.n	80057d6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80056f4:	e035      	b.n	8005762 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b01      	cmp	r3, #1
 8005702:	d115      	bne.n	8005730 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f103 020c 	add.w	r2, r3, #12
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005710:	7812      	ldrb	r2, [r2, #0]
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005724:	b29b      	uxth	r3, r3
 8005726:	3b01      	subs	r3, #1
 8005728:	b29a      	uxth	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800572e:	e018      	b.n	8005762 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005730:	f7fd fe0e 	bl	8003350 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d803      	bhi.n	8005748 <HAL_SPI_Receive+0x15e>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005746:	d102      	bne.n	800574e <HAL_SPI_Receive+0x164>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d109      	bne.n	8005762 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e058      	b.n	8005814 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1c4      	bne.n	80056f6 <HAL_SPI_Receive+0x10c>
 800576c:	e038      	b.n	80057e0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b01      	cmp	r3, #1
 800577a:	d113      	bne.n	80057a4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005786:	b292      	uxth	r2, r2
 8005788:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800578e:	1c9a      	adds	r2, r3, #2
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057a2:	e018      	b.n	80057d6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057a4:	f7fd fdd4 	bl	8003350 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d803      	bhi.n	80057bc <HAL_SPI_Receive+0x1d2>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ba:	d102      	bne.n	80057c2 <HAL_SPI_Receive+0x1d8>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d109      	bne.n	80057d6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e01e      	b.n	8005814 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057da:	b29b      	uxth	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1c6      	bne.n	800576e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	6839      	ldr	r1, [r7, #0]
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 fa4b 	bl	8005c80 <SPI_EndRxTransaction>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2220      	movs	r2, #32
 80057f4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005812:	2300      	movs	r3, #0
  }
}
 8005814:	4618      	mov	r0, r3
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08a      	sub	sp, #40	@ 0x28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800582a:	2301      	movs	r3, #1
 800582c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800582e:	f7fd fd8f 	bl	8003350 <HAL_GetTick>
 8005832:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800583a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005842:	887b      	ldrh	r3, [r7, #2]
 8005844:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005846:	7ffb      	ldrb	r3, [r7, #31]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d00c      	beq.n	8005866 <HAL_SPI_TransmitReceive+0x4a>
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005852:	d106      	bne.n	8005862 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d102      	bne.n	8005862 <HAL_SPI_TransmitReceive+0x46>
 800585c:	7ffb      	ldrb	r3, [r7, #31]
 800585e:	2b04      	cmp	r3, #4
 8005860:	d001      	beq.n	8005866 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005862:	2302      	movs	r3, #2
 8005864:	e17f      	b.n	8005b66 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d005      	beq.n	8005878 <HAL_SPI_TransmitReceive+0x5c>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <HAL_SPI_TransmitReceive+0x5c>
 8005872:	887b      	ldrh	r3, [r7, #2]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e174      	b.n	8005b66 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_SPI_TransmitReceive+0x6e>
 8005886:	2302      	movs	r3, #2
 8005888:	e16d      	b.n	8005b66 <HAL_SPI_TransmitReceive+0x34a>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b04      	cmp	r3, #4
 800589c:	d003      	beq.n	80058a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2205      	movs	r2, #5
 80058a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	887a      	ldrh	r2, [r7, #2]
 80058b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	887a      	ldrh	r2, [r7, #2]
 80058bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	887a      	ldrh	r2, [r7, #2]
 80058c8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	887a      	ldrh	r2, [r7, #2]
 80058ce:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e6:	2b40      	cmp	r3, #64	@ 0x40
 80058e8:	d007      	beq.n	80058fa <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005902:	d17e      	bne.n	8005a02 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <HAL_SPI_TransmitReceive+0xf6>
 800590c:	8afb      	ldrh	r3, [r7, #22]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d16c      	bne.n	80059ec <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005916:	881a      	ldrh	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005922:	1c9a      	adds	r2, r3, #2
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005936:	e059      	b.n	80059ec <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b02      	cmp	r3, #2
 8005944:	d11b      	bne.n	800597e <HAL_SPI_TransmitReceive+0x162>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800594a:	b29b      	uxth	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d016      	beq.n	800597e <HAL_SPI_TransmitReceive+0x162>
 8005950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005952:	2b01      	cmp	r3, #1
 8005954:	d113      	bne.n	800597e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595a:	881a      	ldrh	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005966:	1c9a      	adds	r2, r3, #2
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	b29a      	uxth	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b01      	cmp	r3, #1
 800598a:	d119      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x1a4>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005990:	b29b      	uxth	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d014      	beq.n	80059c0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a0:	b292      	uxth	r2, r2
 80059a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a8:	1c9a      	adds	r2, r3, #2
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059bc:	2301      	movs	r3, #1
 80059be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059c0:	f7fd fcc6 	bl	8003350 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d80d      	bhi.n	80059ec <HAL_SPI_TransmitReceive+0x1d0>
 80059d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d6:	d009      	beq.n	80059ec <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e0bc      	b.n	8005b66 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1a0      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x11c>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d19b      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x11c>
 8005a00:	e082      	b.n	8005b08 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <HAL_SPI_TransmitReceive+0x1f4>
 8005a0a:	8afb      	ldrh	r3, [r7, #22]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d171      	bne.n	8005af4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	7812      	ldrb	r2, [r2, #0]
 8005a1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a36:	e05d      	b.n	8005af4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d11c      	bne.n	8005a80 <HAL_SPI_TransmitReceive+0x264>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d017      	beq.n	8005a80 <HAL_SPI_TransmitReceive+0x264>
 8005a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d114      	bne.n	8005a80 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	330c      	adds	r3, #12
 8005a60:	7812      	ldrb	r2, [r2, #0]
 8005a62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d119      	bne.n	8005ac2 <HAL_SPI_TransmitReceive+0x2a6>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d014      	beq.n	8005ac2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68da      	ldr	r2, [r3, #12]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ac2:	f7fd fc45 	bl	8003350 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d803      	bhi.n	8005ada <HAL_SPI_TransmitReceive+0x2be>
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad8:	d102      	bne.n	8005ae0 <HAL_SPI_TransmitReceive+0x2c4>
 8005ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d109      	bne.n	8005af4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e038      	b.n	8005b66 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d19c      	bne.n	8005a38 <HAL_SPI_TransmitReceive+0x21c>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d197      	bne.n	8005a38 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b08:	6a3a      	ldr	r2, [r7, #32]
 8005b0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 f91d 	bl	8005d4c <SPI_EndRxTxTransaction>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d008      	beq.n	8005b2a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e01d      	b.n	8005b66 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10a      	bne.n	8005b48 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b32:	2300      	movs	r3, #0
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	613b      	str	r3, [r7, #16]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	613b      	str	r3, [r7, #16]
 8005b46:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e000      	b.n	8005b66 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005b64:	2300      	movs	r3, #0
  }
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3728      	adds	r7, #40	@ 0x28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b088      	sub	sp, #32
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	603b      	str	r3, [r7, #0]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b80:	f7fd fbe6 	bl	8003350 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b88:	1a9b      	subs	r3, r3, r2
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b90:	f7fd fbde 	bl	8003350 <HAL_GetTick>
 8005b94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b96:	4b39      	ldr	r3, [pc, #228]	@ (8005c7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	015b      	lsls	r3, r3, #5
 8005b9c:	0d1b      	lsrs	r3, r3, #20
 8005b9e:	69fa      	ldr	r2, [r7, #28]
 8005ba0:	fb02 f303 	mul.w	r3, r2, r3
 8005ba4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ba6:	e055      	b.n	8005c54 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bae:	d051      	beq.n	8005c54 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bb0:	f7fd fbce 	bl	8003350 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	69fa      	ldr	r2, [r7, #28]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d902      	bls.n	8005bc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d13d      	bne.n	8005c42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005bd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bde:	d111      	bne.n	8005c04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005be8:	d004      	beq.n	8005bf4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bf2:	d107      	bne.n	8005c04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c0c:	d10f      	bne.n	8005c2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e018      	b.n	8005c74 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d102      	bne.n	8005c4e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	61fb      	str	r3, [r7, #28]
 8005c4c:	e002      	b.n	8005c54 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	3b01      	subs	r3, #1
 8005c52:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	bf0c      	ite	eq
 8005c64:	2301      	moveq	r3, #1
 8005c66:	2300      	movne	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	79fb      	ldrb	r3, [r7, #7]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d19a      	bne.n	8005ba8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3720      	adds	r7, #32
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20000028 	.word	0x20000028

08005c80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c94:	d111      	bne.n	8005cba <SPI_EndRxTransaction+0x3a>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c9e:	d004      	beq.n	8005caa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ca8:	d107      	bne.n	8005cba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cb8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cc2:	d12a      	bne.n	8005d1a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ccc:	d012      	beq.n	8005cf4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2180      	movs	r1, #128	@ 0x80
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f7ff ff49 	bl	8005b70 <SPI_WaitFlagStateUntilTimeout>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d02d      	beq.n	8005d40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce8:	f043 0220 	orr.w	r2, r3, #32
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e026      	b.n	8005d42 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f7ff ff36 	bl	8005b70 <SPI_WaitFlagStateUntilTimeout>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d01a      	beq.n	8005d40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d0e:	f043 0220 	orr.w	r2, r3, #32
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e013      	b.n	8005d42 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2200      	movs	r2, #0
 8005d22:	2101      	movs	r1, #1
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f7ff ff23 	bl	8005b70 <SPI_WaitFlagStateUntilTimeout>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d007      	beq.n	8005d40 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d34:	f043 0220 	orr.w	r2, r3, #32
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e000      	b.n	8005d42 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
	...

08005d4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af02      	add	r7, sp, #8
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	2102      	movs	r1, #2
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f7ff ff04 	bl	8005b70 <SPI_WaitFlagStateUntilTimeout>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d007      	beq.n	8005d7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d72:	f043 0220 	orr.w	r2, r3, #32
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e032      	b.n	8005de4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8005dec <SPI_EndRxTxTransaction+0xa0>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a1b      	ldr	r2, [pc, #108]	@ (8005df0 <SPI_EndRxTxTransaction+0xa4>)
 8005d84:	fba2 2303 	umull	r2, r3, r2, r3
 8005d88:	0d5b      	lsrs	r3, r3, #21
 8005d8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005d8e:	fb02 f303 	mul.w	r3, r2, r3
 8005d92:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d9c:	d112      	bne.n	8005dc4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2200      	movs	r2, #0
 8005da6:	2180      	movs	r1, #128	@ 0x80
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f7ff fee1 	bl	8005b70 <SPI_WaitFlagStateUntilTimeout>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d016      	beq.n	8005de2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db8:	f043 0220 	orr.w	r2, r3, #32
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e00f      	b.n	8005de4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dda:	2b80      	cmp	r3, #128	@ 0x80
 8005ddc:	d0f2      	beq.n	8005dc4 <SPI_EndRxTxTransaction+0x78>
 8005dde:	e000      	b.n	8005de2 <SPI_EndRxTxTransaction+0x96>
        break;
 8005de0:	bf00      	nop
  }

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	20000028 	.word	0x20000028
 8005df0:	165e9f81 	.word	0x165e9f81

08005df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e041      	b.n	8005e8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d106      	bne.n	8005e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7fd f816 	bl	8002e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	4619      	mov	r1, r3
 8005e32:	4610      	mov	r0, r2
 8005e34:	f000 fc32 	bl	800669c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
	...

08005e94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d001      	beq.n	8005eac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e044      	b.n	8005f36 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0201 	orr.w	r2, r2, #1
 8005ec2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8005f44 <HAL_TIM_Base_Start_IT+0xb0>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d018      	beq.n	8005f00 <HAL_TIM_Base_Start_IT+0x6c>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ed6:	d013      	beq.n	8005f00 <HAL_TIM_Base_Start_IT+0x6c>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a1a      	ldr	r2, [pc, #104]	@ (8005f48 <HAL_TIM_Base_Start_IT+0xb4>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d00e      	beq.n	8005f00 <HAL_TIM_Base_Start_IT+0x6c>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a19      	ldr	r2, [pc, #100]	@ (8005f4c <HAL_TIM_Base_Start_IT+0xb8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d009      	beq.n	8005f00 <HAL_TIM_Base_Start_IT+0x6c>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a17      	ldr	r2, [pc, #92]	@ (8005f50 <HAL_TIM_Base_Start_IT+0xbc>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d004      	beq.n	8005f00 <HAL_TIM_Base_Start_IT+0x6c>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a16      	ldr	r2, [pc, #88]	@ (8005f54 <HAL_TIM_Base_Start_IT+0xc0>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d111      	bne.n	8005f24 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2b06      	cmp	r3, #6
 8005f10:	d010      	beq.n	8005f34 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f042 0201 	orr.w	r2, r2, #1
 8005f20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f22:	e007      	b.n	8005f34 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0201 	orr.w	r2, r2, #1
 8005f32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	40010000 	.word	0x40010000
 8005f48:	40000400 	.word	0x40000400
 8005f4c:	40000800 	.word	0x40000800
 8005f50:	40000c00 	.word	0x40000c00
 8005f54:	40014000 	.word	0x40014000

08005f58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e041      	b.n	8005fee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fc ff44 	bl	8002e0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3304      	adds	r3, #4
 8005f94:	4619      	mov	r1, r3
 8005f96:	4610      	mov	r0, r2
 8005f98:	f000 fb80 	bl	800669c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d109      	bne.n	800601c <HAL_TIM_PWM_Start+0x24>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b01      	cmp	r3, #1
 8006012:	bf14      	ite	ne
 8006014:	2301      	movne	r3, #1
 8006016:	2300      	moveq	r3, #0
 8006018:	b2db      	uxtb	r3, r3
 800601a:	e022      	b.n	8006062 <HAL_TIM_PWM_Start+0x6a>
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	2b04      	cmp	r3, #4
 8006020:	d109      	bne.n	8006036 <HAL_TIM_PWM_Start+0x3e>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b01      	cmp	r3, #1
 800602c:	bf14      	ite	ne
 800602e:	2301      	movne	r3, #1
 8006030:	2300      	moveq	r3, #0
 8006032:	b2db      	uxtb	r3, r3
 8006034:	e015      	b.n	8006062 <HAL_TIM_PWM_Start+0x6a>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b08      	cmp	r3, #8
 800603a:	d109      	bne.n	8006050 <HAL_TIM_PWM_Start+0x58>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b01      	cmp	r3, #1
 8006046:	bf14      	ite	ne
 8006048:	2301      	movne	r3, #1
 800604a:	2300      	moveq	r3, #0
 800604c:	b2db      	uxtb	r3, r3
 800604e:	e008      	b.n	8006062 <HAL_TIM_PWM_Start+0x6a>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b01      	cmp	r3, #1
 800605a:	bf14      	ite	ne
 800605c:	2301      	movne	r3, #1
 800605e:	2300      	moveq	r3, #0
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e068      	b.n	800613c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d104      	bne.n	800607a <HAL_TIM_PWM_Start+0x82>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006078:	e013      	b.n	80060a2 <HAL_TIM_PWM_Start+0xaa>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b04      	cmp	r3, #4
 800607e:	d104      	bne.n	800608a <HAL_TIM_PWM_Start+0x92>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006088:	e00b      	b.n	80060a2 <HAL_TIM_PWM_Start+0xaa>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b08      	cmp	r3, #8
 800608e:	d104      	bne.n	800609a <HAL_TIM_PWM_Start+0xa2>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2202      	movs	r2, #2
 8006094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006098:	e003      	b.n	80060a2 <HAL_TIM_PWM_Start+0xaa>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2202      	movs	r2, #2
 800609e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2201      	movs	r2, #1
 80060a8:	6839      	ldr	r1, [r7, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 fda2 	bl	8006bf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a23      	ldr	r2, [pc, #140]	@ (8006144 <HAL_TIM_PWM_Start+0x14c>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d107      	bne.n	80060ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006144 <HAL_TIM_PWM_Start+0x14c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d018      	beq.n	8006106 <HAL_TIM_PWM_Start+0x10e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060dc:	d013      	beq.n	8006106 <HAL_TIM_PWM_Start+0x10e>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a19      	ldr	r2, [pc, #100]	@ (8006148 <HAL_TIM_PWM_Start+0x150>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d00e      	beq.n	8006106 <HAL_TIM_PWM_Start+0x10e>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a17      	ldr	r2, [pc, #92]	@ (800614c <HAL_TIM_PWM_Start+0x154>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d009      	beq.n	8006106 <HAL_TIM_PWM_Start+0x10e>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a16      	ldr	r2, [pc, #88]	@ (8006150 <HAL_TIM_PWM_Start+0x158>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d004      	beq.n	8006106 <HAL_TIM_PWM_Start+0x10e>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a14      	ldr	r2, [pc, #80]	@ (8006154 <HAL_TIM_PWM_Start+0x15c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d111      	bne.n	800612a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2b06      	cmp	r3, #6
 8006116:	d010      	beq.n	800613a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0201 	orr.w	r2, r2, #1
 8006126:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006128:	e007      	b.n	800613a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f042 0201 	orr.w	r2, r2, #1
 8006138:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	40010000 	.word	0x40010000
 8006148:	40000400 	.word	0x40000400
 800614c:	40000800 	.word	0x40000800
 8006150:	40000c00 	.word	0x40000c00
 8006154:	40014000 	.word	0x40014000

08006158 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d020      	beq.n	80061bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d01b      	beq.n	80061bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f06f 0202 	mvn.w	r2, #2
 800618c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fa5b 	bl	800665e <HAL_TIM_IC_CaptureCallback>
 80061a8:	e005      	b.n	80061b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fa4d 	bl	800664a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fa5e 	bl	8006672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f003 0304 	and.w	r3, r3, #4
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d020      	beq.n	8006208 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01b      	beq.n	8006208 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f06f 0204 	mvn.w	r2, #4
 80061d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2202      	movs	r2, #2
 80061de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fa35 	bl	800665e <HAL_TIM_IC_CaptureCallback>
 80061f4:	e005      	b.n	8006202 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fa27 	bl	800664a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 fa38 	bl	8006672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f003 0308 	and.w	r3, r3, #8
 800620e:	2b00      	cmp	r3, #0
 8006210:	d020      	beq.n	8006254 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	2b00      	cmp	r3, #0
 800621a:	d01b      	beq.n	8006254 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f06f 0208 	mvn.w	r2, #8
 8006224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2204      	movs	r2, #4
 800622a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	f003 0303 	and.w	r3, r3, #3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fa0f 	bl	800665e <HAL_TIM_IC_CaptureCallback>
 8006240:	e005      	b.n	800624e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fa01 	bl	800664a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fa12 	bl	8006672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f003 0310 	and.w	r3, r3, #16
 800625a:	2b00      	cmp	r3, #0
 800625c:	d020      	beq.n	80062a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f003 0310 	and.w	r3, r3, #16
 8006264:	2b00      	cmp	r3, #0
 8006266:	d01b      	beq.n	80062a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f06f 0210 	mvn.w	r2, #16
 8006270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2208      	movs	r2, #8
 8006276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f9e9 	bl	800665e <HAL_TIM_IC_CaptureCallback>
 800628c:	e005      	b.n	800629a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f9db 	bl	800664a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f9ec 	bl	8006672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00c      	beq.n	80062c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d007      	beq.n	80062c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f06f 0201 	mvn.w	r2, #1
 80062bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7fc f960 	bl	8002584 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00c      	beq.n	80062e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d007      	beq.n	80062e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80062e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fd24 	bl	8006d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00c      	beq.n	800630c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d007      	beq.n	800630c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f9bd 	bl	8006686 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	f003 0320 	and.w	r3, r3, #32
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00c      	beq.n	8006330 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f003 0320 	and.w	r3, r3, #32
 800631c:	2b00      	cmp	r3, #0
 800631e:	d007      	beq.n	8006330 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f06f 0220 	mvn.w	r2, #32
 8006328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fcf6 	bl	8006d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006330:	bf00      	nop
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006344:	2300      	movs	r3, #0
 8006346:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800634e:	2b01      	cmp	r3, #1
 8006350:	d101      	bne.n	8006356 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006352:	2302      	movs	r3, #2
 8006354:	e0ae      	b.n	80064b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b0c      	cmp	r3, #12
 8006362:	f200 809f 	bhi.w	80064a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006366:	a201      	add	r2, pc, #4	@ (adr r2, 800636c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636c:	080063a1 	.word	0x080063a1
 8006370:	080064a5 	.word	0x080064a5
 8006374:	080064a5 	.word	0x080064a5
 8006378:	080064a5 	.word	0x080064a5
 800637c:	080063e1 	.word	0x080063e1
 8006380:	080064a5 	.word	0x080064a5
 8006384:	080064a5 	.word	0x080064a5
 8006388:	080064a5 	.word	0x080064a5
 800638c:	08006423 	.word	0x08006423
 8006390:	080064a5 	.word	0x080064a5
 8006394:	080064a5 	.word	0x080064a5
 8006398:	080064a5 	.word	0x080064a5
 800639c:	08006463 	.word	0x08006463
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68b9      	ldr	r1, [r7, #8]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 f9fe 	bl	80067a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699a      	ldr	r2, [r3, #24]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f042 0208 	orr.w	r2, r2, #8
 80063ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699a      	ldr	r2, [r3, #24]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 0204 	bic.w	r2, r2, #4
 80063ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6999      	ldr	r1, [r3, #24]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	691a      	ldr	r2, [r3, #16]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	619a      	str	r2, [r3, #24]
      break;
 80063de:	e064      	b.n	80064aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68b9      	ldr	r1, [r7, #8]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fa44 	bl	8006874 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699a      	ldr	r2, [r3, #24]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800640a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6999      	ldr	r1, [r3, #24]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	021a      	lsls	r2, r3, #8
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	430a      	orrs	r2, r1
 800641e:	619a      	str	r2, [r3, #24]
      break;
 8006420:	e043      	b.n	80064aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68b9      	ldr	r1, [r7, #8]
 8006428:	4618      	mov	r0, r3
 800642a:	f000 fa8f 	bl	800694c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69da      	ldr	r2, [r3, #28]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f042 0208 	orr.w	r2, r2, #8
 800643c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69da      	ldr	r2, [r3, #28]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0204 	bic.w	r2, r2, #4
 800644c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69d9      	ldr	r1, [r3, #28]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	691a      	ldr	r2, [r3, #16]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	61da      	str	r2, [r3, #28]
      break;
 8006460:	e023      	b.n	80064aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68b9      	ldr	r1, [r7, #8]
 8006468:	4618      	mov	r0, r3
 800646a:	f000 fad9 	bl	8006a20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800647c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69da      	ldr	r2, [r3, #28]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800648c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69d9      	ldr	r1, [r3, #28]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	021a      	lsls	r2, r3, #8
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	61da      	str	r2, [r3, #28]
      break;
 80064a2:	e002      	b.n	80064aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	75fb      	strb	r3, [r7, #23]
      break;
 80064a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d101      	bne.n	80064d8 <HAL_TIM_ConfigClockSource+0x1c>
 80064d4:	2302      	movs	r3, #2
 80064d6:	e0b4      	b.n	8006642 <HAL_TIM_ConfigClockSource+0x186>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80064f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006510:	d03e      	beq.n	8006590 <HAL_TIM_ConfigClockSource+0xd4>
 8006512:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006516:	f200 8087 	bhi.w	8006628 <HAL_TIM_ConfigClockSource+0x16c>
 800651a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800651e:	f000 8086 	beq.w	800662e <HAL_TIM_ConfigClockSource+0x172>
 8006522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006526:	d87f      	bhi.n	8006628 <HAL_TIM_ConfigClockSource+0x16c>
 8006528:	2b70      	cmp	r3, #112	@ 0x70
 800652a:	d01a      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0xa6>
 800652c:	2b70      	cmp	r3, #112	@ 0x70
 800652e:	d87b      	bhi.n	8006628 <HAL_TIM_ConfigClockSource+0x16c>
 8006530:	2b60      	cmp	r3, #96	@ 0x60
 8006532:	d050      	beq.n	80065d6 <HAL_TIM_ConfigClockSource+0x11a>
 8006534:	2b60      	cmp	r3, #96	@ 0x60
 8006536:	d877      	bhi.n	8006628 <HAL_TIM_ConfigClockSource+0x16c>
 8006538:	2b50      	cmp	r3, #80	@ 0x50
 800653a:	d03c      	beq.n	80065b6 <HAL_TIM_ConfigClockSource+0xfa>
 800653c:	2b50      	cmp	r3, #80	@ 0x50
 800653e:	d873      	bhi.n	8006628 <HAL_TIM_ConfigClockSource+0x16c>
 8006540:	2b40      	cmp	r3, #64	@ 0x40
 8006542:	d058      	beq.n	80065f6 <HAL_TIM_ConfigClockSource+0x13a>
 8006544:	2b40      	cmp	r3, #64	@ 0x40
 8006546:	d86f      	bhi.n	8006628 <HAL_TIM_ConfigClockSource+0x16c>
 8006548:	2b30      	cmp	r3, #48	@ 0x30
 800654a:	d064      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0x15a>
 800654c:	2b30      	cmp	r3, #48	@ 0x30
 800654e:	d86b      	bhi.n	8006628 <HAL_TIM_ConfigClockSource+0x16c>
 8006550:	2b20      	cmp	r3, #32
 8006552:	d060      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0x15a>
 8006554:	2b20      	cmp	r3, #32
 8006556:	d867      	bhi.n	8006628 <HAL_TIM_ConfigClockSource+0x16c>
 8006558:	2b00      	cmp	r3, #0
 800655a:	d05c      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0x15a>
 800655c:	2b10      	cmp	r3, #16
 800655e:	d05a      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0x15a>
 8006560:	e062      	b.n	8006628 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006572:	f000 fb1f 	bl	8006bb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006584:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	609a      	str	r2, [r3, #8]
      break;
 800658e:	e04f      	b.n	8006630 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065a0:	f000 fb08 	bl	8006bb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689a      	ldr	r2, [r3, #8]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065b2:	609a      	str	r2, [r3, #8]
      break;
 80065b4:	e03c      	b.n	8006630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065c2:	461a      	mov	r2, r3
 80065c4:	f000 fa7c 	bl	8006ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2150      	movs	r1, #80	@ 0x50
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 fad5 	bl	8006b7e <TIM_ITRx_SetConfig>
      break;
 80065d4:	e02c      	b.n	8006630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065e2:	461a      	mov	r2, r3
 80065e4:	f000 fa9b 	bl	8006b1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2160      	movs	r1, #96	@ 0x60
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 fac5 	bl	8006b7e <TIM_ITRx_SetConfig>
      break;
 80065f4:	e01c      	b.n	8006630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006602:	461a      	mov	r2, r3
 8006604:	f000 fa5c 	bl	8006ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2140      	movs	r1, #64	@ 0x40
 800660e:	4618      	mov	r0, r3
 8006610:	f000 fab5 	bl	8006b7e <TIM_ITRx_SetConfig>
      break;
 8006614:	e00c      	b.n	8006630 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4619      	mov	r1, r3
 8006620:	4610      	mov	r0, r2
 8006622:	f000 faac 	bl	8006b7e <TIM_ITRx_SetConfig>
      break;
 8006626:	e003      	b.n	8006630 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	73fb      	strb	r3, [r7, #15]
      break;
 800662c:	e000      	b.n	8006630 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800662e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006640:	7bfb      	ldrb	r3, [r7, #15]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006652:	bf00      	nop
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800665e:	b480      	push	{r7}
 8006660:	b083      	sub	sp, #12
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
	...

0800669c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a37      	ldr	r2, [pc, #220]	@ (800678c <TIM_Base_SetConfig+0xf0>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d00f      	beq.n	80066d4 <TIM_Base_SetConfig+0x38>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ba:	d00b      	beq.n	80066d4 <TIM_Base_SetConfig+0x38>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a34      	ldr	r2, [pc, #208]	@ (8006790 <TIM_Base_SetConfig+0xf4>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d007      	beq.n	80066d4 <TIM_Base_SetConfig+0x38>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a33      	ldr	r2, [pc, #204]	@ (8006794 <TIM_Base_SetConfig+0xf8>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d003      	beq.n	80066d4 <TIM_Base_SetConfig+0x38>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a32      	ldr	r2, [pc, #200]	@ (8006798 <TIM_Base_SetConfig+0xfc>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d108      	bne.n	80066e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a28      	ldr	r2, [pc, #160]	@ (800678c <TIM_Base_SetConfig+0xf0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d01b      	beq.n	8006726 <TIM_Base_SetConfig+0x8a>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066f4:	d017      	beq.n	8006726 <TIM_Base_SetConfig+0x8a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a25      	ldr	r2, [pc, #148]	@ (8006790 <TIM_Base_SetConfig+0xf4>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d013      	beq.n	8006726 <TIM_Base_SetConfig+0x8a>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a24      	ldr	r2, [pc, #144]	@ (8006794 <TIM_Base_SetConfig+0xf8>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d00f      	beq.n	8006726 <TIM_Base_SetConfig+0x8a>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a23      	ldr	r2, [pc, #140]	@ (8006798 <TIM_Base_SetConfig+0xfc>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d00b      	beq.n	8006726 <TIM_Base_SetConfig+0x8a>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a22      	ldr	r2, [pc, #136]	@ (800679c <TIM_Base_SetConfig+0x100>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d007      	beq.n	8006726 <TIM_Base_SetConfig+0x8a>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a21      	ldr	r2, [pc, #132]	@ (80067a0 <TIM_Base_SetConfig+0x104>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d003      	beq.n	8006726 <TIM_Base_SetConfig+0x8a>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a20      	ldr	r2, [pc, #128]	@ (80067a4 <TIM_Base_SetConfig+0x108>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d108      	bne.n	8006738 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800672c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	4313      	orrs	r3, r2
 8006736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	689a      	ldr	r2, [r3, #8]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a0c      	ldr	r2, [pc, #48]	@ (800678c <TIM_Base_SetConfig+0xf0>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d103      	bne.n	8006766 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	691a      	ldr	r2, [r3, #16]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f043 0204 	orr.w	r2, r3, #4
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	601a      	str	r2, [r3, #0]
}
 800677e:	bf00      	nop
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	40010000 	.word	0x40010000
 8006790:	40000400 	.word	0x40000400
 8006794:	40000800 	.word	0x40000800
 8006798:	40000c00 	.word	0x40000c00
 800679c:	40014000 	.word	0x40014000
 80067a0:	40014400 	.word	0x40014400
 80067a4:	40014800 	.word	0x40014800

080067a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	f023 0201 	bic.w	r2, r3, #1
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0303 	bic.w	r3, r3, #3
 80067de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f023 0302 	bic.w	r3, r3, #2
 80067f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006870 <TIM_OC1_SetConfig+0xc8>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d10c      	bne.n	800681e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f023 0308 	bic.w	r3, r3, #8
 800680a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	4313      	orrs	r3, r2
 8006814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f023 0304 	bic.w	r3, r3, #4
 800681c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a13      	ldr	r2, [pc, #76]	@ (8006870 <TIM_OC1_SetConfig+0xc8>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d111      	bne.n	800684a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800682c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	4313      	orrs	r3, r2
 800683e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4313      	orrs	r3, r2
 8006848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	621a      	str	r2, [r3, #32]
}
 8006864:	bf00      	nop
 8006866:	371c      	adds	r7, #28
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	40010000 	.word	0x40010000

08006874 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	f023 0210 	bic.w	r2, r3, #16
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	021b      	lsls	r3, r3, #8
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f023 0320 	bic.w	r3, r3, #32
 80068be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006948 <TIM_OC2_SetConfig+0xd4>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d10d      	bne.n	80068f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	011b      	lsls	r3, r3, #4
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a15      	ldr	r2, [pc, #84]	@ (8006948 <TIM_OC2_SetConfig+0xd4>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d113      	bne.n	8006920 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006906:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	4313      	orrs	r3, r2
 800691e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	621a      	str	r2, [r3, #32]
}
 800693a:	bf00      	nop
 800693c:	371c      	adds	r7, #28
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	40010000 	.word	0x40010000

0800694c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800697a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0303 	bic.w	r3, r3, #3
 8006982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	021b      	lsls	r3, r3, #8
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a1d      	ldr	r2, [pc, #116]	@ (8006a1c <TIM_OC3_SetConfig+0xd0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d10d      	bne.n	80069c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	021b      	lsls	r3, r3, #8
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a14      	ldr	r2, [pc, #80]	@ (8006a1c <TIM_OC3_SetConfig+0xd0>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d113      	bne.n	80069f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	011b      	lsls	r3, r3, #4
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	011b      	lsls	r3, r3, #4
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	621a      	str	r2, [r3, #32]
}
 8006a10:	bf00      	nop
 8006a12:	371c      	adds	r7, #28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	40010000 	.word	0x40010000

08006a20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	021b      	lsls	r3, r3, #8
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	031b      	lsls	r3, r3, #12
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a10      	ldr	r2, [pc, #64]	@ (8006abc <TIM_OC4_SetConfig+0x9c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d109      	bne.n	8006a94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	019b      	lsls	r3, r3, #6
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	621a      	str	r2, [r3, #32]
}
 8006aae:	bf00      	nop
 8006ab0:	371c      	adds	r7, #28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	40010000 	.word	0x40010000

08006ac0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	f023 0201 	bic.w	r2, r3, #1
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	011b      	lsls	r3, r3, #4
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f023 030a 	bic.w	r3, r3, #10
 8006afc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	621a      	str	r2, [r3, #32]
}
 8006b12:	bf00      	nop
 8006b14:	371c      	adds	r7, #28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b087      	sub	sp, #28
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	60f8      	str	r0, [r7, #12]
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	f023 0210 	bic.w	r2, r3, #16
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	031b      	lsls	r3, r3, #12
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	011b      	lsls	r3, r3, #4
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	621a      	str	r2, [r3, #32]
}
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b085      	sub	sp, #20
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	f043 0307 	orr.w	r3, r3, #7
 8006ba0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	609a      	str	r2, [r3, #8]
}
 8006ba8:	bf00      	nop
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	021a      	lsls	r2, r3, #8
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	609a      	str	r2, [r3, #8]
}
 8006be8:	bf00      	nop
 8006bea:	371c      	adds	r7, #28
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	f003 031f 	and.w	r3, r3, #31
 8006c06:	2201      	movs	r2, #1
 8006c08:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6a1a      	ldr	r2, [r3, #32]
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	43db      	mvns	r3, r3
 8006c16:	401a      	ands	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6a1a      	ldr	r2, [r3, #32]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	f003 031f 	and.w	r3, r3, #31
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	fa01 f303 	lsl.w	r3, r1, r3
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	621a      	str	r2, [r3, #32]
}
 8006c32:	bf00      	nop
 8006c34:	371c      	adds	r7, #28
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
	...

08006c40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d101      	bne.n	8006c58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c54:	2302      	movs	r3, #2
 8006c56:	e050      	b.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a1c      	ldr	r2, [pc, #112]	@ (8006d08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d018      	beq.n	8006cce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ca4:	d013      	beq.n	8006cce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a18      	ldr	r2, [pc, #96]	@ (8006d0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d00e      	beq.n	8006cce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a16      	ldr	r2, [pc, #88]	@ (8006d10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d009      	beq.n	8006cce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a15      	ldr	r2, [pc, #84]	@ (8006d14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d004      	beq.n	8006cce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a13      	ldr	r2, [pc, #76]	@ (8006d18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d10c      	bne.n	8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	40010000 	.word	0x40010000
 8006d0c:	40000400 	.word	0x40000400
 8006d10:	40000800 	.word	0x40000800
 8006d14:	40000c00 	.word	0x40000c00
 8006d18:	40014000 	.word	0x40014000

08006d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e042      	b.n	8006ddc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d106      	bne.n	8006d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fc f8ce 	bl	8002f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2224      	movs	r2, #36	@ 0x24
 8006d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68da      	ldr	r2, [r3, #12]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f82b 	bl	8006de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	691a      	ldr	r2, [r3, #16]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	695a      	ldr	r2, [r3, #20]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006dac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006dbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006de8:	b0c0      	sub	sp, #256	@ 0x100
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e00:	68d9      	ldr	r1, [r3, #12]
 8006e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	ea40 0301 	orr.w	r3, r0, r1
 8006e0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e12:	689a      	ldr	r2, [r3, #8]
 8006e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	431a      	orrs	r2, r3
 8006e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006e3c:	f021 010c 	bic.w	r1, r1, #12
 8006e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e4a:	430b      	orrs	r3, r1
 8006e4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e5e:	6999      	ldr	r1, [r3, #24]
 8006e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	ea40 0301 	orr.w	r3, r0, r1
 8006e6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	4b8f      	ldr	r3, [pc, #572]	@ (80070b0 <UART_SetConfig+0x2cc>)
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d005      	beq.n	8006e84 <UART_SetConfig+0xa0>
 8006e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	4b8d      	ldr	r3, [pc, #564]	@ (80070b4 <UART_SetConfig+0x2d0>)
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d104      	bne.n	8006e8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e84:	f7fe f99e 	bl	80051c4 <HAL_RCC_GetPCLK2Freq>
 8006e88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006e8c:	e003      	b.n	8006e96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e8e:	f7fe f985 	bl	800519c <HAL_RCC_GetPCLK1Freq>
 8006e92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ea0:	f040 810c 	bne.w	80070bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006eae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006eb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006eb6:	4622      	mov	r2, r4
 8006eb8:	462b      	mov	r3, r5
 8006eba:	1891      	adds	r1, r2, r2
 8006ebc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006ebe:	415b      	adcs	r3, r3
 8006ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ec2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	eb12 0801 	adds.w	r8, r2, r1
 8006ecc:	4629      	mov	r1, r5
 8006ece:	eb43 0901 	adc.w	r9, r3, r1
 8006ed2:	f04f 0200 	mov.w	r2, #0
 8006ed6:	f04f 0300 	mov.w	r3, #0
 8006eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ee6:	4690      	mov	r8, r2
 8006ee8:	4699      	mov	r9, r3
 8006eea:	4623      	mov	r3, r4
 8006eec:	eb18 0303 	adds.w	r3, r8, r3
 8006ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ef4:	462b      	mov	r3, r5
 8006ef6:	eb49 0303 	adc.w	r3, r9, r3
 8006efa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006f0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006f12:	460b      	mov	r3, r1
 8006f14:	18db      	adds	r3, r3, r3
 8006f16:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f18:	4613      	mov	r3, r2
 8006f1a:	eb42 0303 	adc.w	r3, r2, r3
 8006f1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006f24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006f28:	f7f9 feb6 	bl	8000c98 <__aeabi_uldivmod>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4b61      	ldr	r3, [pc, #388]	@ (80070b8 <UART_SetConfig+0x2d4>)
 8006f32:	fba3 2302 	umull	r2, r3, r3, r2
 8006f36:	095b      	lsrs	r3, r3, #5
 8006f38:	011c      	lsls	r4, r3, #4
 8006f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006f48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006f4c:	4642      	mov	r2, r8
 8006f4e:	464b      	mov	r3, r9
 8006f50:	1891      	adds	r1, r2, r2
 8006f52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006f54:	415b      	adcs	r3, r3
 8006f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006f5c:	4641      	mov	r1, r8
 8006f5e:	eb12 0a01 	adds.w	sl, r2, r1
 8006f62:	4649      	mov	r1, r9
 8006f64:	eb43 0b01 	adc.w	fp, r3, r1
 8006f68:	f04f 0200 	mov.w	r2, #0
 8006f6c:	f04f 0300 	mov.w	r3, #0
 8006f70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f7c:	4692      	mov	sl, r2
 8006f7e:	469b      	mov	fp, r3
 8006f80:	4643      	mov	r3, r8
 8006f82:	eb1a 0303 	adds.w	r3, sl, r3
 8006f86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f8a:	464b      	mov	r3, r9
 8006f8c:	eb4b 0303 	adc.w	r3, fp, r3
 8006f90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006fa0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006fa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	18db      	adds	r3, r3, r3
 8006fac:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fae:	4613      	mov	r3, r2
 8006fb0:	eb42 0303 	adc.w	r3, r2, r3
 8006fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006fba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006fbe:	f7f9 fe6b 	bl	8000c98 <__aeabi_uldivmod>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80070b8 <UART_SetConfig+0x2d4>)
 8006fca:	fba3 2301 	umull	r2, r3, r3, r1
 8006fce:	095b      	lsrs	r3, r3, #5
 8006fd0:	2264      	movs	r2, #100	@ 0x64
 8006fd2:	fb02 f303 	mul.w	r3, r2, r3
 8006fd6:	1acb      	subs	r3, r1, r3
 8006fd8:	00db      	lsls	r3, r3, #3
 8006fda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006fde:	4b36      	ldr	r3, [pc, #216]	@ (80070b8 <UART_SetConfig+0x2d4>)
 8006fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8006fe4:	095b      	lsrs	r3, r3, #5
 8006fe6:	005b      	lsls	r3, r3, #1
 8006fe8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006fec:	441c      	add	r4, r3
 8006fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ff8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006ffc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007000:	4642      	mov	r2, r8
 8007002:	464b      	mov	r3, r9
 8007004:	1891      	adds	r1, r2, r2
 8007006:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007008:	415b      	adcs	r3, r3
 800700a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800700c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007010:	4641      	mov	r1, r8
 8007012:	1851      	adds	r1, r2, r1
 8007014:	6339      	str	r1, [r7, #48]	@ 0x30
 8007016:	4649      	mov	r1, r9
 8007018:	414b      	adcs	r3, r1
 800701a:	637b      	str	r3, [r7, #52]	@ 0x34
 800701c:	f04f 0200 	mov.w	r2, #0
 8007020:	f04f 0300 	mov.w	r3, #0
 8007024:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007028:	4659      	mov	r1, fp
 800702a:	00cb      	lsls	r3, r1, #3
 800702c:	4651      	mov	r1, sl
 800702e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007032:	4651      	mov	r1, sl
 8007034:	00ca      	lsls	r2, r1, #3
 8007036:	4610      	mov	r0, r2
 8007038:	4619      	mov	r1, r3
 800703a:	4603      	mov	r3, r0
 800703c:	4642      	mov	r2, r8
 800703e:	189b      	adds	r3, r3, r2
 8007040:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007044:	464b      	mov	r3, r9
 8007046:	460a      	mov	r2, r1
 8007048:	eb42 0303 	adc.w	r3, r2, r3
 800704c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800705c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007060:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007064:	460b      	mov	r3, r1
 8007066:	18db      	adds	r3, r3, r3
 8007068:	62bb      	str	r3, [r7, #40]	@ 0x28
 800706a:	4613      	mov	r3, r2
 800706c:	eb42 0303 	adc.w	r3, r2, r3
 8007070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007072:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007076:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800707a:	f7f9 fe0d 	bl	8000c98 <__aeabi_uldivmod>
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	4b0d      	ldr	r3, [pc, #52]	@ (80070b8 <UART_SetConfig+0x2d4>)
 8007084:	fba3 1302 	umull	r1, r3, r3, r2
 8007088:	095b      	lsrs	r3, r3, #5
 800708a:	2164      	movs	r1, #100	@ 0x64
 800708c:	fb01 f303 	mul.w	r3, r1, r3
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	00db      	lsls	r3, r3, #3
 8007094:	3332      	adds	r3, #50	@ 0x32
 8007096:	4a08      	ldr	r2, [pc, #32]	@ (80070b8 <UART_SetConfig+0x2d4>)
 8007098:	fba2 2303 	umull	r2, r3, r2, r3
 800709c:	095b      	lsrs	r3, r3, #5
 800709e:	f003 0207 	and.w	r2, r3, #7
 80070a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4422      	add	r2, r4
 80070aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80070ac:	e106      	b.n	80072bc <UART_SetConfig+0x4d8>
 80070ae:	bf00      	nop
 80070b0:	40011000 	.word	0x40011000
 80070b4:	40011400 	.word	0x40011400
 80070b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070c0:	2200      	movs	r2, #0
 80070c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80070c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80070ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80070ce:	4642      	mov	r2, r8
 80070d0:	464b      	mov	r3, r9
 80070d2:	1891      	adds	r1, r2, r2
 80070d4:	6239      	str	r1, [r7, #32]
 80070d6:	415b      	adcs	r3, r3
 80070d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80070da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070de:	4641      	mov	r1, r8
 80070e0:	1854      	adds	r4, r2, r1
 80070e2:	4649      	mov	r1, r9
 80070e4:	eb43 0501 	adc.w	r5, r3, r1
 80070e8:	f04f 0200 	mov.w	r2, #0
 80070ec:	f04f 0300 	mov.w	r3, #0
 80070f0:	00eb      	lsls	r3, r5, #3
 80070f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070f6:	00e2      	lsls	r2, r4, #3
 80070f8:	4614      	mov	r4, r2
 80070fa:	461d      	mov	r5, r3
 80070fc:	4643      	mov	r3, r8
 80070fe:	18e3      	adds	r3, r4, r3
 8007100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007104:	464b      	mov	r3, r9
 8007106:	eb45 0303 	adc.w	r3, r5, r3
 800710a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800710e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800711a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800711e:	f04f 0200 	mov.w	r2, #0
 8007122:	f04f 0300 	mov.w	r3, #0
 8007126:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800712a:	4629      	mov	r1, r5
 800712c:	008b      	lsls	r3, r1, #2
 800712e:	4621      	mov	r1, r4
 8007130:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007134:	4621      	mov	r1, r4
 8007136:	008a      	lsls	r2, r1, #2
 8007138:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800713c:	f7f9 fdac 	bl	8000c98 <__aeabi_uldivmod>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	4b60      	ldr	r3, [pc, #384]	@ (80072c8 <UART_SetConfig+0x4e4>)
 8007146:	fba3 2302 	umull	r2, r3, r3, r2
 800714a:	095b      	lsrs	r3, r3, #5
 800714c:	011c      	lsls	r4, r3, #4
 800714e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007152:	2200      	movs	r2, #0
 8007154:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007158:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800715c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007160:	4642      	mov	r2, r8
 8007162:	464b      	mov	r3, r9
 8007164:	1891      	adds	r1, r2, r2
 8007166:	61b9      	str	r1, [r7, #24]
 8007168:	415b      	adcs	r3, r3
 800716a:	61fb      	str	r3, [r7, #28]
 800716c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007170:	4641      	mov	r1, r8
 8007172:	1851      	adds	r1, r2, r1
 8007174:	6139      	str	r1, [r7, #16]
 8007176:	4649      	mov	r1, r9
 8007178:	414b      	adcs	r3, r1
 800717a:	617b      	str	r3, [r7, #20]
 800717c:	f04f 0200 	mov.w	r2, #0
 8007180:	f04f 0300 	mov.w	r3, #0
 8007184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007188:	4659      	mov	r1, fp
 800718a:	00cb      	lsls	r3, r1, #3
 800718c:	4651      	mov	r1, sl
 800718e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007192:	4651      	mov	r1, sl
 8007194:	00ca      	lsls	r2, r1, #3
 8007196:	4610      	mov	r0, r2
 8007198:	4619      	mov	r1, r3
 800719a:	4603      	mov	r3, r0
 800719c:	4642      	mov	r2, r8
 800719e:	189b      	adds	r3, r3, r2
 80071a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80071a4:	464b      	mov	r3, r9
 80071a6:	460a      	mov	r2, r1
 80071a8:	eb42 0303 	adc.w	r3, r2, r3
 80071ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80071b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80071ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80071bc:	f04f 0200 	mov.w	r2, #0
 80071c0:	f04f 0300 	mov.w	r3, #0
 80071c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80071c8:	4649      	mov	r1, r9
 80071ca:	008b      	lsls	r3, r1, #2
 80071cc:	4641      	mov	r1, r8
 80071ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071d2:	4641      	mov	r1, r8
 80071d4:	008a      	lsls	r2, r1, #2
 80071d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80071da:	f7f9 fd5d 	bl	8000c98 <__aeabi_uldivmod>
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	4611      	mov	r1, r2
 80071e4:	4b38      	ldr	r3, [pc, #224]	@ (80072c8 <UART_SetConfig+0x4e4>)
 80071e6:	fba3 2301 	umull	r2, r3, r3, r1
 80071ea:	095b      	lsrs	r3, r3, #5
 80071ec:	2264      	movs	r2, #100	@ 0x64
 80071ee:	fb02 f303 	mul.w	r3, r2, r3
 80071f2:	1acb      	subs	r3, r1, r3
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	3332      	adds	r3, #50	@ 0x32
 80071f8:	4a33      	ldr	r2, [pc, #204]	@ (80072c8 <UART_SetConfig+0x4e4>)
 80071fa:	fba2 2303 	umull	r2, r3, r2, r3
 80071fe:	095b      	lsrs	r3, r3, #5
 8007200:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007204:	441c      	add	r4, r3
 8007206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800720a:	2200      	movs	r2, #0
 800720c:	673b      	str	r3, [r7, #112]	@ 0x70
 800720e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007210:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007214:	4642      	mov	r2, r8
 8007216:	464b      	mov	r3, r9
 8007218:	1891      	adds	r1, r2, r2
 800721a:	60b9      	str	r1, [r7, #8]
 800721c:	415b      	adcs	r3, r3
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007224:	4641      	mov	r1, r8
 8007226:	1851      	adds	r1, r2, r1
 8007228:	6039      	str	r1, [r7, #0]
 800722a:	4649      	mov	r1, r9
 800722c:	414b      	adcs	r3, r1
 800722e:	607b      	str	r3, [r7, #4]
 8007230:	f04f 0200 	mov.w	r2, #0
 8007234:	f04f 0300 	mov.w	r3, #0
 8007238:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800723c:	4659      	mov	r1, fp
 800723e:	00cb      	lsls	r3, r1, #3
 8007240:	4651      	mov	r1, sl
 8007242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007246:	4651      	mov	r1, sl
 8007248:	00ca      	lsls	r2, r1, #3
 800724a:	4610      	mov	r0, r2
 800724c:	4619      	mov	r1, r3
 800724e:	4603      	mov	r3, r0
 8007250:	4642      	mov	r2, r8
 8007252:	189b      	adds	r3, r3, r2
 8007254:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007256:	464b      	mov	r3, r9
 8007258:	460a      	mov	r2, r1
 800725a:	eb42 0303 	adc.w	r3, r2, r3
 800725e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	663b      	str	r3, [r7, #96]	@ 0x60
 800726a:	667a      	str	r2, [r7, #100]	@ 0x64
 800726c:	f04f 0200 	mov.w	r2, #0
 8007270:	f04f 0300 	mov.w	r3, #0
 8007274:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007278:	4649      	mov	r1, r9
 800727a:	008b      	lsls	r3, r1, #2
 800727c:	4641      	mov	r1, r8
 800727e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007282:	4641      	mov	r1, r8
 8007284:	008a      	lsls	r2, r1, #2
 8007286:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800728a:	f7f9 fd05 	bl	8000c98 <__aeabi_uldivmod>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	4b0d      	ldr	r3, [pc, #52]	@ (80072c8 <UART_SetConfig+0x4e4>)
 8007294:	fba3 1302 	umull	r1, r3, r3, r2
 8007298:	095b      	lsrs	r3, r3, #5
 800729a:	2164      	movs	r1, #100	@ 0x64
 800729c:	fb01 f303 	mul.w	r3, r1, r3
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	011b      	lsls	r3, r3, #4
 80072a4:	3332      	adds	r3, #50	@ 0x32
 80072a6:	4a08      	ldr	r2, [pc, #32]	@ (80072c8 <UART_SetConfig+0x4e4>)
 80072a8:	fba2 2303 	umull	r2, r3, r2, r3
 80072ac:	095b      	lsrs	r3, r3, #5
 80072ae:	f003 020f 	and.w	r2, r3, #15
 80072b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4422      	add	r2, r4
 80072ba:	609a      	str	r2, [r3, #8]
}
 80072bc:	bf00      	nop
 80072be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80072c2:	46bd      	mov	sp, r7
 80072c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072c8:	51eb851f 	.word	0x51eb851f

080072cc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	4603      	mov	r3, r0
 80072d4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80072d6:	2300      	movs	r3, #0
 80072d8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80072da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072de:	2b84      	cmp	r3, #132	@ 0x84
 80072e0:	d005      	beq.n	80072ee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80072e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	4413      	add	r3, r2
 80072ea:	3303      	adds	r3, #3
 80072ec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80072ee:	68fb      	ldr	r3, [r7, #12]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007300:	f000 fafc 	bl	80078fc <vTaskStartScheduler>
  
  return osOK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	bd80      	pop	{r7, pc}

0800730a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800730a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800730c:	b089      	sub	sp, #36	@ 0x24
 800730e:	af04      	add	r7, sp, #16
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d020      	beq.n	800735e <osThreadCreate+0x54>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d01c      	beq.n	800735e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685c      	ldr	r4, [r3, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	691e      	ldr	r6, [r3, #16]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007336:	4618      	mov	r0, r3
 8007338:	f7ff ffc8 	bl	80072cc <makeFreeRtosPriority>
 800733c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007346:	9202      	str	r2, [sp, #8]
 8007348:	9301      	str	r3, [sp, #4]
 800734a:	9100      	str	r1, [sp, #0]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	4632      	mov	r2, r6
 8007350:	4629      	mov	r1, r5
 8007352:	4620      	mov	r0, r4
 8007354:	f000 f8ed 	bl	8007532 <xTaskCreateStatic>
 8007358:	4603      	mov	r3, r0
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	e01c      	b.n	8007398 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685c      	ldr	r4, [r3, #4]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800736a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff ffaa 	bl	80072cc <makeFreeRtosPriority>
 8007378:	4602      	mov	r2, r0
 800737a:	f107 030c 	add.w	r3, r7, #12
 800737e:	9301      	str	r3, [sp, #4]
 8007380:	9200      	str	r2, [sp, #0]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	4632      	mov	r2, r6
 8007386:	4629      	mov	r1, r5
 8007388:	4620      	mov	r0, r4
 800738a:	f000 f932 	bl	80075f2 <xTaskCreate>
 800738e:	4603      	mov	r3, r0
 8007390:	2b01      	cmp	r3, #1
 8007392:	d001      	beq.n	8007398 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007394:	2300      	movs	r3, #0
 8007396:	e000      	b.n	800739a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007398:	68fb      	ldr	r3, [r7, #12]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073a2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <osDelay+0x16>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	e000      	b.n	80073ba <osDelay+0x18>
 80073b8:	2301      	movs	r3, #1
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 fa68 	bl	8007890 <vTaskDelay>
  
  return osOK;
 80073c0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073ca:	b480      	push	{r7}
 80073cc:	b083      	sub	sp, #12
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f103 0208 	add.w	r2, r3, #8
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f04f 32ff 	mov.w	r2, #4294967295
 80073e2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f103 0208 	add.w	r2, r3, #8
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f103 0208 	add.w	r2, r3, #8
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073fe:	bf00      	nop
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007418:	bf00      	nop
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	689a      	ldr	r2, [r3, #8]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	683a      	ldr	r2, [r7, #0]
 800744e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	601a      	str	r2, [r3, #0]
}
 8007460:	bf00      	nop
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007482:	d103      	bne.n	800748c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	60fb      	str	r3, [r7, #12]
 800748a:	e00c      	b.n	80074a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3308      	adds	r3, #8
 8007490:	60fb      	str	r3, [r7, #12]
 8007492:	e002      	b.n	800749a <vListInsert+0x2e>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	60fb      	str	r3, [r7, #12]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d2f6      	bcs.n	8007494 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	1c5a      	adds	r2, r3, #1
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	601a      	str	r2, [r3, #0]
}
 80074d2:	bf00      	nop
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074de:	b480      	push	{r7}
 80074e0:	b085      	sub	sp, #20
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	6892      	ldr	r2, [r2, #8]
 80074f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	6852      	ldr	r2, [r2, #4]
 80074fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	429a      	cmp	r2, r3
 8007508:	d103      	bne.n	8007512 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	689a      	ldr	r2, [r3, #8]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	1e5a      	subs	r2, r3, #1
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007532:	b580      	push	{r7, lr}
 8007534:	b08e      	sub	sp, #56	@ 0x38
 8007536:	af04      	add	r7, sp, #16
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	607a      	str	r2, [r7, #4]
 800753e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10b      	bne.n	800755e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	e7fd      	b.n	800755a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800755e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10b      	bne.n	800757c <xTaskCreateStatic+0x4a>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	61fb      	str	r3, [r7, #28]
}
 8007576:	bf00      	nop
 8007578:	bf00      	nop
 800757a:	e7fd      	b.n	8007578 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800757c:	23a0      	movs	r3, #160	@ 0xa0
 800757e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	2ba0      	cmp	r3, #160	@ 0xa0
 8007584:	d00b      	beq.n	800759e <xTaskCreateStatic+0x6c>
	__asm volatile
 8007586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	61bb      	str	r3, [r7, #24]
}
 8007598:	bf00      	nop
 800759a:	bf00      	nop
 800759c:	e7fd      	b.n	800759a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800759e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80075a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d01e      	beq.n	80075e4 <xTaskCreateStatic+0xb2>
 80075a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d01b      	beq.n	80075e4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ae:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80075b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075b4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80075b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b8:	2202      	movs	r2, #2
 80075ba:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80075be:	2300      	movs	r3, #0
 80075c0:	9303      	str	r3, [sp, #12]
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	9302      	str	r3, [sp, #8]
 80075c6:	f107 0314 	add.w	r3, r7, #20
 80075ca:	9301      	str	r3, [sp, #4]
 80075cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	68b9      	ldr	r1, [r7, #8]
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 f850 	bl	800767c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80075de:	f000 f8ed 	bl	80077bc <prvAddNewTaskToReadyList>
 80075e2:	e001      	b.n	80075e8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80075e4:	2300      	movs	r3, #0
 80075e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075e8:	697b      	ldr	r3, [r7, #20]
	}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3728      	adds	r7, #40	@ 0x28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b08c      	sub	sp, #48	@ 0x30
 80075f6:	af04      	add	r7, sp, #16
 80075f8:	60f8      	str	r0, [r7, #12]
 80075fa:	60b9      	str	r1, [r7, #8]
 80075fc:	603b      	str	r3, [r7, #0]
 80075fe:	4613      	mov	r3, r2
 8007600:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007602:	88fb      	ldrh	r3, [r7, #6]
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4618      	mov	r0, r3
 8007608:	f000 fefe 	bl	8008408 <pvPortMalloc>
 800760c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00e      	beq.n	8007632 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007614:	20a0      	movs	r0, #160	@ 0xa0
 8007616:	f000 fef7 	bl	8008408 <pvPortMalloc>
 800761a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	631a      	str	r2, [r3, #48]	@ 0x30
 8007628:	e005      	b.n	8007636 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800762a:	6978      	ldr	r0, [r7, #20]
 800762c:	f000 ffba 	bl	80085a4 <vPortFree>
 8007630:	e001      	b.n	8007636 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007632:	2300      	movs	r3, #0
 8007634:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d017      	beq.n	800766c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007644:	88fa      	ldrh	r2, [r7, #6]
 8007646:	2300      	movs	r3, #0
 8007648:	9303      	str	r3, [sp, #12]
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	9302      	str	r3, [sp, #8]
 800764e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007650:	9301      	str	r3, [sp, #4]
 8007652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	68b9      	ldr	r1, [r7, #8]
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f000 f80e 	bl	800767c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007660:	69f8      	ldr	r0, [r7, #28]
 8007662:	f000 f8ab 	bl	80077bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007666:	2301      	movs	r3, #1
 8007668:	61bb      	str	r3, [r7, #24]
 800766a:	e002      	b.n	8007672 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800766c:	f04f 33ff 	mov.w	r3, #4294967295
 8007670:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007672:	69bb      	ldr	r3, [r7, #24]
	}
 8007674:	4618      	mov	r0, r3
 8007676:	3720      	adds	r7, #32
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b088      	sub	sp, #32
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800768a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007694:	3b01      	subs	r3, #1
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	f023 0307 	bic.w	r3, r3, #7
 80076a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00b      	beq.n	80076c6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	617b      	str	r3, [r7, #20]
}
 80076c0:	bf00      	nop
 80076c2:	bf00      	nop
 80076c4:	e7fd      	b.n	80076c2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d01f      	beq.n	800770c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076cc:	2300      	movs	r3, #0
 80076ce:	61fb      	str	r3, [r7, #28]
 80076d0:	e012      	b.n	80076f8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	4413      	add	r3, r2
 80076d8:	7819      	ldrb	r1, [r3, #0]
 80076da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	4413      	add	r3, r2
 80076e0:	3334      	adds	r3, #52	@ 0x34
 80076e2:	460a      	mov	r2, r1
 80076e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	4413      	add	r3, r2
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d006      	beq.n	8007700 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	3301      	adds	r3, #1
 80076f6:	61fb      	str	r3, [r7, #28]
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	2b0f      	cmp	r3, #15
 80076fc:	d9e9      	bls.n	80076d2 <prvInitialiseNewTask+0x56>
 80076fe:	e000      	b.n	8007702 <prvInitialiseNewTask+0x86>
			{
				break;
 8007700:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007704:	2200      	movs	r2, #0
 8007706:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800770a:	e003      	b.n	8007714 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800770c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007716:	2b06      	cmp	r3, #6
 8007718:	d901      	bls.n	800771e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800771a:	2306      	movs	r3, #6
 800771c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800771e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007720:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007722:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007726:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007728:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800772a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772c:	2200      	movs	r2, #0
 800772e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007732:	3304      	adds	r3, #4
 8007734:	4618      	mov	r0, r3
 8007736:	f7ff fe68 	bl	800740a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800773a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773c:	3318      	adds	r3, #24
 800773e:	4618      	mov	r0, r3
 8007740:	f7ff fe63 	bl	800740a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007748:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800774a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774c:	f1c3 0207 	rsb	r2, r3, #7
 8007750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007752:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007758:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800775a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775c:	2200      	movs	r2, #0
 800775e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007764:	2200      	movs	r2, #0
 8007766:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800776a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776c:	334c      	adds	r3, #76	@ 0x4c
 800776e:	224c      	movs	r2, #76	@ 0x4c
 8007770:	2100      	movs	r1, #0
 8007772:	4618      	mov	r0, r3
 8007774:	f002 f8c6 	bl	8009904 <memset>
 8007778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777a:	4a0d      	ldr	r2, [pc, #52]	@ (80077b0 <prvInitialiseNewTask+0x134>)
 800777c:	651a      	str	r2, [r3, #80]	@ 0x50
 800777e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007780:	4a0c      	ldr	r2, [pc, #48]	@ (80077b4 <prvInitialiseNewTask+0x138>)
 8007782:	655a      	str	r2, [r3, #84]	@ 0x54
 8007784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007786:	4a0c      	ldr	r2, [pc, #48]	@ (80077b8 <prvInitialiseNewTask+0x13c>)
 8007788:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	68f9      	ldr	r1, [r7, #12]
 800778e:	69b8      	ldr	r0, [r7, #24]
 8007790:	f000 fc2a 	bl	8007fe8 <pxPortInitialiseStack>
 8007794:	4602      	mov	r2, r0
 8007796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007798:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800779a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077a6:	bf00      	nop
 80077a8:	3720      	adds	r7, #32
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	20004784 	.word	0x20004784
 80077b4:	200047ec 	.word	0x200047ec
 80077b8:	20004854 	.word	0x20004854

080077bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80077c4:	f000 fd40 	bl	8008248 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80077c8:	4b2a      	ldr	r3, [pc, #168]	@ (8007874 <prvAddNewTaskToReadyList+0xb8>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3301      	adds	r3, #1
 80077ce:	4a29      	ldr	r2, [pc, #164]	@ (8007874 <prvAddNewTaskToReadyList+0xb8>)
 80077d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80077d2:	4b29      	ldr	r3, [pc, #164]	@ (8007878 <prvAddNewTaskToReadyList+0xbc>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d109      	bne.n	80077ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077da:	4a27      	ldr	r2, [pc, #156]	@ (8007878 <prvAddNewTaskToReadyList+0xbc>)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077e0:	4b24      	ldr	r3, [pc, #144]	@ (8007874 <prvAddNewTaskToReadyList+0xb8>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d110      	bne.n	800780a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077e8:	f000 fad4 	bl	8007d94 <prvInitialiseTaskLists>
 80077ec:	e00d      	b.n	800780a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077ee:	4b23      	ldr	r3, [pc, #140]	@ (800787c <prvAddNewTaskToReadyList+0xc0>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d109      	bne.n	800780a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077f6:	4b20      	ldr	r3, [pc, #128]	@ (8007878 <prvAddNewTaskToReadyList+0xbc>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007800:	429a      	cmp	r2, r3
 8007802:	d802      	bhi.n	800780a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007804:	4a1c      	ldr	r2, [pc, #112]	@ (8007878 <prvAddNewTaskToReadyList+0xbc>)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800780a:	4b1d      	ldr	r3, [pc, #116]	@ (8007880 <prvAddNewTaskToReadyList+0xc4>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3301      	adds	r3, #1
 8007810:	4a1b      	ldr	r2, [pc, #108]	@ (8007880 <prvAddNewTaskToReadyList+0xc4>)
 8007812:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007818:	2201      	movs	r2, #1
 800781a:	409a      	lsls	r2, r3
 800781c:	4b19      	ldr	r3, [pc, #100]	@ (8007884 <prvAddNewTaskToReadyList+0xc8>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4313      	orrs	r3, r2
 8007822:	4a18      	ldr	r2, [pc, #96]	@ (8007884 <prvAddNewTaskToReadyList+0xc8>)
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4a15      	ldr	r2, [pc, #84]	@ (8007888 <prvAddNewTaskToReadyList+0xcc>)
 8007834:	441a      	add	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	3304      	adds	r3, #4
 800783a:	4619      	mov	r1, r3
 800783c:	4610      	mov	r0, r2
 800783e:	f7ff fdf1 	bl	8007424 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007842:	f000 fd33 	bl	80082ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007846:	4b0d      	ldr	r3, [pc, #52]	@ (800787c <prvAddNewTaskToReadyList+0xc0>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00e      	beq.n	800786c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800784e:	4b0a      	ldr	r3, [pc, #40]	@ (8007878 <prvAddNewTaskToReadyList+0xbc>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007858:	429a      	cmp	r2, r3
 800785a:	d207      	bcs.n	800786c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800785c:	4b0b      	ldr	r3, [pc, #44]	@ (800788c <prvAddNewTaskToReadyList+0xd0>)
 800785e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800786c:	bf00      	nop
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	20000b30 	.word	0x20000b30
 8007878:	20000a30 	.word	0x20000a30
 800787c:	20000b3c 	.word	0x20000b3c
 8007880:	20000b4c 	.word	0x20000b4c
 8007884:	20000b38 	.word	0x20000b38
 8007888:	20000a34 	.word	0x20000a34
 800788c:	e000ed04 	.word	0xe000ed04

08007890 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007898:	2300      	movs	r3, #0
 800789a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d018      	beq.n	80078d4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80078a2:	4b14      	ldr	r3, [pc, #80]	@ (80078f4 <vTaskDelay+0x64>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00b      	beq.n	80078c2 <vTaskDelay+0x32>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	60bb      	str	r3, [r7, #8]
}
 80078bc:	bf00      	nop
 80078be:	bf00      	nop
 80078c0:	e7fd      	b.n	80078be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80078c2:	f000 f885 	bl	80079d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80078c6:	2100      	movs	r1, #0
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fb27 	bl	8007f1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80078ce:	f000 f88d 	bl	80079ec <xTaskResumeAll>
 80078d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d107      	bne.n	80078ea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80078da:	4b07      	ldr	r3, [pc, #28]	@ (80078f8 <vTaskDelay+0x68>)
 80078dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078ea:	bf00      	nop
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	20000b58 	.word	0x20000b58
 80078f8:	e000ed04 	.word	0xe000ed04

080078fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b08a      	sub	sp, #40	@ 0x28
 8007900:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007902:	2300      	movs	r3, #0
 8007904:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007906:	2300      	movs	r3, #0
 8007908:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800790a:	463a      	mov	r2, r7
 800790c:	1d39      	adds	r1, r7, #4
 800790e:	f107 0308 	add.w	r3, r7, #8
 8007912:	4618      	mov	r0, r3
 8007914:	f7f9 ffb8 	bl	8001888 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	9202      	str	r2, [sp, #8]
 8007920:	9301      	str	r3, [sp, #4]
 8007922:	2300      	movs	r3, #0
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	2300      	movs	r3, #0
 8007928:	460a      	mov	r2, r1
 800792a:	4921      	ldr	r1, [pc, #132]	@ (80079b0 <vTaskStartScheduler+0xb4>)
 800792c:	4821      	ldr	r0, [pc, #132]	@ (80079b4 <vTaskStartScheduler+0xb8>)
 800792e:	f7ff fe00 	bl	8007532 <xTaskCreateStatic>
 8007932:	4603      	mov	r3, r0
 8007934:	4a20      	ldr	r2, [pc, #128]	@ (80079b8 <vTaskStartScheduler+0xbc>)
 8007936:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007938:	4b1f      	ldr	r3, [pc, #124]	@ (80079b8 <vTaskStartScheduler+0xbc>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d002      	beq.n	8007946 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007940:	2301      	movs	r3, #1
 8007942:	617b      	str	r3, [r7, #20]
 8007944:	e001      	b.n	800794a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007946:	2300      	movs	r3, #0
 8007948:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d11b      	bne.n	8007988 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	613b      	str	r3, [r7, #16]
}
 8007962:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007964:	4b15      	ldr	r3, [pc, #84]	@ (80079bc <vTaskStartScheduler+0xc0>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	334c      	adds	r3, #76	@ 0x4c
 800796a:	4a15      	ldr	r2, [pc, #84]	@ (80079c0 <vTaskStartScheduler+0xc4>)
 800796c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800796e:	4b15      	ldr	r3, [pc, #84]	@ (80079c4 <vTaskStartScheduler+0xc8>)
 8007970:	f04f 32ff 	mov.w	r2, #4294967295
 8007974:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007976:	4b14      	ldr	r3, [pc, #80]	@ (80079c8 <vTaskStartScheduler+0xcc>)
 8007978:	2201      	movs	r2, #1
 800797a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800797c:	4b13      	ldr	r3, [pc, #76]	@ (80079cc <vTaskStartScheduler+0xd0>)
 800797e:	2200      	movs	r2, #0
 8007980:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007982:	f000 fbbd 	bl	8008100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007986:	e00f      	b.n	80079a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798e:	d10b      	bne.n	80079a8 <vTaskStartScheduler+0xac>
	__asm volatile
 8007990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	60fb      	str	r3, [r7, #12]
}
 80079a2:	bf00      	nop
 80079a4:	bf00      	nop
 80079a6:	e7fd      	b.n	80079a4 <vTaskStartScheduler+0xa8>
}
 80079a8:	bf00      	nop
 80079aa:	3718      	adds	r7, #24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	0800d2ec 	.word	0x0800d2ec
 80079b4:	08007d65 	.word	0x08007d65
 80079b8:	20000b54 	.word	0x20000b54
 80079bc:	20000a30 	.word	0x20000a30
 80079c0:	20000044 	.word	0x20000044
 80079c4:	20000b50 	.word	0x20000b50
 80079c8:	20000b3c 	.word	0x20000b3c
 80079cc:	20000b34 	.word	0x20000b34

080079d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80079d0:	b480      	push	{r7}
 80079d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80079d4:	4b04      	ldr	r3, [pc, #16]	@ (80079e8 <vTaskSuspendAll+0x18>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3301      	adds	r3, #1
 80079da:	4a03      	ldr	r2, [pc, #12]	@ (80079e8 <vTaskSuspendAll+0x18>)
 80079dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80079de:	bf00      	nop
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr
 80079e8:	20000b58 	.word	0x20000b58

080079ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079f2:	2300      	movs	r3, #0
 80079f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079f6:	2300      	movs	r3, #0
 80079f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079fa:	4b42      	ldr	r3, [pc, #264]	@ (8007b04 <xTaskResumeAll+0x118>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10b      	bne.n	8007a1a <xTaskResumeAll+0x2e>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	603b      	str	r3, [r7, #0]
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop
 8007a18:	e7fd      	b.n	8007a16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a1a:	f000 fc15 	bl	8008248 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a1e:	4b39      	ldr	r3, [pc, #228]	@ (8007b04 <xTaskResumeAll+0x118>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	4a37      	ldr	r2, [pc, #220]	@ (8007b04 <xTaskResumeAll+0x118>)
 8007a26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a28:	4b36      	ldr	r3, [pc, #216]	@ (8007b04 <xTaskResumeAll+0x118>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d161      	bne.n	8007af4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a30:	4b35      	ldr	r3, [pc, #212]	@ (8007b08 <xTaskResumeAll+0x11c>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d05d      	beq.n	8007af4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a38:	e02e      	b.n	8007a98 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a3a:	4b34      	ldr	r3, [pc, #208]	@ (8007b0c <xTaskResumeAll+0x120>)
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	3318      	adds	r3, #24
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7ff fd49 	bl	80074de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	3304      	adds	r3, #4
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff fd44 	bl	80074de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	409a      	lsls	r2, r3
 8007a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8007b10 <xTaskResumeAll+0x124>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	4a2a      	ldr	r2, [pc, #168]	@ (8007b10 <xTaskResumeAll+0x124>)
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4413      	add	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4a27      	ldr	r2, [pc, #156]	@ (8007b14 <xTaskResumeAll+0x128>)
 8007a76:	441a      	add	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4610      	mov	r0, r2
 8007a80:	f7ff fcd0 	bl	8007424 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a88:	4b23      	ldr	r3, [pc, #140]	@ (8007b18 <xTaskResumeAll+0x12c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d302      	bcc.n	8007a98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007a92:	4b22      	ldr	r3, [pc, #136]	@ (8007b1c <xTaskResumeAll+0x130>)
 8007a94:	2201      	movs	r2, #1
 8007a96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a98:	4b1c      	ldr	r3, [pc, #112]	@ (8007b0c <xTaskResumeAll+0x120>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1cc      	bne.n	8007a3a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007aa6:	f000 fa19 	bl	8007edc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8007b20 <xTaskResumeAll+0x134>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d010      	beq.n	8007ad8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ab6:	f000 f837 	bl	8007b28 <xTaskIncrementTick>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007ac0:	4b16      	ldr	r3, [pc, #88]	@ (8007b1c <xTaskResumeAll+0x130>)
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1f1      	bne.n	8007ab6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007ad2:	4b13      	ldr	r3, [pc, #76]	@ (8007b20 <xTaskResumeAll+0x134>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ad8:	4b10      	ldr	r3, [pc, #64]	@ (8007b1c <xTaskResumeAll+0x130>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d009      	beq.n	8007af4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8007b24 <xTaskResumeAll+0x138>)
 8007ae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007af4:	f000 fbda 	bl	80082ac <vPortExitCritical>

	return xAlreadyYielded;
 8007af8:	68bb      	ldr	r3, [r7, #8]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	20000b58 	.word	0x20000b58
 8007b08:	20000b30 	.word	0x20000b30
 8007b0c:	20000af0 	.word	0x20000af0
 8007b10:	20000b38 	.word	0x20000b38
 8007b14:	20000a34 	.word	0x20000a34
 8007b18:	20000a30 	.word	0x20000a30
 8007b1c:	20000b44 	.word	0x20000b44
 8007b20:	20000b40 	.word	0x20000b40
 8007b24:	e000ed04 	.word	0xe000ed04

08007b28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b32:	4b4f      	ldr	r3, [pc, #316]	@ (8007c70 <xTaskIncrementTick+0x148>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f040 808f 	bne.w	8007c5a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b3c:	4b4d      	ldr	r3, [pc, #308]	@ (8007c74 <xTaskIncrementTick+0x14c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3301      	adds	r3, #1
 8007b42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b44:	4a4b      	ldr	r2, [pc, #300]	@ (8007c74 <xTaskIncrementTick+0x14c>)
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d121      	bne.n	8007b94 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b50:	4b49      	ldr	r3, [pc, #292]	@ (8007c78 <xTaskIncrementTick+0x150>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00b      	beq.n	8007b72 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	603b      	str	r3, [r7, #0]
}
 8007b6c:	bf00      	nop
 8007b6e:	bf00      	nop
 8007b70:	e7fd      	b.n	8007b6e <xTaskIncrementTick+0x46>
 8007b72:	4b41      	ldr	r3, [pc, #260]	@ (8007c78 <xTaskIncrementTick+0x150>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	60fb      	str	r3, [r7, #12]
 8007b78:	4b40      	ldr	r3, [pc, #256]	@ (8007c7c <xTaskIncrementTick+0x154>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a3e      	ldr	r2, [pc, #248]	@ (8007c78 <xTaskIncrementTick+0x150>)
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	4a3e      	ldr	r2, [pc, #248]	@ (8007c7c <xTaskIncrementTick+0x154>)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	4b3e      	ldr	r3, [pc, #248]	@ (8007c80 <xTaskIncrementTick+0x158>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	4a3c      	ldr	r2, [pc, #240]	@ (8007c80 <xTaskIncrementTick+0x158>)
 8007b8e:	6013      	str	r3, [r2, #0]
 8007b90:	f000 f9a4 	bl	8007edc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b94:	4b3b      	ldr	r3, [pc, #236]	@ (8007c84 <xTaskIncrementTick+0x15c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d348      	bcc.n	8007c30 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b9e:	4b36      	ldr	r3, [pc, #216]	@ (8007c78 <xTaskIncrementTick+0x150>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d104      	bne.n	8007bb2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ba8:	4b36      	ldr	r3, [pc, #216]	@ (8007c84 <xTaskIncrementTick+0x15c>)
 8007baa:	f04f 32ff 	mov.w	r2, #4294967295
 8007bae:	601a      	str	r2, [r3, #0]
					break;
 8007bb0:	e03e      	b.n	8007c30 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bb2:	4b31      	ldr	r3, [pc, #196]	@ (8007c78 <xTaskIncrementTick+0x150>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d203      	bcs.n	8007bd2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007bca:	4a2e      	ldr	r2, [pc, #184]	@ (8007c84 <xTaskIncrementTick+0x15c>)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007bd0:	e02e      	b.n	8007c30 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7ff fc81 	bl	80074de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d004      	beq.n	8007bee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	3318      	adds	r3, #24
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7ff fc78 	bl	80074de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	409a      	lsls	r2, r3
 8007bf6:	4b24      	ldr	r3, [pc, #144]	@ (8007c88 <xTaskIncrementTick+0x160>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	4a22      	ldr	r2, [pc, #136]	@ (8007c88 <xTaskIncrementTick+0x160>)
 8007bfe:	6013      	str	r3, [r2, #0]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c04:	4613      	mov	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8007c8c <xTaskIncrementTick+0x164>)
 8007c0e:	441a      	add	r2, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	3304      	adds	r3, #4
 8007c14:	4619      	mov	r1, r3
 8007c16:	4610      	mov	r0, r2
 8007c18:	f7ff fc04 	bl	8007424 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c20:	4b1b      	ldr	r3, [pc, #108]	@ (8007c90 <xTaskIncrementTick+0x168>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d3b9      	bcc.n	8007b9e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c2e:	e7b6      	b.n	8007b9e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c30:	4b17      	ldr	r3, [pc, #92]	@ (8007c90 <xTaskIncrementTick+0x168>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c36:	4915      	ldr	r1, [pc, #84]	@ (8007c8c <xTaskIncrementTick+0x164>)
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	440b      	add	r3, r1
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d901      	bls.n	8007c4c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c4c:	4b11      	ldr	r3, [pc, #68]	@ (8007c94 <xTaskIncrementTick+0x16c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d007      	beq.n	8007c64 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007c54:	2301      	movs	r3, #1
 8007c56:	617b      	str	r3, [r7, #20]
 8007c58:	e004      	b.n	8007c64 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8007c98 <xTaskIncrementTick+0x170>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	4a0d      	ldr	r2, [pc, #52]	@ (8007c98 <xTaskIncrementTick+0x170>)
 8007c62:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c64:	697b      	ldr	r3, [r7, #20]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3718      	adds	r7, #24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	20000b58 	.word	0x20000b58
 8007c74:	20000b34 	.word	0x20000b34
 8007c78:	20000ae8 	.word	0x20000ae8
 8007c7c:	20000aec 	.word	0x20000aec
 8007c80:	20000b48 	.word	0x20000b48
 8007c84:	20000b50 	.word	0x20000b50
 8007c88:	20000b38 	.word	0x20000b38
 8007c8c:	20000a34 	.word	0x20000a34
 8007c90:	20000a30 	.word	0x20000a30
 8007c94:	20000b44 	.word	0x20000b44
 8007c98:	20000b40 	.word	0x20000b40

08007c9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8007d4c <vTaskSwitchContext+0xb0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007caa:	4b29      	ldr	r3, [pc, #164]	@ (8007d50 <vTaskSwitchContext+0xb4>)
 8007cac:	2201      	movs	r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007cb0:	e045      	b.n	8007d3e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007cb2:	4b27      	ldr	r3, [pc, #156]	@ (8007d50 <vTaskSwitchContext+0xb4>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cb8:	4b26      	ldr	r3, [pc, #152]	@ (8007d54 <vTaskSwitchContext+0xb8>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	fab3 f383 	clz	r3, r3
 8007cc4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007cc6:	7afb      	ldrb	r3, [r7, #11]
 8007cc8:	f1c3 031f 	rsb	r3, r3, #31
 8007ccc:	617b      	str	r3, [r7, #20]
 8007cce:	4922      	ldr	r1, [pc, #136]	@ (8007d58 <vTaskSwitchContext+0xbc>)
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	440b      	add	r3, r1
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10b      	bne.n	8007cfa <vTaskSwitchContext+0x5e>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	607b      	str	r3, [r7, #4]
}
 8007cf4:	bf00      	nop
 8007cf6:	bf00      	nop
 8007cf8:	e7fd      	b.n	8007cf6 <vTaskSwitchContext+0x5a>
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4a14      	ldr	r2, [pc, #80]	@ (8007d58 <vTaskSwitchContext+0xbc>)
 8007d06:	4413      	add	r3, r2
 8007d08:	613b      	str	r3, [r7, #16]
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	605a      	str	r2, [r3, #4]
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	3308      	adds	r3, #8
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d104      	bne.n	8007d2a <vTaskSwitchContext+0x8e>
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	605a      	str	r2, [r3, #4]
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	4a0a      	ldr	r2, [pc, #40]	@ (8007d5c <vTaskSwitchContext+0xc0>)
 8007d32:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d34:	4b09      	ldr	r3, [pc, #36]	@ (8007d5c <vTaskSwitchContext+0xc0>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	334c      	adds	r3, #76	@ 0x4c
 8007d3a:	4a09      	ldr	r2, [pc, #36]	@ (8007d60 <vTaskSwitchContext+0xc4>)
 8007d3c:	6013      	str	r3, [r2, #0]
}
 8007d3e:	bf00      	nop
 8007d40:	371c      	adds	r7, #28
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	20000b58 	.word	0x20000b58
 8007d50:	20000b44 	.word	0x20000b44
 8007d54:	20000b38 	.word	0x20000b38
 8007d58:	20000a34 	.word	0x20000a34
 8007d5c:	20000a30 	.word	0x20000a30
 8007d60:	20000044 	.word	0x20000044

08007d64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d6c:	f000 f852 	bl	8007e14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d70:	4b06      	ldr	r3, [pc, #24]	@ (8007d8c <prvIdleTask+0x28>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d9f9      	bls.n	8007d6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d78:	4b05      	ldr	r3, [pc, #20]	@ (8007d90 <prvIdleTask+0x2c>)
 8007d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d7e:	601a      	str	r2, [r3, #0]
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d88:	e7f0      	b.n	8007d6c <prvIdleTask+0x8>
 8007d8a:	bf00      	nop
 8007d8c:	20000a34 	.word	0x20000a34
 8007d90:	e000ed04 	.word	0xe000ed04

08007d94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	607b      	str	r3, [r7, #4]
 8007d9e:	e00c      	b.n	8007dba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	4613      	mov	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4a12      	ldr	r2, [pc, #72]	@ (8007df4 <prvInitialiseTaskLists+0x60>)
 8007dac:	4413      	add	r3, r2
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff fb0b 	bl	80073ca <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	3301      	adds	r3, #1
 8007db8:	607b      	str	r3, [r7, #4]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b06      	cmp	r3, #6
 8007dbe:	d9ef      	bls.n	8007da0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007dc0:	480d      	ldr	r0, [pc, #52]	@ (8007df8 <prvInitialiseTaskLists+0x64>)
 8007dc2:	f7ff fb02 	bl	80073ca <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007dc6:	480d      	ldr	r0, [pc, #52]	@ (8007dfc <prvInitialiseTaskLists+0x68>)
 8007dc8:	f7ff faff 	bl	80073ca <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007dcc:	480c      	ldr	r0, [pc, #48]	@ (8007e00 <prvInitialiseTaskLists+0x6c>)
 8007dce:	f7ff fafc 	bl	80073ca <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007dd2:	480c      	ldr	r0, [pc, #48]	@ (8007e04 <prvInitialiseTaskLists+0x70>)
 8007dd4:	f7ff faf9 	bl	80073ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007dd8:	480b      	ldr	r0, [pc, #44]	@ (8007e08 <prvInitialiseTaskLists+0x74>)
 8007dda:	f7ff faf6 	bl	80073ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007dde:	4b0b      	ldr	r3, [pc, #44]	@ (8007e0c <prvInitialiseTaskLists+0x78>)
 8007de0:	4a05      	ldr	r2, [pc, #20]	@ (8007df8 <prvInitialiseTaskLists+0x64>)
 8007de2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007de4:	4b0a      	ldr	r3, [pc, #40]	@ (8007e10 <prvInitialiseTaskLists+0x7c>)
 8007de6:	4a05      	ldr	r2, [pc, #20]	@ (8007dfc <prvInitialiseTaskLists+0x68>)
 8007de8:	601a      	str	r2, [r3, #0]
}
 8007dea:	bf00      	nop
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	20000a34 	.word	0x20000a34
 8007df8:	20000ac0 	.word	0x20000ac0
 8007dfc:	20000ad4 	.word	0x20000ad4
 8007e00:	20000af0 	.word	0x20000af0
 8007e04:	20000b04 	.word	0x20000b04
 8007e08:	20000b1c 	.word	0x20000b1c
 8007e0c:	20000ae8 	.word	0x20000ae8
 8007e10:	20000aec 	.word	0x20000aec

08007e14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e1a:	e019      	b.n	8007e50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e1c:	f000 fa14 	bl	8008248 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e20:	4b10      	ldr	r3, [pc, #64]	@ (8007e64 <prvCheckTasksWaitingTermination+0x50>)
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3304      	adds	r3, #4
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7ff fb56 	bl	80074de <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e32:	4b0d      	ldr	r3, [pc, #52]	@ (8007e68 <prvCheckTasksWaitingTermination+0x54>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	3b01      	subs	r3, #1
 8007e38:	4a0b      	ldr	r2, [pc, #44]	@ (8007e68 <prvCheckTasksWaitingTermination+0x54>)
 8007e3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e6c <prvCheckTasksWaitingTermination+0x58>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3b01      	subs	r3, #1
 8007e42:	4a0a      	ldr	r2, [pc, #40]	@ (8007e6c <prvCheckTasksWaitingTermination+0x58>)
 8007e44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e46:	f000 fa31 	bl	80082ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f810 	bl	8007e70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e50:	4b06      	ldr	r3, [pc, #24]	@ (8007e6c <prvCheckTasksWaitingTermination+0x58>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1e1      	bne.n	8007e1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e58:	bf00      	nop
 8007e5a:	bf00      	nop
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	20000b04 	.word	0x20000b04
 8007e68:	20000b30 	.word	0x20000b30
 8007e6c:	20000b18 	.word	0x20000b18

08007e70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	334c      	adds	r3, #76	@ 0x4c
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 fd5d 	bl	800993c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d108      	bne.n	8007e9e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e90:	4618      	mov	r0, r3
 8007e92:	f000 fb87 	bl	80085a4 <vPortFree>
				vPortFree( pxTCB );
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fb84 	bl	80085a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e9c:	e019      	b.n	8007ed2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d103      	bne.n	8007eb0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fb7b 	bl	80085a4 <vPortFree>
	}
 8007eae:	e010      	b.n	8007ed2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d00b      	beq.n	8007ed2 <prvDeleteTCB+0x62>
	__asm volatile
 8007eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ebe:	f383 8811 	msr	BASEPRI, r3
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	60fb      	str	r3, [r7, #12]
}
 8007ecc:	bf00      	nop
 8007ece:	bf00      	nop
 8007ed0:	e7fd      	b.n	8007ece <prvDeleteTCB+0x5e>
	}
 8007ed2:	bf00      	nop
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
	...

08007edc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8007f14 <prvResetNextTaskUnblockTime+0x38>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d104      	bne.n	8007ef6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007eec:	4b0a      	ldr	r3, [pc, #40]	@ (8007f18 <prvResetNextTaskUnblockTime+0x3c>)
 8007eee:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ef4:	e008      	b.n	8007f08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ef6:	4b07      	ldr	r3, [pc, #28]	@ (8007f14 <prvResetNextTaskUnblockTime+0x38>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	4a04      	ldr	r2, [pc, #16]	@ (8007f18 <prvResetNextTaskUnblockTime+0x3c>)
 8007f06:	6013      	str	r3, [r2, #0]
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	20000ae8 	.word	0x20000ae8
 8007f18:	20000b50 	.word	0x20000b50

08007f1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f26:	4b29      	ldr	r3, [pc, #164]	@ (8007fcc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f2c:	4b28      	ldr	r3, [pc, #160]	@ (8007fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3304      	adds	r3, #4
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7ff fad3 	bl	80074de <uxListRemove>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10b      	bne.n	8007f56 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007f3e:	4b24      	ldr	r3, [pc, #144]	@ (8007fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f44:	2201      	movs	r2, #1
 8007f46:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4a:	43da      	mvns	r2, r3
 8007f4c:	4b21      	ldr	r3, [pc, #132]	@ (8007fd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4013      	ands	r3, r2
 8007f52:	4a20      	ldr	r2, [pc, #128]	@ (8007fd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f54:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5c:	d10a      	bne.n	8007f74 <prvAddCurrentTaskToDelayedList+0x58>
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d007      	beq.n	8007f74 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f64:	4b1a      	ldr	r3, [pc, #104]	@ (8007fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	3304      	adds	r3, #4
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	481a      	ldr	r0, [pc, #104]	@ (8007fd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007f6e:	f7ff fa59 	bl	8007424 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f72:	e026      	b.n	8007fc2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4413      	add	r3, r2
 8007f7a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f7c:	4b14      	ldr	r3, [pc, #80]	@ (8007fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d209      	bcs.n	8007fa0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f8c:	4b13      	ldr	r3, [pc, #76]	@ (8007fdc <prvAddCurrentTaskToDelayedList+0xc0>)
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	4b0f      	ldr	r3, [pc, #60]	@ (8007fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3304      	adds	r3, #4
 8007f96:	4619      	mov	r1, r3
 8007f98:	4610      	mov	r0, r2
 8007f9a:	f7ff fa67 	bl	800746c <vListInsert>
}
 8007f9e:	e010      	b.n	8007fc2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8007fe0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8007fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3304      	adds	r3, #4
 8007faa:	4619      	mov	r1, r3
 8007fac:	4610      	mov	r0, r2
 8007fae:	f7ff fa5d 	bl	800746c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8007fe4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d202      	bcs.n	8007fc2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007fbc:	4a09      	ldr	r2, [pc, #36]	@ (8007fe4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	6013      	str	r3, [r2, #0]
}
 8007fc2:	bf00      	nop
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	20000b34 	.word	0x20000b34
 8007fd0:	20000a30 	.word	0x20000a30
 8007fd4:	20000b38 	.word	0x20000b38
 8007fd8:	20000b1c 	.word	0x20000b1c
 8007fdc:	20000aec 	.word	0x20000aec
 8007fe0:	20000ae8 	.word	0x20000ae8
 8007fe4:	20000b50 	.word	0x20000b50

08007fe8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	3b04      	subs	r3, #4
 8007ff8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008000:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3b04      	subs	r3, #4
 8008006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	f023 0201 	bic.w	r2, r3, #1
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3b04      	subs	r3, #4
 8008016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008018:	4a0c      	ldr	r2, [pc, #48]	@ (800804c <pxPortInitialiseStack+0x64>)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3b14      	subs	r3, #20
 8008022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	3b04      	subs	r3, #4
 800802e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f06f 0202 	mvn.w	r2, #2
 8008036:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	3b20      	subs	r3, #32
 800803c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800803e:	68fb      	ldr	r3, [r7, #12]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3714      	adds	r7, #20
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	08008051 	.word	0x08008051

08008050 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008056:	2300      	movs	r3, #0
 8008058:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800805a:	4b13      	ldr	r3, [pc, #76]	@ (80080a8 <prvTaskExitError+0x58>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008062:	d00b      	beq.n	800807c <prvTaskExitError+0x2c>
	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	60fb      	str	r3, [r7, #12]
}
 8008076:	bf00      	nop
 8008078:	bf00      	nop
 800807a:	e7fd      	b.n	8008078 <prvTaskExitError+0x28>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	60bb      	str	r3, [r7, #8]
}
 800808e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008090:	bf00      	nop
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d0fc      	beq.n	8008092 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008098:	bf00      	nop
 800809a:	bf00      	nop
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	20000034 	.word	0x20000034
 80080ac:	00000000 	.word	0x00000000

080080b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080b0:	4b07      	ldr	r3, [pc, #28]	@ (80080d0 <pxCurrentTCBConst2>)
 80080b2:	6819      	ldr	r1, [r3, #0]
 80080b4:	6808      	ldr	r0, [r1, #0]
 80080b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ba:	f380 8809 	msr	PSP, r0
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f04f 0000 	mov.w	r0, #0
 80080c6:	f380 8811 	msr	BASEPRI, r0
 80080ca:	4770      	bx	lr
 80080cc:	f3af 8000 	nop.w

080080d0 <pxCurrentTCBConst2>:
 80080d0:	20000a30 	.word	0x20000a30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080d4:	bf00      	nop
 80080d6:	bf00      	nop

080080d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080d8:	4808      	ldr	r0, [pc, #32]	@ (80080fc <prvPortStartFirstTask+0x24>)
 80080da:	6800      	ldr	r0, [r0, #0]
 80080dc:	6800      	ldr	r0, [r0, #0]
 80080de:	f380 8808 	msr	MSP, r0
 80080e2:	f04f 0000 	mov.w	r0, #0
 80080e6:	f380 8814 	msr	CONTROL, r0
 80080ea:	b662      	cpsie	i
 80080ec:	b661      	cpsie	f
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	df00      	svc	0
 80080f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080fa:	bf00      	nop
 80080fc:	e000ed08 	.word	0xe000ed08

08008100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008106:	4b47      	ldr	r3, [pc, #284]	@ (8008224 <xPortStartScheduler+0x124>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a47      	ldr	r2, [pc, #284]	@ (8008228 <xPortStartScheduler+0x128>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d10b      	bne.n	8008128 <xPortStartScheduler+0x28>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	60fb      	str	r3, [r7, #12]
}
 8008122:	bf00      	nop
 8008124:	bf00      	nop
 8008126:	e7fd      	b.n	8008124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008128:	4b3e      	ldr	r3, [pc, #248]	@ (8008224 <xPortStartScheduler+0x124>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a3f      	ldr	r2, [pc, #252]	@ (800822c <xPortStartScheduler+0x12c>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d10b      	bne.n	800814a <xPortStartScheduler+0x4a>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	613b      	str	r3, [r7, #16]
}
 8008144:	bf00      	nop
 8008146:	bf00      	nop
 8008148:	e7fd      	b.n	8008146 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800814a:	4b39      	ldr	r3, [pc, #228]	@ (8008230 <xPortStartScheduler+0x130>)
 800814c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	22ff      	movs	r2, #255	@ 0xff
 800815a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	b2db      	uxtb	r3, r3
 8008162:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008164:	78fb      	ldrb	r3, [r7, #3]
 8008166:	b2db      	uxtb	r3, r3
 8008168:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800816c:	b2da      	uxtb	r2, r3
 800816e:	4b31      	ldr	r3, [pc, #196]	@ (8008234 <xPortStartScheduler+0x134>)
 8008170:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008172:	4b31      	ldr	r3, [pc, #196]	@ (8008238 <xPortStartScheduler+0x138>)
 8008174:	2207      	movs	r2, #7
 8008176:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008178:	e009      	b.n	800818e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800817a:	4b2f      	ldr	r3, [pc, #188]	@ (8008238 <xPortStartScheduler+0x138>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3b01      	subs	r3, #1
 8008180:	4a2d      	ldr	r2, [pc, #180]	@ (8008238 <xPortStartScheduler+0x138>)
 8008182:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008184:	78fb      	ldrb	r3, [r7, #3]
 8008186:	b2db      	uxtb	r3, r3
 8008188:	005b      	lsls	r3, r3, #1
 800818a:	b2db      	uxtb	r3, r3
 800818c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800818e:	78fb      	ldrb	r3, [r7, #3]
 8008190:	b2db      	uxtb	r3, r3
 8008192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008196:	2b80      	cmp	r3, #128	@ 0x80
 8008198:	d0ef      	beq.n	800817a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800819a:	4b27      	ldr	r3, [pc, #156]	@ (8008238 <xPortStartScheduler+0x138>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f1c3 0307 	rsb	r3, r3, #7
 80081a2:	2b04      	cmp	r3, #4
 80081a4:	d00b      	beq.n	80081be <xPortStartScheduler+0xbe>
	__asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	60bb      	str	r3, [r7, #8]
}
 80081b8:	bf00      	nop
 80081ba:	bf00      	nop
 80081bc:	e7fd      	b.n	80081ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081be:	4b1e      	ldr	r3, [pc, #120]	@ (8008238 <xPortStartScheduler+0x138>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	021b      	lsls	r3, r3, #8
 80081c4:	4a1c      	ldr	r2, [pc, #112]	@ (8008238 <xPortStartScheduler+0x138>)
 80081c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081c8:	4b1b      	ldr	r3, [pc, #108]	@ (8008238 <xPortStartScheduler+0x138>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80081d0:	4a19      	ldr	r2, [pc, #100]	@ (8008238 <xPortStartScheduler+0x138>)
 80081d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081dc:	4b17      	ldr	r3, [pc, #92]	@ (800823c <xPortStartScheduler+0x13c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a16      	ldr	r2, [pc, #88]	@ (800823c <xPortStartScheduler+0x13c>)
 80081e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80081e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081e8:	4b14      	ldr	r3, [pc, #80]	@ (800823c <xPortStartScheduler+0x13c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a13      	ldr	r2, [pc, #76]	@ (800823c <xPortStartScheduler+0x13c>)
 80081ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80081f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081f4:	f000 f8da 	bl	80083ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081f8:	4b11      	ldr	r3, [pc, #68]	@ (8008240 <xPortStartScheduler+0x140>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80081fe:	f000 f8f9 	bl	80083f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008202:	4b10      	ldr	r3, [pc, #64]	@ (8008244 <xPortStartScheduler+0x144>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a0f      	ldr	r2, [pc, #60]	@ (8008244 <xPortStartScheduler+0x144>)
 8008208:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800820c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800820e:	f7ff ff63 	bl	80080d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008212:	f7ff fd43 	bl	8007c9c <vTaskSwitchContext>
	prvTaskExitError();
 8008216:	f7ff ff1b 	bl	8008050 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3718      	adds	r7, #24
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	e000ed00 	.word	0xe000ed00
 8008228:	410fc271 	.word	0x410fc271
 800822c:	410fc270 	.word	0x410fc270
 8008230:	e000e400 	.word	0xe000e400
 8008234:	20000b5c 	.word	0x20000b5c
 8008238:	20000b60 	.word	0x20000b60
 800823c:	e000ed20 	.word	0xe000ed20
 8008240:	20000034 	.word	0x20000034
 8008244:	e000ef34 	.word	0xe000ef34

08008248 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
	__asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	607b      	str	r3, [r7, #4]
}
 8008260:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008262:	4b10      	ldr	r3, [pc, #64]	@ (80082a4 <vPortEnterCritical+0x5c>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	3301      	adds	r3, #1
 8008268:	4a0e      	ldr	r2, [pc, #56]	@ (80082a4 <vPortEnterCritical+0x5c>)
 800826a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800826c:	4b0d      	ldr	r3, [pc, #52]	@ (80082a4 <vPortEnterCritical+0x5c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d110      	bne.n	8008296 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008274:	4b0c      	ldr	r3, [pc, #48]	@ (80082a8 <vPortEnterCritical+0x60>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00b      	beq.n	8008296 <vPortEnterCritical+0x4e>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	603b      	str	r3, [r7, #0]
}
 8008290:	bf00      	nop
 8008292:	bf00      	nop
 8008294:	e7fd      	b.n	8008292 <vPortEnterCritical+0x4a>
	}
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	20000034 	.word	0x20000034
 80082a8:	e000ed04 	.word	0xe000ed04

080082ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082b2:	4b12      	ldr	r3, [pc, #72]	@ (80082fc <vPortExitCritical+0x50>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10b      	bne.n	80082d2 <vPortExitCritical+0x26>
	__asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	607b      	str	r3, [r7, #4]
}
 80082cc:	bf00      	nop
 80082ce:	bf00      	nop
 80082d0:	e7fd      	b.n	80082ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80082d2:	4b0a      	ldr	r3, [pc, #40]	@ (80082fc <vPortExitCritical+0x50>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	3b01      	subs	r3, #1
 80082d8:	4a08      	ldr	r2, [pc, #32]	@ (80082fc <vPortExitCritical+0x50>)
 80082da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082dc:	4b07      	ldr	r3, [pc, #28]	@ (80082fc <vPortExitCritical+0x50>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d105      	bne.n	80082f0 <vPortExitCritical+0x44>
 80082e4:	2300      	movs	r3, #0
 80082e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	20000034 	.word	0x20000034

08008300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008300:	f3ef 8009 	mrs	r0, PSP
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	4b15      	ldr	r3, [pc, #84]	@ (8008360 <pxCurrentTCBConst>)
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	f01e 0f10 	tst.w	lr, #16
 8008310:	bf08      	it	eq
 8008312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831a:	6010      	str	r0, [r2, #0]
 800831c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008320:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008324:	f380 8811 	msr	BASEPRI, r0
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f7ff fcb4 	bl	8007c9c <vTaskSwitchContext>
 8008334:	f04f 0000 	mov.w	r0, #0
 8008338:	f380 8811 	msr	BASEPRI, r0
 800833c:	bc09      	pop	{r0, r3}
 800833e:	6819      	ldr	r1, [r3, #0]
 8008340:	6808      	ldr	r0, [r1, #0]
 8008342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008346:	f01e 0f10 	tst.w	lr, #16
 800834a:	bf08      	it	eq
 800834c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008350:	f380 8809 	msr	PSP, r0
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	f3af 8000 	nop.w

08008360 <pxCurrentTCBConst>:
 8008360:	20000a30 	.word	0x20000a30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008364:	bf00      	nop
 8008366:	bf00      	nop

08008368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	607b      	str	r3, [r7, #4]
}
 8008380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008382:	f7ff fbd1 	bl	8007b28 <xTaskIncrementTick>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800838c:	4b06      	ldr	r3, [pc, #24]	@ (80083a8 <SysTick_Handler+0x40>)
 800838e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	2300      	movs	r3, #0
 8008396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	f383 8811 	msr	BASEPRI, r3
}
 800839e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80083a0:	bf00      	nop
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	e000ed04 	.word	0xe000ed04

080083ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80083ac:	b480      	push	{r7}
 80083ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083b0:	4b0b      	ldr	r3, [pc, #44]	@ (80083e0 <vPortSetupTimerInterrupt+0x34>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083b6:	4b0b      	ldr	r3, [pc, #44]	@ (80083e4 <vPortSetupTimerInterrupt+0x38>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083bc:	4b0a      	ldr	r3, [pc, #40]	@ (80083e8 <vPortSetupTimerInterrupt+0x3c>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a0a      	ldr	r2, [pc, #40]	@ (80083ec <vPortSetupTimerInterrupt+0x40>)
 80083c2:	fba2 2303 	umull	r2, r3, r2, r3
 80083c6:	099b      	lsrs	r3, r3, #6
 80083c8:	4a09      	ldr	r2, [pc, #36]	@ (80083f0 <vPortSetupTimerInterrupt+0x44>)
 80083ca:	3b01      	subs	r3, #1
 80083cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083ce:	4b04      	ldr	r3, [pc, #16]	@ (80083e0 <vPortSetupTimerInterrupt+0x34>)
 80083d0:	2207      	movs	r2, #7
 80083d2:	601a      	str	r2, [r3, #0]
}
 80083d4:	bf00      	nop
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	e000e010 	.word	0xe000e010
 80083e4:	e000e018 	.word	0xe000e018
 80083e8:	20000028 	.word	0x20000028
 80083ec:	10624dd3 	.word	0x10624dd3
 80083f0:	e000e014 	.word	0xe000e014

080083f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80083f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008404 <vPortEnableVFP+0x10>
 80083f8:	6801      	ldr	r1, [r0, #0]
 80083fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80083fe:	6001      	str	r1, [r0, #0]
 8008400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008402:	bf00      	nop
 8008404:	e000ed88 	.word	0xe000ed88

08008408 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b08a      	sub	sp, #40	@ 0x28
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008410:	2300      	movs	r3, #0
 8008412:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008414:	f7ff fadc 	bl	80079d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008418:	4b5c      	ldr	r3, [pc, #368]	@ (800858c <pvPortMalloc+0x184>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008420:	f000 f924 	bl	800866c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008424:	4b5a      	ldr	r3, [pc, #360]	@ (8008590 <pvPortMalloc+0x188>)
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4013      	ands	r3, r2
 800842c:	2b00      	cmp	r3, #0
 800842e:	f040 8095 	bne.w	800855c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d01e      	beq.n	8008476 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008438:	2208      	movs	r2, #8
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4413      	add	r3, r2
 800843e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f003 0307 	and.w	r3, r3, #7
 8008446:	2b00      	cmp	r3, #0
 8008448:	d015      	beq.n	8008476 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f023 0307 	bic.w	r3, r3, #7
 8008450:	3308      	adds	r3, #8
 8008452:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f003 0307 	and.w	r3, r3, #7
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00b      	beq.n	8008476 <pvPortMalloc+0x6e>
	__asm volatile
 800845e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	617b      	str	r3, [r7, #20]
}
 8008470:	bf00      	nop
 8008472:	bf00      	nop
 8008474:	e7fd      	b.n	8008472 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d06f      	beq.n	800855c <pvPortMalloc+0x154>
 800847c:	4b45      	ldr	r3, [pc, #276]	@ (8008594 <pvPortMalloc+0x18c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	429a      	cmp	r2, r3
 8008484:	d86a      	bhi.n	800855c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008486:	4b44      	ldr	r3, [pc, #272]	@ (8008598 <pvPortMalloc+0x190>)
 8008488:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800848a:	4b43      	ldr	r3, [pc, #268]	@ (8008598 <pvPortMalloc+0x190>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008490:	e004      	b.n	800849c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008494:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800849c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d903      	bls.n	80084ae <pvPortMalloc+0xa6>
 80084a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1f1      	bne.n	8008492 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084ae:	4b37      	ldr	r3, [pc, #220]	@ (800858c <pvPortMalloc+0x184>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d051      	beq.n	800855c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084b8:	6a3b      	ldr	r3, [r7, #32]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2208      	movs	r2, #8
 80084be:	4413      	add	r3, r2
 80084c0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80084c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	6a3b      	ldr	r3, [r7, #32]
 80084c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	1ad2      	subs	r2, r2, r3
 80084d2:	2308      	movs	r3, #8
 80084d4:	005b      	lsls	r3, r3, #1
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d920      	bls.n	800851c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4413      	add	r3, r2
 80084e0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	f003 0307 	and.w	r3, r3, #7
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00b      	beq.n	8008504 <pvPortMalloc+0xfc>
	__asm volatile
 80084ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f0:	f383 8811 	msr	BASEPRI, r3
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	613b      	str	r3, [r7, #16]
}
 80084fe:	bf00      	nop
 8008500:	bf00      	nop
 8008502:	e7fd      	b.n	8008500 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008506:	685a      	ldr	r2, [r3, #4]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	1ad2      	subs	r2, r2, r3
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008516:	69b8      	ldr	r0, [r7, #24]
 8008518:	f000 f90a 	bl	8008730 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800851c:	4b1d      	ldr	r3, [pc, #116]	@ (8008594 <pvPortMalloc+0x18c>)
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	4a1b      	ldr	r2, [pc, #108]	@ (8008594 <pvPortMalloc+0x18c>)
 8008528:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800852a:	4b1a      	ldr	r3, [pc, #104]	@ (8008594 <pvPortMalloc+0x18c>)
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	4b1b      	ldr	r3, [pc, #108]	@ (800859c <pvPortMalloc+0x194>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	429a      	cmp	r2, r3
 8008534:	d203      	bcs.n	800853e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008536:	4b17      	ldr	r3, [pc, #92]	@ (8008594 <pvPortMalloc+0x18c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a18      	ldr	r2, [pc, #96]	@ (800859c <pvPortMalloc+0x194>)
 800853c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800853e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	4b13      	ldr	r3, [pc, #76]	@ (8008590 <pvPortMalloc+0x188>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	431a      	orrs	r2, r3
 8008548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800854c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854e:	2200      	movs	r2, #0
 8008550:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008552:	4b13      	ldr	r3, [pc, #76]	@ (80085a0 <pvPortMalloc+0x198>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	3301      	adds	r3, #1
 8008558:	4a11      	ldr	r2, [pc, #68]	@ (80085a0 <pvPortMalloc+0x198>)
 800855a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800855c:	f7ff fa46 	bl	80079ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	f003 0307 	and.w	r3, r3, #7
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00b      	beq.n	8008582 <pvPortMalloc+0x17a>
	__asm volatile
 800856a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	60fb      	str	r3, [r7, #12]
}
 800857c:	bf00      	nop
 800857e:	bf00      	nop
 8008580:	e7fd      	b.n	800857e <pvPortMalloc+0x176>
	return pvReturn;
 8008582:	69fb      	ldr	r3, [r7, #28]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3728      	adds	r7, #40	@ 0x28
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	2000476c 	.word	0x2000476c
 8008590:	20004780 	.word	0x20004780
 8008594:	20004770 	.word	0x20004770
 8008598:	20004764 	.word	0x20004764
 800859c:	20004774 	.word	0x20004774
 80085a0:	20004778 	.word	0x20004778

080085a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d04f      	beq.n	8008656 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80085b6:	2308      	movs	r3, #8
 80085b8:	425b      	negs	r3, r3
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	4413      	add	r3, r2
 80085be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	4b25      	ldr	r3, [pc, #148]	@ (8008660 <vPortFree+0xbc>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4013      	ands	r3, r2
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10b      	bne.n	80085ea <vPortFree+0x46>
	__asm volatile
 80085d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	60fb      	str	r3, [r7, #12]
}
 80085e4:	bf00      	nop
 80085e6:	bf00      	nop
 80085e8:	e7fd      	b.n	80085e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00b      	beq.n	800860a <vPortFree+0x66>
	__asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	60bb      	str	r3, [r7, #8]
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop
 8008608:	e7fd      	b.n	8008606 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	4b14      	ldr	r3, [pc, #80]	@ (8008660 <vPortFree+0xbc>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4013      	ands	r3, r2
 8008614:	2b00      	cmp	r3, #0
 8008616:	d01e      	beq.n	8008656 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d11a      	bne.n	8008656 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	685a      	ldr	r2, [r3, #4]
 8008624:	4b0e      	ldr	r3, [pc, #56]	@ (8008660 <vPortFree+0xbc>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	43db      	mvns	r3, r3
 800862a:	401a      	ands	r2, r3
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008630:	f7ff f9ce 	bl	80079d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	685a      	ldr	r2, [r3, #4]
 8008638:	4b0a      	ldr	r3, [pc, #40]	@ (8008664 <vPortFree+0xc0>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4413      	add	r3, r2
 800863e:	4a09      	ldr	r2, [pc, #36]	@ (8008664 <vPortFree+0xc0>)
 8008640:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008642:	6938      	ldr	r0, [r7, #16]
 8008644:	f000 f874 	bl	8008730 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008648:	4b07      	ldr	r3, [pc, #28]	@ (8008668 <vPortFree+0xc4>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3301      	adds	r3, #1
 800864e:	4a06      	ldr	r2, [pc, #24]	@ (8008668 <vPortFree+0xc4>)
 8008650:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008652:	f7ff f9cb 	bl	80079ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008656:	bf00      	nop
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	20004780 	.word	0x20004780
 8008664:	20004770 	.word	0x20004770
 8008668:	2000477c 	.word	0x2000477c

0800866c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008672:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008676:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008678:	4b27      	ldr	r3, [pc, #156]	@ (8008718 <prvHeapInit+0xac>)
 800867a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f003 0307 	and.w	r3, r3, #7
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00c      	beq.n	80086a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	3307      	adds	r3, #7
 800868a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f023 0307 	bic.w	r3, r3, #7
 8008692:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	4a1f      	ldr	r2, [pc, #124]	@ (8008718 <prvHeapInit+0xac>)
 800869c:	4413      	add	r3, r2
 800869e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086a4:	4a1d      	ldr	r2, [pc, #116]	@ (800871c <prvHeapInit+0xb0>)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80086aa:	4b1c      	ldr	r3, [pc, #112]	@ (800871c <prvHeapInit+0xb0>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	4413      	add	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80086b8:	2208      	movs	r2, #8
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	1a9b      	subs	r3, r3, r2
 80086be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f023 0307 	bic.w	r3, r3, #7
 80086c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	4a15      	ldr	r2, [pc, #84]	@ (8008720 <prvHeapInit+0xb4>)
 80086cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80086ce:	4b14      	ldr	r3, [pc, #80]	@ (8008720 <prvHeapInit+0xb4>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2200      	movs	r2, #0
 80086d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80086d6:	4b12      	ldr	r3, [pc, #72]	@ (8008720 <prvHeapInit+0xb4>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2200      	movs	r2, #0
 80086dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	1ad2      	subs	r2, r2, r3
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008720 <prvHeapInit+0xb4>)
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	4a0a      	ldr	r2, [pc, #40]	@ (8008724 <prvHeapInit+0xb8>)
 80086fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	4a09      	ldr	r2, [pc, #36]	@ (8008728 <prvHeapInit+0xbc>)
 8008702:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008704:	4b09      	ldr	r3, [pc, #36]	@ (800872c <prvHeapInit+0xc0>)
 8008706:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800870a:	601a      	str	r2, [r3, #0]
}
 800870c:	bf00      	nop
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	20000b64 	.word	0x20000b64
 800871c:	20004764 	.word	0x20004764
 8008720:	2000476c 	.word	0x2000476c
 8008724:	20004774 	.word	0x20004774
 8008728:	20004770 	.word	0x20004770
 800872c:	20004780 	.word	0x20004780

08008730 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008738:	4b28      	ldr	r3, [pc, #160]	@ (80087dc <prvInsertBlockIntoFreeList+0xac>)
 800873a:	60fb      	str	r3, [r7, #12]
 800873c:	e002      	b.n	8008744 <prvInsertBlockIntoFreeList+0x14>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	429a      	cmp	r2, r3
 800874c:	d8f7      	bhi.n	800873e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	4413      	add	r3, r2
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	429a      	cmp	r2, r3
 800875e:	d108      	bne.n	8008772 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	685a      	ldr	r2, [r3, #4]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	441a      	add	r2, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	441a      	add	r2, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	429a      	cmp	r2, r3
 8008784:	d118      	bne.n	80087b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	4b15      	ldr	r3, [pc, #84]	@ (80087e0 <prvInsertBlockIntoFreeList+0xb0>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	429a      	cmp	r2, r3
 8008790:	d00d      	beq.n	80087ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685a      	ldr	r2, [r3, #4]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	441a      	add	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	601a      	str	r2, [r3, #0]
 80087ac:	e008      	b.n	80087c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80087ae:	4b0c      	ldr	r3, [pc, #48]	@ (80087e0 <prvInsertBlockIntoFreeList+0xb0>)
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	601a      	str	r2, [r3, #0]
 80087b6:	e003      	b.n	80087c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d002      	beq.n	80087ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087ce:	bf00      	nop
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	20004764 	.word	0x20004764
 80087e0:	2000476c 	.word	0x2000476c

080087e4 <__cvt>:
 80087e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087e8:	ec57 6b10 	vmov	r6, r7, d0
 80087ec:	2f00      	cmp	r7, #0
 80087ee:	460c      	mov	r4, r1
 80087f0:	4619      	mov	r1, r3
 80087f2:	463b      	mov	r3, r7
 80087f4:	bfbb      	ittet	lt
 80087f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80087fa:	461f      	movlt	r7, r3
 80087fc:	2300      	movge	r3, #0
 80087fe:	232d      	movlt	r3, #45	@ 0x2d
 8008800:	700b      	strb	r3, [r1, #0]
 8008802:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008804:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008808:	4691      	mov	r9, r2
 800880a:	f023 0820 	bic.w	r8, r3, #32
 800880e:	bfbc      	itt	lt
 8008810:	4632      	movlt	r2, r6
 8008812:	4616      	movlt	r6, r2
 8008814:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008818:	d005      	beq.n	8008826 <__cvt+0x42>
 800881a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800881e:	d100      	bne.n	8008822 <__cvt+0x3e>
 8008820:	3401      	adds	r4, #1
 8008822:	2102      	movs	r1, #2
 8008824:	e000      	b.n	8008828 <__cvt+0x44>
 8008826:	2103      	movs	r1, #3
 8008828:	ab03      	add	r3, sp, #12
 800882a:	9301      	str	r3, [sp, #4]
 800882c:	ab02      	add	r3, sp, #8
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	ec47 6b10 	vmov	d0, r6, r7
 8008834:	4653      	mov	r3, sl
 8008836:	4622      	mov	r2, r4
 8008838:	f001 f9de 	bl	8009bf8 <_dtoa_r>
 800883c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008840:	4605      	mov	r5, r0
 8008842:	d119      	bne.n	8008878 <__cvt+0x94>
 8008844:	f019 0f01 	tst.w	r9, #1
 8008848:	d00e      	beq.n	8008868 <__cvt+0x84>
 800884a:	eb00 0904 	add.w	r9, r0, r4
 800884e:	2200      	movs	r2, #0
 8008850:	2300      	movs	r3, #0
 8008852:	4630      	mov	r0, r6
 8008854:	4639      	mov	r1, r7
 8008856:	f7f8 f93f 	bl	8000ad8 <__aeabi_dcmpeq>
 800885a:	b108      	cbz	r0, 8008860 <__cvt+0x7c>
 800885c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008860:	2230      	movs	r2, #48	@ 0x30
 8008862:	9b03      	ldr	r3, [sp, #12]
 8008864:	454b      	cmp	r3, r9
 8008866:	d31e      	bcc.n	80088a6 <__cvt+0xc2>
 8008868:	9b03      	ldr	r3, [sp, #12]
 800886a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800886c:	1b5b      	subs	r3, r3, r5
 800886e:	4628      	mov	r0, r5
 8008870:	6013      	str	r3, [r2, #0]
 8008872:	b004      	add	sp, #16
 8008874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008878:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800887c:	eb00 0904 	add.w	r9, r0, r4
 8008880:	d1e5      	bne.n	800884e <__cvt+0x6a>
 8008882:	7803      	ldrb	r3, [r0, #0]
 8008884:	2b30      	cmp	r3, #48	@ 0x30
 8008886:	d10a      	bne.n	800889e <__cvt+0xba>
 8008888:	2200      	movs	r2, #0
 800888a:	2300      	movs	r3, #0
 800888c:	4630      	mov	r0, r6
 800888e:	4639      	mov	r1, r7
 8008890:	f7f8 f922 	bl	8000ad8 <__aeabi_dcmpeq>
 8008894:	b918      	cbnz	r0, 800889e <__cvt+0xba>
 8008896:	f1c4 0401 	rsb	r4, r4, #1
 800889a:	f8ca 4000 	str.w	r4, [sl]
 800889e:	f8da 3000 	ldr.w	r3, [sl]
 80088a2:	4499      	add	r9, r3
 80088a4:	e7d3      	b.n	800884e <__cvt+0x6a>
 80088a6:	1c59      	adds	r1, r3, #1
 80088a8:	9103      	str	r1, [sp, #12]
 80088aa:	701a      	strb	r2, [r3, #0]
 80088ac:	e7d9      	b.n	8008862 <__cvt+0x7e>

080088ae <__exponent>:
 80088ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088b0:	2900      	cmp	r1, #0
 80088b2:	bfba      	itte	lt
 80088b4:	4249      	neglt	r1, r1
 80088b6:	232d      	movlt	r3, #45	@ 0x2d
 80088b8:	232b      	movge	r3, #43	@ 0x2b
 80088ba:	2909      	cmp	r1, #9
 80088bc:	7002      	strb	r2, [r0, #0]
 80088be:	7043      	strb	r3, [r0, #1]
 80088c0:	dd29      	ble.n	8008916 <__exponent+0x68>
 80088c2:	f10d 0307 	add.w	r3, sp, #7
 80088c6:	461d      	mov	r5, r3
 80088c8:	270a      	movs	r7, #10
 80088ca:	461a      	mov	r2, r3
 80088cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80088d0:	fb07 1416 	mls	r4, r7, r6, r1
 80088d4:	3430      	adds	r4, #48	@ 0x30
 80088d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80088da:	460c      	mov	r4, r1
 80088dc:	2c63      	cmp	r4, #99	@ 0x63
 80088de:	f103 33ff 	add.w	r3, r3, #4294967295
 80088e2:	4631      	mov	r1, r6
 80088e4:	dcf1      	bgt.n	80088ca <__exponent+0x1c>
 80088e6:	3130      	adds	r1, #48	@ 0x30
 80088e8:	1e94      	subs	r4, r2, #2
 80088ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80088ee:	1c41      	adds	r1, r0, #1
 80088f0:	4623      	mov	r3, r4
 80088f2:	42ab      	cmp	r3, r5
 80088f4:	d30a      	bcc.n	800890c <__exponent+0x5e>
 80088f6:	f10d 0309 	add.w	r3, sp, #9
 80088fa:	1a9b      	subs	r3, r3, r2
 80088fc:	42ac      	cmp	r4, r5
 80088fe:	bf88      	it	hi
 8008900:	2300      	movhi	r3, #0
 8008902:	3302      	adds	r3, #2
 8008904:	4403      	add	r3, r0
 8008906:	1a18      	subs	r0, r3, r0
 8008908:	b003      	add	sp, #12
 800890a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800890c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008910:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008914:	e7ed      	b.n	80088f2 <__exponent+0x44>
 8008916:	2330      	movs	r3, #48	@ 0x30
 8008918:	3130      	adds	r1, #48	@ 0x30
 800891a:	7083      	strb	r3, [r0, #2]
 800891c:	70c1      	strb	r1, [r0, #3]
 800891e:	1d03      	adds	r3, r0, #4
 8008920:	e7f1      	b.n	8008906 <__exponent+0x58>
	...

08008924 <_printf_float>:
 8008924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008928:	b08d      	sub	sp, #52	@ 0x34
 800892a:	460c      	mov	r4, r1
 800892c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008930:	4616      	mov	r6, r2
 8008932:	461f      	mov	r7, r3
 8008934:	4605      	mov	r5, r0
 8008936:	f000 ffed 	bl	8009914 <_localeconv_r>
 800893a:	6803      	ldr	r3, [r0, #0]
 800893c:	9304      	str	r3, [sp, #16]
 800893e:	4618      	mov	r0, r3
 8008940:	f7f7 fc9e 	bl	8000280 <strlen>
 8008944:	2300      	movs	r3, #0
 8008946:	930a      	str	r3, [sp, #40]	@ 0x28
 8008948:	f8d8 3000 	ldr.w	r3, [r8]
 800894c:	9005      	str	r0, [sp, #20]
 800894e:	3307      	adds	r3, #7
 8008950:	f023 0307 	bic.w	r3, r3, #7
 8008954:	f103 0208 	add.w	r2, r3, #8
 8008958:	f894 a018 	ldrb.w	sl, [r4, #24]
 800895c:	f8d4 b000 	ldr.w	fp, [r4]
 8008960:	f8c8 2000 	str.w	r2, [r8]
 8008964:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008968:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800896c:	9307      	str	r3, [sp, #28]
 800896e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008972:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008976:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800897a:	4b9c      	ldr	r3, [pc, #624]	@ (8008bec <_printf_float+0x2c8>)
 800897c:	f04f 32ff 	mov.w	r2, #4294967295
 8008980:	f7f8 f8dc 	bl	8000b3c <__aeabi_dcmpun>
 8008984:	bb70      	cbnz	r0, 80089e4 <_printf_float+0xc0>
 8008986:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800898a:	4b98      	ldr	r3, [pc, #608]	@ (8008bec <_printf_float+0x2c8>)
 800898c:	f04f 32ff 	mov.w	r2, #4294967295
 8008990:	f7f8 f8b6 	bl	8000b00 <__aeabi_dcmple>
 8008994:	bb30      	cbnz	r0, 80089e4 <_printf_float+0xc0>
 8008996:	2200      	movs	r2, #0
 8008998:	2300      	movs	r3, #0
 800899a:	4640      	mov	r0, r8
 800899c:	4649      	mov	r1, r9
 800899e:	f7f8 f8a5 	bl	8000aec <__aeabi_dcmplt>
 80089a2:	b110      	cbz	r0, 80089aa <_printf_float+0x86>
 80089a4:	232d      	movs	r3, #45	@ 0x2d
 80089a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089aa:	4a91      	ldr	r2, [pc, #580]	@ (8008bf0 <_printf_float+0x2cc>)
 80089ac:	4b91      	ldr	r3, [pc, #580]	@ (8008bf4 <_printf_float+0x2d0>)
 80089ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80089b2:	bf8c      	ite	hi
 80089b4:	4690      	movhi	r8, r2
 80089b6:	4698      	movls	r8, r3
 80089b8:	2303      	movs	r3, #3
 80089ba:	6123      	str	r3, [r4, #16]
 80089bc:	f02b 0304 	bic.w	r3, fp, #4
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	f04f 0900 	mov.w	r9, #0
 80089c6:	9700      	str	r7, [sp, #0]
 80089c8:	4633      	mov	r3, r6
 80089ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 80089cc:	4621      	mov	r1, r4
 80089ce:	4628      	mov	r0, r5
 80089d0:	f000 f9d2 	bl	8008d78 <_printf_common>
 80089d4:	3001      	adds	r0, #1
 80089d6:	f040 808d 	bne.w	8008af4 <_printf_float+0x1d0>
 80089da:	f04f 30ff 	mov.w	r0, #4294967295
 80089de:	b00d      	add	sp, #52	@ 0x34
 80089e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e4:	4642      	mov	r2, r8
 80089e6:	464b      	mov	r3, r9
 80089e8:	4640      	mov	r0, r8
 80089ea:	4649      	mov	r1, r9
 80089ec:	f7f8 f8a6 	bl	8000b3c <__aeabi_dcmpun>
 80089f0:	b140      	cbz	r0, 8008a04 <_printf_float+0xe0>
 80089f2:	464b      	mov	r3, r9
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	bfbc      	itt	lt
 80089f8:	232d      	movlt	r3, #45	@ 0x2d
 80089fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80089fe:	4a7e      	ldr	r2, [pc, #504]	@ (8008bf8 <_printf_float+0x2d4>)
 8008a00:	4b7e      	ldr	r3, [pc, #504]	@ (8008bfc <_printf_float+0x2d8>)
 8008a02:	e7d4      	b.n	80089ae <_printf_float+0x8a>
 8008a04:	6863      	ldr	r3, [r4, #4]
 8008a06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008a0a:	9206      	str	r2, [sp, #24]
 8008a0c:	1c5a      	adds	r2, r3, #1
 8008a0e:	d13b      	bne.n	8008a88 <_printf_float+0x164>
 8008a10:	2306      	movs	r3, #6
 8008a12:	6063      	str	r3, [r4, #4]
 8008a14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008a18:	2300      	movs	r3, #0
 8008a1a:	6022      	str	r2, [r4, #0]
 8008a1c:	9303      	str	r3, [sp, #12]
 8008a1e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a20:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008a24:	ab09      	add	r3, sp, #36	@ 0x24
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	6861      	ldr	r1, [r4, #4]
 8008a2a:	ec49 8b10 	vmov	d0, r8, r9
 8008a2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008a32:	4628      	mov	r0, r5
 8008a34:	f7ff fed6 	bl	80087e4 <__cvt>
 8008a38:	9b06      	ldr	r3, [sp, #24]
 8008a3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a3c:	2b47      	cmp	r3, #71	@ 0x47
 8008a3e:	4680      	mov	r8, r0
 8008a40:	d129      	bne.n	8008a96 <_printf_float+0x172>
 8008a42:	1cc8      	adds	r0, r1, #3
 8008a44:	db02      	blt.n	8008a4c <_printf_float+0x128>
 8008a46:	6863      	ldr	r3, [r4, #4]
 8008a48:	4299      	cmp	r1, r3
 8008a4a:	dd41      	ble.n	8008ad0 <_printf_float+0x1ac>
 8008a4c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008a50:	fa5f fa8a 	uxtb.w	sl, sl
 8008a54:	3901      	subs	r1, #1
 8008a56:	4652      	mov	r2, sl
 8008a58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008a5c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008a5e:	f7ff ff26 	bl	80088ae <__exponent>
 8008a62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a64:	1813      	adds	r3, r2, r0
 8008a66:	2a01      	cmp	r2, #1
 8008a68:	4681      	mov	r9, r0
 8008a6a:	6123      	str	r3, [r4, #16]
 8008a6c:	dc02      	bgt.n	8008a74 <_printf_float+0x150>
 8008a6e:	6822      	ldr	r2, [r4, #0]
 8008a70:	07d2      	lsls	r2, r2, #31
 8008a72:	d501      	bpl.n	8008a78 <_printf_float+0x154>
 8008a74:	3301      	adds	r3, #1
 8008a76:	6123      	str	r3, [r4, #16]
 8008a78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d0a2      	beq.n	80089c6 <_printf_float+0xa2>
 8008a80:	232d      	movs	r3, #45	@ 0x2d
 8008a82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a86:	e79e      	b.n	80089c6 <_printf_float+0xa2>
 8008a88:	9a06      	ldr	r2, [sp, #24]
 8008a8a:	2a47      	cmp	r2, #71	@ 0x47
 8008a8c:	d1c2      	bne.n	8008a14 <_printf_float+0xf0>
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1c0      	bne.n	8008a14 <_printf_float+0xf0>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e7bd      	b.n	8008a12 <_printf_float+0xee>
 8008a96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a9a:	d9db      	bls.n	8008a54 <_printf_float+0x130>
 8008a9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008aa0:	d118      	bne.n	8008ad4 <_printf_float+0x1b0>
 8008aa2:	2900      	cmp	r1, #0
 8008aa4:	6863      	ldr	r3, [r4, #4]
 8008aa6:	dd0b      	ble.n	8008ac0 <_printf_float+0x19c>
 8008aa8:	6121      	str	r1, [r4, #16]
 8008aaa:	b913      	cbnz	r3, 8008ab2 <_printf_float+0x18e>
 8008aac:	6822      	ldr	r2, [r4, #0]
 8008aae:	07d0      	lsls	r0, r2, #31
 8008ab0:	d502      	bpl.n	8008ab8 <_printf_float+0x194>
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	440b      	add	r3, r1
 8008ab6:	6123      	str	r3, [r4, #16]
 8008ab8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008aba:	f04f 0900 	mov.w	r9, #0
 8008abe:	e7db      	b.n	8008a78 <_printf_float+0x154>
 8008ac0:	b913      	cbnz	r3, 8008ac8 <_printf_float+0x1a4>
 8008ac2:	6822      	ldr	r2, [r4, #0]
 8008ac4:	07d2      	lsls	r2, r2, #31
 8008ac6:	d501      	bpl.n	8008acc <_printf_float+0x1a8>
 8008ac8:	3302      	adds	r3, #2
 8008aca:	e7f4      	b.n	8008ab6 <_printf_float+0x192>
 8008acc:	2301      	movs	r3, #1
 8008ace:	e7f2      	b.n	8008ab6 <_printf_float+0x192>
 8008ad0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008ad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ad6:	4299      	cmp	r1, r3
 8008ad8:	db05      	blt.n	8008ae6 <_printf_float+0x1c2>
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	6121      	str	r1, [r4, #16]
 8008ade:	07d8      	lsls	r0, r3, #31
 8008ae0:	d5ea      	bpl.n	8008ab8 <_printf_float+0x194>
 8008ae2:	1c4b      	adds	r3, r1, #1
 8008ae4:	e7e7      	b.n	8008ab6 <_printf_float+0x192>
 8008ae6:	2900      	cmp	r1, #0
 8008ae8:	bfd4      	ite	le
 8008aea:	f1c1 0202 	rsble	r2, r1, #2
 8008aee:	2201      	movgt	r2, #1
 8008af0:	4413      	add	r3, r2
 8008af2:	e7e0      	b.n	8008ab6 <_printf_float+0x192>
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	055a      	lsls	r2, r3, #21
 8008af8:	d407      	bmi.n	8008b0a <_printf_float+0x1e6>
 8008afa:	6923      	ldr	r3, [r4, #16]
 8008afc:	4642      	mov	r2, r8
 8008afe:	4631      	mov	r1, r6
 8008b00:	4628      	mov	r0, r5
 8008b02:	47b8      	blx	r7
 8008b04:	3001      	adds	r0, #1
 8008b06:	d12b      	bne.n	8008b60 <_printf_float+0x23c>
 8008b08:	e767      	b.n	80089da <_printf_float+0xb6>
 8008b0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008b0e:	f240 80dd 	bls.w	8008ccc <_printf_float+0x3a8>
 8008b12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b16:	2200      	movs	r2, #0
 8008b18:	2300      	movs	r3, #0
 8008b1a:	f7f7 ffdd 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d033      	beq.n	8008b8a <_printf_float+0x266>
 8008b22:	4a37      	ldr	r2, [pc, #220]	@ (8008c00 <_printf_float+0x2dc>)
 8008b24:	2301      	movs	r3, #1
 8008b26:	4631      	mov	r1, r6
 8008b28:	4628      	mov	r0, r5
 8008b2a:	47b8      	blx	r7
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	f43f af54 	beq.w	80089da <_printf_float+0xb6>
 8008b32:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008b36:	4543      	cmp	r3, r8
 8008b38:	db02      	blt.n	8008b40 <_printf_float+0x21c>
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	07d8      	lsls	r0, r3, #31
 8008b3e:	d50f      	bpl.n	8008b60 <_printf_float+0x23c>
 8008b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b44:	4631      	mov	r1, r6
 8008b46:	4628      	mov	r0, r5
 8008b48:	47b8      	blx	r7
 8008b4a:	3001      	adds	r0, #1
 8008b4c:	f43f af45 	beq.w	80089da <_printf_float+0xb6>
 8008b50:	f04f 0900 	mov.w	r9, #0
 8008b54:	f108 38ff 	add.w	r8, r8, #4294967295
 8008b58:	f104 0a1a 	add.w	sl, r4, #26
 8008b5c:	45c8      	cmp	r8, r9
 8008b5e:	dc09      	bgt.n	8008b74 <_printf_float+0x250>
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	079b      	lsls	r3, r3, #30
 8008b64:	f100 8103 	bmi.w	8008d6e <_printf_float+0x44a>
 8008b68:	68e0      	ldr	r0, [r4, #12]
 8008b6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b6c:	4298      	cmp	r0, r3
 8008b6e:	bfb8      	it	lt
 8008b70:	4618      	movlt	r0, r3
 8008b72:	e734      	b.n	80089de <_printf_float+0xba>
 8008b74:	2301      	movs	r3, #1
 8008b76:	4652      	mov	r2, sl
 8008b78:	4631      	mov	r1, r6
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	47b8      	blx	r7
 8008b7e:	3001      	adds	r0, #1
 8008b80:	f43f af2b 	beq.w	80089da <_printf_float+0xb6>
 8008b84:	f109 0901 	add.w	r9, r9, #1
 8008b88:	e7e8      	b.n	8008b5c <_printf_float+0x238>
 8008b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	dc39      	bgt.n	8008c04 <_printf_float+0x2e0>
 8008b90:	4a1b      	ldr	r2, [pc, #108]	@ (8008c00 <_printf_float+0x2dc>)
 8008b92:	2301      	movs	r3, #1
 8008b94:	4631      	mov	r1, r6
 8008b96:	4628      	mov	r0, r5
 8008b98:	47b8      	blx	r7
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	f43f af1d 	beq.w	80089da <_printf_float+0xb6>
 8008ba0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008ba4:	ea59 0303 	orrs.w	r3, r9, r3
 8008ba8:	d102      	bne.n	8008bb0 <_printf_float+0x28c>
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	07d9      	lsls	r1, r3, #31
 8008bae:	d5d7      	bpl.n	8008b60 <_printf_float+0x23c>
 8008bb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bb4:	4631      	mov	r1, r6
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	47b8      	blx	r7
 8008bba:	3001      	adds	r0, #1
 8008bbc:	f43f af0d 	beq.w	80089da <_printf_float+0xb6>
 8008bc0:	f04f 0a00 	mov.w	sl, #0
 8008bc4:	f104 0b1a 	add.w	fp, r4, #26
 8008bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bca:	425b      	negs	r3, r3
 8008bcc:	4553      	cmp	r3, sl
 8008bce:	dc01      	bgt.n	8008bd4 <_printf_float+0x2b0>
 8008bd0:	464b      	mov	r3, r9
 8008bd2:	e793      	b.n	8008afc <_printf_float+0x1d8>
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	465a      	mov	r2, fp
 8008bd8:	4631      	mov	r1, r6
 8008bda:	4628      	mov	r0, r5
 8008bdc:	47b8      	blx	r7
 8008bde:	3001      	adds	r0, #1
 8008be0:	f43f aefb 	beq.w	80089da <_printf_float+0xb6>
 8008be4:	f10a 0a01 	add.w	sl, sl, #1
 8008be8:	e7ee      	b.n	8008bc8 <_printf_float+0x2a4>
 8008bea:	bf00      	nop
 8008bec:	7fefffff 	.word	0x7fefffff
 8008bf0:	0800d310 	.word	0x0800d310
 8008bf4:	0800d30c 	.word	0x0800d30c
 8008bf8:	0800d318 	.word	0x0800d318
 8008bfc:	0800d314 	.word	0x0800d314
 8008c00:	0800d31c 	.word	0x0800d31c
 8008c04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c0a:	4553      	cmp	r3, sl
 8008c0c:	bfa8      	it	ge
 8008c0e:	4653      	movge	r3, sl
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	4699      	mov	r9, r3
 8008c14:	dc36      	bgt.n	8008c84 <_printf_float+0x360>
 8008c16:	f04f 0b00 	mov.w	fp, #0
 8008c1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c1e:	f104 021a 	add.w	r2, r4, #26
 8008c22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c24:	9306      	str	r3, [sp, #24]
 8008c26:	eba3 0309 	sub.w	r3, r3, r9
 8008c2a:	455b      	cmp	r3, fp
 8008c2c:	dc31      	bgt.n	8008c92 <_printf_float+0x36e>
 8008c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c30:	459a      	cmp	sl, r3
 8008c32:	dc3a      	bgt.n	8008caa <_printf_float+0x386>
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	07da      	lsls	r2, r3, #31
 8008c38:	d437      	bmi.n	8008caa <_printf_float+0x386>
 8008c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c3c:	ebaa 0903 	sub.w	r9, sl, r3
 8008c40:	9b06      	ldr	r3, [sp, #24]
 8008c42:	ebaa 0303 	sub.w	r3, sl, r3
 8008c46:	4599      	cmp	r9, r3
 8008c48:	bfa8      	it	ge
 8008c4a:	4699      	movge	r9, r3
 8008c4c:	f1b9 0f00 	cmp.w	r9, #0
 8008c50:	dc33      	bgt.n	8008cba <_printf_float+0x396>
 8008c52:	f04f 0800 	mov.w	r8, #0
 8008c56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c5a:	f104 0b1a 	add.w	fp, r4, #26
 8008c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c60:	ebaa 0303 	sub.w	r3, sl, r3
 8008c64:	eba3 0309 	sub.w	r3, r3, r9
 8008c68:	4543      	cmp	r3, r8
 8008c6a:	f77f af79 	ble.w	8008b60 <_printf_float+0x23c>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	465a      	mov	r2, fp
 8008c72:	4631      	mov	r1, r6
 8008c74:	4628      	mov	r0, r5
 8008c76:	47b8      	blx	r7
 8008c78:	3001      	adds	r0, #1
 8008c7a:	f43f aeae 	beq.w	80089da <_printf_float+0xb6>
 8008c7e:	f108 0801 	add.w	r8, r8, #1
 8008c82:	e7ec      	b.n	8008c5e <_printf_float+0x33a>
 8008c84:	4642      	mov	r2, r8
 8008c86:	4631      	mov	r1, r6
 8008c88:	4628      	mov	r0, r5
 8008c8a:	47b8      	blx	r7
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	d1c2      	bne.n	8008c16 <_printf_float+0x2f2>
 8008c90:	e6a3      	b.n	80089da <_printf_float+0xb6>
 8008c92:	2301      	movs	r3, #1
 8008c94:	4631      	mov	r1, r6
 8008c96:	4628      	mov	r0, r5
 8008c98:	9206      	str	r2, [sp, #24]
 8008c9a:	47b8      	blx	r7
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	f43f ae9c 	beq.w	80089da <_printf_float+0xb6>
 8008ca2:	9a06      	ldr	r2, [sp, #24]
 8008ca4:	f10b 0b01 	add.w	fp, fp, #1
 8008ca8:	e7bb      	b.n	8008c22 <_printf_float+0x2fe>
 8008caa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cae:	4631      	mov	r1, r6
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	47b8      	blx	r7
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	d1c0      	bne.n	8008c3a <_printf_float+0x316>
 8008cb8:	e68f      	b.n	80089da <_printf_float+0xb6>
 8008cba:	9a06      	ldr	r2, [sp, #24]
 8008cbc:	464b      	mov	r3, r9
 8008cbe:	4442      	add	r2, r8
 8008cc0:	4631      	mov	r1, r6
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	47b8      	blx	r7
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	d1c3      	bne.n	8008c52 <_printf_float+0x32e>
 8008cca:	e686      	b.n	80089da <_printf_float+0xb6>
 8008ccc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008cd0:	f1ba 0f01 	cmp.w	sl, #1
 8008cd4:	dc01      	bgt.n	8008cda <_printf_float+0x3b6>
 8008cd6:	07db      	lsls	r3, r3, #31
 8008cd8:	d536      	bpl.n	8008d48 <_printf_float+0x424>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	4642      	mov	r2, r8
 8008cde:	4631      	mov	r1, r6
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	47b8      	blx	r7
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	f43f ae78 	beq.w	80089da <_printf_float+0xb6>
 8008cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cee:	4631      	mov	r1, r6
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	47b8      	blx	r7
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	f43f ae70 	beq.w	80089da <_printf_float+0xb6>
 8008cfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008cfe:	2200      	movs	r2, #0
 8008d00:	2300      	movs	r3, #0
 8008d02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d06:	f7f7 fee7 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d0a:	b9c0      	cbnz	r0, 8008d3e <_printf_float+0x41a>
 8008d0c:	4653      	mov	r3, sl
 8008d0e:	f108 0201 	add.w	r2, r8, #1
 8008d12:	4631      	mov	r1, r6
 8008d14:	4628      	mov	r0, r5
 8008d16:	47b8      	blx	r7
 8008d18:	3001      	adds	r0, #1
 8008d1a:	d10c      	bne.n	8008d36 <_printf_float+0x412>
 8008d1c:	e65d      	b.n	80089da <_printf_float+0xb6>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	465a      	mov	r2, fp
 8008d22:	4631      	mov	r1, r6
 8008d24:	4628      	mov	r0, r5
 8008d26:	47b8      	blx	r7
 8008d28:	3001      	adds	r0, #1
 8008d2a:	f43f ae56 	beq.w	80089da <_printf_float+0xb6>
 8008d2e:	f108 0801 	add.w	r8, r8, #1
 8008d32:	45d0      	cmp	r8, sl
 8008d34:	dbf3      	blt.n	8008d1e <_printf_float+0x3fa>
 8008d36:	464b      	mov	r3, r9
 8008d38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008d3c:	e6df      	b.n	8008afe <_printf_float+0x1da>
 8008d3e:	f04f 0800 	mov.w	r8, #0
 8008d42:	f104 0b1a 	add.w	fp, r4, #26
 8008d46:	e7f4      	b.n	8008d32 <_printf_float+0x40e>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	4642      	mov	r2, r8
 8008d4c:	e7e1      	b.n	8008d12 <_printf_float+0x3ee>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	464a      	mov	r2, r9
 8008d52:	4631      	mov	r1, r6
 8008d54:	4628      	mov	r0, r5
 8008d56:	47b8      	blx	r7
 8008d58:	3001      	adds	r0, #1
 8008d5a:	f43f ae3e 	beq.w	80089da <_printf_float+0xb6>
 8008d5e:	f108 0801 	add.w	r8, r8, #1
 8008d62:	68e3      	ldr	r3, [r4, #12]
 8008d64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d66:	1a5b      	subs	r3, r3, r1
 8008d68:	4543      	cmp	r3, r8
 8008d6a:	dcf0      	bgt.n	8008d4e <_printf_float+0x42a>
 8008d6c:	e6fc      	b.n	8008b68 <_printf_float+0x244>
 8008d6e:	f04f 0800 	mov.w	r8, #0
 8008d72:	f104 0919 	add.w	r9, r4, #25
 8008d76:	e7f4      	b.n	8008d62 <_printf_float+0x43e>

08008d78 <_printf_common>:
 8008d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d7c:	4616      	mov	r6, r2
 8008d7e:	4698      	mov	r8, r3
 8008d80:	688a      	ldr	r2, [r1, #8]
 8008d82:	690b      	ldr	r3, [r1, #16]
 8008d84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	bfb8      	it	lt
 8008d8c:	4613      	movlt	r3, r2
 8008d8e:	6033      	str	r3, [r6, #0]
 8008d90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d94:	4607      	mov	r7, r0
 8008d96:	460c      	mov	r4, r1
 8008d98:	b10a      	cbz	r2, 8008d9e <_printf_common+0x26>
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	6033      	str	r3, [r6, #0]
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	0699      	lsls	r1, r3, #26
 8008da2:	bf42      	ittt	mi
 8008da4:	6833      	ldrmi	r3, [r6, #0]
 8008da6:	3302      	addmi	r3, #2
 8008da8:	6033      	strmi	r3, [r6, #0]
 8008daa:	6825      	ldr	r5, [r4, #0]
 8008dac:	f015 0506 	ands.w	r5, r5, #6
 8008db0:	d106      	bne.n	8008dc0 <_printf_common+0x48>
 8008db2:	f104 0a19 	add.w	sl, r4, #25
 8008db6:	68e3      	ldr	r3, [r4, #12]
 8008db8:	6832      	ldr	r2, [r6, #0]
 8008dba:	1a9b      	subs	r3, r3, r2
 8008dbc:	42ab      	cmp	r3, r5
 8008dbe:	dc26      	bgt.n	8008e0e <_printf_common+0x96>
 8008dc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008dc4:	6822      	ldr	r2, [r4, #0]
 8008dc6:	3b00      	subs	r3, #0
 8008dc8:	bf18      	it	ne
 8008dca:	2301      	movne	r3, #1
 8008dcc:	0692      	lsls	r2, r2, #26
 8008dce:	d42b      	bmi.n	8008e28 <_printf_common+0xb0>
 8008dd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008dd4:	4641      	mov	r1, r8
 8008dd6:	4638      	mov	r0, r7
 8008dd8:	47c8      	blx	r9
 8008dda:	3001      	adds	r0, #1
 8008ddc:	d01e      	beq.n	8008e1c <_printf_common+0xa4>
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	6922      	ldr	r2, [r4, #16]
 8008de2:	f003 0306 	and.w	r3, r3, #6
 8008de6:	2b04      	cmp	r3, #4
 8008de8:	bf02      	ittt	eq
 8008dea:	68e5      	ldreq	r5, [r4, #12]
 8008dec:	6833      	ldreq	r3, [r6, #0]
 8008dee:	1aed      	subeq	r5, r5, r3
 8008df0:	68a3      	ldr	r3, [r4, #8]
 8008df2:	bf0c      	ite	eq
 8008df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008df8:	2500      	movne	r5, #0
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	bfc4      	itt	gt
 8008dfe:	1a9b      	subgt	r3, r3, r2
 8008e00:	18ed      	addgt	r5, r5, r3
 8008e02:	2600      	movs	r6, #0
 8008e04:	341a      	adds	r4, #26
 8008e06:	42b5      	cmp	r5, r6
 8008e08:	d11a      	bne.n	8008e40 <_printf_common+0xc8>
 8008e0a:	2000      	movs	r0, #0
 8008e0c:	e008      	b.n	8008e20 <_printf_common+0xa8>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	4652      	mov	r2, sl
 8008e12:	4641      	mov	r1, r8
 8008e14:	4638      	mov	r0, r7
 8008e16:	47c8      	blx	r9
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d103      	bne.n	8008e24 <_printf_common+0xac>
 8008e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e24:	3501      	adds	r5, #1
 8008e26:	e7c6      	b.n	8008db6 <_printf_common+0x3e>
 8008e28:	18e1      	adds	r1, r4, r3
 8008e2a:	1c5a      	adds	r2, r3, #1
 8008e2c:	2030      	movs	r0, #48	@ 0x30
 8008e2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e32:	4422      	add	r2, r4
 8008e34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e3c:	3302      	adds	r3, #2
 8008e3e:	e7c7      	b.n	8008dd0 <_printf_common+0x58>
 8008e40:	2301      	movs	r3, #1
 8008e42:	4622      	mov	r2, r4
 8008e44:	4641      	mov	r1, r8
 8008e46:	4638      	mov	r0, r7
 8008e48:	47c8      	blx	r9
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	d0e6      	beq.n	8008e1c <_printf_common+0xa4>
 8008e4e:	3601      	adds	r6, #1
 8008e50:	e7d9      	b.n	8008e06 <_printf_common+0x8e>
	...

08008e54 <_printf_i>:
 8008e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e58:	7e0f      	ldrb	r7, [r1, #24]
 8008e5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e5c:	2f78      	cmp	r7, #120	@ 0x78
 8008e5e:	4691      	mov	r9, r2
 8008e60:	4680      	mov	r8, r0
 8008e62:	460c      	mov	r4, r1
 8008e64:	469a      	mov	sl, r3
 8008e66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e6a:	d807      	bhi.n	8008e7c <_printf_i+0x28>
 8008e6c:	2f62      	cmp	r7, #98	@ 0x62
 8008e6e:	d80a      	bhi.n	8008e86 <_printf_i+0x32>
 8008e70:	2f00      	cmp	r7, #0
 8008e72:	f000 80d1 	beq.w	8009018 <_printf_i+0x1c4>
 8008e76:	2f58      	cmp	r7, #88	@ 0x58
 8008e78:	f000 80b8 	beq.w	8008fec <_printf_i+0x198>
 8008e7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e84:	e03a      	b.n	8008efc <_printf_i+0xa8>
 8008e86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e8a:	2b15      	cmp	r3, #21
 8008e8c:	d8f6      	bhi.n	8008e7c <_printf_i+0x28>
 8008e8e:	a101      	add	r1, pc, #4	@ (adr r1, 8008e94 <_printf_i+0x40>)
 8008e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e94:	08008eed 	.word	0x08008eed
 8008e98:	08008f01 	.word	0x08008f01
 8008e9c:	08008e7d 	.word	0x08008e7d
 8008ea0:	08008e7d 	.word	0x08008e7d
 8008ea4:	08008e7d 	.word	0x08008e7d
 8008ea8:	08008e7d 	.word	0x08008e7d
 8008eac:	08008f01 	.word	0x08008f01
 8008eb0:	08008e7d 	.word	0x08008e7d
 8008eb4:	08008e7d 	.word	0x08008e7d
 8008eb8:	08008e7d 	.word	0x08008e7d
 8008ebc:	08008e7d 	.word	0x08008e7d
 8008ec0:	08008fff 	.word	0x08008fff
 8008ec4:	08008f2b 	.word	0x08008f2b
 8008ec8:	08008fb9 	.word	0x08008fb9
 8008ecc:	08008e7d 	.word	0x08008e7d
 8008ed0:	08008e7d 	.word	0x08008e7d
 8008ed4:	08009021 	.word	0x08009021
 8008ed8:	08008e7d 	.word	0x08008e7d
 8008edc:	08008f2b 	.word	0x08008f2b
 8008ee0:	08008e7d 	.word	0x08008e7d
 8008ee4:	08008e7d 	.word	0x08008e7d
 8008ee8:	08008fc1 	.word	0x08008fc1
 8008eec:	6833      	ldr	r3, [r6, #0]
 8008eee:	1d1a      	adds	r2, r3, #4
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	6032      	str	r2, [r6, #0]
 8008ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ef8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008efc:	2301      	movs	r3, #1
 8008efe:	e09c      	b.n	800903a <_printf_i+0x1e6>
 8008f00:	6833      	ldr	r3, [r6, #0]
 8008f02:	6820      	ldr	r0, [r4, #0]
 8008f04:	1d19      	adds	r1, r3, #4
 8008f06:	6031      	str	r1, [r6, #0]
 8008f08:	0606      	lsls	r6, r0, #24
 8008f0a:	d501      	bpl.n	8008f10 <_printf_i+0xbc>
 8008f0c:	681d      	ldr	r5, [r3, #0]
 8008f0e:	e003      	b.n	8008f18 <_printf_i+0xc4>
 8008f10:	0645      	lsls	r5, r0, #25
 8008f12:	d5fb      	bpl.n	8008f0c <_printf_i+0xb8>
 8008f14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f18:	2d00      	cmp	r5, #0
 8008f1a:	da03      	bge.n	8008f24 <_printf_i+0xd0>
 8008f1c:	232d      	movs	r3, #45	@ 0x2d
 8008f1e:	426d      	negs	r5, r5
 8008f20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f24:	4858      	ldr	r0, [pc, #352]	@ (8009088 <_printf_i+0x234>)
 8008f26:	230a      	movs	r3, #10
 8008f28:	e011      	b.n	8008f4e <_printf_i+0xfa>
 8008f2a:	6821      	ldr	r1, [r4, #0]
 8008f2c:	6833      	ldr	r3, [r6, #0]
 8008f2e:	0608      	lsls	r0, r1, #24
 8008f30:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f34:	d402      	bmi.n	8008f3c <_printf_i+0xe8>
 8008f36:	0649      	lsls	r1, r1, #25
 8008f38:	bf48      	it	mi
 8008f3a:	b2ad      	uxthmi	r5, r5
 8008f3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f3e:	4852      	ldr	r0, [pc, #328]	@ (8009088 <_printf_i+0x234>)
 8008f40:	6033      	str	r3, [r6, #0]
 8008f42:	bf14      	ite	ne
 8008f44:	230a      	movne	r3, #10
 8008f46:	2308      	moveq	r3, #8
 8008f48:	2100      	movs	r1, #0
 8008f4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f4e:	6866      	ldr	r6, [r4, #4]
 8008f50:	60a6      	str	r6, [r4, #8]
 8008f52:	2e00      	cmp	r6, #0
 8008f54:	db05      	blt.n	8008f62 <_printf_i+0x10e>
 8008f56:	6821      	ldr	r1, [r4, #0]
 8008f58:	432e      	orrs	r6, r5
 8008f5a:	f021 0104 	bic.w	r1, r1, #4
 8008f5e:	6021      	str	r1, [r4, #0]
 8008f60:	d04b      	beq.n	8008ffa <_printf_i+0x1a6>
 8008f62:	4616      	mov	r6, r2
 8008f64:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f68:	fb03 5711 	mls	r7, r3, r1, r5
 8008f6c:	5dc7      	ldrb	r7, [r0, r7]
 8008f6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f72:	462f      	mov	r7, r5
 8008f74:	42bb      	cmp	r3, r7
 8008f76:	460d      	mov	r5, r1
 8008f78:	d9f4      	bls.n	8008f64 <_printf_i+0x110>
 8008f7a:	2b08      	cmp	r3, #8
 8008f7c:	d10b      	bne.n	8008f96 <_printf_i+0x142>
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	07df      	lsls	r7, r3, #31
 8008f82:	d508      	bpl.n	8008f96 <_printf_i+0x142>
 8008f84:	6923      	ldr	r3, [r4, #16]
 8008f86:	6861      	ldr	r1, [r4, #4]
 8008f88:	4299      	cmp	r1, r3
 8008f8a:	bfde      	ittt	le
 8008f8c:	2330      	movle	r3, #48	@ 0x30
 8008f8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f92:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f96:	1b92      	subs	r2, r2, r6
 8008f98:	6122      	str	r2, [r4, #16]
 8008f9a:	f8cd a000 	str.w	sl, [sp]
 8008f9e:	464b      	mov	r3, r9
 8008fa0:	aa03      	add	r2, sp, #12
 8008fa2:	4621      	mov	r1, r4
 8008fa4:	4640      	mov	r0, r8
 8008fa6:	f7ff fee7 	bl	8008d78 <_printf_common>
 8008faa:	3001      	adds	r0, #1
 8008fac:	d14a      	bne.n	8009044 <_printf_i+0x1f0>
 8008fae:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb2:	b004      	add	sp, #16
 8008fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fb8:	6823      	ldr	r3, [r4, #0]
 8008fba:	f043 0320 	orr.w	r3, r3, #32
 8008fbe:	6023      	str	r3, [r4, #0]
 8008fc0:	4832      	ldr	r0, [pc, #200]	@ (800908c <_printf_i+0x238>)
 8008fc2:	2778      	movs	r7, #120	@ 0x78
 8008fc4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008fc8:	6823      	ldr	r3, [r4, #0]
 8008fca:	6831      	ldr	r1, [r6, #0]
 8008fcc:	061f      	lsls	r7, r3, #24
 8008fce:	f851 5b04 	ldr.w	r5, [r1], #4
 8008fd2:	d402      	bmi.n	8008fda <_printf_i+0x186>
 8008fd4:	065f      	lsls	r7, r3, #25
 8008fd6:	bf48      	it	mi
 8008fd8:	b2ad      	uxthmi	r5, r5
 8008fda:	6031      	str	r1, [r6, #0]
 8008fdc:	07d9      	lsls	r1, r3, #31
 8008fde:	bf44      	itt	mi
 8008fe0:	f043 0320 	orrmi.w	r3, r3, #32
 8008fe4:	6023      	strmi	r3, [r4, #0]
 8008fe6:	b11d      	cbz	r5, 8008ff0 <_printf_i+0x19c>
 8008fe8:	2310      	movs	r3, #16
 8008fea:	e7ad      	b.n	8008f48 <_printf_i+0xf4>
 8008fec:	4826      	ldr	r0, [pc, #152]	@ (8009088 <_printf_i+0x234>)
 8008fee:	e7e9      	b.n	8008fc4 <_printf_i+0x170>
 8008ff0:	6823      	ldr	r3, [r4, #0]
 8008ff2:	f023 0320 	bic.w	r3, r3, #32
 8008ff6:	6023      	str	r3, [r4, #0]
 8008ff8:	e7f6      	b.n	8008fe8 <_printf_i+0x194>
 8008ffa:	4616      	mov	r6, r2
 8008ffc:	e7bd      	b.n	8008f7a <_printf_i+0x126>
 8008ffe:	6833      	ldr	r3, [r6, #0]
 8009000:	6825      	ldr	r5, [r4, #0]
 8009002:	6961      	ldr	r1, [r4, #20]
 8009004:	1d18      	adds	r0, r3, #4
 8009006:	6030      	str	r0, [r6, #0]
 8009008:	062e      	lsls	r6, r5, #24
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	d501      	bpl.n	8009012 <_printf_i+0x1be>
 800900e:	6019      	str	r1, [r3, #0]
 8009010:	e002      	b.n	8009018 <_printf_i+0x1c4>
 8009012:	0668      	lsls	r0, r5, #25
 8009014:	d5fb      	bpl.n	800900e <_printf_i+0x1ba>
 8009016:	8019      	strh	r1, [r3, #0]
 8009018:	2300      	movs	r3, #0
 800901a:	6123      	str	r3, [r4, #16]
 800901c:	4616      	mov	r6, r2
 800901e:	e7bc      	b.n	8008f9a <_printf_i+0x146>
 8009020:	6833      	ldr	r3, [r6, #0]
 8009022:	1d1a      	adds	r2, r3, #4
 8009024:	6032      	str	r2, [r6, #0]
 8009026:	681e      	ldr	r6, [r3, #0]
 8009028:	6862      	ldr	r2, [r4, #4]
 800902a:	2100      	movs	r1, #0
 800902c:	4630      	mov	r0, r6
 800902e:	f7f7 f8d7 	bl	80001e0 <memchr>
 8009032:	b108      	cbz	r0, 8009038 <_printf_i+0x1e4>
 8009034:	1b80      	subs	r0, r0, r6
 8009036:	6060      	str	r0, [r4, #4]
 8009038:	6863      	ldr	r3, [r4, #4]
 800903a:	6123      	str	r3, [r4, #16]
 800903c:	2300      	movs	r3, #0
 800903e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009042:	e7aa      	b.n	8008f9a <_printf_i+0x146>
 8009044:	6923      	ldr	r3, [r4, #16]
 8009046:	4632      	mov	r2, r6
 8009048:	4649      	mov	r1, r9
 800904a:	4640      	mov	r0, r8
 800904c:	47d0      	blx	sl
 800904e:	3001      	adds	r0, #1
 8009050:	d0ad      	beq.n	8008fae <_printf_i+0x15a>
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	079b      	lsls	r3, r3, #30
 8009056:	d413      	bmi.n	8009080 <_printf_i+0x22c>
 8009058:	68e0      	ldr	r0, [r4, #12]
 800905a:	9b03      	ldr	r3, [sp, #12]
 800905c:	4298      	cmp	r0, r3
 800905e:	bfb8      	it	lt
 8009060:	4618      	movlt	r0, r3
 8009062:	e7a6      	b.n	8008fb2 <_printf_i+0x15e>
 8009064:	2301      	movs	r3, #1
 8009066:	4632      	mov	r2, r6
 8009068:	4649      	mov	r1, r9
 800906a:	4640      	mov	r0, r8
 800906c:	47d0      	blx	sl
 800906e:	3001      	adds	r0, #1
 8009070:	d09d      	beq.n	8008fae <_printf_i+0x15a>
 8009072:	3501      	adds	r5, #1
 8009074:	68e3      	ldr	r3, [r4, #12]
 8009076:	9903      	ldr	r1, [sp, #12]
 8009078:	1a5b      	subs	r3, r3, r1
 800907a:	42ab      	cmp	r3, r5
 800907c:	dcf2      	bgt.n	8009064 <_printf_i+0x210>
 800907e:	e7eb      	b.n	8009058 <_printf_i+0x204>
 8009080:	2500      	movs	r5, #0
 8009082:	f104 0619 	add.w	r6, r4, #25
 8009086:	e7f5      	b.n	8009074 <_printf_i+0x220>
 8009088:	0800d31e 	.word	0x0800d31e
 800908c:	0800d32f 	.word	0x0800d32f

08009090 <_scanf_float>:
 8009090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009094:	b087      	sub	sp, #28
 8009096:	4691      	mov	r9, r2
 8009098:	9303      	str	r3, [sp, #12]
 800909a:	688b      	ldr	r3, [r1, #8]
 800909c:	1e5a      	subs	r2, r3, #1
 800909e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80090a2:	bf81      	itttt	hi
 80090a4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80090a8:	eb03 0b05 	addhi.w	fp, r3, r5
 80090ac:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80090b0:	608b      	strhi	r3, [r1, #8]
 80090b2:	680b      	ldr	r3, [r1, #0]
 80090b4:	460a      	mov	r2, r1
 80090b6:	f04f 0500 	mov.w	r5, #0
 80090ba:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80090be:	f842 3b1c 	str.w	r3, [r2], #28
 80090c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80090c6:	4680      	mov	r8, r0
 80090c8:	460c      	mov	r4, r1
 80090ca:	bf98      	it	ls
 80090cc:	f04f 0b00 	movls.w	fp, #0
 80090d0:	9201      	str	r2, [sp, #4]
 80090d2:	4616      	mov	r6, r2
 80090d4:	46aa      	mov	sl, r5
 80090d6:	462f      	mov	r7, r5
 80090d8:	9502      	str	r5, [sp, #8]
 80090da:	68a2      	ldr	r2, [r4, #8]
 80090dc:	b15a      	cbz	r2, 80090f6 <_scanf_float+0x66>
 80090de:	f8d9 3000 	ldr.w	r3, [r9]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	2b4e      	cmp	r3, #78	@ 0x4e
 80090e6:	d863      	bhi.n	80091b0 <_scanf_float+0x120>
 80090e8:	2b40      	cmp	r3, #64	@ 0x40
 80090ea:	d83b      	bhi.n	8009164 <_scanf_float+0xd4>
 80090ec:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80090f0:	b2c8      	uxtb	r0, r1
 80090f2:	280e      	cmp	r0, #14
 80090f4:	d939      	bls.n	800916a <_scanf_float+0xda>
 80090f6:	b11f      	cbz	r7, 8009100 <_scanf_float+0x70>
 80090f8:	6823      	ldr	r3, [r4, #0]
 80090fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090fe:	6023      	str	r3, [r4, #0]
 8009100:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009104:	f1ba 0f01 	cmp.w	sl, #1
 8009108:	f200 8114 	bhi.w	8009334 <_scanf_float+0x2a4>
 800910c:	9b01      	ldr	r3, [sp, #4]
 800910e:	429e      	cmp	r6, r3
 8009110:	f200 8105 	bhi.w	800931e <_scanf_float+0x28e>
 8009114:	2001      	movs	r0, #1
 8009116:	b007      	add	sp, #28
 8009118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800911c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009120:	2a0d      	cmp	r2, #13
 8009122:	d8e8      	bhi.n	80090f6 <_scanf_float+0x66>
 8009124:	a101      	add	r1, pc, #4	@ (adr r1, 800912c <_scanf_float+0x9c>)
 8009126:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800912a:	bf00      	nop
 800912c:	08009275 	.word	0x08009275
 8009130:	080090f7 	.word	0x080090f7
 8009134:	080090f7 	.word	0x080090f7
 8009138:	080090f7 	.word	0x080090f7
 800913c:	080092d1 	.word	0x080092d1
 8009140:	080092ab 	.word	0x080092ab
 8009144:	080090f7 	.word	0x080090f7
 8009148:	080090f7 	.word	0x080090f7
 800914c:	08009283 	.word	0x08009283
 8009150:	080090f7 	.word	0x080090f7
 8009154:	080090f7 	.word	0x080090f7
 8009158:	080090f7 	.word	0x080090f7
 800915c:	080090f7 	.word	0x080090f7
 8009160:	0800923f 	.word	0x0800923f
 8009164:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009168:	e7da      	b.n	8009120 <_scanf_float+0x90>
 800916a:	290e      	cmp	r1, #14
 800916c:	d8c3      	bhi.n	80090f6 <_scanf_float+0x66>
 800916e:	a001      	add	r0, pc, #4	@ (adr r0, 8009174 <_scanf_float+0xe4>)
 8009170:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009174:	0800922f 	.word	0x0800922f
 8009178:	080090f7 	.word	0x080090f7
 800917c:	0800922f 	.word	0x0800922f
 8009180:	080092bf 	.word	0x080092bf
 8009184:	080090f7 	.word	0x080090f7
 8009188:	080091d1 	.word	0x080091d1
 800918c:	08009215 	.word	0x08009215
 8009190:	08009215 	.word	0x08009215
 8009194:	08009215 	.word	0x08009215
 8009198:	08009215 	.word	0x08009215
 800919c:	08009215 	.word	0x08009215
 80091a0:	08009215 	.word	0x08009215
 80091a4:	08009215 	.word	0x08009215
 80091a8:	08009215 	.word	0x08009215
 80091ac:	08009215 	.word	0x08009215
 80091b0:	2b6e      	cmp	r3, #110	@ 0x6e
 80091b2:	d809      	bhi.n	80091c8 <_scanf_float+0x138>
 80091b4:	2b60      	cmp	r3, #96	@ 0x60
 80091b6:	d8b1      	bhi.n	800911c <_scanf_float+0x8c>
 80091b8:	2b54      	cmp	r3, #84	@ 0x54
 80091ba:	d07b      	beq.n	80092b4 <_scanf_float+0x224>
 80091bc:	2b59      	cmp	r3, #89	@ 0x59
 80091be:	d19a      	bne.n	80090f6 <_scanf_float+0x66>
 80091c0:	2d07      	cmp	r5, #7
 80091c2:	d198      	bne.n	80090f6 <_scanf_float+0x66>
 80091c4:	2508      	movs	r5, #8
 80091c6:	e02f      	b.n	8009228 <_scanf_float+0x198>
 80091c8:	2b74      	cmp	r3, #116	@ 0x74
 80091ca:	d073      	beq.n	80092b4 <_scanf_float+0x224>
 80091cc:	2b79      	cmp	r3, #121	@ 0x79
 80091ce:	e7f6      	b.n	80091be <_scanf_float+0x12e>
 80091d0:	6821      	ldr	r1, [r4, #0]
 80091d2:	05c8      	lsls	r0, r1, #23
 80091d4:	d51e      	bpl.n	8009214 <_scanf_float+0x184>
 80091d6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80091da:	6021      	str	r1, [r4, #0]
 80091dc:	3701      	adds	r7, #1
 80091de:	f1bb 0f00 	cmp.w	fp, #0
 80091e2:	d003      	beq.n	80091ec <_scanf_float+0x15c>
 80091e4:	3201      	adds	r2, #1
 80091e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80091ea:	60a2      	str	r2, [r4, #8]
 80091ec:	68a3      	ldr	r3, [r4, #8]
 80091ee:	3b01      	subs	r3, #1
 80091f0:	60a3      	str	r3, [r4, #8]
 80091f2:	6923      	ldr	r3, [r4, #16]
 80091f4:	3301      	adds	r3, #1
 80091f6:	6123      	str	r3, [r4, #16]
 80091f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80091fc:	3b01      	subs	r3, #1
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f8c9 3004 	str.w	r3, [r9, #4]
 8009204:	f340 8082 	ble.w	800930c <_scanf_float+0x27c>
 8009208:	f8d9 3000 	ldr.w	r3, [r9]
 800920c:	3301      	adds	r3, #1
 800920e:	f8c9 3000 	str.w	r3, [r9]
 8009212:	e762      	b.n	80090da <_scanf_float+0x4a>
 8009214:	eb1a 0105 	adds.w	r1, sl, r5
 8009218:	f47f af6d 	bne.w	80090f6 <_scanf_float+0x66>
 800921c:	6822      	ldr	r2, [r4, #0]
 800921e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009222:	6022      	str	r2, [r4, #0]
 8009224:	460d      	mov	r5, r1
 8009226:	468a      	mov	sl, r1
 8009228:	f806 3b01 	strb.w	r3, [r6], #1
 800922c:	e7de      	b.n	80091ec <_scanf_float+0x15c>
 800922e:	6822      	ldr	r2, [r4, #0]
 8009230:	0610      	lsls	r0, r2, #24
 8009232:	f57f af60 	bpl.w	80090f6 <_scanf_float+0x66>
 8009236:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800923a:	6022      	str	r2, [r4, #0]
 800923c:	e7f4      	b.n	8009228 <_scanf_float+0x198>
 800923e:	f1ba 0f00 	cmp.w	sl, #0
 8009242:	d10c      	bne.n	800925e <_scanf_float+0x1ce>
 8009244:	b977      	cbnz	r7, 8009264 <_scanf_float+0x1d4>
 8009246:	6822      	ldr	r2, [r4, #0]
 8009248:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800924c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009250:	d108      	bne.n	8009264 <_scanf_float+0x1d4>
 8009252:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009256:	6022      	str	r2, [r4, #0]
 8009258:	f04f 0a01 	mov.w	sl, #1
 800925c:	e7e4      	b.n	8009228 <_scanf_float+0x198>
 800925e:	f1ba 0f02 	cmp.w	sl, #2
 8009262:	d050      	beq.n	8009306 <_scanf_float+0x276>
 8009264:	2d01      	cmp	r5, #1
 8009266:	d002      	beq.n	800926e <_scanf_float+0x1de>
 8009268:	2d04      	cmp	r5, #4
 800926a:	f47f af44 	bne.w	80090f6 <_scanf_float+0x66>
 800926e:	3501      	adds	r5, #1
 8009270:	b2ed      	uxtb	r5, r5
 8009272:	e7d9      	b.n	8009228 <_scanf_float+0x198>
 8009274:	f1ba 0f01 	cmp.w	sl, #1
 8009278:	f47f af3d 	bne.w	80090f6 <_scanf_float+0x66>
 800927c:	f04f 0a02 	mov.w	sl, #2
 8009280:	e7d2      	b.n	8009228 <_scanf_float+0x198>
 8009282:	b975      	cbnz	r5, 80092a2 <_scanf_float+0x212>
 8009284:	2f00      	cmp	r7, #0
 8009286:	f47f af37 	bne.w	80090f8 <_scanf_float+0x68>
 800928a:	6822      	ldr	r2, [r4, #0]
 800928c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009290:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009294:	f040 8103 	bne.w	800949e <_scanf_float+0x40e>
 8009298:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800929c:	6022      	str	r2, [r4, #0]
 800929e:	2501      	movs	r5, #1
 80092a0:	e7c2      	b.n	8009228 <_scanf_float+0x198>
 80092a2:	2d03      	cmp	r5, #3
 80092a4:	d0e3      	beq.n	800926e <_scanf_float+0x1de>
 80092a6:	2d05      	cmp	r5, #5
 80092a8:	e7df      	b.n	800926a <_scanf_float+0x1da>
 80092aa:	2d02      	cmp	r5, #2
 80092ac:	f47f af23 	bne.w	80090f6 <_scanf_float+0x66>
 80092b0:	2503      	movs	r5, #3
 80092b2:	e7b9      	b.n	8009228 <_scanf_float+0x198>
 80092b4:	2d06      	cmp	r5, #6
 80092b6:	f47f af1e 	bne.w	80090f6 <_scanf_float+0x66>
 80092ba:	2507      	movs	r5, #7
 80092bc:	e7b4      	b.n	8009228 <_scanf_float+0x198>
 80092be:	6822      	ldr	r2, [r4, #0]
 80092c0:	0591      	lsls	r1, r2, #22
 80092c2:	f57f af18 	bpl.w	80090f6 <_scanf_float+0x66>
 80092c6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80092ca:	6022      	str	r2, [r4, #0]
 80092cc:	9702      	str	r7, [sp, #8]
 80092ce:	e7ab      	b.n	8009228 <_scanf_float+0x198>
 80092d0:	6822      	ldr	r2, [r4, #0]
 80092d2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80092d6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80092da:	d005      	beq.n	80092e8 <_scanf_float+0x258>
 80092dc:	0550      	lsls	r0, r2, #21
 80092de:	f57f af0a 	bpl.w	80090f6 <_scanf_float+0x66>
 80092e2:	2f00      	cmp	r7, #0
 80092e4:	f000 80db 	beq.w	800949e <_scanf_float+0x40e>
 80092e8:	0591      	lsls	r1, r2, #22
 80092ea:	bf58      	it	pl
 80092ec:	9902      	ldrpl	r1, [sp, #8]
 80092ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80092f2:	bf58      	it	pl
 80092f4:	1a79      	subpl	r1, r7, r1
 80092f6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80092fa:	bf58      	it	pl
 80092fc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009300:	6022      	str	r2, [r4, #0]
 8009302:	2700      	movs	r7, #0
 8009304:	e790      	b.n	8009228 <_scanf_float+0x198>
 8009306:	f04f 0a03 	mov.w	sl, #3
 800930a:	e78d      	b.n	8009228 <_scanf_float+0x198>
 800930c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009310:	4649      	mov	r1, r9
 8009312:	4640      	mov	r0, r8
 8009314:	4798      	blx	r3
 8009316:	2800      	cmp	r0, #0
 8009318:	f43f aedf 	beq.w	80090da <_scanf_float+0x4a>
 800931c:	e6eb      	b.n	80090f6 <_scanf_float+0x66>
 800931e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009322:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009326:	464a      	mov	r2, r9
 8009328:	4640      	mov	r0, r8
 800932a:	4798      	blx	r3
 800932c:	6923      	ldr	r3, [r4, #16]
 800932e:	3b01      	subs	r3, #1
 8009330:	6123      	str	r3, [r4, #16]
 8009332:	e6eb      	b.n	800910c <_scanf_float+0x7c>
 8009334:	1e6b      	subs	r3, r5, #1
 8009336:	2b06      	cmp	r3, #6
 8009338:	d824      	bhi.n	8009384 <_scanf_float+0x2f4>
 800933a:	2d02      	cmp	r5, #2
 800933c:	d836      	bhi.n	80093ac <_scanf_float+0x31c>
 800933e:	9b01      	ldr	r3, [sp, #4]
 8009340:	429e      	cmp	r6, r3
 8009342:	f67f aee7 	bls.w	8009114 <_scanf_float+0x84>
 8009346:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800934a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800934e:	464a      	mov	r2, r9
 8009350:	4640      	mov	r0, r8
 8009352:	4798      	blx	r3
 8009354:	6923      	ldr	r3, [r4, #16]
 8009356:	3b01      	subs	r3, #1
 8009358:	6123      	str	r3, [r4, #16]
 800935a:	e7f0      	b.n	800933e <_scanf_float+0x2ae>
 800935c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009360:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009364:	464a      	mov	r2, r9
 8009366:	4640      	mov	r0, r8
 8009368:	4798      	blx	r3
 800936a:	6923      	ldr	r3, [r4, #16]
 800936c:	3b01      	subs	r3, #1
 800936e:	6123      	str	r3, [r4, #16]
 8009370:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009374:	fa5f fa8a 	uxtb.w	sl, sl
 8009378:	f1ba 0f02 	cmp.w	sl, #2
 800937c:	d1ee      	bne.n	800935c <_scanf_float+0x2cc>
 800937e:	3d03      	subs	r5, #3
 8009380:	b2ed      	uxtb	r5, r5
 8009382:	1b76      	subs	r6, r6, r5
 8009384:	6823      	ldr	r3, [r4, #0]
 8009386:	05da      	lsls	r2, r3, #23
 8009388:	d530      	bpl.n	80093ec <_scanf_float+0x35c>
 800938a:	055b      	lsls	r3, r3, #21
 800938c:	d511      	bpl.n	80093b2 <_scanf_float+0x322>
 800938e:	9b01      	ldr	r3, [sp, #4]
 8009390:	429e      	cmp	r6, r3
 8009392:	f67f aebf 	bls.w	8009114 <_scanf_float+0x84>
 8009396:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800939a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800939e:	464a      	mov	r2, r9
 80093a0:	4640      	mov	r0, r8
 80093a2:	4798      	blx	r3
 80093a4:	6923      	ldr	r3, [r4, #16]
 80093a6:	3b01      	subs	r3, #1
 80093a8:	6123      	str	r3, [r4, #16]
 80093aa:	e7f0      	b.n	800938e <_scanf_float+0x2fe>
 80093ac:	46aa      	mov	sl, r5
 80093ae:	46b3      	mov	fp, r6
 80093b0:	e7de      	b.n	8009370 <_scanf_float+0x2e0>
 80093b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80093b6:	6923      	ldr	r3, [r4, #16]
 80093b8:	2965      	cmp	r1, #101	@ 0x65
 80093ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80093be:	f106 35ff 	add.w	r5, r6, #4294967295
 80093c2:	6123      	str	r3, [r4, #16]
 80093c4:	d00c      	beq.n	80093e0 <_scanf_float+0x350>
 80093c6:	2945      	cmp	r1, #69	@ 0x45
 80093c8:	d00a      	beq.n	80093e0 <_scanf_float+0x350>
 80093ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093ce:	464a      	mov	r2, r9
 80093d0:	4640      	mov	r0, r8
 80093d2:	4798      	blx	r3
 80093d4:	6923      	ldr	r3, [r4, #16]
 80093d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80093da:	3b01      	subs	r3, #1
 80093dc:	1eb5      	subs	r5, r6, #2
 80093de:	6123      	str	r3, [r4, #16]
 80093e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093e4:	464a      	mov	r2, r9
 80093e6:	4640      	mov	r0, r8
 80093e8:	4798      	blx	r3
 80093ea:	462e      	mov	r6, r5
 80093ec:	6822      	ldr	r2, [r4, #0]
 80093ee:	f012 0210 	ands.w	r2, r2, #16
 80093f2:	d001      	beq.n	80093f8 <_scanf_float+0x368>
 80093f4:	2000      	movs	r0, #0
 80093f6:	e68e      	b.n	8009116 <_scanf_float+0x86>
 80093f8:	7032      	strb	r2, [r6, #0]
 80093fa:	6823      	ldr	r3, [r4, #0]
 80093fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009400:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009404:	d125      	bne.n	8009452 <_scanf_float+0x3c2>
 8009406:	9b02      	ldr	r3, [sp, #8]
 8009408:	429f      	cmp	r7, r3
 800940a:	d00a      	beq.n	8009422 <_scanf_float+0x392>
 800940c:	1bda      	subs	r2, r3, r7
 800940e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009412:	429e      	cmp	r6, r3
 8009414:	bf28      	it	cs
 8009416:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800941a:	4922      	ldr	r1, [pc, #136]	@ (80094a4 <_scanf_float+0x414>)
 800941c:	4630      	mov	r0, r6
 800941e:	f000 f977 	bl	8009710 <siprintf>
 8009422:	9901      	ldr	r1, [sp, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	4640      	mov	r0, r8
 8009428:	f002 fd62 	bl	800bef0 <_strtod_r>
 800942c:	9b03      	ldr	r3, [sp, #12]
 800942e:	6821      	ldr	r1, [r4, #0]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f011 0f02 	tst.w	r1, #2
 8009436:	ec57 6b10 	vmov	r6, r7, d0
 800943a:	f103 0204 	add.w	r2, r3, #4
 800943e:	d015      	beq.n	800946c <_scanf_float+0x3dc>
 8009440:	9903      	ldr	r1, [sp, #12]
 8009442:	600a      	str	r2, [r1, #0]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	e9c3 6700 	strd	r6, r7, [r3]
 800944a:	68e3      	ldr	r3, [r4, #12]
 800944c:	3301      	adds	r3, #1
 800944e:	60e3      	str	r3, [r4, #12]
 8009450:	e7d0      	b.n	80093f4 <_scanf_float+0x364>
 8009452:	9b04      	ldr	r3, [sp, #16]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d0e4      	beq.n	8009422 <_scanf_float+0x392>
 8009458:	9905      	ldr	r1, [sp, #20]
 800945a:	230a      	movs	r3, #10
 800945c:	3101      	adds	r1, #1
 800945e:	4640      	mov	r0, r8
 8009460:	f002 fdc6 	bl	800bff0 <_strtol_r>
 8009464:	9b04      	ldr	r3, [sp, #16]
 8009466:	9e05      	ldr	r6, [sp, #20]
 8009468:	1ac2      	subs	r2, r0, r3
 800946a:	e7d0      	b.n	800940e <_scanf_float+0x37e>
 800946c:	f011 0f04 	tst.w	r1, #4
 8009470:	9903      	ldr	r1, [sp, #12]
 8009472:	600a      	str	r2, [r1, #0]
 8009474:	d1e6      	bne.n	8009444 <_scanf_float+0x3b4>
 8009476:	681d      	ldr	r5, [r3, #0]
 8009478:	4632      	mov	r2, r6
 800947a:	463b      	mov	r3, r7
 800947c:	4630      	mov	r0, r6
 800947e:	4639      	mov	r1, r7
 8009480:	f7f7 fb5c 	bl	8000b3c <__aeabi_dcmpun>
 8009484:	b128      	cbz	r0, 8009492 <_scanf_float+0x402>
 8009486:	4808      	ldr	r0, [pc, #32]	@ (80094a8 <_scanf_float+0x418>)
 8009488:	f000 fb28 	bl	8009adc <nanf>
 800948c:	ed85 0a00 	vstr	s0, [r5]
 8009490:	e7db      	b.n	800944a <_scanf_float+0x3ba>
 8009492:	4630      	mov	r0, r6
 8009494:	4639      	mov	r1, r7
 8009496:	f7f7 fbaf 	bl	8000bf8 <__aeabi_d2f>
 800949a:	6028      	str	r0, [r5, #0]
 800949c:	e7d5      	b.n	800944a <_scanf_float+0x3ba>
 800949e:	2700      	movs	r7, #0
 80094a0:	e62e      	b.n	8009100 <_scanf_float+0x70>
 80094a2:	bf00      	nop
 80094a4:	0800d340 	.word	0x0800d340
 80094a8:	0800d481 	.word	0x0800d481

080094ac <std>:
 80094ac:	2300      	movs	r3, #0
 80094ae:	b510      	push	{r4, lr}
 80094b0:	4604      	mov	r4, r0
 80094b2:	e9c0 3300 	strd	r3, r3, [r0]
 80094b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094ba:	6083      	str	r3, [r0, #8]
 80094bc:	8181      	strh	r1, [r0, #12]
 80094be:	6643      	str	r3, [r0, #100]	@ 0x64
 80094c0:	81c2      	strh	r2, [r0, #14]
 80094c2:	6183      	str	r3, [r0, #24]
 80094c4:	4619      	mov	r1, r3
 80094c6:	2208      	movs	r2, #8
 80094c8:	305c      	adds	r0, #92	@ 0x5c
 80094ca:	f000 fa1b 	bl	8009904 <memset>
 80094ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009504 <std+0x58>)
 80094d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80094d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009508 <std+0x5c>)
 80094d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80094d6:	4b0d      	ldr	r3, [pc, #52]	@ (800950c <std+0x60>)
 80094d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80094da:	4b0d      	ldr	r3, [pc, #52]	@ (8009510 <std+0x64>)
 80094dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80094de:	4b0d      	ldr	r3, [pc, #52]	@ (8009514 <std+0x68>)
 80094e0:	6224      	str	r4, [r4, #32]
 80094e2:	429c      	cmp	r4, r3
 80094e4:	d006      	beq.n	80094f4 <std+0x48>
 80094e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80094ea:	4294      	cmp	r4, r2
 80094ec:	d002      	beq.n	80094f4 <std+0x48>
 80094ee:	33d0      	adds	r3, #208	@ 0xd0
 80094f0:	429c      	cmp	r4, r3
 80094f2:	d105      	bne.n	8009500 <std+0x54>
 80094f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80094f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094fc:	f000 badc 	b.w	8009ab8 <__retarget_lock_init_recursive>
 8009500:	bd10      	pop	{r4, pc}
 8009502:	bf00      	nop
 8009504:	08009755 	.word	0x08009755
 8009508:	08009777 	.word	0x08009777
 800950c:	080097af 	.word	0x080097af
 8009510:	080097d3 	.word	0x080097d3
 8009514:	20004784 	.word	0x20004784

08009518 <stdio_exit_handler>:
 8009518:	4a02      	ldr	r2, [pc, #8]	@ (8009524 <stdio_exit_handler+0xc>)
 800951a:	4903      	ldr	r1, [pc, #12]	@ (8009528 <stdio_exit_handler+0x10>)
 800951c:	4803      	ldr	r0, [pc, #12]	@ (800952c <stdio_exit_handler+0x14>)
 800951e:	f000 b869 	b.w	80095f4 <_fwalk_sglue>
 8009522:	bf00      	nop
 8009524:	20000038 	.word	0x20000038
 8009528:	0800c631 	.word	0x0800c631
 800952c:	20000048 	.word	0x20000048

08009530 <cleanup_stdio>:
 8009530:	6841      	ldr	r1, [r0, #4]
 8009532:	4b0c      	ldr	r3, [pc, #48]	@ (8009564 <cleanup_stdio+0x34>)
 8009534:	4299      	cmp	r1, r3
 8009536:	b510      	push	{r4, lr}
 8009538:	4604      	mov	r4, r0
 800953a:	d001      	beq.n	8009540 <cleanup_stdio+0x10>
 800953c:	f003 f878 	bl	800c630 <_fflush_r>
 8009540:	68a1      	ldr	r1, [r4, #8]
 8009542:	4b09      	ldr	r3, [pc, #36]	@ (8009568 <cleanup_stdio+0x38>)
 8009544:	4299      	cmp	r1, r3
 8009546:	d002      	beq.n	800954e <cleanup_stdio+0x1e>
 8009548:	4620      	mov	r0, r4
 800954a:	f003 f871 	bl	800c630 <_fflush_r>
 800954e:	68e1      	ldr	r1, [r4, #12]
 8009550:	4b06      	ldr	r3, [pc, #24]	@ (800956c <cleanup_stdio+0x3c>)
 8009552:	4299      	cmp	r1, r3
 8009554:	d004      	beq.n	8009560 <cleanup_stdio+0x30>
 8009556:	4620      	mov	r0, r4
 8009558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800955c:	f003 b868 	b.w	800c630 <_fflush_r>
 8009560:	bd10      	pop	{r4, pc}
 8009562:	bf00      	nop
 8009564:	20004784 	.word	0x20004784
 8009568:	200047ec 	.word	0x200047ec
 800956c:	20004854 	.word	0x20004854

08009570 <global_stdio_init.part.0>:
 8009570:	b510      	push	{r4, lr}
 8009572:	4b0b      	ldr	r3, [pc, #44]	@ (80095a0 <global_stdio_init.part.0+0x30>)
 8009574:	4c0b      	ldr	r4, [pc, #44]	@ (80095a4 <global_stdio_init.part.0+0x34>)
 8009576:	4a0c      	ldr	r2, [pc, #48]	@ (80095a8 <global_stdio_init.part.0+0x38>)
 8009578:	601a      	str	r2, [r3, #0]
 800957a:	4620      	mov	r0, r4
 800957c:	2200      	movs	r2, #0
 800957e:	2104      	movs	r1, #4
 8009580:	f7ff ff94 	bl	80094ac <std>
 8009584:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009588:	2201      	movs	r2, #1
 800958a:	2109      	movs	r1, #9
 800958c:	f7ff ff8e 	bl	80094ac <std>
 8009590:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009594:	2202      	movs	r2, #2
 8009596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800959a:	2112      	movs	r1, #18
 800959c:	f7ff bf86 	b.w	80094ac <std>
 80095a0:	200048bc 	.word	0x200048bc
 80095a4:	20004784 	.word	0x20004784
 80095a8:	08009519 	.word	0x08009519

080095ac <__sfp_lock_acquire>:
 80095ac:	4801      	ldr	r0, [pc, #4]	@ (80095b4 <__sfp_lock_acquire+0x8>)
 80095ae:	f000 ba84 	b.w	8009aba <__retarget_lock_acquire_recursive>
 80095b2:	bf00      	nop
 80095b4:	200048c5 	.word	0x200048c5

080095b8 <__sfp_lock_release>:
 80095b8:	4801      	ldr	r0, [pc, #4]	@ (80095c0 <__sfp_lock_release+0x8>)
 80095ba:	f000 ba7f 	b.w	8009abc <__retarget_lock_release_recursive>
 80095be:	bf00      	nop
 80095c0:	200048c5 	.word	0x200048c5

080095c4 <__sinit>:
 80095c4:	b510      	push	{r4, lr}
 80095c6:	4604      	mov	r4, r0
 80095c8:	f7ff fff0 	bl	80095ac <__sfp_lock_acquire>
 80095cc:	6a23      	ldr	r3, [r4, #32]
 80095ce:	b11b      	cbz	r3, 80095d8 <__sinit+0x14>
 80095d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095d4:	f7ff bff0 	b.w	80095b8 <__sfp_lock_release>
 80095d8:	4b04      	ldr	r3, [pc, #16]	@ (80095ec <__sinit+0x28>)
 80095da:	6223      	str	r3, [r4, #32]
 80095dc:	4b04      	ldr	r3, [pc, #16]	@ (80095f0 <__sinit+0x2c>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1f5      	bne.n	80095d0 <__sinit+0xc>
 80095e4:	f7ff ffc4 	bl	8009570 <global_stdio_init.part.0>
 80095e8:	e7f2      	b.n	80095d0 <__sinit+0xc>
 80095ea:	bf00      	nop
 80095ec:	08009531 	.word	0x08009531
 80095f0:	200048bc 	.word	0x200048bc

080095f4 <_fwalk_sglue>:
 80095f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095f8:	4607      	mov	r7, r0
 80095fa:	4688      	mov	r8, r1
 80095fc:	4614      	mov	r4, r2
 80095fe:	2600      	movs	r6, #0
 8009600:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009604:	f1b9 0901 	subs.w	r9, r9, #1
 8009608:	d505      	bpl.n	8009616 <_fwalk_sglue+0x22>
 800960a:	6824      	ldr	r4, [r4, #0]
 800960c:	2c00      	cmp	r4, #0
 800960e:	d1f7      	bne.n	8009600 <_fwalk_sglue+0xc>
 8009610:	4630      	mov	r0, r6
 8009612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009616:	89ab      	ldrh	r3, [r5, #12]
 8009618:	2b01      	cmp	r3, #1
 800961a:	d907      	bls.n	800962c <_fwalk_sglue+0x38>
 800961c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009620:	3301      	adds	r3, #1
 8009622:	d003      	beq.n	800962c <_fwalk_sglue+0x38>
 8009624:	4629      	mov	r1, r5
 8009626:	4638      	mov	r0, r7
 8009628:	47c0      	blx	r8
 800962a:	4306      	orrs	r6, r0
 800962c:	3568      	adds	r5, #104	@ 0x68
 800962e:	e7e9      	b.n	8009604 <_fwalk_sglue+0x10>

08009630 <iprintf>:
 8009630:	b40f      	push	{r0, r1, r2, r3}
 8009632:	b507      	push	{r0, r1, r2, lr}
 8009634:	4906      	ldr	r1, [pc, #24]	@ (8009650 <iprintf+0x20>)
 8009636:	ab04      	add	r3, sp, #16
 8009638:	6808      	ldr	r0, [r1, #0]
 800963a:	f853 2b04 	ldr.w	r2, [r3], #4
 800963e:	6881      	ldr	r1, [r0, #8]
 8009640:	9301      	str	r3, [sp, #4]
 8009642:	f002 fe59 	bl	800c2f8 <_vfiprintf_r>
 8009646:	b003      	add	sp, #12
 8009648:	f85d eb04 	ldr.w	lr, [sp], #4
 800964c:	b004      	add	sp, #16
 800964e:	4770      	bx	lr
 8009650:	20000044 	.word	0x20000044

08009654 <_puts_r>:
 8009654:	6a03      	ldr	r3, [r0, #32]
 8009656:	b570      	push	{r4, r5, r6, lr}
 8009658:	6884      	ldr	r4, [r0, #8]
 800965a:	4605      	mov	r5, r0
 800965c:	460e      	mov	r6, r1
 800965e:	b90b      	cbnz	r3, 8009664 <_puts_r+0x10>
 8009660:	f7ff ffb0 	bl	80095c4 <__sinit>
 8009664:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009666:	07db      	lsls	r3, r3, #31
 8009668:	d405      	bmi.n	8009676 <_puts_r+0x22>
 800966a:	89a3      	ldrh	r3, [r4, #12]
 800966c:	0598      	lsls	r0, r3, #22
 800966e:	d402      	bmi.n	8009676 <_puts_r+0x22>
 8009670:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009672:	f000 fa22 	bl	8009aba <__retarget_lock_acquire_recursive>
 8009676:	89a3      	ldrh	r3, [r4, #12]
 8009678:	0719      	lsls	r1, r3, #28
 800967a:	d502      	bpl.n	8009682 <_puts_r+0x2e>
 800967c:	6923      	ldr	r3, [r4, #16]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d135      	bne.n	80096ee <_puts_r+0x9a>
 8009682:	4621      	mov	r1, r4
 8009684:	4628      	mov	r0, r5
 8009686:	f000 f8e7 	bl	8009858 <__swsetup_r>
 800968a:	b380      	cbz	r0, 80096ee <_puts_r+0x9a>
 800968c:	f04f 35ff 	mov.w	r5, #4294967295
 8009690:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009692:	07da      	lsls	r2, r3, #31
 8009694:	d405      	bmi.n	80096a2 <_puts_r+0x4e>
 8009696:	89a3      	ldrh	r3, [r4, #12]
 8009698:	059b      	lsls	r3, r3, #22
 800969a:	d402      	bmi.n	80096a2 <_puts_r+0x4e>
 800969c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800969e:	f000 fa0d 	bl	8009abc <__retarget_lock_release_recursive>
 80096a2:	4628      	mov	r0, r5
 80096a4:	bd70      	pop	{r4, r5, r6, pc}
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	da04      	bge.n	80096b4 <_puts_r+0x60>
 80096aa:	69a2      	ldr	r2, [r4, #24]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	dc17      	bgt.n	80096e0 <_puts_r+0x8c>
 80096b0:	290a      	cmp	r1, #10
 80096b2:	d015      	beq.n	80096e0 <_puts_r+0x8c>
 80096b4:	6823      	ldr	r3, [r4, #0]
 80096b6:	1c5a      	adds	r2, r3, #1
 80096b8:	6022      	str	r2, [r4, #0]
 80096ba:	7019      	strb	r1, [r3, #0]
 80096bc:	68a3      	ldr	r3, [r4, #8]
 80096be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80096c2:	3b01      	subs	r3, #1
 80096c4:	60a3      	str	r3, [r4, #8]
 80096c6:	2900      	cmp	r1, #0
 80096c8:	d1ed      	bne.n	80096a6 <_puts_r+0x52>
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	da11      	bge.n	80096f2 <_puts_r+0x9e>
 80096ce:	4622      	mov	r2, r4
 80096d0:	210a      	movs	r1, #10
 80096d2:	4628      	mov	r0, r5
 80096d4:	f000 f881 	bl	80097da <__swbuf_r>
 80096d8:	3001      	adds	r0, #1
 80096da:	d0d7      	beq.n	800968c <_puts_r+0x38>
 80096dc:	250a      	movs	r5, #10
 80096de:	e7d7      	b.n	8009690 <_puts_r+0x3c>
 80096e0:	4622      	mov	r2, r4
 80096e2:	4628      	mov	r0, r5
 80096e4:	f000 f879 	bl	80097da <__swbuf_r>
 80096e8:	3001      	adds	r0, #1
 80096ea:	d1e7      	bne.n	80096bc <_puts_r+0x68>
 80096ec:	e7ce      	b.n	800968c <_puts_r+0x38>
 80096ee:	3e01      	subs	r6, #1
 80096f0:	e7e4      	b.n	80096bc <_puts_r+0x68>
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	1c5a      	adds	r2, r3, #1
 80096f6:	6022      	str	r2, [r4, #0]
 80096f8:	220a      	movs	r2, #10
 80096fa:	701a      	strb	r2, [r3, #0]
 80096fc:	e7ee      	b.n	80096dc <_puts_r+0x88>
	...

08009700 <puts>:
 8009700:	4b02      	ldr	r3, [pc, #8]	@ (800970c <puts+0xc>)
 8009702:	4601      	mov	r1, r0
 8009704:	6818      	ldr	r0, [r3, #0]
 8009706:	f7ff bfa5 	b.w	8009654 <_puts_r>
 800970a:	bf00      	nop
 800970c:	20000044 	.word	0x20000044

08009710 <siprintf>:
 8009710:	b40e      	push	{r1, r2, r3}
 8009712:	b510      	push	{r4, lr}
 8009714:	b09d      	sub	sp, #116	@ 0x74
 8009716:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009718:	9002      	str	r0, [sp, #8]
 800971a:	9006      	str	r0, [sp, #24]
 800971c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009720:	480a      	ldr	r0, [pc, #40]	@ (800974c <siprintf+0x3c>)
 8009722:	9107      	str	r1, [sp, #28]
 8009724:	9104      	str	r1, [sp, #16]
 8009726:	490a      	ldr	r1, [pc, #40]	@ (8009750 <siprintf+0x40>)
 8009728:	f853 2b04 	ldr.w	r2, [r3], #4
 800972c:	9105      	str	r1, [sp, #20]
 800972e:	2400      	movs	r4, #0
 8009730:	a902      	add	r1, sp, #8
 8009732:	6800      	ldr	r0, [r0, #0]
 8009734:	9301      	str	r3, [sp, #4]
 8009736:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009738:	f002 fcb8 	bl	800c0ac <_svfiprintf_r>
 800973c:	9b02      	ldr	r3, [sp, #8]
 800973e:	701c      	strb	r4, [r3, #0]
 8009740:	b01d      	add	sp, #116	@ 0x74
 8009742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009746:	b003      	add	sp, #12
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	20000044 	.word	0x20000044
 8009750:	ffff0208 	.word	0xffff0208

08009754 <__sread>:
 8009754:	b510      	push	{r4, lr}
 8009756:	460c      	mov	r4, r1
 8009758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800975c:	f000 f95e 	bl	8009a1c <_read_r>
 8009760:	2800      	cmp	r0, #0
 8009762:	bfab      	itete	ge
 8009764:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009766:	89a3      	ldrhlt	r3, [r4, #12]
 8009768:	181b      	addge	r3, r3, r0
 800976a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800976e:	bfac      	ite	ge
 8009770:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009772:	81a3      	strhlt	r3, [r4, #12]
 8009774:	bd10      	pop	{r4, pc}

08009776 <__swrite>:
 8009776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800977a:	461f      	mov	r7, r3
 800977c:	898b      	ldrh	r3, [r1, #12]
 800977e:	05db      	lsls	r3, r3, #23
 8009780:	4605      	mov	r5, r0
 8009782:	460c      	mov	r4, r1
 8009784:	4616      	mov	r6, r2
 8009786:	d505      	bpl.n	8009794 <__swrite+0x1e>
 8009788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800978c:	2302      	movs	r3, #2
 800978e:	2200      	movs	r2, #0
 8009790:	f000 f932 	bl	80099f8 <_lseek_r>
 8009794:	89a3      	ldrh	r3, [r4, #12]
 8009796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800979a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800979e:	81a3      	strh	r3, [r4, #12]
 80097a0:	4632      	mov	r2, r6
 80097a2:	463b      	mov	r3, r7
 80097a4:	4628      	mov	r0, r5
 80097a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097aa:	f000 b949 	b.w	8009a40 <_write_r>

080097ae <__sseek>:
 80097ae:	b510      	push	{r4, lr}
 80097b0:	460c      	mov	r4, r1
 80097b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097b6:	f000 f91f 	bl	80099f8 <_lseek_r>
 80097ba:	1c43      	adds	r3, r0, #1
 80097bc:	89a3      	ldrh	r3, [r4, #12]
 80097be:	bf15      	itete	ne
 80097c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80097c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80097c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80097ca:	81a3      	strheq	r3, [r4, #12]
 80097cc:	bf18      	it	ne
 80097ce:	81a3      	strhne	r3, [r4, #12]
 80097d0:	bd10      	pop	{r4, pc}

080097d2 <__sclose>:
 80097d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d6:	f000 b8a1 	b.w	800991c <_close_r>

080097da <__swbuf_r>:
 80097da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097dc:	460e      	mov	r6, r1
 80097de:	4614      	mov	r4, r2
 80097e0:	4605      	mov	r5, r0
 80097e2:	b118      	cbz	r0, 80097ec <__swbuf_r+0x12>
 80097e4:	6a03      	ldr	r3, [r0, #32]
 80097e6:	b90b      	cbnz	r3, 80097ec <__swbuf_r+0x12>
 80097e8:	f7ff feec 	bl	80095c4 <__sinit>
 80097ec:	69a3      	ldr	r3, [r4, #24]
 80097ee:	60a3      	str	r3, [r4, #8]
 80097f0:	89a3      	ldrh	r3, [r4, #12]
 80097f2:	071a      	lsls	r2, r3, #28
 80097f4:	d501      	bpl.n	80097fa <__swbuf_r+0x20>
 80097f6:	6923      	ldr	r3, [r4, #16]
 80097f8:	b943      	cbnz	r3, 800980c <__swbuf_r+0x32>
 80097fa:	4621      	mov	r1, r4
 80097fc:	4628      	mov	r0, r5
 80097fe:	f000 f82b 	bl	8009858 <__swsetup_r>
 8009802:	b118      	cbz	r0, 800980c <__swbuf_r+0x32>
 8009804:	f04f 37ff 	mov.w	r7, #4294967295
 8009808:	4638      	mov	r0, r7
 800980a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	6922      	ldr	r2, [r4, #16]
 8009810:	1a98      	subs	r0, r3, r2
 8009812:	6963      	ldr	r3, [r4, #20]
 8009814:	b2f6      	uxtb	r6, r6
 8009816:	4283      	cmp	r3, r0
 8009818:	4637      	mov	r7, r6
 800981a:	dc05      	bgt.n	8009828 <__swbuf_r+0x4e>
 800981c:	4621      	mov	r1, r4
 800981e:	4628      	mov	r0, r5
 8009820:	f002 ff06 	bl	800c630 <_fflush_r>
 8009824:	2800      	cmp	r0, #0
 8009826:	d1ed      	bne.n	8009804 <__swbuf_r+0x2a>
 8009828:	68a3      	ldr	r3, [r4, #8]
 800982a:	3b01      	subs	r3, #1
 800982c:	60a3      	str	r3, [r4, #8]
 800982e:	6823      	ldr	r3, [r4, #0]
 8009830:	1c5a      	adds	r2, r3, #1
 8009832:	6022      	str	r2, [r4, #0]
 8009834:	701e      	strb	r6, [r3, #0]
 8009836:	6962      	ldr	r2, [r4, #20]
 8009838:	1c43      	adds	r3, r0, #1
 800983a:	429a      	cmp	r2, r3
 800983c:	d004      	beq.n	8009848 <__swbuf_r+0x6e>
 800983e:	89a3      	ldrh	r3, [r4, #12]
 8009840:	07db      	lsls	r3, r3, #31
 8009842:	d5e1      	bpl.n	8009808 <__swbuf_r+0x2e>
 8009844:	2e0a      	cmp	r6, #10
 8009846:	d1df      	bne.n	8009808 <__swbuf_r+0x2e>
 8009848:	4621      	mov	r1, r4
 800984a:	4628      	mov	r0, r5
 800984c:	f002 fef0 	bl	800c630 <_fflush_r>
 8009850:	2800      	cmp	r0, #0
 8009852:	d0d9      	beq.n	8009808 <__swbuf_r+0x2e>
 8009854:	e7d6      	b.n	8009804 <__swbuf_r+0x2a>
	...

08009858 <__swsetup_r>:
 8009858:	b538      	push	{r3, r4, r5, lr}
 800985a:	4b29      	ldr	r3, [pc, #164]	@ (8009900 <__swsetup_r+0xa8>)
 800985c:	4605      	mov	r5, r0
 800985e:	6818      	ldr	r0, [r3, #0]
 8009860:	460c      	mov	r4, r1
 8009862:	b118      	cbz	r0, 800986c <__swsetup_r+0x14>
 8009864:	6a03      	ldr	r3, [r0, #32]
 8009866:	b90b      	cbnz	r3, 800986c <__swsetup_r+0x14>
 8009868:	f7ff feac 	bl	80095c4 <__sinit>
 800986c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009870:	0719      	lsls	r1, r3, #28
 8009872:	d422      	bmi.n	80098ba <__swsetup_r+0x62>
 8009874:	06da      	lsls	r2, r3, #27
 8009876:	d407      	bmi.n	8009888 <__swsetup_r+0x30>
 8009878:	2209      	movs	r2, #9
 800987a:	602a      	str	r2, [r5, #0]
 800987c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009880:	81a3      	strh	r3, [r4, #12]
 8009882:	f04f 30ff 	mov.w	r0, #4294967295
 8009886:	e033      	b.n	80098f0 <__swsetup_r+0x98>
 8009888:	0758      	lsls	r0, r3, #29
 800988a:	d512      	bpl.n	80098b2 <__swsetup_r+0x5a>
 800988c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800988e:	b141      	cbz	r1, 80098a2 <__swsetup_r+0x4a>
 8009890:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009894:	4299      	cmp	r1, r3
 8009896:	d002      	beq.n	800989e <__swsetup_r+0x46>
 8009898:	4628      	mov	r0, r5
 800989a:	f000 ff7d 	bl	800a798 <_free_r>
 800989e:	2300      	movs	r3, #0
 80098a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80098a2:	89a3      	ldrh	r3, [r4, #12]
 80098a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80098a8:	81a3      	strh	r3, [r4, #12]
 80098aa:	2300      	movs	r3, #0
 80098ac:	6063      	str	r3, [r4, #4]
 80098ae:	6923      	ldr	r3, [r4, #16]
 80098b0:	6023      	str	r3, [r4, #0]
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	f043 0308 	orr.w	r3, r3, #8
 80098b8:	81a3      	strh	r3, [r4, #12]
 80098ba:	6923      	ldr	r3, [r4, #16]
 80098bc:	b94b      	cbnz	r3, 80098d2 <__swsetup_r+0x7a>
 80098be:	89a3      	ldrh	r3, [r4, #12]
 80098c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098c8:	d003      	beq.n	80098d2 <__swsetup_r+0x7a>
 80098ca:	4621      	mov	r1, r4
 80098cc:	4628      	mov	r0, r5
 80098ce:	f002 fefd 	bl	800c6cc <__smakebuf_r>
 80098d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098d6:	f013 0201 	ands.w	r2, r3, #1
 80098da:	d00a      	beq.n	80098f2 <__swsetup_r+0x9a>
 80098dc:	2200      	movs	r2, #0
 80098de:	60a2      	str	r2, [r4, #8]
 80098e0:	6962      	ldr	r2, [r4, #20]
 80098e2:	4252      	negs	r2, r2
 80098e4:	61a2      	str	r2, [r4, #24]
 80098e6:	6922      	ldr	r2, [r4, #16]
 80098e8:	b942      	cbnz	r2, 80098fc <__swsetup_r+0xa4>
 80098ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098ee:	d1c5      	bne.n	800987c <__swsetup_r+0x24>
 80098f0:	bd38      	pop	{r3, r4, r5, pc}
 80098f2:	0799      	lsls	r1, r3, #30
 80098f4:	bf58      	it	pl
 80098f6:	6962      	ldrpl	r2, [r4, #20]
 80098f8:	60a2      	str	r2, [r4, #8]
 80098fa:	e7f4      	b.n	80098e6 <__swsetup_r+0x8e>
 80098fc:	2000      	movs	r0, #0
 80098fe:	e7f7      	b.n	80098f0 <__swsetup_r+0x98>
 8009900:	20000044 	.word	0x20000044

08009904 <memset>:
 8009904:	4402      	add	r2, r0
 8009906:	4603      	mov	r3, r0
 8009908:	4293      	cmp	r3, r2
 800990a:	d100      	bne.n	800990e <memset+0xa>
 800990c:	4770      	bx	lr
 800990e:	f803 1b01 	strb.w	r1, [r3], #1
 8009912:	e7f9      	b.n	8009908 <memset+0x4>

08009914 <_localeconv_r>:
 8009914:	4800      	ldr	r0, [pc, #0]	@ (8009918 <_localeconv_r+0x4>)
 8009916:	4770      	bx	lr
 8009918:	20000184 	.word	0x20000184

0800991c <_close_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4d06      	ldr	r5, [pc, #24]	@ (8009938 <_close_r+0x1c>)
 8009920:	2300      	movs	r3, #0
 8009922:	4604      	mov	r4, r0
 8009924:	4608      	mov	r0, r1
 8009926:	602b      	str	r3, [r5, #0]
 8009928:	f7f9 fc36 	bl	8003198 <_close>
 800992c:	1c43      	adds	r3, r0, #1
 800992e:	d102      	bne.n	8009936 <_close_r+0x1a>
 8009930:	682b      	ldr	r3, [r5, #0]
 8009932:	b103      	cbz	r3, 8009936 <_close_r+0x1a>
 8009934:	6023      	str	r3, [r4, #0]
 8009936:	bd38      	pop	{r3, r4, r5, pc}
 8009938:	200048c0 	.word	0x200048c0

0800993c <_reclaim_reent>:
 800993c:	4b2d      	ldr	r3, [pc, #180]	@ (80099f4 <_reclaim_reent+0xb8>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4283      	cmp	r3, r0
 8009942:	b570      	push	{r4, r5, r6, lr}
 8009944:	4604      	mov	r4, r0
 8009946:	d053      	beq.n	80099f0 <_reclaim_reent+0xb4>
 8009948:	69c3      	ldr	r3, [r0, #28]
 800994a:	b31b      	cbz	r3, 8009994 <_reclaim_reent+0x58>
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	b163      	cbz	r3, 800996a <_reclaim_reent+0x2e>
 8009950:	2500      	movs	r5, #0
 8009952:	69e3      	ldr	r3, [r4, #28]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	5959      	ldr	r1, [r3, r5]
 8009958:	b9b1      	cbnz	r1, 8009988 <_reclaim_reent+0x4c>
 800995a:	3504      	adds	r5, #4
 800995c:	2d80      	cmp	r5, #128	@ 0x80
 800995e:	d1f8      	bne.n	8009952 <_reclaim_reent+0x16>
 8009960:	69e3      	ldr	r3, [r4, #28]
 8009962:	4620      	mov	r0, r4
 8009964:	68d9      	ldr	r1, [r3, #12]
 8009966:	f000 ff17 	bl	800a798 <_free_r>
 800996a:	69e3      	ldr	r3, [r4, #28]
 800996c:	6819      	ldr	r1, [r3, #0]
 800996e:	b111      	cbz	r1, 8009976 <_reclaim_reent+0x3a>
 8009970:	4620      	mov	r0, r4
 8009972:	f000 ff11 	bl	800a798 <_free_r>
 8009976:	69e3      	ldr	r3, [r4, #28]
 8009978:	689d      	ldr	r5, [r3, #8]
 800997a:	b15d      	cbz	r5, 8009994 <_reclaim_reent+0x58>
 800997c:	4629      	mov	r1, r5
 800997e:	4620      	mov	r0, r4
 8009980:	682d      	ldr	r5, [r5, #0]
 8009982:	f000 ff09 	bl	800a798 <_free_r>
 8009986:	e7f8      	b.n	800997a <_reclaim_reent+0x3e>
 8009988:	680e      	ldr	r6, [r1, #0]
 800998a:	4620      	mov	r0, r4
 800998c:	f000 ff04 	bl	800a798 <_free_r>
 8009990:	4631      	mov	r1, r6
 8009992:	e7e1      	b.n	8009958 <_reclaim_reent+0x1c>
 8009994:	6961      	ldr	r1, [r4, #20]
 8009996:	b111      	cbz	r1, 800999e <_reclaim_reent+0x62>
 8009998:	4620      	mov	r0, r4
 800999a:	f000 fefd 	bl	800a798 <_free_r>
 800999e:	69e1      	ldr	r1, [r4, #28]
 80099a0:	b111      	cbz	r1, 80099a8 <_reclaim_reent+0x6c>
 80099a2:	4620      	mov	r0, r4
 80099a4:	f000 fef8 	bl	800a798 <_free_r>
 80099a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80099aa:	b111      	cbz	r1, 80099b2 <_reclaim_reent+0x76>
 80099ac:	4620      	mov	r0, r4
 80099ae:	f000 fef3 	bl	800a798 <_free_r>
 80099b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099b4:	b111      	cbz	r1, 80099bc <_reclaim_reent+0x80>
 80099b6:	4620      	mov	r0, r4
 80099b8:	f000 feee 	bl	800a798 <_free_r>
 80099bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80099be:	b111      	cbz	r1, 80099c6 <_reclaim_reent+0x8a>
 80099c0:	4620      	mov	r0, r4
 80099c2:	f000 fee9 	bl	800a798 <_free_r>
 80099c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80099c8:	b111      	cbz	r1, 80099d0 <_reclaim_reent+0x94>
 80099ca:	4620      	mov	r0, r4
 80099cc:	f000 fee4 	bl	800a798 <_free_r>
 80099d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80099d2:	b111      	cbz	r1, 80099da <_reclaim_reent+0x9e>
 80099d4:	4620      	mov	r0, r4
 80099d6:	f000 fedf 	bl	800a798 <_free_r>
 80099da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80099dc:	b111      	cbz	r1, 80099e4 <_reclaim_reent+0xa8>
 80099de:	4620      	mov	r0, r4
 80099e0:	f000 feda 	bl	800a798 <_free_r>
 80099e4:	6a23      	ldr	r3, [r4, #32]
 80099e6:	b11b      	cbz	r3, 80099f0 <_reclaim_reent+0xb4>
 80099e8:	4620      	mov	r0, r4
 80099ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80099ee:	4718      	bx	r3
 80099f0:	bd70      	pop	{r4, r5, r6, pc}
 80099f2:	bf00      	nop
 80099f4:	20000044 	.word	0x20000044

080099f8 <_lseek_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	4d07      	ldr	r5, [pc, #28]	@ (8009a18 <_lseek_r+0x20>)
 80099fc:	4604      	mov	r4, r0
 80099fe:	4608      	mov	r0, r1
 8009a00:	4611      	mov	r1, r2
 8009a02:	2200      	movs	r2, #0
 8009a04:	602a      	str	r2, [r5, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	f7f9 fbed 	bl	80031e6 <_lseek>
 8009a0c:	1c43      	adds	r3, r0, #1
 8009a0e:	d102      	bne.n	8009a16 <_lseek_r+0x1e>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	b103      	cbz	r3, 8009a16 <_lseek_r+0x1e>
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	200048c0 	.word	0x200048c0

08009a1c <_read_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	4d07      	ldr	r5, [pc, #28]	@ (8009a3c <_read_r+0x20>)
 8009a20:	4604      	mov	r4, r0
 8009a22:	4608      	mov	r0, r1
 8009a24:	4611      	mov	r1, r2
 8009a26:	2200      	movs	r2, #0
 8009a28:	602a      	str	r2, [r5, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	f7f9 fb7b 	bl	8003126 <_read>
 8009a30:	1c43      	adds	r3, r0, #1
 8009a32:	d102      	bne.n	8009a3a <_read_r+0x1e>
 8009a34:	682b      	ldr	r3, [r5, #0]
 8009a36:	b103      	cbz	r3, 8009a3a <_read_r+0x1e>
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	bd38      	pop	{r3, r4, r5, pc}
 8009a3c:	200048c0 	.word	0x200048c0

08009a40 <_write_r>:
 8009a40:	b538      	push	{r3, r4, r5, lr}
 8009a42:	4d07      	ldr	r5, [pc, #28]	@ (8009a60 <_write_r+0x20>)
 8009a44:	4604      	mov	r4, r0
 8009a46:	4608      	mov	r0, r1
 8009a48:	4611      	mov	r1, r2
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	602a      	str	r2, [r5, #0]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	f7f9 fb86 	bl	8003160 <_write>
 8009a54:	1c43      	adds	r3, r0, #1
 8009a56:	d102      	bne.n	8009a5e <_write_r+0x1e>
 8009a58:	682b      	ldr	r3, [r5, #0]
 8009a5a:	b103      	cbz	r3, 8009a5e <_write_r+0x1e>
 8009a5c:	6023      	str	r3, [r4, #0]
 8009a5e:	bd38      	pop	{r3, r4, r5, pc}
 8009a60:	200048c0 	.word	0x200048c0

08009a64 <__errno>:
 8009a64:	4b01      	ldr	r3, [pc, #4]	@ (8009a6c <__errno+0x8>)
 8009a66:	6818      	ldr	r0, [r3, #0]
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	20000044 	.word	0x20000044

08009a70 <__libc_init_array>:
 8009a70:	b570      	push	{r4, r5, r6, lr}
 8009a72:	4d0d      	ldr	r5, [pc, #52]	@ (8009aa8 <__libc_init_array+0x38>)
 8009a74:	4c0d      	ldr	r4, [pc, #52]	@ (8009aac <__libc_init_array+0x3c>)
 8009a76:	1b64      	subs	r4, r4, r5
 8009a78:	10a4      	asrs	r4, r4, #2
 8009a7a:	2600      	movs	r6, #0
 8009a7c:	42a6      	cmp	r6, r4
 8009a7e:	d109      	bne.n	8009a94 <__libc_init_array+0x24>
 8009a80:	4d0b      	ldr	r5, [pc, #44]	@ (8009ab0 <__libc_init_array+0x40>)
 8009a82:	4c0c      	ldr	r4, [pc, #48]	@ (8009ab4 <__libc_init_array+0x44>)
 8009a84:	f003 fae2 	bl	800d04c <_init>
 8009a88:	1b64      	subs	r4, r4, r5
 8009a8a:	10a4      	asrs	r4, r4, #2
 8009a8c:	2600      	movs	r6, #0
 8009a8e:	42a6      	cmp	r6, r4
 8009a90:	d105      	bne.n	8009a9e <__libc_init_array+0x2e>
 8009a92:	bd70      	pop	{r4, r5, r6, pc}
 8009a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a98:	4798      	blx	r3
 8009a9a:	3601      	adds	r6, #1
 8009a9c:	e7ee      	b.n	8009a7c <__libc_init_array+0xc>
 8009a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aa2:	4798      	blx	r3
 8009aa4:	3601      	adds	r6, #1
 8009aa6:	e7f2      	b.n	8009a8e <__libc_init_array+0x1e>
 8009aa8:	0800d73c 	.word	0x0800d73c
 8009aac:	0800d73c 	.word	0x0800d73c
 8009ab0:	0800d73c 	.word	0x0800d73c
 8009ab4:	0800d740 	.word	0x0800d740

08009ab8 <__retarget_lock_init_recursive>:
 8009ab8:	4770      	bx	lr

08009aba <__retarget_lock_acquire_recursive>:
 8009aba:	4770      	bx	lr

08009abc <__retarget_lock_release_recursive>:
 8009abc:	4770      	bx	lr

08009abe <memcpy>:
 8009abe:	440a      	add	r2, r1
 8009ac0:	4291      	cmp	r1, r2
 8009ac2:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ac6:	d100      	bne.n	8009aca <memcpy+0xc>
 8009ac8:	4770      	bx	lr
 8009aca:	b510      	push	{r4, lr}
 8009acc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ad0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ad4:	4291      	cmp	r1, r2
 8009ad6:	d1f9      	bne.n	8009acc <memcpy+0xe>
 8009ad8:	bd10      	pop	{r4, pc}
	...

08009adc <nanf>:
 8009adc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009ae4 <nanf+0x8>
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	7fc00000 	.word	0x7fc00000

08009ae8 <quorem>:
 8009ae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aec:	6903      	ldr	r3, [r0, #16]
 8009aee:	690c      	ldr	r4, [r1, #16]
 8009af0:	42a3      	cmp	r3, r4
 8009af2:	4607      	mov	r7, r0
 8009af4:	db7e      	blt.n	8009bf4 <quorem+0x10c>
 8009af6:	3c01      	subs	r4, #1
 8009af8:	f101 0814 	add.w	r8, r1, #20
 8009afc:	00a3      	lsls	r3, r4, #2
 8009afe:	f100 0514 	add.w	r5, r0, #20
 8009b02:	9300      	str	r3, [sp, #0]
 8009b04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b08:	9301      	str	r3, [sp, #4]
 8009b0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b12:	3301      	adds	r3, #1
 8009b14:	429a      	cmp	r2, r3
 8009b16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b1e:	d32e      	bcc.n	8009b7e <quorem+0x96>
 8009b20:	f04f 0a00 	mov.w	sl, #0
 8009b24:	46c4      	mov	ip, r8
 8009b26:	46ae      	mov	lr, r5
 8009b28:	46d3      	mov	fp, sl
 8009b2a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009b2e:	b298      	uxth	r0, r3
 8009b30:	fb06 a000 	mla	r0, r6, r0, sl
 8009b34:	0c02      	lsrs	r2, r0, #16
 8009b36:	0c1b      	lsrs	r3, r3, #16
 8009b38:	fb06 2303 	mla	r3, r6, r3, r2
 8009b3c:	f8de 2000 	ldr.w	r2, [lr]
 8009b40:	b280      	uxth	r0, r0
 8009b42:	b292      	uxth	r2, r2
 8009b44:	1a12      	subs	r2, r2, r0
 8009b46:	445a      	add	r2, fp
 8009b48:	f8de 0000 	ldr.w	r0, [lr]
 8009b4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009b56:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009b5a:	b292      	uxth	r2, r2
 8009b5c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009b60:	45e1      	cmp	r9, ip
 8009b62:	f84e 2b04 	str.w	r2, [lr], #4
 8009b66:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009b6a:	d2de      	bcs.n	8009b2a <quorem+0x42>
 8009b6c:	9b00      	ldr	r3, [sp, #0]
 8009b6e:	58eb      	ldr	r3, [r5, r3]
 8009b70:	b92b      	cbnz	r3, 8009b7e <quorem+0x96>
 8009b72:	9b01      	ldr	r3, [sp, #4]
 8009b74:	3b04      	subs	r3, #4
 8009b76:	429d      	cmp	r5, r3
 8009b78:	461a      	mov	r2, r3
 8009b7a:	d32f      	bcc.n	8009bdc <quorem+0xf4>
 8009b7c:	613c      	str	r4, [r7, #16]
 8009b7e:	4638      	mov	r0, r7
 8009b80:	f001 f9c6 	bl	800af10 <__mcmp>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	db25      	blt.n	8009bd4 <quorem+0xec>
 8009b88:	4629      	mov	r1, r5
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009b90:	f8d1 c000 	ldr.w	ip, [r1]
 8009b94:	fa1f fe82 	uxth.w	lr, r2
 8009b98:	fa1f f38c 	uxth.w	r3, ip
 8009b9c:	eba3 030e 	sub.w	r3, r3, lr
 8009ba0:	4403      	add	r3, r0
 8009ba2:	0c12      	lsrs	r2, r2, #16
 8009ba4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009ba8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bb2:	45c1      	cmp	r9, r8
 8009bb4:	f841 3b04 	str.w	r3, [r1], #4
 8009bb8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009bbc:	d2e6      	bcs.n	8009b8c <quorem+0xa4>
 8009bbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009bc6:	b922      	cbnz	r2, 8009bd2 <quorem+0xea>
 8009bc8:	3b04      	subs	r3, #4
 8009bca:	429d      	cmp	r5, r3
 8009bcc:	461a      	mov	r2, r3
 8009bce:	d30b      	bcc.n	8009be8 <quorem+0x100>
 8009bd0:	613c      	str	r4, [r7, #16]
 8009bd2:	3601      	adds	r6, #1
 8009bd4:	4630      	mov	r0, r6
 8009bd6:	b003      	add	sp, #12
 8009bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bdc:	6812      	ldr	r2, [r2, #0]
 8009bde:	3b04      	subs	r3, #4
 8009be0:	2a00      	cmp	r2, #0
 8009be2:	d1cb      	bne.n	8009b7c <quorem+0x94>
 8009be4:	3c01      	subs	r4, #1
 8009be6:	e7c6      	b.n	8009b76 <quorem+0x8e>
 8009be8:	6812      	ldr	r2, [r2, #0]
 8009bea:	3b04      	subs	r3, #4
 8009bec:	2a00      	cmp	r2, #0
 8009bee:	d1ef      	bne.n	8009bd0 <quorem+0xe8>
 8009bf0:	3c01      	subs	r4, #1
 8009bf2:	e7ea      	b.n	8009bca <quorem+0xe2>
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	e7ee      	b.n	8009bd6 <quorem+0xee>

08009bf8 <_dtoa_r>:
 8009bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfc:	69c7      	ldr	r7, [r0, #28]
 8009bfe:	b097      	sub	sp, #92	@ 0x5c
 8009c00:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009c04:	ec55 4b10 	vmov	r4, r5, d0
 8009c08:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009c0a:	9107      	str	r1, [sp, #28]
 8009c0c:	4681      	mov	r9, r0
 8009c0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009c10:	9311      	str	r3, [sp, #68]	@ 0x44
 8009c12:	b97f      	cbnz	r7, 8009c34 <_dtoa_r+0x3c>
 8009c14:	2010      	movs	r0, #16
 8009c16:	f000 fe09 	bl	800a82c <malloc>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009c20:	b920      	cbnz	r0, 8009c2c <_dtoa_r+0x34>
 8009c22:	4ba9      	ldr	r3, [pc, #676]	@ (8009ec8 <_dtoa_r+0x2d0>)
 8009c24:	21ef      	movs	r1, #239	@ 0xef
 8009c26:	48a9      	ldr	r0, [pc, #676]	@ (8009ecc <_dtoa_r+0x2d4>)
 8009c28:	f002 fdf2 	bl	800c810 <__assert_func>
 8009c2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009c30:	6007      	str	r7, [r0, #0]
 8009c32:	60c7      	str	r7, [r0, #12]
 8009c34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009c38:	6819      	ldr	r1, [r3, #0]
 8009c3a:	b159      	cbz	r1, 8009c54 <_dtoa_r+0x5c>
 8009c3c:	685a      	ldr	r2, [r3, #4]
 8009c3e:	604a      	str	r2, [r1, #4]
 8009c40:	2301      	movs	r3, #1
 8009c42:	4093      	lsls	r3, r2
 8009c44:	608b      	str	r3, [r1, #8]
 8009c46:	4648      	mov	r0, r9
 8009c48:	f000 fee6 	bl	800aa18 <_Bfree>
 8009c4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009c50:	2200      	movs	r2, #0
 8009c52:	601a      	str	r2, [r3, #0]
 8009c54:	1e2b      	subs	r3, r5, #0
 8009c56:	bfb9      	ittee	lt
 8009c58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009c5c:	9305      	strlt	r3, [sp, #20]
 8009c5e:	2300      	movge	r3, #0
 8009c60:	6033      	strge	r3, [r6, #0]
 8009c62:	9f05      	ldr	r7, [sp, #20]
 8009c64:	4b9a      	ldr	r3, [pc, #616]	@ (8009ed0 <_dtoa_r+0x2d8>)
 8009c66:	bfbc      	itt	lt
 8009c68:	2201      	movlt	r2, #1
 8009c6a:	6032      	strlt	r2, [r6, #0]
 8009c6c:	43bb      	bics	r3, r7
 8009c6e:	d112      	bne.n	8009c96 <_dtoa_r+0x9e>
 8009c70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009c72:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009c76:	6013      	str	r3, [r2, #0]
 8009c78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c7c:	4323      	orrs	r3, r4
 8009c7e:	f000 855a 	beq.w	800a736 <_dtoa_r+0xb3e>
 8009c82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009c84:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009ee4 <_dtoa_r+0x2ec>
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f000 855c 	beq.w	800a746 <_dtoa_r+0xb4e>
 8009c8e:	f10a 0303 	add.w	r3, sl, #3
 8009c92:	f000 bd56 	b.w	800a742 <_dtoa_r+0xb4a>
 8009c96:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	ec51 0b17 	vmov	r0, r1, d7
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009ca6:	f7f6 ff17 	bl	8000ad8 <__aeabi_dcmpeq>
 8009caa:	4680      	mov	r8, r0
 8009cac:	b158      	cbz	r0, 8009cc6 <_dtoa_r+0xce>
 8009cae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	6013      	str	r3, [r2, #0]
 8009cb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009cb6:	b113      	cbz	r3, 8009cbe <_dtoa_r+0xc6>
 8009cb8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009cba:	4b86      	ldr	r3, [pc, #536]	@ (8009ed4 <_dtoa_r+0x2dc>)
 8009cbc:	6013      	str	r3, [r2, #0]
 8009cbe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009ee8 <_dtoa_r+0x2f0>
 8009cc2:	f000 bd40 	b.w	800a746 <_dtoa_r+0xb4e>
 8009cc6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009cca:	aa14      	add	r2, sp, #80	@ 0x50
 8009ccc:	a915      	add	r1, sp, #84	@ 0x54
 8009cce:	4648      	mov	r0, r9
 8009cd0:	f001 fa3e 	bl	800b150 <__d2b>
 8009cd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009cd8:	9002      	str	r0, [sp, #8]
 8009cda:	2e00      	cmp	r6, #0
 8009cdc:	d078      	beq.n	8009dd0 <_dtoa_r+0x1d8>
 8009cde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ce0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ce8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009cec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009cf0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009cf4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	4b76      	ldr	r3, [pc, #472]	@ (8009ed8 <_dtoa_r+0x2e0>)
 8009cfe:	f7f6 facb 	bl	8000298 <__aeabi_dsub>
 8009d02:	a36b      	add	r3, pc, #428	@ (adr r3, 8009eb0 <_dtoa_r+0x2b8>)
 8009d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d08:	f7f6 fc7e 	bl	8000608 <__aeabi_dmul>
 8009d0c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009eb8 <_dtoa_r+0x2c0>)
 8009d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d12:	f7f6 fac3 	bl	800029c <__adddf3>
 8009d16:	4604      	mov	r4, r0
 8009d18:	4630      	mov	r0, r6
 8009d1a:	460d      	mov	r5, r1
 8009d1c:	f7f6 fc0a 	bl	8000534 <__aeabi_i2d>
 8009d20:	a367      	add	r3, pc, #412	@ (adr r3, 8009ec0 <_dtoa_r+0x2c8>)
 8009d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d26:	f7f6 fc6f 	bl	8000608 <__aeabi_dmul>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	4620      	mov	r0, r4
 8009d30:	4629      	mov	r1, r5
 8009d32:	f7f6 fab3 	bl	800029c <__adddf3>
 8009d36:	4604      	mov	r4, r0
 8009d38:	460d      	mov	r5, r1
 8009d3a:	f7f6 ff15 	bl	8000b68 <__aeabi_d2iz>
 8009d3e:	2200      	movs	r2, #0
 8009d40:	4607      	mov	r7, r0
 8009d42:	2300      	movs	r3, #0
 8009d44:	4620      	mov	r0, r4
 8009d46:	4629      	mov	r1, r5
 8009d48:	f7f6 fed0 	bl	8000aec <__aeabi_dcmplt>
 8009d4c:	b140      	cbz	r0, 8009d60 <_dtoa_r+0x168>
 8009d4e:	4638      	mov	r0, r7
 8009d50:	f7f6 fbf0 	bl	8000534 <__aeabi_i2d>
 8009d54:	4622      	mov	r2, r4
 8009d56:	462b      	mov	r3, r5
 8009d58:	f7f6 febe 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d5c:	b900      	cbnz	r0, 8009d60 <_dtoa_r+0x168>
 8009d5e:	3f01      	subs	r7, #1
 8009d60:	2f16      	cmp	r7, #22
 8009d62:	d852      	bhi.n	8009e0a <_dtoa_r+0x212>
 8009d64:	4b5d      	ldr	r3, [pc, #372]	@ (8009edc <_dtoa_r+0x2e4>)
 8009d66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009d72:	f7f6 febb 	bl	8000aec <__aeabi_dcmplt>
 8009d76:	2800      	cmp	r0, #0
 8009d78:	d049      	beq.n	8009e0e <_dtoa_r+0x216>
 8009d7a:	3f01      	subs	r7, #1
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d80:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d82:	1b9b      	subs	r3, r3, r6
 8009d84:	1e5a      	subs	r2, r3, #1
 8009d86:	bf45      	ittet	mi
 8009d88:	f1c3 0301 	rsbmi	r3, r3, #1
 8009d8c:	9300      	strmi	r3, [sp, #0]
 8009d8e:	2300      	movpl	r3, #0
 8009d90:	2300      	movmi	r3, #0
 8009d92:	9206      	str	r2, [sp, #24]
 8009d94:	bf54      	ite	pl
 8009d96:	9300      	strpl	r3, [sp, #0]
 8009d98:	9306      	strmi	r3, [sp, #24]
 8009d9a:	2f00      	cmp	r7, #0
 8009d9c:	db39      	blt.n	8009e12 <_dtoa_r+0x21a>
 8009d9e:	9b06      	ldr	r3, [sp, #24]
 8009da0:	970d      	str	r7, [sp, #52]	@ 0x34
 8009da2:	443b      	add	r3, r7
 8009da4:	9306      	str	r3, [sp, #24]
 8009da6:	2300      	movs	r3, #0
 8009da8:	9308      	str	r3, [sp, #32]
 8009daa:	9b07      	ldr	r3, [sp, #28]
 8009dac:	2b09      	cmp	r3, #9
 8009dae:	d863      	bhi.n	8009e78 <_dtoa_r+0x280>
 8009db0:	2b05      	cmp	r3, #5
 8009db2:	bfc4      	itt	gt
 8009db4:	3b04      	subgt	r3, #4
 8009db6:	9307      	strgt	r3, [sp, #28]
 8009db8:	9b07      	ldr	r3, [sp, #28]
 8009dba:	f1a3 0302 	sub.w	r3, r3, #2
 8009dbe:	bfcc      	ite	gt
 8009dc0:	2400      	movgt	r4, #0
 8009dc2:	2401      	movle	r4, #1
 8009dc4:	2b03      	cmp	r3, #3
 8009dc6:	d863      	bhi.n	8009e90 <_dtoa_r+0x298>
 8009dc8:	e8df f003 	tbb	[pc, r3]
 8009dcc:	2b375452 	.word	0x2b375452
 8009dd0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009dd4:	441e      	add	r6, r3
 8009dd6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009dda:	2b20      	cmp	r3, #32
 8009ddc:	bfc1      	itttt	gt
 8009dde:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009de2:	409f      	lslgt	r7, r3
 8009de4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009de8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009dec:	bfd6      	itet	le
 8009dee:	f1c3 0320 	rsble	r3, r3, #32
 8009df2:	ea47 0003 	orrgt.w	r0, r7, r3
 8009df6:	fa04 f003 	lslle.w	r0, r4, r3
 8009dfa:	f7f6 fb8b 	bl	8000514 <__aeabi_ui2d>
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009e04:	3e01      	subs	r6, #1
 8009e06:	9212      	str	r2, [sp, #72]	@ 0x48
 8009e08:	e776      	b.n	8009cf8 <_dtoa_r+0x100>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e7b7      	b.n	8009d7e <_dtoa_r+0x186>
 8009e0e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009e10:	e7b6      	b.n	8009d80 <_dtoa_r+0x188>
 8009e12:	9b00      	ldr	r3, [sp, #0]
 8009e14:	1bdb      	subs	r3, r3, r7
 8009e16:	9300      	str	r3, [sp, #0]
 8009e18:	427b      	negs	r3, r7
 8009e1a:	9308      	str	r3, [sp, #32]
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009e20:	e7c3      	b.n	8009daa <_dtoa_r+0x1b2>
 8009e22:	2301      	movs	r3, #1
 8009e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e28:	eb07 0b03 	add.w	fp, r7, r3
 8009e2c:	f10b 0301 	add.w	r3, fp, #1
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	9303      	str	r3, [sp, #12]
 8009e34:	bfb8      	it	lt
 8009e36:	2301      	movlt	r3, #1
 8009e38:	e006      	b.n	8009e48 <_dtoa_r+0x250>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	dd28      	ble.n	8009e96 <_dtoa_r+0x29e>
 8009e44:	469b      	mov	fp, r3
 8009e46:	9303      	str	r3, [sp, #12]
 8009e48:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	2204      	movs	r2, #4
 8009e50:	f102 0514 	add.w	r5, r2, #20
 8009e54:	429d      	cmp	r5, r3
 8009e56:	d926      	bls.n	8009ea6 <_dtoa_r+0x2ae>
 8009e58:	6041      	str	r1, [r0, #4]
 8009e5a:	4648      	mov	r0, r9
 8009e5c:	f000 fd9c 	bl	800a998 <_Balloc>
 8009e60:	4682      	mov	sl, r0
 8009e62:	2800      	cmp	r0, #0
 8009e64:	d142      	bne.n	8009eec <_dtoa_r+0x2f4>
 8009e66:	4b1e      	ldr	r3, [pc, #120]	@ (8009ee0 <_dtoa_r+0x2e8>)
 8009e68:	4602      	mov	r2, r0
 8009e6a:	f240 11af 	movw	r1, #431	@ 0x1af
 8009e6e:	e6da      	b.n	8009c26 <_dtoa_r+0x2e>
 8009e70:	2300      	movs	r3, #0
 8009e72:	e7e3      	b.n	8009e3c <_dtoa_r+0x244>
 8009e74:	2300      	movs	r3, #0
 8009e76:	e7d5      	b.n	8009e24 <_dtoa_r+0x22c>
 8009e78:	2401      	movs	r4, #1
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	9307      	str	r3, [sp, #28]
 8009e7e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009e80:	f04f 3bff 	mov.w	fp, #4294967295
 8009e84:	2200      	movs	r2, #0
 8009e86:	f8cd b00c 	str.w	fp, [sp, #12]
 8009e8a:	2312      	movs	r3, #18
 8009e8c:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e8e:	e7db      	b.n	8009e48 <_dtoa_r+0x250>
 8009e90:	2301      	movs	r3, #1
 8009e92:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e94:	e7f4      	b.n	8009e80 <_dtoa_r+0x288>
 8009e96:	f04f 0b01 	mov.w	fp, #1
 8009e9a:	f8cd b00c 	str.w	fp, [sp, #12]
 8009e9e:	465b      	mov	r3, fp
 8009ea0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009ea4:	e7d0      	b.n	8009e48 <_dtoa_r+0x250>
 8009ea6:	3101      	adds	r1, #1
 8009ea8:	0052      	lsls	r2, r2, #1
 8009eaa:	e7d1      	b.n	8009e50 <_dtoa_r+0x258>
 8009eac:	f3af 8000 	nop.w
 8009eb0:	636f4361 	.word	0x636f4361
 8009eb4:	3fd287a7 	.word	0x3fd287a7
 8009eb8:	8b60c8b3 	.word	0x8b60c8b3
 8009ebc:	3fc68a28 	.word	0x3fc68a28
 8009ec0:	509f79fb 	.word	0x509f79fb
 8009ec4:	3fd34413 	.word	0x3fd34413
 8009ec8:	0800d352 	.word	0x0800d352
 8009ecc:	0800d369 	.word	0x0800d369
 8009ed0:	7ff00000 	.word	0x7ff00000
 8009ed4:	0800d31d 	.word	0x0800d31d
 8009ed8:	3ff80000 	.word	0x3ff80000
 8009edc:	0800d518 	.word	0x0800d518
 8009ee0:	0800d3c1 	.word	0x0800d3c1
 8009ee4:	0800d34e 	.word	0x0800d34e
 8009ee8:	0800d31c 	.word	0x0800d31c
 8009eec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009ef0:	6018      	str	r0, [r3, #0]
 8009ef2:	9b03      	ldr	r3, [sp, #12]
 8009ef4:	2b0e      	cmp	r3, #14
 8009ef6:	f200 80a1 	bhi.w	800a03c <_dtoa_r+0x444>
 8009efa:	2c00      	cmp	r4, #0
 8009efc:	f000 809e 	beq.w	800a03c <_dtoa_r+0x444>
 8009f00:	2f00      	cmp	r7, #0
 8009f02:	dd33      	ble.n	8009f6c <_dtoa_r+0x374>
 8009f04:	4b9c      	ldr	r3, [pc, #624]	@ (800a178 <_dtoa_r+0x580>)
 8009f06:	f007 020f 	and.w	r2, r7, #15
 8009f0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f0e:	ed93 7b00 	vldr	d7, [r3]
 8009f12:	05f8      	lsls	r0, r7, #23
 8009f14:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009f18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009f1c:	d516      	bpl.n	8009f4c <_dtoa_r+0x354>
 8009f1e:	4b97      	ldr	r3, [pc, #604]	@ (800a17c <_dtoa_r+0x584>)
 8009f20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009f24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f28:	f7f6 fc98 	bl	800085c <__aeabi_ddiv>
 8009f2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f30:	f004 040f 	and.w	r4, r4, #15
 8009f34:	2603      	movs	r6, #3
 8009f36:	4d91      	ldr	r5, [pc, #580]	@ (800a17c <_dtoa_r+0x584>)
 8009f38:	b954      	cbnz	r4, 8009f50 <_dtoa_r+0x358>
 8009f3a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009f3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f42:	f7f6 fc8b 	bl	800085c <__aeabi_ddiv>
 8009f46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f4a:	e028      	b.n	8009f9e <_dtoa_r+0x3a6>
 8009f4c:	2602      	movs	r6, #2
 8009f4e:	e7f2      	b.n	8009f36 <_dtoa_r+0x33e>
 8009f50:	07e1      	lsls	r1, r4, #31
 8009f52:	d508      	bpl.n	8009f66 <_dtoa_r+0x36e>
 8009f54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009f58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f5c:	f7f6 fb54 	bl	8000608 <__aeabi_dmul>
 8009f60:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009f64:	3601      	adds	r6, #1
 8009f66:	1064      	asrs	r4, r4, #1
 8009f68:	3508      	adds	r5, #8
 8009f6a:	e7e5      	b.n	8009f38 <_dtoa_r+0x340>
 8009f6c:	f000 80af 	beq.w	800a0ce <_dtoa_r+0x4d6>
 8009f70:	427c      	negs	r4, r7
 8009f72:	4b81      	ldr	r3, [pc, #516]	@ (800a178 <_dtoa_r+0x580>)
 8009f74:	4d81      	ldr	r5, [pc, #516]	@ (800a17c <_dtoa_r+0x584>)
 8009f76:	f004 020f 	and.w	r2, r4, #15
 8009f7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009f86:	f7f6 fb3f 	bl	8000608 <__aeabi_dmul>
 8009f8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f8e:	1124      	asrs	r4, r4, #4
 8009f90:	2300      	movs	r3, #0
 8009f92:	2602      	movs	r6, #2
 8009f94:	2c00      	cmp	r4, #0
 8009f96:	f040 808f 	bne.w	800a0b8 <_dtoa_r+0x4c0>
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1d3      	bne.n	8009f46 <_dtoa_r+0x34e>
 8009f9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009fa0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f000 8094 	beq.w	800a0d2 <_dtoa_r+0x4da>
 8009faa:	4b75      	ldr	r3, [pc, #468]	@ (800a180 <_dtoa_r+0x588>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	4620      	mov	r0, r4
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	f7f6 fd9b 	bl	8000aec <__aeabi_dcmplt>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	f000 808b 	beq.w	800a0d2 <_dtoa_r+0x4da>
 8009fbc:	9b03      	ldr	r3, [sp, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	f000 8087 	beq.w	800a0d2 <_dtoa_r+0x4da>
 8009fc4:	f1bb 0f00 	cmp.w	fp, #0
 8009fc8:	dd34      	ble.n	800a034 <_dtoa_r+0x43c>
 8009fca:	4620      	mov	r0, r4
 8009fcc:	4b6d      	ldr	r3, [pc, #436]	@ (800a184 <_dtoa_r+0x58c>)
 8009fce:	2200      	movs	r2, #0
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	f7f6 fb19 	bl	8000608 <__aeabi_dmul>
 8009fd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fda:	f107 38ff 	add.w	r8, r7, #4294967295
 8009fde:	3601      	adds	r6, #1
 8009fe0:	465c      	mov	r4, fp
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f7f6 faa6 	bl	8000534 <__aeabi_i2d>
 8009fe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fec:	f7f6 fb0c 	bl	8000608 <__aeabi_dmul>
 8009ff0:	4b65      	ldr	r3, [pc, #404]	@ (800a188 <_dtoa_r+0x590>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f7f6 f952 	bl	800029c <__adddf3>
 8009ff8:	4605      	mov	r5, r0
 8009ffa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009ffe:	2c00      	cmp	r4, #0
 800a000:	d16a      	bne.n	800a0d8 <_dtoa_r+0x4e0>
 800a002:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a006:	4b61      	ldr	r3, [pc, #388]	@ (800a18c <_dtoa_r+0x594>)
 800a008:	2200      	movs	r2, #0
 800a00a:	f7f6 f945 	bl	8000298 <__aeabi_dsub>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a016:	462a      	mov	r2, r5
 800a018:	4633      	mov	r3, r6
 800a01a:	f7f6 fd85 	bl	8000b28 <__aeabi_dcmpgt>
 800a01e:	2800      	cmp	r0, #0
 800a020:	f040 8298 	bne.w	800a554 <_dtoa_r+0x95c>
 800a024:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a028:	462a      	mov	r2, r5
 800a02a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a02e:	f7f6 fd5d 	bl	8000aec <__aeabi_dcmplt>
 800a032:	bb38      	cbnz	r0, 800a084 <_dtoa_r+0x48c>
 800a034:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a038:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a03c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a03e:	2b00      	cmp	r3, #0
 800a040:	f2c0 8157 	blt.w	800a2f2 <_dtoa_r+0x6fa>
 800a044:	2f0e      	cmp	r7, #14
 800a046:	f300 8154 	bgt.w	800a2f2 <_dtoa_r+0x6fa>
 800a04a:	4b4b      	ldr	r3, [pc, #300]	@ (800a178 <_dtoa_r+0x580>)
 800a04c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a050:	ed93 7b00 	vldr	d7, [r3]
 800a054:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a056:	2b00      	cmp	r3, #0
 800a058:	ed8d 7b00 	vstr	d7, [sp]
 800a05c:	f280 80e5 	bge.w	800a22a <_dtoa_r+0x632>
 800a060:	9b03      	ldr	r3, [sp, #12]
 800a062:	2b00      	cmp	r3, #0
 800a064:	f300 80e1 	bgt.w	800a22a <_dtoa_r+0x632>
 800a068:	d10c      	bne.n	800a084 <_dtoa_r+0x48c>
 800a06a:	4b48      	ldr	r3, [pc, #288]	@ (800a18c <_dtoa_r+0x594>)
 800a06c:	2200      	movs	r2, #0
 800a06e:	ec51 0b17 	vmov	r0, r1, d7
 800a072:	f7f6 fac9 	bl	8000608 <__aeabi_dmul>
 800a076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a07a:	f7f6 fd4b 	bl	8000b14 <__aeabi_dcmpge>
 800a07e:	2800      	cmp	r0, #0
 800a080:	f000 8266 	beq.w	800a550 <_dtoa_r+0x958>
 800a084:	2400      	movs	r4, #0
 800a086:	4625      	mov	r5, r4
 800a088:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a08a:	4656      	mov	r6, sl
 800a08c:	ea6f 0803 	mvn.w	r8, r3
 800a090:	2700      	movs	r7, #0
 800a092:	4621      	mov	r1, r4
 800a094:	4648      	mov	r0, r9
 800a096:	f000 fcbf 	bl	800aa18 <_Bfree>
 800a09a:	2d00      	cmp	r5, #0
 800a09c:	f000 80bd 	beq.w	800a21a <_dtoa_r+0x622>
 800a0a0:	b12f      	cbz	r7, 800a0ae <_dtoa_r+0x4b6>
 800a0a2:	42af      	cmp	r7, r5
 800a0a4:	d003      	beq.n	800a0ae <_dtoa_r+0x4b6>
 800a0a6:	4639      	mov	r1, r7
 800a0a8:	4648      	mov	r0, r9
 800a0aa:	f000 fcb5 	bl	800aa18 <_Bfree>
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	4648      	mov	r0, r9
 800a0b2:	f000 fcb1 	bl	800aa18 <_Bfree>
 800a0b6:	e0b0      	b.n	800a21a <_dtoa_r+0x622>
 800a0b8:	07e2      	lsls	r2, r4, #31
 800a0ba:	d505      	bpl.n	800a0c8 <_dtoa_r+0x4d0>
 800a0bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a0c0:	f7f6 faa2 	bl	8000608 <__aeabi_dmul>
 800a0c4:	3601      	adds	r6, #1
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	1064      	asrs	r4, r4, #1
 800a0ca:	3508      	adds	r5, #8
 800a0cc:	e762      	b.n	8009f94 <_dtoa_r+0x39c>
 800a0ce:	2602      	movs	r6, #2
 800a0d0:	e765      	b.n	8009f9e <_dtoa_r+0x3a6>
 800a0d2:	9c03      	ldr	r4, [sp, #12]
 800a0d4:	46b8      	mov	r8, r7
 800a0d6:	e784      	b.n	8009fe2 <_dtoa_r+0x3ea>
 800a0d8:	4b27      	ldr	r3, [pc, #156]	@ (800a178 <_dtoa_r+0x580>)
 800a0da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a0e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a0e4:	4454      	add	r4, sl
 800a0e6:	2900      	cmp	r1, #0
 800a0e8:	d054      	beq.n	800a194 <_dtoa_r+0x59c>
 800a0ea:	4929      	ldr	r1, [pc, #164]	@ (800a190 <_dtoa_r+0x598>)
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	f7f6 fbb5 	bl	800085c <__aeabi_ddiv>
 800a0f2:	4633      	mov	r3, r6
 800a0f4:	462a      	mov	r2, r5
 800a0f6:	f7f6 f8cf 	bl	8000298 <__aeabi_dsub>
 800a0fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a0fe:	4656      	mov	r6, sl
 800a100:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a104:	f7f6 fd30 	bl	8000b68 <__aeabi_d2iz>
 800a108:	4605      	mov	r5, r0
 800a10a:	f7f6 fa13 	bl	8000534 <__aeabi_i2d>
 800a10e:	4602      	mov	r2, r0
 800a110:	460b      	mov	r3, r1
 800a112:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a116:	f7f6 f8bf 	bl	8000298 <__aeabi_dsub>
 800a11a:	3530      	adds	r5, #48	@ 0x30
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a124:	f806 5b01 	strb.w	r5, [r6], #1
 800a128:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a12c:	f7f6 fcde 	bl	8000aec <__aeabi_dcmplt>
 800a130:	2800      	cmp	r0, #0
 800a132:	d172      	bne.n	800a21a <_dtoa_r+0x622>
 800a134:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a138:	4911      	ldr	r1, [pc, #68]	@ (800a180 <_dtoa_r+0x588>)
 800a13a:	2000      	movs	r0, #0
 800a13c:	f7f6 f8ac 	bl	8000298 <__aeabi_dsub>
 800a140:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a144:	f7f6 fcd2 	bl	8000aec <__aeabi_dcmplt>
 800a148:	2800      	cmp	r0, #0
 800a14a:	f040 80b4 	bne.w	800a2b6 <_dtoa_r+0x6be>
 800a14e:	42a6      	cmp	r6, r4
 800a150:	f43f af70 	beq.w	800a034 <_dtoa_r+0x43c>
 800a154:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a158:	4b0a      	ldr	r3, [pc, #40]	@ (800a184 <_dtoa_r+0x58c>)
 800a15a:	2200      	movs	r2, #0
 800a15c:	f7f6 fa54 	bl	8000608 <__aeabi_dmul>
 800a160:	4b08      	ldr	r3, [pc, #32]	@ (800a184 <_dtoa_r+0x58c>)
 800a162:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a166:	2200      	movs	r2, #0
 800a168:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a16c:	f7f6 fa4c 	bl	8000608 <__aeabi_dmul>
 800a170:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a174:	e7c4      	b.n	800a100 <_dtoa_r+0x508>
 800a176:	bf00      	nop
 800a178:	0800d518 	.word	0x0800d518
 800a17c:	0800d4f0 	.word	0x0800d4f0
 800a180:	3ff00000 	.word	0x3ff00000
 800a184:	40240000 	.word	0x40240000
 800a188:	401c0000 	.word	0x401c0000
 800a18c:	40140000 	.word	0x40140000
 800a190:	3fe00000 	.word	0x3fe00000
 800a194:	4631      	mov	r1, r6
 800a196:	4628      	mov	r0, r5
 800a198:	f7f6 fa36 	bl	8000608 <__aeabi_dmul>
 800a19c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a1a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a1a2:	4656      	mov	r6, sl
 800a1a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1a8:	f7f6 fcde 	bl	8000b68 <__aeabi_d2iz>
 800a1ac:	4605      	mov	r5, r0
 800a1ae:	f7f6 f9c1 	bl	8000534 <__aeabi_i2d>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1ba:	f7f6 f86d 	bl	8000298 <__aeabi_dsub>
 800a1be:	3530      	adds	r5, #48	@ 0x30
 800a1c0:	f806 5b01 	strb.w	r5, [r6], #1
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	42a6      	cmp	r6, r4
 800a1ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a1ce:	f04f 0200 	mov.w	r2, #0
 800a1d2:	d124      	bne.n	800a21e <_dtoa_r+0x626>
 800a1d4:	4baf      	ldr	r3, [pc, #700]	@ (800a494 <_dtoa_r+0x89c>)
 800a1d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a1da:	f7f6 f85f 	bl	800029c <__adddf3>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1e6:	f7f6 fc9f 	bl	8000b28 <__aeabi_dcmpgt>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	d163      	bne.n	800a2b6 <_dtoa_r+0x6be>
 800a1ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a1f2:	49a8      	ldr	r1, [pc, #672]	@ (800a494 <_dtoa_r+0x89c>)
 800a1f4:	2000      	movs	r0, #0
 800a1f6:	f7f6 f84f 	bl	8000298 <__aeabi_dsub>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a202:	f7f6 fc73 	bl	8000aec <__aeabi_dcmplt>
 800a206:	2800      	cmp	r0, #0
 800a208:	f43f af14 	beq.w	800a034 <_dtoa_r+0x43c>
 800a20c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a20e:	1e73      	subs	r3, r6, #1
 800a210:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a212:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a216:	2b30      	cmp	r3, #48	@ 0x30
 800a218:	d0f8      	beq.n	800a20c <_dtoa_r+0x614>
 800a21a:	4647      	mov	r7, r8
 800a21c:	e03b      	b.n	800a296 <_dtoa_r+0x69e>
 800a21e:	4b9e      	ldr	r3, [pc, #632]	@ (800a498 <_dtoa_r+0x8a0>)
 800a220:	f7f6 f9f2 	bl	8000608 <__aeabi_dmul>
 800a224:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a228:	e7bc      	b.n	800a1a4 <_dtoa_r+0x5ac>
 800a22a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a22e:	4656      	mov	r6, sl
 800a230:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a234:	4620      	mov	r0, r4
 800a236:	4629      	mov	r1, r5
 800a238:	f7f6 fb10 	bl	800085c <__aeabi_ddiv>
 800a23c:	f7f6 fc94 	bl	8000b68 <__aeabi_d2iz>
 800a240:	4680      	mov	r8, r0
 800a242:	f7f6 f977 	bl	8000534 <__aeabi_i2d>
 800a246:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a24a:	f7f6 f9dd 	bl	8000608 <__aeabi_dmul>
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	4620      	mov	r0, r4
 800a254:	4629      	mov	r1, r5
 800a256:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a25a:	f7f6 f81d 	bl	8000298 <__aeabi_dsub>
 800a25e:	f806 4b01 	strb.w	r4, [r6], #1
 800a262:	9d03      	ldr	r5, [sp, #12]
 800a264:	eba6 040a 	sub.w	r4, r6, sl
 800a268:	42a5      	cmp	r5, r4
 800a26a:	4602      	mov	r2, r0
 800a26c:	460b      	mov	r3, r1
 800a26e:	d133      	bne.n	800a2d8 <_dtoa_r+0x6e0>
 800a270:	f7f6 f814 	bl	800029c <__adddf3>
 800a274:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a278:	4604      	mov	r4, r0
 800a27a:	460d      	mov	r5, r1
 800a27c:	f7f6 fc54 	bl	8000b28 <__aeabi_dcmpgt>
 800a280:	b9c0      	cbnz	r0, 800a2b4 <_dtoa_r+0x6bc>
 800a282:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a286:	4620      	mov	r0, r4
 800a288:	4629      	mov	r1, r5
 800a28a:	f7f6 fc25 	bl	8000ad8 <__aeabi_dcmpeq>
 800a28e:	b110      	cbz	r0, 800a296 <_dtoa_r+0x69e>
 800a290:	f018 0f01 	tst.w	r8, #1
 800a294:	d10e      	bne.n	800a2b4 <_dtoa_r+0x6bc>
 800a296:	9902      	ldr	r1, [sp, #8]
 800a298:	4648      	mov	r0, r9
 800a29a:	f000 fbbd 	bl	800aa18 <_Bfree>
 800a29e:	2300      	movs	r3, #0
 800a2a0:	7033      	strb	r3, [r6, #0]
 800a2a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a2a4:	3701      	adds	r7, #1
 800a2a6:	601f      	str	r7, [r3, #0]
 800a2a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	f000 824b 	beq.w	800a746 <_dtoa_r+0xb4e>
 800a2b0:	601e      	str	r6, [r3, #0]
 800a2b2:	e248      	b.n	800a746 <_dtoa_r+0xb4e>
 800a2b4:	46b8      	mov	r8, r7
 800a2b6:	4633      	mov	r3, r6
 800a2b8:	461e      	mov	r6, r3
 800a2ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2be:	2a39      	cmp	r2, #57	@ 0x39
 800a2c0:	d106      	bne.n	800a2d0 <_dtoa_r+0x6d8>
 800a2c2:	459a      	cmp	sl, r3
 800a2c4:	d1f8      	bne.n	800a2b8 <_dtoa_r+0x6c0>
 800a2c6:	2230      	movs	r2, #48	@ 0x30
 800a2c8:	f108 0801 	add.w	r8, r8, #1
 800a2cc:	f88a 2000 	strb.w	r2, [sl]
 800a2d0:	781a      	ldrb	r2, [r3, #0]
 800a2d2:	3201      	adds	r2, #1
 800a2d4:	701a      	strb	r2, [r3, #0]
 800a2d6:	e7a0      	b.n	800a21a <_dtoa_r+0x622>
 800a2d8:	4b6f      	ldr	r3, [pc, #444]	@ (800a498 <_dtoa_r+0x8a0>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f7f6 f994 	bl	8000608 <__aeabi_dmul>
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	460d      	mov	r5, r1
 800a2e8:	f7f6 fbf6 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d09f      	beq.n	800a230 <_dtoa_r+0x638>
 800a2f0:	e7d1      	b.n	800a296 <_dtoa_r+0x69e>
 800a2f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2f4:	2a00      	cmp	r2, #0
 800a2f6:	f000 80ea 	beq.w	800a4ce <_dtoa_r+0x8d6>
 800a2fa:	9a07      	ldr	r2, [sp, #28]
 800a2fc:	2a01      	cmp	r2, #1
 800a2fe:	f300 80cd 	bgt.w	800a49c <_dtoa_r+0x8a4>
 800a302:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a304:	2a00      	cmp	r2, #0
 800a306:	f000 80c1 	beq.w	800a48c <_dtoa_r+0x894>
 800a30a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a30e:	9c08      	ldr	r4, [sp, #32]
 800a310:	9e00      	ldr	r6, [sp, #0]
 800a312:	9a00      	ldr	r2, [sp, #0]
 800a314:	441a      	add	r2, r3
 800a316:	9200      	str	r2, [sp, #0]
 800a318:	9a06      	ldr	r2, [sp, #24]
 800a31a:	2101      	movs	r1, #1
 800a31c:	441a      	add	r2, r3
 800a31e:	4648      	mov	r0, r9
 800a320:	9206      	str	r2, [sp, #24]
 800a322:	f000 fc77 	bl	800ac14 <__i2b>
 800a326:	4605      	mov	r5, r0
 800a328:	b166      	cbz	r6, 800a344 <_dtoa_r+0x74c>
 800a32a:	9b06      	ldr	r3, [sp, #24]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	dd09      	ble.n	800a344 <_dtoa_r+0x74c>
 800a330:	42b3      	cmp	r3, r6
 800a332:	9a00      	ldr	r2, [sp, #0]
 800a334:	bfa8      	it	ge
 800a336:	4633      	movge	r3, r6
 800a338:	1ad2      	subs	r2, r2, r3
 800a33a:	9200      	str	r2, [sp, #0]
 800a33c:	9a06      	ldr	r2, [sp, #24]
 800a33e:	1af6      	subs	r6, r6, r3
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	9306      	str	r3, [sp, #24]
 800a344:	9b08      	ldr	r3, [sp, #32]
 800a346:	b30b      	cbz	r3, 800a38c <_dtoa_r+0x794>
 800a348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f000 80c6 	beq.w	800a4dc <_dtoa_r+0x8e4>
 800a350:	2c00      	cmp	r4, #0
 800a352:	f000 80c0 	beq.w	800a4d6 <_dtoa_r+0x8de>
 800a356:	4629      	mov	r1, r5
 800a358:	4622      	mov	r2, r4
 800a35a:	4648      	mov	r0, r9
 800a35c:	f000 fd12 	bl	800ad84 <__pow5mult>
 800a360:	9a02      	ldr	r2, [sp, #8]
 800a362:	4601      	mov	r1, r0
 800a364:	4605      	mov	r5, r0
 800a366:	4648      	mov	r0, r9
 800a368:	f000 fc6a 	bl	800ac40 <__multiply>
 800a36c:	9902      	ldr	r1, [sp, #8]
 800a36e:	4680      	mov	r8, r0
 800a370:	4648      	mov	r0, r9
 800a372:	f000 fb51 	bl	800aa18 <_Bfree>
 800a376:	9b08      	ldr	r3, [sp, #32]
 800a378:	1b1b      	subs	r3, r3, r4
 800a37a:	9308      	str	r3, [sp, #32]
 800a37c:	f000 80b1 	beq.w	800a4e2 <_dtoa_r+0x8ea>
 800a380:	9a08      	ldr	r2, [sp, #32]
 800a382:	4641      	mov	r1, r8
 800a384:	4648      	mov	r0, r9
 800a386:	f000 fcfd 	bl	800ad84 <__pow5mult>
 800a38a:	9002      	str	r0, [sp, #8]
 800a38c:	2101      	movs	r1, #1
 800a38e:	4648      	mov	r0, r9
 800a390:	f000 fc40 	bl	800ac14 <__i2b>
 800a394:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a396:	4604      	mov	r4, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f000 81d8 	beq.w	800a74e <_dtoa_r+0xb56>
 800a39e:	461a      	mov	r2, r3
 800a3a0:	4601      	mov	r1, r0
 800a3a2:	4648      	mov	r0, r9
 800a3a4:	f000 fcee 	bl	800ad84 <__pow5mult>
 800a3a8:	9b07      	ldr	r3, [sp, #28]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	f300 809f 	bgt.w	800a4f0 <_dtoa_r+0x8f8>
 800a3b2:	9b04      	ldr	r3, [sp, #16]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f040 8097 	bne.w	800a4e8 <_dtoa_r+0x8f0>
 800a3ba:	9b05      	ldr	r3, [sp, #20]
 800a3bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	f040 8093 	bne.w	800a4ec <_dtoa_r+0x8f4>
 800a3c6:	9b05      	ldr	r3, [sp, #20]
 800a3c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a3cc:	0d1b      	lsrs	r3, r3, #20
 800a3ce:	051b      	lsls	r3, r3, #20
 800a3d0:	b133      	cbz	r3, 800a3e0 <_dtoa_r+0x7e8>
 800a3d2:	9b00      	ldr	r3, [sp, #0]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	9b06      	ldr	r3, [sp, #24]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	9306      	str	r3, [sp, #24]
 800a3de:	2301      	movs	r3, #1
 800a3e0:	9308      	str	r3, [sp, #32]
 800a3e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f000 81b8 	beq.w	800a75a <_dtoa_r+0xb62>
 800a3ea:	6923      	ldr	r3, [r4, #16]
 800a3ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a3f0:	6918      	ldr	r0, [r3, #16]
 800a3f2:	f000 fbc3 	bl	800ab7c <__hi0bits>
 800a3f6:	f1c0 0020 	rsb	r0, r0, #32
 800a3fa:	9b06      	ldr	r3, [sp, #24]
 800a3fc:	4418      	add	r0, r3
 800a3fe:	f010 001f 	ands.w	r0, r0, #31
 800a402:	f000 8082 	beq.w	800a50a <_dtoa_r+0x912>
 800a406:	f1c0 0320 	rsb	r3, r0, #32
 800a40a:	2b04      	cmp	r3, #4
 800a40c:	dd73      	ble.n	800a4f6 <_dtoa_r+0x8fe>
 800a40e:	9b00      	ldr	r3, [sp, #0]
 800a410:	f1c0 001c 	rsb	r0, r0, #28
 800a414:	4403      	add	r3, r0
 800a416:	9300      	str	r3, [sp, #0]
 800a418:	9b06      	ldr	r3, [sp, #24]
 800a41a:	4403      	add	r3, r0
 800a41c:	4406      	add	r6, r0
 800a41e:	9306      	str	r3, [sp, #24]
 800a420:	9b00      	ldr	r3, [sp, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	dd05      	ble.n	800a432 <_dtoa_r+0x83a>
 800a426:	9902      	ldr	r1, [sp, #8]
 800a428:	461a      	mov	r2, r3
 800a42a:	4648      	mov	r0, r9
 800a42c:	f000 fd04 	bl	800ae38 <__lshift>
 800a430:	9002      	str	r0, [sp, #8]
 800a432:	9b06      	ldr	r3, [sp, #24]
 800a434:	2b00      	cmp	r3, #0
 800a436:	dd05      	ble.n	800a444 <_dtoa_r+0x84c>
 800a438:	4621      	mov	r1, r4
 800a43a:	461a      	mov	r2, r3
 800a43c:	4648      	mov	r0, r9
 800a43e:	f000 fcfb 	bl	800ae38 <__lshift>
 800a442:	4604      	mov	r4, r0
 800a444:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a446:	2b00      	cmp	r3, #0
 800a448:	d061      	beq.n	800a50e <_dtoa_r+0x916>
 800a44a:	9802      	ldr	r0, [sp, #8]
 800a44c:	4621      	mov	r1, r4
 800a44e:	f000 fd5f 	bl	800af10 <__mcmp>
 800a452:	2800      	cmp	r0, #0
 800a454:	da5b      	bge.n	800a50e <_dtoa_r+0x916>
 800a456:	2300      	movs	r3, #0
 800a458:	9902      	ldr	r1, [sp, #8]
 800a45a:	220a      	movs	r2, #10
 800a45c:	4648      	mov	r0, r9
 800a45e:	f000 fafd 	bl	800aa5c <__multadd>
 800a462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a464:	9002      	str	r0, [sp, #8]
 800a466:	f107 38ff 	add.w	r8, r7, #4294967295
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f000 8177 	beq.w	800a75e <_dtoa_r+0xb66>
 800a470:	4629      	mov	r1, r5
 800a472:	2300      	movs	r3, #0
 800a474:	220a      	movs	r2, #10
 800a476:	4648      	mov	r0, r9
 800a478:	f000 faf0 	bl	800aa5c <__multadd>
 800a47c:	f1bb 0f00 	cmp.w	fp, #0
 800a480:	4605      	mov	r5, r0
 800a482:	dc6f      	bgt.n	800a564 <_dtoa_r+0x96c>
 800a484:	9b07      	ldr	r3, [sp, #28]
 800a486:	2b02      	cmp	r3, #2
 800a488:	dc49      	bgt.n	800a51e <_dtoa_r+0x926>
 800a48a:	e06b      	b.n	800a564 <_dtoa_r+0x96c>
 800a48c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a48e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a492:	e73c      	b.n	800a30e <_dtoa_r+0x716>
 800a494:	3fe00000 	.word	0x3fe00000
 800a498:	40240000 	.word	0x40240000
 800a49c:	9b03      	ldr	r3, [sp, #12]
 800a49e:	1e5c      	subs	r4, r3, #1
 800a4a0:	9b08      	ldr	r3, [sp, #32]
 800a4a2:	42a3      	cmp	r3, r4
 800a4a4:	db09      	blt.n	800a4ba <_dtoa_r+0x8c2>
 800a4a6:	1b1c      	subs	r4, r3, r4
 800a4a8:	9b03      	ldr	r3, [sp, #12]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f6bf af30 	bge.w	800a310 <_dtoa_r+0x718>
 800a4b0:	9b00      	ldr	r3, [sp, #0]
 800a4b2:	9a03      	ldr	r2, [sp, #12]
 800a4b4:	1a9e      	subs	r6, r3, r2
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	e72b      	b.n	800a312 <_dtoa_r+0x71a>
 800a4ba:	9b08      	ldr	r3, [sp, #32]
 800a4bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a4be:	9408      	str	r4, [sp, #32]
 800a4c0:	1ae3      	subs	r3, r4, r3
 800a4c2:	441a      	add	r2, r3
 800a4c4:	9e00      	ldr	r6, [sp, #0]
 800a4c6:	9b03      	ldr	r3, [sp, #12]
 800a4c8:	920d      	str	r2, [sp, #52]	@ 0x34
 800a4ca:	2400      	movs	r4, #0
 800a4cc:	e721      	b.n	800a312 <_dtoa_r+0x71a>
 800a4ce:	9c08      	ldr	r4, [sp, #32]
 800a4d0:	9e00      	ldr	r6, [sp, #0]
 800a4d2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a4d4:	e728      	b.n	800a328 <_dtoa_r+0x730>
 800a4d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a4da:	e751      	b.n	800a380 <_dtoa_r+0x788>
 800a4dc:	9a08      	ldr	r2, [sp, #32]
 800a4de:	9902      	ldr	r1, [sp, #8]
 800a4e0:	e750      	b.n	800a384 <_dtoa_r+0x78c>
 800a4e2:	f8cd 8008 	str.w	r8, [sp, #8]
 800a4e6:	e751      	b.n	800a38c <_dtoa_r+0x794>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	e779      	b.n	800a3e0 <_dtoa_r+0x7e8>
 800a4ec:	9b04      	ldr	r3, [sp, #16]
 800a4ee:	e777      	b.n	800a3e0 <_dtoa_r+0x7e8>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	9308      	str	r3, [sp, #32]
 800a4f4:	e779      	b.n	800a3ea <_dtoa_r+0x7f2>
 800a4f6:	d093      	beq.n	800a420 <_dtoa_r+0x828>
 800a4f8:	9a00      	ldr	r2, [sp, #0]
 800a4fa:	331c      	adds	r3, #28
 800a4fc:	441a      	add	r2, r3
 800a4fe:	9200      	str	r2, [sp, #0]
 800a500:	9a06      	ldr	r2, [sp, #24]
 800a502:	441a      	add	r2, r3
 800a504:	441e      	add	r6, r3
 800a506:	9206      	str	r2, [sp, #24]
 800a508:	e78a      	b.n	800a420 <_dtoa_r+0x828>
 800a50a:	4603      	mov	r3, r0
 800a50c:	e7f4      	b.n	800a4f8 <_dtoa_r+0x900>
 800a50e:	9b03      	ldr	r3, [sp, #12]
 800a510:	2b00      	cmp	r3, #0
 800a512:	46b8      	mov	r8, r7
 800a514:	dc20      	bgt.n	800a558 <_dtoa_r+0x960>
 800a516:	469b      	mov	fp, r3
 800a518:	9b07      	ldr	r3, [sp, #28]
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	dd1e      	ble.n	800a55c <_dtoa_r+0x964>
 800a51e:	f1bb 0f00 	cmp.w	fp, #0
 800a522:	f47f adb1 	bne.w	800a088 <_dtoa_r+0x490>
 800a526:	4621      	mov	r1, r4
 800a528:	465b      	mov	r3, fp
 800a52a:	2205      	movs	r2, #5
 800a52c:	4648      	mov	r0, r9
 800a52e:	f000 fa95 	bl	800aa5c <__multadd>
 800a532:	4601      	mov	r1, r0
 800a534:	4604      	mov	r4, r0
 800a536:	9802      	ldr	r0, [sp, #8]
 800a538:	f000 fcea 	bl	800af10 <__mcmp>
 800a53c:	2800      	cmp	r0, #0
 800a53e:	f77f ada3 	ble.w	800a088 <_dtoa_r+0x490>
 800a542:	4656      	mov	r6, sl
 800a544:	2331      	movs	r3, #49	@ 0x31
 800a546:	f806 3b01 	strb.w	r3, [r6], #1
 800a54a:	f108 0801 	add.w	r8, r8, #1
 800a54e:	e59f      	b.n	800a090 <_dtoa_r+0x498>
 800a550:	9c03      	ldr	r4, [sp, #12]
 800a552:	46b8      	mov	r8, r7
 800a554:	4625      	mov	r5, r4
 800a556:	e7f4      	b.n	800a542 <_dtoa_r+0x94a>
 800a558:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a55c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f000 8101 	beq.w	800a766 <_dtoa_r+0xb6e>
 800a564:	2e00      	cmp	r6, #0
 800a566:	dd05      	ble.n	800a574 <_dtoa_r+0x97c>
 800a568:	4629      	mov	r1, r5
 800a56a:	4632      	mov	r2, r6
 800a56c:	4648      	mov	r0, r9
 800a56e:	f000 fc63 	bl	800ae38 <__lshift>
 800a572:	4605      	mov	r5, r0
 800a574:	9b08      	ldr	r3, [sp, #32]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d05c      	beq.n	800a634 <_dtoa_r+0xa3c>
 800a57a:	6869      	ldr	r1, [r5, #4]
 800a57c:	4648      	mov	r0, r9
 800a57e:	f000 fa0b 	bl	800a998 <_Balloc>
 800a582:	4606      	mov	r6, r0
 800a584:	b928      	cbnz	r0, 800a592 <_dtoa_r+0x99a>
 800a586:	4b82      	ldr	r3, [pc, #520]	@ (800a790 <_dtoa_r+0xb98>)
 800a588:	4602      	mov	r2, r0
 800a58a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a58e:	f7ff bb4a 	b.w	8009c26 <_dtoa_r+0x2e>
 800a592:	692a      	ldr	r2, [r5, #16]
 800a594:	3202      	adds	r2, #2
 800a596:	0092      	lsls	r2, r2, #2
 800a598:	f105 010c 	add.w	r1, r5, #12
 800a59c:	300c      	adds	r0, #12
 800a59e:	f7ff fa8e 	bl	8009abe <memcpy>
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	4631      	mov	r1, r6
 800a5a6:	4648      	mov	r0, r9
 800a5a8:	f000 fc46 	bl	800ae38 <__lshift>
 800a5ac:	f10a 0301 	add.w	r3, sl, #1
 800a5b0:	9300      	str	r3, [sp, #0]
 800a5b2:	eb0a 030b 	add.w	r3, sl, fp
 800a5b6:	9308      	str	r3, [sp, #32]
 800a5b8:	9b04      	ldr	r3, [sp, #16]
 800a5ba:	f003 0301 	and.w	r3, r3, #1
 800a5be:	462f      	mov	r7, r5
 800a5c0:	9306      	str	r3, [sp, #24]
 800a5c2:	4605      	mov	r5, r0
 800a5c4:	9b00      	ldr	r3, [sp, #0]
 800a5c6:	9802      	ldr	r0, [sp, #8]
 800a5c8:	4621      	mov	r1, r4
 800a5ca:	f103 3bff 	add.w	fp, r3, #4294967295
 800a5ce:	f7ff fa8b 	bl	8009ae8 <quorem>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	3330      	adds	r3, #48	@ 0x30
 800a5d6:	9003      	str	r0, [sp, #12]
 800a5d8:	4639      	mov	r1, r7
 800a5da:	9802      	ldr	r0, [sp, #8]
 800a5dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5de:	f000 fc97 	bl	800af10 <__mcmp>
 800a5e2:	462a      	mov	r2, r5
 800a5e4:	9004      	str	r0, [sp, #16]
 800a5e6:	4621      	mov	r1, r4
 800a5e8:	4648      	mov	r0, r9
 800a5ea:	f000 fcad 	bl	800af48 <__mdiff>
 800a5ee:	68c2      	ldr	r2, [r0, #12]
 800a5f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	bb02      	cbnz	r2, 800a638 <_dtoa_r+0xa40>
 800a5f6:	4601      	mov	r1, r0
 800a5f8:	9802      	ldr	r0, [sp, #8]
 800a5fa:	f000 fc89 	bl	800af10 <__mcmp>
 800a5fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a600:	4602      	mov	r2, r0
 800a602:	4631      	mov	r1, r6
 800a604:	4648      	mov	r0, r9
 800a606:	920c      	str	r2, [sp, #48]	@ 0x30
 800a608:	9309      	str	r3, [sp, #36]	@ 0x24
 800a60a:	f000 fa05 	bl	800aa18 <_Bfree>
 800a60e:	9b07      	ldr	r3, [sp, #28]
 800a610:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a612:	9e00      	ldr	r6, [sp, #0]
 800a614:	ea42 0103 	orr.w	r1, r2, r3
 800a618:	9b06      	ldr	r3, [sp, #24]
 800a61a:	4319      	orrs	r1, r3
 800a61c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a61e:	d10d      	bne.n	800a63c <_dtoa_r+0xa44>
 800a620:	2b39      	cmp	r3, #57	@ 0x39
 800a622:	d027      	beq.n	800a674 <_dtoa_r+0xa7c>
 800a624:	9a04      	ldr	r2, [sp, #16]
 800a626:	2a00      	cmp	r2, #0
 800a628:	dd01      	ble.n	800a62e <_dtoa_r+0xa36>
 800a62a:	9b03      	ldr	r3, [sp, #12]
 800a62c:	3331      	adds	r3, #49	@ 0x31
 800a62e:	f88b 3000 	strb.w	r3, [fp]
 800a632:	e52e      	b.n	800a092 <_dtoa_r+0x49a>
 800a634:	4628      	mov	r0, r5
 800a636:	e7b9      	b.n	800a5ac <_dtoa_r+0x9b4>
 800a638:	2201      	movs	r2, #1
 800a63a:	e7e2      	b.n	800a602 <_dtoa_r+0xa0a>
 800a63c:	9904      	ldr	r1, [sp, #16]
 800a63e:	2900      	cmp	r1, #0
 800a640:	db04      	blt.n	800a64c <_dtoa_r+0xa54>
 800a642:	9807      	ldr	r0, [sp, #28]
 800a644:	4301      	orrs	r1, r0
 800a646:	9806      	ldr	r0, [sp, #24]
 800a648:	4301      	orrs	r1, r0
 800a64a:	d120      	bne.n	800a68e <_dtoa_r+0xa96>
 800a64c:	2a00      	cmp	r2, #0
 800a64e:	ddee      	ble.n	800a62e <_dtoa_r+0xa36>
 800a650:	9902      	ldr	r1, [sp, #8]
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	2201      	movs	r2, #1
 800a656:	4648      	mov	r0, r9
 800a658:	f000 fbee 	bl	800ae38 <__lshift>
 800a65c:	4621      	mov	r1, r4
 800a65e:	9002      	str	r0, [sp, #8]
 800a660:	f000 fc56 	bl	800af10 <__mcmp>
 800a664:	2800      	cmp	r0, #0
 800a666:	9b00      	ldr	r3, [sp, #0]
 800a668:	dc02      	bgt.n	800a670 <_dtoa_r+0xa78>
 800a66a:	d1e0      	bne.n	800a62e <_dtoa_r+0xa36>
 800a66c:	07da      	lsls	r2, r3, #31
 800a66e:	d5de      	bpl.n	800a62e <_dtoa_r+0xa36>
 800a670:	2b39      	cmp	r3, #57	@ 0x39
 800a672:	d1da      	bne.n	800a62a <_dtoa_r+0xa32>
 800a674:	2339      	movs	r3, #57	@ 0x39
 800a676:	f88b 3000 	strb.w	r3, [fp]
 800a67a:	4633      	mov	r3, r6
 800a67c:	461e      	mov	r6, r3
 800a67e:	3b01      	subs	r3, #1
 800a680:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a684:	2a39      	cmp	r2, #57	@ 0x39
 800a686:	d04e      	beq.n	800a726 <_dtoa_r+0xb2e>
 800a688:	3201      	adds	r2, #1
 800a68a:	701a      	strb	r2, [r3, #0]
 800a68c:	e501      	b.n	800a092 <_dtoa_r+0x49a>
 800a68e:	2a00      	cmp	r2, #0
 800a690:	dd03      	ble.n	800a69a <_dtoa_r+0xaa2>
 800a692:	2b39      	cmp	r3, #57	@ 0x39
 800a694:	d0ee      	beq.n	800a674 <_dtoa_r+0xa7c>
 800a696:	3301      	adds	r3, #1
 800a698:	e7c9      	b.n	800a62e <_dtoa_r+0xa36>
 800a69a:	9a00      	ldr	r2, [sp, #0]
 800a69c:	9908      	ldr	r1, [sp, #32]
 800a69e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a6a2:	428a      	cmp	r2, r1
 800a6a4:	d028      	beq.n	800a6f8 <_dtoa_r+0xb00>
 800a6a6:	9902      	ldr	r1, [sp, #8]
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	220a      	movs	r2, #10
 800a6ac:	4648      	mov	r0, r9
 800a6ae:	f000 f9d5 	bl	800aa5c <__multadd>
 800a6b2:	42af      	cmp	r7, r5
 800a6b4:	9002      	str	r0, [sp, #8]
 800a6b6:	f04f 0300 	mov.w	r3, #0
 800a6ba:	f04f 020a 	mov.w	r2, #10
 800a6be:	4639      	mov	r1, r7
 800a6c0:	4648      	mov	r0, r9
 800a6c2:	d107      	bne.n	800a6d4 <_dtoa_r+0xadc>
 800a6c4:	f000 f9ca 	bl	800aa5c <__multadd>
 800a6c8:	4607      	mov	r7, r0
 800a6ca:	4605      	mov	r5, r0
 800a6cc:	9b00      	ldr	r3, [sp, #0]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	e777      	b.n	800a5c4 <_dtoa_r+0x9cc>
 800a6d4:	f000 f9c2 	bl	800aa5c <__multadd>
 800a6d8:	4629      	mov	r1, r5
 800a6da:	4607      	mov	r7, r0
 800a6dc:	2300      	movs	r3, #0
 800a6de:	220a      	movs	r2, #10
 800a6e0:	4648      	mov	r0, r9
 800a6e2:	f000 f9bb 	bl	800aa5c <__multadd>
 800a6e6:	4605      	mov	r5, r0
 800a6e8:	e7f0      	b.n	800a6cc <_dtoa_r+0xad4>
 800a6ea:	f1bb 0f00 	cmp.w	fp, #0
 800a6ee:	bfcc      	ite	gt
 800a6f0:	465e      	movgt	r6, fp
 800a6f2:	2601      	movle	r6, #1
 800a6f4:	4456      	add	r6, sl
 800a6f6:	2700      	movs	r7, #0
 800a6f8:	9902      	ldr	r1, [sp, #8]
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	4648      	mov	r0, r9
 800a700:	f000 fb9a 	bl	800ae38 <__lshift>
 800a704:	4621      	mov	r1, r4
 800a706:	9002      	str	r0, [sp, #8]
 800a708:	f000 fc02 	bl	800af10 <__mcmp>
 800a70c:	2800      	cmp	r0, #0
 800a70e:	dcb4      	bgt.n	800a67a <_dtoa_r+0xa82>
 800a710:	d102      	bne.n	800a718 <_dtoa_r+0xb20>
 800a712:	9b00      	ldr	r3, [sp, #0]
 800a714:	07db      	lsls	r3, r3, #31
 800a716:	d4b0      	bmi.n	800a67a <_dtoa_r+0xa82>
 800a718:	4633      	mov	r3, r6
 800a71a:	461e      	mov	r6, r3
 800a71c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a720:	2a30      	cmp	r2, #48	@ 0x30
 800a722:	d0fa      	beq.n	800a71a <_dtoa_r+0xb22>
 800a724:	e4b5      	b.n	800a092 <_dtoa_r+0x49a>
 800a726:	459a      	cmp	sl, r3
 800a728:	d1a8      	bne.n	800a67c <_dtoa_r+0xa84>
 800a72a:	2331      	movs	r3, #49	@ 0x31
 800a72c:	f108 0801 	add.w	r8, r8, #1
 800a730:	f88a 3000 	strb.w	r3, [sl]
 800a734:	e4ad      	b.n	800a092 <_dtoa_r+0x49a>
 800a736:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a738:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a794 <_dtoa_r+0xb9c>
 800a73c:	b11b      	cbz	r3, 800a746 <_dtoa_r+0xb4e>
 800a73e:	f10a 0308 	add.w	r3, sl, #8
 800a742:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a744:	6013      	str	r3, [r2, #0]
 800a746:	4650      	mov	r0, sl
 800a748:	b017      	add	sp, #92	@ 0x5c
 800a74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a74e:	9b07      	ldr	r3, [sp, #28]
 800a750:	2b01      	cmp	r3, #1
 800a752:	f77f ae2e 	ble.w	800a3b2 <_dtoa_r+0x7ba>
 800a756:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a758:	9308      	str	r3, [sp, #32]
 800a75a:	2001      	movs	r0, #1
 800a75c:	e64d      	b.n	800a3fa <_dtoa_r+0x802>
 800a75e:	f1bb 0f00 	cmp.w	fp, #0
 800a762:	f77f aed9 	ble.w	800a518 <_dtoa_r+0x920>
 800a766:	4656      	mov	r6, sl
 800a768:	9802      	ldr	r0, [sp, #8]
 800a76a:	4621      	mov	r1, r4
 800a76c:	f7ff f9bc 	bl	8009ae8 <quorem>
 800a770:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a774:	f806 3b01 	strb.w	r3, [r6], #1
 800a778:	eba6 020a 	sub.w	r2, r6, sl
 800a77c:	4593      	cmp	fp, r2
 800a77e:	ddb4      	ble.n	800a6ea <_dtoa_r+0xaf2>
 800a780:	9902      	ldr	r1, [sp, #8]
 800a782:	2300      	movs	r3, #0
 800a784:	220a      	movs	r2, #10
 800a786:	4648      	mov	r0, r9
 800a788:	f000 f968 	bl	800aa5c <__multadd>
 800a78c:	9002      	str	r0, [sp, #8]
 800a78e:	e7eb      	b.n	800a768 <_dtoa_r+0xb70>
 800a790:	0800d3c1 	.word	0x0800d3c1
 800a794:	0800d345 	.word	0x0800d345

0800a798 <_free_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4605      	mov	r5, r0
 800a79c:	2900      	cmp	r1, #0
 800a79e:	d041      	beq.n	800a824 <_free_r+0x8c>
 800a7a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7a4:	1f0c      	subs	r4, r1, #4
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	bfb8      	it	lt
 800a7aa:	18e4      	addlt	r4, r4, r3
 800a7ac:	f000 f8e8 	bl	800a980 <__malloc_lock>
 800a7b0:	4a1d      	ldr	r2, [pc, #116]	@ (800a828 <_free_r+0x90>)
 800a7b2:	6813      	ldr	r3, [r2, #0]
 800a7b4:	b933      	cbnz	r3, 800a7c4 <_free_r+0x2c>
 800a7b6:	6063      	str	r3, [r4, #4]
 800a7b8:	6014      	str	r4, [r2, #0]
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7c0:	f000 b8e4 	b.w	800a98c <__malloc_unlock>
 800a7c4:	42a3      	cmp	r3, r4
 800a7c6:	d908      	bls.n	800a7da <_free_r+0x42>
 800a7c8:	6820      	ldr	r0, [r4, #0]
 800a7ca:	1821      	adds	r1, r4, r0
 800a7cc:	428b      	cmp	r3, r1
 800a7ce:	bf01      	itttt	eq
 800a7d0:	6819      	ldreq	r1, [r3, #0]
 800a7d2:	685b      	ldreq	r3, [r3, #4]
 800a7d4:	1809      	addeq	r1, r1, r0
 800a7d6:	6021      	streq	r1, [r4, #0]
 800a7d8:	e7ed      	b.n	800a7b6 <_free_r+0x1e>
 800a7da:	461a      	mov	r2, r3
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	b10b      	cbz	r3, 800a7e4 <_free_r+0x4c>
 800a7e0:	42a3      	cmp	r3, r4
 800a7e2:	d9fa      	bls.n	800a7da <_free_r+0x42>
 800a7e4:	6811      	ldr	r1, [r2, #0]
 800a7e6:	1850      	adds	r0, r2, r1
 800a7e8:	42a0      	cmp	r0, r4
 800a7ea:	d10b      	bne.n	800a804 <_free_r+0x6c>
 800a7ec:	6820      	ldr	r0, [r4, #0]
 800a7ee:	4401      	add	r1, r0
 800a7f0:	1850      	adds	r0, r2, r1
 800a7f2:	4283      	cmp	r3, r0
 800a7f4:	6011      	str	r1, [r2, #0]
 800a7f6:	d1e0      	bne.n	800a7ba <_free_r+0x22>
 800a7f8:	6818      	ldr	r0, [r3, #0]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	6053      	str	r3, [r2, #4]
 800a7fe:	4408      	add	r0, r1
 800a800:	6010      	str	r0, [r2, #0]
 800a802:	e7da      	b.n	800a7ba <_free_r+0x22>
 800a804:	d902      	bls.n	800a80c <_free_r+0x74>
 800a806:	230c      	movs	r3, #12
 800a808:	602b      	str	r3, [r5, #0]
 800a80a:	e7d6      	b.n	800a7ba <_free_r+0x22>
 800a80c:	6820      	ldr	r0, [r4, #0]
 800a80e:	1821      	adds	r1, r4, r0
 800a810:	428b      	cmp	r3, r1
 800a812:	bf04      	itt	eq
 800a814:	6819      	ldreq	r1, [r3, #0]
 800a816:	685b      	ldreq	r3, [r3, #4]
 800a818:	6063      	str	r3, [r4, #4]
 800a81a:	bf04      	itt	eq
 800a81c:	1809      	addeq	r1, r1, r0
 800a81e:	6021      	streq	r1, [r4, #0]
 800a820:	6054      	str	r4, [r2, #4]
 800a822:	e7ca      	b.n	800a7ba <_free_r+0x22>
 800a824:	bd38      	pop	{r3, r4, r5, pc}
 800a826:	bf00      	nop
 800a828:	200048cc 	.word	0x200048cc

0800a82c <malloc>:
 800a82c:	4b02      	ldr	r3, [pc, #8]	@ (800a838 <malloc+0xc>)
 800a82e:	4601      	mov	r1, r0
 800a830:	6818      	ldr	r0, [r3, #0]
 800a832:	f000 b825 	b.w	800a880 <_malloc_r>
 800a836:	bf00      	nop
 800a838:	20000044 	.word	0x20000044

0800a83c <sbrk_aligned>:
 800a83c:	b570      	push	{r4, r5, r6, lr}
 800a83e:	4e0f      	ldr	r6, [pc, #60]	@ (800a87c <sbrk_aligned+0x40>)
 800a840:	460c      	mov	r4, r1
 800a842:	6831      	ldr	r1, [r6, #0]
 800a844:	4605      	mov	r5, r0
 800a846:	b911      	cbnz	r1, 800a84e <sbrk_aligned+0x12>
 800a848:	f001 ffca 	bl	800c7e0 <_sbrk_r>
 800a84c:	6030      	str	r0, [r6, #0]
 800a84e:	4621      	mov	r1, r4
 800a850:	4628      	mov	r0, r5
 800a852:	f001 ffc5 	bl	800c7e0 <_sbrk_r>
 800a856:	1c43      	adds	r3, r0, #1
 800a858:	d103      	bne.n	800a862 <sbrk_aligned+0x26>
 800a85a:	f04f 34ff 	mov.w	r4, #4294967295
 800a85e:	4620      	mov	r0, r4
 800a860:	bd70      	pop	{r4, r5, r6, pc}
 800a862:	1cc4      	adds	r4, r0, #3
 800a864:	f024 0403 	bic.w	r4, r4, #3
 800a868:	42a0      	cmp	r0, r4
 800a86a:	d0f8      	beq.n	800a85e <sbrk_aligned+0x22>
 800a86c:	1a21      	subs	r1, r4, r0
 800a86e:	4628      	mov	r0, r5
 800a870:	f001 ffb6 	bl	800c7e0 <_sbrk_r>
 800a874:	3001      	adds	r0, #1
 800a876:	d1f2      	bne.n	800a85e <sbrk_aligned+0x22>
 800a878:	e7ef      	b.n	800a85a <sbrk_aligned+0x1e>
 800a87a:	bf00      	nop
 800a87c:	200048c8 	.word	0x200048c8

0800a880 <_malloc_r>:
 800a880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a884:	1ccd      	adds	r5, r1, #3
 800a886:	f025 0503 	bic.w	r5, r5, #3
 800a88a:	3508      	adds	r5, #8
 800a88c:	2d0c      	cmp	r5, #12
 800a88e:	bf38      	it	cc
 800a890:	250c      	movcc	r5, #12
 800a892:	2d00      	cmp	r5, #0
 800a894:	4606      	mov	r6, r0
 800a896:	db01      	blt.n	800a89c <_malloc_r+0x1c>
 800a898:	42a9      	cmp	r1, r5
 800a89a:	d904      	bls.n	800a8a6 <_malloc_r+0x26>
 800a89c:	230c      	movs	r3, #12
 800a89e:	6033      	str	r3, [r6, #0]
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a97c <_malloc_r+0xfc>
 800a8aa:	f000 f869 	bl	800a980 <__malloc_lock>
 800a8ae:	f8d8 3000 	ldr.w	r3, [r8]
 800a8b2:	461c      	mov	r4, r3
 800a8b4:	bb44      	cbnz	r4, 800a908 <_malloc_r+0x88>
 800a8b6:	4629      	mov	r1, r5
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	f7ff ffbf 	bl	800a83c <sbrk_aligned>
 800a8be:	1c43      	adds	r3, r0, #1
 800a8c0:	4604      	mov	r4, r0
 800a8c2:	d158      	bne.n	800a976 <_malloc_r+0xf6>
 800a8c4:	f8d8 4000 	ldr.w	r4, [r8]
 800a8c8:	4627      	mov	r7, r4
 800a8ca:	2f00      	cmp	r7, #0
 800a8cc:	d143      	bne.n	800a956 <_malloc_r+0xd6>
 800a8ce:	2c00      	cmp	r4, #0
 800a8d0:	d04b      	beq.n	800a96a <_malloc_r+0xea>
 800a8d2:	6823      	ldr	r3, [r4, #0]
 800a8d4:	4639      	mov	r1, r7
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	eb04 0903 	add.w	r9, r4, r3
 800a8dc:	f001 ff80 	bl	800c7e0 <_sbrk_r>
 800a8e0:	4581      	cmp	r9, r0
 800a8e2:	d142      	bne.n	800a96a <_malloc_r+0xea>
 800a8e4:	6821      	ldr	r1, [r4, #0]
 800a8e6:	1a6d      	subs	r5, r5, r1
 800a8e8:	4629      	mov	r1, r5
 800a8ea:	4630      	mov	r0, r6
 800a8ec:	f7ff ffa6 	bl	800a83c <sbrk_aligned>
 800a8f0:	3001      	adds	r0, #1
 800a8f2:	d03a      	beq.n	800a96a <_malloc_r+0xea>
 800a8f4:	6823      	ldr	r3, [r4, #0]
 800a8f6:	442b      	add	r3, r5
 800a8f8:	6023      	str	r3, [r4, #0]
 800a8fa:	f8d8 3000 	ldr.w	r3, [r8]
 800a8fe:	685a      	ldr	r2, [r3, #4]
 800a900:	bb62      	cbnz	r2, 800a95c <_malloc_r+0xdc>
 800a902:	f8c8 7000 	str.w	r7, [r8]
 800a906:	e00f      	b.n	800a928 <_malloc_r+0xa8>
 800a908:	6822      	ldr	r2, [r4, #0]
 800a90a:	1b52      	subs	r2, r2, r5
 800a90c:	d420      	bmi.n	800a950 <_malloc_r+0xd0>
 800a90e:	2a0b      	cmp	r2, #11
 800a910:	d917      	bls.n	800a942 <_malloc_r+0xc2>
 800a912:	1961      	adds	r1, r4, r5
 800a914:	42a3      	cmp	r3, r4
 800a916:	6025      	str	r5, [r4, #0]
 800a918:	bf18      	it	ne
 800a91a:	6059      	strne	r1, [r3, #4]
 800a91c:	6863      	ldr	r3, [r4, #4]
 800a91e:	bf08      	it	eq
 800a920:	f8c8 1000 	streq.w	r1, [r8]
 800a924:	5162      	str	r2, [r4, r5]
 800a926:	604b      	str	r3, [r1, #4]
 800a928:	4630      	mov	r0, r6
 800a92a:	f000 f82f 	bl	800a98c <__malloc_unlock>
 800a92e:	f104 000b 	add.w	r0, r4, #11
 800a932:	1d23      	adds	r3, r4, #4
 800a934:	f020 0007 	bic.w	r0, r0, #7
 800a938:	1ac2      	subs	r2, r0, r3
 800a93a:	bf1c      	itt	ne
 800a93c:	1a1b      	subne	r3, r3, r0
 800a93e:	50a3      	strne	r3, [r4, r2]
 800a940:	e7af      	b.n	800a8a2 <_malloc_r+0x22>
 800a942:	6862      	ldr	r2, [r4, #4]
 800a944:	42a3      	cmp	r3, r4
 800a946:	bf0c      	ite	eq
 800a948:	f8c8 2000 	streq.w	r2, [r8]
 800a94c:	605a      	strne	r2, [r3, #4]
 800a94e:	e7eb      	b.n	800a928 <_malloc_r+0xa8>
 800a950:	4623      	mov	r3, r4
 800a952:	6864      	ldr	r4, [r4, #4]
 800a954:	e7ae      	b.n	800a8b4 <_malloc_r+0x34>
 800a956:	463c      	mov	r4, r7
 800a958:	687f      	ldr	r7, [r7, #4]
 800a95a:	e7b6      	b.n	800a8ca <_malloc_r+0x4a>
 800a95c:	461a      	mov	r2, r3
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	42a3      	cmp	r3, r4
 800a962:	d1fb      	bne.n	800a95c <_malloc_r+0xdc>
 800a964:	2300      	movs	r3, #0
 800a966:	6053      	str	r3, [r2, #4]
 800a968:	e7de      	b.n	800a928 <_malloc_r+0xa8>
 800a96a:	230c      	movs	r3, #12
 800a96c:	6033      	str	r3, [r6, #0]
 800a96e:	4630      	mov	r0, r6
 800a970:	f000 f80c 	bl	800a98c <__malloc_unlock>
 800a974:	e794      	b.n	800a8a0 <_malloc_r+0x20>
 800a976:	6005      	str	r5, [r0, #0]
 800a978:	e7d6      	b.n	800a928 <_malloc_r+0xa8>
 800a97a:	bf00      	nop
 800a97c:	200048cc 	.word	0x200048cc

0800a980 <__malloc_lock>:
 800a980:	4801      	ldr	r0, [pc, #4]	@ (800a988 <__malloc_lock+0x8>)
 800a982:	f7ff b89a 	b.w	8009aba <__retarget_lock_acquire_recursive>
 800a986:	bf00      	nop
 800a988:	200048c4 	.word	0x200048c4

0800a98c <__malloc_unlock>:
 800a98c:	4801      	ldr	r0, [pc, #4]	@ (800a994 <__malloc_unlock+0x8>)
 800a98e:	f7ff b895 	b.w	8009abc <__retarget_lock_release_recursive>
 800a992:	bf00      	nop
 800a994:	200048c4 	.word	0x200048c4

0800a998 <_Balloc>:
 800a998:	b570      	push	{r4, r5, r6, lr}
 800a99a:	69c6      	ldr	r6, [r0, #28]
 800a99c:	4604      	mov	r4, r0
 800a99e:	460d      	mov	r5, r1
 800a9a0:	b976      	cbnz	r6, 800a9c0 <_Balloc+0x28>
 800a9a2:	2010      	movs	r0, #16
 800a9a4:	f7ff ff42 	bl	800a82c <malloc>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	61e0      	str	r0, [r4, #28]
 800a9ac:	b920      	cbnz	r0, 800a9b8 <_Balloc+0x20>
 800a9ae:	4b18      	ldr	r3, [pc, #96]	@ (800aa10 <_Balloc+0x78>)
 800a9b0:	4818      	ldr	r0, [pc, #96]	@ (800aa14 <_Balloc+0x7c>)
 800a9b2:	216b      	movs	r1, #107	@ 0x6b
 800a9b4:	f001 ff2c 	bl	800c810 <__assert_func>
 800a9b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9bc:	6006      	str	r6, [r0, #0]
 800a9be:	60c6      	str	r6, [r0, #12]
 800a9c0:	69e6      	ldr	r6, [r4, #28]
 800a9c2:	68f3      	ldr	r3, [r6, #12]
 800a9c4:	b183      	cbz	r3, 800a9e8 <_Balloc+0x50>
 800a9c6:	69e3      	ldr	r3, [r4, #28]
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a9ce:	b9b8      	cbnz	r0, 800aa00 <_Balloc+0x68>
 800a9d0:	2101      	movs	r1, #1
 800a9d2:	fa01 f605 	lsl.w	r6, r1, r5
 800a9d6:	1d72      	adds	r2, r6, #5
 800a9d8:	0092      	lsls	r2, r2, #2
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f001 ff36 	bl	800c84c <_calloc_r>
 800a9e0:	b160      	cbz	r0, 800a9fc <_Balloc+0x64>
 800a9e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a9e6:	e00e      	b.n	800aa06 <_Balloc+0x6e>
 800a9e8:	2221      	movs	r2, #33	@ 0x21
 800a9ea:	2104      	movs	r1, #4
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f001 ff2d 	bl	800c84c <_calloc_r>
 800a9f2:	69e3      	ldr	r3, [r4, #28]
 800a9f4:	60f0      	str	r0, [r6, #12]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d1e4      	bne.n	800a9c6 <_Balloc+0x2e>
 800a9fc:	2000      	movs	r0, #0
 800a9fe:	bd70      	pop	{r4, r5, r6, pc}
 800aa00:	6802      	ldr	r2, [r0, #0]
 800aa02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa06:	2300      	movs	r3, #0
 800aa08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa0c:	e7f7      	b.n	800a9fe <_Balloc+0x66>
 800aa0e:	bf00      	nop
 800aa10:	0800d352 	.word	0x0800d352
 800aa14:	0800d3d2 	.word	0x0800d3d2

0800aa18 <_Bfree>:
 800aa18:	b570      	push	{r4, r5, r6, lr}
 800aa1a:	69c6      	ldr	r6, [r0, #28]
 800aa1c:	4605      	mov	r5, r0
 800aa1e:	460c      	mov	r4, r1
 800aa20:	b976      	cbnz	r6, 800aa40 <_Bfree+0x28>
 800aa22:	2010      	movs	r0, #16
 800aa24:	f7ff ff02 	bl	800a82c <malloc>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	61e8      	str	r0, [r5, #28]
 800aa2c:	b920      	cbnz	r0, 800aa38 <_Bfree+0x20>
 800aa2e:	4b09      	ldr	r3, [pc, #36]	@ (800aa54 <_Bfree+0x3c>)
 800aa30:	4809      	ldr	r0, [pc, #36]	@ (800aa58 <_Bfree+0x40>)
 800aa32:	218f      	movs	r1, #143	@ 0x8f
 800aa34:	f001 feec 	bl	800c810 <__assert_func>
 800aa38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa3c:	6006      	str	r6, [r0, #0]
 800aa3e:	60c6      	str	r6, [r0, #12]
 800aa40:	b13c      	cbz	r4, 800aa52 <_Bfree+0x3a>
 800aa42:	69eb      	ldr	r3, [r5, #28]
 800aa44:	6862      	ldr	r2, [r4, #4]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa4c:	6021      	str	r1, [r4, #0]
 800aa4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa52:	bd70      	pop	{r4, r5, r6, pc}
 800aa54:	0800d352 	.word	0x0800d352
 800aa58:	0800d3d2 	.word	0x0800d3d2

0800aa5c <__multadd>:
 800aa5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa60:	690d      	ldr	r5, [r1, #16]
 800aa62:	4607      	mov	r7, r0
 800aa64:	460c      	mov	r4, r1
 800aa66:	461e      	mov	r6, r3
 800aa68:	f101 0c14 	add.w	ip, r1, #20
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	f8dc 3000 	ldr.w	r3, [ip]
 800aa72:	b299      	uxth	r1, r3
 800aa74:	fb02 6101 	mla	r1, r2, r1, r6
 800aa78:	0c1e      	lsrs	r6, r3, #16
 800aa7a:	0c0b      	lsrs	r3, r1, #16
 800aa7c:	fb02 3306 	mla	r3, r2, r6, r3
 800aa80:	b289      	uxth	r1, r1
 800aa82:	3001      	adds	r0, #1
 800aa84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa88:	4285      	cmp	r5, r0
 800aa8a:	f84c 1b04 	str.w	r1, [ip], #4
 800aa8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa92:	dcec      	bgt.n	800aa6e <__multadd+0x12>
 800aa94:	b30e      	cbz	r6, 800aada <__multadd+0x7e>
 800aa96:	68a3      	ldr	r3, [r4, #8]
 800aa98:	42ab      	cmp	r3, r5
 800aa9a:	dc19      	bgt.n	800aad0 <__multadd+0x74>
 800aa9c:	6861      	ldr	r1, [r4, #4]
 800aa9e:	4638      	mov	r0, r7
 800aaa0:	3101      	adds	r1, #1
 800aaa2:	f7ff ff79 	bl	800a998 <_Balloc>
 800aaa6:	4680      	mov	r8, r0
 800aaa8:	b928      	cbnz	r0, 800aab6 <__multadd+0x5a>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	4b0c      	ldr	r3, [pc, #48]	@ (800aae0 <__multadd+0x84>)
 800aaae:	480d      	ldr	r0, [pc, #52]	@ (800aae4 <__multadd+0x88>)
 800aab0:	21ba      	movs	r1, #186	@ 0xba
 800aab2:	f001 fead 	bl	800c810 <__assert_func>
 800aab6:	6922      	ldr	r2, [r4, #16]
 800aab8:	3202      	adds	r2, #2
 800aaba:	f104 010c 	add.w	r1, r4, #12
 800aabe:	0092      	lsls	r2, r2, #2
 800aac0:	300c      	adds	r0, #12
 800aac2:	f7fe fffc 	bl	8009abe <memcpy>
 800aac6:	4621      	mov	r1, r4
 800aac8:	4638      	mov	r0, r7
 800aaca:	f7ff ffa5 	bl	800aa18 <_Bfree>
 800aace:	4644      	mov	r4, r8
 800aad0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aad4:	3501      	adds	r5, #1
 800aad6:	615e      	str	r6, [r3, #20]
 800aad8:	6125      	str	r5, [r4, #16]
 800aada:	4620      	mov	r0, r4
 800aadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae0:	0800d3c1 	.word	0x0800d3c1
 800aae4:	0800d3d2 	.word	0x0800d3d2

0800aae8 <__s2b>:
 800aae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaec:	460c      	mov	r4, r1
 800aaee:	4615      	mov	r5, r2
 800aaf0:	461f      	mov	r7, r3
 800aaf2:	2209      	movs	r2, #9
 800aaf4:	3308      	adds	r3, #8
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	fb93 f3f2 	sdiv	r3, r3, r2
 800aafc:	2100      	movs	r1, #0
 800aafe:	2201      	movs	r2, #1
 800ab00:	429a      	cmp	r2, r3
 800ab02:	db09      	blt.n	800ab18 <__s2b+0x30>
 800ab04:	4630      	mov	r0, r6
 800ab06:	f7ff ff47 	bl	800a998 <_Balloc>
 800ab0a:	b940      	cbnz	r0, 800ab1e <__s2b+0x36>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	4b19      	ldr	r3, [pc, #100]	@ (800ab74 <__s2b+0x8c>)
 800ab10:	4819      	ldr	r0, [pc, #100]	@ (800ab78 <__s2b+0x90>)
 800ab12:	21d3      	movs	r1, #211	@ 0xd3
 800ab14:	f001 fe7c 	bl	800c810 <__assert_func>
 800ab18:	0052      	lsls	r2, r2, #1
 800ab1a:	3101      	adds	r1, #1
 800ab1c:	e7f0      	b.n	800ab00 <__s2b+0x18>
 800ab1e:	9b08      	ldr	r3, [sp, #32]
 800ab20:	6143      	str	r3, [r0, #20]
 800ab22:	2d09      	cmp	r5, #9
 800ab24:	f04f 0301 	mov.w	r3, #1
 800ab28:	6103      	str	r3, [r0, #16]
 800ab2a:	dd16      	ble.n	800ab5a <__s2b+0x72>
 800ab2c:	f104 0909 	add.w	r9, r4, #9
 800ab30:	46c8      	mov	r8, r9
 800ab32:	442c      	add	r4, r5
 800ab34:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ab38:	4601      	mov	r1, r0
 800ab3a:	3b30      	subs	r3, #48	@ 0x30
 800ab3c:	220a      	movs	r2, #10
 800ab3e:	4630      	mov	r0, r6
 800ab40:	f7ff ff8c 	bl	800aa5c <__multadd>
 800ab44:	45a0      	cmp	r8, r4
 800ab46:	d1f5      	bne.n	800ab34 <__s2b+0x4c>
 800ab48:	f1a5 0408 	sub.w	r4, r5, #8
 800ab4c:	444c      	add	r4, r9
 800ab4e:	1b2d      	subs	r5, r5, r4
 800ab50:	1963      	adds	r3, r4, r5
 800ab52:	42bb      	cmp	r3, r7
 800ab54:	db04      	blt.n	800ab60 <__s2b+0x78>
 800ab56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab5a:	340a      	adds	r4, #10
 800ab5c:	2509      	movs	r5, #9
 800ab5e:	e7f6      	b.n	800ab4e <__s2b+0x66>
 800ab60:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ab64:	4601      	mov	r1, r0
 800ab66:	3b30      	subs	r3, #48	@ 0x30
 800ab68:	220a      	movs	r2, #10
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	f7ff ff76 	bl	800aa5c <__multadd>
 800ab70:	e7ee      	b.n	800ab50 <__s2b+0x68>
 800ab72:	bf00      	nop
 800ab74:	0800d3c1 	.word	0x0800d3c1
 800ab78:	0800d3d2 	.word	0x0800d3d2

0800ab7c <__hi0bits>:
 800ab7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ab80:	4603      	mov	r3, r0
 800ab82:	bf36      	itet	cc
 800ab84:	0403      	lslcc	r3, r0, #16
 800ab86:	2000      	movcs	r0, #0
 800ab88:	2010      	movcc	r0, #16
 800ab8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab8e:	bf3c      	itt	cc
 800ab90:	021b      	lslcc	r3, r3, #8
 800ab92:	3008      	addcc	r0, #8
 800ab94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab98:	bf3c      	itt	cc
 800ab9a:	011b      	lslcc	r3, r3, #4
 800ab9c:	3004      	addcc	r0, #4
 800ab9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aba2:	bf3c      	itt	cc
 800aba4:	009b      	lslcc	r3, r3, #2
 800aba6:	3002      	addcc	r0, #2
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	db05      	blt.n	800abb8 <__hi0bits+0x3c>
 800abac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800abb0:	f100 0001 	add.w	r0, r0, #1
 800abb4:	bf08      	it	eq
 800abb6:	2020      	moveq	r0, #32
 800abb8:	4770      	bx	lr

0800abba <__lo0bits>:
 800abba:	6803      	ldr	r3, [r0, #0]
 800abbc:	4602      	mov	r2, r0
 800abbe:	f013 0007 	ands.w	r0, r3, #7
 800abc2:	d00b      	beq.n	800abdc <__lo0bits+0x22>
 800abc4:	07d9      	lsls	r1, r3, #31
 800abc6:	d421      	bmi.n	800ac0c <__lo0bits+0x52>
 800abc8:	0798      	lsls	r0, r3, #30
 800abca:	bf49      	itett	mi
 800abcc:	085b      	lsrmi	r3, r3, #1
 800abce:	089b      	lsrpl	r3, r3, #2
 800abd0:	2001      	movmi	r0, #1
 800abd2:	6013      	strmi	r3, [r2, #0]
 800abd4:	bf5c      	itt	pl
 800abd6:	6013      	strpl	r3, [r2, #0]
 800abd8:	2002      	movpl	r0, #2
 800abda:	4770      	bx	lr
 800abdc:	b299      	uxth	r1, r3
 800abde:	b909      	cbnz	r1, 800abe4 <__lo0bits+0x2a>
 800abe0:	0c1b      	lsrs	r3, r3, #16
 800abe2:	2010      	movs	r0, #16
 800abe4:	b2d9      	uxtb	r1, r3
 800abe6:	b909      	cbnz	r1, 800abec <__lo0bits+0x32>
 800abe8:	3008      	adds	r0, #8
 800abea:	0a1b      	lsrs	r3, r3, #8
 800abec:	0719      	lsls	r1, r3, #28
 800abee:	bf04      	itt	eq
 800abf0:	091b      	lsreq	r3, r3, #4
 800abf2:	3004      	addeq	r0, #4
 800abf4:	0799      	lsls	r1, r3, #30
 800abf6:	bf04      	itt	eq
 800abf8:	089b      	lsreq	r3, r3, #2
 800abfa:	3002      	addeq	r0, #2
 800abfc:	07d9      	lsls	r1, r3, #31
 800abfe:	d403      	bmi.n	800ac08 <__lo0bits+0x4e>
 800ac00:	085b      	lsrs	r3, r3, #1
 800ac02:	f100 0001 	add.w	r0, r0, #1
 800ac06:	d003      	beq.n	800ac10 <__lo0bits+0x56>
 800ac08:	6013      	str	r3, [r2, #0]
 800ac0a:	4770      	bx	lr
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	4770      	bx	lr
 800ac10:	2020      	movs	r0, #32
 800ac12:	4770      	bx	lr

0800ac14 <__i2b>:
 800ac14:	b510      	push	{r4, lr}
 800ac16:	460c      	mov	r4, r1
 800ac18:	2101      	movs	r1, #1
 800ac1a:	f7ff febd 	bl	800a998 <_Balloc>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	b928      	cbnz	r0, 800ac2e <__i2b+0x1a>
 800ac22:	4b05      	ldr	r3, [pc, #20]	@ (800ac38 <__i2b+0x24>)
 800ac24:	4805      	ldr	r0, [pc, #20]	@ (800ac3c <__i2b+0x28>)
 800ac26:	f240 1145 	movw	r1, #325	@ 0x145
 800ac2a:	f001 fdf1 	bl	800c810 <__assert_func>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	6144      	str	r4, [r0, #20]
 800ac32:	6103      	str	r3, [r0, #16]
 800ac34:	bd10      	pop	{r4, pc}
 800ac36:	bf00      	nop
 800ac38:	0800d3c1 	.word	0x0800d3c1
 800ac3c:	0800d3d2 	.word	0x0800d3d2

0800ac40 <__multiply>:
 800ac40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac44:	4617      	mov	r7, r2
 800ac46:	690a      	ldr	r2, [r1, #16]
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	bfa8      	it	ge
 800ac4e:	463b      	movge	r3, r7
 800ac50:	4689      	mov	r9, r1
 800ac52:	bfa4      	itt	ge
 800ac54:	460f      	movge	r7, r1
 800ac56:	4699      	movge	r9, r3
 800ac58:	693d      	ldr	r5, [r7, #16]
 800ac5a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	6879      	ldr	r1, [r7, #4]
 800ac62:	eb05 060a 	add.w	r6, r5, sl
 800ac66:	42b3      	cmp	r3, r6
 800ac68:	b085      	sub	sp, #20
 800ac6a:	bfb8      	it	lt
 800ac6c:	3101      	addlt	r1, #1
 800ac6e:	f7ff fe93 	bl	800a998 <_Balloc>
 800ac72:	b930      	cbnz	r0, 800ac82 <__multiply+0x42>
 800ac74:	4602      	mov	r2, r0
 800ac76:	4b41      	ldr	r3, [pc, #260]	@ (800ad7c <__multiply+0x13c>)
 800ac78:	4841      	ldr	r0, [pc, #260]	@ (800ad80 <__multiply+0x140>)
 800ac7a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ac7e:	f001 fdc7 	bl	800c810 <__assert_func>
 800ac82:	f100 0414 	add.w	r4, r0, #20
 800ac86:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ac8a:	4623      	mov	r3, r4
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	4573      	cmp	r3, lr
 800ac90:	d320      	bcc.n	800acd4 <__multiply+0x94>
 800ac92:	f107 0814 	add.w	r8, r7, #20
 800ac96:	f109 0114 	add.w	r1, r9, #20
 800ac9a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ac9e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800aca2:	9302      	str	r3, [sp, #8]
 800aca4:	1beb      	subs	r3, r5, r7
 800aca6:	3b15      	subs	r3, #21
 800aca8:	f023 0303 	bic.w	r3, r3, #3
 800acac:	3304      	adds	r3, #4
 800acae:	3715      	adds	r7, #21
 800acb0:	42bd      	cmp	r5, r7
 800acb2:	bf38      	it	cc
 800acb4:	2304      	movcc	r3, #4
 800acb6:	9301      	str	r3, [sp, #4]
 800acb8:	9b02      	ldr	r3, [sp, #8]
 800acba:	9103      	str	r1, [sp, #12]
 800acbc:	428b      	cmp	r3, r1
 800acbe:	d80c      	bhi.n	800acda <__multiply+0x9a>
 800acc0:	2e00      	cmp	r6, #0
 800acc2:	dd03      	ble.n	800accc <__multiply+0x8c>
 800acc4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d055      	beq.n	800ad78 <__multiply+0x138>
 800accc:	6106      	str	r6, [r0, #16]
 800acce:	b005      	add	sp, #20
 800acd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd4:	f843 2b04 	str.w	r2, [r3], #4
 800acd8:	e7d9      	b.n	800ac8e <__multiply+0x4e>
 800acda:	f8b1 a000 	ldrh.w	sl, [r1]
 800acde:	f1ba 0f00 	cmp.w	sl, #0
 800ace2:	d01f      	beq.n	800ad24 <__multiply+0xe4>
 800ace4:	46c4      	mov	ip, r8
 800ace6:	46a1      	mov	r9, r4
 800ace8:	2700      	movs	r7, #0
 800acea:	f85c 2b04 	ldr.w	r2, [ip], #4
 800acee:	f8d9 3000 	ldr.w	r3, [r9]
 800acf2:	fa1f fb82 	uxth.w	fp, r2
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	fb0a 330b 	mla	r3, sl, fp, r3
 800acfc:	443b      	add	r3, r7
 800acfe:	f8d9 7000 	ldr.w	r7, [r9]
 800ad02:	0c12      	lsrs	r2, r2, #16
 800ad04:	0c3f      	lsrs	r7, r7, #16
 800ad06:	fb0a 7202 	mla	r2, sl, r2, r7
 800ad0a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad14:	4565      	cmp	r5, ip
 800ad16:	f849 3b04 	str.w	r3, [r9], #4
 800ad1a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ad1e:	d8e4      	bhi.n	800acea <__multiply+0xaa>
 800ad20:	9b01      	ldr	r3, [sp, #4]
 800ad22:	50e7      	str	r7, [r4, r3]
 800ad24:	9b03      	ldr	r3, [sp, #12]
 800ad26:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ad2a:	3104      	adds	r1, #4
 800ad2c:	f1b9 0f00 	cmp.w	r9, #0
 800ad30:	d020      	beq.n	800ad74 <__multiply+0x134>
 800ad32:	6823      	ldr	r3, [r4, #0]
 800ad34:	4647      	mov	r7, r8
 800ad36:	46a4      	mov	ip, r4
 800ad38:	f04f 0a00 	mov.w	sl, #0
 800ad3c:	f8b7 b000 	ldrh.w	fp, [r7]
 800ad40:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ad44:	fb09 220b 	mla	r2, r9, fp, r2
 800ad48:	4452      	add	r2, sl
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad50:	f84c 3b04 	str.w	r3, [ip], #4
 800ad54:	f857 3b04 	ldr.w	r3, [r7], #4
 800ad58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad5c:	f8bc 3000 	ldrh.w	r3, [ip]
 800ad60:	fb09 330a 	mla	r3, r9, sl, r3
 800ad64:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ad68:	42bd      	cmp	r5, r7
 800ad6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad6e:	d8e5      	bhi.n	800ad3c <__multiply+0xfc>
 800ad70:	9a01      	ldr	r2, [sp, #4]
 800ad72:	50a3      	str	r3, [r4, r2]
 800ad74:	3404      	adds	r4, #4
 800ad76:	e79f      	b.n	800acb8 <__multiply+0x78>
 800ad78:	3e01      	subs	r6, #1
 800ad7a:	e7a1      	b.n	800acc0 <__multiply+0x80>
 800ad7c:	0800d3c1 	.word	0x0800d3c1
 800ad80:	0800d3d2 	.word	0x0800d3d2

0800ad84 <__pow5mult>:
 800ad84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad88:	4615      	mov	r5, r2
 800ad8a:	f012 0203 	ands.w	r2, r2, #3
 800ad8e:	4607      	mov	r7, r0
 800ad90:	460e      	mov	r6, r1
 800ad92:	d007      	beq.n	800ada4 <__pow5mult+0x20>
 800ad94:	4c25      	ldr	r4, [pc, #148]	@ (800ae2c <__pow5mult+0xa8>)
 800ad96:	3a01      	subs	r2, #1
 800ad98:	2300      	movs	r3, #0
 800ad9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad9e:	f7ff fe5d 	bl	800aa5c <__multadd>
 800ada2:	4606      	mov	r6, r0
 800ada4:	10ad      	asrs	r5, r5, #2
 800ada6:	d03d      	beq.n	800ae24 <__pow5mult+0xa0>
 800ada8:	69fc      	ldr	r4, [r7, #28]
 800adaa:	b97c      	cbnz	r4, 800adcc <__pow5mult+0x48>
 800adac:	2010      	movs	r0, #16
 800adae:	f7ff fd3d 	bl	800a82c <malloc>
 800adb2:	4602      	mov	r2, r0
 800adb4:	61f8      	str	r0, [r7, #28]
 800adb6:	b928      	cbnz	r0, 800adc4 <__pow5mult+0x40>
 800adb8:	4b1d      	ldr	r3, [pc, #116]	@ (800ae30 <__pow5mult+0xac>)
 800adba:	481e      	ldr	r0, [pc, #120]	@ (800ae34 <__pow5mult+0xb0>)
 800adbc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800adc0:	f001 fd26 	bl	800c810 <__assert_func>
 800adc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800adc8:	6004      	str	r4, [r0, #0]
 800adca:	60c4      	str	r4, [r0, #12]
 800adcc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800add0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800add4:	b94c      	cbnz	r4, 800adea <__pow5mult+0x66>
 800add6:	f240 2171 	movw	r1, #625	@ 0x271
 800adda:	4638      	mov	r0, r7
 800addc:	f7ff ff1a 	bl	800ac14 <__i2b>
 800ade0:	2300      	movs	r3, #0
 800ade2:	f8c8 0008 	str.w	r0, [r8, #8]
 800ade6:	4604      	mov	r4, r0
 800ade8:	6003      	str	r3, [r0, #0]
 800adea:	f04f 0900 	mov.w	r9, #0
 800adee:	07eb      	lsls	r3, r5, #31
 800adf0:	d50a      	bpl.n	800ae08 <__pow5mult+0x84>
 800adf2:	4631      	mov	r1, r6
 800adf4:	4622      	mov	r2, r4
 800adf6:	4638      	mov	r0, r7
 800adf8:	f7ff ff22 	bl	800ac40 <__multiply>
 800adfc:	4631      	mov	r1, r6
 800adfe:	4680      	mov	r8, r0
 800ae00:	4638      	mov	r0, r7
 800ae02:	f7ff fe09 	bl	800aa18 <_Bfree>
 800ae06:	4646      	mov	r6, r8
 800ae08:	106d      	asrs	r5, r5, #1
 800ae0a:	d00b      	beq.n	800ae24 <__pow5mult+0xa0>
 800ae0c:	6820      	ldr	r0, [r4, #0]
 800ae0e:	b938      	cbnz	r0, 800ae20 <__pow5mult+0x9c>
 800ae10:	4622      	mov	r2, r4
 800ae12:	4621      	mov	r1, r4
 800ae14:	4638      	mov	r0, r7
 800ae16:	f7ff ff13 	bl	800ac40 <__multiply>
 800ae1a:	6020      	str	r0, [r4, #0]
 800ae1c:	f8c0 9000 	str.w	r9, [r0]
 800ae20:	4604      	mov	r4, r0
 800ae22:	e7e4      	b.n	800adee <__pow5mult+0x6a>
 800ae24:	4630      	mov	r0, r6
 800ae26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae2a:	bf00      	nop
 800ae2c:	0800d4e4 	.word	0x0800d4e4
 800ae30:	0800d352 	.word	0x0800d352
 800ae34:	0800d3d2 	.word	0x0800d3d2

0800ae38 <__lshift>:
 800ae38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae3c:	460c      	mov	r4, r1
 800ae3e:	6849      	ldr	r1, [r1, #4]
 800ae40:	6923      	ldr	r3, [r4, #16]
 800ae42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae46:	68a3      	ldr	r3, [r4, #8]
 800ae48:	4607      	mov	r7, r0
 800ae4a:	4691      	mov	r9, r2
 800ae4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae50:	f108 0601 	add.w	r6, r8, #1
 800ae54:	42b3      	cmp	r3, r6
 800ae56:	db0b      	blt.n	800ae70 <__lshift+0x38>
 800ae58:	4638      	mov	r0, r7
 800ae5a:	f7ff fd9d 	bl	800a998 <_Balloc>
 800ae5e:	4605      	mov	r5, r0
 800ae60:	b948      	cbnz	r0, 800ae76 <__lshift+0x3e>
 800ae62:	4602      	mov	r2, r0
 800ae64:	4b28      	ldr	r3, [pc, #160]	@ (800af08 <__lshift+0xd0>)
 800ae66:	4829      	ldr	r0, [pc, #164]	@ (800af0c <__lshift+0xd4>)
 800ae68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ae6c:	f001 fcd0 	bl	800c810 <__assert_func>
 800ae70:	3101      	adds	r1, #1
 800ae72:	005b      	lsls	r3, r3, #1
 800ae74:	e7ee      	b.n	800ae54 <__lshift+0x1c>
 800ae76:	2300      	movs	r3, #0
 800ae78:	f100 0114 	add.w	r1, r0, #20
 800ae7c:	f100 0210 	add.w	r2, r0, #16
 800ae80:	4618      	mov	r0, r3
 800ae82:	4553      	cmp	r3, sl
 800ae84:	db33      	blt.n	800aeee <__lshift+0xb6>
 800ae86:	6920      	ldr	r0, [r4, #16]
 800ae88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae8c:	f104 0314 	add.w	r3, r4, #20
 800ae90:	f019 091f 	ands.w	r9, r9, #31
 800ae94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae9c:	d02b      	beq.n	800aef6 <__lshift+0xbe>
 800ae9e:	f1c9 0e20 	rsb	lr, r9, #32
 800aea2:	468a      	mov	sl, r1
 800aea4:	2200      	movs	r2, #0
 800aea6:	6818      	ldr	r0, [r3, #0]
 800aea8:	fa00 f009 	lsl.w	r0, r0, r9
 800aeac:	4310      	orrs	r0, r2
 800aeae:	f84a 0b04 	str.w	r0, [sl], #4
 800aeb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeb6:	459c      	cmp	ip, r3
 800aeb8:	fa22 f20e 	lsr.w	r2, r2, lr
 800aebc:	d8f3      	bhi.n	800aea6 <__lshift+0x6e>
 800aebe:	ebac 0304 	sub.w	r3, ip, r4
 800aec2:	3b15      	subs	r3, #21
 800aec4:	f023 0303 	bic.w	r3, r3, #3
 800aec8:	3304      	adds	r3, #4
 800aeca:	f104 0015 	add.w	r0, r4, #21
 800aece:	4560      	cmp	r0, ip
 800aed0:	bf88      	it	hi
 800aed2:	2304      	movhi	r3, #4
 800aed4:	50ca      	str	r2, [r1, r3]
 800aed6:	b10a      	cbz	r2, 800aedc <__lshift+0xa4>
 800aed8:	f108 0602 	add.w	r6, r8, #2
 800aedc:	3e01      	subs	r6, #1
 800aede:	4638      	mov	r0, r7
 800aee0:	612e      	str	r6, [r5, #16]
 800aee2:	4621      	mov	r1, r4
 800aee4:	f7ff fd98 	bl	800aa18 <_Bfree>
 800aee8:	4628      	mov	r0, r5
 800aeea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeee:	f842 0f04 	str.w	r0, [r2, #4]!
 800aef2:	3301      	adds	r3, #1
 800aef4:	e7c5      	b.n	800ae82 <__lshift+0x4a>
 800aef6:	3904      	subs	r1, #4
 800aef8:	f853 2b04 	ldr.w	r2, [r3], #4
 800aefc:	f841 2f04 	str.w	r2, [r1, #4]!
 800af00:	459c      	cmp	ip, r3
 800af02:	d8f9      	bhi.n	800aef8 <__lshift+0xc0>
 800af04:	e7ea      	b.n	800aedc <__lshift+0xa4>
 800af06:	bf00      	nop
 800af08:	0800d3c1 	.word	0x0800d3c1
 800af0c:	0800d3d2 	.word	0x0800d3d2

0800af10 <__mcmp>:
 800af10:	690a      	ldr	r2, [r1, #16]
 800af12:	4603      	mov	r3, r0
 800af14:	6900      	ldr	r0, [r0, #16]
 800af16:	1a80      	subs	r0, r0, r2
 800af18:	b530      	push	{r4, r5, lr}
 800af1a:	d10e      	bne.n	800af3a <__mcmp+0x2a>
 800af1c:	3314      	adds	r3, #20
 800af1e:	3114      	adds	r1, #20
 800af20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800af24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800af28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af30:	4295      	cmp	r5, r2
 800af32:	d003      	beq.n	800af3c <__mcmp+0x2c>
 800af34:	d205      	bcs.n	800af42 <__mcmp+0x32>
 800af36:	f04f 30ff 	mov.w	r0, #4294967295
 800af3a:	bd30      	pop	{r4, r5, pc}
 800af3c:	42a3      	cmp	r3, r4
 800af3e:	d3f3      	bcc.n	800af28 <__mcmp+0x18>
 800af40:	e7fb      	b.n	800af3a <__mcmp+0x2a>
 800af42:	2001      	movs	r0, #1
 800af44:	e7f9      	b.n	800af3a <__mcmp+0x2a>
	...

0800af48 <__mdiff>:
 800af48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af4c:	4689      	mov	r9, r1
 800af4e:	4606      	mov	r6, r0
 800af50:	4611      	mov	r1, r2
 800af52:	4648      	mov	r0, r9
 800af54:	4614      	mov	r4, r2
 800af56:	f7ff ffdb 	bl	800af10 <__mcmp>
 800af5a:	1e05      	subs	r5, r0, #0
 800af5c:	d112      	bne.n	800af84 <__mdiff+0x3c>
 800af5e:	4629      	mov	r1, r5
 800af60:	4630      	mov	r0, r6
 800af62:	f7ff fd19 	bl	800a998 <_Balloc>
 800af66:	4602      	mov	r2, r0
 800af68:	b928      	cbnz	r0, 800af76 <__mdiff+0x2e>
 800af6a:	4b3f      	ldr	r3, [pc, #252]	@ (800b068 <__mdiff+0x120>)
 800af6c:	f240 2137 	movw	r1, #567	@ 0x237
 800af70:	483e      	ldr	r0, [pc, #248]	@ (800b06c <__mdiff+0x124>)
 800af72:	f001 fc4d 	bl	800c810 <__assert_func>
 800af76:	2301      	movs	r3, #1
 800af78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af7c:	4610      	mov	r0, r2
 800af7e:	b003      	add	sp, #12
 800af80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af84:	bfbc      	itt	lt
 800af86:	464b      	movlt	r3, r9
 800af88:	46a1      	movlt	r9, r4
 800af8a:	4630      	mov	r0, r6
 800af8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800af90:	bfba      	itte	lt
 800af92:	461c      	movlt	r4, r3
 800af94:	2501      	movlt	r5, #1
 800af96:	2500      	movge	r5, #0
 800af98:	f7ff fcfe 	bl	800a998 <_Balloc>
 800af9c:	4602      	mov	r2, r0
 800af9e:	b918      	cbnz	r0, 800afa8 <__mdiff+0x60>
 800afa0:	4b31      	ldr	r3, [pc, #196]	@ (800b068 <__mdiff+0x120>)
 800afa2:	f240 2145 	movw	r1, #581	@ 0x245
 800afa6:	e7e3      	b.n	800af70 <__mdiff+0x28>
 800afa8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800afac:	6926      	ldr	r6, [r4, #16]
 800afae:	60c5      	str	r5, [r0, #12]
 800afb0:	f109 0310 	add.w	r3, r9, #16
 800afb4:	f109 0514 	add.w	r5, r9, #20
 800afb8:	f104 0e14 	add.w	lr, r4, #20
 800afbc:	f100 0b14 	add.w	fp, r0, #20
 800afc0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800afc4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800afc8:	9301      	str	r3, [sp, #4]
 800afca:	46d9      	mov	r9, fp
 800afcc:	f04f 0c00 	mov.w	ip, #0
 800afd0:	9b01      	ldr	r3, [sp, #4]
 800afd2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800afd6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800afda:	9301      	str	r3, [sp, #4]
 800afdc:	fa1f f38a 	uxth.w	r3, sl
 800afe0:	4619      	mov	r1, r3
 800afe2:	b283      	uxth	r3, r0
 800afe4:	1acb      	subs	r3, r1, r3
 800afe6:	0c00      	lsrs	r0, r0, #16
 800afe8:	4463      	add	r3, ip
 800afea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800afee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aff8:	4576      	cmp	r6, lr
 800affa:	f849 3b04 	str.w	r3, [r9], #4
 800affe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b002:	d8e5      	bhi.n	800afd0 <__mdiff+0x88>
 800b004:	1b33      	subs	r3, r6, r4
 800b006:	3b15      	subs	r3, #21
 800b008:	f023 0303 	bic.w	r3, r3, #3
 800b00c:	3415      	adds	r4, #21
 800b00e:	3304      	adds	r3, #4
 800b010:	42a6      	cmp	r6, r4
 800b012:	bf38      	it	cc
 800b014:	2304      	movcc	r3, #4
 800b016:	441d      	add	r5, r3
 800b018:	445b      	add	r3, fp
 800b01a:	461e      	mov	r6, r3
 800b01c:	462c      	mov	r4, r5
 800b01e:	4544      	cmp	r4, r8
 800b020:	d30e      	bcc.n	800b040 <__mdiff+0xf8>
 800b022:	f108 0103 	add.w	r1, r8, #3
 800b026:	1b49      	subs	r1, r1, r5
 800b028:	f021 0103 	bic.w	r1, r1, #3
 800b02c:	3d03      	subs	r5, #3
 800b02e:	45a8      	cmp	r8, r5
 800b030:	bf38      	it	cc
 800b032:	2100      	movcc	r1, #0
 800b034:	440b      	add	r3, r1
 800b036:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b03a:	b191      	cbz	r1, 800b062 <__mdiff+0x11a>
 800b03c:	6117      	str	r7, [r2, #16]
 800b03e:	e79d      	b.n	800af7c <__mdiff+0x34>
 800b040:	f854 1b04 	ldr.w	r1, [r4], #4
 800b044:	46e6      	mov	lr, ip
 800b046:	0c08      	lsrs	r0, r1, #16
 800b048:	fa1c fc81 	uxtah	ip, ip, r1
 800b04c:	4471      	add	r1, lr
 800b04e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b052:	b289      	uxth	r1, r1
 800b054:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b058:	f846 1b04 	str.w	r1, [r6], #4
 800b05c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b060:	e7dd      	b.n	800b01e <__mdiff+0xd6>
 800b062:	3f01      	subs	r7, #1
 800b064:	e7e7      	b.n	800b036 <__mdiff+0xee>
 800b066:	bf00      	nop
 800b068:	0800d3c1 	.word	0x0800d3c1
 800b06c:	0800d3d2 	.word	0x0800d3d2

0800b070 <__ulp>:
 800b070:	b082      	sub	sp, #8
 800b072:	ed8d 0b00 	vstr	d0, [sp]
 800b076:	9a01      	ldr	r2, [sp, #4]
 800b078:	4b0f      	ldr	r3, [pc, #60]	@ (800b0b8 <__ulp+0x48>)
 800b07a:	4013      	ands	r3, r2
 800b07c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b080:	2b00      	cmp	r3, #0
 800b082:	dc08      	bgt.n	800b096 <__ulp+0x26>
 800b084:	425b      	negs	r3, r3
 800b086:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b08a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b08e:	da04      	bge.n	800b09a <__ulp+0x2a>
 800b090:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b094:	4113      	asrs	r3, r2
 800b096:	2200      	movs	r2, #0
 800b098:	e008      	b.n	800b0ac <__ulp+0x3c>
 800b09a:	f1a2 0314 	sub.w	r3, r2, #20
 800b09e:	2b1e      	cmp	r3, #30
 800b0a0:	bfda      	itte	le
 800b0a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b0a6:	40da      	lsrle	r2, r3
 800b0a8:	2201      	movgt	r2, #1
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	4610      	mov	r0, r2
 800b0b0:	ec41 0b10 	vmov	d0, r0, r1
 800b0b4:	b002      	add	sp, #8
 800b0b6:	4770      	bx	lr
 800b0b8:	7ff00000 	.word	0x7ff00000

0800b0bc <__b2d>:
 800b0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0c0:	6906      	ldr	r6, [r0, #16]
 800b0c2:	f100 0814 	add.w	r8, r0, #20
 800b0c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b0ca:	1f37      	subs	r7, r6, #4
 800b0cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b0d0:	4610      	mov	r0, r2
 800b0d2:	f7ff fd53 	bl	800ab7c <__hi0bits>
 800b0d6:	f1c0 0320 	rsb	r3, r0, #32
 800b0da:	280a      	cmp	r0, #10
 800b0dc:	600b      	str	r3, [r1, #0]
 800b0de:	491b      	ldr	r1, [pc, #108]	@ (800b14c <__b2d+0x90>)
 800b0e0:	dc15      	bgt.n	800b10e <__b2d+0x52>
 800b0e2:	f1c0 0c0b 	rsb	ip, r0, #11
 800b0e6:	fa22 f30c 	lsr.w	r3, r2, ip
 800b0ea:	45b8      	cmp	r8, r7
 800b0ec:	ea43 0501 	orr.w	r5, r3, r1
 800b0f0:	bf34      	ite	cc
 800b0f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b0f6:	2300      	movcs	r3, #0
 800b0f8:	3015      	adds	r0, #21
 800b0fa:	fa02 f000 	lsl.w	r0, r2, r0
 800b0fe:	fa23 f30c 	lsr.w	r3, r3, ip
 800b102:	4303      	orrs	r3, r0
 800b104:	461c      	mov	r4, r3
 800b106:	ec45 4b10 	vmov	d0, r4, r5
 800b10a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b10e:	45b8      	cmp	r8, r7
 800b110:	bf3a      	itte	cc
 800b112:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b116:	f1a6 0708 	subcc.w	r7, r6, #8
 800b11a:	2300      	movcs	r3, #0
 800b11c:	380b      	subs	r0, #11
 800b11e:	d012      	beq.n	800b146 <__b2d+0x8a>
 800b120:	f1c0 0120 	rsb	r1, r0, #32
 800b124:	fa23 f401 	lsr.w	r4, r3, r1
 800b128:	4082      	lsls	r2, r0
 800b12a:	4322      	orrs	r2, r4
 800b12c:	4547      	cmp	r7, r8
 800b12e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b132:	bf8c      	ite	hi
 800b134:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b138:	2200      	movls	r2, #0
 800b13a:	4083      	lsls	r3, r0
 800b13c:	40ca      	lsrs	r2, r1
 800b13e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b142:	4313      	orrs	r3, r2
 800b144:	e7de      	b.n	800b104 <__b2d+0x48>
 800b146:	ea42 0501 	orr.w	r5, r2, r1
 800b14a:	e7db      	b.n	800b104 <__b2d+0x48>
 800b14c:	3ff00000 	.word	0x3ff00000

0800b150 <__d2b>:
 800b150:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b154:	460f      	mov	r7, r1
 800b156:	2101      	movs	r1, #1
 800b158:	ec59 8b10 	vmov	r8, r9, d0
 800b15c:	4616      	mov	r6, r2
 800b15e:	f7ff fc1b 	bl	800a998 <_Balloc>
 800b162:	4604      	mov	r4, r0
 800b164:	b930      	cbnz	r0, 800b174 <__d2b+0x24>
 800b166:	4602      	mov	r2, r0
 800b168:	4b23      	ldr	r3, [pc, #140]	@ (800b1f8 <__d2b+0xa8>)
 800b16a:	4824      	ldr	r0, [pc, #144]	@ (800b1fc <__d2b+0xac>)
 800b16c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b170:	f001 fb4e 	bl	800c810 <__assert_func>
 800b174:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b178:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b17c:	b10d      	cbz	r5, 800b182 <__d2b+0x32>
 800b17e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b182:	9301      	str	r3, [sp, #4]
 800b184:	f1b8 0300 	subs.w	r3, r8, #0
 800b188:	d023      	beq.n	800b1d2 <__d2b+0x82>
 800b18a:	4668      	mov	r0, sp
 800b18c:	9300      	str	r3, [sp, #0]
 800b18e:	f7ff fd14 	bl	800abba <__lo0bits>
 800b192:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b196:	b1d0      	cbz	r0, 800b1ce <__d2b+0x7e>
 800b198:	f1c0 0320 	rsb	r3, r0, #32
 800b19c:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a0:	430b      	orrs	r3, r1
 800b1a2:	40c2      	lsrs	r2, r0
 800b1a4:	6163      	str	r3, [r4, #20]
 800b1a6:	9201      	str	r2, [sp, #4]
 800b1a8:	9b01      	ldr	r3, [sp, #4]
 800b1aa:	61a3      	str	r3, [r4, #24]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	bf0c      	ite	eq
 800b1b0:	2201      	moveq	r2, #1
 800b1b2:	2202      	movne	r2, #2
 800b1b4:	6122      	str	r2, [r4, #16]
 800b1b6:	b1a5      	cbz	r5, 800b1e2 <__d2b+0x92>
 800b1b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b1bc:	4405      	add	r5, r0
 800b1be:	603d      	str	r5, [r7, #0]
 800b1c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b1c4:	6030      	str	r0, [r6, #0]
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	b003      	add	sp, #12
 800b1ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1ce:	6161      	str	r1, [r4, #20]
 800b1d0:	e7ea      	b.n	800b1a8 <__d2b+0x58>
 800b1d2:	a801      	add	r0, sp, #4
 800b1d4:	f7ff fcf1 	bl	800abba <__lo0bits>
 800b1d8:	9b01      	ldr	r3, [sp, #4]
 800b1da:	6163      	str	r3, [r4, #20]
 800b1dc:	3020      	adds	r0, #32
 800b1de:	2201      	movs	r2, #1
 800b1e0:	e7e8      	b.n	800b1b4 <__d2b+0x64>
 800b1e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b1e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b1ea:	6038      	str	r0, [r7, #0]
 800b1ec:	6918      	ldr	r0, [r3, #16]
 800b1ee:	f7ff fcc5 	bl	800ab7c <__hi0bits>
 800b1f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b1f6:	e7e5      	b.n	800b1c4 <__d2b+0x74>
 800b1f8:	0800d3c1 	.word	0x0800d3c1
 800b1fc:	0800d3d2 	.word	0x0800d3d2

0800b200 <__ratio>:
 800b200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b204:	b085      	sub	sp, #20
 800b206:	e9cd 1000 	strd	r1, r0, [sp]
 800b20a:	a902      	add	r1, sp, #8
 800b20c:	f7ff ff56 	bl	800b0bc <__b2d>
 800b210:	9800      	ldr	r0, [sp, #0]
 800b212:	a903      	add	r1, sp, #12
 800b214:	ec55 4b10 	vmov	r4, r5, d0
 800b218:	f7ff ff50 	bl	800b0bc <__b2d>
 800b21c:	9b01      	ldr	r3, [sp, #4]
 800b21e:	6919      	ldr	r1, [r3, #16]
 800b220:	9b00      	ldr	r3, [sp, #0]
 800b222:	691b      	ldr	r3, [r3, #16]
 800b224:	1ac9      	subs	r1, r1, r3
 800b226:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b22a:	1a9b      	subs	r3, r3, r2
 800b22c:	ec5b ab10 	vmov	sl, fp, d0
 800b230:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b234:	2b00      	cmp	r3, #0
 800b236:	bfce      	itee	gt
 800b238:	462a      	movgt	r2, r5
 800b23a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b23e:	465a      	movle	r2, fp
 800b240:	462f      	mov	r7, r5
 800b242:	46d9      	mov	r9, fp
 800b244:	bfcc      	ite	gt
 800b246:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b24a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b24e:	464b      	mov	r3, r9
 800b250:	4652      	mov	r2, sl
 800b252:	4620      	mov	r0, r4
 800b254:	4639      	mov	r1, r7
 800b256:	f7f5 fb01 	bl	800085c <__aeabi_ddiv>
 800b25a:	ec41 0b10 	vmov	d0, r0, r1
 800b25e:	b005      	add	sp, #20
 800b260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b264 <__copybits>:
 800b264:	3901      	subs	r1, #1
 800b266:	b570      	push	{r4, r5, r6, lr}
 800b268:	1149      	asrs	r1, r1, #5
 800b26a:	6914      	ldr	r4, [r2, #16]
 800b26c:	3101      	adds	r1, #1
 800b26e:	f102 0314 	add.w	r3, r2, #20
 800b272:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b276:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b27a:	1f05      	subs	r5, r0, #4
 800b27c:	42a3      	cmp	r3, r4
 800b27e:	d30c      	bcc.n	800b29a <__copybits+0x36>
 800b280:	1aa3      	subs	r3, r4, r2
 800b282:	3b11      	subs	r3, #17
 800b284:	f023 0303 	bic.w	r3, r3, #3
 800b288:	3211      	adds	r2, #17
 800b28a:	42a2      	cmp	r2, r4
 800b28c:	bf88      	it	hi
 800b28e:	2300      	movhi	r3, #0
 800b290:	4418      	add	r0, r3
 800b292:	2300      	movs	r3, #0
 800b294:	4288      	cmp	r0, r1
 800b296:	d305      	bcc.n	800b2a4 <__copybits+0x40>
 800b298:	bd70      	pop	{r4, r5, r6, pc}
 800b29a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b29e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b2a2:	e7eb      	b.n	800b27c <__copybits+0x18>
 800b2a4:	f840 3b04 	str.w	r3, [r0], #4
 800b2a8:	e7f4      	b.n	800b294 <__copybits+0x30>

0800b2aa <__any_on>:
 800b2aa:	f100 0214 	add.w	r2, r0, #20
 800b2ae:	6900      	ldr	r0, [r0, #16]
 800b2b0:	114b      	asrs	r3, r1, #5
 800b2b2:	4298      	cmp	r0, r3
 800b2b4:	b510      	push	{r4, lr}
 800b2b6:	db11      	blt.n	800b2dc <__any_on+0x32>
 800b2b8:	dd0a      	ble.n	800b2d0 <__any_on+0x26>
 800b2ba:	f011 011f 	ands.w	r1, r1, #31
 800b2be:	d007      	beq.n	800b2d0 <__any_on+0x26>
 800b2c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b2c4:	fa24 f001 	lsr.w	r0, r4, r1
 800b2c8:	fa00 f101 	lsl.w	r1, r0, r1
 800b2cc:	428c      	cmp	r4, r1
 800b2ce:	d10b      	bne.n	800b2e8 <__any_on+0x3e>
 800b2d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d803      	bhi.n	800b2e0 <__any_on+0x36>
 800b2d8:	2000      	movs	r0, #0
 800b2da:	bd10      	pop	{r4, pc}
 800b2dc:	4603      	mov	r3, r0
 800b2de:	e7f7      	b.n	800b2d0 <__any_on+0x26>
 800b2e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b2e4:	2900      	cmp	r1, #0
 800b2e6:	d0f5      	beq.n	800b2d4 <__any_on+0x2a>
 800b2e8:	2001      	movs	r0, #1
 800b2ea:	e7f6      	b.n	800b2da <__any_on+0x30>

0800b2ec <sulp>:
 800b2ec:	b570      	push	{r4, r5, r6, lr}
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	460d      	mov	r5, r1
 800b2f2:	ec45 4b10 	vmov	d0, r4, r5
 800b2f6:	4616      	mov	r6, r2
 800b2f8:	f7ff feba 	bl	800b070 <__ulp>
 800b2fc:	ec51 0b10 	vmov	r0, r1, d0
 800b300:	b17e      	cbz	r6, 800b322 <sulp+0x36>
 800b302:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b306:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	dd09      	ble.n	800b322 <sulp+0x36>
 800b30e:	051b      	lsls	r3, r3, #20
 800b310:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b314:	2400      	movs	r4, #0
 800b316:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b31a:	4622      	mov	r2, r4
 800b31c:	462b      	mov	r3, r5
 800b31e:	f7f5 f973 	bl	8000608 <__aeabi_dmul>
 800b322:	ec41 0b10 	vmov	d0, r0, r1
 800b326:	bd70      	pop	{r4, r5, r6, pc}

0800b328 <_strtod_l>:
 800b328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32c:	b09f      	sub	sp, #124	@ 0x7c
 800b32e:	460c      	mov	r4, r1
 800b330:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b332:	2200      	movs	r2, #0
 800b334:	921a      	str	r2, [sp, #104]	@ 0x68
 800b336:	9005      	str	r0, [sp, #20]
 800b338:	f04f 0a00 	mov.w	sl, #0
 800b33c:	f04f 0b00 	mov.w	fp, #0
 800b340:	460a      	mov	r2, r1
 800b342:	9219      	str	r2, [sp, #100]	@ 0x64
 800b344:	7811      	ldrb	r1, [r2, #0]
 800b346:	292b      	cmp	r1, #43	@ 0x2b
 800b348:	d04a      	beq.n	800b3e0 <_strtod_l+0xb8>
 800b34a:	d838      	bhi.n	800b3be <_strtod_l+0x96>
 800b34c:	290d      	cmp	r1, #13
 800b34e:	d832      	bhi.n	800b3b6 <_strtod_l+0x8e>
 800b350:	2908      	cmp	r1, #8
 800b352:	d832      	bhi.n	800b3ba <_strtod_l+0x92>
 800b354:	2900      	cmp	r1, #0
 800b356:	d03b      	beq.n	800b3d0 <_strtod_l+0xa8>
 800b358:	2200      	movs	r2, #0
 800b35a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b35c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b35e:	782a      	ldrb	r2, [r5, #0]
 800b360:	2a30      	cmp	r2, #48	@ 0x30
 800b362:	f040 80b2 	bne.w	800b4ca <_strtod_l+0x1a2>
 800b366:	786a      	ldrb	r2, [r5, #1]
 800b368:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b36c:	2a58      	cmp	r2, #88	@ 0x58
 800b36e:	d16e      	bne.n	800b44e <_strtod_l+0x126>
 800b370:	9302      	str	r3, [sp, #8]
 800b372:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b374:	9301      	str	r3, [sp, #4]
 800b376:	ab1a      	add	r3, sp, #104	@ 0x68
 800b378:	9300      	str	r3, [sp, #0]
 800b37a:	4a8f      	ldr	r2, [pc, #572]	@ (800b5b8 <_strtod_l+0x290>)
 800b37c:	9805      	ldr	r0, [sp, #20]
 800b37e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b380:	a919      	add	r1, sp, #100	@ 0x64
 800b382:	f001 fadf 	bl	800c944 <__gethex>
 800b386:	f010 060f 	ands.w	r6, r0, #15
 800b38a:	4604      	mov	r4, r0
 800b38c:	d005      	beq.n	800b39a <_strtod_l+0x72>
 800b38e:	2e06      	cmp	r6, #6
 800b390:	d128      	bne.n	800b3e4 <_strtod_l+0xbc>
 800b392:	3501      	adds	r5, #1
 800b394:	2300      	movs	r3, #0
 800b396:	9519      	str	r5, [sp, #100]	@ 0x64
 800b398:	930e      	str	r3, [sp, #56]	@ 0x38
 800b39a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	f040 858e 	bne.w	800bebe <_strtod_l+0xb96>
 800b3a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3a4:	b1cb      	cbz	r3, 800b3da <_strtod_l+0xb2>
 800b3a6:	4652      	mov	r2, sl
 800b3a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b3ac:	ec43 2b10 	vmov	d0, r2, r3
 800b3b0:	b01f      	add	sp, #124	@ 0x7c
 800b3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b6:	2920      	cmp	r1, #32
 800b3b8:	d1ce      	bne.n	800b358 <_strtod_l+0x30>
 800b3ba:	3201      	adds	r2, #1
 800b3bc:	e7c1      	b.n	800b342 <_strtod_l+0x1a>
 800b3be:	292d      	cmp	r1, #45	@ 0x2d
 800b3c0:	d1ca      	bne.n	800b358 <_strtod_l+0x30>
 800b3c2:	2101      	movs	r1, #1
 800b3c4:	910e      	str	r1, [sp, #56]	@ 0x38
 800b3c6:	1c51      	adds	r1, r2, #1
 800b3c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800b3ca:	7852      	ldrb	r2, [r2, #1]
 800b3cc:	2a00      	cmp	r2, #0
 800b3ce:	d1c5      	bne.n	800b35c <_strtod_l+0x34>
 800b3d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b3d2:	9419      	str	r4, [sp, #100]	@ 0x64
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f040 8570 	bne.w	800beba <_strtod_l+0xb92>
 800b3da:	4652      	mov	r2, sl
 800b3dc:	465b      	mov	r3, fp
 800b3de:	e7e5      	b.n	800b3ac <_strtod_l+0x84>
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	e7ef      	b.n	800b3c4 <_strtod_l+0x9c>
 800b3e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b3e6:	b13a      	cbz	r2, 800b3f8 <_strtod_l+0xd0>
 800b3e8:	2135      	movs	r1, #53	@ 0x35
 800b3ea:	a81c      	add	r0, sp, #112	@ 0x70
 800b3ec:	f7ff ff3a 	bl	800b264 <__copybits>
 800b3f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b3f2:	9805      	ldr	r0, [sp, #20]
 800b3f4:	f7ff fb10 	bl	800aa18 <_Bfree>
 800b3f8:	3e01      	subs	r6, #1
 800b3fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b3fc:	2e04      	cmp	r6, #4
 800b3fe:	d806      	bhi.n	800b40e <_strtod_l+0xe6>
 800b400:	e8df f006 	tbb	[pc, r6]
 800b404:	201d0314 	.word	0x201d0314
 800b408:	14          	.byte	0x14
 800b409:	00          	.byte	0x00
 800b40a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b40e:	05e1      	lsls	r1, r4, #23
 800b410:	bf48      	it	mi
 800b412:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b416:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b41a:	0d1b      	lsrs	r3, r3, #20
 800b41c:	051b      	lsls	r3, r3, #20
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d1bb      	bne.n	800b39a <_strtod_l+0x72>
 800b422:	f7fe fb1f 	bl	8009a64 <__errno>
 800b426:	2322      	movs	r3, #34	@ 0x22
 800b428:	6003      	str	r3, [r0, #0]
 800b42a:	e7b6      	b.n	800b39a <_strtod_l+0x72>
 800b42c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b430:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b434:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b438:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b43c:	e7e7      	b.n	800b40e <_strtod_l+0xe6>
 800b43e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800b5c0 <_strtod_l+0x298>
 800b442:	e7e4      	b.n	800b40e <_strtod_l+0xe6>
 800b444:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b448:	f04f 3aff 	mov.w	sl, #4294967295
 800b44c:	e7df      	b.n	800b40e <_strtod_l+0xe6>
 800b44e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b450:	1c5a      	adds	r2, r3, #1
 800b452:	9219      	str	r2, [sp, #100]	@ 0x64
 800b454:	785b      	ldrb	r3, [r3, #1]
 800b456:	2b30      	cmp	r3, #48	@ 0x30
 800b458:	d0f9      	beq.n	800b44e <_strtod_l+0x126>
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d09d      	beq.n	800b39a <_strtod_l+0x72>
 800b45e:	2301      	movs	r3, #1
 800b460:	2700      	movs	r7, #0
 800b462:	9308      	str	r3, [sp, #32]
 800b464:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b466:	930c      	str	r3, [sp, #48]	@ 0x30
 800b468:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b46a:	46b9      	mov	r9, r7
 800b46c:	220a      	movs	r2, #10
 800b46e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b470:	7805      	ldrb	r5, [r0, #0]
 800b472:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b476:	b2d9      	uxtb	r1, r3
 800b478:	2909      	cmp	r1, #9
 800b47a:	d928      	bls.n	800b4ce <_strtod_l+0x1a6>
 800b47c:	494f      	ldr	r1, [pc, #316]	@ (800b5bc <_strtod_l+0x294>)
 800b47e:	2201      	movs	r2, #1
 800b480:	f001 f97a 	bl	800c778 <strncmp>
 800b484:	2800      	cmp	r0, #0
 800b486:	d032      	beq.n	800b4ee <_strtod_l+0x1c6>
 800b488:	2000      	movs	r0, #0
 800b48a:	462a      	mov	r2, r5
 800b48c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b48e:	464d      	mov	r5, r9
 800b490:	4603      	mov	r3, r0
 800b492:	2a65      	cmp	r2, #101	@ 0x65
 800b494:	d001      	beq.n	800b49a <_strtod_l+0x172>
 800b496:	2a45      	cmp	r2, #69	@ 0x45
 800b498:	d114      	bne.n	800b4c4 <_strtod_l+0x19c>
 800b49a:	b91d      	cbnz	r5, 800b4a4 <_strtod_l+0x17c>
 800b49c:	9a08      	ldr	r2, [sp, #32]
 800b49e:	4302      	orrs	r2, r0
 800b4a0:	d096      	beq.n	800b3d0 <_strtod_l+0xa8>
 800b4a2:	2500      	movs	r5, #0
 800b4a4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b4a6:	1c62      	adds	r2, r4, #1
 800b4a8:	9219      	str	r2, [sp, #100]	@ 0x64
 800b4aa:	7862      	ldrb	r2, [r4, #1]
 800b4ac:	2a2b      	cmp	r2, #43	@ 0x2b
 800b4ae:	d07a      	beq.n	800b5a6 <_strtod_l+0x27e>
 800b4b0:	2a2d      	cmp	r2, #45	@ 0x2d
 800b4b2:	d07e      	beq.n	800b5b2 <_strtod_l+0x28a>
 800b4b4:	f04f 0c00 	mov.w	ip, #0
 800b4b8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b4bc:	2909      	cmp	r1, #9
 800b4be:	f240 8085 	bls.w	800b5cc <_strtod_l+0x2a4>
 800b4c2:	9419      	str	r4, [sp, #100]	@ 0x64
 800b4c4:	f04f 0800 	mov.w	r8, #0
 800b4c8:	e0a5      	b.n	800b616 <_strtod_l+0x2ee>
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	e7c8      	b.n	800b460 <_strtod_l+0x138>
 800b4ce:	f1b9 0f08 	cmp.w	r9, #8
 800b4d2:	bfd8      	it	le
 800b4d4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b4d6:	f100 0001 	add.w	r0, r0, #1
 800b4da:	bfda      	itte	le
 800b4dc:	fb02 3301 	mlale	r3, r2, r1, r3
 800b4e0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b4e2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b4e6:	f109 0901 	add.w	r9, r9, #1
 800b4ea:	9019      	str	r0, [sp, #100]	@ 0x64
 800b4ec:	e7bf      	b.n	800b46e <_strtod_l+0x146>
 800b4ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4f0:	1c5a      	adds	r2, r3, #1
 800b4f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b4f4:	785a      	ldrb	r2, [r3, #1]
 800b4f6:	f1b9 0f00 	cmp.w	r9, #0
 800b4fa:	d03b      	beq.n	800b574 <_strtod_l+0x24c>
 800b4fc:	900a      	str	r0, [sp, #40]	@ 0x28
 800b4fe:	464d      	mov	r5, r9
 800b500:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b504:	2b09      	cmp	r3, #9
 800b506:	d912      	bls.n	800b52e <_strtod_l+0x206>
 800b508:	2301      	movs	r3, #1
 800b50a:	e7c2      	b.n	800b492 <_strtod_l+0x16a>
 800b50c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b50e:	1c5a      	adds	r2, r3, #1
 800b510:	9219      	str	r2, [sp, #100]	@ 0x64
 800b512:	785a      	ldrb	r2, [r3, #1]
 800b514:	3001      	adds	r0, #1
 800b516:	2a30      	cmp	r2, #48	@ 0x30
 800b518:	d0f8      	beq.n	800b50c <_strtod_l+0x1e4>
 800b51a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b51e:	2b08      	cmp	r3, #8
 800b520:	f200 84d2 	bhi.w	800bec8 <_strtod_l+0xba0>
 800b524:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b526:	900a      	str	r0, [sp, #40]	@ 0x28
 800b528:	2000      	movs	r0, #0
 800b52a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b52c:	4605      	mov	r5, r0
 800b52e:	3a30      	subs	r2, #48	@ 0x30
 800b530:	f100 0301 	add.w	r3, r0, #1
 800b534:	d018      	beq.n	800b568 <_strtod_l+0x240>
 800b536:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b538:	4419      	add	r1, r3
 800b53a:	910a      	str	r1, [sp, #40]	@ 0x28
 800b53c:	462e      	mov	r6, r5
 800b53e:	f04f 0e0a 	mov.w	lr, #10
 800b542:	1c71      	adds	r1, r6, #1
 800b544:	eba1 0c05 	sub.w	ip, r1, r5
 800b548:	4563      	cmp	r3, ip
 800b54a:	dc15      	bgt.n	800b578 <_strtod_l+0x250>
 800b54c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b550:	182b      	adds	r3, r5, r0
 800b552:	2b08      	cmp	r3, #8
 800b554:	f105 0501 	add.w	r5, r5, #1
 800b558:	4405      	add	r5, r0
 800b55a:	dc1a      	bgt.n	800b592 <_strtod_l+0x26a>
 800b55c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b55e:	230a      	movs	r3, #10
 800b560:	fb03 2301 	mla	r3, r3, r1, r2
 800b564:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b566:	2300      	movs	r3, #0
 800b568:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b56a:	1c51      	adds	r1, r2, #1
 800b56c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b56e:	7852      	ldrb	r2, [r2, #1]
 800b570:	4618      	mov	r0, r3
 800b572:	e7c5      	b.n	800b500 <_strtod_l+0x1d8>
 800b574:	4648      	mov	r0, r9
 800b576:	e7ce      	b.n	800b516 <_strtod_l+0x1ee>
 800b578:	2e08      	cmp	r6, #8
 800b57a:	dc05      	bgt.n	800b588 <_strtod_l+0x260>
 800b57c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b57e:	fb0e f606 	mul.w	r6, lr, r6
 800b582:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b584:	460e      	mov	r6, r1
 800b586:	e7dc      	b.n	800b542 <_strtod_l+0x21a>
 800b588:	2910      	cmp	r1, #16
 800b58a:	bfd8      	it	le
 800b58c:	fb0e f707 	mulle.w	r7, lr, r7
 800b590:	e7f8      	b.n	800b584 <_strtod_l+0x25c>
 800b592:	2b0f      	cmp	r3, #15
 800b594:	bfdc      	itt	le
 800b596:	230a      	movle	r3, #10
 800b598:	fb03 2707 	mlale	r7, r3, r7, r2
 800b59c:	e7e3      	b.n	800b566 <_strtod_l+0x23e>
 800b59e:	2300      	movs	r3, #0
 800b5a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	e77a      	b.n	800b49c <_strtod_l+0x174>
 800b5a6:	f04f 0c00 	mov.w	ip, #0
 800b5aa:	1ca2      	adds	r2, r4, #2
 800b5ac:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5ae:	78a2      	ldrb	r2, [r4, #2]
 800b5b0:	e782      	b.n	800b4b8 <_strtod_l+0x190>
 800b5b2:	f04f 0c01 	mov.w	ip, #1
 800b5b6:	e7f8      	b.n	800b5aa <_strtod_l+0x282>
 800b5b8:	0800d5f4 	.word	0x0800d5f4
 800b5bc:	0800d42b 	.word	0x0800d42b
 800b5c0:	7ff00000 	.word	0x7ff00000
 800b5c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b5c6:	1c51      	adds	r1, r2, #1
 800b5c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800b5ca:	7852      	ldrb	r2, [r2, #1]
 800b5cc:	2a30      	cmp	r2, #48	@ 0x30
 800b5ce:	d0f9      	beq.n	800b5c4 <_strtod_l+0x29c>
 800b5d0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b5d4:	2908      	cmp	r1, #8
 800b5d6:	f63f af75 	bhi.w	800b4c4 <_strtod_l+0x19c>
 800b5da:	3a30      	subs	r2, #48	@ 0x30
 800b5dc:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b5e0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b5e2:	f04f 080a 	mov.w	r8, #10
 800b5e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b5e8:	1c56      	adds	r6, r2, #1
 800b5ea:	9619      	str	r6, [sp, #100]	@ 0x64
 800b5ec:	7852      	ldrb	r2, [r2, #1]
 800b5ee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b5f2:	f1be 0f09 	cmp.w	lr, #9
 800b5f6:	d939      	bls.n	800b66c <_strtod_l+0x344>
 800b5f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b5fa:	1a76      	subs	r6, r6, r1
 800b5fc:	2e08      	cmp	r6, #8
 800b5fe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b602:	dc03      	bgt.n	800b60c <_strtod_l+0x2e4>
 800b604:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b606:	4588      	cmp	r8, r1
 800b608:	bfa8      	it	ge
 800b60a:	4688      	movge	r8, r1
 800b60c:	f1bc 0f00 	cmp.w	ip, #0
 800b610:	d001      	beq.n	800b616 <_strtod_l+0x2ee>
 800b612:	f1c8 0800 	rsb	r8, r8, #0
 800b616:	2d00      	cmp	r5, #0
 800b618:	d14e      	bne.n	800b6b8 <_strtod_l+0x390>
 800b61a:	9908      	ldr	r1, [sp, #32]
 800b61c:	4308      	orrs	r0, r1
 800b61e:	f47f aebc 	bne.w	800b39a <_strtod_l+0x72>
 800b622:	2b00      	cmp	r3, #0
 800b624:	f47f aed4 	bne.w	800b3d0 <_strtod_l+0xa8>
 800b628:	2a69      	cmp	r2, #105	@ 0x69
 800b62a:	d028      	beq.n	800b67e <_strtod_l+0x356>
 800b62c:	dc25      	bgt.n	800b67a <_strtod_l+0x352>
 800b62e:	2a49      	cmp	r2, #73	@ 0x49
 800b630:	d025      	beq.n	800b67e <_strtod_l+0x356>
 800b632:	2a4e      	cmp	r2, #78	@ 0x4e
 800b634:	f47f aecc 	bne.w	800b3d0 <_strtod_l+0xa8>
 800b638:	499a      	ldr	r1, [pc, #616]	@ (800b8a4 <_strtod_l+0x57c>)
 800b63a:	a819      	add	r0, sp, #100	@ 0x64
 800b63c:	f001 fba4 	bl	800cd88 <__match>
 800b640:	2800      	cmp	r0, #0
 800b642:	f43f aec5 	beq.w	800b3d0 <_strtod_l+0xa8>
 800b646:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	2b28      	cmp	r3, #40	@ 0x28
 800b64c:	d12e      	bne.n	800b6ac <_strtod_l+0x384>
 800b64e:	4996      	ldr	r1, [pc, #600]	@ (800b8a8 <_strtod_l+0x580>)
 800b650:	aa1c      	add	r2, sp, #112	@ 0x70
 800b652:	a819      	add	r0, sp, #100	@ 0x64
 800b654:	f001 fbac 	bl	800cdb0 <__hexnan>
 800b658:	2805      	cmp	r0, #5
 800b65a:	d127      	bne.n	800b6ac <_strtod_l+0x384>
 800b65c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b65e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b662:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b666:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b66a:	e696      	b.n	800b39a <_strtod_l+0x72>
 800b66c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b66e:	fb08 2101 	mla	r1, r8, r1, r2
 800b672:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b676:	9209      	str	r2, [sp, #36]	@ 0x24
 800b678:	e7b5      	b.n	800b5e6 <_strtod_l+0x2be>
 800b67a:	2a6e      	cmp	r2, #110	@ 0x6e
 800b67c:	e7da      	b.n	800b634 <_strtod_l+0x30c>
 800b67e:	498b      	ldr	r1, [pc, #556]	@ (800b8ac <_strtod_l+0x584>)
 800b680:	a819      	add	r0, sp, #100	@ 0x64
 800b682:	f001 fb81 	bl	800cd88 <__match>
 800b686:	2800      	cmp	r0, #0
 800b688:	f43f aea2 	beq.w	800b3d0 <_strtod_l+0xa8>
 800b68c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b68e:	4988      	ldr	r1, [pc, #544]	@ (800b8b0 <_strtod_l+0x588>)
 800b690:	3b01      	subs	r3, #1
 800b692:	a819      	add	r0, sp, #100	@ 0x64
 800b694:	9319      	str	r3, [sp, #100]	@ 0x64
 800b696:	f001 fb77 	bl	800cd88 <__match>
 800b69a:	b910      	cbnz	r0, 800b6a2 <_strtod_l+0x37a>
 800b69c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b69e:	3301      	adds	r3, #1
 800b6a0:	9319      	str	r3, [sp, #100]	@ 0x64
 800b6a2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b8c0 <_strtod_l+0x598>
 800b6a6:	f04f 0a00 	mov.w	sl, #0
 800b6aa:	e676      	b.n	800b39a <_strtod_l+0x72>
 800b6ac:	4881      	ldr	r0, [pc, #516]	@ (800b8b4 <_strtod_l+0x58c>)
 800b6ae:	f001 f8a7 	bl	800c800 <nan>
 800b6b2:	ec5b ab10 	vmov	sl, fp, d0
 800b6b6:	e670      	b.n	800b39a <_strtod_l+0x72>
 800b6b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6ba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b6bc:	eba8 0303 	sub.w	r3, r8, r3
 800b6c0:	f1b9 0f00 	cmp.w	r9, #0
 800b6c4:	bf08      	it	eq
 800b6c6:	46a9      	moveq	r9, r5
 800b6c8:	2d10      	cmp	r5, #16
 800b6ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6cc:	462c      	mov	r4, r5
 800b6ce:	bfa8      	it	ge
 800b6d0:	2410      	movge	r4, #16
 800b6d2:	f7f4 ff1f 	bl	8000514 <__aeabi_ui2d>
 800b6d6:	2d09      	cmp	r5, #9
 800b6d8:	4682      	mov	sl, r0
 800b6da:	468b      	mov	fp, r1
 800b6dc:	dc13      	bgt.n	800b706 <_strtod_l+0x3de>
 800b6de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f43f ae5a 	beq.w	800b39a <_strtod_l+0x72>
 800b6e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6e8:	dd78      	ble.n	800b7dc <_strtod_l+0x4b4>
 800b6ea:	2b16      	cmp	r3, #22
 800b6ec:	dc5f      	bgt.n	800b7ae <_strtod_l+0x486>
 800b6ee:	4972      	ldr	r1, [pc, #456]	@ (800b8b8 <_strtod_l+0x590>)
 800b6f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b6f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6f8:	4652      	mov	r2, sl
 800b6fa:	465b      	mov	r3, fp
 800b6fc:	f7f4 ff84 	bl	8000608 <__aeabi_dmul>
 800b700:	4682      	mov	sl, r0
 800b702:	468b      	mov	fp, r1
 800b704:	e649      	b.n	800b39a <_strtod_l+0x72>
 800b706:	4b6c      	ldr	r3, [pc, #432]	@ (800b8b8 <_strtod_l+0x590>)
 800b708:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b70c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b710:	f7f4 ff7a 	bl	8000608 <__aeabi_dmul>
 800b714:	4682      	mov	sl, r0
 800b716:	4638      	mov	r0, r7
 800b718:	468b      	mov	fp, r1
 800b71a:	f7f4 fefb 	bl	8000514 <__aeabi_ui2d>
 800b71e:	4602      	mov	r2, r0
 800b720:	460b      	mov	r3, r1
 800b722:	4650      	mov	r0, sl
 800b724:	4659      	mov	r1, fp
 800b726:	f7f4 fdb9 	bl	800029c <__adddf3>
 800b72a:	2d0f      	cmp	r5, #15
 800b72c:	4682      	mov	sl, r0
 800b72e:	468b      	mov	fp, r1
 800b730:	ddd5      	ble.n	800b6de <_strtod_l+0x3b6>
 800b732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b734:	1b2c      	subs	r4, r5, r4
 800b736:	441c      	add	r4, r3
 800b738:	2c00      	cmp	r4, #0
 800b73a:	f340 8093 	ble.w	800b864 <_strtod_l+0x53c>
 800b73e:	f014 030f 	ands.w	r3, r4, #15
 800b742:	d00a      	beq.n	800b75a <_strtod_l+0x432>
 800b744:	495c      	ldr	r1, [pc, #368]	@ (800b8b8 <_strtod_l+0x590>)
 800b746:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b74a:	4652      	mov	r2, sl
 800b74c:	465b      	mov	r3, fp
 800b74e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b752:	f7f4 ff59 	bl	8000608 <__aeabi_dmul>
 800b756:	4682      	mov	sl, r0
 800b758:	468b      	mov	fp, r1
 800b75a:	f034 040f 	bics.w	r4, r4, #15
 800b75e:	d073      	beq.n	800b848 <_strtod_l+0x520>
 800b760:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b764:	dd49      	ble.n	800b7fa <_strtod_l+0x4d2>
 800b766:	2400      	movs	r4, #0
 800b768:	46a0      	mov	r8, r4
 800b76a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b76c:	46a1      	mov	r9, r4
 800b76e:	9a05      	ldr	r2, [sp, #20]
 800b770:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b8c0 <_strtod_l+0x598>
 800b774:	2322      	movs	r3, #34	@ 0x22
 800b776:	6013      	str	r3, [r2, #0]
 800b778:	f04f 0a00 	mov.w	sl, #0
 800b77c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b77e:	2b00      	cmp	r3, #0
 800b780:	f43f ae0b 	beq.w	800b39a <_strtod_l+0x72>
 800b784:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b786:	9805      	ldr	r0, [sp, #20]
 800b788:	f7ff f946 	bl	800aa18 <_Bfree>
 800b78c:	9805      	ldr	r0, [sp, #20]
 800b78e:	4649      	mov	r1, r9
 800b790:	f7ff f942 	bl	800aa18 <_Bfree>
 800b794:	9805      	ldr	r0, [sp, #20]
 800b796:	4641      	mov	r1, r8
 800b798:	f7ff f93e 	bl	800aa18 <_Bfree>
 800b79c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b79e:	9805      	ldr	r0, [sp, #20]
 800b7a0:	f7ff f93a 	bl	800aa18 <_Bfree>
 800b7a4:	9805      	ldr	r0, [sp, #20]
 800b7a6:	4621      	mov	r1, r4
 800b7a8:	f7ff f936 	bl	800aa18 <_Bfree>
 800b7ac:	e5f5      	b.n	800b39a <_strtod_l+0x72>
 800b7ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	dbbc      	blt.n	800b732 <_strtod_l+0x40a>
 800b7b8:	4c3f      	ldr	r4, [pc, #252]	@ (800b8b8 <_strtod_l+0x590>)
 800b7ba:	f1c5 050f 	rsb	r5, r5, #15
 800b7be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b7c2:	4652      	mov	r2, sl
 800b7c4:	465b      	mov	r3, fp
 800b7c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7ca:	f7f4 ff1d 	bl	8000608 <__aeabi_dmul>
 800b7ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7d0:	1b5d      	subs	r5, r3, r5
 800b7d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b7d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b7da:	e78f      	b.n	800b6fc <_strtod_l+0x3d4>
 800b7dc:	3316      	adds	r3, #22
 800b7de:	dba8      	blt.n	800b732 <_strtod_l+0x40a>
 800b7e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7e2:	eba3 0808 	sub.w	r8, r3, r8
 800b7e6:	4b34      	ldr	r3, [pc, #208]	@ (800b8b8 <_strtod_l+0x590>)
 800b7e8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b7ec:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b7f0:	4650      	mov	r0, sl
 800b7f2:	4659      	mov	r1, fp
 800b7f4:	f7f5 f832 	bl	800085c <__aeabi_ddiv>
 800b7f8:	e782      	b.n	800b700 <_strtod_l+0x3d8>
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	4f2f      	ldr	r7, [pc, #188]	@ (800b8bc <_strtod_l+0x594>)
 800b7fe:	1124      	asrs	r4, r4, #4
 800b800:	4650      	mov	r0, sl
 800b802:	4659      	mov	r1, fp
 800b804:	461e      	mov	r6, r3
 800b806:	2c01      	cmp	r4, #1
 800b808:	dc21      	bgt.n	800b84e <_strtod_l+0x526>
 800b80a:	b10b      	cbz	r3, 800b810 <_strtod_l+0x4e8>
 800b80c:	4682      	mov	sl, r0
 800b80e:	468b      	mov	fp, r1
 800b810:	492a      	ldr	r1, [pc, #168]	@ (800b8bc <_strtod_l+0x594>)
 800b812:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b816:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b81a:	4652      	mov	r2, sl
 800b81c:	465b      	mov	r3, fp
 800b81e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b822:	f7f4 fef1 	bl	8000608 <__aeabi_dmul>
 800b826:	4b26      	ldr	r3, [pc, #152]	@ (800b8c0 <_strtod_l+0x598>)
 800b828:	460a      	mov	r2, r1
 800b82a:	400b      	ands	r3, r1
 800b82c:	4925      	ldr	r1, [pc, #148]	@ (800b8c4 <_strtod_l+0x59c>)
 800b82e:	428b      	cmp	r3, r1
 800b830:	4682      	mov	sl, r0
 800b832:	d898      	bhi.n	800b766 <_strtod_l+0x43e>
 800b834:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b838:	428b      	cmp	r3, r1
 800b83a:	bf86      	itte	hi
 800b83c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b8c8 <_strtod_l+0x5a0>
 800b840:	f04f 3aff 	movhi.w	sl, #4294967295
 800b844:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b848:	2300      	movs	r3, #0
 800b84a:	9308      	str	r3, [sp, #32]
 800b84c:	e076      	b.n	800b93c <_strtod_l+0x614>
 800b84e:	07e2      	lsls	r2, r4, #31
 800b850:	d504      	bpl.n	800b85c <_strtod_l+0x534>
 800b852:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b856:	f7f4 fed7 	bl	8000608 <__aeabi_dmul>
 800b85a:	2301      	movs	r3, #1
 800b85c:	3601      	adds	r6, #1
 800b85e:	1064      	asrs	r4, r4, #1
 800b860:	3708      	adds	r7, #8
 800b862:	e7d0      	b.n	800b806 <_strtod_l+0x4de>
 800b864:	d0f0      	beq.n	800b848 <_strtod_l+0x520>
 800b866:	4264      	negs	r4, r4
 800b868:	f014 020f 	ands.w	r2, r4, #15
 800b86c:	d00a      	beq.n	800b884 <_strtod_l+0x55c>
 800b86e:	4b12      	ldr	r3, [pc, #72]	@ (800b8b8 <_strtod_l+0x590>)
 800b870:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b874:	4650      	mov	r0, sl
 800b876:	4659      	mov	r1, fp
 800b878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87c:	f7f4 ffee 	bl	800085c <__aeabi_ddiv>
 800b880:	4682      	mov	sl, r0
 800b882:	468b      	mov	fp, r1
 800b884:	1124      	asrs	r4, r4, #4
 800b886:	d0df      	beq.n	800b848 <_strtod_l+0x520>
 800b888:	2c1f      	cmp	r4, #31
 800b88a:	dd1f      	ble.n	800b8cc <_strtod_l+0x5a4>
 800b88c:	2400      	movs	r4, #0
 800b88e:	46a0      	mov	r8, r4
 800b890:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b892:	46a1      	mov	r9, r4
 800b894:	9a05      	ldr	r2, [sp, #20]
 800b896:	2322      	movs	r3, #34	@ 0x22
 800b898:	f04f 0a00 	mov.w	sl, #0
 800b89c:	f04f 0b00 	mov.w	fp, #0
 800b8a0:	6013      	str	r3, [r2, #0]
 800b8a2:	e76b      	b.n	800b77c <_strtod_l+0x454>
 800b8a4:	0800d319 	.word	0x0800d319
 800b8a8:	0800d5e0 	.word	0x0800d5e0
 800b8ac:	0800d311 	.word	0x0800d311
 800b8b0:	0800d348 	.word	0x0800d348
 800b8b4:	0800d481 	.word	0x0800d481
 800b8b8:	0800d518 	.word	0x0800d518
 800b8bc:	0800d4f0 	.word	0x0800d4f0
 800b8c0:	7ff00000 	.word	0x7ff00000
 800b8c4:	7ca00000 	.word	0x7ca00000
 800b8c8:	7fefffff 	.word	0x7fefffff
 800b8cc:	f014 0310 	ands.w	r3, r4, #16
 800b8d0:	bf18      	it	ne
 800b8d2:	236a      	movne	r3, #106	@ 0x6a
 800b8d4:	4ea9      	ldr	r6, [pc, #676]	@ (800bb7c <_strtod_l+0x854>)
 800b8d6:	9308      	str	r3, [sp, #32]
 800b8d8:	4650      	mov	r0, sl
 800b8da:	4659      	mov	r1, fp
 800b8dc:	2300      	movs	r3, #0
 800b8de:	07e7      	lsls	r7, r4, #31
 800b8e0:	d504      	bpl.n	800b8ec <_strtod_l+0x5c4>
 800b8e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b8e6:	f7f4 fe8f 	bl	8000608 <__aeabi_dmul>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	1064      	asrs	r4, r4, #1
 800b8ee:	f106 0608 	add.w	r6, r6, #8
 800b8f2:	d1f4      	bne.n	800b8de <_strtod_l+0x5b6>
 800b8f4:	b10b      	cbz	r3, 800b8fa <_strtod_l+0x5d2>
 800b8f6:	4682      	mov	sl, r0
 800b8f8:	468b      	mov	fp, r1
 800b8fa:	9b08      	ldr	r3, [sp, #32]
 800b8fc:	b1b3      	cbz	r3, 800b92c <_strtod_l+0x604>
 800b8fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b902:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b906:	2b00      	cmp	r3, #0
 800b908:	4659      	mov	r1, fp
 800b90a:	dd0f      	ble.n	800b92c <_strtod_l+0x604>
 800b90c:	2b1f      	cmp	r3, #31
 800b90e:	dd56      	ble.n	800b9be <_strtod_l+0x696>
 800b910:	2b34      	cmp	r3, #52	@ 0x34
 800b912:	bfde      	ittt	le
 800b914:	f04f 33ff 	movle.w	r3, #4294967295
 800b918:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b91c:	4093      	lslle	r3, r2
 800b91e:	f04f 0a00 	mov.w	sl, #0
 800b922:	bfcc      	ite	gt
 800b924:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b928:	ea03 0b01 	andle.w	fp, r3, r1
 800b92c:	2200      	movs	r2, #0
 800b92e:	2300      	movs	r3, #0
 800b930:	4650      	mov	r0, sl
 800b932:	4659      	mov	r1, fp
 800b934:	f7f5 f8d0 	bl	8000ad8 <__aeabi_dcmpeq>
 800b938:	2800      	cmp	r0, #0
 800b93a:	d1a7      	bne.n	800b88c <_strtod_l+0x564>
 800b93c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b93e:	9300      	str	r3, [sp, #0]
 800b940:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b942:	9805      	ldr	r0, [sp, #20]
 800b944:	462b      	mov	r3, r5
 800b946:	464a      	mov	r2, r9
 800b948:	f7ff f8ce 	bl	800aae8 <__s2b>
 800b94c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b94e:	2800      	cmp	r0, #0
 800b950:	f43f af09 	beq.w	800b766 <_strtod_l+0x43e>
 800b954:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b956:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b958:	2a00      	cmp	r2, #0
 800b95a:	eba3 0308 	sub.w	r3, r3, r8
 800b95e:	bfa8      	it	ge
 800b960:	2300      	movge	r3, #0
 800b962:	9312      	str	r3, [sp, #72]	@ 0x48
 800b964:	2400      	movs	r4, #0
 800b966:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b96a:	9316      	str	r3, [sp, #88]	@ 0x58
 800b96c:	46a0      	mov	r8, r4
 800b96e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b970:	9805      	ldr	r0, [sp, #20]
 800b972:	6859      	ldr	r1, [r3, #4]
 800b974:	f7ff f810 	bl	800a998 <_Balloc>
 800b978:	4681      	mov	r9, r0
 800b97a:	2800      	cmp	r0, #0
 800b97c:	f43f aef7 	beq.w	800b76e <_strtod_l+0x446>
 800b980:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b982:	691a      	ldr	r2, [r3, #16]
 800b984:	3202      	adds	r2, #2
 800b986:	f103 010c 	add.w	r1, r3, #12
 800b98a:	0092      	lsls	r2, r2, #2
 800b98c:	300c      	adds	r0, #12
 800b98e:	f7fe f896 	bl	8009abe <memcpy>
 800b992:	ec4b ab10 	vmov	d0, sl, fp
 800b996:	9805      	ldr	r0, [sp, #20]
 800b998:	aa1c      	add	r2, sp, #112	@ 0x70
 800b99a:	a91b      	add	r1, sp, #108	@ 0x6c
 800b99c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b9a0:	f7ff fbd6 	bl	800b150 <__d2b>
 800b9a4:	901a      	str	r0, [sp, #104]	@ 0x68
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	f43f aee1 	beq.w	800b76e <_strtod_l+0x446>
 800b9ac:	9805      	ldr	r0, [sp, #20]
 800b9ae:	2101      	movs	r1, #1
 800b9b0:	f7ff f930 	bl	800ac14 <__i2b>
 800b9b4:	4680      	mov	r8, r0
 800b9b6:	b948      	cbnz	r0, 800b9cc <_strtod_l+0x6a4>
 800b9b8:	f04f 0800 	mov.w	r8, #0
 800b9bc:	e6d7      	b.n	800b76e <_strtod_l+0x446>
 800b9be:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b9c6:	ea03 0a0a 	and.w	sl, r3, sl
 800b9ca:	e7af      	b.n	800b92c <_strtod_l+0x604>
 800b9cc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b9ce:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b9d0:	2d00      	cmp	r5, #0
 800b9d2:	bfab      	itete	ge
 800b9d4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b9d6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b9d8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b9da:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b9dc:	bfac      	ite	ge
 800b9de:	18ef      	addge	r7, r5, r3
 800b9e0:	1b5e      	sublt	r6, r3, r5
 800b9e2:	9b08      	ldr	r3, [sp, #32]
 800b9e4:	1aed      	subs	r5, r5, r3
 800b9e6:	4415      	add	r5, r2
 800b9e8:	4b65      	ldr	r3, [pc, #404]	@ (800bb80 <_strtod_l+0x858>)
 800b9ea:	3d01      	subs	r5, #1
 800b9ec:	429d      	cmp	r5, r3
 800b9ee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b9f2:	da50      	bge.n	800ba96 <_strtod_l+0x76e>
 800b9f4:	1b5b      	subs	r3, r3, r5
 800b9f6:	2b1f      	cmp	r3, #31
 800b9f8:	eba2 0203 	sub.w	r2, r2, r3
 800b9fc:	f04f 0101 	mov.w	r1, #1
 800ba00:	dc3d      	bgt.n	800ba7e <_strtod_l+0x756>
 800ba02:	fa01 f303 	lsl.w	r3, r1, r3
 800ba06:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba08:	2300      	movs	r3, #0
 800ba0a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba0c:	18bd      	adds	r5, r7, r2
 800ba0e:	9b08      	ldr	r3, [sp, #32]
 800ba10:	42af      	cmp	r7, r5
 800ba12:	4416      	add	r6, r2
 800ba14:	441e      	add	r6, r3
 800ba16:	463b      	mov	r3, r7
 800ba18:	bfa8      	it	ge
 800ba1a:	462b      	movge	r3, r5
 800ba1c:	42b3      	cmp	r3, r6
 800ba1e:	bfa8      	it	ge
 800ba20:	4633      	movge	r3, r6
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	bfc2      	ittt	gt
 800ba26:	1aed      	subgt	r5, r5, r3
 800ba28:	1af6      	subgt	r6, r6, r3
 800ba2a:	1aff      	subgt	r7, r7, r3
 800ba2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	dd16      	ble.n	800ba60 <_strtod_l+0x738>
 800ba32:	4641      	mov	r1, r8
 800ba34:	9805      	ldr	r0, [sp, #20]
 800ba36:	461a      	mov	r2, r3
 800ba38:	f7ff f9a4 	bl	800ad84 <__pow5mult>
 800ba3c:	4680      	mov	r8, r0
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	d0ba      	beq.n	800b9b8 <_strtod_l+0x690>
 800ba42:	4601      	mov	r1, r0
 800ba44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ba46:	9805      	ldr	r0, [sp, #20]
 800ba48:	f7ff f8fa 	bl	800ac40 <__multiply>
 800ba4c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	f43f ae8d 	beq.w	800b76e <_strtod_l+0x446>
 800ba54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba56:	9805      	ldr	r0, [sp, #20]
 800ba58:	f7fe ffde 	bl	800aa18 <_Bfree>
 800ba5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba5e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba60:	2d00      	cmp	r5, #0
 800ba62:	dc1d      	bgt.n	800baa0 <_strtod_l+0x778>
 800ba64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	dd23      	ble.n	800bab2 <_strtod_l+0x78a>
 800ba6a:	4649      	mov	r1, r9
 800ba6c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ba6e:	9805      	ldr	r0, [sp, #20]
 800ba70:	f7ff f988 	bl	800ad84 <__pow5mult>
 800ba74:	4681      	mov	r9, r0
 800ba76:	b9e0      	cbnz	r0, 800bab2 <_strtod_l+0x78a>
 800ba78:	f04f 0900 	mov.w	r9, #0
 800ba7c:	e677      	b.n	800b76e <_strtod_l+0x446>
 800ba7e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ba82:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ba86:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ba8a:	35e2      	adds	r5, #226	@ 0xe2
 800ba8c:	fa01 f305 	lsl.w	r3, r1, r5
 800ba90:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba92:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ba94:	e7ba      	b.n	800ba0c <_strtod_l+0x6e4>
 800ba96:	2300      	movs	r3, #0
 800ba98:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba9e:	e7b5      	b.n	800ba0c <_strtod_l+0x6e4>
 800baa0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800baa2:	9805      	ldr	r0, [sp, #20]
 800baa4:	462a      	mov	r2, r5
 800baa6:	f7ff f9c7 	bl	800ae38 <__lshift>
 800baaa:	901a      	str	r0, [sp, #104]	@ 0x68
 800baac:	2800      	cmp	r0, #0
 800baae:	d1d9      	bne.n	800ba64 <_strtod_l+0x73c>
 800bab0:	e65d      	b.n	800b76e <_strtod_l+0x446>
 800bab2:	2e00      	cmp	r6, #0
 800bab4:	dd07      	ble.n	800bac6 <_strtod_l+0x79e>
 800bab6:	4649      	mov	r1, r9
 800bab8:	9805      	ldr	r0, [sp, #20]
 800baba:	4632      	mov	r2, r6
 800babc:	f7ff f9bc 	bl	800ae38 <__lshift>
 800bac0:	4681      	mov	r9, r0
 800bac2:	2800      	cmp	r0, #0
 800bac4:	d0d8      	beq.n	800ba78 <_strtod_l+0x750>
 800bac6:	2f00      	cmp	r7, #0
 800bac8:	dd08      	ble.n	800badc <_strtod_l+0x7b4>
 800baca:	4641      	mov	r1, r8
 800bacc:	9805      	ldr	r0, [sp, #20]
 800bace:	463a      	mov	r2, r7
 800bad0:	f7ff f9b2 	bl	800ae38 <__lshift>
 800bad4:	4680      	mov	r8, r0
 800bad6:	2800      	cmp	r0, #0
 800bad8:	f43f ae49 	beq.w	800b76e <_strtod_l+0x446>
 800badc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bade:	9805      	ldr	r0, [sp, #20]
 800bae0:	464a      	mov	r2, r9
 800bae2:	f7ff fa31 	bl	800af48 <__mdiff>
 800bae6:	4604      	mov	r4, r0
 800bae8:	2800      	cmp	r0, #0
 800baea:	f43f ae40 	beq.w	800b76e <_strtod_l+0x446>
 800baee:	68c3      	ldr	r3, [r0, #12]
 800baf0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800baf2:	2300      	movs	r3, #0
 800baf4:	60c3      	str	r3, [r0, #12]
 800baf6:	4641      	mov	r1, r8
 800baf8:	f7ff fa0a 	bl	800af10 <__mcmp>
 800bafc:	2800      	cmp	r0, #0
 800bafe:	da45      	bge.n	800bb8c <_strtod_l+0x864>
 800bb00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb02:	ea53 030a 	orrs.w	r3, r3, sl
 800bb06:	d16b      	bne.n	800bbe0 <_strtod_l+0x8b8>
 800bb08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d167      	bne.n	800bbe0 <_strtod_l+0x8b8>
 800bb10:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bb14:	0d1b      	lsrs	r3, r3, #20
 800bb16:	051b      	lsls	r3, r3, #20
 800bb18:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bb1c:	d960      	bls.n	800bbe0 <_strtod_l+0x8b8>
 800bb1e:	6963      	ldr	r3, [r4, #20]
 800bb20:	b913      	cbnz	r3, 800bb28 <_strtod_l+0x800>
 800bb22:	6923      	ldr	r3, [r4, #16]
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	dd5b      	ble.n	800bbe0 <_strtod_l+0x8b8>
 800bb28:	4621      	mov	r1, r4
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	9805      	ldr	r0, [sp, #20]
 800bb2e:	f7ff f983 	bl	800ae38 <__lshift>
 800bb32:	4641      	mov	r1, r8
 800bb34:	4604      	mov	r4, r0
 800bb36:	f7ff f9eb 	bl	800af10 <__mcmp>
 800bb3a:	2800      	cmp	r0, #0
 800bb3c:	dd50      	ble.n	800bbe0 <_strtod_l+0x8b8>
 800bb3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bb42:	9a08      	ldr	r2, [sp, #32]
 800bb44:	0d1b      	lsrs	r3, r3, #20
 800bb46:	051b      	lsls	r3, r3, #20
 800bb48:	2a00      	cmp	r2, #0
 800bb4a:	d06a      	beq.n	800bc22 <_strtod_l+0x8fa>
 800bb4c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bb50:	d867      	bhi.n	800bc22 <_strtod_l+0x8fa>
 800bb52:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bb56:	f67f ae9d 	bls.w	800b894 <_strtod_l+0x56c>
 800bb5a:	4b0a      	ldr	r3, [pc, #40]	@ (800bb84 <_strtod_l+0x85c>)
 800bb5c:	4650      	mov	r0, sl
 800bb5e:	4659      	mov	r1, fp
 800bb60:	2200      	movs	r2, #0
 800bb62:	f7f4 fd51 	bl	8000608 <__aeabi_dmul>
 800bb66:	4b08      	ldr	r3, [pc, #32]	@ (800bb88 <_strtod_l+0x860>)
 800bb68:	400b      	ands	r3, r1
 800bb6a:	4682      	mov	sl, r0
 800bb6c:	468b      	mov	fp, r1
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	f47f ae08 	bne.w	800b784 <_strtod_l+0x45c>
 800bb74:	9a05      	ldr	r2, [sp, #20]
 800bb76:	2322      	movs	r3, #34	@ 0x22
 800bb78:	6013      	str	r3, [r2, #0]
 800bb7a:	e603      	b.n	800b784 <_strtod_l+0x45c>
 800bb7c:	0800d608 	.word	0x0800d608
 800bb80:	fffffc02 	.word	0xfffffc02
 800bb84:	39500000 	.word	0x39500000
 800bb88:	7ff00000 	.word	0x7ff00000
 800bb8c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bb90:	d165      	bne.n	800bc5e <_strtod_l+0x936>
 800bb92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bb94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb98:	b35a      	cbz	r2, 800bbf2 <_strtod_l+0x8ca>
 800bb9a:	4a9f      	ldr	r2, [pc, #636]	@ (800be18 <_strtod_l+0xaf0>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d12b      	bne.n	800bbf8 <_strtod_l+0x8d0>
 800bba0:	9b08      	ldr	r3, [sp, #32]
 800bba2:	4651      	mov	r1, sl
 800bba4:	b303      	cbz	r3, 800bbe8 <_strtod_l+0x8c0>
 800bba6:	4b9d      	ldr	r3, [pc, #628]	@ (800be1c <_strtod_l+0xaf4>)
 800bba8:	465a      	mov	r2, fp
 800bbaa:	4013      	ands	r3, r2
 800bbac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bbb0:	f04f 32ff 	mov.w	r2, #4294967295
 800bbb4:	d81b      	bhi.n	800bbee <_strtod_l+0x8c6>
 800bbb6:	0d1b      	lsrs	r3, r3, #20
 800bbb8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bbbc:	fa02 f303 	lsl.w	r3, r2, r3
 800bbc0:	4299      	cmp	r1, r3
 800bbc2:	d119      	bne.n	800bbf8 <_strtod_l+0x8d0>
 800bbc4:	4b96      	ldr	r3, [pc, #600]	@ (800be20 <_strtod_l+0xaf8>)
 800bbc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d102      	bne.n	800bbd2 <_strtod_l+0x8aa>
 800bbcc:	3101      	adds	r1, #1
 800bbce:	f43f adce 	beq.w	800b76e <_strtod_l+0x446>
 800bbd2:	4b92      	ldr	r3, [pc, #584]	@ (800be1c <_strtod_l+0xaf4>)
 800bbd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bbd6:	401a      	ands	r2, r3
 800bbd8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bbdc:	f04f 0a00 	mov.w	sl, #0
 800bbe0:	9b08      	ldr	r3, [sp, #32]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d1b9      	bne.n	800bb5a <_strtod_l+0x832>
 800bbe6:	e5cd      	b.n	800b784 <_strtod_l+0x45c>
 800bbe8:	f04f 33ff 	mov.w	r3, #4294967295
 800bbec:	e7e8      	b.n	800bbc0 <_strtod_l+0x898>
 800bbee:	4613      	mov	r3, r2
 800bbf0:	e7e6      	b.n	800bbc0 <_strtod_l+0x898>
 800bbf2:	ea53 030a 	orrs.w	r3, r3, sl
 800bbf6:	d0a2      	beq.n	800bb3e <_strtod_l+0x816>
 800bbf8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bbfa:	b1db      	cbz	r3, 800bc34 <_strtod_l+0x90c>
 800bbfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bbfe:	4213      	tst	r3, r2
 800bc00:	d0ee      	beq.n	800bbe0 <_strtod_l+0x8b8>
 800bc02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc04:	9a08      	ldr	r2, [sp, #32]
 800bc06:	4650      	mov	r0, sl
 800bc08:	4659      	mov	r1, fp
 800bc0a:	b1bb      	cbz	r3, 800bc3c <_strtod_l+0x914>
 800bc0c:	f7ff fb6e 	bl	800b2ec <sulp>
 800bc10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc14:	ec53 2b10 	vmov	r2, r3, d0
 800bc18:	f7f4 fb40 	bl	800029c <__adddf3>
 800bc1c:	4682      	mov	sl, r0
 800bc1e:	468b      	mov	fp, r1
 800bc20:	e7de      	b.n	800bbe0 <_strtod_l+0x8b8>
 800bc22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bc26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bc2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bc2e:	f04f 3aff 	mov.w	sl, #4294967295
 800bc32:	e7d5      	b.n	800bbe0 <_strtod_l+0x8b8>
 800bc34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc36:	ea13 0f0a 	tst.w	r3, sl
 800bc3a:	e7e1      	b.n	800bc00 <_strtod_l+0x8d8>
 800bc3c:	f7ff fb56 	bl	800b2ec <sulp>
 800bc40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc44:	ec53 2b10 	vmov	r2, r3, d0
 800bc48:	f7f4 fb26 	bl	8000298 <__aeabi_dsub>
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	2300      	movs	r3, #0
 800bc50:	4682      	mov	sl, r0
 800bc52:	468b      	mov	fp, r1
 800bc54:	f7f4 ff40 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	d0c1      	beq.n	800bbe0 <_strtod_l+0x8b8>
 800bc5c:	e61a      	b.n	800b894 <_strtod_l+0x56c>
 800bc5e:	4641      	mov	r1, r8
 800bc60:	4620      	mov	r0, r4
 800bc62:	f7ff facd 	bl	800b200 <__ratio>
 800bc66:	ec57 6b10 	vmov	r6, r7, d0
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bc70:	4630      	mov	r0, r6
 800bc72:	4639      	mov	r1, r7
 800bc74:	f7f4 ff44 	bl	8000b00 <__aeabi_dcmple>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	d06f      	beq.n	800bd5c <_strtod_l+0xa34>
 800bc7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d17a      	bne.n	800bd78 <_strtod_l+0xa50>
 800bc82:	f1ba 0f00 	cmp.w	sl, #0
 800bc86:	d158      	bne.n	800bd3a <_strtod_l+0xa12>
 800bc88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d15a      	bne.n	800bd48 <_strtod_l+0xa20>
 800bc92:	4b64      	ldr	r3, [pc, #400]	@ (800be24 <_strtod_l+0xafc>)
 800bc94:	2200      	movs	r2, #0
 800bc96:	4630      	mov	r0, r6
 800bc98:	4639      	mov	r1, r7
 800bc9a:	f7f4 ff27 	bl	8000aec <__aeabi_dcmplt>
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	d159      	bne.n	800bd56 <_strtod_l+0xa2e>
 800bca2:	4630      	mov	r0, r6
 800bca4:	4639      	mov	r1, r7
 800bca6:	4b60      	ldr	r3, [pc, #384]	@ (800be28 <_strtod_l+0xb00>)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f7f4 fcad 	bl	8000608 <__aeabi_dmul>
 800bcae:	4606      	mov	r6, r0
 800bcb0:	460f      	mov	r7, r1
 800bcb2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bcb6:	9606      	str	r6, [sp, #24]
 800bcb8:	9307      	str	r3, [sp, #28]
 800bcba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcbe:	4d57      	ldr	r5, [pc, #348]	@ (800be1c <_strtod_l+0xaf4>)
 800bcc0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bcc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcc6:	401d      	ands	r5, r3
 800bcc8:	4b58      	ldr	r3, [pc, #352]	@ (800be2c <_strtod_l+0xb04>)
 800bcca:	429d      	cmp	r5, r3
 800bccc:	f040 80b2 	bne.w	800be34 <_strtod_l+0xb0c>
 800bcd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcd2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bcd6:	ec4b ab10 	vmov	d0, sl, fp
 800bcda:	f7ff f9c9 	bl	800b070 <__ulp>
 800bcde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bce2:	ec51 0b10 	vmov	r0, r1, d0
 800bce6:	f7f4 fc8f 	bl	8000608 <__aeabi_dmul>
 800bcea:	4652      	mov	r2, sl
 800bcec:	465b      	mov	r3, fp
 800bcee:	f7f4 fad5 	bl	800029c <__adddf3>
 800bcf2:	460b      	mov	r3, r1
 800bcf4:	4949      	ldr	r1, [pc, #292]	@ (800be1c <_strtod_l+0xaf4>)
 800bcf6:	4a4e      	ldr	r2, [pc, #312]	@ (800be30 <_strtod_l+0xb08>)
 800bcf8:	4019      	ands	r1, r3
 800bcfa:	4291      	cmp	r1, r2
 800bcfc:	4682      	mov	sl, r0
 800bcfe:	d942      	bls.n	800bd86 <_strtod_l+0xa5e>
 800bd00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bd02:	4b47      	ldr	r3, [pc, #284]	@ (800be20 <_strtod_l+0xaf8>)
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d103      	bne.n	800bd10 <_strtod_l+0x9e8>
 800bd08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	f43f ad2f 	beq.w	800b76e <_strtod_l+0x446>
 800bd10:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800be20 <_strtod_l+0xaf8>
 800bd14:	f04f 3aff 	mov.w	sl, #4294967295
 800bd18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd1a:	9805      	ldr	r0, [sp, #20]
 800bd1c:	f7fe fe7c 	bl	800aa18 <_Bfree>
 800bd20:	9805      	ldr	r0, [sp, #20]
 800bd22:	4649      	mov	r1, r9
 800bd24:	f7fe fe78 	bl	800aa18 <_Bfree>
 800bd28:	9805      	ldr	r0, [sp, #20]
 800bd2a:	4641      	mov	r1, r8
 800bd2c:	f7fe fe74 	bl	800aa18 <_Bfree>
 800bd30:	9805      	ldr	r0, [sp, #20]
 800bd32:	4621      	mov	r1, r4
 800bd34:	f7fe fe70 	bl	800aa18 <_Bfree>
 800bd38:	e619      	b.n	800b96e <_strtod_l+0x646>
 800bd3a:	f1ba 0f01 	cmp.w	sl, #1
 800bd3e:	d103      	bne.n	800bd48 <_strtod_l+0xa20>
 800bd40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	f43f ada6 	beq.w	800b894 <_strtod_l+0x56c>
 800bd48:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bdf8 <_strtod_l+0xad0>
 800bd4c:	4f35      	ldr	r7, [pc, #212]	@ (800be24 <_strtod_l+0xafc>)
 800bd4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bd52:	2600      	movs	r6, #0
 800bd54:	e7b1      	b.n	800bcba <_strtod_l+0x992>
 800bd56:	4f34      	ldr	r7, [pc, #208]	@ (800be28 <_strtod_l+0xb00>)
 800bd58:	2600      	movs	r6, #0
 800bd5a:	e7aa      	b.n	800bcb2 <_strtod_l+0x98a>
 800bd5c:	4b32      	ldr	r3, [pc, #200]	@ (800be28 <_strtod_l+0xb00>)
 800bd5e:	4630      	mov	r0, r6
 800bd60:	4639      	mov	r1, r7
 800bd62:	2200      	movs	r2, #0
 800bd64:	f7f4 fc50 	bl	8000608 <__aeabi_dmul>
 800bd68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd6a:	4606      	mov	r6, r0
 800bd6c:	460f      	mov	r7, r1
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d09f      	beq.n	800bcb2 <_strtod_l+0x98a>
 800bd72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bd76:	e7a0      	b.n	800bcba <_strtod_l+0x992>
 800bd78:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800be00 <_strtod_l+0xad8>
 800bd7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bd80:	ec57 6b17 	vmov	r6, r7, d7
 800bd84:	e799      	b.n	800bcba <_strtod_l+0x992>
 800bd86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bd8a:	9b08      	ldr	r3, [sp, #32]
 800bd8c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1c1      	bne.n	800bd18 <_strtod_l+0x9f0>
 800bd94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd98:	0d1b      	lsrs	r3, r3, #20
 800bd9a:	051b      	lsls	r3, r3, #20
 800bd9c:	429d      	cmp	r5, r3
 800bd9e:	d1bb      	bne.n	800bd18 <_strtod_l+0x9f0>
 800bda0:	4630      	mov	r0, r6
 800bda2:	4639      	mov	r1, r7
 800bda4:	f7f4 ff90 	bl	8000cc8 <__aeabi_d2lz>
 800bda8:	f7f4 fc00 	bl	80005ac <__aeabi_l2d>
 800bdac:	4602      	mov	r2, r0
 800bdae:	460b      	mov	r3, r1
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	4639      	mov	r1, r7
 800bdb4:	f7f4 fa70 	bl	8000298 <__aeabi_dsub>
 800bdb8:	460b      	mov	r3, r1
 800bdba:	4602      	mov	r2, r0
 800bdbc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bdc0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bdc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdc6:	ea46 060a 	orr.w	r6, r6, sl
 800bdca:	431e      	orrs	r6, r3
 800bdcc:	d06f      	beq.n	800beae <_strtod_l+0xb86>
 800bdce:	a30e      	add	r3, pc, #56	@ (adr r3, 800be08 <_strtod_l+0xae0>)
 800bdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd4:	f7f4 fe8a 	bl	8000aec <__aeabi_dcmplt>
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	f47f acd3 	bne.w	800b784 <_strtod_l+0x45c>
 800bdde:	a30c      	add	r3, pc, #48	@ (adr r3, 800be10 <_strtod_l+0xae8>)
 800bde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bde8:	f7f4 fe9e 	bl	8000b28 <__aeabi_dcmpgt>
 800bdec:	2800      	cmp	r0, #0
 800bdee:	d093      	beq.n	800bd18 <_strtod_l+0x9f0>
 800bdf0:	e4c8      	b.n	800b784 <_strtod_l+0x45c>
 800bdf2:	bf00      	nop
 800bdf4:	f3af 8000 	nop.w
 800bdf8:	00000000 	.word	0x00000000
 800bdfc:	bff00000 	.word	0xbff00000
 800be00:	00000000 	.word	0x00000000
 800be04:	3ff00000 	.word	0x3ff00000
 800be08:	94a03595 	.word	0x94a03595
 800be0c:	3fdfffff 	.word	0x3fdfffff
 800be10:	35afe535 	.word	0x35afe535
 800be14:	3fe00000 	.word	0x3fe00000
 800be18:	000fffff 	.word	0x000fffff
 800be1c:	7ff00000 	.word	0x7ff00000
 800be20:	7fefffff 	.word	0x7fefffff
 800be24:	3ff00000 	.word	0x3ff00000
 800be28:	3fe00000 	.word	0x3fe00000
 800be2c:	7fe00000 	.word	0x7fe00000
 800be30:	7c9fffff 	.word	0x7c9fffff
 800be34:	9b08      	ldr	r3, [sp, #32]
 800be36:	b323      	cbz	r3, 800be82 <_strtod_l+0xb5a>
 800be38:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800be3c:	d821      	bhi.n	800be82 <_strtod_l+0xb5a>
 800be3e:	a328      	add	r3, pc, #160	@ (adr r3, 800bee0 <_strtod_l+0xbb8>)
 800be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be44:	4630      	mov	r0, r6
 800be46:	4639      	mov	r1, r7
 800be48:	f7f4 fe5a 	bl	8000b00 <__aeabi_dcmple>
 800be4c:	b1a0      	cbz	r0, 800be78 <_strtod_l+0xb50>
 800be4e:	4639      	mov	r1, r7
 800be50:	4630      	mov	r0, r6
 800be52:	f7f4 feb1 	bl	8000bb8 <__aeabi_d2uiz>
 800be56:	2801      	cmp	r0, #1
 800be58:	bf38      	it	cc
 800be5a:	2001      	movcc	r0, #1
 800be5c:	f7f4 fb5a 	bl	8000514 <__aeabi_ui2d>
 800be60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be62:	4606      	mov	r6, r0
 800be64:	460f      	mov	r7, r1
 800be66:	b9fb      	cbnz	r3, 800bea8 <_strtod_l+0xb80>
 800be68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800be6c:	9014      	str	r0, [sp, #80]	@ 0x50
 800be6e:	9315      	str	r3, [sp, #84]	@ 0x54
 800be70:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800be74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800be78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be7a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800be7e:	1b5b      	subs	r3, r3, r5
 800be80:	9311      	str	r3, [sp, #68]	@ 0x44
 800be82:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800be86:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800be8a:	f7ff f8f1 	bl	800b070 <__ulp>
 800be8e:	4650      	mov	r0, sl
 800be90:	ec53 2b10 	vmov	r2, r3, d0
 800be94:	4659      	mov	r1, fp
 800be96:	f7f4 fbb7 	bl	8000608 <__aeabi_dmul>
 800be9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800be9e:	f7f4 f9fd 	bl	800029c <__adddf3>
 800bea2:	4682      	mov	sl, r0
 800bea4:	468b      	mov	fp, r1
 800bea6:	e770      	b.n	800bd8a <_strtod_l+0xa62>
 800bea8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800beac:	e7e0      	b.n	800be70 <_strtod_l+0xb48>
 800beae:	a30e      	add	r3, pc, #56	@ (adr r3, 800bee8 <_strtod_l+0xbc0>)
 800beb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb4:	f7f4 fe1a 	bl	8000aec <__aeabi_dcmplt>
 800beb8:	e798      	b.n	800bdec <_strtod_l+0xac4>
 800beba:	2300      	movs	r3, #0
 800bebc:	930e      	str	r3, [sp, #56]	@ 0x38
 800bebe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bec0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bec2:	6013      	str	r3, [r2, #0]
 800bec4:	f7ff ba6d 	b.w	800b3a2 <_strtod_l+0x7a>
 800bec8:	2a65      	cmp	r2, #101	@ 0x65
 800beca:	f43f ab68 	beq.w	800b59e <_strtod_l+0x276>
 800bece:	2a45      	cmp	r2, #69	@ 0x45
 800bed0:	f43f ab65 	beq.w	800b59e <_strtod_l+0x276>
 800bed4:	2301      	movs	r3, #1
 800bed6:	f7ff bba0 	b.w	800b61a <_strtod_l+0x2f2>
 800beda:	bf00      	nop
 800bedc:	f3af 8000 	nop.w
 800bee0:	ffc00000 	.word	0xffc00000
 800bee4:	41dfffff 	.word	0x41dfffff
 800bee8:	94a03595 	.word	0x94a03595
 800beec:	3fcfffff 	.word	0x3fcfffff

0800bef0 <_strtod_r>:
 800bef0:	4b01      	ldr	r3, [pc, #4]	@ (800bef8 <_strtod_r+0x8>)
 800bef2:	f7ff ba19 	b.w	800b328 <_strtod_l>
 800bef6:	bf00      	nop
 800bef8:	20000094 	.word	0x20000094

0800befc <_strtol_l.isra.0>:
 800befc:	2b24      	cmp	r3, #36	@ 0x24
 800befe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf02:	4686      	mov	lr, r0
 800bf04:	4690      	mov	r8, r2
 800bf06:	d801      	bhi.n	800bf0c <_strtol_l.isra.0+0x10>
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d106      	bne.n	800bf1a <_strtol_l.isra.0+0x1e>
 800bf0c:	f7fd fdaa 	bl	8009a64 <__errno>
 800bf10:	2316      	movs	r3, #22
 800bf12:	6003      	str	r3, [r0, #0]
 800bf14:	2000      	movs	r0, #0
 800bf16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf1a:	4834      	ldr	r0, [pc, #208]	@ (800bfec <_strtol_l.isra.0+0xf0>)
 800bf1c:	460d      	mov	r5, r1
 800bf1e:	462a      	mov	r2, r5
 800bf20:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf24:	5d06      	ldrb	r6, [r0, r4]
 800bf26:	f016 0608 	ands.w	r6, r6, #8
 800bf2a:	d1f8      	bne.n	800bf1e <_strtol_l.isra.0+0x22>
 800bf2c:	2c2d      	cmp	r4, #45	@ 0x2d
 800bf2e:	d110      	bne.n	800bf52 <_strtol_l.isra.0+0x56>
 800bf30:	782c      	ldrb	r4, [r5, #0]
 800bf32:	2601      	movs	r6, #1
 800bf34:	1c95      	adds	r5, r2, #2
 800bf36:	f033 0210 	bics.w	r2, r3, #16
 800bf3a:	d115      	bne.n	800bf68 <_strtol_l.isra.0+0x6c>
 800bf3c:	2c30      	cmp	r4, #48	@ 0x30
 800bf3e:	d10d      	bne.n	800bf5c <_strtol_l.isra.0+0x60>
 800bf40:	782a      	ldrb	r2, [r5, #0]
 800bf42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bf46:	2a58      	cmp	r2, #88	@ 0x58
 800bf48:	d108      	bne.n	800bf5c <_strtol_l.isra.0+0x60>
 800bf4a:	786c      	ldrb	r4, [r5, #1]
 800bf4c:	3502      	adds	r5, #2
 800bf4e:	2310      	movs	r3, #16
 800bf50:	e00a      	b.n	800bf68 <_strtol_l.isra.0+0x6c>
 800bf52:	2c2b      	cmp	r4, #43	@ 0x2b
 800bf54:	bf04      	itt	eq
 800bf56:	782c      	ldrbeq	r4, [r5, #0]
 800bf58:	1c95      	addeq	r5, r2, #2
 800bf5a:	e7ec      	b.n	800bf36 <_strtol_l.isra.0+0x3a>
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d1f6      	bne.n	800bf4e <_strtol_l.isra.0+0x52>
 800bf60:	2c30      	cmp	r4, #48	@ 0x30
 800bf62:	bf14      	ite	ne
 800bf64:	230a      	movne	r3, #10
 800bf66:	2308      	moveq	r3, #8
 800bf68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bf6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bf70:	2200      	movs	r2, #0
 800bf72:	fbbc f9f3 	udiv	r9, ip, r3
 800bf76:	4610      	mov	r0, r2
 800bf78:	fb03 ca19 	mls	sl, r3, r9, ip
 800bf7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bf80:	2f09      	cmp	r7, #9
 800bf82:	d80f      	bhi.n	800bfa4 <_strtol_l.isra.0+0xa8>
 800bf84:	463c      	mov	r4, r7
 800bf86:	42a3      	cmp	r3, r4
 800bf88:	dd1b      	ble.n	800bfc2 <_strtol_l.isra.0+0xc6>
 800bf8a:	1c57      	adds	r7, r2, #1
 800bf8c:	d007      	beq.n	800bf9e <_strtol_l.isra.0+0xa2>
 800bf8e:	4581      	cmp	r9, r0
 800bf90:	d314      	bcc.n	800bfbc <_strtol_l.isra.0+0xc0>
 800bf92:	d101      	bne.n	800bf98 <_strtol_l.isra.0+0x9c>
 800bf94:	45a2      	cmp	sl, r4
 800bf96:	db11      	blt.n	800bfbc <_strtol_l.isra.0+0xc0>
 800bf98:	fb00 4003 	mla	r0, r0, r3, r4
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfa2:	e7eb      	b.n	800bf7c <_strtol_l.isra.0+0x80>
 800bfa4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bfa8:	2f19      	cmp	r7, #25
 800bfaa:	d801      	bhi.n	800bfb0 <_strtol_l.isra.0+0xb4>
 800bfac:	3c37      	subs	r4, #55	@ 0x37
 800bfae:	e7ea      	b.n	800bf86 <_strtol_l.isra.0+0x8a>
 800bfb0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bfb4:	2f19      	cmp	r7, #25
 800bfb6:	d804      	bhi.n	800bfc2 <_strtol_l.isra.0+0xc6>
 800bfb8:	3c57      	subs	r4, #87	@ 0x57
 800bfba:	e7e4      	b.n	800bf86 <_strtol_l.isra.0+0x8a>
 800bfbc:	f04f 32ff 	mov.w	r2, #4294967295
 800bfc0:	e7ed      	b.n	800bf9e <_strtol_l.isra.0+0xa2>
 800bfc2:	1c53      	adds	r3, r2, #1
 800bfc4:	d108      	bne.n	800bfd8 <_strtol_l.isra.0+0xdc>
 800bfc6:	2322      	movs	r3, #34	@ 0x22
 800bfc8:	f8ce 3000 	str.w	r3, [lr]
 800bfcc:	4660      	mov	r0, ip
 800bfce:	f1b8 0f00 	cmp.w	r8, #0
 800bfd2:	d0a0      	beq.n	800bf16 <_strtol_l.isra.0+0x1a>
 800bfd4:	1e69      	subs	r1, r5, #1
 800bfd6:	e006      	b.n	800bfe6 <_strtol_l.isra.0+0xea>
 800bfd8:	b106      	cbz	r6, 800bfdc <_strtol_l.isra.0+0xe0>
 800bfda:	4240      	negs	r0, r0
 800bfdc:	f1b8 0f00 	cmp.w	r8, #0
 800bfe0:	d099      	beq.n	800bf16 <_strtol_l.isra.0+0x1a>
 800bfe2:	2a00      	cmp	r2, #0
 800bfe4:	d1f6      	bne.n	800bfd4 <_strtol_l.isra.0+0xd8>
 800bfe6:	f8c8 1000 	str.w	r1, [r8]
 800bfea:	e794      	b.n	800bf16 <_strtol_l.isra.0+0x1a>
 800bfec:	0800d631 	.word	0x0800d631

0800bff0 <_strtol_r>:
 800bff0:	f7ff bf84 	b.w	800befc <_strtol_l.isra.0>

0800bff4 <__ssputs_r>:
 800bff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bff8:	688e      	ldr	r6, [r1, #8]
 800bffa:	461f      	mov	r7, r3
 800bffc:	42be      	cmp	r6, r7
 800bffe:	680b      	ldr	r3, [r1, #0]
 800c000:	4682      	mov	sl, r0
 800c002:	460c      	mov	r4, r1
 800c004:	4690      	mov	r8, r2
 800c006:	d82d      	bhi.n	800c064 <__ssputs_r+0x70>
 800c008:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c00c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c010:	d026      	beq.n	800c060 <__ssputs_r+0x6c>
 800c012:	6965      	ldr	r5, [r4, #20]
 800c014:	6909      	ldr	r1, [r1, #16]
 800c016:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c01a:	eba3 0901 	sub.w	r9, r3, r1
 800c01e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c022:	1c7b      	adds	r3, r7, #1
 800c024:	444b      	add	r3, r9
 800c026:	106d      	asrs	r5, r5, #1
 800c028:	429d      	cmp	r5, r3
 800c02a:	bf38      	it	cc
 800c02c:	461d      	movcc	r5, r3
 800c02e:	0553      	lsls	r3, r2, #21
 800c030:	d527      	bpl.n	800c082 <__ssputs_r+0x8e>
 800c032:	4629      	mov	r1, r5
 800c034:	f7fe fc24 	bl	800a880 <_malloc_r>
 800c038:	4606      	mov	r6, r0
 800c03a:	b360      	cbz	r0, 800c096 <__ssputs_r+0xa2>
 800c03c:	6921      	ldr	r1, [r4, #16]
 800c03e:	464a      	mov	r2, r9
 800c040:	f7fd fd3d 	bl	8009abe <memcpy>
 800c044:	89a3      	ldrh	r3, [r4, #12]
 800c046:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c04a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c04e:	81a3      	strh	r3, [r4, #12]
 800c050:	6126      	str	r6, [r4, #16]
 800c052:	6165      	str	r5, [r4, #20]
 800c054:	444e      	add	r6, r9
 800c056:	eba5 0509 	sub.w	r5, r5, r9
 800c05a:	6026      	str	r6, [r4, #0]
 800c05c:	60a5      	str	r5, [r4, #8]
 800c05e:	463e      	mov	r6, r7
 800c060:	42be      	cmp	r6, r7
 800c062:	d900      	bls.n	800c066 <__ssputs_r+0x72>
 800c064:	463e      	mov	r6, r7
 800c066:	6820      	ldr	r0, [r4, #0]
 800c068:	4632      	mov	r2, r6
 800c06a:	4641      	mov	r1, r8
 800c06c:	f000 fb6a 	bl	800c744 <memmove>
 800c070:	68a3      	ldr	r3, [r4, #8]
 800c072:	1b9b      	subs	r3, r3, r6
 800c074:	60a3      	str	r3, [r4, #8]
 800c076:	6823      	ldr	r3, [r4, #0]
 800c078:	4433      	add	r3, r6
 800c07a:	6023      	str	r3, [r4, #0]
 800c07c:	2000      	movs	r0, #0
 800c07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c082:	462a      	mov	r2, r5
 800c084:	f000 ff41 	bl	800cf0a <_realloc_r>
 800c088:	4606      	mov	r6, r0
 800c08a:	2800      	cmp	r0, #0
 800c08c:	d1e0      	bne.n	800c050 <__ssputs_r+0x5c>
 800c08e:	6921      	ldr	r1, [r4, #16]
 800c090:	4650      	mov	r0, sl
 800c092:	f7fe fb81 	bl	800a798 <_free_r>
 800c096:	230c      	movs	r3, #12
 800c098:	f8ca 3000 	str.w	r3, [sl]
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0a2:	81a3      	strh	r3, [r4, #12]
 800c0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a8:	e7e9      	b.n	800c07e <__ssputs_r+0x8a>
	...

0800c0ac <_svfiprintf_r>:
 800c0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b0:	4698      	mov	r8, r3
 800c0b2:	898b      	ldrh	r3, [r1, #12]
 800c0b4:	061b      	lsls	r3, r3, #24
 800c0b6:	b09d      	sub	sp, #116	@ 0x74
 800c0b8:	4607      	mov	r7, r0
 800c0ba:	460d      	mov	r5, r1
 800c0bc:	4614      	mov	r4, r2
 800c0be:	d510      	bpl.n	800c0e2 <_svfiprintf_r+0x36>
 800c0c0:	690b      	ldr	r3, [r1, #16]
 800c0c2:	b973      	cbnz	r3, 800c0e2 <_svfiprintf_r+0x36>
 800c0c4:	2140      	movs	r1, #64	@ 0x40
 800c0c6:	f7fe fbdb 	bl	800a880 <_malloc_r>
 800c0ca:	6028      	str	r0, [r5, #0]
 800c0cc:	6128      	str	r0, [r5, #16]
 800c0ce:	b930      	cbnz	r0, 800c0de <_svfiprintf_r+0x32>
 800c0d0:	230c      	movs	r3, #12
 800c0d2:	603b      	str	r3, [r7, #0]
 800c0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d8:	b01d      	add	sp, #116	@ 0x74
 800c0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0de:	2340      	movs	r3, #64	@ 0x40
 800c0e0:	616b      	str	r3, [r5, #20]
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0e6:	2320      	movs	r3, #32
 800c0e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c0ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0f0:	2330      	movs	r3, #48	@ 0x30
 800c0f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c290 <_svfiprintf_r+0x1e4>
 800c0f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c0fa:	f04f 0901 	mov.w	r9, #1
 800c0fe:	4623      	mov	r3, r4
 800c100:	469a      	mov	sl, r3
 800c102:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c106:	b10a      	cbz	r2, 800c10c <_svfiprintf_r+0x60>
 800c108:	2a25      	cmp	r2, #37	@ 0x25
 800c10a:	d1f9      	bne.n	800c100 <_svfiprintf_r+0x54>
 800c10c:	ebba 0b04 	subs.w	fp, sl, r4
 800c110:	d00b      	beq.n	800c12a <_svfiprintf_r+0x7e>
 800c112:	465b      	mov	r3, fp
 800c114:	4622      	mov	r2, r4
 800c116:	4629      	mov	r1, r5
 800c118:	4638      	mov	r0, r7
 800c11a:	f7ff ff6b 	bl	800bff4 <__ssputs_r>
 800c11e:	3001      	adds	r0, #1
 800c120:	f000 80a7 	beq.w	800c272 <_svfiprintf_r+0x1c6>
 800c124:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c126:	445a      	add	r2, fp
 800c128:	9209      	str	r2, [sp, #36]	@ 0x24
 800c12a:	f89a 3000 	ldrb.w	r3, [sl]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	f000 809f 	beq.w	800c272 <_svfiprintf_r+0x1c6>
 800c134:	2300      	movs	r3, #0
 800c136:	f04f 32ff 	mov.w	r2, #4294967295
 800c13a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c13e:	f10a 0a01 	add.w	sl, sl, #1
 800c142:	9304      	str	r3, [sp, #16]
 800c144:	9307      	str	r3, [sp, #28]
 800c146:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c14a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c14c:	4654      	mov	r4, sl
 800c14e:	2205      	movs	r2, #5
 800c150:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c154:	484e      	ldr	r0, [pc, #312]	@ (800c290 <_svfiprintf_r+0x1e4>)
 800c156:	f7f4 f843 	bl	80001e0 <memchr>
 800c15a:	9a04      	ldr	r2, [sp, #16]
 800c15c:	b9d8      	cbnz	r0, 800c196 <_svfiprintf_r+0xea>
 800c15e:	06d0      	lsls	r0, r2, #27
 800c160:	bf44      	itt	mi
 800c162:	2320      	movmi	r3, #32
 800c164:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c168:	0711      	lsls	r1, r2, #28
 800c16a:	bf44      	itt	mi
 800c16c:	232b      	movmi	r3, #43	@ 0x2b
 800c16e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c172:	f89a 3000 	ldrb.w	r3, [sl]
 800c176:	2b2a      	cmp	r3, #42	@ 0x2a
 800c178:	d015      	beq.n	800c1a6 <_svfiprintf_r+0xfa>
 800c17a:	9a07      	ldr	r2, [sp, #28]
 800c17c:	4654      	mov	r4, sl
 800c17e:	2000      	movs	r0, #0
 800c180:	f04f 0c0a 	mov.w	ip, #10
 800c184:	4621      	mov	r1, r4
 800c186:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c18a:	3b30      	subs	r3, #48	@ 0x30
 800c18c:	2b09      	cmp	r3, #9
 800c18e:	d94b      	bls.n	800c228 <_svfiprintf_r+0x17c>
 800c190:	b1b0      	cbz	r0, 800c1c0 <_svfiprintf_r+0x114>
 800c192:	9207      	str	r2, [sp, #28]
 800c194:	e014      	b.n	800c1c0 <_svfiprintf_r+0x114>
 800c196:	eba0 0308 	sub.w	r3, r0, r8
 800c19a:	fa09 f303 	lsl.w	r3, r9, r3
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	9304      	str	r3, [sp, #16]
 800c1a2:	46a2      	mov	sl, r4
 800c1a4:	e7d2      	b.n	800c14c <_svfiprintf_r+0xa0>
 800c1a6:	9b03      	ldr	r3, [sp, #12]
 800c1a8:	1d19      	adds	r1, r3, #4
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	9103      	str	r1, [sp, #12]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	bfbb      	ittet	lt
 800c1b2:	425b      	neglt	r3, r3
 800c1b4:	f042 0202 	orrlt.w	r2, r2, #2
 800c1b8:	9307      	strge	r3, [sp, #28]
 800c1ba:	9307      	strlt	r3, [sp, #28]
 800c1bc:	bfb8      	it	lt
 800c1be:	9204      	strlt	r2, [sp, #16]
 800c1c0:	7823      	ldrb	r3, [r4, #0]
 800c1c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c1c4:	d10a      	bne.n	800c1dc <_svfiprintf_r+0x130>
 800c1c6:	7863      	ldrb	r3, [r4, #1]
 800c1c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1ca:	d132      	bne.n	800c232 <_svfiprintf_r+0x186>
 800c1cc:	9b03      	ldr	r3, [sp, #12]
 800c1ce:	1d1a      	adds	r2, r3, #4
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	9203      	str	r2, [sp, #12]
 800c1d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c1d8:	3402      	adds	r4, #2
 800c1da:	9305      	str	r3, [sp, #20]
 800c1dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c2a0 <_svfiprintf_r+0x1f4>
 800c1e0:	7821      	ldrb	r1, [r4, #0]
 800c1e2:	2203      	movs	r2, #3
 800c1e4:	4650      	mov	r0, sl
 800c1e6:	f7f3 fffb 	bl	80001e0 <memchr>
 800c1ea:	b138      	cbz	r0, 800c1fc <_svfiprintf_r+0x150>
 800c1ec:	9b04      	ldr	r3, [sp, #16]
 800c1ee:	eba0 000a 	sub.w	r0, r0, sl
 800c1f2:	2240      	movs	r2, #64	@ 0x40
 800c1f4:	4082      	lsls	r2, r0
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	3401      	adds	r4, #1
 800c1fa:	9304      	str	r3, [sp, #16]
 800c1fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c200:	4824      	ldr	r0, [pc, #144]	@ (800c294 <_svfiprintf_r+0x1e8>)
 800c202:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c206:	2206      	movs	r2, #6
 800c208:	f7f3 ffea 	bl	80001e0 <memchr>
 800c20c:	2800      	cmp	r0, #0
 800c20e:	d036      	beq.n	800c27e <_svfiprintf_r+0x1d2>
 800c210:	4b21      	ldr	r3, [pc, #132]	@ (800c298 <_svfiprintf_r+0x1ec>)
 800c212:	bb1b      	cbnz	r3, 800c25c <_svfiprintf_r+0x1b0>
 800c214:	9b03      	ldr	r3, [sp, #12]
 800c216:	3307      	adds	r3, #7
 800c218:	f023 0307 	bic.w	r3, r3, #7
 800c21c:	3308      	adds	r3, #8
 800c21e:	9303      	str	r3, [sp, #12]
 800c220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c222:	4433      	add	r3, r6
 800c224:	9309      	str	r3, [sp, #36]	@ 0x24
 800c226:	e76a      	b.n	800c0fe <_svfiprintf_r+0x52>
 800c228:	fb0c 3202 	mla	r2, ip, r2, r3
 800c22c:	460c      	mov	r4, r1
 800c22e:	2001      	movs	r0, #1
 800c230:	e7a8      	b.n	800c184 <_svfiprintf_r+0xd8>
 800c232:	2300      	movs	r3, #0
 800c234:	3401      	adds	r4, #1
 800c236:	9305      	str	r3, [sp, #20]
 800c238:	4619      	mov	r1, r3
 800c23a:	f04f 0c0a 	mov.w	ip, #10
 800c23e:	4620      	mov	r0, r4
 800c240:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c244:	3a30      	subs	r2, #48	@ 0x30
 800c246:	2a09      	cmp	r2, #9
 800c248:	d903      	bls.n	800c252 <_svfiprintf_r+0x1a6>
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d0c6      	beq.n	800c1dc <_svfiprintf_r+0x130>
 800c24e:	9105      	str	r1, [sp, #20]
 800c250:	e7c4      	b.n	800c1dc <_svfiprintf_r+0x130>
 800c252:	fb0c 2101 	mla	r1, ip, r1, r2
 800c256:	4604      	mov	r4, r0
 800c258:	2301      	movs	r3, #1
 800c25a:	e7f0      	b.n	800c23e <_svfiprintf_r+0x192>
 800c25c:	ab03      	add	r3, sp, #12
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	462a      	mov	r2, r5
 800c262:	4b0e      	ldr	r3, [pc, #56]	@ (800c29c <_svfiprintf_r+0x1f0>)
 800c264:	a904      	add	r1, sp, #16
 800c266:	4638      	mov	r0, r7
 800c268:	f7fc fb5c 	bl	8008924 <_printf_float>
 800c26c:	1c42      	adds	r2, r0, #1
 800c26e:	4606      	mov	r6, r0
 800c270:	d1d6      	bne.n	800c220 <_svfiprintf_r+0x174>
 800c272:	89ab      	ldrh	r3, [r5, #12]
 800c274:	065b      	lsls	r3, r3, #25
 800c276:	f53f af2d 	bmi.w	800c0d4 <_svfiprintf_r+0x28>
 800c27a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c27c:	e72c      	b.n	800c0d8 <_svfiprintf_r+0x2c>
 800c27e:	ab03      	add	r3, sp, #12
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	462a      	mov	r2, r5
 800c284:	4b05      	ldr	r3, [pc, #20]	@ (800c29c <_svfiprintf_r+0x1f0>)
 800c286:	a904      	add	r1, sp, #16
 800c288:	4638      	mov	r0, r7
 800c28a:	f7fc fde3 	bl	8008e54 <_printf_i>
 800c28e:	e7ed      	b.n	800c26c <_svfiprintf_r+0x1c0>
 800c290:	0800d42d 	.word	0x0800d42d
 800c294:	0800d437 	.word	0x0800d437
 800c298:	08008925 	.word	0x08008925
 800c29c:	0800bff5 	.word	0x0800bff5
 800c2a0:	0800d433 	.word	0x0800d433

0800c2a4 <__sfputc_r>:
 800c2a4:	6893      	ldr	r3, [r2, #8]
 800c2a6:	3b01      	subs	r3, #1
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	b410      	push	{r4}
 800c2ac:	6093      	str	r3, [r2, #8]
 800c2ae:	da08      	bge.n	800c2c2 <__sfputc_r+0x1e>
 800c2b0:	6994      	ldr	r4, [r2, #24]
 800c2b2:	42a3      	cmp	r3, r4
 800c2b4:	db01      	blt.n	800c2ba <__sfputc_r+0x16>
 800c2b6:	290a      	cmp	r1, #10
 800c2b8:	d103      	bne.n	800c2c2 <__sfputc_r+0x1e>
 800c2ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2be:	f7fd ba8c 	b.w	80097da <__swbuf_r>
 800c2c2:	6813      	ldr	r3, [r2, #0]
 800c2c4:	1c58      	adds	r0, r3, #1
 800c2c6:	6010      	str	r0, [r2, #0]
 800c2c8:	7019      	strb	r1, [r3, #0]
 800c2ca:	4608      	mov	r0, r1
 800c2cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2d0:	4770      	bx	lr

0800c2d2 <__sfputs_r>:
 800c2d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2d4:	4606      	mov	r6, r0
 800c2d6:	460f      	mov	r7, r1
 800c2d8:	4614      	mov	r4, r2
 800c2da:	18d5      	adds	r5, r2, r3
 800c2dc:	42ac      	cmp	r4, r5
 800c2de:	d101      	bne.n	800c2e4 <__sfputs_r+0x12>
 800c2e0:	2000      	movs	r0, #0
 800c2e2:	e007      	b.n	800c2f4 <__sfputs_r+0x22>
 800c2e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2e8:	463a      	mov	r2, r7
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	f7ff ffda 	bl	800c2a4 <__sfputc_r>
 800c2f0:	1c43      	adds	r3, r0, #1
 800c2f2:	d1f3      	bne.n	800c2dc <__sfputs_r+0xa>
 800c2f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c2f8 <_vfiprintf_r>:
 800c2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fc:	460d      	mov	r5, r1
 800c2fe:	b09d      	sub	sp, #116	@ 0x74
 800c300:	4614      	mov	r4, r2
 800c302:	4698      	mov	r8, r3
 800c304:	4606      	mov	r6, r0
 800c306:	b118      	cbz	r0, 800c310 <_vfiprintf_r+0x18>
 800c308:	6a03      	ldr	r3, [r0, #32]
 800c30a:	b90b      	cbnz	r3, 800c310 <_vfiprintf_r+0x18>
 800c30c:	f7fd f95a 	bl	80095c4 <__sinit>
 800c310:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c312:	07d9      	lsls	r1, r3, #31
 800c314:	d405      	bmi.n	800c322 <_vfiprintf_r+0x2a>
 800c316:	89ab      	ldrh	r3, [r5, #12]
 800c318:	059a      	lsls	r2, r3, #22
 800c31a:	d402      	bmi.n	800c322 <_vfiprintf_r+0x2a>
 800c31c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c31e:	f7fd fbcc 	bl	8009aba <__retarget_lock_acquire_recursive>
 800c322:	89ab      	ldrh	r3, [r5, #12]
 800c324:	071b      	lsls	r3, r3, #28
 800c326:	d501      	bpl.n	800c32c <_vfiprintf_r+0x34>
 800c328:	692b      	ldr	r3, [r5, #16]
 800c32a:	b99b      	cbnz	r3, 800c354 <_vfiprintf_r+0x5c>
 800c32c:	4629      	mov	r1, r5
 800c32e:	4630      	mov	r0, r6
 800c330:	f7fd fa92 	bl	8009858 <__swsetup_r>
 800c334:	b170      	cbz	r0, 800c354 <_vfiprintf_r+0x5c>
 800c336:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c338:	07dc      	lsls	r4, r3, #31
 800c33a:	d504      	bpl.n	800c346 <_vfiprintf_r+0x4e>
 800c33c:	f04f 30ff 	mov.w	r0, #4294967295
 800c340:	b01d      	add	sp, #116	@ 0x74
 800c342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c346:	89ab      	ldrh	r3, [r5, #12]
 800c348:	0598      	lsls	r0, r3, #22
 800c34a:	d4f7      	bmi.n	800c33c <_vfiprintf_r+0x44>
 800c34c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c34e:	f7fd fbb5 	bl	8009abc <__retarget_lock_release_recursive>
 800c352:	e7f3      	b.n	800c33c <_vfiprintf_r+0x44>
 800c354:	2300      	movs	r3, #0
 800c356:	9309      	str	r3, [sp, #36]	@ 0x24
 800c358:	2320      	movs	r3, #32
 800c35a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c35e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c362:	2330      	movs	r3, #48	@ 0x30
 800c364:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c514 <_vfiprintf_r+0x21c>
 800c368:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c36c:	f04f 0901 	mov.w	r9, #1
 800c370:	4623      	mov	r3, r4
 800c372:	469a      	mov	sl, r3
 800c374:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c378:	b10a      	cbz	r2, 800c37e <_vfiprintf_r+0x86>
 800c37a:	2a25      	cmp	r2, #37	@ 0x25
 800c37c:	d1f9      	bne.n	800c372 <_vfiprintf_r+0x7a>
 800c37e:	ebba 0b04 	subs.w	fp, sl, r4
 800c382:	d00b      	beq.n	800c39c <_vfiprintf_r+0xa4>
 800c384:	465b      	mov	r3, fp
 800c386:	4622      	mov	r2, r4
 800c388:	4629      	mov	r1, r5
 800c38a:	4630      	mov	r0, r6
 800c38c:	f7ff ffa1 	bl	800c2d2 <__sfputs_r>
 800c390:	3001      	adds	r0, #1
 800c392:	f000 80a7 	beq.w	800c4e4 <_vfiprintf_r+0x1ec>
 800c396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c398:	445a      	add	r2, fp
 800c39a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c39c:	f89a 3000 	ldrb.w	r3, [sl]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	f000 809f 	beq.w	800c4e4 <_vfiprintf_r+0x1ec>
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3b0:	f10a 0a01 	add.w	sl, sl, #1
 800c3b4:	9304      	str	r3, [sp, #16]
 800c3b6:	9307      	str	r3, [sp, #28]
 800c3b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c3bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3be:	4654      	mov	r4, sl
 800c3c0:	2205      	movs	r2, #5
 800c3c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3c6:	4853      	ldr	r0, [pc, #332]	@ (800c514 <_vfiprintf_r+0x21c>)
 800c3c8:	f7f3 ff0a 	bl	80001e0 <memchr>
 800c3cc:	9a04      	ldr	r2, [sp, #16]
 800c3ce:	b9d8      	cbnz	r0, 800c408 <_vfiprintf_r+0x110>
 800c3d0:	06d1      	lsls	r1, r2, #27
 800c3d2:	bf44      	itt	mi
 800c3d4:	2320      	movmi	r3, #32
 800c3d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3da:	0713      	lsls	r3, r2, #28
 800c3dc:	bf44      	itt	mi
 800c3de:	232b      	movmi	r3, #43	@ 0x2b
 800c3e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3e4:	f89a 3000 	ldrb.w	r3, [sl]
 800c3e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3ea:	d015      	beq.n	800c418 <_vfiprintf_r+0x120>
 800c3ec:	9a07      	ldr	r2, [sp, #28]
 800c3ee:	4654      	mov	r4, sl
 800c3f0:	2000      	movs	r0, #0
 800c3f2:	f04f 0c0a 	mov.w	ip, #10
 800c3f6:	4621      	mov	r1, r4
 800c3f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3fc:	3b30      	subs	r3, #48	@ 0x30
 800c3fe:	2b09      	cmp	r3, #9
 800c400:	d94b      	bls.n	800c49a <_vfiprintf_r+0x1a2>
 800c402:	b1b0      	cbz	r0, 800c432 <_vfiprintf_r+0x13a>
 800c404:	9207      	str	r2, [sp, #28]
 800c406:	e014      	b.n	800c432 <_vfiprintf_r+0x13a>
 800c408:	eba0 0308 	sub.w	r3, r0, r8
 800c40c:	fa09 f303 	lsl.w	r3, r9, r3
 800c410:	4313      	orrs	r3, r2
 800c412:	9304      	str	r3, [sp, #16]
 800c414:	46a2      	mov	sl, r4
 800c416:	e7d2      	b.n	800c3be <_vfiprintf_r+0xc6>
 800c418:	9b03      	ldr	r3, [sp, #12]
 800c41a:	1d19      	adds	r1, r3, #4
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	9103      	str	r1, [sp, #12]
 800c420:	2b00      	cmp	r3, #0
 800c422:	bfbb      	ittet	lt
 800c424:	425b      	neglt	r3, r3
 800c426:	f042 0202 	orrlt.w	r2, r2, #2
 800c42a:	9307      	strge	r3, [sp, #28]
 800c42c:	9307      	strlt	r3, [sp, #28]
 800c42e:	bfb8      	it	lt
 800c430:	9204      	strlt	r2, [sp, #16]
 800c432:	7823      	ldrb	r3, [r4, #0]
 800c434:	2b2e      	cmp	r3, #46	@ 0x2e
 800c436:	d10a      	bne.n	800c44e <_vfiprintf_r+0x156>
 800c438:	7863      	ldrb	r3, [r4, #1]
 800c43a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c43c:	d132      	bne.n	800c4a4 <_vfiprintf_r+0x1ac>
 800c43e:	9b03      	ldr	r3, [sp, #12]
 800c440:	1d1a      	adds	r2, r3, #4
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	9203      	str	r2, [sp, #12]
 800c446:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c44a:	3402      	adds	r4, #2
 800c44c:	9305      	str	r3, [sp, #20]
 800c44e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c524 <_vfiprintf_r+0x22c>
 800c452:	7821      	ldrb	r1, [r4, #0]
 800c454:	2203      	movs	r2, #3
 800c456:	4650      	mov	r0, sl
 800c458:	f7f3 fec2 	bl	80001e0 <memchr>
 800c45c:	b138      	cbz	r0, 800c46e <_vfiprintf_r+0x176>
 800c45e:	9b04      	ldr	r3, [sp, #16]
 800c460:	eba0 000a 	sub.w	r0, r0, sl
 800c464:	2240      	movs	r2, #64	@ 0x40
 800c466:	4082      	lsls	r2, r0
 800c468:	4313      	orrs	r3, r2
 800c46a:	3401      	adds	r4, #1
 800c46c:	9304      	str	r3, [sp, #16]
 800c46e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c472:	4829      	ldr	r0, [pc, #164]	@ (800c518 <_vfiprintf_r+0x220>)
 800c474:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c478:	2206      	movs	r2, #6
 800c47a:	f7f3 feb1 	bl	80001e0 <memchr>
 800c47e:	2800      	cmp	r0, #0
 800c480:	d03f      	beq.n	800c502 <_vfiprintf_r+0x20a>
 800c482:	4b26      	ldr	r3, [pc, #152]	@ (800c51c <_vfiprintf_r+0x224>)
 800c484:	bb1b      	cbnz	r3, 800c4ce <_vfiprintf_r+0x1d6>
 800c486:	9b03      	ldr	r3, [sp, #12]
 800c488:	3307      	adds	r3, #7
 800c48a:	f023 0307 	bic.w	r3, r3, #7
 800c48e:	3308      	adds	r3, #8
 800c490:	9303      	str	r3, [sp, #12]
 800c492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c494:	443b      	add	r3, r7
 800c496:	9309      	str	r3, [sp, #36]	@ 0x24
 800c498:	e76a      	b.n	800c370 <_vfiprintf_r+0x78>
 800c49a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c49e:	460c      	mov	r4, r1
 800c4a0:	2001      	movs	r0, #1
 800c4a2:	e7a8      	b.n	800c3f6 <_vfiprintf_r+0xfe>
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	3401      	adds	r4, #1
 800c4a8:	9305      	str	r3, [sp, #20]
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	f04f 0c0a 	mov.w	ip, #10
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4b6:	3a30      	subs	r2, #48	@ 0x30
 800c4b8:	2a09      	cmp	r2, #9
 800c4ba:	d903      	bls.n	800c4c4 <_vfiprintf_r+0x1cc>
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d0c6      	beq.n	800c44e <_vfiprintf_r+0x156>
 800c4c0:	9105      	str	r1, [sp, #20]
 800c4c2:	e7c4      	b.n	800c44e <_vfiprintf_r+0x156>
 800c4c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4c8:	4604      	mov	r4, r0
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e7f0      	b.n	800c4b0 <_vfiprintf_r+0x1b8>
 800c4ce:	ab03      	add	r3, sp, #12
 800c4d0:	9300      	str	r3, [sp, #0]
 800c4d2:	462a      	mov	r2, r5
 800c4d4:	4b12      	ldr	r3, [pc, #72]	@ (800c520 <_vfiprintf_r+0x228>)
 800c4d6:	a904      	add	r1, sp, #16
 800c4d8:	4630      	mov	r0, r6
 800c4da:	f7fc fa23 	bl	8008924 <_printf_float>
 800c4de:	4607      	mov	r7, r0
 800c4e0:	1c78      	adds	r0, r7, #1
 800c4e2:	d1d6      	bne.n	800c492 <_vfiprintf_r+0x19a>
 800c4e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4e6:	07d9      	lsls	r1, r3, #31
 800c4e8:	d405      	bmi.n	800c4f6 <_vfiprintf_r+0x1fe>
 800c4ea:	89ab      	ldrh	r3, [r5, #12]
 800c4ec:	059a      	lsls	r2, r3, #22
 800c4ee:	d402      	bmi.n	800c4f6 <_vfiprintf_r+0x1fe>
 800c4f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4f2:	f7fd fae3 	bl	8009abc <__retarget_lock_release_recursive>
 800c4f6:	89ab      	ldrh	r3, [r5, #12]
 800c4f8:	065b      	lsls	r3, r3, #25
 800c4fa:	f53f af1f 	bmi.w	800c33c <_vfiprintf_r+0x44>
 800c4fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c500:	e71e      	b.n	800c340 <_vfiprintf_r+0x48>
 800c502:	ab03      	add	r3, sp, #12
 800c504:	9300      	str	r3, [sp, #0]
 800c506:	462a      	mov	r2, r5
 800c508:	4b05      	ldr	r3, [pc, #20]	@ (800c520 <_vfiprintf_r+0x228>)
 800c50a:	a904      	add	r1, sp, #16
 800c50c:	4630      	mov	r0, r6
 800c50e:	f7fc fca1 	bl	8008e54 <_printf_i>
 800c512:	e7e4      	b.n	800c4de <_vfiprintf_r+0x1e6>
 800c514:	0800d42d 	.word	0x0800d42d
 800c518:	0800d437 	.word	0x0800d437
 800c51c:	08008925 	.word	0x08008925
 800c520:	0800c2d3 	.word	0x0800c2d3
 800c524:	0800d433 	.word	0x0800d433

0800c528 <__sflush_r>:
 800c528:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c530:	0716      	lsls	r6, r2, #28
 800c532:	4605      	mov	r5, r0
 800c534:	460c      	mov	r4, r1
 800c536:	d454      	bmi.n	800c5e2 <__sflush_r+0xba>
 800c538:	684b      	ldr	r3, [r1, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	dc02      	bgt.n	800c544 <__sflush_r+0x1c>
 800c53e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c540:	2b00      	cmp	r3, #0
 800c542:	dd48      	ble.n	800c5d6 <__sflush_r+0xae>
 800c544:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c546:	2e00      	cmp	r6, #0
 800c548:	d045      	beq.n	800c5d6 <__sflush_r+0xae>
 800c54a:	2300      	movs	r3, #0
 800c54c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c550:	682f      	ldr	r7, [r5, #0]
 800c552:	6a21      	ldr	r1, [r4, #32]
 800c554:	602b      	str	r3, [r5, #0]
 800c556:	d030      	beq.n	800c5ba <__sflush_r+0x92>
 800c558:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c55a:	89a3      	ldrh	r3, [r4, #12]
 800c55c:	0759      	lsls	r1, r3, #29
 800c55e:	d505      	bpl.n	800c56c <__sflush_r+0x44>
 800c560:	6863      	ldr	r3, [r4, #4]
 800c562:	1ad2      	subs	r2, r2, r3
 800c564:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c566:	b10b      	cbz	r3, 800c56c <__sflush_r+0x44>
 800c568:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c56a:	1ad2      	subs	r2, r2, r3
 800c56c:	2300      	movs	r3, #0
 800c56e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c570:	6a21      	ldr	r1, [r4, #32]
 800c572:	4628      	mov	r0, r5
 800c574:	47b0      	blx	r6
 800c576:	1c43      	adds	r3, r0, #1
 800c578:	89a3      	ldrh	r3, [r4, #12]
 800c57a:	d106      	bne.n	800c58a <__sflush_r+0x62>
 800c57c:	6829      	ldr	r1, [r5, #0]
 800c57e:	291d      	cmp	r1, #29
 800c580:	d82b      	bhi.n	800c5da <__sflush_r+0xb2>
 800c582:	4a2a      	ldr	r2, [pc, #168]	@ (800c62c <__sflush_r+0x104>)
 800c584:	40ca      	lsrs	r2, r1
 800c586:	07d6      	lsls	r6, r2, #31
 800c588:	d527      	bpl.n	800c5da <__sflush_r+0xb2>
 800c58a:	2200      	movs	r2, #0
 800c58c:	6062      	str	r2, [r4, #4]
 800c58e:	04d9      	lsls	r1, r3, #19
 800c590:	6922      	ldr	r2, [r4, #16]
 800c592:	6022      	str	r2, [r4, #0]
 800c594:	d504      	bpl.n	800c5a0 <__sflush_r+0x78>
 800c596:	1c42      	adds	r2, r0, #1
 800c598:	d101      	bne.n	800c59e <__sflush_r+0x76>
 800c59a:	682b      	ldr	r3, [r5, #0]
 800c59c:	b903      	cbnz	r3, 800c5a0 <__sflush_r+0x78>
 800c59e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c5a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c5a2:	602f      	str	r7, [r5, #0]
 800c5a4:	b1b9      	cbz	r1, 800c5d6 <__sflush_r+0xae>
 800c5a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c5aa:	4299      	cmp	r1, r3
 800c5ac:	d002      	beq.n	800c5b4 <__sflush_r+0x8c>
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	f7fe f8f2 	bl	800a798 <_free_r>
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800c5b8:	e00d      	b.n	800c5d6 <__sflush_r+0xae>
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	4628      	mov	r0, r5
 800c5be:	47b0      	blx	r6
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	1c50      	adds	r0, r2, #1
 800c5c4:	d1c9      	bne.n	800c55a <__sflush_r+0x32>
 800c5c6:	682b      	ldr	r3, [r5, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d0c6      	beq.n	800c55a <__sflush_r+0x32>
 800c5cc:	2b1d      	cmp	r3, #29
 800c5ce:	d001      	beq.n	800c5d4 <__sflush_r+0xac>
 800c5d0:	2b16      	cmp	r3, #22
 800c5d2:	d11e      	bne.n	800c612 <__sflush_r+0xea>
 800c5d4:	602f      	str	r7, [r5, #0]
 800c5d6:	2000      	movs	r0, #0
 800c5d8:	e022      	b.n	800c620 <__sflush_r+0xf8>
 800c5da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5de:	b21b      	sxth	r3, r3
 800c5e0:	e01b      	b.n	800c61a <__sflush_r+0xf2>
 800c5e2:	690f      	ldr	r7, [r1, #16]
 800c5e4:	2f00      	cmp	r7, #0
 800c5e6:	d0f6      	beq.n	800c5d6 <__sflush_r+0xae>
 800c5e8:	0793      	lsls	r3, r2, #30
 800c5ea:	680e      	ldr	r6, [r1, #0]
 800c5ec:	bf08      	it	eq
 800c5ee:	694b      	ldreq	r3, [r1, #20]
 800c5f0:	600f      	str	r7, [r1, #0]
 800c5f2:	bf18      	it	ne
 800c5f4:	2300      	movne	r3, #0
 800c5f6:	eba6 0807 	sub.w	r8, r6, r7
 800c5fa:	608b      	str	r3, [r1, #8]
 800c5fc:	f1b8 0f00 	cmp.w	r8, #0
 800c600:	dde9      	ble.n	800c5d6 <__sflush_r+0xae>
 800c602:	6a21      	ldr	r1, [r4, #32]
 800c604:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c606:	4643      	mov	r3, r8
 800c608:	463a      	mov	r2, r7
 800c60a:	4628      	mov	r0, r5
 800c60c:	47b0      	blx	r6
 800c60e:	2800      	cmp	r0, #0
 800c610:	dc08      	bgt.n	800c624 <__sflush_r+0xfc>
 800c612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c61a:	81a3      	strh	r3, [r4, #12]
 800c61c:	f04f 30ff 	mov.w	r0, #4294967295
 800c620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c624:	4407      	add	r7, r0
 800c626:	eba8 0800 	sub.w	r8, r8, r0
 800c62a:	e7e7      	b.n	800c5fc <__sflush_r+0xd4>
 800c62c:	20400001 	.word	0x20400001

0800c630 <_fflush_r>:
 800c630:	b538      	push	{r3, r4, r5, lr}
 800c632:	690b      	ldr	r3, [r1, #16]
 800c634:	4605      	mov	r5, r0
 800c636:	460c      	mov	r4, r1
 800c638:	b913      	cbnz	r3, 800c640 <_fflush_r+0x10>
 800c63a:	2500      	movs	r5, #0
 800c63c:	4628      	mov	r0, r5
 800c63e:	bd38      	pop	{r3, r4, r5, pc}
 800c640:	b118      	cbz	r0, 800c64a <_fflush_r+0x1a>
 800c642:	6a03      	ldr	r3, [r0, #32]
 800c644:	b90b      	cbnz	r3, 800c64a <_fflush_r+0x1a>
 800c646:	f7fc ffbd 	bl	80095c4 <__sinit>
 800c64a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d0f3      	beq.n	800c63a <_fflush_r+0xa>
 800c652:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c654:	07d0      	lsls	r0, r2, #31
 800c656:	d404      	bmi.n	800c662 <_fflush_r+0x32>
 800c658:	0599      	lsls	r1, r3, #22
 800c65a:	d402      	bmi.n	800c662 <_fflush_r+0x32>
 800c65c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c65e:	f7fd fa2c 	bl	8009aba <__retarget_lock_acquire_recursive>
 800c662:	4628      	mov	r0, r5
 800c664:	4621      	mov	r1, r4
 800c666:	f7ff ff5f 	bl	800c528 <__sflush_r>
 800c66a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c66c:	07da      	lsls	r2, r3, #31
 800c66e:	4605      	mov	r5, r0
 800c670:	d4e4      	bmi.n	800c63c <_fflush_r+0xc>
 800c672:	89a3      	ldrh	r3, [r4, #12]
 800c674:	059b      	lsls	r3, r3, #22
 800c676:	d4e1      	bmi.n	800c63c <_fflush_r+0xc>
 800c678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c67a:	f7fd fa1f 	bl	8009abc <__retarget_lock_release_recursive>
 800c67e:	e7dd      	b.n	800c63c <_fflush_r+0xc>

0800c680 <__swhatbuf_r>:
 800c680:	b570      	push	{r4, r5, r6, lr}
 800c682:	460c      	mov	r4, r1
 800c684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c688:	2900      	cmp	r1, #0
 800c68a:	b096      	sub	sp, #88	@ 0x58
 800c68c:	4615      	mov	r5, r2
 800c68e:	461e      	mov	r6, r3
 800c690:	da0d      	bge.n	800c6ae <__swhatbuf_r+0x2e>
 800c692:	89a3      	ldrh	r3, [r4, #12]
 800c694:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c698:	f04f 0100 	mov.w	r1, #0
 800c69c:	bf14      	ite	ne
 800c69e:	2340      	movne	r3, #64	@ 0x40
 800c6a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c6a4:	2000      	movs	r0, #0
 800c6a6:	6031      	str	r1, [r6, #0]
 800c6a8:	602b      	str	r3, [r5, #0]
 800c6aa:	b016      	add	sp, #88	@ 0x58
 800c6ac:	bd70      	pop	{r4, r5, r6, pc}
 800c6ae:	466a      	mov	r2, sp
 800c6b0:	f000 f874 	bl	800c79c <_fstat_r>
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	dbec      	blt.n	800c692 <__swhatbuf_r+0x12>
 800c6b8:	9901      	ldr	r1, [sp, #4]
 800c6ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c6be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c6c2:	4259      	negs	r1, r3
 800c6c4:	4159      	adcs	r1, r3
 800c6c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6ca:	e7eb      	b.n	800c6a4 <__swhatbuf_r+0x24>

0800c6cc <__smakebuf_r>:
 800c6cc:	898b      	ldrh	r3, [r1, #12]
 800c6ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6d0:	079d      	lsls	r5, r3, #30
 800c6d2:	4606      	mov	r6, r0
 800c6d4:	460c      	mov	r4, r1
 800c6d6:	d507      	bpl.n	800c6e8 <__smakebuf_r+0x1c>
 800c6d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c6dc:	6023      	str	r3, [r4, #0]
 800c6de:	6123      	str	r3, [r4, #16]
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	6163      	str	r3, [r4, #20]
 800c6e4:	b003      	add	sp, #12
 800c6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6e8:	ab01      	add	r3, sp, #4
 800c6ea:	466a      	mov	r2, sp
 800c6ec:	f7ff ffc8 	bl	800c680 <__swhatbuf_r>
 800c6f0:	9f00      	ldr	r7, [sp, #0]
 800c6f2:	4605      	mov	r5, r0
 800c6f4:	4639      	mov	r1, r7
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	f7fe f8c2 	bl	800a880 <_malloc_r>
 800c6fc:	b948      	cbnz	r0, 800c712 <__smakebuf_r+0x46>
 800c6fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c702:	059a      	lsls	r2, r3, #22
 800c704:	d4ee      	bmi.n	800c6e4 <__smakebuf_r+0x18>
 800c706:	f023 0303 	bic.w	r3, r3, #3
 800c70a:	f043 0302 	orr.w	r3, r3, #2
 800c70e:	81a3      	strh	r3, [r4, #12]
 800c710:	e7e2      	b.n	800c6d8 <__smakebuf_r+0xc>
 800c712:	89a3      	ldrh	r3, [r4, #12]
 800c714:	6020      	str	r0, [r4, #0]
 800c716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c71a:	81a3      	strh	r3, [r4, #12]
 800c71c:	9b01      	ldr	r3, [sp, #4]
 800c71e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c722:	b15b      	cbz	r3, 800c73c <__smakebuf_r+0x70>
 800c724:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c728:	4630      	mov	r0, r6
 800c72a:	f000 f849 	bl	800c7c0 <_isatty_r>
 800c72e:	b128      	cbz	r0, 800c73c <__smakebuf_r+0x70>
 800c730:	89a3      	ldrh	r3, [r4, #12]
 800c732:	f023 0303 	bic.w	r3, r3, #3
 800c736:	f043 0301 	orr.w	r3, r3, #1
 800c73a:	81a3      	strh	r3, [r4, #12]
 800c73c:	89a3      	ldrh	r3, [r4, #12]
 800c73e:	431d      	orrs	r5, r3
 800c740:	81a5      	strh	r5, [r4, #12]
 800c742:	e7cf      	b.n	800c6e4 <__smakebuf_r+0x18>

0800c744 <memmove>:
 800c744:	4288      	cmp	r0, r1
 800c746:	b510      	push	{r4, lr}
 800c748:	eb01 0402 	add.w	r4, r1, r2
 800c74c:	d902      	bls.n	800c754 <memmove+0x10>
 800c74e:	4284      	cmp	r4, r0
 800c750:	4623      	mov	r3, r4
 800c752:	d807      	bhi.n	800c764 <memmove+0x20>
 800c754:	1e43      	subs	r3, r0, #1
 800c756:	42a1      	cmp	r1, r4
 800c758:	d008      	beq.n	800c76c <memmove+0x28>
 800c75a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c75e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c762:	e7f8      	b.n	800c756 <memmove+0x12>
 800c764:	4402      	add	r2, r0
 800c766:	4601      	mov	r1, r0
 800c768:	428a      	cmp	r2, r1
 800c76a:	d100      	bne.n	800c76e <memmove+0x2a>
 800c76c:	bd10      	pop	{r4, pc}
 800c76e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c772:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c776:	e7f7      	b.n	800c768 <memmove+0x24>

0800c778 <strncmp>:
 800c778:	b510      	push	{r4, lr}
 800c77a:	b16a      	cbz	r2, 800c798 <strncmp+0x20>
 800c77c:	3901      	subs	r1, #1
 800c77e:	1884      	adds	r4, r0, r2
 800c780:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c784:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c788:	429a      	cmp	r2, r3
 800c78a:	d103      	bne.n	800c794 <strncmp+0x1c>
 800c78c:	42a0      	cmp	r0, r4
 800c78e:	d001      	beq.n	800c794 <strncmp+0x1c>
 800c790:	2a00      	cmp	r2, #0
 800c792:	d1f5      	bne.n	800c780 <strncmp+0x8>
 800c794:	1ad0      	subs	r0, r2, r3
 800c796:	bd10      	pop	{r4, pc}
 800c798:	4610      	mov	r0, r2
 800c79a:	e7fc      	b.n	800c796 <strncmp+0x1e>

0800c79c <_fstat_r>:
 800c79c:	b538      	push	{r3, r4, r5, lr}
 800c79e:	4d07      	ldr	r5, [pc, #28]	@ (800c7bc <_fstat_r+0x20>)
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	4608      	mov	r0, r1
 800c7a6:	4611      	mov	r1, r2
 800c7a8:	602b      	str	r3, [r5, #0]
 800c7aa:	f7f6 fd01 	bl	80031b0 <_fstat>
 800c7ae:	1c43      	adds	r3, r0, #1
 800c7b0:	d102      	bne.n	800c7b8 <_fstat_r+0x1c>
 800c7b2:	682b      	ldr	r3, [r5, #0]
 800c7b4:	b103      	cbz	r3, 800c7b8 <_fstat_r+0x1c>
 800c7b6:	6023      	str	r3, [r4, #0]
 800c7b8:	bd38      	pop	{r3, r4, r5, pc}
 800c7ba:	bf00      	nop
 800c7bc:	200048c0 	.word	0x200048c0

0800c7c0 <_isatty_r>:
 800c7c0:	b538      	push	{r3, r4, r5, lr}
 800c7c2:	4d06      	ldr	r5, [pc, #24]	@ (800c7dc <_isatty_r+0x1c>)
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	4608      	mov	r0, r1
 800c7ca:	602b      	str	r3, [r5, #0]
 800c7cc:	f7f6 fd00 	bl	80031d0 <_isatty>
 800c7d0:	1c43      	adds	r3, r0, #1
 800c7d2:	d102      	bne.n	800c7da <_isatty_r+0x1a>
 800c7d4:	682b      	ldr	r3, [r5, #0]
 800c7d6:	b103      	cbz	r3, 800c7da <_isatty_r+0x1a>
 800c7d8:	6023      	str	r3, [r4, #0]
 800c7da:	bd38      	pop	{r3, r4, r5, pc}
 800c7dc:	200048c0 	.word	0x200048c0

0800c7e0 <_sbrk_r>:
 800c7e0:	b538      	push	{r3, r4, r5, lr}
 800c7e2:	4d06      	ldr	r5, [pc, #24]	@ (800c7fc <_sbrk_r+0x1c>)
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	4608      	mov	r0, r1
 800c7ea:	602b      	str	r3, [r5, #0]
 800c7ec:	f7f6 fd08 	bl	8003200 <_sbrk>
 800c7f0:	1c43      	adds	r3, r0, #1
 800c7f2:	d102      	bne.n	800c7fa <_sbrk_r+0x1a>
 800c7f4:	682b      	ldr	r3, [r5, #0]
 800c7f6:	b103      	cbz	r3, 800c7fa <_sbrk_r+0x1a>
 800c7f8:	6023      	str	r3, [r4, #0]
 800c7fa:	bd38      	pop	{r3, r4, r5, pc}
 800c7fc:	200048c0 	.word	0x200048c0

0800c800 <nan>:
 800c800:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c808 <nan+0x8>
 800c804:	4770      	bx	lr
 800c806:	bf00      	nop
 800c808:	00000000 	.word	0x00000000
 800c80c:	7ff80000 	.word	0x7ff80000

0800c810 <__assert_func>:
 800c810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c812:	4614      	mov	r4, r2
 800c814:	461a      	mov	r2, r3
 800c816:	4b09      	ldr	r3, [pc, #36]	@ (800c83c <__assert_func+0x2c>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4605      	mov	r5, r0
 800c81c:	68d8      	ldr	r0, [r3, #12]
 800c81e:	b14c      	cbz	r4, 800c834 <__assert_func+0x24>
 800c820:	4b07      	ldr	r3, [pc, #28]	@ (800c840 <__assert_func+0x30>)
 800c822:	9100      	str	r1, [sp, #0]
 800c824:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c828:	4906      	ldr	r1, [pc, #24]	@ (800c844 <__assert_func+0x34>)
 800c82a:	462b      	mov	r3, r5
 800c82c:	f000 fba8 	bl	800cf80 <fiprintf>
 800c830:	f000 fbb8 	bl	800cfa4 <abort>
 800c834:	4b04      	ldr	r3, [pc, #16]	@ (800c848 <__assert_func+0x38>)
 800c836:	461c      	mov	r4, r3
 800c838:	e7f3      	b.n	800c822 <__assert_func+0x12>
 800c83a:	bf00      	nop
 800c83c:	20000044 	.word	0x20000044
 800c840:	0800d446 	.word	0x0800d446
 800c844:	0800d453 	.word	0x0800d453
 800c848:	0800d481 	.word	0x0800d481

0800c84c <_calloc_r>:
 800c84c:	b570      	push	{r4, r5, r6, lr}
 800c84e:	fba1 5402 	umull	r5, r4, r1, r2
 800c852:	b934      	cbnz	r4, 800c862 <_calloc_r+0x16>
 800c854:	4629      	mov	r1, r5
 800c856:	f7fe f813 	bl	800a880 <_malloc_r>
 800c85a:	4606      	mov	r6, r0
 800c85c:	b928      	cbnz	r0, 800c86a <_calloc_r+0x1e>
 800c85e:	4630      	mov	r0, r6
 800c860:	bd70      	pop	{r4, r5, r6, pc}
 800c862:	220c      	movs	r2, #12
 800c864:	6002      	str	r2, [r0, #0]
 800c866:	2600      	movs	r6, #0
 800c868:	e7f9      	b.n	800c85e <_calloc_r+0x12>
 800c86a:	462a      	mov	r2, r5
 800c86c:	4621      	mov	r1, r4
 800c86e:	f7fd f849 	bl	8009904 <memset>
 800c872:	e7f4      	b.n	800c85e <_calloc_r+0x12>

0800c874 <rshift>:
 800c874:	6903      	ldr	r3, [r0, #16]
 800c876:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c87a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c87e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c882:	f100 0414 	add.w	r4, r0, #20
 800c886:	dd45      	ble.n	800c914 <rshift+0xa0>
 800c888:	f011 011f 	ands.w	r1, r1, #31
 800c88c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c890:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c894:	d10c      	bne.n	800c8b0 <rshift+0x3c>
 800c896:	f100 0710 	add.w	r7, r0, #16
 800c89a:	4629      	mov	r1, r5
 800c89c:	42b1      	cmp	r1, r6
 800c89e:	d334      	bcc.n	800c90a <rshift+0x96>
 800c8a0:	1a9b      	subs	r3, r3, r2
 800c8a2:	009b      	lsls	r3, r3, #2
 800c8a4:	1eea      	subs	r2, r5, #3
 800c8a6:	4296      	cmp	r6, r2
 800c8a8:	bf38      	it	cc
 800c8aa:	2300      	movcc	r3, #0
 800c8ac:	4423      	add	r3, r4
 800c8ae:	e015      	b.n	800c8dc <rshift+0x68>
 800c8b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c8b4:	f1c1 0820 	rsb	r8, r1, #32
 800c8b8:	40cf      	lsrs	r7, r1
 800c8ba:	f105 0e04 	add.w	lr, r5, #4
 800c8be:	46a1      	mov	r9, r4
 800c8c0:	4576      	cmp	r6, lr
 800c8c2:	46f4      	mov	ip, lr
 800c8c4:	d815      	bhi.n	800c8f2 <rshift+0x7e>
 800c8c6:	1a9a      	subs	r2, r3, r2
 800c8c8:	0092      	lsls	r2, r2, #2
 800c8ca:	3a04      	subs	r2, #4
 800c8cc:	3501      	adds	r5, #1
 800c8ce:	42ae      	cmp	r6, r5
 800c8d0:	bf38      	it	cc
 800c8d2:	2200      	movcc	r2, #0
 800c8d4:	18a3      	adds	r3, r4, r2
 800c8d6:	50a7      	str	r7, [r4, r2]
 800c8d8:	b107      	cbz	r7, 800c8dc <rshift+0x68>
 800c8da:	3304      	adds	r3, #4
 800c8dc:	1b1a      	subs	r2, r3, r4
 800c8de:	42a3      	cmp	r3, r4
 800c8e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c8e4:	bf08      	it	eq
 800c8e6:	2300      	moveq	r3, #0
 800c8e8:	6102      	str	r2, [r0, #16]
 800c8ea:	bf08      	it	eq
 800c8ec:	6143      	streq	r3, [r0, #20]
 800c8ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8f2:	f8dc c000 	ldr.w	ip, [ip]
 800c8f6:	fa0c fc08 	lsl.w	ip, ip, r8
 800c8fa:	ea4c 0707 	orr.w	r7, ip, r7
 800c8fe:	f849 7b04 	str.w	r7, [r9], #4
 800c902:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c906:	40cf      	lsrs	r7, r1
 800c908:	e7da      	b.n	800c8c0 <rshift+0x4c>
 800c90a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c90e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c912:	e7c3      	b.n	800c89c <rshift+0x28>
 800c914:	4623      	mov	r3, r4
 800c916:	e7e1      	b.n	800c8dc <rshift+0x68>

0800c918 <__hexdig_fun>:
 800c918:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c91c:	2b09      	cmp	r3, #9
 800c91e:	d802      	bhi.n	800c926 <__hexdig_fun+0xe>
 800c920:	3820      	subs	r0, #32
 800c922:	b2c0      	uxtb	r0, r0
 800c924:	4770      	bx	lr
 800c926:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c92a:	2b05      	cmp	r3, #5
 800c92c:	d801      	bhi.n	800c932 <__hexdig_fun+0x1a>
 800c92e:	3847      	subs	r0, #71	@ 0x47
 800c930:	e7f7      	b.n	800c922 <__hexdig_fun+0xa>
 800c932:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c936:	2b05      	cmp	r3, #5
 800c938:	d801      	bhi.n	800c93e <__hexdig_fun+0x26>
 800c93a:	3827      	subs	r0, #39	@ 0x27
 800c93c:	e7f1      	b.n	800c922 <__hexdig_fun+0xa>
 800c93e:	2000      	movs	r0, #0
 800c940:	4770      	bx	lr
	...

0800c944 <__gethex>:
 800c944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c948:	b085      	sub	sp, #20
 800c94a:	468a      	mov	sl, r1
 800c94c:	9302      	str	r3, [sp, #8]
 800c94e:	680b      	ldr	r3, [r1, #0]
 800c950:	9001      	str	r0, [sp, #4]
 800c952:	4690      	mov	r8, r2
 800c954:	1c9c      	adds	r4, r3, #2
 800c956:	46a1      	mov	r9, r4
 800c958:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c95c:	2830      	cmp	r0, #48	@ 0x30
 800c95e:	d0fa      	beq.n	800c956 <__gethex+0x12>
 800c960:	eba9 0303 	sub.w	r3, r9, r3
 800c964:	f1a3 0b02 	sub.w	fp, r3, #2
 800c968:	f7ff ffd6 	bl	800c918 <__hexdig_fun>
 800c96c:	4605      	mov	r5, r0
 800c96e:	2800      	cmp	r0, #0
 800c970:	d168      	bne.n	800ca44 <__gethex+0x100>
 800c972:	49a0      	ldr	r1, [pc, #640]	@ (800cbf4 <__gethex+0x2b0>)
 800c974:	2201      	movs	r2, #1
 800c976:	4648      	mov	r0, r9
 800c978:	f7ff fefe 	bl	800c778 <strncmp>
 800c97c:	4607      	mov	r7, r0
 800c97e:	2800      	cmp	r0, #0
 800c980:	d167      	bne.n	800ca52 <__gethex+0x10e>
 800c982:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c986:	4626      	mov	r6, r4
 800c988:	f7ff ffc6 	bl	800c918 <__hexdig_fun>
 800c98c:	2800      	cmp	r0, #0
 800c98e:	d062      	beq.n	800ca56 <__gethex+0x112>
 800c990:	4623      	mov	r3, r4
 800c992:	7818      	ldrb	r0, [r3, #0]
 800c994:	2830      	cmp	r0, #48	@ 0x30
 800c996:	4699      	mov	r9, r3
 800c998:	f103 0301 	add.w	r3, r3, #1
 800c99c:	d0f9      	beq.n	800c992 <__gethex+0x4e>
 800c99e:	f7ff ffbb 	bl	800c918 <__hexdig_fun>
 800c9a2:	fab0 f580 	clz	r5, r0
 800c9a6:	096d      	lsrs	r5, r5, #5
 800c9a8:	f04f 0b01 	mov.w	fp, #1
 800c9ac:	464a      	mov	r2, r9
 800c9ae:	4616      	mov	r6, r2
 800c9b0:	3201      	adds	r2, #1
 800c9b2:	7830      	ldrb	r0, [r6, #0]
 800c9b4:	f7ff ffb0 	bl	800c918 <__hexdig_fun>
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	d1f8      	bne.n	800c9ae <__gethex+0x6a>
 800c9bc:	498d      	ldr	r1, [pc, #564]	@ (800cbf4 <__gethex+0x2b0>)
 800c9be:	2201      	movs	r2, #1
 800c9c0:	4630      	mov	r0, r6
 800c9c2:	f7ff fed9 	bl	800c778 <strncmp>
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	d13f      	bne.n	800ca4a <__gethex+0x106>
 800c9ca:	b944      	cbnz	r4, 800c9de <__gethex+0x9a>
 800c9cc:	1c74      	adds	r4, r6, #1
 800c9ce:	4622      	mov	r2, r4
 800c9d0:	4616      	mov	r6, r2
 800c9d2:	3201      	adds	r2, #1
 800c9d4:	7830      	ldrb	r0, [r6, #0]
 800c9d6:	f7ff ff9f 	bl	800c918 <__hexdig_fun>
 800c9da:	2800      	cmp	r0, #0
 800c9dc:	d1f8      	bne.n	800c9d0 <__gethex+0x8c>
 800c9de:	1ba4      	subs	r4, r4, r6
 800c9e0:	00a7      	lsls	r7, r4, #2
 800c9e2:	7833      	ldrb	r3, [r6, #0]
 800c9e4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c9e8:	2b50      	cmp	r3, #80	@ 0x50
 800c9ea:	d13e      	bne.n	800ca6a <__gethex+0x126>
 800c9ec:	7873      	ldrb	r3, [r6, #1]
 800c9ee:	2b2b      	cmp	r3, #43	@ 0x2b
 800c9f0:	d033      	beq.n	800ca5a <__gethex+0x116>
 800c9f2:	2b2d      	cmp	r3, #45	@ 0x2d
 800c9f4:	d034      	beq.n	800ca60 <__gethex+0x11c>
 800c9f6:	1c71      	adds	r1, r6, #1
 800c9f8:	2400      	movs	r4, #0
 800c9fa:	7808      	ldrb	r0, [r1, #0]
 800c9fc:	f7ff ff8c 	bl	800c918 <__hexdig_fun>
 800ca00:	1e43      	subs	r3, r0, #1
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	2b18      	cmp	r3, #24
 800ca06:	d830      	bhi.n	800ca6a <__gethex+0x126>
 800ca08:	f1a0 0210 	sub.w	r2, r0, #16
 800ca0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ca10:	f7ff ff82 	bl	800c918 <__hexdig_fun>
 800ca14:	f100 3cff 	add.w	ip, r0, #4294967295
 800ca18:	fa5f fc8c 	uxtb.w	ip, ip
 800ca1c:	f1bc 0f18 	cmp.w	ip, #24
 800ca20:	f04f 030a 	mov.w	r3, #10
 800ca24:	d91e      	bls.n	800ca64 <__gethex+0x120>
 800ca26:	b104      	cbz	r4, 800ca2a <__gethex+0xe6>
 800ca28:	4252      	negs	r2, r2
 800ca2a:	4417      	add	r7, r2
 800ca2c:	f8ca 1000 	str.w	r1, [sl]
 800ca30:	b1ed      	cbz	r5, 800ca6e <__gethex+0x12a>
 800ca32:	f1bb 0f00 	cmp.w	fp, #0
 800ca36:	bf0c      	ite	eq
 800ca38:	2506      	moveq	r5, #6
 800ca3a:	2500      	movne	r5, #0
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	b005      	add	sp, #20
 800ca40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca44:	2500      	movs	r5, #0
 800ca46:	462c      	mov	r4, r5
 800ca48:	e7b0      	b.n	800c9ac <__gethex+0x68>
 800ca4a:	2c00      	cmp	r4, #0
 800ca4c:	d1c7      	bne.n	800c9de <__gethex+0x9a>
 800ca4e:	4627      	mov	r7, r4
 800ca50:	e7c7      	b.n	800c9e2 <__gethex+0x9e>
 800ca52:	464e      	mov	r6, r9
 800ca54:	462f      	mov	r7, r5
 800ca56:	2501      	movs	r5, #1
 800ca58:	e7c3      	b.n	800c9e2 <__gethex+0x9e>
 800ca5a:	2400      	movs	r4, #0
 800ca5c:	1cb1      	adds	r1, r6, #2
 800ca5e:	e7cc      	b.n	800c9fa <__gethex+0xb6>
 800ca60:	2401      	movs	r4, #1
 800ca62:	e7fb      	b.n	800ca5c <__gethex+0x118>
 800ca64:	fb03 0002 	mla	r0, r3, r2, r0
 800ca68:	e7ce      	b.n	800ca08 <__gethex+0xc4>
 800ca6a:	4631      	mov	r1, r6
 800ca6c:	e7de      	b.n	800ca2c <__gethex+0xe8>
 800ca6e:	eba6 0309 	sub.w	r3, r6, r9
 800ca72:	3b01      	subs	r3, #1
 800ca74:	4629      	mov	r1, r5
 800ca76:	2b07      	cmp	r3, #7
 800ca78:	dc0a      	bgt.n	800ca90 <__gethex+0x14c>
 800ca7a:	9801      	ldr	r0, [sp, #4]
 800ca7c:	f7fd ff8c 	bl	800a998 <_Balloc>
 800ca80:	4604      	mov	r4, r0
 800ca82:	b940      	cbnz	r0, 800ca96 <__gethex+0x152>
 800ca84:	4b5c      	ldr	r3, [pc, #368]	@ (800cbf8 <__gethex+0x2b4>)
 800ca86:	4602      	mov	r2, r0
 800ca88:	21e4      	movs	r1, #228	@ 0xe4
 800ca8a:	485c      	ldr	r0, [pc, #368]	@ (800cbfc <__gethex+0x2b8>)
 800ca8c:	f7ff fec0 	bl	800c810 <__assert_func>
 800ca90:	3101      	adds	r1, #1
 800ca92:	105b      	asrs	r3, r3, #1
 800ca94:	e7ef      	b.n	800ca76 <__gethex+0x132>
 800ca96:	f100 0a14 	add.w	sl, r0, #20
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	4655      	mov	r5, sl
 800ca9e:	469b      	mov	fp, r3
 800caa0:	45b1      	cmp	r9, r6
 800caa2:	d337      	bcc.n	800cb14 <__gethex+0x1d0>
 800caa4:	f845 bb04 	str.w	fp, [r5], #4
 800caa8:	eba5 050a 	sub.w	r5, r5, sl
 800caac:	10ad      	asrs	r5, r5, #2
 800caae:	6125      	str	r5, [r4, #16]
 800cab0:	4658      	mov	r0, fp
 800cab2:	f7fe f863 	bl	800ab7c <__hi0bits>
 800cab6:	016d      	lsls	r5, r5, #5
 800cab8:	f8d8 6000 	ldr.w	r6, [r8]
 800cabc:	1a2d      	subs	r5, r5, r0
 800cabe:	42b5      	cmp	r5, r6
 800cac0:	dd54      	ble.n	800cb6c <__gethex+0x228>
 800cac2:	1bad      	subs	r5, r5, r6
 800cac4:	4629      	mov	r1, r5
 800cac6:	4620      	mov	r0, r4
 800cac8:	f7fe fbef 	bl	800b2aa <__any_on>
 800cacc:	4681      	mov	r9, r0
 800cace:	b178      	cbz	r0, 800caf0 <__gethex+0x1ac>
 800cad0:	1e6b      	subs	r3, r5, #1
 800cad2:	1159      	asrs	r1, r3, #5
 800cad4:	f003 021f 	and.w	r2, r3, #31
 800cad8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cadc:	f04f 0901 	mov.w	r9, #1
 800cae0:	fa09 f202 	lsl.w	r2, r9, r2
 800cae4:	420a      	tst	r2, r1
 800cae6:	d003      	beq.n	800caf0 <__gethex+0x1ac>
 800cae8:	454b      	cmp	r3, r9
 800caea:	dc36      	bgt.n	800cb5a <__gethex+0x216>
 800caec:	f04f 0902 	mov.w	r9, #2
 800caf0:	4629      	mov	r1, r5
 800caf2:	4620      	mov	r0, r4
 800caf4:	f7ff febe 	bl	800c874 <rshift>
 800caf8:	442f      	add	r7, r5
 800cafa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cafe:	42bb      	cmp	r3, r7
 800cb00:	da42      	bge.n	800cb88 <__gethex+0x244>
 800cb02:	9801      	ldr	r0, [sp, #4]
 800cb04:	4621      	mov	r1, r4
 800cb06:	f7fd ff87 	bl	800aa18 <_Bfree>
 800cb0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	6013      	str	r3, [r2, #0]
 800cb10:	25a3      	movs	r5, #163	@ 0xa3
 800cb12:	e793      	b.n	800ca3c <__gethex+0xf8>
 800cb14:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cb18:	2a2e      	cmp	r2, #46	@ 0x2e
 800cb1a:	d012      	beq.n	800cb42 <__gethex+0x1fe>
 800cb1c:	2b20      	cmp	r3, #32
 800cb1e:	d104      	bne.n	800cb2a <__gethex+0x1e6>
 800cb20:	f845 bb04 	str.w	fp, [r5], #4
 800cb24:	f04f 0b00 	mov.w	fp, #0
 800cb28:	465b      	mov	r3, fp
 800cb2a:	7830      	ldrb	r0, [r6, #0]
 800cb2c:	9303      	str	r3, [sp, #12]
 800cb2e:	f7ff fef3 	bl	800c918 <__hexdig_fun>
 800cb32:	9b03      	ldr	r3, [sp, #12]
 800cb34:	f000 000f 	and.w	r0, r0, #15
 800cb38:	4098      	lsls	r0, r3
 800cb3a:	ea4b 0b00 	orr.w	fp, fp, r0
 800cb3e:	3304      	adds	r3, #4
 800cb40:	e7ae      	b.n	800caa0 <__gethex+0x15c>
 800cb42:	45b1      	cmp	r9, r6
 800cb44:	d8ea      	bhi.n	800cb1c <__gethex+0x1d8>
 800cb46:	492b      	ldr	r1, [pc, #172]	@ (800cbf4 <__gethex+0x2b0>)
 800cb48:	9303      	str	r3, [sp, #12]
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	4630      	mov	r0, r6
 800cb4e:	f7ff fe13 	bl	800c778 <strncmp>
 800cb52:	9b03      	ldr	r3, [sp, #12]
 800cb54:	2800      	cmp	r0, #0
 800cb56:	d1e1      	bne.n	800cb1c <__gethex+0x1d8>
 800cb58:	e7a2      	b.n	800caa0 <__gethex+0x15c>
 800cb5a:	1ea9      	subs	r1, r5, #2
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f7fe fba4 	bl	800b2aa <__any_on>
 800cb62:	2800      	cmp	r0, #0
 800cb64:	d0c2      	beq.n	800caec <__gethex+0x1a8>
 800cb66:	f04f 0903 	mov.w	r9, #3
 800cb6a:	e7c1      	b.n	800caf0 <__gethex+0x1ac>
 800cb6c:	da09      	bge.n	800cb82 <__gethex+0x23e>
 800cb6e:	1b75      	subs	r5, r6, r5
 800cb70:	4621      	mov	r1, r4
 800cb72:	9801      	ldr	r0, [sp, #4]
 800cb74:	462a      	mov	r2, r5
 800cb76:	f7fe f95f 	bl	800ae38 <__lshift>
 800cb7a:	1b7f      	subs	r7, r7, r5
 800cb7c:	4604      	mov	r4, r0
 800cb7e:	f100 0a14 	add.w	sl, r0, #20
 800cb82:	f04f 0900 	mov.w	r9, #0
 800cb86:	e7b8      	b.n	800cafa <__gethex+0x1b6>
 800cb88:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cb8c:	42bd      	cmp	r5, r7
 800cb8e:	dd6f      	ble.n	800cc70 <__gethex+0x32c>
 800cb90:	1bed      	subs	r5, r5, r7
 800cb92:	42ae      	cmp	r6, r5
 800cb94:	dc34      	bgt.n	800cc00 <__gethex+0x2bc>
 800cb96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cb9a:	2b02      	cmp	r3, #2
 800cb9c:	d022      	beq.n	800cbe4 <__gethex+0x2a0>
 800cb9e:	2b03      	cmp	r3, #3
 800cba0:	d024      	beq.n	800cbec <__gethex+0x2a8>
 800cba2:	2b01      	cmp	r3, #1
 800cba4:	d115      	bne.n	800cbd2 <__gethex+0x28e>
 800cba6:	42ae      	cmp	r6, r5
 800cba8:	d113      	bne.n	800cbd2 <__gethex+0x28e>
 800cbaa:	2e01      	cmp	r6, #1
 800cbac:	d10b      	bne.n	800cbc6 <__gethex+0x282>
 800cbae:	9a02      	ldr	r2, [sp, #8]
 800cbb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cbb4:	6013      	str	r3, [r2, #0]
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	6123      	str	r3, [r4, #16]
 800cbba:	f8ca 3000 	str.w	r3, [sl]
 800cbbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbc0:	2562      	movs	r5, #98	@ 0x62
 800cbc2:	601c      	str	r4, [r3, #0]
 800cbc4:	e73a      	b.n	800ca3c <__gethex+0xf8>
 800cbc6:	1e71      	subs	r1, r6, #1
 800cbc8:	4620      	mov	r0, r4
 800cbca:	f7fe fb6e 	bl	800b2aa <__any_on>
 800cbce:	2800      	cmp	r0, #0
 800cbd0:	d1ed      	bne.n	800cbae <__gethex+0x26a>
 800cbd2:	9801      	ldr	r0, [sp, #4]
 800cbd4:	4621      	mov	r1, r4
 800cbd6:	f7fd ff1f 	bl	800aa18 <_Bfree>
 800cbda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cbdc:	2300      	movs	r3, #0
 800cbde:	6013      	str	r3, [r2, #0]
 800cbe0:	2550      	movs	r5, #80	@ 0x50
 800cbe2:	e72b      	b.n	800ca3c <__gethex+0xf8>
 800cbe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d1f3      	bne.n	800cbd2 <__gethex+0x28e>
 800cbea:	e7e0      	b.n	800cbae <__gethex+0x26a>
 800cbec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d1dd      	bne.n	800cbae <__gethex+0x26a>
 800cbf2:	e7ee      	b.n	800cbd2 <__gethex+0x28e>
 800cbf4:	0800d42b 	.word	0x0800d42b
 800cbf8:	0800d3c1 	.word	0x0800d3c1
 800cbfc:	0800d482 	.word	0x0800d482
 800cc00:	1e6f      	subs	r7, r5, #1
 800cc02:	f1b9 0f00 	cmp.w	r9, #0
 800cc06:	d130      	bne.n	800cc6a <__gethex+0x326>
 800cc08:	b127      	cbz	r7, 800cc14 <__gethex+0x2d0>
 800cc0a:	4639      	mov	r1, r7
 800cc0c:	4620      	mov	r0, r4
 800cc0e:	f7fe fb4c 	bl	800b2aa <__any_on>
 800cc12:	4681      	mov	r9, r0
 800cc14:	117a      	asrs	r2, r7, #5
 800cc16:	2301      	movs	r3, #1
 800cc18:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cc1c:	f007 071f 	and.w	r7, r7, #31
 800cc20:	40bb      	lsls	r3, r7
 800cc22:	4213      	tst	r3, r2
 800cc24:	4629      	mov	r1, r5
 800cc26:	4620      	mov	r0, r4
 800cc28:	bf18      	it	ne
 800cc2a:	f049 0902 	orrne.w	r9, r9, #2
 800cc2e:	f7ff fe21 	bl	800c874 <rshift>
 800cc32:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cc36:	1b76      	subs	r6, r6, r5
 800cc38:	2502      	movs	r5, #2
 800cc3a:	f1b9 0f00 	cmp.w	r9, #0
 800cc3e:	d047      	beq.n	800ccd0 <__gethex+0x38c>
 800cc40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc44:	2b02      	cmp	r3, #2
 800cc46:	d015      	beq.n	800cc74 <__gethex+0x330>
 800cc48:	2b03      	cmp	r3, #3
 800cc4a:	d017      	beq.n	800cc7c <__gethex+0x338>
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d109      	bne.n	800cc64 <__gethex+0x320>
 800cc50:	f019 0f02 	tst.w	r9, #2
 800cc54:	d006      	beq.n	800cc64 <__gethex+0x320>
 800cc56:	f8da 3000 	ldr.w	r3, [sl]
 800cc5a:	ea49 0903 	orr.w	r9, r9, r3
 800cc5e:	f019 0f01 	tst.w	r9, #1
 800cc62:	d10e      	bne.n	800cc82 <__gethex+0x33e>
 800cc64:	f045 0510 	orr.w	r5, r5, #16
 800cc68:	e032      	b.n	800ccd0 <__gethex+0x38c>
 800cc6a:	f04f 0901 	mov.w	r9, #1
 800cc6e:	e7d1      	b.n	800cc14 <__gethex+0x2d0>
 800cc70:	2501      	movs	r5, #1
 800cc72:	e7e2      	b.n	800cc3a <__gethex+0x2f6>
 800cc74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc76:	f1c3 0301 	rsb	r3, r3, #1
 800cc7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cc7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d0f0      	beq.n	800cc64 <__gethex+0x320>
 800cc82:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cc86:	f104 0314 	add.w	r3, r4, #20
 800cc8a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cc8e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cc92:	f04f 0c00 	mov.w	ip, #0
 800cc96:	4618      	mov	r0, r3
 800cc98:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc9c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cca0:	d01b      	beq.n	800ccda <__gethex+0x396>
 800cca2:	3201      	adds	r2, #1
 800cca4:	6002      	str	r2, [r0, #0]
 800cca6:	2d02      	cmp	r5, #2
 800cca8:	f104 0314 	add.w	r3, r4, #20
 800ccac:	d13c      	bne.n	800cd28 <__gethex+0x3e4>
 800ccae:	f8d8 2000 	ldr.w	r2, [r8]
 800ccb2:	3a01      	subs	r2, #1
 800ccb4:	42b2      	cmp	r2, r6
 800ccb6:	d109      	bne.n	800cccc <__gethex+0x388>
 800ccb8:	1171      	asrs	r1, r6, #5
 800ccba:	2201      	movs	r2, #1
 800ccbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ccc0:	f006 061f 	and.w	r6, r6, #31
 800ccc4:	fa02 f606 	lsl.w	r6, r2, r6
 800ccc8:	421e      	tst	r6, r3
 800ccca:	d13a      	bne.n	800cd42 <__gethex+0x3fe>
 800cccc:	f045 0520 	orr.w	r5, r5, #32
 800ccd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccd2:	601c      	str	r4, [r3, #0]
 800ccd4:	9b02      	ldr	r3, [sp, #8]
 800ccd6:	601f      	str	r7, [r3, #0]
 800ccd8:	e6b0      	b.n	800ca3c <__gethex+0xf8>
 800ccda:	4299      	cmp	r1, r3
 800ccdc:	f843 cc04 	str.w	ip, [r3, #-4]
 800cce0:	d8d9      	bhi.n	800cc96 <__gethex+0x352>
 800cce2:	68a3      	ldr	r3, [r4, #8]
 800cce4:	459b      	cmp	fp, r3
 800cce6:	db17      	blt.n	800cd18 <__gethex+0x3d4>
 800cce8:	6861      	ldr	r1, [r4, #4]
 800ccea:	9801      	ldr	r0, [sp, #4]
 800ccec:	3101      	adds	r1, #1
 800ccee:	f7fd fe53 	bl	800a998 <_Balloc>
 800ccf2:	4681      	mov	r9, r0
 800ccf4:	b918      	cbnz	r0, 800ccfe <__gethex+0x3ba>
 800ccf6:	4b1a      	ldr	r3, [pc, #104]	@ (800cd60 <__gethex+0x41c>)
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	2184      	movs	r1, #132	@ 0x84
 800ccfc:	e6c5      	b.n	800ca8a <__gethex+0x146>
 800ccfe:	6922      	ldr	r2, [r4, #16]
 800cd00:	3202      	adds	r2, #2
 800cd02:	f104 010c 	add.w	r1, r4, #12
 800cd06:	0092      	lsls	r2, r2, #2
 800cd08:	300c      	adds	r0, #12
 800cd0a:	f7fc fed8 	bl	8009abe <memcpy>
 800cd0e:	4621      	mov	r1, r4
 800cd10:	9801      	ldr	r0, [sp, #4]
 800cd12:	f7fd fe81 	bl	800aa18 <_Bfree>
 800cd16:	464c      	mov	r4, r9
 800cd18:	6923      	ldr	r3, [r4, #16]
 800cd1a:	1c5a      	adds	r2, r3, #1
 800cd1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd20:	6122      	str	r2, [r4, #16]
 800cd22:	2201      	movs	r2, #1
 800cd24:	615a      	str	r2, [r3, #20]
 800cd26:	e7be      	b.n	800cca6 <__gethex+0x362>
 800cd28:	6922      	ldr	r2, [r4, #16]
 800cd2a:	455a      	cmp	r2, fp
 800cd2c:	dd0b      	ble.n	800cd46 <__gethex+0x402>
 800cd2e:	2101      	movs	r1, #1
 800cd30:	4620      	mov	r0, r4
 800cd32:	f7ff fd9f 	bl	800c874 <rshift>
 800cd36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd3a:	3701      	adds	r7, #1
 800cd3c:	42bb      	cmp	r3, r7
 800cd3e:	f6ff aee0 	blt.w	800cb02 <__gethex+0x1be>
 800cd42:	2501      	movs	r5, #1
 800cd44:	e7c2      	b.n	800cccc <__gethex+0x388>
 800cd46:	f016 061f 	ands.w	r6, r6, #31
 800cd4a:	d0fa      	beq.n	800cd42 <__gethex+0x3fe>
 800cd4c:	4453      	add	r3, sl
 800cd4e:	f1c6 0620 	rsb	r6, r6, #32
 800cd52:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cd56:	f7fd ff11 	bl	800ab7c <__hi0bits>
 800cd5a:	42b0      	cmp	r0, r6
 800cd5c:	dbe7      	blt.n	800cd2e <__gethex+0x3ea>
 800cd5e:	e7f0      	b.n	800cd42 <__gethex+0x3fe>
 800cd60:	0800d3c1 	.word	0x0800d3c1

0800cd64 <L_shift>:
 800cd64:	f1c2 0208 	rsb	r2, r2, #8
 800cd68:	0092      	lsls	r2, r2, #2
 800cd6a:	b570      	push	{r4, r5, r6, lr}
 800cd6c:	f1c2 0620 	rsb	r6, r2, #32
 800cd70:	6843      	ldr	r3, [r0, #4]
 800cd72:	6804      	ldr	r4, [r0, #0]
 800cd74:	fa03 f506 	lsl.w	r5, r3, r6
 800cd78:	432c      	orrs	r4, r5
 800cd7a:	40d3      	lsrs	r3, r2
 800cd7c:	6004      	str	r4, [r0, #0]
 800cd7e:	f840 3f04 	str.w	r3, [r0, #4]!
 800cd82:	4288      	cmp	r0, r1
 800cd84:	d3f4      	bcc.n	800cd70 <L_shift+0xc>
 800cd86:	bd70      	pop	{r4, r5, r6, pc}

0800cd88 <__match>:
 800cd88:	b530      	push	{r4, r5, lr}
 800cd8a:	6803      	ldr	r3, [r0, #0]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd92:	b914      	cbnz	r4, 800cd9a <__match+0x12>
 800cd94:	6003      	str	r3, [r0, #0]
 800cd96:	2001      	movs	r0, #1
 800cd98:	bd30      	pop	{r4, r5, pc}
 800cd9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd9e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cda2:	2d19      	cmp	r5, #25
 800cda4:	bf98      	it	ls
 800cda6:	3220      	addls	r2, #32
 800cda8:	42a2      	cmp	r2, r4
 800cdaa:	d0f0      	beq.n	800cd8e <__match+0x6>
 800cdac:	2000      	movs	r0, #0
 800cdae:	e7f3      	b.n	800cd98 <__match+0x10>

0800cdb0 <__hexnan>:
 800cdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb4:	680b      	ldr	r3, [r1, #0]
 800cdb6:	6801      	ldr	r1, [r0, #0]
 800cdb8:	115e      	asrs	r6, r3, #5
 800cdba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cdbe:	f013 031f 	ands.w	r3, r3, #31
 800cdc2:	b087      	sub	sp, #28
 800cdc4:	bf18      	it	ne
 800cdc6:	3604      	addne	r6, #4
 800cdc8:	2500      	movs	r5, #0
 800cdca:	1f37      	subs	r7, r6, #4
 800cdcc:	4682      	mov	sl, r0
 800cdce:	4690      	mov	r8, r2
 800cdd0:	9301      	str	r3, [sp, #4]
 800cdd2:	f846 5c04 	str.w	r5, [r6, #-4]
 800cdd6:	46b9      	mov	r9, r7
 800cdd8:	463c      	mov	r4, r7
 800cdda:	9502      	str	r5, [sp, #8]
 800cddc:	46ab      	mov	fp, r5
 800cdde:	784a      	ldrb	r2, [r1, #1]
 800cde0:	1c4b      	adds	r3, r1, #1
 800cde2:	9303      	str	r3, [sp, #12]
 800cde4:	b342      	cbz	r2, 800ce38 <__hexnan+0x88>
 800cde6:	4610      	mov	r0, r2
 800cde8:	9105      	str	r1, [sp, #20]
 800cdea:	9204      	str	r2, [sp, #16]
 800cdec:	f7ff fd94 	bl	800c918 <__hexdig_fun>
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	d151      	bne.n	800ce98 <__hexnan+0xe8>
 800cdf4:	9a04      	ldr	r2, [sp, #16]
 800cdf6:	9905      	ldr	r1, [sp, #20]
 800cdf8:	2a20      	cmp	r2, #32
 800cdfa:	d818      	bhi.n	800ce2e <__hexnan+0x7e>
 800cdfc:	9b02      	ldr	r3, [sp, #8]
 800cdfe:	459b      	cmp	fp, r3
 800ce00:	dd13      	ble.n	800ce2a <__hexnan+0x7a>
 800ce02:	454c      	cmp	r4, r9
 800ce04:	d206      	bcs.n	800ce14 <__hexnan+0x64>
 800ce06:	2d07      	cmp	r5, #7
 800ce08:	dc04      	bgt.n	800ce14 <__hexnan+0x64>
 800ce0a:	462a      	mov	r2, r5
 800ce0c:	4649      	mov	r1, r9
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f7ff ffa8 	bl	800cd64 <L_shift>
 800ce14:	4544      	cmp	r4, r8
 800ce16:	d952      	bls.n	800cebe <__hexnan+0x10e>
 800ce18:	2300      	movs	r3, #0
 800ce1a:	f1a4 0904 	sub.w	r9, r4, #4
 800ce1e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce22:	f8cd b008 	str.w	fp, [sp, #8]
 800ce26:	464c      	mov	r4, r9
 800ce28:	461d      	mov	r5, r3
 800ce2a:	9903      	ldr	r1, [sp, #12]
 800ce2c:	e7d7      	b.n	800cdde <__hexnan+0x2e>
 800ce2e:	2a29      	cmp	r2, #41	@ 0x29
 800ce30:	d157      	bne.n	800cee2 <__hexnan+0x132>
 800ce32:	3102      	adds	r1, #2
 800ce34:	f8ca 1000 	str.w	r1, [sl]
 800ce38:	f1bb 0f00 	cmp.w	fp, #0
 800ce3c:	d051      	beq.n	800cee2 <__hexnan+0x132>
 800ce3e:	454c      	cmp	r4, r9
 800ce40:	d206      	bcs.n	800ce50 <__hexnan+0xa0>
 800ce42:	2d07      	cmp	r5, #7
 800ce44:	dc04      	bgt.n	800ce50 <__hexnan+0xa0>
 800ce46:	462a      	mov	r2, r5
 800ce48:	4649      	mov	r1, r9
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	f7ff ff8a 	bl	800cd64 <L_shift>
 800ce50:	4544      	cmp	r4, r8
 800ce52:	d936      	bls.n	800cec2 <__hexnan+0x112>
 800ce54:	f1a8 0204 	sub.w	r2, r8, #4
 800ce58:	4623      	mov	r3, r4
 800ce5a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ce5e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ce62:	429f      	cmp	r7, r3
 800ce64:	d2f9      	bcs.n	800ce5a <__hexnan+0xaa>
 800ce66:	1b3b      	subs	r3, r7, r4
 800ce68:	f023 0303 	bic.w	r3, r3, #3
 800ce6c:	3304      	adds	r3, #4
 800ce6e:	3401      	adds	r4, #1
 800ce70:	3e03      	subs	r6, #3
 800ce72:	42b4      	cmp	r4, r6
 800ce74:	bf88      	it	hi
 800ce76:	2304      	movhi	r3, #4
 800ce78:	4443      	add	r3, r8
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	f843 2b04 	str.w	r2, [r3], #4
 800ce80:	429f      	cmp	r7, r3
 800ce82:	d2fb      	bcs.n	800ce7c <__hexnan+0xcc>
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	b91b      	cbnz	r3, 800ce90 <__hexnan+0xe0>
 800ce88:	4547      	cmp	r7, r8
 800ce8a:	d128      	bne.n	800cede <__hexnan+0x12e>
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	603b      	str	r3, [r7, #0]
 800ce90:	2005      	movs	r0, #5
 800ce92:	b007      	add	sp, #28
 800ce94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce98:	3501      	adds	r5, #1
 800ce9a:	2d08      	cmp	r5, #8
 800ce9c:	f10b 0b01 	add.w	fp, fp, #1
 800cea0:	dd06      	ble.n	800ceb0 <__hexnan+0x100>
 800cea2:	4544      	cmp	r4, r8
 800cea4:	d9c1      	bls.n	800ce2a <__hexnan+0x7a>
 800cea6:	2300      	movs	r3, #0
 800cea8:	f844 3c04 	str.w	r3, [r4, #-4]
 800ceac:	2501      	movs	r5, #1
 800ceae:	3c04      	subs	r4, #4
 800ceb0:	6822      	ldr	r2, [r4, #0]
 800ceb2:	f000 000f 	and.w	r0, r0, #15
 800ceb6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ceba:	6020      	str	r0, [r4, #0]
 800cebc:	e7b5      	b.n	800ce2a <__hexnan+0x7a>
 800cebe:	2508      	movs	r5, #8
 800cec0:	e7b3      	b.n	800ce2a <__hexnan+0x7a>
 800cec2:	9b01      	ldr	r3, [sp, #4]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d0dd      	beq.n	800ce84 <__hexnan+0xd4>
 800cec8:	f1c3 0320 	rsb	r3, r3, #32
 800cecc:	f04f 32ff 	mov.w	r2, #4294967295
 800ced0:	40da      	lsrs	r2, r3
 800ced2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ced6:	4013      	ands	r3, r2
 800ced8:	f846 3c04 	str.w	r3, [r6, #-4]
 800cedc:	e7d2      	b.n	800ce84 <__hexnan+0xd4>
 800cede:	3f04      	subs	r7, #4
 800cee0:	e7d0      	b.n	800ce84 <__hexnan+0xd4>
 800cee2:	2004      	movs	r0, #4
 800cee4:	e7d5      	b.n	800ce92 <__hexnan+0xe2>

0800cee6 <__ascii_mbtowc>:
 800cee6:	b082      	sub	sp, #8
 800cee8:	b901      	cbnz	r1, 800ceec <__ascii_mbtowc+0x6>
 800ceea:	a901      	add	r1, sp, #4
 800ceec:	b142      	cbz	r2, 800cf00 <__ascii_mbtowc+0x1a>
 800ceee:	b14b      	cbz	r3, 800cf04 <__ascii_mbtowc+0x1e>
 800cef0:	7813      	ldrb	r3, [r2, #0]
 800cef2:	600b      	str	r3, [r1, #0]
 800cef4:	7812      	ldrb	r2, [r2, #0]
 800cef6:	1e10      	subs	r0, r2, #0
 800cef8:	bf18      	it	ne
 800cefa:	2001      	movne	r0, #1
 800cefc:	b002      	add	sp, #8
 800cefe:	4770      	bx	lr
 800cf00:	4610      	mov	r0, r2
 800cf02:	e7fb      	b.n	800cefc <__ascii_mbtowc+0x16>
 800cf04:	f06f 0001 	mvn.w	r0, #1
 800cf08:	e7f8      	b.n	800cefc <__ascii_mbtowc+0x16>

0800cf0a <_realloc_r>:
 800cf0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf0e:	4607      	mov	r7, r0
 800cf10:	4614      	mov	r4, r2
 800cf12:	460d      	mov	r5, r1
 800cf14:	b921      	cbnz	r1, 800cf20 <_realloc_r+0x16>
 800cf16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf1a:	4611      	mov	r1, r2
 800cf1c:	f7fd bcb0 	b.w	800a880 <_malloc_r>
 800cf20:	b92a      	cbnz	r2, 800cf2e <_realloc_r+0x24>
 800cf22:	f7fd fc39 	bl	800a798 <_free_r>
 800cf26:	4625      	mov	r5, r4
 800cf28:	4628      	mov	r0, r5
 800cf2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf2e:	f000 f840 	bl	800cfb2 <_malloc_usable_size_r>
 800cf32:	4284      	cmp	r4, r0
 800cf34:	4606      	mov	r6, r0
 800cf36:	d802      	bhi.n	800cf3e <_realloc_r+0x34>
 800cf38:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf3c:	d8f4      	bhi.n	800cf28 <_realloc_r+0x1e>
 800cf3e:	4621      	mov	r1, r4
 800cf40:	4638      	mov	r0, r7
 800cf42:	f7fd fc9d 	bl	800a880 <_malloc_r>
 800cf46:	4680      	mov	r8, r0
 800cf48:	b908      	cbnz	r0, 800cf4e <_realloc_r+0x44>
 800cf4a:	4645      	mov	r5, r8
 800cf4c:	e7ec      	b.n	800cf28 <_realloc_r+0x1e>
 800cf4e:	42b4      	cmp	r4, r6
 800cf50:	4622      	mov	r2, r4
 800cf52:	4629      	mov	r1, r5
 800cf54:	bf28      	it	cs
 800cf56:	4632      	movcs	r2, r6
 800cf58:	f7fc fdb1 	bl	8009abe <memcpy>
 800cf5c:	4629      	mov	r1, r5
 800cf5e:	4638      	mov	r0, r7
 800cf60:	f7fd fc1a 	bl	800a798 <_free_r>
 800cf64:	e7f1      	b.n	800cf4a <_realloc_r+0x40>

0800cf66 <__ascii_wctomb>:
 800cf66:	4603      	mov	r3, r0
 800cf68:	4608      	mov	r0, r1
 800cf6a:	b141      	cbz	r1, 800cf7e <__ascii_wctomb+0x18>
 800cf6c:	2aff      	cmp	r2, #255	@ 0xff
 800cf6e:	d904      	bls.n	800cf7a <__ascii_wctomb+0x14>
 800cf70:	228a      	movs	r2, #138	@ 0x8a
 800cf72:	601a      	str	r2, [r3, #0]
 800cf74:	f04f 30ff 	mov.w	r0, #4294967295
 800cf78:	4770      	bx	lr
 800cf7a:	700a      	strb	r2, [r1, #0]
 800cf7c:	2001      	movs	r0, #1
 800cf7e:	4770      	bx	lr

0800cf80 <fiprintf>:
 800cf80:	b40e      	push	{r1, r2, r3}
 800cf82:	b503      	push	{r0, r1, lr}
 800cf84:	4601      	mov	r1, r0
 800cf86:	ab03      	add	r3, sp, #12
 800cf88:	4805      	ldr	r0, [pc, #20]	@ (800cfa0 <fiprintf+0x20>)
 800cf8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf8e:	6800      	ldr	r0, [r0, #0]
 800cf90:	9301      	str	r3, [sp, #4]
 800cf92:	f7ff f9b1 	bl	800c2f8 <_vfiprintf_r>
 800cf96:	b002      	add	sp, #8
 800cf98:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf9c:	b003      	add	sp, #12
 800cf9e:	4770      	bx	lr
 800cfa0:	20000044 	.word	0x20000044

0800cfa4 <abort>:
 800cfa4:	b508      	push	{r3, lr}
 800cfa6:	2006      	movs	r0, #6
 800cfa8:	f000 f834 	bl	800d014 <raise>
 800cfac:	2001      	movs	r0, #1
 800cfae:	f7f6 f8af 	bl	8003110 <_exit>

0800cfb2 <_malloc_usable_size_r>:
 800cfb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfb6:	1f18      	subs	r0, r3, #4
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	bfbc      	itt	lt
 800cfbc:	580b      	ldrlt	r3, [r1, r0]
 800cfbe:	18c0      	addlt	r0, r0, r3
 800cfc0:	4770      	bx	lr

0800cfc2 <_raise_r>:
 800cfc2:	291f      	cmp	r1, #31
 800cfc4:	b538      	push	{r3, r4, r5, lr}
 800cfc6:	4605      	mov	r5, r0
 800cfc8:	460c      	mov	r4, r1
 800cfca:	d904      	bls.n	800cfd6 <_raise_r+0x14>
 800cfcc:	2316      	movs	r3, #22
 800cfce:	6003      	str	r3, [r0, #0]
 800cfd0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfd4:	bd38      	pop	{r3, r4, r5, pc}
 800cfd6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cfd8:	b112      	cbz	r2, 800cfe0 <_raise_r+0x1e>
 800cfda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfde:	b94b      	cbnz	r3, 800cff4 <_raise_r+0x32>
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	f000 f831 	bl	800d048 <_getpid_r>
 800cfe6:	4622      	mov	r2, r4
 800cfe8:	4601      	mov	r1, r0
 800cfea:	4628      	mov	r0, r5
 800cfec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cff0:	f000 b818 	b.w	800d024 <_kill_r>
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d00a      	beq.n	800d00e <_raise_r+0x4c>
 800cff8:	1c59      	adds	r1, r3, #1
 800cffa:	d103      	bne.n	800d004 <_raise_r+0x42>
 800cffc:	2316      	movs	r3, #22
 800cffe:	6003      	str	r3, [r0, #0]
 800d000:	2001      	movs	r0, #1
 800d002:	e7e7      	b.n	800cfd4 <_raise_r+0x12>
 800d004:	2100      	movs	r1, #0
 800d006:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d00a:	4620      	mov	r0, r4
 800d00c:	4798      	blx	r3
 800d00e:	2000      	movs	r0, #0
 800d010:	e7e0      	b.n	800cfd4 <_raise_r+0x12>
	...

0800d014 <raise>:
 800d014:	4b02      	ldr	r3, [pc, #8]	@ (800d020 <raise+0xc>)
 800d016:	4601      	mov	r1, r0
 800d018:	6818      	ldr	r0, [r3, #0]
 800d01a:	f7ff bfd2 	b.w	800cfc2 <_raise_r>
 800d01e:	bf00      	nop
 800d020:	20000044 	.word	0x20000044

0800d024 <_kill_r>:
 800d024:	b538      	push	{r3, r4, r5, lr}
 800d026:	4d07      	ldr	r5, [pc, #28]	@ (800d044 <_kill_r+0x20>)
 800d028:	2300      	movs	r3, #0
 800d02a:	4604      	mov	r4, r0
 800d02c:	4608      	mov	r0, r1
 800d02e:	4611      	mov	r1, r2
 800d030:	602b      	str	r3, [r5, #0]
 800d032:	f7f6 f85d 	bl	80030f0 <_kill>
 800d036:	1c43      	adds	r3, r0, #1
 800d038:	d102      	bne.n	800d040 <_kill_r+0x1c>
 800d03a:	682b      	ldr	r3, [r5, #0]
 800d03c:	b103      	cbz	r3, 800d040 <_kill_r+0x1c>
 800d03e:	6023      	str	r3, [r4, #0]
 800d040:	bd38      	pop	{r3, r4, r5, pc}
 800d042:	bf00      	nop
 800d044:	200048c0 	.word	0x200048c0

0800d048 <_getpid_r>:
 800d048:	f7f6 b84a 	b.w	80030e0 <_getpid>

0800d04c <_init>:
 800d04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d04e:	bf00      	nop
 800d050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d052:	bc08      	pop	{r3}
 800d054:	469e      	mov	lr, r3
 800d056:	4770      	bx	lr

0800d058 <_fini>:
 800d058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d05a:	bf00      	nop
 800d05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d05e:	bc08      	pop	{r3}
 800d060:	469e      	mov	lr, r3
 800d062:	4770      	bx	lr
