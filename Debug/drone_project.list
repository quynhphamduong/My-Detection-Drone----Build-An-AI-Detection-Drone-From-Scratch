
drone_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069d8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08006b78  08006b78  00007b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c04  08006c04  00008078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006c04  08006c04  00007c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c0c  08006c0c  00008078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c0c  08006c0c  00007c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c10  08006c10  00007c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08006c14  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004614  20000078  08006c8c  00008078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000468c  08006c8c  0000868c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017343  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034cc  00000000  00000000  0001f3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  000228b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc4  00000000  00000000  00023d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001965e  00000000  00000000  00024cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016df9  00000000  00000000  0003e33a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a30f  00000000  00000000  00055133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef442  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b8  00000000  00000000  000ef488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000f4e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006b60 	.word	0x08006b60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006b60 	.word	0x08006b60

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <Calculate_Reference>:
 */

#include "Drone_control.h"

void Calculate_Reference(Drone_Calculation_Typedef *dr,Drone_Control_Typedef *dc)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	dr->picth_reference=(dc->RV-1500)*0.1f;//we can send reference direct from control
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	885b      	ldrh	r3, [r3, #2]
 80005ba:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80005be:	ee07 3a90 	vmov	s15, r3
 80005c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800063c <Calculate_Reference+0x90>
 80005ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	edc3 7a00 	vstr	s15, [r3]
	dr->roll_reference=(dc->RH-1500)*0.1f;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80005dc:	ee07 3a90 	vmov	s15, r3
 80005e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005e4:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800063c <Calculate_Reference+0x90>
 80005e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	edc3 7a01 	vstr	s15, [r3, #4]
	dr->yaw_reference=(dc->LH-1500)*0.1f;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	88db      	ldrh	r3, [r3, #6]
 80005f6:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80005fa:	ee07 3a90 	vmov	s15, r3
 80005fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000602:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800063c <Calculate_Reference+0x90>
 8000606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	edc3 7a02 	vstr	s15, [r3, #8]
	dr->high_reference=(dc->LV-1000)*10;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	889b      	ldrh	r3, [r3, #4]
 8000614:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8000618:	4613      	mov	r3, r2
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4413      	add	r3, r2
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	ee07 3a90 	vmov	s15, r3
 8000624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	3dcccccd 	.word	0x3dcccccd

08000640 <escNormalOneshot125>:
	HAL_Delay(8000);
	HAL_Delay(1000);
}

void escNormalOneshot125(TIM_HandleTypeDef *htim,uint32_t speed,Timer_channel_enumTypedef CHANNEL)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	4613      	mov	r3, r2
 800064c:	71fb      	strb	r3, [r7, #7]
	if(speed>=MAXIMUM_SPEED)
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000654:	4293      	cmp	r3, r2
 8000656:	d903      	bls.n	8000660 <escNormalOneshot125+0x20>
	{
		speed=MAXIMUM_SPEED;
 8000658:	f642 1304 	movw	r3, #10500	@ 0x2904
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	e004      	b.n	800066a <escNormalOneshot125+0x2a>
	}
	else if(speed<=MINIMUM_SPEED)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d101      	bne.n	800066a <escNormalOneshot125+0x2a>
	{
		speed=MINIMUM_SPEED;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
	}
	switch(CHANNEL)
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b0c      	cmp	r3, #12
 800066e:	d83d      	bhi.n	80006ec <escNormalOneshot125+0xac>
 8000670:	a201      	add	r2, pc, #4	@ (adr r2, 8000678 <escNormalOneshot125+0x38>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	080006ad 	.word	0x080006ad
 800067c:	080006ed 	.word	0x080006ed
 8000680:	080006ed 	.word	0x080006ed
 8000684:	080006ed 	.word	0x080006ed
 8000688:	080006bd 	.word	0x080006bd
 800068c:	080006ed 	.word	0x080006ed
 8000690:	080006ed 	.word	0x080006ed
 8000694:	080006ed 	.word	0x080006ed
 8000698:	080006cd 	.word	0x080006cd
 800069c:	080006ed 	.word	0x080006ed
 80006a0:	080006ed 	.word	0x080006ed
 80006a4:	080006ed 	.word	0x080006ed
 80006a8:	080006dd 	.word	0x080006dd
	{
	case CHANNEL1:
		htim->Instance->CCR1=speed+MINIMUM_ESC_PWM;
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80006b6:	3304      	adds	r3, #4
 80006b8:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 80006ba:	e017      	b.n	80006ec <escNormalOneshot125+0xac>
	case CHANNEL2:
			htim->Instance->CCR2=speed+MINIMUM_ESC_PWM;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80006c6:	3304      	adds	r3, #4
 80006c8:	6393      	str	r3, [r2, #56]	@ 0x38
			break;
 80006ca:	e00f      	b.n	80006ec <escNormalOneshot125+0xac>
	case CHANNEL3:
			htim->Instance->CCR3=speed+MINIMUM_ESC_PWM;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80006d6:	3304      	adds	r3, #4
 80006d8:	63d3      	str	r3, [r2, #60]	@ 0x3c
			break;
 80006da:	e007      	b.n	80006ec <escNormalOneshot125+0xac>
	case CHANNEL4:
			htim->Instance->CCR4=speed+MINIMUM_ESC_PWM;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80006e6:	3304      	adds	r3, #4
 80006e8:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 80006ea:	bf00      	nop
	}
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <Control4Motor>:

void Control4Motor(TIM_HandleTypeDef *htim,Motor_speed_Typedef *speed)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
	escNormalOneshot125(htim, speed->speed1, CHANNEL1);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2200      	movs	r2, #0
 8000708:	4619      	mov	r1, r3
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ff98 	bl	8000640 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed2, CHANNEL2);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	2204      	movs	r2, #4
 8000716:	4619      	mov	r1, r3
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ff91 	bl	8000640 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed3, CHANNEL3);
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	2208      	movs	r2, #8
 8000724:	4619      	mov	r1, r3
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ff8a 	bl	8000640 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed4, CHANNEL4);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	220c      	movs	r2, #12
 8000732:	4619      	mov	r1, r3
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ff83 	bl	8000640 <escNormalOneshot125>

}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <pidControllersInit>:
 */

#include "PID.h"

void pidControllersInit(PIDControllers_Typedef* pid,float Kp,float Ki,float Kd,float to,float T,float upper_saturation,float lower_saturation)
{
 8000742:	b480      	push	{r7}
 8000744:	b089      	sub	sp, #36	@ 0x24
 8000746:	af00      	add	r7, sp, #0
 8000748:	61f8      	str	r0, [r7, #28]
 800074a:	ed87 0a06 	vstr	s0, [r7, #24]
 800074e:	edc7 0a05 	vstr	s1, [r7, #20]
 8000752:	ed87 1a04 	vstr	s2, [r7, #16]
 8000756:	edc7 1a03 	vstr	s3, [r7, #12]
 800075a:	ed87 2a02 	vstr	s4, [r7, #8]
 800075e:	edc7 2a01 	vstr	s5, [r7, #4]
 8000762:	ed87 3a00 	vstr	s6, [r7]
	pid->Kp=Kp;
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	69ba      	ldr	r2, [r7, #24]
 800076a:	601a      	str	r2, [r3, #0]
	pid->Ki=Ki;
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	605a      	str	r2, [r3, #4]
	pid->Kd=Kd;
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	693a      	ldr	r2, [r7, #16]
 8000776:	609a      	str	r2, [r3, #8]
	pid->to=to;
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	60da      	str	r2, [r3, #12]
	pid->T=T;
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	68ba      	ldr	r2, [r7, #8]
 8000782:	611a      	str	r2, [r3, #16]

	pid->et=0;
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	f04f 0200 	mov.w	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
	pid->ek1=0;
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	f04f 0200 	mov.w	r2, #0
 8000792:	619a      	str	r2, [r3, #24]

	pid->eKit=0;
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	f04f 0200 	mov.w	r2, #0
 800079a:	61da      	str	r2, [r3, #28]
	pid->eKik1=0;
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	f04f 0200 	mov.w	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]

	pid->propotion=0;
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	f04f 0200 	mov.w	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->integrator=0;
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	f04f 0200 	mov.w	r2, #0
 80007b2:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->deviator=0;
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f04f 0200 	mov.w	r2, #0
 80007ba:	631a      	str	r2, [r3, #48]	@ 0x30
	pid->integratork1=0;
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	f04f 0200 	mov.w	r2, #0
 80007c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->deviatork1=0;
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	f04f 0200 	mov.w	r2, #0
 80007ca:	635a      	str	r2, [r3, #52]	@ 0x34

	pid->upper_saturation=upper_saturation;
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	641a      	str	r2, [r3, #64]	@ 0x40
	pid->lower_saturation=lower_saturation;
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	683a      	ldr	r2, [r7, #0]
 80007d6:	645a      	str	r2, [r3, #68]	@ 0x44

	pid->measurement=0;
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	f04f 0200 	mov.w	r2, #0
 80007de:	639a      	str	r2, [r3, #56]	@ 0x38

	pid->u=0;
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	f04f 0200 	mov.w	r2, #0
 80007e6:	64da      	str	r2, [r3, #76]	@ 0x4c

}
 80007e8:	bf00      	nop
 80007ea:	3724      	adds	r7, #36	@ 0x24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <pidUpdate>:
	pid->Ki=Ki;
	pid->Kd=Kd;
}

float pidUpdate(PIDControllers_Typedef* pid,float measurement,float input)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000800:	edc7 0a01 	vstr	s1, [r7, #4]
	//get pid input
	pid->expected=input;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	63da      	str	r2, [r3, #60]	@ 0x3c
	pid->measurement=measurement;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	68ba      	ldr	r2, [r7, #8]
 800080e:	639a      	str	r2, [r3, #56]	@ 0x38
	pid->et=pid->expected-pid->measurement;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800081c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	edc3 7a05 	vstr	s15, [r3, #20]
	{
		pid->eKik1=0;
		pid->eKit=0;
	}
#else
	pid->eKit=pid->et;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	695a      	ldr	r2, [r3, #20]
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	61da      	str	r2, [r3, #28]
	pid->eKik1=pid->ek1;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	699a      	ldr	r2, [r3, #24]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	621a      	str	r2, [r3, #32]
#endif
	//PID calculation
	pid->propotion=pid->Kp*pid->et;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	ed93 7a00 	vldr	s14, [r3]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	pid->integrator=((pid->Ki*pid->T)/2)*(pid->eKit+pid->eKik1)+pid->integratork1;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	edd3 7a04 	vldr	s15, [r3, #16]
 8000858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800085c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000860:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	edd3 6a07 	vldr	s13, [r3, #28]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	edd3 7a08 	vldr	s15, [r3, #32]
 8000870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000874:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800087e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	pid->deviator=((2*pid->Kd)/(2*pid->to+pid->T))*(pid->et-pid->ek1)+((2*pid->to-pid->T)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	edd3 7a02 	vldr	s15, [r3, #8]
 800088e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	edd3 7a03 	vldr	s15, [r3, #12]
 8000898:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	edd3 7a04 	vldr	s15, [r3, #16]
 80008a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	edd3 6a05 	vldr	s13, [r3, #20]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80008b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80008ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80008c4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80008ce:	ee36 6ae7 	vsub.f32	s12, s13, s15
			/(2*pid->to+pid->T))*pid->deviatork1;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80008d8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	edd3 7a04 	vldr	s15, [r3, #16]
 80008e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80008e6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80008f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
	pid->deviator=((2*pid->Kd)/(2*pid->to+pid->T))*(pid->et-pid->ek1)+((2*pid->to-pid->T)
 80008f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	pid->ek1=pid->et;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	695a      	ldr	r2, [r3, #20]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	619a      	str	r2, [r3, #24]
	pid->integratork1=pid->integrator;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->deviatork1=pid->deviator;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	635a      	str	r2, [r3, #52]	@ 0x34
	pid->v=pid->propotion+pid->integrator+pid->deviator;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000922:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800092c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

	//saturation
	if(pid->v>pid->upper_saturation)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8000942:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800094a:	dd04      	ble.n	8000956 <pidUpdate+0x162>
	{
		pid->u=pid->upper_saturation;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000954:	e013      	b.n	800097e <pidUpdate+0x18a>
	}
	else if(pid->v<(pid->lower_saturation))
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000962:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800096a:	d504      	bpl.n	8000976 <pidUpdate+0x182>
	{
		pid->u=pid->lower_saturation;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000974:	e003      	b.n	800097e <pidUpdate+0x18a>
	}
	else
	{
		pid->u=pid->v;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	64da      	str	r2, [r3, #76]	@ 0x4c
	}

	return pid->u;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	ee07 3a90 	vmov	s15, r3
}
 8000986:	eeb0 0a67 	vmov.f32	s0, s15
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4a07      	ldr	r2, [pc, #28]	@ (80009c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80009a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	4a06      	ldr	r2, [pc, #24]	@ (80009c4 <vApplicationGetIdleTaskMemory+0x30>)
 80009aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2280      	movs	r2, #128	@ 0x80
 80009b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009b2:	bf00      	nop
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000094 	.word	0x20000094
 80009c4:	20000134 	.word	0x20000134

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b5b0      	push	{r4, r5, r7, lr}
 80009ca:	b08a      	sub	sp, #40	@ 0x28
 80009cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ce:	f001 f95d 	bl	8001c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d2:	f000 f909 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d6:	f000 facd 	bl	8000f74 <MX_GPIO_Init>
  MX_SPI1_Init();
 80009da:	f000 f96d 	bl	8000cb8 <MX_SPI1_Init>
  MX_TIM2_Init();
 80009de:	f000 f9d7 	bl	8000d90 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009e2:	f000 fa4f 	bl	8000e84 <MX_TIM3_Init>
  MX_SPI2_Init();
 80009e6:	f000 f99d 	bl	8000d24 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80009ea:	f000 fa99 	bl	8000f20 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */



  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009f4:	4860      	ldr	r0, [pc, #384]	@ (8000b78 <main+0x1b0>)
 80009f6:	f001 fc2d 	bl	8002254 <HAL_GPIO_WritePin>
  float sample=powf(10,-3);
 80009fa:	4b60      	ldr	r3, [pc, #384]	@ (8000b7c <main+0x1b4>)
 80009fc:	61fb      	str	r3, [r7, #28]
  pidControllersInit(&yaw, 20, 15, 5,0.1,sample,0.1,-0.1);
 80009fe:	ed9f 3a60 	vldr	s6, [pc, #384]	@ 8000b80 <main+0x1b8>
 8000a02:	eddf 2a60 	vldr	s5, [pc, #384]	@ 8000b84 <main+0x1bc>
 8000a06:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a0a:	eddf 1a5e 	vldr	s3, [pc, #376]	@ 8000b84 <main+0x1bc>
 8000a0e:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000a12:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8000a16:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000a1a:	485b      	ldr	r0, [pc, #364]	@ (8000b88 <main+0x1c0>)
 8000a1c:	f7ff fe91 	bl	8000742 <pidControllersInit>
  pidControllersInit(&yaw_rate, 100, 50,10, 0.1,sample,1500,-1500);
 8000a20:	ed9f 3a5a 	vldr	s6, [pc, #360]	@ 8000b8c <main+0x1c4>
 8000a24:	eddf 2a5a 	vldr	s5, [pc, #360]	@ 8000b90 <main+0x1c8>
 8000a28:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a2c:	eddf 1a55 	vldr	s3, [pc, #340]	@ 8000b84 <main+0x1bc>
 8000a30:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000a34:	eddf 0a57 	vldr	s1, [pc, #348]	@ 8000b94 <main+0x1cc>
 8000a38:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 8000b98 <main+0x1d0>
 8000a3c:	4857      	ldr	r0, [pc, #348]	@ (8000b9c <main+0x1d4>)
 8000a3e:	f7ff fe80 	bl	8000742 <pidControllersInit>
  pidControllersInit(&pitch, 20, 15,5, 0.1,sample,0.1,-0.1);
 8000a42:	ed9f 3a4f 	vldr	s6, [pc, #316]	@ 8000b80 <main+0x1b8>
 8000a46:	eddf 2a4f 	vldr	s5, [pc, #316]	@ 8000b84 <main+0x1bc>
 8000a4a:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a4e:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 8000b84 <main+0x1bc>
 8000a52:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000a56:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8000a5a:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000a5e:	4850      	ldr	r0, [pc, #320]	@ (8000ba0 <main+0x1d8>)
 8000a60:	f7ff fe6f 	bl	8000742 <pidControllersInit>
  pidControllersInit(&pitch_rate, 100, 50,10, 0.1,sample,1500,-1500);
 8000a64:	ed9f 3a49 	vldr	s6, [pc, #292]	@ 8000b8c <main+0x1c4>
 8000a68:	eddf 2a49 	vldr	s5, [pc, #292]	@ 8000b90 <main+0x1c8>
 8000a6c:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a70:	eddf 1a44 	vldr	s3, [pc, #272]	@ 8000b84 <main+0x1bc>
 8000a74:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000a78:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8000b94 <main+0x1cc>
 8000a7c:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8000b98 <main+0x1d0>
 8000a80:	4848      	ldr	r0, [pc, #288]	@ (8000ba4 <main+0x1dc>)
 8000a82:	f7ff fe5e 	bl	8000742 <pidControllersInit>
  pidControllersInit(&roll, 20, 15,5 ,0.1,sample,0.1,-0.1);
 8000a86:	ed9f 3a3e 	vldr	s6, [pc, #248]	@ 8000b80 <main+0x1b8>
 8000a8a:	eddf 2a3e 	vldr	s5, [pc, #248]	@ 8000b84 <main+0x1bc>
 8000a8e:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a92:	eddf 1a3c 	vldr	s3, [pc, #240]	@ 8000b84 <main+0x1bc>
 8000a96:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000a9a:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8000a9e:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000aa2:	4841      	ldr	r0, [pc, #260]	@ (8000ba8 <main+0x1e0>)
 8000aa4:	f7ff fe4d 	bl	8000742 <pidControllersInit>
  pidControllersInit(&roll_rate, 100, 50,10, 0.1,sample,1500,-1500);
 8000aa8:	ed9f 3a38 	vldr	s6, [pc, #224]	@ 8000b8c <main+0x1c4>
 8000aac:	eddf 2a38 	vldr	s5, [pc, #224]	@ 8000b90 <main+0x1c8>
 8000ab0:	ed97 2a07 	vldr	s4, [r7, #28]
 8000ab4:	eddf 1a33 	vldr	s3, [pc, #204]	@ 8000b84 <main+0x1bc>
 8000ab8:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000abc:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8000b94 <main+0x1cc>
 8000ac0:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 8000b98 <main+0x1d0>
 8000ac4:	4839      	ldr	r0, [pc, #228]	@ (8000bac <main+0x1e4>)
 8000ac6:	f7ff fe3c 	bl	8000742 <pidControllersInit>
  pidControllersInit(&high, 50, 25,10 ,0.1,sample,6000,0);
 8000aca:	ed9f 3a39 	vldr	s6, [pc, #228]	@ 8000bb0 <main+0x1e8>
 8000ace:	eddf 2a39 	vldr	s5, [pc, #228]	@ 8000bb4 <main+0x1ec>
 8000ad2:	ed97 2a07 	vldr	s4, [r7, #28]
 8000ad6:	eddf 1a2b 	vldr	s3, [pc, #172]	@ 8000b84 <main+0x1bc>
 8000ada:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000ade:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 8000ae2:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8000b94 <main+0x1cc>
 8000ae6:	4834      	ldr	r0, [pc, #208]	@ (8000bb8 <main+0x1f0>)
 8000ae8:	f7ff fe2b 	bl	8000742 <pidControllersInit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000aec:	2100      	movs	r1, #0
 8000aee:	4833      	ldr	r0, [pc, #204]	@ (8000bbc <main+0x1f4>)
 8000af0:	f002 ff42 	bl	8003978 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000af4:	2104      	movs	r1, #4
 8000af6:	4831      	ldr	r0, [pc, #196]	@ (8000bbc <main+0x1f4>)
 8000af8:	f002 ff3e 	bl	8003978 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000afc:	2108      	movs	r1, #8
 8000afe:	482f      	ldr	r0, [pc, #188]	@ (8000bbc <main+0x1f4>)
 8000b00:	f002 ff3a 	bl	8003978 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000b04:	210c      	movs	r1, #12
 8000b06:	482d      	ldr	r0, [pc, #180]	@ (8000bbc <main+0x1f4>)
 8000b08:	f002 ff36 	bl	8003978 <HAL_TIM_PWM_Start>
 // Calibration(&htim2);
  HAL_TIM_Base_Start_IT(&htim3);
 8000b0c:	482c      	ldr	r0, [pc, #176]	@ (8000bc0 <main+0x1f8>)
 8000b0e:	f002 fe81 	bl	8003814 <HAL_TIM_Base_Start_IT>
  TX_Enhanced_ShockBurst_Config(&nrf1, 0xA2A2A2A2A2);
 8000b12:	f04f 32a2 	mov.w	r2, #2728567458	@ 0xa2a2a2a2
 8000b16:	f04f 03a2 	mov.w	r3, #162	@ 0xa2
 8000b1a:	482a      	ldr	r0, [pc, #168]	@ (8000bc4 <main+0x1fc>)
 8000b1c:	f000 fd68 	bl	80015f0 <TX_Enhanced_ShockBurst_Config>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b20:	4b29      	ldr	r3, [pc, #164]	@ (8000bc8 <main+0x200>)
 8000b22:	463c      	mov	r4, r7
 8000b24:	461d      	mov	r5, r3
 8000b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b32:	463b      	mov	r3, r7
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f004 f8a7 	bl	8004c8a <osThreadCreate>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4a23      	ldr	r2, [pc, #140]	@ (8000bcc <main+0x204>)
 8000b40:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(ESC_Task, "ESC", 256,NULL,1, &ESC_Handle);
 8000b42:	4b23      	ldr	r3, [pc, #140]	@ (8000bd0 <main+0x208>)
 8000b44:	9301      	str	r3, [sp, #4]
 8000b46:	2301      	movs	r3, #1
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b50:	4920      	ldr	r1, [pc, #128]	@ (8000bd4 <main+0x20c>)
 8000b52:	4821      	ldr	r0, [pc, #132]	@ (8000bd8 <main+0x210>)
 8000b54:	f004 fa0d 	bl	8004f72 <xTaskCreate>
  xTaskCreate(NRF_Task, "NRF", 256, NULL, 0, &NRF_Handle);
 8000b58:	4b20      	ldr	r3, [pc, #128]	@ (8000bdc <main+0x214>)
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2300      	movs	r3, #0
 8000b62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b66:	491e      	ldr	r1, [pc, #120]	@ (8000be0 <main+0x218>)
 8000b68:	481e      	ldr	r0, [pc, #120]	@ (8000be4 <main+0x21c>)
 8000b6a:	f004 fa02 	bl	8004f72 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b6e:	f004 f885 	bl	8004c7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b72:	bf00      	nop
 8000b74:	e7fd      	b.n	8000b72 <main+0x1aa>
 8000b76:	bf00      	nop
 8000b78:	40020800 	.word	0x40020800
 8000b7c:	3a83126f 	.word	0x3a83126f
 8000b80:	bdcccccd 	.word	0xbdcccccd
 8000b84:	3dcccccd 	.word	0x3dcccccd
 8000b88:	20000644 	.word	0x20000644
 8000b8c:	c4bb8000 	.word	0xc4bb8000
 8000b90:	44bb8000 	.word	0x44bb8000
 8000b94:	42480000 	.word	0x42480000
 8000b98:	42c80000 	.word	0x42c80000
 8000b9c:	20000698 	.word	0x20000698
 8000ba0:	200004f4 	.word	0x200004f4
 8000ba4:	20000548 	.word	0x20000548
 8000ba8:	2000059c 	.word	0x2000059c
 8000bac:	200005f0 	.word	0x200005f0
 8000bb0:	00000000 	.word	0x00000000
 8000bb4:	45bb8000 	.word	0x45bb8000
 8000bb8:	200006ec 	.word	0x200006ec
 8000bbc:	200003e4 	.word	0x200003e4
 8000bc0:	2000042c 	.word	0x2000042c
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	08006b8c 	.word	0x08006b8c
 8000bcc:	200004bc 	.word	0x200004bc
 8000bd0:	20000790 	.word	0x20000790
 8000bd4:	08006b78 	.word	0x08006b78
 8000bd8:	080010a1 	.word	0x080010a1
 8000bdc:	20000794 	.word	0x20000794
 8000be0:	08006b7c 	.word	0x08006b7c
 8000be4:	080012a1 	.word	0x080012a1

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b094      	sub	sp, #80	@ 0x50
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0320 	add.w	r3, r7, #32
 8000bf2:	2230      	movs	r2, #48	@ 0x30
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f005 fad6 	bl	80061a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	4b27      	ldr	r3, [pc, #156]	@ (8000cb0 <SystemClock_Config+0xc8>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c14:	4a26      	ldr	r2, [pc, #152]	@ (8000cb0 <SystemClock_Config+0xc8>)
 8000c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1c:	4b24      	ldr	r3, [pc, #144]	@ (8000cb0 <SystemClock_Config+0xc8>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	4b21      	ldr	r3, [pc, #132]	@ (8000cb4 <SystemClock_Config+0xcc>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a20      	ldr	r2, [pc, #128]	@ (8000cb4 <SystemClock_Config+0xcc>)
 8000c32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c36:	6013      	str	r3, [r2, #0]
 8000c38:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb4 <SystemClock_Config+0xcc>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c44:	2301      	movs	r3, #1
 8000c46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c58:	2319      	movs	r3, #25
 8000c5a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c5c:	23a8      	movs	r3, #168	@ 0xa8
 8000c5e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c60:	2302      	movs	r3, #2
 8000c62:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c64:	2304      	movs	r3, #4
 8000c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c68:	f107 0320 	add.w	r3, r7, #32
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 fb25 	bl	80022bc <HAL_RCC_OscConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c78:	f000 fb5c 	bl	8001334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c80:	2302      	movs	r3, #2
 8000c82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	2102      	movs	r1, #2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f001 fd87 	bl	80027ac <HAL_RCC_ClockConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ca4:	f000 fb46 	bl	8001334 <Error_Handler>
  }
}
 8000ca8:	bf00      	nop
 8000caa:	3750      	adds	r7, #80	@ 0x50
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40007000 	.word	0x40007000

08000cb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cbc:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000cbe:	4a18      	ldr	r2, [pc, #96]	@ (8000d20 <MX_SPI1_Init+0x68>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cc2:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000cc4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000cc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cca:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000ce4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ce8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000cec:	2210      	movs	r2, #16
 8000cee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cfc:	4b07      	ldr	r3, [pc, #28]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000d04:	220a      	movs	r2, #10
 8000d06:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d08:	4804      	ldr	r0, [pc, #16]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000d0a:	f001 ff61 	bl	8002bd0 <HAL_SPI_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d14:	f000 fb0e 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000334 	.word	0x20000334
 8000d20:	40013000 	.word	0x40013000

08000d24 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d28:	4b17      	ldr	r3, [pc, #92]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d2a:	4a18      	ldr	r2, [pc, #96]	@ (8000d8c <MX_SPI2_Init+0x68>)
 8000d2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d2e:	4b16      	ldr	r3, [pc, #88]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d36:	4b14      	ldr	r3, [pc, #80]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d3c:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d42:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d54:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d56:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d58:	2208      	movs	r2, #8
 8000d5a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d68:	4b07      	ldr	r3, [pc, #28]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d70:	220a      	movs	r2, #10
 8000d72:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d74:	4804      	ldr	r0, [pc, #16]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d76:	f001 ff2b 	bl	8002bd0 <HAL_SPI_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d80:	f000 fad8 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	2000038c 	.word	0x2000038c
 8000d8c:	40003800 	.word	0x40003800

08000d90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	@ 0x28
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d96:	f107 0320 	add.w	r3, r7, #32
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]
 8000dae:	615a      	str	r2, [r3, #20]
 8000db0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000db2:	4b33      	ldr	r3, [pc, #204]	@ (8000e80 <MX_TIM2_Init+0xf0>)
 8000db4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000db8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dba:	4b31      	ldr	r3, [pc, #196]	@ (8000e80 <MX_TIM2_Init+0xf0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc0:	4b2f      	ldr	r3, [pc, #188]	@ (8000e80 <MX_TIM2_Init+0xf0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	@ (8000e80 <MX_TIM2_Init+0xf0>)
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dcc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dce:	4b2c      	ldr	r3, [pc, #176]	@ (8000e80 <MX_TIM2_Init+0xf0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e80 <MX_TIM2_Init+0xf0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dda:	4829      	ldr	r0, [pc, #164]	@ (8000e80 <MX_TIM2_Init+0xf0>)
 8000ddc:	f002 fd7c 	bl	80038d8 <HAL_TIM_PWM_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000de6:	f000 faa5 	bl	8001334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000df2:	f107 0320 	add.w	r3, r7, #32
 8000df6:	4619      	mov	r1, r3
 8000df8:	4821      	ldr	r0, [pc, #132]	@ (8000e80 <MX_TIM2_Init+0xf0>)
 8000dfa:	f003 fbe1 	bl	80045c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000e04:	f000 fa96 	bl	8001334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e08:	2360      	movs	r3, #96	@ 0x60
 8000e0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4818      	ldr	r0, [pc, #96]	@ (8000e80 <MX_TIM2_Init+0xf0>)
 8000e20:	f002 ff4a 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000e2a:	f000 fa83 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2204      	movs	r2, #4
 8000e32:	4619      	mov	r1, r3
 8000e34:	4812      	ldr	r0, [pc, #72]	@ (8000e80 <MX_TIM2_Init+0xf0>)
 8000e36:	f002 ff3f 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000e40:	f000 fa78 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2208      	movs	r2, #8
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480d      	ldr	r0, [pc, #52]	@ (8000e80 <MX_TIM2_Init+0xf0>)
 8000e4c:	f002 ff34 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000e56:	f000 fa6d 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	220c      	movs	r2, #12
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4807      	ldr	r0, [pc, #28]	@ (8000e80 <MX_TIM2_Init+0xf0>)
 8000e62:	f002 ff29 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000e6c:	f000 fa62 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e70:	4803      	ldr	r0, [pc, #12]	@ (8000e80 <MX_TIM2_Init+0xf0>)
 8000e72:	f000 fd77 	bl	8001964 <HAL_TIM_MspPostInit>

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	@ 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200003e4 	.word	0x200003e4

08000e84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8a:	f107 0308 	add.w	r3, r7, #8
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e98:	463b      	mov	r3, r7
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <MX_TIM3_Init+0x94>)
 8000ea2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f1c <MX_TIM3_Init+0x98>)
 8000ea4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f18 <MX_TIM3_Init+0x94>)
 8000ea8:	2253      	movs	r2, #83	@ 0x53
 8000eaa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <MX_TIM3_Init+0x94>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <MX_TIM3_Init+0x94>)
 8000eb4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000eb8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eba:	4b17      	ldr	r3, [pc, #92]	@ (8000f18 <MX_TIM3_Init+0x94>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <MX_TIM3_Init+0x94>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ec6:	4814      	ldr	r0, [pc, #80]	@ (8000f18 <MX_TIM3_Init+0x94>)
 8000ec8:	f002 fc54 	bl	8003774 <HAL_TIM_Base_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000ed2:	f000 fa2f 	bl	8001334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <MX_TIM3_Init+0x94>)
 8000ee4:	f002 ffaa 	bl	8003e3c <HAL_TIM_ConfigClockSource>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000eee:	f000 fa21 	bl	8001334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000efa:	463b      	mov	r3, r7
 8000efc:	4619      	mov	r1, r3
 8000efe:	4806      	ldr	r0, [pc, #24]	@ (8000f18 <MX_TIM3_Init+0x94>)
 8000f00:	f003 fb5e 	bl	80045c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f0a:	f000 fa13 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2000042c 	.word	0x2000042c
 8000f1c:	40000400 	.word	0x40000400

08000f20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <MX_USART1_UART_Init+0x4c>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	@ (8000f70 <MX_USART1_UART_Init+0x50>)
 8000f28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f2a:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <MX_USART1_UART_Init+0x4c>)
 8000f2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <MX_USART1_UART_Init+0x4c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <MX_USART1_UART_Init+0x4c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <MX_USART1_UART_Init+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f44:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <MX_USART1_UART_Init+0x4c>)
 8000f46:	220c      	movs	r2, #12
 8000f48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4a:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <MX_USART1_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <MX_USART1_UART_Init+0x4c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f56:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <MX_USART1_UART_Init+0x4c>)
 8000f58:	f003 fbb4 	bl	80046c4 <HAL_UART_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f62:	f000 f9e7 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000474 	.word	0x20000474
 8000f70:	40011000 	.word	0x40011000

08000f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	4b40      	ldr	r3, [pc, #256]	@ (8001090 <MX_GPIO_Init+0x11c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a3f      	ldr	r2, [pc, #252]	@ (8001090 <MX_GPIO_Init+0x11c>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001090 <MX_GPIO_Init+0x11c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b39      	ldr	r3, [pc, #228]	@ (8001090 <MX_GPIO_Init+0x11c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a38      	ldr	r2, [pc, #224]	@ (8001090 <MX_GPIO_Init+0x11c>)
 8000fb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b36      	ldr	r3, [pc, #216]	@ (8001090 <MX_GPIO_Init+0x11c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	4b32      	ldr	r3, [pc, #200]	@ (8001090 <MX_GPIO_Init+0x11c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	4a31      	ldr	r2, [pc, #196]	@ (8001090 <MX_GPIO_Init+0x11c>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001090 <MX_GPIO_Init+0x11c>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	4b2b      	ldr	r3, [pc, #172]	@ (8001090 <MX_GPIO_Init+0x11c>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	4a2a      	ldr	r2, [pc, #168]	@ (8001090 <MX_GPIO_Init+0x11c>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fee:	4b28      	ldr	r3, [pc, #160]	@ (8001090 <MX_GPIO_Init+0x11c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001000:	4824      	ldr	r0, [pc, #144]	@ (8001094 <MX_GPIO_Init+0x120>)
 8001002:	f001 f927 	bl	8002254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	2110      	movs	r1, #16
 800100a:	4823      	ldr	r0, [pc, #140]	@ (8001098 <MX_GPIO_Init+0x124>)
 800100c:	f001 f922 	bl	8002254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|ICM_CS_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	2105      	movs	r1, #5
 8001014:	4821      	ldr	r0, [pc, #132]	@ (800109c <MX_GPIO_Init+0x128>)
 8001016:	f001 f91d 	bl	8002254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800101a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	4818      	ldr	r0, [pc, #96]	@ (8001094 <MX_GPIO_Init+0x120>)
 8001034:	f000 ff72 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CS_Pin */
  GPIO_InitStruct.Pin = NRF_CS_Pin;
 8001038:	2310      	movs	r3, #16
 800103a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CS_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	4812      	ldr	r0, [pc, #72]	@ (8001098 <MX_GPIO_Init+0x124>)
 8001050:	f000 ff64 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin ICM_CS_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|ICM_CS_Pin;
 8001054:	2305      	movs	r3, #5
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001058:	2301      	movs	r3, #1
 800105a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	480c      	ldr	r0, [pc, #48]	@ (800109c <MX_GPIO_Init+0x128>)
 800106c:	f000 ff56 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8001070:	2302      	movs	r3, #2
 8001072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	4619      	mov	r1, r3
 8001082:	4806      	ldr	r0, [pc, #24]	@ (800109c <MX_GPIO_Init+0x128>)
 8001084:	f000 ff4a 	bl	8001f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001088:	bf00      	nop
 800108a:	3728      	adds	r7, #40	@ 0x28
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40023800 	.word	0x40023800
 8001094:	40020800 	.word	0x40020800
 8001098:	40020000 	.word	0x40020000
 800109c:	40020400 	.word	0x40020400

080010a0 <ESC_Task>:

/* USER CODE BEGIN 4 */
void ESC_Task(void *argument)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

	while(1)
	{
			if(timer3_flag==1)
 80010a8:	4b70      	ldr	r3, [pc, #448]	@ (800126c <ESC_Task+0x1cc>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	f040 80d9 	bne.w	8001264 <ESC_Task+0x1c4>
			{
				Calculate_Reference(&calculation, &control);
 80010b2:	496f      	ldr	r1, [pc, #444]	@ (8001270 <ESC_Task+0x1d0>)
 80010b4:	486f      	ldr	r0, [pc, #444]	@ (8001274 <ESC_Task+0x1d4>)
 80010b6:	f7ff fa79 	bl	80005ac <Calculate_Reference>
				pidUpdate(&pitch, calculation.picth_measurement, calculation.picth_reference);
 80010ba:	4b6e      	ldr	r3, [pc, #440]	@ (8001274 <ESC_Task+0x1d4>)
 80010bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80010c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001274 <ESC_Task+0x1d4>)
 80010c2:	ed93 7a00 	vldr	s14, [r3]
 80010c6:	eef0 0a47 	vmov.f32	s1, s14
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	486a      	ldr	r0, [pc, #424]	@ (8001278 <ESC_Task+0x1d8>)
 80010d0:	f7ff fb90 	bl	80007f4 <pidUpdate>
				/*
				 * get picth rate measuremet
				 */
				calculation.picth_rate_reference=pitch.u;
 80010d4:	4b68      	ldr	r3, [pc, #416]	@ (8001278 <ESC_Task+0x1d8>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d8:	4a66      	ldr	r2, [pc, #408]	@ (8001274 <ESC_Task+0x1d4>)
 80010da:	6193      	str	r3, [r2, #24]
				pidUpdate(&pitch_rate, calculation.picth_rate_measurement, calculation.picth_rate_reference);
 80010dc:	4b65      	ldr	r3, [pc, #404]	@ (8001274 <ESC_Task+0x1d4>)
 80010de:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80010e2:	4b64      	ldr	r3, [pc, #400]	@ (8001274 <ESC_Task+0x1d4>)
 80010e4:	ed93 7a06 	vldr	s14, [r3, #24]
 80010e8:	eef0 0a47 	vmov.f32	s1, s14
 80010ec:	eeb0 0a67 	vmov.f32	s0, s15
 80010f0:	4862      	ldr	r0, [pc, #392]	@ (800127c <ESC_Task+0x1dc>)
 80010f2:	f7ff fb7f 	bl	80007f4 <pidUpdate>

				/*
				 * get roll measurement
				 */
				pidUpdate(&roll, calculation.roll_measurement, calculation.roll_reference);
 80010f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001274 <ESC_Task+0x1d4>)
 80010f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80010fc:	4b5d      	ldr	r3, [pc, #372]	@ (8001274 <ESC_Task+0x1d4>)
 80010fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001102:	eef0 0a47 	vmov.f32	s1, s14
 8001106:	eeb0 0a67 	vmov.f32	s0, s15
 800110a:	485d      	ldr	r0, [pc, #372]	@ (8001280 <ESC_Task+0x1e0>)
 800110c:	f7ff fb72 	bl	80007f4 <pidUpdate>
				/*
				 * get roll rate measurement
				 */
				calculation.roll_rate_reference=roll.u;
 8001110:	4b5b      	ldr	r3, [pc, #364]	@ (8001280 <ESC_Task+0x1e0>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001114:	4a57      	ldr	r2, [pc, #348]	@ (8001274 <ESC_Task+0x1d4>)
 8001116:	61d3      	str	r3, [r2, #28]
				pidUpdate(&roll_rate, calculation.roll_rate_measurement, calculation.roll_rate_reference);
 8001118:	4b56      	ldr	r3, [pc, #344]	@ (8001274 <ESC_Task+0x1d4>)
 800111a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800111e:	4b55      	ldr	r3, [pc, #340]	@ (8001274 <ESC_Task+0x1d4>)
 8001120:	ed93 7a07 	vldr	s14, [r3, #28]
 8001124:	eef0 0a47 	vmov.f32	s1, s14
 8001128:	eeb0 0a67 	vmov.f32	s0, s15
 800112c:	4855      	ldr	r0, [pc, #340]	@ (8001284 <ESC_Task+0x1e4>)
 800112e:	f7ff fb61 	bl	80007f4 <pidUpdate>
				/*
				 * get yaw measurement
				 */
				pidUpdate(&yaw, calculation.yaw_measurement, calculation.yaw_reference);
 8001132:	4b50      	ldr	r3, [pc, #320]	@ (8001274 <ESC_Task+0x1d4>)
 8001134:	edd3 7a05 	vldr	s15, [r3, #20]
 8001138:	4b4e      	ldr	r3, [pc, #312]	@ (8001274 <ESC_Task+0x1d4>)
 800113a:	ed93 7a02 	vldr	s14, [r3, #8]
 800113e:	eef0 0a47 	vmov.f32	s1, s14
 8001142:	eeb0 0a67 	vmov.f32	s0, s15
 8001146:	4850      	ldr	r0, [pc, #320]	@ (8001288 <ESC_Task+0x1e8>)
 8001148:	f7ff fb54 	bl	80007f4 <pidUpdate>
				/*
				* get yaw measurement
				*/
				calculation.yaw_rate_reference=yaw.u;
 800114c:	4b4e      	ldr	r3, [pc, #312]	@ (8001288 <ESC_Task+0x1e8>)
 800114e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001150:	4a48      	ldr	r2, [pc, #288]	@ (8001274 <ESC_Task+0x1d4>)
 8001152:	6213      	str	r3, [r2, #32]
				pidUpdate(&yaw_rate, calculation.yaw_rate_measurement, calculation.yaw_rate_reference);
 8001154:	4b47      	ldr	r3, [pc, #284]	@ (8001274 <ESC_Task+0x1d4>)
 8001156:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800115a:	4b46      	ldr	r3, [pc, #280]	@ (8001274 <ESC_Task+0x1d4>)
 800115c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001160:	eef0 0a47 	vmov.f32	s1, s14
 8001164:	eeb0 0a67 	vmov.f32	s0, s15
 8001168:	4848      	ldr	r0, [pc, #288]	@ (800128c <ESC_Task+0x1ec>)
 800116a:	f7ff fb43 	bl	80007f4 <pidUpdate>
				/*
				* get high measurement and high reference
				*/
				pidUpdate(&high, calculation.high_measurement, calculation.high_reference);
 800116e:	4b41      	ldr	r3, [pc, #260]	@ (8001274 <ESC_Task+0x1d4>)
 8001170:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001174:	4b3f      	ldr	r3, [pc, #252]	@ (8001274 <ESC_Task+0x1d4>)
 8001176:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800117a:	eef0 0a47 	vmov.f32	s1, s14
 800117e:	eeb0 0a67 	vmov.f32	s0, s15
 8001182:	4843      	ldr	r0, [pc, #268]	@ (8001290 <ESC_Task+0x1f0>)
 8001184:	f7ff fb36 	bl	80007f4 <pidUpdate>

				speed.speed1=-pitch_rate.u+roll_rate.u-yaw_rate.u+high.u;
 8001188:	4b3e      	ldr	r3, [pc, #248]	@ (8001284 <ESC_Task+0x1e4>)
 800118a:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800118e:	4b3b      	ldr	r3, [pc, #236]	@ (800127c <ESC_Task+0x1dc>)
 8001190:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001194:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001198:	4b3c      	ldr	r3, [pc, #240]	@ (800128c <ESC_Task+0x1ec>)
 800119a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800119e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001290 <ESC_Task+0x1f0>)
 80011a4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80011a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011b0:	ee17 2a90 	vmov	r2, s15
 80011b4:	4b37      	ldr	r3, [pc, #220]	@ (8001294 <ESC_Task+0x1f4>)
 80011b6:	601a      	str	r2, [r3, #0]
				speed.speed2=+pitch_rate.u+roll_rate.u+yaw_rate.u+high.u;
 80011b8:	4b30      	ldr	r3, [pc, #192]	@ (800127c <ESC_Task+0x1dc>)
 80011ba:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80011be:	4b31      	ldr	r3, [pc, #196]	@ (8001284 <ESC_Task+0x1e4>)
 80011c0:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80011c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011c8:	4b30      	ldr	r3, [pc, #192]	@ (800128c <ESC_Task+0x1ec>)
 80011ca:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80011ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001290 <ESC_Task+0x1f0>)
 80011d4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80011d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011e0:	ee17 2a90 	vmov	r2, s15
 80011e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001294 <ESC_Task+0x1f4>)
 80011e6:	605a      	str	r2, [r3, #4]
				speed.speed3=+pitch_rate.u-roll_rate.u-yaw_rate.u+high.u;
 80011e8:	4b24      	ldr	r3, [pc, #144]	@ (800127c <ESC_Task+0x1dc>)
 80011ea:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80011ee:	4b25      	ldr	r3, [pc, #148]	@ (8001284 <ESC_Task+0x1e4>)
 80011f0:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80011f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011f8:	4b24      	ldr	r3, [pc, #144]	@ (800128c <ESC_Task+0x1ec>)
 80011fa:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80011fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001202:	4b23      	ldr	r3, [pc, #140]	@ (8001290 <ESC_Task+0x1f0>)
 8001204:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001208:	ee77 7a27 	vadd.f32	s15, s14, s15
 800120c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001210:	ee17 2a90 	vmov	r2, s15
 8001214:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <ESC_Task+0x1f4>)
 8001216:	609a      	str	r2, [r3, #8]
				speed.speed4=-pitch_rate.u-roll_rate.u-yaw_rate.u+high.u;
 8001218:	4b18      	ldr	r3, [pc, #96]	@ (800127c <ESC_Task+0x1dc>)
 800121a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800121e:	eeb1 7a67 	vneg.f32	s14, s15
 8001222:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <ESC_Task+0x1e4>)
 8001224:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001228:	ee37 7a67 	vsub.f32	s14, s14, s15
 800122c:	4b17      	ldr	r3, [pc, #92]	@ (800128c <ESC_Task+0x1ec>)
 800122e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001232:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001236:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <ESC_Task+0x1f0>)
 8001238:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800123c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001244:	ee17 2a90 	vmov	r2, s15
 8001248:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <ESC_Task+0x1f4>)
 800124a:	60da      	str	r2, [r3, #12]
				Control4Motor(&htim2, &speed);
 800124c:	4911      	ldr	r1, [pc, #68]	@ (8001294 <ESC_Task+0x1f4>)
 800124e:	4812      	ldr	r0, [pc, #72]	@ (8001298 <ESC_Task+0x1f8>)
 8001250:	f7ff fa52 	bl	80006f8 <Control4Motor>
				a++;
 8001254:	4b11      	ldr	r3, [pc, #68]	@ (800129c <ESC_Task+0x1fc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	4a10      	ldr	r2, [pc, #64]	@ (800129c <ESC_Task+0x1fc>)
 800125c:	6013      	str	r3, [r2, #0]
				timer3_flag=0;
 800125e:	4b03      	ldr	r3, [pc, #12]	@ (800126c <ESC_Task+0x1cc>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
			}
			vTaskDelay(pdMS_TO_TICKS(1));
 8001264:	2001      	movs	r0, #1
 8001266:	f003 ffd3 	bl	8005210 <vTaskDelay>
			if(timer3_flag==1)
 800126a:	e71d      	b.n	80010a8 <ESC_Task+0x8>
 800126c:	200004e0 	.word	0x200004e0
 8001270:	20000778 	.word	0x20000778
 8001274:	20000740 	.word	0x20000740
 8001278:	200004f4 	.word	0x200004f4
 800127c:	20000548 	.word	0x20000548
 8001280:	2000059c 	.word	0x2000059c
 8001284:	200005f0 	.word	0x200005f0
 8001288:	20000644 	.word	0x20000644
 800128c:	20000698 	.word	0x20000698
 8001290:	200006ec 	.word	0x200006ec
 8001294:	200004e4 	.word	0x200004e4
 8001298:	200003e4 	.word	0x200003e4
 800129c:	20000798 	.word	0x20000798

080012a0 <NRF_Task>:

	}
}

void NRF_Task(void *argument)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	int i=0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		sprintf((char*)spi_tx,"ngu+%d",i);
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	4906      	ldr	r1, [pc, #24]	@ (80012c8 <NRF_Task+0x28>)
 80012b0:	4806      	ldr	r0, [pc, #24]	@ (80012cc <NRF_Task+0x2c>)
 80012b2:	f004 ff57 	bl	8006164 <siprintf>
		TX_Communication(&nrf1, spi_tx);
 80012b6:	4905      	ldr	r1, [pc, #20]	@ (80012cc <NRF_Task+0x2c>)
 80012b8:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <NRF_Task+0x30>)
 80012ba:	f000 f9cd 	bl	8001658 <TX_Communication>
		i++;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3301      	adds	r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
		sprintf((char*)spi_tx,"ngu+%d",i);
 80012c4:	bf00      	nop
 80012c6:	e7f1      	b.n	80012ac <NRF_Task+0xc>
 80012c8:	08006ba8 	.word	0x08006ba8
 80012cc:	200004c0 	.word	0x200004c0
 80012d0:	20000000 	.word	0x20000000

080012d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80012dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012e0:	4804      	ldr	r0, [pc, #16]	@ (80012f4 <StartDefaultTask+0x20>)
 80012e2:	f000 ffd0 	bl	8002286 <HAL_GPIO_TogglePin>
    osDelay(500);
 80012e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012ea:	f003 fd1a 	bl	8004d22 <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80012ee:	bf00      	nop
 80012f0:	e7f4      	b.n	80012dc <StartDefaultTask+0x8>
 80012f2:	bf00      	nop
 80012f4:	40020800 	.word	0x40020800

080012f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
//	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a08      	ldr	r2, [pc, #32]	@ (8001328 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800130a:	f000 fce1 	bl	8001cd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance==TIM3)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a06      	ldr	r2, [pc, #24]	@ (800132c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d102      	bne.n	800131e <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	  timer3_flag=1;
 8001318:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
//	  xSemaphoreGiveFromISR(TimerISR_Semaphore,&xHigherPriorityTaskWoken);
  }
//  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
  /* USER CODE END Callback 1 */
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40010000 	.word	0x40010000
 800132c:	40000400 	.word	0x40000400
 8001330:	200004e0 	.word	0x200004e0

08001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
}
 800133a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <Error_Handler+0x8>

08001340 <Chip_Select>:
#include "main.h"

static NRF_MODE nrfmode;

void Chip_Select(NRF_HandleTypeDef *nrf)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CS_GPIO, nrf->CS_PIN, 0);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6818      	ldr	r0, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	899b      	ldrh	r3, [r3, #12]
 8001350:	2200      	movs	r2, #0
 8001352:	4619      	mov	r1, r3
 8001354:	f000 ff7e 	bl	8002254 <HAL_GPIO_WritePin>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <Chip_Deselect>:

void Chip_Deselect(NRF_HandleTypeDef *nrf)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CS_GPIO, nrf->CS_PIN, 1);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6818      	ldr	r0, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	899b      	ldrh	r3, [r3, #12]
 8001370:	2201      	movs	r2, #1
 8001372:	4619      	mov	r1, r3
 8001374:	f000 ff6e 	bl	8002254 <HAL_GPIO_WritePin>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <Set_CE_High>:

void Set_CE_High(NRF_HandleTypeDef *nrf)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CE_GPIO, nrf->CE_PIN, 1);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6858      	ldr	r0, [r3, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	89db      	ldrh	r3, [r3, #14]
 8001390:	2201      	movs	r2, #1
 8001392:	4619      	mov	r1, r3
 8001394:	f000 ff5e 	bl	8002254 <HAL_GPIO_WritePin>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <Set_CE_Low>:

void Set_CE_Low(NRF_HandleTypeDef *nrf)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nrf->CE_GPIO, nrf->CE_PIN, 0);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6858      	ldr	r0, [r3, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	89db      	ldrh	r3, [r3, #14]
 80013b0:	2200      	movs	r2, #0
 80013b2:	4619      	mov	r1, r3
 80013b4:	f000 ff4e 	bl	8002254 <HAL_GPIO_WritePin>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <WaitForIRQ>:

void WaitForIRQ(NRF_HandleTypeDef *nrf)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	while (HAL_GPIO_ReadPin(nrf->IRQ_GPIO, nrf->IRQ_PIN) == 1)
 80013c8:	bf00      	nop
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	8a1b      	ldrh	r3, [r3, #16]
 80013d2:	4619      	mov	r1, r3
 80013d4:	4610      	mov	r0, r2
 80013d6:	f000 ff25 	bl	8002224 <HAL_GPIO_ReadPin>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d0f4      	beq.n	80013ca <WaitForIRQ+0xa>
		;
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <nRF_WriteRegister>:

void nRF_WriteRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t *data, int size)
{
 80013ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ee:	b089      	sub	sp, #36	@ 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	460b      	mov	r3, r1
 80013fa:	72fb      	strb	r3, [r7, #11]
 80013fc:	466b      	mov	r3, sp
 80013fe:	461e      	mov	r6, r3
	uint8_t buff[size + 1];
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	1c59      	adds	r1, r3, #1
 8001404:	1e4b      	subs	r3, r1, #1
 8001406:	61bb      	str	r3, [r7, #24]
 8001408:	460a      	mov	r2, r1
 800140a:	2300      	movs	r3, #0
 800140c:	4690      	mov	r8, r2
 800140e:	4699      	mov	r9, r3
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800141c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001420:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001424:	460a      	mov	r2, r1
 8001426:	2300      	movs	r3, #0
 8001428:	4614      	mov	r4, r2
 800142a:	461d      	mov	r5, r3
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	f04f 0300 	mov.w	r3, #0
 8001434:	00eb      	lsls	r3, r5, #3
 8001436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800143a:	00e2      	lsls	r2, r4, #3
 800143c:	460b      	mov	r3, r1
 800143e:	3307      	adds	r3, #7
 8001440:	08db      	lsrs	r3, r3, #3
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	ebad 0d03 	sub.w	sp, sp, r3
 8001448:	466b      	mov	r3, sp
 800144a:	3300      	adds	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
	buff[0] = reg | (1 << 5);
 800144e:	7afb      	ldrb	r3, [r7, #11]
 8001450:	f043 0320 	orr.w	r3, r3, #32
 8001454:	b2da      	uxtb	r2, r3
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++)
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	e00a      	b.n	8001476 <nRF_WriteRegister+0x8c>
	{
		buff[i + 1] = data[i];
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	441a      	add	r2, r3
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3301      	adds	r3, #1
 800146a:	7811      	ldrb	r1, [r2, #0]
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < size; i++)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	3301      	adds	r3, #1
 8001474:	61fb      	str	r3, [r7, #28]
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	dbf0      	blt.n	8001460 <nRF_WriteRegister+0x76>
	}
	Chip_Select(nrf);
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f7ff ff5e 	bl	8001340 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, buff, (uint16_t)size + 1, NRF_SPI_TIMEOUT);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6958      	ldr	r0, [r3, #20]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	3301      	adds	r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	2364      	movs	r3, #100	@ 0x64
 8001492:	6979      	ldr	r1, [r7, #20]
 8001494:	f001 fc25 	bl	8002ce2 <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f7ff ff61 	bl	8001360 <Chip_Deselect>
 800149e:	46b5      	mov	sp, r6
}
 80014a0:	bf00      	nop
 80014a2:	3724      	adds	r7, #36	@ 0x24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080014aa <nRF_WriteOneRegister>:

void nRF_WriteOneRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t data)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b084      	sub	sp, #16
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	460b      	mov	r3, r1
 80014b4:	70fb      	strb	r3, [r7, #3]
 80014b6:	4613      	mov	r3, r2
 80014b8:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2];
	buff[0] = reg | (1 << 5);
 80014ba:	78fb      	ldrb	r3, [r7, #3]
 80014bc:	f043 0320 	orr.w	r3, r3, #32
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	733b      	strb	r3, [r7, #12]
	buff[1] = data;
 80014c4:	78bb      	ldrb	r3, [r7, #2]
 80014c6:	737b      	strb	r3, [r7, #13]
	Chip_Select(nrf);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff39 	bl	8001340 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, buff, 2, NRF_SPI_TIMEOUT);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6958      	ldr	r0, [r3, #20]
 80014d2:	f107 010c 	add.w	r1, r7, #12
 80014d6:	2364      	movs	r3, #100	@ 0x64
 80014d8:	2202      	movs	r2, #2
 80014da:	f001 fc02 	bl	8002ce2 <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ff3e 	bl	8001360 <Chip_Deselect>
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <nRF_ReadOneRegister>:
	HAL_SPI_Receive(nrf->hspi, receive_data, size, NRF_SPI_TIMEOUT * 10);
	Chip_Deselect(nrf);
}

void nRF_ReadOneRegister(NRF_HandleTypeDef *nrf, uint8_t reg, uint8_t *receive_data)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	460b      	mov	r3, r1
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	72fb      	strb	r3, [r7, #11]

	uint8_t buff = reg;
 80014fa:	7afb      	ldrb	r3, [r7, #11]
 80014fc:	75fb      	strb	r3, [r7, #23]
	Chip_Select(nrf);
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f7ff ff1e 	bl	8001340 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6958      	ldr	r0, [r3, #20]
 8001508:	f107 0117 	add.w	r1, r7, #23
 800150c:	2364      	movs	r3, #100	@ 0x64
 800150e:	2201      	movs	r2, #1
 8001510:	f001 fbe7 	bl	8002ce2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->hspi, receive_data, 1, NRF_SPI_TIMEOUT);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6958      	ldr	r0, [r3, #20]
 8001518:	2364      	movs	r3, #100	@ 0x64
 800151a:	2201      	movs	r2, #1
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	f001 fd24 	bl	8002f6a <HAL_SPI_Receive>
	Chip_Deselect(nrf);
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f7ff ff1c 	bl	8001360 <Chip_Deselect>
}
 8001528:	bf00      	nop
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <nRF_SendCmd>:
void nRF_SendCmd(NRF_HandleTypeDef *nrf, uint8_t cmd)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	70fb      	strb	r3, [r7, #3]

	uint8_t buff = cmd;
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	73fb      	strb	r3, [r7, #15]
	Chip_Select(nrf);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff fefd 	bl	8001340 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6958      	ldr	r0, [r3, #20]
 800154a:	f107 010f 	add.w	r1, r7, #15
 800154e:	2364      	movs	r3, #100	@ 0x64
 8001550:	2201      	movs	r2, #1
 8001552:	f001 fbc6 	bl	8002ce2 <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ff02 	bl	8001360 <Chip_Deselect>
}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <nRF_GetStatus>:

uint8_t nRF_GetStatus(NRF_HandleTypeDef *nrf)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

	uint8_t buff = STATUS;
 800156c:	2307      	movs	r3, #7
 800156e:	73fb      	strb	r3, [r7, #15]
	uint8_t rx_data = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	73bb      	strb	r3, [r7, #14]
	Chip_Select(nrf);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fee3 	bl	8001340 <Chip_Select>
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6958      	ldr	r0, [r3, #20]
 800157e:	f107 010f 	add.w	r1, r7, #15
 8001582:	2364      	movs	r3, #100	@ 0x64
 8001584:	2201      	movs	r2, #1
 8001586:	f001 fbac 	bl	8002ce2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(nrf->hspi, &rx_data, 1, NRF_SPI_TIMEOUT * 10);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6958      	ldr	r0, [r3, #20]
 800158e:	f107 010e 	add.w	r1, r7, #14
 8001592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001596:	2201      	movs	r2, #1
 8001598:	f001 fce7 	bl	8002f6a <HAL_SPI_Receive>
	Chip_Deselect(nrf);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff fedf 	bl	8001360 <Chip_Deselect>
	return rx_data;
 80015a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <nRF_TX_Payload>:

void nRF_TX_Payload(NRF_HandleTypeDef *nrf, uint8_t *data, uint16_t size)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	4613      	mov	r3, r2
 80015b8:	80fb      	strh	r3, [r7, #6]
	Chip_Select(nrf);
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f7ff fec0 	bl	8001340 <Chip_Select>
	uint8_t buff = W_TX_PAYLOAD;
 80015c0:	23a0      	movs	r3, #160	@ 0xa0
 80015c2:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(nrf->hspi, &buff, 1, NRF_SPI_TIMEOUT);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6958      	ldr	r0, [r3, #20]
 80015c8:	f107 0117 	add.w	r1, r7, #23
 80015cc:	2364      	movs	r3, #100	@ 0x64
 80015ce:	2201      	movs	r2, #1
 80015d0:	f001 fb87 	bl	8002ce2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nrf->hspi, data, size, NRF_SPI_TIMEOUT);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6958      	ldr	r0, [r3, #20]
 80015d8:	88fa      	ldrh	r2, [r7, #6]
 80015da:	2364      	movs	r3, #100	@ 0x64
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	f001 fb80 	bl	8002ce2 <HAL_SPI_Transmit>
	Chip_Deselect(nrf);
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f7ff febc 	bl	8001360 <Chip_Deselect>
}
 80015e8:	bf00      	nop
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <TX_Enhanced_ShockBurst_Config>:
	HAL_SPI_Receive(nrf->hspi, rx_data, size, NRF_SPI_TIMEOUT * 10);
	Chip_Deselect(nrf);
}

void TX_Enhanced_ShockBurst_Config(NRF_HandleTypeDef *nrf,uint64_t tx_addr)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t buff = 0x0a;
 80015fc:	230a      	movs	r3, #10
 80015fe:	75fb      	strb	r3, [r7, #23]
	Set_CE_Low(nrf);
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f7ff fecd 	bl	80013a0 <Set_CE_Low>
	TX_ADDR_Write(nrf, tx_addr);
 8001606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f000 f886 	bl	800171c <TX_ADDR_Write>
	nRF_WriteOneRegister(nrf, EN_AA, 0x00);
 8001610:	2200      	movs	r2, #0
 8001612:	2101      	movs	r1, #1
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f7ff ff48 	bl	80014aa <nRF_WriteOneRegister>
	nRF_WriteOneRegister(nrf, RX_PW_P0, 32);
 800161a:	2220      	movs	r2, #32
 800161c:	2111      	movs	r1, #17
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f7ff ff43 	bl	80014aa <nRF_WriteOneRegister>
	nRF_WriteOneRegister(nrf, RF_SETUP, 0x7);
 8001624:	2207      	movs	r2, #7
 8001626:	2106      	movs	r1, #6
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff ff3e 	bl	80014aa <nRF_WriteOneRegister>
	CONFIG_REG_Write(nrf, buff);
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	4619      	mov	r1, r3
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 f856 	bl	80016e4 <CONFIG_REG_Write>
	Set_CE_High(nrf);
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f7ff fea1 	bl	8001380 <Set_CE_High>
	HAL_Delay(2);
 800163e:	2002      	movs	r0, #2
 8001640:	f000 fb66 	bl	8001d10 <HAL_Delay>
	nrfmode = MODE_TX;
 8001644:	4b03      	ldr	r3, [pc, #12]	@ (8001654 <TX_Enhanced_ShockBurst_Config+0x64>)
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000079c 	.word	0x2000079c

08001658 <TX_Communication>:
	Set_CE_High(nrf);
	HAL_Delay(2);
}

uint8_t TX_Communication(NRF_HandleTypeDef *nrf, uint8_t *data)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	if (nrfmode == MODE_TX)
 8001662:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <TX_Communication+0x88>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d135      	bne.n	80016d6 <TX_Communication+0x7e>
	{
		nRF_TX_Payload(nrf, data, 32);
 800166a:	2220      	movs	r2, #32
 800166c:	6839      	ldr	r1, [r7, #0]
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ff9c 	bl	80015ac <nRF_TX_Payload>
		Set_CE_High(nrf);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff fe83 	bl	8001380 <Set_CE_High>
		WaitForIRQ(nrf);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff fea0 	bl	80013c0 <WaitForIRQ>
		nRF_SendCmd(nrf, FLUSH_TX);
 8001680:	21e1      	movs	r1, #225	@ 0xe1
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ff54 	bl	8001530 <nRF_SendCmd>
		uint8_t status = nRF_GetStatus(nrf);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff6b 	bl	8001564 <nRF_GetStatus>
 800168e:	4603      	mov	r3, r0
 8001690:	73fb      	strb	r3, [r7, #15]
		if ((status & (1 << MAX_RT)) != 0)
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00b      	beq.n	80016b4 <TX_Communication+0x5c>
		{
			status |= ((1 << MAX_RT) | (1 << TX_FULL));
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	f043 0311 	orr.w	r3, r3, #17
 80016a2:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(nrf, STATUS, status);
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	461a      	mov	r2, r3
 80016a8:	2107      	movs	r1, #7
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fefd 	bl	80014aa <nRF_WriteOneRegister>
			return STATUS_TX_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e011      	b.n	80016d8 <TX_Communication+0x80>
		}
		else if ((status & (1 << 5)) != 0)
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	f003 0320 	and.w	r3, r3, #32
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00b      	beq.n	80016d6 <TX_Communication+0x7e>
		{
			status |= ((1 << TX_DS) | (1 << TX_FULL));
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 80016c4:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(nrf, STATUS, status);
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	461a      	mov	r2, r3
 80016ca:	2107      	movs	r1, #7
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff feec 	bl	80014aa <nRF_WriteOneRegister>
			return STATUS_TX_OK;
 80016d2:	2302      	movs	r3, #2
 80016d4:	e000      	b.n	80016d8 <TX_Communication+0x80>
		}
	}
	return STATUS_TX_NONDEFINE;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	2000079c 	.word	0x2000079c

080016e4 <CONFIG_REG_Write>:
}



void CONFIG_REG_Write(NRF_HandleTypeDef *nrf, uint8_t data)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	70fb      	strb	r3, [r7, #3]
	uint8_t read_reg;
	do
	{
		nRF_WriteOneRegister(nrf, CONFIG, data);
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	461a      	mov	r2, r3
 80016f4:	2100      	movs	r1, #0
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fed7 	bl	80014aa <nRF_WriteOneRegister>
		nRF_ReadOneRegister(nrf, CONFIG, &read_reg);
 80016fc:	f107 030f 	add.w	r3, r7, #15
 8001700:	461a      	mov	r2, r3
 8001702:	2100      	movs	r1, #0
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fef1 	bl	80014ec <nRF_ReadOneRegister>
	} while (read_reg != data);
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	78fa      	ldrb	r2, [r7, #3]
 800170e:	429a      	cmp	r2, r3
 8001710:	d1ee      	bne.n	80016f0 <CONFIG_REG_Write+0xc>
}
 8001712:	bf00      	nop
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <TX_ADDR_Write>:
	}
	nRF_WriteOneRegister(nrf, reg, data);
}

void TX_ADDR_Write(NRF_HandleTypeDef *nrf, uint64_t data)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	@ 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t buff[5];
	uint64_t temp = data;
 8001728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800172c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	e016      	b.n	8001764 <TX_ADDR_Write+0x48>
	{
		buff[i] = (uint8_t)((temp) & 0xff);
 8001736:	f897 1020 	ldrb.w	r1, [r7, #32]
 800173a:	f107 0214 	add.w	r2, r7, #20
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	4413      	add	r3, r2
 8001742:	460a      	mov	r2, r1
 8001744:	701a      	strb	r2, [r3, #0]
		temp = temp >> 8;
 8001746:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	0a02      	lsrs	r2, r0, #8
 8001754:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001758:	0a0b      	lsrs	r3, r1, #8
 800175a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3301      	adds	r3, #1
 8001762:	61fb      	str	r3, [r7, #28]
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	2b04      	cmp	r3, #4
 8001768:	dde5      	ble.n	8001736 <TX_ADDR_Write+0x1a>
	}
	nRF_WriteRegister(nrf, TX_ADDR, buff, 5);
 800176a:	f107 0214 	add.w	r2, r7, #20
 800176e:	2305      	movs	r3, #5
 8001770:	2110      	movs	r1, #16
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f7ff fe39 	bl	80013ea <nRF_WriteRegister>
}
 8001778:	bf00      	nop
 800177a:	3728      	adds	r7, #40	@ 0x28
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <HAL_MspInit+0x54>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	4a11      	ldr	r2, [pc, #68]	@ (80017d4 <HAL_MspInit+0x54>)
 8001790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001794:	6453      	str	r3, [r2, #68]	@ 0x44
 8001796:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <HAL_MspInit+0x54>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <HAL_MspInit+0x54>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	4a0a      	ldr	r2, [pc, #40]	@ (80017d4 <HAL_MspInit+0x54>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b2:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <HAL_MspInit+0x54>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	210f      	movs	r1, #15
 80017c2:	f06f 0001 	mvn.w	r0, #1
 80017c6:	f000 fb7f 	bl	8001ec8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08c      	sub	sp, #48	@ 0x30
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a32      	ldr	r2, [pc, #200]	@ (80018c0 <HAL_SPI_MspInit+0xe8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d12c      	bne.n	8001854 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
 80017fe:	4b31      	ldr	r3, [pc, #196]	@ (80018c4 <HAL_SPI_MspInit+0xec>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	4a30      	ldr	r2, [pc, #192]	@ (80018c4 <HAL_SPI_MspInit+0xec>)
 8001804:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001808:	6453      	str	r3, [r2, #68]	@ 0x44
 800180a:	4b2e      	ldr	r3, [pc, #184]	@ (80018c4 <HAL_SPI_MspInit+0xec>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001812:	61bb      	str	r3, [r7, #24]
 8001814:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	4b2a      	ldr	r3, [pc, #168]	@ (80018c4 <HAL_SPI_MspInit+0xec>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a29      	ldr	r2, [pc, #164]	@ (80018c4 <HAL_SPI_MspInit+0xec>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b27      	ldr	r3, [pc, #156]	@ (80018c4 <HAL_SPI_MspInit+0xec>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001832:	23e0      	movs	r3, #224	@ 0xe0
 8001834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001842:	2305      	movs	r3, #5
 8001844:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	4619      	mov	r1, r3
 800184c:	481e      	ldr	r0, [pc, #120]	@ (80018c8 <HAL_SPI_MspInit+0xf0>)
 800184e:	f000 fb65 	bl	8001f1c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001852:	e031      	b.n	80018b8 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a1c      	ldr	r2, [pc, #112]	@ (80018cc <HAL_SPI_MspInit+0xf4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d12c      	bne.n	80018b8 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <HAL_SPI_MspInit+0xec>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	4a17      	ldr	r2, [pc, #92]	@ (80018c4 <HAL_SPI_MspInit+0xec>)
 8001868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800186c:	6413      	str	r3, [r2, #64]	@ 0x40
 800186e:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <HAL_SPI_MspInit+0xec>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <HAL_SPI_MspInit+0xec>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a10      	ldr	r2, [pc, #64]	@ (80018c4 <HAL_SPI_MspInit+0xec>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b0e      	ldr	r3, [pc, #56]	@ (80018c4 <HAL_SPI_MspInit+0xec>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001896:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 800189a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018a8:	2305      	movs	r3, #5
 80018aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	4619      	mov	r1, r3
 80018b2:	4807      	ldr	r0, [pc, #28]	@ (80018d0 <HAL_SPI_MspInit+0xf8>)
 80018b4:	f000 fb32 	bl	8001f1c <HAL_GPIO_Init>
}
 80018b8:	bf00      	nop
 80018ba:	3730      	adds	r7, #48	@ 0x30
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40013000 	.word	0x40013000
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40020000 	.word	0x40020000
 80018cc:	40003800 	.word	0x40003800
 80018d0:	40020400 	.word	0x40020400

080018d4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018e4:	d10d      	bne.n	8001902 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_TIM_PWM_MspInit+0x3c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	4a08      	ldr	r2, [pc, #32]	@ (8001910 <HAL_TIM_PWM_MspInit+0x3c>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <HAL_TIM_PWM_MspInit+0x3c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001902:	bf00      	nop
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800

08001914 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0e      	ldr	r2, [pc, #56]	@ (800195c <HAL_TIM_Base_MspInit+0x48>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d115      	bne.n	8001952 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <HAL_TIM_Base_MspInit+0x4c>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	4a0c      	ldr	r2, [pc, #48]	@ (8001960 <HAL_TIM_Base_MspInit+0x4c>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	6413      	str	r3, [r2, #64]	@ 0x40
 8001936:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <HAL_TIM_Base_MspInit+0x4c>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2105      	movs	r1, #5
 8001946:	201d      	movs	r0, #29
 8001948:	f000 fabe 	bl	8001ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800194c:	201d      	movs	r0, #29
 800194e:	f000 fad7 	bl	8001f00 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40000400 	.word	0x40000400
 8001960:	40023800 	.word	0x40023800

08001964 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001984:	d11d      	bne.n	80019c2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <HAL_TIM_MspPostInit+0x68>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	4a0f      	ldr	r2, [pc, #60]	@ (80019cc <HAL_TIM_MspPostInit+0x68>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6313      	str	r3, [r2, #48]	@ 0x30
 8001996:	4b0d      	ldr	r3, [pc, #52]	@ (80019cc <HAL_TIM_MspPostInit+0x68>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80019a2:	230f      	movs	r3, #15
 80019a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019b2:	2301      	movs	r3, #1
 80019b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	4619      	mov	r1, r3
 80019bc:	4804      	ldr	r0, [pc, #16]	@ (80019d0 <HAL_TIM_MspPostInit+0x6c>)
 80019be:	f000 faad 	bl	8001f1c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019c2:	bf00      	nop
 80019c4:	3720      	adds	r7, #32
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020000 	.word	0x40020000

080019d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	@ 0x28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a19      	ldr	r2, [pc, #100]	@ (8001a58 <HAL_UART_MspInit+0x84>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d12c      	bne.n	8001a50 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	4b18      	ldr	r3, [pc, #96]	@ (8001a5c <HAL_UART_MspInit+0x88>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fe:	4a17      	ldr	r2, [pc, #92]	@ (8001a5c <HAL_UART_MspInit+0x88>)
 8001a00:	f043 0310 	orr.w	r3, r3, #16
 8001a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <HAL_UART_MspInit+0x88>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <HAL_UART_MspInit+0x88>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	4a10      	ldr	r2, [pc, #64]	@ (8001a5c <HAL_UART_MspInit+0x88>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a22:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <HAL_UART_MspInit+0x88>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a2e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a40:	2307      	movs	r3, #7
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <HAL_UART_MspInit+0x8c>)
 8001a4c:	f000 fa66 	bl	8001f1c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a50:	bf00      	nop
 8001a52:	3728      	adds	r7, #40	@ 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40011000 	.word	0x40011000
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020000 	.word	0x40020000

08001a64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08c      	sub	sp, #48	@ 0x30
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	4b2e      	ldr	r3, [pc, #184]	@ (8001b34 <HAL_InitTick+0xd0>)
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7c:	4a2d      	ldr	r2, [pc, #180]	@ (8001b34 <HAL_InitTick+0xd0>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a84:	4b2b      	ldr	r3, [pc, #172]	@ (8001b34 <HAL_InitTick+0xd0>)
 8001a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a90:	f107 020c 	add.w	r2, r7, #12
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f001 f866 	bl	8002b6c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001aa0:	f001 f850 	bl	8002b44 <HAL_RCC_GetPCLK2Freq>
 8001aa4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aa8:	4a23      	ldr	r2, [pc, #140]	@ (8001b38 <HAL_InitTick+0xd4>)
 8001aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001aae:	0c9b      	lsrs	r3, r3, #18
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ab4:	4b21      	ldr	r3, [pc, #132]	@ (8001b3c <HAL_InitTick+0xd8>)
 8001ab6:	4a22      	ldr	r2, [pc, #136]	@ (8001b40 <HAL_InitTick+0xdc>)
 8001ab8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001aba:	4b20      	ldr	r3, [pc, #128]	@ (8001b3c <HAL_InitTick+0xd8>)
 8001abc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ac0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b3c <HAL_InitTick+0xd8>)
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b3c <HAL_InitTick+0xd8>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ace:	4b1b      	ldr	r3, [pc, #108]	@ (8001b3c <HAL_InitTick+0xd8>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad4:	4b19      	ldr	r3, [pc, #100]	@ (8001b3c <HAL_InitTick+0xd8>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001ada:	4818      	ldr	r0, [pc, #96]	@ (8001b3c <HAL_InitTick+0xd8>)
 8001adc:	f001 fe4a 	bl	8003774 <HAL_TIM_Base_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d11b      	bne.n	8001b26 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001aee:	4813      	ldr	r0, [pc, #76]	@ (8001b3c <HAL_InitTick+0xd8>)
 8001af0:	f001 fe90 	bl	8003814 <HAL_TIM_Base_Start_IT>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001afa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d111      	bne.n	8001b26 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b02:	2019      	movs	r0, #25
 8001b04:	f000 f9fc 	bl	8001f00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b0f      	cmp	r3, #15
 8001b0c:	d808      	bhi.n	8001b20 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	2019      	movs	r0, #25
 8001b14:	f000 f9d8 	bl	8001ec8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b18:	4a0a      	ldr	r2, [pc, #40]	@ (8001b44 <HAL_InitTick+0xe0>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e002      	b.n	8001b26 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3730      	adds	r7, #48	@ 0x30
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	431bde83 	.word	0x431bde83
 8001b3c:	200007a0 	.word	0x200007a0
 8001b40:	40010000 	.word	0x40010000
 8001b44:	2000001c 	.word	0x2000001c

08001b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <NMI_Handler+0x4>

08001b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <HardFault_Handler+0x4>

08001b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <MemManage_Handler+0x4>

08001b60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <BusFault_Handler+0x4>

08001b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <UsageFault_Handler+0x4>

08001b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b84:	4802      	ldr	r0, [pc, #8]	@ (8001b90 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b86:	f001 ffa7 	bl	8003ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200007a0 	.word	0x200007a0

08001b94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b98:	4802      	ldr	r0, [pc, #8]	@ (8001ba4 <TIM3_IRQHandler+0x10>)
 8001b9a:	f001 ff9d 	bl	8003ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000042c 	.word	0x2000042c

08001ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb0:	4a14      	ldr	r2, [pc, #80]	@ (8001c04 <_sbrk+0x5c>)
 8001bb2:	4b15      	ldr	r3, [pc, #84]	@ (8001c08 <_sbrk+0x60>)
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bbc:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	@ (8001c0c <_sbrk+0x64>)
 8001bc6:	4a12      	ldr	r2, [pc, #72]	@ (8001c10 <_sbrk+0x68>)
 8001bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bca:	4b10      	ldr	r3, [pc, #64]	@ (8001c0c <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d207      	bcs.n	8001be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd8:	f004 fb4c 	bl	8006274 <__errno>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	220c      	movs	r2, #12
 8001be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	e009      	b.n	8001bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be8:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bee:	4b07      	ldr	r3, [pc, #28]	@ (8001c0c <_sbrk+0x64>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	4a05      	ldr	r2, [pc, #20]	@ (8001c0c <_sbrk+0x64>)
 8001bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20020000 	.word	0x20020000
 8001c08:	00000400 	.word	0x00000400
 8001c0c:	200007e8 	.word	0x200007e8
 8001c10:	20004690 	.word	0x20004690

08001c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c18:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <SystemInit+0x20>)
 8001c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c1e:	4a05      	ldr	r2, [pc, #20]	@ (8001c34 <SystemInit+0x20>)
 8001c20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c3c:	f7ff ffea 	bl	8001c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c40:	480c      	ldr	r0, [pc, #48]	@ (8001c74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c42:	490d      	ldr	r1, [pc, #52]	@ (8001c78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c44:	4a0d      	ldr	r2, [pc, #52]	@ (8001c7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c48:	e002      	b.n	8001c50 <LoopCopyDataInit>

08001c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c4e:	3304      	adds	r3, #4

08001c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c54:	d3f9      	bcc.n	8001c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c56:	4a0a      	ldr	r2, [pc, #40]	@ (8001c80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c58:	4c0a      	ldr	r4, [pc, #40]	@ (8001c84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c5c:	e001      	b.n	8001c62 <LoopFillZerobss>

08001c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c60:	3204      	adds	r2, #4

08001c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c64:	d3fb      	bcc.n	8001c5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c66:	f004 fb0b 	bl	8006280 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c6a:	f7fe fead 	bl	80009c8 <main>
  bx  lr    
 8001c6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c78:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001c7c:	08006c14 	.word	0x08006c14
  ldr r2, =_sbss
 8001c80:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001c84:	2000468c 	.word	0x2000468c

08001c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c88:	e7fe      	b.n	8001c88 <ADC_IRQHandler>
	...

08001c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c90:	4b0e      	ldr	r3, [pc, #56]	@ (8001ccc <HAL_Init+0x40>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0d      	ldr	r2, [pc, #52]	@ (8001ccc <HAL_Init+0x40>)
 8001c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ccc <HAL_Init+0x40>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8001ccc <HAL_Init+0x40>)
 8001ca2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca8:	4b08      	ldr	r3, [pc, #32]	@ (8001ccc <HAL_Init+0x40>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a07      	ldr	r2, [pc, #28]	@ (8001ccc <HAL_Init+0x40>)
 8001cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	f000 f8fc 	bl	8001eb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cba:	200f      	movs	r0, #15
 8001cbc:	f7ff fed2 	bl	8001a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc0:	f7ff fd5e 	bl	8001780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023c00 	.word	0x40023c00

08001cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <HAL_IncTick+0x20>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_IncTick+0x24>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <HAL_IncTick+0x24>)
 8001ce2:	6013      	str	r3, [r2, #0]
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000020 	.word	0x20000020
 8001cf4:	200007ec 	.word	0x200007ec

08001cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	@ (8001d0c <HAL_GetTick+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	200007ec 	.word	0x200007ec

08001d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d18:	f7ff ffee 	bl	8001cf8 <HAL_GetTick>
 8001d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d28:	d005      	beq.n	8001d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <HAL_Delay+0x44>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d36:	bf00      	nop
 8001d38:	f7ff ffde 	bl	8001cf8 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d8f7      	bhi.n	8001d38 <HAL_Delay+0x28>
  {
  }
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000020 	.word	0x20000020

08001d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d68:	4b0c      	ldr	r3, [pc, #48]	@ (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d74:	4013      	ands	r3, r2
 8001d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d8a:	4a04      	ldr	r2, [pc, #16]	@ (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	60d3      	str	r3, [r2, #12]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da4:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <__NVIC_GetPriorityGrouping+0x18>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	0a1b      	lsrs	r3, r3, #8
 8001daa:	f003 0307 	and.w	r3, r3, #7
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	db0b      	blt.n	8001de6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	f003 021f 	and.w	r2, r3, #31
 8001dd4:	4907      	ldr	r1, [pc, #28]	@ (8001df4 <__NVIC_EnableIRQ+0x38>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	095b      	lsrs	r3, r3, #5
 8001ddc:	2001      	movs	r0, #1
 8001dde:	fa00 f202 	lsl.w	r2, r0, r2
 8001de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000e100 	.word	0xe000e100

08001df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	6039      	str	r1, [r7, #0]
 8001e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	db0a      	blt.n	8001e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	490c      	ldr	r1, [pc, #48]	@ (8001e44 <__NVIC_SetPriority+0x4c>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	0112      	lsls	r2, r2, #4
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e20:	e00a      	b.n	8001e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4908      	ldr	r1, [pc, #32]	@ (8001e48 <__NVIC_SetPriority+0x50>)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	3b04      	subs	r3, #4
 8001e30:	0112      	lsls	r2, r2, #4
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	440b      	add	r3, r1
 8001e36:	761a      	strb	r2, [r3, #24]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000e100 	.word	0xe000e100
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b089      	sub	sp, #36	@ 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f1c3 0307 	rsb	r3, r3, #7
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	bf28      	it	cs
 8001e6a:	2304      	movcs	r3, #4
 8001e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3304      	adds	r3, #4
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	d902      	bls.n	8001e7c <NVIC_EncodePriority+0x30>
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3b03      	subs	r3, #3
 8001e7a:	e000      	b.n	8001e7e <NVIC_EncodePriority+0x32>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	f04f 32ff 	mov.w	r2, #4294967295
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	401a      	ands	r2, r3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	43d9      	mvns	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	4313      	orrs	r3, r2
         );
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3724      	adds	r7, #36	@ 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ff4c 	bl	8001d58 <__NVIC_SetPriorityGrouping>
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
 8001ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eda:	f7ff ff61 	bl	8001da0 <__NVIC_GetPriorityGrouping>
 8001ede:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	68b9      	ldr	r1, [r7, #8]
 8001ee4:	6978      	ldr	r0, [r7, #20]
 8001ee6:	f7ff ffb1 	bl	8001e4c <NVIC_EncodePriority>
 8001eea:	4602      	mov	r2, r0
 8001eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ff80 	bl	8001df8 <__NVIC_SetPriority>
}
 8001ef8:	bf00      	nop
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff54 	bl	8001dbc <__NVIC_EnableIRQ>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b089      	sub	sp, #36	@ 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	e159      	b.n	80021ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f38:	2201      	movs	r2, #1
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	f040 8148 	bne.w	80021e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d005      	beq.n	8001f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d130      	bne.n	8001fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	2203      	movs	r2, #3
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 0201 	and.w	r2, r3, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d017      	beq.n	800200c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d123      	bne.n	8002060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	08da      	lsrs	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3208      	adds	r2, #8
 8002020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	220f      	movs	r2, #15
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	08da      	lsrs	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3208      	adds	r2, #8
 800205a:	69b9      	ldr	r1, [r7, #24]
 800205c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	2203      	movs	r2, #3
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0203 	and.w	r2, r3, #3
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80a2 	beq.w	80021e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b57      	ldr	r3, [pc, #348]	@ (8002204 <HAL_GPIO_Init+0x2e8>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020aa:	4a56      	ldr	r2, [pc, #344]	@ (8002204 <HAL_GPIO_Init+0x2e8>)
 80020ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020b2:	4b54      	ldr	r3, [pc, #336]	@ (8002204 <HAL_GPIO_Init+0x2e8>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020be:	4a52      	ldr	r2, [pc, #328]	@ (8002208 <HAL_GPIO_Init+0x2ec>)
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	3302      	adds	r3, #2
 80020c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	220f      	movs	r2, #15
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a49      	ldr	r2, [pc, #292]	@ (800220c <HAL_GPIO_Init+0x2f0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d019      	beq.n	800211e <HAL_GPIO_Init+0x202>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a48      	ldr	r2, [pc, #288]	@ (8002210 <HAL_GPIO_Init+0x2f4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d013      	beq.n	800211a <HAL_GPIO_Init+0x1fe>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a47      	ldr	r2, [pc, #284]	@ (8002214 <HAL_GPIO_Init+0x2f8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d00d      	beq.n	8002116 <HAL_GPIO_Init+0x1fa>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a46      	ldr	r2, [pc, #280]	@ (8002218 <HAL_GPIO_Init+0x2fc>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d007      	beq.n	8002112 <HAL_GPIO_Init+0x1f6>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a45      	ldr	r2, [pc, #276]	@ (800221c <HAL_GPIO_Init+0x300>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d101      	bne.n	800210e <HAL_GPIO_Init+0x1f2>
 800210a:	2304      	movs	r3, #4
 800210c:	e008      	b.n	8002120 <HAL_GPIO_Init+0x204>
 800210e:	2307      	movs	r3, #7
 8002110:	e006      	b.n	8002120 <HAL_GPIO_Init+0x204>
 8002112:	2303      	movs	r3, #3
 8002114:	e004      	b.n	8002120 <HAL_GPIO_Init+0x204>
 8002116:	2302      	movs	r3, #2
 8002118:	e002      	b.n	8002120 <HAL_GPIO_Init+0x204>
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <HAL_GPIO_Init+0x204>
 800211e:	2300      	movs	r3, #0
 8002120:	69fa      	ldr	r2, [r7, #28]
 8002122:	f002 0203 	and.w	r2, r2, #3
 8002126:	0092      	lsls	r2, r2, #2
 8002128:	4093      	lsls	r3, r2
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002130:	4935      	ldr	r1, [pc, #212]	@ (8002208 <HAL_GPIO_Init+0x2ec>)
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	089b      	lsrs	r3, r3, #2
 8002136:	3302      	adds	r3, #2
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800213e:	4b38      	ldr	r3, [pc, #224]	@ (8002220 <HAL_GPIO_Init+0x304>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002162:	4a2f      	ldr	r2, [pc, #188]	@ (8002220 <HAL_GPIO_Init+0x304>)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002168:	4b2d      	ldr	r3, [pc, #180]	@ (8002220 <HAL_GPIO_Init+0x304>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800218c:	4a24      	ldr	r2, [pc, #144]	@ (8002220 <HAL_GPIO_Init+0x304>)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002192:	4b23      	ldr	r3, [pc, #140]	@ (8002220 <HAL_GPIO_Init+0x304>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002220 <HAL_GPIO_Init+0x304>)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021bc:	4b18      	ldr	r3, [pc, #96]	@ (8002220 <HAL_GPIO_Init+0x304>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002220 <HAL_GPIO_Init+0x304>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3301      	adds	r3, #1
 80021ea:	61fb      	str	r3, [r7, #28]
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	2b0f      	cmp	r3, #15
 80021f0:	f67f aea2 	bls.w	8001f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop
 80021f8:	3724      	adds	r7, #36	@ 0x24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800
 8002208:	40013800 	.word	0x40013800
 800220c:	40020000 	.word	0x40020000
 8002210:	40020400 	.word	0x40020400
 8002214:	40020800 	.word	0x40020800
 8002218:	40020c00 	.word	0x40020c00
 800221c:	40021000 	.word	0x40021000
 8002220:	40013c00 	.word	0x40013c00

08002224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	887b      	ldrh	r3, [r7, #2]
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d002      	beq.n	8002242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	e001      	b.n	8002246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002246:	7bfb      	ldrb	r3, [r7, #15]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	807b      	strh	r3, [r7, #2]
 8002260:	4613      	mov	r3, r2
 8002262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002264:	787b      	ldrb	r3, [r7, #1]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800226a:	887a      	ldrh	r2, [r7, #2]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002270:	e003      	b.n	800227a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002272:	887b      	ldrh	r3, [r7, #2]
 8002274:	041a      	lsls	r2, r3, #16
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	619a      	str	r2, [r3, #24]
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002286:	b480      	push	{r7}
 8002288:	b085      	sub	sp, #20
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	460b      	mov	r3, r1
 8002290:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002298:	887a      	ldrh	r2, [r7, #2]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4013      	ands	r3, r2
 800229e:	041a      	lsls	r2, r3, #16
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	43d9      	mvns	r1, r3
 80022a4:	887b      	ldrh	r3, [r7, #2]
 80022a6:	400b      	ands	r3, r1
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	619a      	str	r2, [r3, #24]
}
 80022ae:	bf00      	nop
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
	...

080022bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e267      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d075      	beq.n	80023c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022da:	4b88      	ldr	r3, [pc, #544]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d00c      	beq.n	8002300 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e6:	4b85      	ldr	r3, [pc, #532]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d112      	bne.n	8002318 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f2:	4b82      	ldr	r3, [pc, #520]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022fe:	d10b      	bne.n	8002318 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002300:	4b7e      	ldr	r3, [pc, #504]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d05b      	beq.n	80023c4 <HAL_RCC_OscConfig+0x108>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d157      	bne.n	80023c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e242      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002320:	d106      	bne.n	8002330 <HAL_RCC_OscConfig+0x74>
 8002322:	4b76      	ldr	r3, [pc, #472]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a75      	ldr	r2, [pc, #468]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e01d      	b.n	800236c <HAL_RCC_OscConfig+0xb0>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0x98>
 800233a:	4b70      	ldr	r3, [pc, #448]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a6f      	ldr	r2, [pc, #444]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 8002340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b6d      	ldr	r3, [pc, #436]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a6c      	ldr	r2, [pc, #432]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e00b      	b.n	800236c <HAL_RCC_OscConfig+0xb0>
 8002354:	4b69      	ldr	r3, [pc, #420]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a68      	ldr	r2, [pc, #416]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 800235a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	4b66      	ldr	r3, [pc, #408]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a65      	ldr	r2, [pc, #404]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 8002366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800236a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d013      	beq.n	800239c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7ff fcc0 	bl	8001cf8 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800237c:	f7ff fcbc 	bl	8001cf8 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	@ 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e207      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	4b5b      	ldr	r3, [pc, #364]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0xc0>
 800239a:	e014      	b.n	80023c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7ff fcac 	bl	8001cf8 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a4:	f7ff fca8 	bl	8001cf8 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	@ 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e1f3      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b6:	4b51      	ldr	r3, [pc, #324]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0xe8>
 80023c2:	e000      	b.n	80023c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d063      	beq.n	800249a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023d2:	4b4a      	ldr	r3, [pc, #296]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00b      	beq.n	80023f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023de:	4b47      	ldr	r3, [pc, #284]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d11c      	bne.n	8002424 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ea:	4b44      	ldr	r3, [pc, #272]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d116      	bne.n	8002424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f6:	4b41      	ldr	r3, [pc, #260]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d005      	beq.n	800240e <HAL_RCC_OscConfig+0x152>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d001      	beq.n	800240e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e1c7      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240e:	4b3b      	ldr	r3, [pc, #236]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4937      	ldr	r1, [pc, #220]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 800241e:	4313      	orrs	r3, r2
 8002420:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002422:	e03a      	b.n	800249a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d020      	beq.n	800246e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800242c:	4b34      	ldr	r3, [pc, #208]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 800242e:	2201      	movs	r2, #1
 8002430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002432:	f7ff fc61 	bl	8001cf8 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243a:	f7ff fc5d 	bl	8001cf8 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e1a8      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244c:	4b2b      	ldr	r3, [pc, #172]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002458:	4b28      	ldr	r3, [pc, #160]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4925      	ldr	r1, [pc, #148]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 8002468:	4313      	orrs	r3, r2
 800246a:	600b      	str	r3, [r1, #0]
 800246c:	e015      	b.n	800249a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800246e:	4b24      	ldr	r3, [pc, #144]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7ff fc40 	bl	8001cf8 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247c:	f7ff fc3c 	bl	8001cf8 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e187      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248e:	4b1b      	ldr	r3, [pc, #108]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d036      	beq.n	8002514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d016      	beq.n	80024dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ae:	4b15      	ldr	r3, [pc, #84]	@ (8002504 <HAL_RCC_OscConfig+0x248>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b4:	f7ff fc20 	bl	8001cf8 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024bc:	f7ff fc1c 	bl	8001cf8 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e167      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ce:	4b0b      	ldr	r3, [pc, #44]	@ (80024fc <HAL_RCC_OscConfig+0x240>)
 80024d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x200>
 80024da:	e01b      	b.n	8002514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024dc:	4b09      	ldr	r3, [pc, #36]	@ (8002504 <HAL_RCC_OscConfig+0x248>)
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e2:	f7ff fc09 	bl	8001cf8 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e8:	e00e      	b.n	8002508 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ea:	f7ff fc05 	bl	8001cf8 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d907      	bls.n	8002508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e150      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
 80024fc:	40023800 	.word	0x40023800
 8002500:	42470000 	.word	0x42470000
 8002504:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002508:	4b88      	ldr	r3, [pc, #544]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 800250a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1ea      	bne.n	80024ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 8097 	beq.w	8002650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002522:	2300      	movs	r3, #0
 8002524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002526:	4b81      	ldr	r3, [pc, #516]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10f      	bne.n	8002552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	4b7d      	ldr	r3, [pc, #500]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	4a7c      	ldr	r2, [pc, #496]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 800253c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002540:	6413      	str	r3, [r2, #64]	@ 0x40
 8002542:	4b7a      	ldr	r3, [pc, #488]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800254e:	2301      	movs	r3, #1
 8002550:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002552:	4b77      	ldr	r3, [pc, #476]	@ (8002730 <HAL_RCC_OscConfig+0x474>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d118      	bne.n	8002590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800255e:	4b74      	ldr	r3, [pc, #464]	@ (8002730 <HAL_RCC_OscConfig+0x474>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a73      	ldr	r2, [pc, #460]	@ (8002730 <HAL_RCC_OscConfig+0x474>)
 8002564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256a:	f7ff fbc5 	bl	8001cf8 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002572:	f7ff fbc1 	bl	8001cf8 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e10c      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002584:	4b6a      	ldr	r3, [pc, #424]	@ (8002730 <HAL_RCC_OscConfig+0x474>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d106      	bne.n	80025a6 <HAL_RCC_OscConfig+0x2ea>
 8002598:	4b64      	ldr	r3, [pc, #400]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800259c:	4a63      	ldr	r2, [pc, #396]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80025a4:	e01c      	b.n	80025e0 <HAL_RCC_OscConfig+0x324>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b05      	cmp	r3, #5
 80025ac:	d10c      	bne.n	80025c8 <HAL_RCC_OscConfig+0x30c>
 80025ae:	4b5f      	ldr	r3, [pc, #380]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b2:	4a5e      	ldr	r2, [pc, #376]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 80025b4:	f043 0304 	orr.w	r3, r3, #4
 80025b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ba:	4b5c      	ldr	r3, [pc, #368]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025be:	4a5b      	ldr	r2, [pc, #364]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c6:	e00b      	b.n	80025e0 <HAL_RCC_OscConfig+0x324>
 80025c8:	4b58      	ldr	r3, [pc, #352]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025cc:	4a57      	ldr	r2, [pc, #348]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 80025ce:	f023 0301 	bic.w	r3, r3, #1
 80025d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d4:	4b55      	ldr	r3, [pc, #340]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 80025d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d8:	4a54      	ldr	r2, [pc, #336]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 80025da:	f023 0304 	bic.w	r3, r3, #4
 80025de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d015      	beq.n	8002614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7ff fb86 	bl	8001cf8 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f0:	f7ff fb82 	bl	8001cf8 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0cb      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002606:	4b49      	ldr	r3, [pc, #292]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0ee      	beq.n	80025f0 <HAL_RCC_OscConfig+0x334>
 8002612:	e014      	b.n	800263e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002614:	f7ff fb70 	bl	8001cf8 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261a:	e00a      	b.n	8002632 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261c:	f7ff fb6c 	bl	8001cf8 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e0b5      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002632:	4b3e      	ldr	r3, [pc, #248]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1ee      	bne.n	800261c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800263e:	7dfb      	ldrb	r3, [r7, #23]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d105      	bne.n	8002650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002644:	4b39      	ldr	r3, [pc, #228]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	4a38      	ldr	r2, [pc, #224]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 800264a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800264e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80a1 	beq.w	800279c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800265a:	4b34      	ldr	r3, [pc, #208]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b08      	cmp	r3, #8
 8002664:	d05c      	beq.n	8002720 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d141      	bne.n	80026f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266e:	4b31      	ldr	r3, [pc, #196]	@ (8002734 <HAL_RCC_OscConfig+0x478>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002674:	f7ff fb40 	bl	8001cf8 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267c:	f7ff fb3c 	bl	8001cf8 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e087      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268e:	4b27      	ldr	r3, [pc, #156]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69da      	ldr	r2, [r3, #28]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a8:	019b      	lsls	r3, r3, #6
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b0:	085b      	lsrs	r3, r3, #1
 80026b2:	3b01      	subs	r3, #1
 80026b4:	041b      	lsls	r3, r3, #16
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026bc:	061b      	lsls	r3, r3, #24
 80026be:	491b      	ldr	r1, [pc, #108]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002734 <HAL_RCC_OscConfig+0x478>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ca:	f7ff fb15 	bl	8001cf8 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d2:	f7ff fb11 	bl	8001cf8 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e05c      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x416>
 80026f0:	e054      	b.n	800279c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f2:	4b10      	ldr	r3, [pc, #64]	@ (8002734 <HAL_RCC_OscConfig+0x478>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7ff fafe 	bl	8001cf8 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002700:	f7ff fafa 	bl	8001cf8 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e045      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002712:	4b06      	ldr	r3, [pc, #24]	@ (800272c <HAL_RCC_OscConfig+0x470>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x444>
 800271e:	e03d      	b.n	800279c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d107      	bne.n	8002738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e038      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
 800272c:	40023800 	.word	0x40023800
 8002730:	40007000 	.word	0x40007000
 8002734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002738:	4b1b      	ldr	r3, [pc, #108]	@ (80027a8 <HAL_RCC_OscConfig+0x4ec>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d028      	beq.n	8002798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002750:	429a      	cmp	r2, r3
 8002752:	d121      	bne.n	8002798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d11a      	bne.n	8002798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002768:	4013      	ands	r3, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800276e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002770:	4293      	cmp	r3, r2
 8002772:	d111      	bne.n	8002798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277e:	085b      	lsrs	r3, r3, #1
 8002780:	3b01      	subs	r3, #1
 8002782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d107      	bne.n	8002798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800

080027ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0cc      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027c0:	4b68      	ldr	r3, [pc, #416]	@ (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d90c      	bls.n	80027e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b65      	ldr	r3, [pc, #404]	@ (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d6:	4b63      	ldr	r3, [pc, #396]	@ (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d001      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0b8      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d020      	beq.n	8002836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002800:	4b59      	ldr	r3, [pc, #356]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4a58      	ldr	r2, [pc, #352]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800280a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002818:	4b53      	ldr	r3, [pc, #332]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4a52      	ldr	r2, [pc, #328]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002824:	4b50      	ldr	r3, [pc, #320]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	494d      	ldr	r1, [pc, #308]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d044      	beq.n	80028cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d107      	bne.n	800285a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	4b47      	ldr	r3, [pc, #284]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d119      	bne.n	800288a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e07f      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d003      	beq.n	800286a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002866:	2b03      	cmp	r3, #3
 8002868:	d107      	bne.n	800287a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286a:	4b3f      	ldr	r3, [pc, #252]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e06f      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287a:	4b3b      	ldr	r3, [pc, #236]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e067      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288a:	4b37      	ldr	r3, [pc, #220]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f023 0203 	bic.w	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4934      	ldr	r1, [pc, #208]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	4313      	orrs	r3, r2
 800289a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800289c:	f7ff fa2c 	bl	8001cf8 <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a4:	f7ff fa28 	bl	8001cf8 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e04f      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 020c 	and.w	r2, r3, #12
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d1eb      	bne.n	80028a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028cc:	4b25      	ldr	r3, [pc, #148]	@ (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d20c      	bcs.n	80028f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b22      	ldr	r3, [pc, #136]	@ (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e2:	4b20      	ldr	r3, [pc, #128]	@ (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e032      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d008      	beq.n	8002912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002900:	4b19      	ldr	r3, [pc, #100]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	4916      	ldr	r1, [pc, #88]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d009      	beq.n	8002932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800291e:	4b12      	ldr	r3, [pc, #72]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	490e      	ldr	r1, [pc, #56]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	4313      	orrs	r3, r2
 8002930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002932:	f000 f821 	bl	8002978 <HAL_RCC_GetSysClockFreq>
 8002936:	4602      	mov	r2, r0
 8002938:	4b0b      	ldr	r3, [pc, #44]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	091b      	lsrs	r3, r3, #4
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	490a      	ldr	r1, [pc, #40]	@ (800296c <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	5ccb      	ldrb	r3, [r1, r3]
 8002946:	fa22 f303 	lsr.w	r3, r2, r3
 800294a:	4a09      	ldr	r2, [pc, #36]	@ (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800294e:	4b09      	ldr	r3, [pc, #36]	@ (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff f886 	bl	8001a64 <HAL_InitTick>

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40023c00 	.word	0x40023c00
 8002968:	40023800 	.word	0x40023800
 800296c:	08006bb8 	.word	0x08006bb8
 8002970:	20000018 	.word	0x20000018
 8002974:	2000001c 	.word	0x2000001c

08002978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800297c:	b090      	sub	sp, #64	@ 0x40
 800297e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002990:	4b59      	ldr	r3, [pc, #356]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b08      	cmp	r3, #8
 800299a:	d00d      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x40>
 800299c:	2b08      	cmp	r3, #8
 800299e:	f200 80a1 	bhi.w	8002ae4 <HAL_RCC_GetSysClockFreq+0x16c>
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <HAL_RCC_GetSysClockFreq+0x34>
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d003      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80029aa:	e09b      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b53      	ldr	r3, [pc, #332]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x184>)
 80029ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029b0:	e09b      	b.n	8002aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b2:	4b53      	ldr	r3, [pc, #332]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80029b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029b6:	e098      	b.n	8002aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b8:	4b4f      	ldr	r3, [pc, #316]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c2:	4b4d      	ldr	r3, [pc, #308]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d028      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b4a      	ldr	r3, [pc, #296]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	2200      	movs	r2, #0
 80029d6:	623b      	str	r3, [r7, #32]
 80029d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029e0:	2100      	movs	r1, #0
 80029e2:	4b47      	ldr	r3, [pc, #284]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80029e4:	fb03 f201 	mul.w	r2, r3, r1
 80029e8:	2300      	movs	r3, #0
 80029ea:	fb00 f303 	mul.w	r3, r0, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	4a43      	ldr	r2, [pc, #268]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80029f2:	fba0 1202 	umull	r1, r2, r0, r2
 80029f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029f8:	460a      	mov	r2, r1
 80029fa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80029fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029fe:	4413      	add	r3, r2
 8002a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a04:	2200      	movs	r2, #0
 8002a06:	61bb      	str	r3, [r7, #24]
 8002a08:	61fa      	str	r2, [r7, #28]
 8002a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a12:	f7fd fc35 	bl	8000280 <__aeabi_uldivmod>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a1e:	e053      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a20:	4b35      	ldr	r3, [pc, #212]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	099b      	lsrs	r3, r3, #6
 8002a26:	2200      	movs	r2, #0
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	617a      	str	r2, [r7, #20]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a32:	f04f 0b00 	mov.w	fp, #0
 8002a36:	4652      	mov	r2, sl
 8002a38:	465b      	mov	r3, fp
 8002a3a:	f04f 0000 	mov.w	r0, #0
 8002a3e:	f04f 0100 	mov.w	r1, #0
 8002a42:	0159      	lsls	r1, r3, #5
 8002a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a48:	0150      	lsls	r0, r2, #5
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	ebb2 080a 	subs.w	r8, r2, sl
 8002a52:	eb63 090b 	sbc.w	r9, r3, fp
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a6a:	ebb2 0408 	subs.w	r4, r2, r8
 8002a6e:	eb63 0509 	sbc.w	r5, r3, r9
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	00eb      	lsls	r3, r5, #3
 8002a7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a80:	00e2      	lsls	r2, r4, #3
 8002a82:	4614      	mov	r4, r2
 8002a84:	461d      	mov	r5, r3
 8002a86:	eb14 030a 	adds.w	r3, r4, sl
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	eb45 030b 	adc.w	r3, r5, fp
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	028b      	lsls	r3, r1, #10
 8002aa2:	4621      	mov	r1, r4
 8002aa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002aa8:	4621      	mov	r1, r4
 8002aaa:	028a      	lsls	r2, r1, #10
 8002aac:	4610      	mov	r0, r2
 8002aae:	4619      	mov	r1, r3
 8002ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	60fa      	str	r2, [r7, #12]
 8002ab8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002abc:	f7fd fbe0 	bl	8000280 <__aeabi_uldivmod>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	0c1b      	lsrs	r3, r3, #16
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002ad8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ae2:	e002      	b.n	8002aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ae4:	4b05      	ldr	r3, [pc, #20]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x184>)
 8002ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3740      	adds	r7, #64	@ 0x40
 8002af0:	46bd      	mov	sp, r7
 8002af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800
 8002afc:	00f42400 	.word	0x00f42400
 8002b00:	017d7840 	.word	0x017d7840

08002b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b08:	4b03      	ldr	r3, [pc, #12]	@ (8002b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	20000018 	.word	0x20000018

08002b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b20:	f7ff fff0 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4b05      	ldr	r3, [pc, #20]	@ (8002b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	0a9b      	lsrs	r3, r3, #10
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	4903      	ldr	r1, [pc, #12]	@ (8002b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b32:	5ccb      	ldrb	r3, [r1, r3]
 8002b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	08006bc8 	.word	0x08006bc8

08002b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b48:	f7ff ffdc 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4b05      	ldr	r3, [pc, #20]	@ (8002b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	0b5b      	lsrs	r3, r3, #13
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	4903      	ldr	r1, [pc, #12]	@ (8002b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b5a:	5ccb      	ldrb	r3, [r1, r3]
 8002b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40023800 	.word	0x40023800
 8002b68:	08006bc8 	.word	0x08006bc8

08002b6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	220f      	movs	r2, #15
 8002b7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b7c:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 0203 	and.w	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b88:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b94:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ba0:	4b09      	ldr	r3, [pc, #36]	@ (8002bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	08db      	lsrs	r3, r3, #3
 8002ba6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bae:	4b07      	ldr	r3, [pc, #28]	@ (8002bcc <HAL_RCC_GetClockConfig+0x60>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0207 	and.w	r2, r3, #7
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	601a      	str	r2, [r3, #0]
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40023c00 	.word	0x40023c00

08002bd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e07b      	b.n	8002cda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d108      	bne.n	8002bfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bf2:	d009      	beq.n	8002c08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	61da      	str	r2, [r3, #28]
 8002bfa:	e005      	b.n	8002c08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fe fdd8 	bl	80017d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8c:	ea42 0103 	orr.w	r1, r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c94:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	f003 0104 	and.w	r1, r3, #4
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cae:	f003 0210 	and.w	r2, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69da      	ldr	r2, [r3, #28]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b088      	sub	sp, #32
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	603b      	str	r3, [r7, #0]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cf2:	f7ff f801 	bl	8001cf8 <HAL_GetTick>
 8002cf6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002cf8:	88fb      	ldrh	r3, [r7, #6]
 8002cfa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d001      	beq.n	8002d0c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e12a      	b.n	8002f62 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_SPI_Transmit+0x36>
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e122      	b.n	8002f62 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_SPI_Transmit+0x48>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e11b      	b.n	8002f62 <HAL_SPI_Transmit+0x280>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2203      	movs	r2, #3
 8002d36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	88fa      	ldrh	r2, [r7, #6]
 8002d4a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	88fa      	ldrh	r2, [r7, #6]
 8002d50:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d78:	d10f      	bne.n	8002d9a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da4:	2b40      	cmp	r3, #64	@ 0x40
 8002da6:	d007      	beq.n	8002db8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002db6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dc0:	d152      	bne.n	8002e68 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_SPI_Transmit+0xee>
 8002dca:	8b7b      	ldrh	r3, [r7, #26]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d145      	bne.n	8002e5c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd4:	881a      	ldrh	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de0:	1c9a      	adds	r2, r3, #2
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002df4:	e032      	b.n	8002e5c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d112      	bne.n	8002e2a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e08:	881a      	ldrh	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e14:	1c9a      	adds	r2, r3, #2
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e28:	e018      	b.n	8002e5c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e2a:	f7fe ff65 	bl	8001cf8 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d803      	bhi.n	8002e42 <HAL_SPI_Transmit+0x160>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e40:	d102      	bne.n	8002e48 <HAL_SPI_Transmit+0x166>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d109      	bne.n	8002e5c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e082      	b.n	8002f62 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1c7      	bne.n	8002df6 <HAL_SPI_Transmit+0x114>
 8002e66:	e053      	b.n	8002f10 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <HAL_SPI_Transmit+0x194>
 8002e70:	8b7b      	ldrh	r3, [r7, #26]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d147      	bne.n	8002f06 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	330c      	adds	r3, #12
 8002e80:	7812      	ldrb	r2, [r2, #0]
 8002e82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e9c:	e033      	b.n	8002f06 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d113      	bne.n	8002ed4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	330c      	adds	r3, #12
 8002eb6:	7812      	ldrb	r2, [r2, #0]
 8002eb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ed2:	e018      	b.n	8002f06 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ed4:	f7fe ff10 	bl	8001cf8 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d803      	bhi.n	8002eec <HAL_SPI_Transmit+0x20a>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eea:	d102      	bne.n	8002ef2 <HAL_SPI_Transmit+0x210>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e02d      	b.n	8002f62 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1c6      	bne.n	8002e9e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f10:	69fa      	ldr	r2, [r7, #28]
 8002f12:	6839      	ldr	r1, [r7, #0]
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 fbd9 	bl	80036cc <SPI_EndRxTxTransaction>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10a      	bne.n	8002f44 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002f60:	2300      	movs	r3, #0
  }
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3720      	adds	r7, #32
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b088      	sub	sp, #32
 8002f6e:	af02      	add	r7, sp, #8
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	603b      	str	r3, [r7, #0]
 8002f76:	4613      	mov	r3, r2
 8002f78:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d001      	beq.n	8002f8a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
 8002f88:	e104      	b.n	8003194 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <HAL_SPI_Receive+0x2c>
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e0fc      	b.n	8003194 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fa2:	d112      	bne.n	8002fca <HAL_SPI_Receive+0x60>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10e      	bne.n	8002fca <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2204      	movs	r2, #4
 8002fb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002fb4:	88fa      	ldrh	r2, [r7, #6]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f8eb 	bl	800319c <HAL_SPI_TransmitReceive>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	e0e4      	b.n	8003194 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fca:	f7fe fe95 	bl	8001cf8 <HAL_GetTick>
 8002fce:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_SPI_Receive+0x74>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e0da      	b.n	8003194 <HAL_SPI_Receive+0x22a>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2204      	movs	r2, #4
 8002fea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	88fa      	ldrh	r2, [r7, #6]
 8002ffe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	88fa      	ldrh	r2, [r7, #6]
 8003004:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800302c:	d10f      	bne.n	800304e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800303c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800304c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003058:	2b40      	cmp	r3, #64	@ 0x40
 800305a:	d007      	beq.n	800306c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800306a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d170      	bne.n	8003156 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003074:	e035      	b.n	80030e2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b01      	cmp	r3, #1
 8003082:	d115      	bne.n	80030b0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f103 020c 	add.w	r2, r3, #12
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003090:	7812      	ldrb	r2, [r2, #0]
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030ae:	e018      	b.n	80030e2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030b0:	f7fe fe22 	bl	8001cf8 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d803      	bhi.n	80030c8 <HAL_SPI_Receive+0x15e>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c6:	d102      	bne.n	80030ce <HAL_SPI_Receive+0x164>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e058      	b.n	8003194 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1c4      	bne.n	8003076 <HAL_SPI_Receive+0x10c>
 80030ec:	e038      	b.n	8003160 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d113      	bne.n	8003124 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003106:	b292      	uxth	r2, r2
 8003108:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310e:	1c9a      	adds	r2, r3, #2
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003122:	e018      	b.n	8003156 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003124:	f7fe fde8 	bl	8001cf8 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d803      	bhi.n	800313c <HAL_SPI_Receive+0x1d2>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313a:	d102      	bne.n	8003142 <HAL_SPI_Receive+0x1d8>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e01e      	b.n	8003194 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1c6      	bne.n	80030ee <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	6839      	ldr	r1, [r7, #0]
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 fa4b 	bl	8003600 <SPI_EndRxTransaction>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003192:	2300      	movs	r3, #0
  }
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	@ 0x28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031aa:	2301      	movs	r3, #1
 80031ac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031ae:	f7fe fda3 	bl	8001cf8 <HAL_GetTick>
 80031b2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031ba:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80031c2:	887b      	ldrh	r3, [r7, #2]
 80031c4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031c6:	7ffb      	ldrb	r3, [r7, #31]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d00c      	beq.n	80031e6 <HAL_SPI_TransmitReceive+0x4a>
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031d2:	d106      	bne.n	80031e2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d102      	bne.n	80031e2 <HAL_SPI_TransmitReceive+0x46>
 80031dc:	7ffb      	ldrb	r3, [r7, #31]
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d001      	beq.n	80031e6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80031e2:	2302      	movs	r3, #2
 80031e4:	e17f      	b.n	80034e6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_SPI_TransmitReceive+0x5c>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <HAL_SPI_TransmitReceive+0x5c>
 80031f2:	887b      	ldrh	r3, [r7, #2]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e174      	b.n	80034e6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_SPI_TransmitReceive+0x6e>
 8003206:	2302      	movs	r3, #2
 8003208:	e16d      	b.n	80034e6 <HAL_SPI_TransmitReceive+0x34a>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b04      	cmp	r3, #4
 800321c:	d003      	beq.n	8003226 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2205      	movs	r2, #5
 8003222:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	887a      	ldrh	r2, [r7, #2]
 8003236:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	887a      	ldrh	r2, [r7, #2]
 800323c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	887a      	ldrh	r2, [r7, #2]
 800324e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003266:	2b40      	cmp	r3, #64	@ 0x40
 8003268:	d007      	beq.n	800327a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003278:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003282:	d17e      	bne.n	8003382 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <HAL_SPI_TransmitReceive+0xf6>
 800328c:	8afb      	ldrh	r3, [r7, #22]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d16c      	bne.n	800336c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	881a      	ldrh	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	1c9a      	adds	r2, r3, #2
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b6:	e059      	b.n	800336c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d11b      	bne.n	80032fe <HAL_SPI_TransmitReceive+0x162>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d016      	beq.n	80032fe <HAL_SPI_TransmitReceive+0x162>
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d113      	bne.n	80032fe <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	881a      	ldrh	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e6:	1c9a      	adds	r2, r3, #2
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d119      	bne.n	8003340 <HAL_SPI_TransmitReceive+0x1a4>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d014      	beq.n	8003340 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003320:	b292      	uxth	r2, r2
 8003322:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003328:	1c9a      	adds	r2, r3, #2
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800333c:	2301      	movs	r3, #1
 800333e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003340:	f7fe fcda 	bl	8001cf8 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800334c:	429a      	cmp	r2, r3
 800334e:	d80d      	bhi.n	800336c <HAL_SPI_TransmitReceive+0x1d0>
 8003350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003356:	d009      	beq.n	800336c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e0bc      	b.n	80034e6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1a0      	bne.n	80032b8 <HAL_SPI_TransmitReceive+0x11c>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d19b      	bne.n	80032b8 <HAL_SPI_TransmitReceive+0x11c>
 8003380:	e082      	b.n	8003488 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_SPI_TransmitReceive+0x1f4>
 800338a:	8afb      	ldrh	r3, [r7, #22]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d171      	bne.n	8003474 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	330c      	adds	r3, #12
 800339a:	7812      	ldrb	r2, [r2, #0]
 800339c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033b6:	e05d      	b.n	8003474 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d11c      	bne.n	8003400 <HAL_SPI_TransmitReceive+0x264>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d017      	beq.n	8003400 <HAL_SPI_TransmitReceive+0x264>
 80033d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d114      	bne.n	8003400 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	330c      	adds	r3, #12
 80033e0:	7812      	ldrb	r2, [r2, #0]
 80033e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b01      	cmp	r3, #1
 800340c:	d119      	bne.n	8003442 <HAL_SPI_TransmitReceive+0x2a6>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d014      	beq.n	8003442 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800343e:	2301      	movs	r3, #1
 8003440:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003442:	f7fe fc59 	bl	8001cf8 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800344e:	429a      	cmp	r2, r3
 8003450:	d803      	bhi.n	800345a <HAL_SPI_TransmitReceive+0x2be>
 8003452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d102      	bne.n	8003460 <HAL_SPI_TransmitReceive+0x2c4>
 800345a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345c:	2b00      	cmp	r3, #0
 800345e:	d109      	bne.n	8003474 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e038      	b.n	80034e6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d19c      	bne.n	80033b8 <HAL_SPI_TransmitReceive+0x21c>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d197      	bne.n	80033b8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003488:	6a3a      	ldr	r2, [r7, #32]
 800348a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f91d 	bl	80036cc <SPI_EndRxTxTransaction>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e01d      	b.n	80034e6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10a      	bne.n	80034c8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80034e4:	2300      	movs	r3, #0
  }
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3728      	adds	r7, #40	@ 0x28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	4613      	mov	r3, r2
 80034fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003500:	f7fe fbfa 	bl	8001cf8 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	4413      	add	r3, r2
 800350e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003510:	f7fe fbf2 	bl	8001cf8 <HAL_GetTick>
 8003514:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003516:	4b39      	ldr	r3, [pc, #228]	@ (80035fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	015b      	lsls	r3, r3, #5
 800351c:	0d1b      	lsrs	r3, r3, #20
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	fb02 f303 	mul.w	r3, r2, r3
 8003524:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003526:	e055      	b.n	80035d4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352e:	d051      	beq.n	80035d4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003530:	f7fe fbe2 	bl	8001cf8 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	429a      	cmp	r2, r3
 800353e:	d902      	bls.n	8003546 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d13d      	bne.n	80035c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003554:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800355e:	d111      	bne.n	8003584 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003568:	d004      	beq.n	8003574 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003572:	d107      	bne.n	8003584 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003582:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003588:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800358c:	d10f      	bne.n	80035ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e018      	b.n	80035f4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d102      	bne.n	80035ce <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61fb      	str	r3, [r7, #28]
 80035cc:	e002      	b.n	80035d4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	4013      	ands	r3, r2
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	bf0c      	ite	eq
 80035e4:	2301      	moveq	r3, #1
 80035e6:	2300      	movne	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	461a      	mov	r2, r3
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d19a      	bne.n	8003528 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3720      	adds	r7, #32
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20000018 	.word	0x20000018

08003600 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af02      	add	r7, sp, #8
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003614:	d111      	bne.n	800363a <SPI_EndRxTransaction+0x3a>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800361e:	d004      	beq.n	800362a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003628:	d107      	bne.n	800363a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003638:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003642:	d12a      	bne.n	800369a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800364c:	d012      	beq.n	8003674 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2200      	movs	r2, #0
 8003656:	2180      	movs	r1, #128	@ 0x80
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f7ff ff49 	bl	80034f0 <SPI_WaitFlagStateUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d02d      	beq.n	80036c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003668:	f043 0220 	orr.w	r2, r3, #32
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e026      	b.n	80036c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2200      	movs	r2, #0
 800367c:	2101      	movs	r1, #1
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f7ff ff36 	bl	80034f0 <SPI_WaitFlagStateUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d01a      	beq.n	80036c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368e:	f043 0220 	orr.w	r2, r3, #32
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e013      	b.n	80036c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2200      	movs	r2, #0
 80036a2:	2101      	movs	r1, #1
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f7ff ff23 	bl	80034f0 <SPI_WaitFlagStateUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b4:	f043 0220 	orr.w	r2, r3, #32
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e000      	b.n	80036c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2201      	movs	r2, #1
 80036e0:	2102      	movs	r1, #2
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f7ff ff04 	bl	80034f0 <SPI_WaitFlagStateUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f2:	f043 0220 	orr.w	r2, r3, #32
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e032      	b.n	8003764 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80036fe:	4b1b      	ldr	r3, [pc, #108]	@ (800376c <SPI_EndRxTxTransaction+0xa0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1b      	ldr	r2, [pc, #108]	@ (8003770 <SPI_EndRxTxTransaction+0xa4>)
 8003704:	fba2 2303 	umull	r2, r3, r2, r3
 8003708:	0d5b      	lsrs	r3, r3, #21
 800370a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800371c:	d112      	bne.n	8003744 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2200      	movs	r2, #0
 8003726:	2180      	movs	r1, #128	@ 0x80
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f7ff fee1 	bl	80034f0 <SPI_WaitFlagStateUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d016      	beq.n	8003762 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003738:	f043 0220 	orr.w	r2, r3, #32
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e00f      	b.n	8003764 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	3b01      	subs	r3, #1
 800374e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800375a:	2b80      	cmp	r3, #128	@ 0x80
 800375c:	d0f2      	beq.n	8003744 <SPI_EndRxTxTransaction+0x78>
 800375e:	e000      	b.n	8003762 <SPI_EndRxTxTransaction+0x96>
        break;
 8003760:	bf00      	nop
  }

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20000018 	.word	0x20000018
 8003770:	165e9f81 	.word	0x165e9f81

08003774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e041      	b.n	800380a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fe f8ba 	bl	8001914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4619      	mov	r1, r3
 80037b2:	4610      	mov	r0, r2
 80037b4:	f000 fc32 	bl	800401c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d001      	beq.n	800382c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e044      	b.n	80038b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1e      	ldr	r2, [pc, #120]	@ (80038c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d018      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x6c>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003856:	d013      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x6c>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a1a      	ldr	r2, [pc, #104]	@ (80038c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00e      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x6c>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a19      	ldr	r2, [pc, #100]	@ (80038cc <HAL_TIM_Base_Start_IT+0xb8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d009      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x6c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a17      	ldr	r2, [pc, #92]	@ (80038d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d004      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x6c>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a16      	ldr	r2, [pc, #88]	@ (80038d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d111      	bne.n	80038a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b06      	cmp	r3, #6
 8003890:	d010      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0201 	orr.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a2:	e007      	b.n	80038b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40010000 	.word	0x40010000
 80038c8:	40000400 	.word	0x40000400
 80038cc:	40000800 	.word	0x40000800
 80038d0:	40000c00 	.word	0x40000c00
 80038d4:	40014000 	.word	0x40014000

080038d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e041      	b.n	800396e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fd ffe8 	bl	80018d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3304      	adds	r3, #4
 8003914:	4619      	mov	r1, r3
 8003916:	4610      	mov	r0, r2
 8003918:	f000 fb80 	bl	800401c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d109      	bne.n	800399c <HAL_TIM_PWM_Start+0x24>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	bf14      	ite	ne
 8003994:	2301      	movne	r3, #1
 8003996:	2300      	moveq	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	e022      	b.n	80039e2 <HAL_TIM_PWM_Start+0x6a>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d109      	bne.n	80039b6 <HAL_TIM_PWM_Start+0x3e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	bf14      	ite	ne
 80039ae:	2301      	movne	r3, #1
 80039b0:	2300      	moveq	r3, #0
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	e015      	b.n	80039e2 <HAL_TIM_PWM_Start+0x6a>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d109      	bne.n	80039d0 <HAL_TIM_PWM_Start+0x58>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	bf14      	ite	ne
 80039c8:	2301      	movne	r3, #1
 80039ca:	2300      	moveq	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	e008      	b.n	80039e2 <HAL_TIM_PWM_Start+0x6a>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	bf14      	ite	ne
 80039dc:	2301      	movne	r3, #1
 80039de:	2300      	moveq	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e068      	b.n	8003abc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d104      	bne.n	80039fa <HAL_TIM_PWM_Start+0x82>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039f8:	e013      	b.n	8003a22 <HAL_TIM_PWM_Start+0xaa>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d104      	bne.n	8003a0a <HAL_TIM_PWM_Start+0x92>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a08:	e00b      	b.n	8003a22 <HAL_TIM_PWM_Start+0xaa>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d104      	bne.n	8003a1a <HAL_TIM_PWM_Start+0xa2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a18:	e003      	b.n	8003a22 <HAL_TIM_PWM_Start+0xaa>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2201      	movs	r2, #1
 8003a28:	6839      	ldr	r1, [r7, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fda2 	bl	8004574 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a23      	ldr	r2, [pc, #140]	@ (8003ac4 <HAL_TIM_PWM_Start+0x14c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d107      	bne.n	8003a4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac4 <HAL_TIM_PWM_Start+0x14c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d018      	beq.n	8003a86 <HAL_TIM_PWM_Start+0x10e>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a5c:	d013      	beq.n	8003a86 <HAL_TIM_PWM_Start+0x10e>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a19      	ldr	r2, [pc, #100]	@ (8003ac8 <HAL_TIM_PWM_Start+0x150>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00e      	beq.n	8003a86 <HAL_TIM_PWM_Start+0x10e>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a17      	ldr	r2, [pc, #92]	@ (8003acc <HAL_TIM_PWM_Start+0x154>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d009      	beq.n	8003a86 <HAL_TIM_PWM_Start+0x10e>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a16      	ldr	r2, [pc, #88]	@ (8003ad0 <HAL_TIM_PWM_Start+0x158>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d004      	beq.n	8003a86 <HAL_TIM_PWM_Start+0x10e>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a14      	ldr	r2, [pc, #80]	@ (8003ad4 <HAL_TIM_PWM_Start+0x15c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d111      	bne.n	8003aaa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b06      	cmp	r3, #6
 8003a96:	d010      	beq.n	8003aba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa8:	e007      	b.n	8003aba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f042 0201 	orr.w	r2, r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40010000 	.word	0x40010000
 8003ac8:	40000400 	.word	0x40000400
 8003acc:	40000800 	.word	0x40000800
 8003ad0:	40000c00 	.word	0x40000c00
 8003ad4:	40014000 	.word	0x40014000

08003ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d020      	beq.n	8003b3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d01b      	beq.n	8003b3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0202 	mvn.w	r2, #2
 8003b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fa5b 	bl	8003fde <HAL_TIM_IC_CaptureCallback>
 8003b28:	e005      	b.n	8003b36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fa4d 	bl	8003fca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 fa5e 	bl	8003ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d020      	beq.n	8003b88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d01b      	beq.n	8003b88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0204 	mvn.w	r2, #4
 8003b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fa35 	bl	8003fde <HAL_TIM_IC_CaptureCallback>
 8003b74:	e005      	b.n	8003b82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fa27 	bl	8003fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fa38 	bl	8003ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d020      	beq.n	8003bd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d01b      	beq.n	8003bd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0208 	mvn.w	r2, #8
 8003ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2204      	movs	r2, #4
 8003baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fa0f 	bl	8003fde <HAL_TIM_IC_CaptureCallback>
 8003bc0:	e005      	b.n	8003bce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fa01 	bl	8003fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fa12 	bl	8003ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d020      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01b      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f06f 0210 	mvn.w	r2, #16
 8003bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2208      	movs	r2, #8
 8003bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f9e9 	bl	8003fde <HAL_TIM_IC_CaptureCallback>
 8003c0c:	e005      	b.n	8003c1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f9db 	bl	8003fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f9ec 	bl	8003ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00c      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0201 	mvn.w	r2, #1
 8003c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fd fb5a 	bl	80012f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00c      	beq.n	8003c68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fd24 	bl	80046b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00c      	beq.n	8003c8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f9bd 	bl	8004006 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00c      	beq.n	8003cb0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d007      	beq.n	8003cb0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f06f 0220 	mvn.w	r2, #32
 8003ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fcf6 	bl	800469c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cb0:	bf00      	nop
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e0ae      	b.n	8003e34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b0c      	cmp	r3, #12
 8003ce2:	f200 809f 	bhi.w	8003e24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8003cec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cec:	08003d21 	.word	0x08003d21
 8003cf0:	08003e25 	.word	0x08003e25
 8003cf4:	08003e25 	.word	0x08003e25
 8003cf8:	08003e25 	.word	0x08003e25
 8003cfc:	08003d61 	.word	0x08003d61
 8003d00:	08003e25 	.word	0x08003e25
 8003d04:	08003e25 	.word	0x08003e25
 8003d08:	08003e25 	.word	0x08003e25
 8003d0c:	08003da3 	.word	0x08003da3
 8003d10:	08003e25 	.word	0x08003e25
 8003d14:	08003e25 	.word	0x08003e25
 8003d18:	08003e25 	.word	0x08003e25
 8003d1c:	08003de3 	.word	0x08003de3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f9fe 	bl	8004128 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0208 	orr.w	r2, r2, #8
 8003d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0204 	bic.w	r2, r2, #4
 8003d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6999      	ldr	r1, [r3, #24]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	619a      	str	r2, [r3, #24]
      break;
 8003d5e:	e064      	b.n	8003e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68b9      	ldr	r1, [r7, #8]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fa44 	bl	80041f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6999      	ldr	r1, [r3, #24]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	021a      	lsls	r2, r3, #8
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	619a      	str	r2, [r3, #24]
      break;
 8003da0:	e043      	b.n	8003e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fa8f 	bl	80042cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69da      	ldr	r2, [r3, #28]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0208 	orr.w	r2, r2, #8
 8003dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0204 	bic.w	r2, r2, #4
 8003dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69d9      	ldr	r1, [r3, #28]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	61da      	str	r2, [r3, #28]
      break;
 8003de0:	e023      	b.n	8003e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fad9 	bl	80043a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69da      	ldr	r2, [r3, #28]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	69d9      	ldr	r1, [r3, #28]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	021a      	lsls	r2, r3, #8
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	61da      	str	r2, [r3, #28]
      break;
 8003e22:	e002      	b.n	8003e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	75fb      	strb	r3, [r7, #23]
      break;
 8003e28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_TIM_ConfigClockSource+0x1c>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e0b4      	b.n	8003fc2 <HAL_TIM_ConfigClockSource+0x186>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e90:	d03e      	beq.n	8003f10 <HAL_TIM_ConfigClockSource+0xd4>
 8003e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e96:	f200 8087 	bhi.w	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e9e:	f000 8086 	beq.w	8003fae <HAL_TIM_ConfigClockSource+0x172>
 8003ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea6:	d87f      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea8:	2b70      	cmp	r3, #112	@ 0x70
 8003eaa:	d01a      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0xa6>
 8003eac:	2b70      	cmp	r3, #112	@ 0x70
 8003eae:	d87b      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb0:	2b60      	cmp	r3, #96	@ 0x60
 8003eb2:	d050      	beq.n	8003f56 <HAL_TIM_ConfigClockSource+0x11a>
 8003eb4:	2b60      	cmp	r3, #96	@ 0x60
 8003eb6:	d877      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb8:	2b50      	cmp	r3, #80	@ 0x50
 8003eba:	d03c      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0xfa>
 8003ebc:	2b50      	cmp	r3, #80	@ 0x50
 8003ebe:	d873      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec0:	2b40      	cmp	r3, #64	@ 0x40
 8003ec2:	d058      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x13a>
 8003ec4:	2b40      	cmp	r3, #64	@ 0x40
 8003ec6:	d86f      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec8:	2b30      	cmp	r3, #48	@ 0x30
 8003eca:	d064      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0x15a>
 8003ecc:	2b30      	cmp	r3, #48	@ 0x30
 8003ece:	d86b      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d060      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0x15a>
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d867      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d05c      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0x15a>
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	d05a      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0x15a>
 8003ee0:	e062      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ef2:	f000 fb1f 	bl	8004534 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	609a      	str	r2, [r3, #8]
      break;
 8003f0e:	e04f      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f20:	f000 fb08 	bl	8004534 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f32:	609a      	str	r2, [r3, #8]
      break;
 8003f34:	e03c      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f42:	461a      	mov	r2, r3
 8003f44:	f000 fa7c 	bl	8004440 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2150      	movs	r1, #80	@ 0x50
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fad5 	bl	80044fe <TIM_ITRx_SetConfig>
      break;
 8003f54:	e02c      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f62:	461a      	mov	r2, r3
 8003f64:	f000 fa9b 	bl	800449e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2160      	movs	r1, #96	@ 0x60
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fac5 	bl	80044fe <TIM_ITRx_SetConfig>
      break;
 8003f74:	e01c      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f82:	461a      	mov	r2, r3
 8003f84:	f000 fa5c 	bl	8004440 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2140      	movs	r1, #64	@ 0x40
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fab5 	bl	80044fe <TIM_ITRx_SetConfig>
      break;
 8003f94:	e00c      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	f000 faac 	bl	80044fe <TIM_ITRx_SetConfig>
      break;
 8003fa6:	e003      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	73fb      	strb	r3, [r7, #15]
      break;
 8003fac:	e000      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
	...

0800401c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a37      	ldr	r2, [pc, #220]	@ (800410c <TIM_Base_SetConfig+0xf0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00f      	beq.n	8004054 <TIM_Base_SetConfig+0x38>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800403a:	d00b      	beq.n	8004054 <TIM_Base_SetConfig+0x38>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a34      	ldr	r2, [pc, #208]	@ (8004110 <TIM_Base_SetConfig+0xf4>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d007      	beq.n	8004054 <TIM_Base_SetConfig+0x38>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a33      	ldr	r2, [pc, #204]	@ (8004114 <TIM_Base_SetConfig+0xf8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d003      	beq.n	8004054 <TIM_Base_SetConfig+0x38>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a32      	ldr	r2, [pc, #200]	@ (8004118 <TIM_Base_SetConfig+0xfc>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d108      	bne.n	8004066 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800405a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a28      	ldr	r2, [pc, #160]	@ (800410c <TIM_Base_SetConfig+0xf0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01b      	beq.n	80040a6 <TIM_Base_SetConfig+0x8a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004074:	d017      	beq.n	80040a6 <TIM_Base_SetConfig+0x8a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a25      	ldr	r2, [pc, #148]	@ (8004110 <TIM_Base_SetConfig+0xf4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d013      	beq.n	80040a6 <TIM_Base_SetConfig+0x8a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a24      	ldr	r2, [pc, #144]	@ (8004114 <TIM_Base_SetConfig+0xf8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00f      	beq.n	80040a6 <TIM_Base_SetConfig+0x8a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a23      	ldr	r2, [pc, #140]	@ (8004118 <TIM_Base_SetConfig+0xfc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00b      	beq.n	80040a6 <TIM_Base_SetConfig+0x8a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a22      	ldr	r2, [pc, #136]	@ (800411c <TIM_Base_SetConfig+0x100>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d007      	beq.n	80040a6 <TIM_Base_SetConfig+0x8a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a21      	ldr	r2, [pc, #132]	@ (8004120 <TIM_Base_SetConfig+0x104>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d003      	beq.n	80040a6 <TIM_Base_SetConfig+0x8a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a20      	ldr	r2, [pc, #128]	@ (8004124 <TIM_Base_SetConfig+0x108>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d108      	bne.n	80040b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a0c      	ldr	r2, [pc, #48]	@ (800410c <TIM_Base_SetConfig+0xf0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d103      	bne.n	80040e6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	691a      	ldr	r2, [r3, #16]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f043 0204 	orr.w	r2, r3, #4
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	601a      	str	r2, [r3, #0]
}
 80040fe:	bf00      	nop
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40010000 	.word	0x40010000
 8004110:	40000400 	.word	0x40000400
 8004114:	40000800 	.word	0x40000800
 8004118:	40000c00 	.word	0x40000c00
 800411c:	40014000 	.word	0x40014000
 8004120:	40014400 	.word	0x40014400
 8004124:	40014800 	.word	0x40014800

08004128 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f023 0201 	bic.w	r2, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0303 	bic.w	r3, r3, #3
 800415e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f023 0302 	bic.w	r3, r3, #2
 8004170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a1c      	ldr	r2, [pc, #112]	@ (80041f0 <TIM_OC1_SetConfig+0xc8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d10c      	bne.n	800419e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f023 0308 	bic.w	r3, r3, #8
 800418a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f023 0304 	bic.w	r3, r3, #4
 800419c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a13      	ldr	r2, [pc, #76]	@ (80041f0 <TIM_OC1_SetConfig+0xc8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d111      	bne.n	80041ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	621a      	str	r2, [r3, #32]
}
 80041e4:	bf00      	nop
 80041e6:	371c      	adds	r7, #28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	40010000 	.word	0x40010000

080041f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	f023 0210 	bic.w	r2, r3, #16
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800422a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4313      	orrs	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f023 0320 	bic.w	r3, r3, #32
 800423e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a1e      	ldr	r2, [pc, #120]	@ (80042c8 <TIM_OC2_SetConfig+0xd4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d10d      	bne.n	8004270 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800425a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800426e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a15      	ldr	r2, [pc, #84]	@ (80042c8 <TIM_OC2_SetConfig+0xd4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d113      	bne.n	80042a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800427e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004286:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40010000 	.word	0x40010000

080042cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0303 	bic.w	r3, r3, #3
 8004302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a1d      	ldr	r2, [pc, #116]	@ (800439c <TIM_OC3_SetConfig+0xd0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d10d      	bne.n	8004346 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004330:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	021b      	lsls	r3, r3, #8
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	4313      	orrs	r3, r2
 800433c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a14      	ldr	r2, [pc, #80]	@ (800439c <TIM_OC3_SetConfig+0xd0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d113      	bne.n	8004376 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800435c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	621a      	str	r2, [r3, #32]
}
 8004390:	bf00      	nop
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	40010000 	.word	0x40010000

080043a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	021b      	lsls	r3, r3, #8
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	031b      	lsls	r3, r3, #12
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a10      	ldr	r2, [pc, #64]	@ (800443c <TIM_OC4_SetConfig+0x9c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d109      	bne.n	8004414 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004406:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	019b      	lsls	r3, r3, #6
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	621a      	str	r2, [r3, #32]
}
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40010000 	.word	0x40010000

08004440 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	f023 0201 	bic.w	r2, r3, #1
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800446a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f023 030a 	bic.w	r3, r3, #10
 800447c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	621a      	str	r2, [r3, #32]
}
 8004492:	bf00      	nop
 8004494:	371c      	adds	r7, #28
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800449e:	b480      	push	{r7}
 80044a0:	b087      	sub	sp, #28
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	f023 0210 	bic.w	r2, r3, #16
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	031b      	lsls	r3, r3, #12
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	621a      	str	r2, [r3, #32]
}
 80044f2:	bf00      	nop
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044fe:	b480      	push	{r7}
 8004500:	b085      	sub	sp, #20
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004514:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	f043 0307 	orr.w	r3, r3, #7
 8004520:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	609a      	str	r2, [r3, #8]
}
 8004528:	bf00      	nop
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800454e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	021a      	lsls	r2, r3, #8
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	431a      	orrs	r2, r3
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	4313      	orrs	r3, r2
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	609a      	str	r2, [r3, #8]
}
 8004568:	bf00      	nop
 800456a:	371c      	adds	r7, #28
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f003 031f 	and.w	r3, r3, #31
 8004586:	2201      	movs	r2, #1
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a1a      	ldr	r2, [r3, #32]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	43db      	mvns	r3, r3
 8004596:	401a      	ands	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a1a      	ldr	r2, [r3, #32]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ac:	431a      	orrs	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	621a      	str	r2, [r3, #32]
}
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
	...

080045c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e050      	b.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a1c      	ldr	r2, [pc, #112]	@ (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d018      	beq.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004624:	d013      	beq.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a18      	ldr	r2, [pc, #96]	@ (800468c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00e      	beq.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a16      	ldr	r2, [pc, #88]	@ (8004690 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d009      	beq.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a15      	ldr	r2, [pc, #84]	@ (8004694 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d004      	beq.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a13      	ldr	r2, [pc, #76]	@ (8004698 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d10c      	bne.n	8004668 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004654:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	4313      	orrs	r3, r2
 800465e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40010000 	.word	0x40010000
 800468c:	40000400 	.word	0x40000400
 8004690:	40000800 	.word	0x40000800
 8004694:	40000c00 	.word	0x40000c00
 8004698:	40014000 	.word	0x40014000

0800469c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e042      	b.n	800475c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fd f972 	bl	80019d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2224      	movs	r2, #36	@ 0x24
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004706:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f82b 	bl	8004764 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800471c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695a      	ldr	r2, [r3, #20]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800472c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800473c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004768:	b0c0      	sub	sp, #256	@ 0x100
 800476a:	af00      	add	r7, sp, #0
 800476c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004780:	68d9      	ldr	r1, [r3, #12]
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	ea40 0301 	orr.w	r3, r0, r1
 800478c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	431a      	orrs	r2, r3
 800479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80047bc:	f021 010c 	bic.w	r1, r1, #12
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047ca:	430b      	orrs	r3, r1
 80047cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80047da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047de:	6999      	ldr	r1, [r3, #24]
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	ea40 0301 	orr.w	r3, r0, r1
 80047ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	4b8f      	ldr	r3, [pc, #572]	@ (8004a30 <UART_SetConfig+0x2cc>)
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d005      	beq.n	8004804 <UART_SetConfig+0xa0>
 80047f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	4b8d      	ldr	r3, [pc, #564]	@ (8004a34 <UART_SetConfig+0x2d0>)
 8004800:	429a      	cmp	r2, r3
 8004802:	d104      	bne.n	800480e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004804:	f7fe f99e 	bl	8002b44 <HAL_RCC_GetPCLK2Freq>
 8004808:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800480c:	e003      	b.n	8004816 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800480e:	f7fe f985 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8004812:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004820:	f040 810c 	bne.w	8004a3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004828:	2200      	movs	r2, #0
 800482a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800482e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004832:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004836:	4622      	mov	r2, r4
 8004838:	462b      	mov	r3, r5
 800483a:	1891      	adds	r1, r2, r2
 800483c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800483e:	415b      	adcs	r3, r3
 8004840:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004842:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004846:	4621      	mov	r1, r4
 8004848:	eb12 0801 	adds.w	r8, r2, r1
 800484c:	4629      	mov	r1, r5
 800484e:	eb43 0901 	adc.w	r9, r3, r1
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	f04f 0300 	mov.w	r3, #0
 800485a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800485e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004866:	4690      	mov	r8, r2
 8004868:	4699      	mov	r9, r3
 800486a:	4623      	mov	r3, r4
 800486c:	eb18 0303 	adds.w	r3, r8, r3
 8004870:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004874:	462b      	mov	r3, r5
 8004876:	eb49 0303 	adc.w	r3, r9, r3
 800487a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800487e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800488a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800488e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004892:	460b      	mov	r3, r1
 8004894:	18db      	adds	r3, r3, r3
 8004896:	653b      	str	r3, [r7, #80]	@ 0x50
 8004898:	4613      	mov	r3, r2
 800489a:	eb42 0303 	adc.w	r3, r2, r3
 800489e:	657b      	str	r3, [r7, #84]	@ 0x54
 80048a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80048a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80048a8:	f7fb fcea 	bl	8000280 <__aeabi_uldivmod>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4b61      	ldr	r3, [pc, #388]	@ (8004a38 <UART_SetConfig+0x2d4>)
 80048b2:	fba3 2302 	umull	r2, r3, r3, r2
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	011c      	lsls	r4, r3, #4
 80048ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048be:	2200      	movs	r2, #0
 80048c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80048c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80048cc:	4642      	mov	r2, r8
 80048ce:	464b      	mov	r3, r9
 80048d0:	1891      	adds	r1, r2, r2
 80048d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80048d4:	415b      	adcs	r3, r3
 80048d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80048dc:	4641      	mov	r1, r8
 80048de:	eb12 0a01 	adds.w	sl, r2, r1
 80048e2:	4649      	mov	r1, r9
 80048e4:	eb43 0b01 	adc.w	fp, r3, r1
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048fc:	4692      	mov	sl, r2
 80048fe:	469b      	mov	fp, r3
 8004900:	4643      	mov	r3, r8
 8004902:	eb1a 0303 	adds.w	r3, sl, r3
 8004906:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800490a:	464b      	mov	r3, r9
 800490c:	eb4b 0303 	adc.w	r3, fp, r3
 8004910:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004920:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004924:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004928:	460b      	mov	r3, r1
 800492a:	18db      	adds	r3, r3, r3
 800492c:	643b      	str	r3, [r7, #64]	@ 0x40
 800492e:	4613      	mov	r3, r2
 8004930:	eb42 0303 	adc.w	r3, r2, r3
 8004934:	647b      	str	r3, [r7, #68]	@ 0x44
 8004936:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800493a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800493e:	f7fb fc9f 	bl	8000280 <__aeabi_uldivmod>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4611      	mov	r1, r2
 8004948:	4b3b      	ldr	r3, [pc, #236]	@ (8004a38 <UART_SetConfig+0x2d4>)
 800494a:	fba3 2301 	umull	r2, r3, r3, r1
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	2264      	movs	r2, #100	@ 0x64
 8004952:	fb02 f303 	mul.w	r3, r2, r3
 8004956:	1acb      	subs	r3, r1, r3
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800495e:	4b36      	ldr	r3, [pc, #216]	@ (8004a38 <UART_SetConfig+0x2d4>)
 8004960:	fba3 2302 	umull	r2, r3, r3, r2
 8004964:	095b      	lsrs	r3, r3, #5
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800496c:	441c      	add	r4, r3
 800496e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004972:	2200      	movs	r2, #0
 8004974:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004978:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800497c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004980:	4642      	mov	r2, r8
 8004982:	464b      	mov	r3, r9
 8004984:	1891      	adds	r1, r2, r2
 8004986:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004988:	415b      	adcs	r3, r3
 800498a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800498c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004990:	4641      	mov	r1, r8
 8004992:	1851      	adds	r1, r2, r1
 8004994:	6339      	str	r1, [r7, #48]	@ 0x30
 8004996:	4649      	mov	r1, r9
 8004998:	414b      	adcs	r3, r1
 800499a:	637b      	str	r3, [r7, #52]	@ 0x34
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80049a8:	4659      	mov	r1, fp
 80049aa:	00cb      	lsls	r3, r1, #3
 80049ac:	4651      	mov	r1, sl
 80049ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049b2:	4651      	mov	r1, sl
 80049b4:	00ca      	lsls	r2, r1, #3
 80049b6:	4610      	mov	r0, r2
 80049b8:	4619      	mov	r1, r3
 80049ba:	4603      	mov	r3, r0
 80049bc:	4642      	mov	r2, r8
 80049be:	189b      	adds	r3, r3, r2
 80049c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049c4:	464b      	mov	r3, r9
 80049c6:	460a      	mov	r2, r1
 80049c8:	eb42 0303 	adc.w	r3, r2, r3
 80049cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80049dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80049e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80049e4:	460b      	mov	r3, r1
 80049e6:	18db      	adds	r3, r3, r3
 80049e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049ea:	4613      	mov	r3, r2
 80049ec:	eb42 0303 	adc.w	r3, r2, r3
 80049f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80049fa:	f7fb fc41 	bl	8000280 <__aeabi_uldivmod>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4b0d      	ldr	r3, [pc, #52]	@ (8004a38 <UART_SetConfig+0x2d4>)
 8004a04:	fba3 1302 	umull	r1, r3, r3, r2
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	2164      	movs	r1, #100	@ 0x64
 8004a0c:	fb01 f303 	mul.w	r3, r1, r3
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	3332      	adds	r3, #50	@ 0x32
 8004a16:	4a08      	ldr	r2, [pc, #32]	@ (8004a38 <UART_SetConfig+0x2d4>)
 8004a18:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	f003 0207 	and.w	r2, r3, #7
 8004a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4422      	add	r2, r4
 8004a2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a2c:	e106      	b.n	8004c3c <UART_SetConfig+0x4d8>
 8004a2e:	bf00      	nop
 8004a30:	40011000 	.word	0x40011000
 8004a34:	40011400 	.word	0x40011400
 8004a38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a40:	2200      	movs	r2, #0
 8004a42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a4e:	4642      	mov	r2, r8
 8004a50:	464b      	mov	r3, r9
 8004a52:	1891      	adds	r1, r2, r2
 8004a54:	6239      	str	r1, [r7, #32]
 8004a56:	415b      	adcs	r3, r3
 8004a58:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a5e:	4641      	mov	r1, r8
 8004a60:	1854      	adds	r4, r2, r1
 8004a62:	4649      	mov	r1, r9
 8004a64:	eb43 0501 	adc.w	r5, r3, r1
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	00eb      	lsls	r3, r5, #3
 8004a72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a76:	00e2      	lsls	r2, r4, #3
 8004a78:	4614      	mov	r4, r2
 8004a7a:	461d      	mov	r5, r3
 8004a7c:	4643      	mov	r3, r8
 8004a7e:	18e3      	adds	r3, r4, r3
 8004a80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a84:	464b      	mov	r3, r9
 8004a86:	eb45 0303 	adc.w	r3, r5, r3
 8004a8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004aaa:	4629      	mov	r1, r5
 8004aac:	008b      	lsls	r3, r1, #2
 8004aae:	4621      	mov	r1, r4
 8004ab0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	008a      	lsls	r2, r1, #2
 8004ab8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004abc:	f7fb fbe0 	bl	8000280 <__aeabi_uldivmod>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4b60      	ldr	r3, [pc, #384]	@ (8004c48 <UART_SetConfig+0x4e4>)
 8004ac6:	fba3 2302 	umull	r2, r3, r3, r2
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	011c      	lsls	r4, r3, #4
 8004ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ad8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004adc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ae0:	4642      	mov	r2, r8
 8004ae2:	464b      	mov	r3, r9
 8004ae4:	1891      	adds	r1, r2, r2
 8004ae6:	61b9      	str	r1, [r7, #24]
 8004ae8:	415b      	adcs	r3, r3
 8004aea:	61fb      	str	r3, [r7, #28]
 8004aec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004af0:	4641      	mov	r1, r8
 8004af2:	1851      	adds	r1, r2, r1
 8004af4:	6139      	str	r1, [r7, #16]
 8004af6:	4649      	mov	r1, r9
 8004af8:	414b      	adcs	r3, r1
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b08:	4659      	mov	r1, fp
 8004b0a:	00cb      	lsls	r3, r1, #3
 8004b0c:	4651      	mov	r1, sl
 8004b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b12:	4651      	mov	r1, sl
 8004b14:	00ca      	lsls	r2, r1, #3
 8004b16:	4610      	mov	r0, r2
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	4642      	mov	r2, r8
 8004b1e:	189b      	adds	r3, r3, r2
 8004b20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b24:	464b      	mov	r3, r9
 8004b26:	460a      	mov	r2, r1
 8004b28:	eb42 0303 	adc.w	r3, r2, r3
 8004b2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b48:	4649      	mov	r1, r9
 8004b4a:	008b      	lsls	r3, r1, #2
 8004b4c:	4641      	mov	r1, r8
 8004b4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b52:	4641      	mov	r1, r8
 8004b54:	008a      	lsls	r2, r1, #2
 8004b56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b5a:	f7fb fb91 	bl	8000280 <__aeabi_uldivmod>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	4611      	mov	r1, r2
 8004b64:	4b38      	ldr	r3, [pc, #224]	@ (8004c48 <UART_SetConfig+0x4e4>)
 8004b66:	fba3 2301 	umull	r2, r3, r3, r1
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	2264      	movs	r2, #100	@ 0x64
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
 8004b72:	1acb      	subs	r3, r1, r3
 8004b74:	011b      	lsls	r3, r3, #4
 8004b76:	3332      	adds	r3, #50	@ 0x32
 8004b78:	4a33      	ldr	r2, [pc, #204]	@ (8004c48 <UART_SetConfig+0x4e4>)
 8004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b84:	441c      	add	r4, r3
 8004b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b94:	4642      	mov	r2, r8
 8004b96:	464b      	mov	r3, r9
 8004b98:	1891      	adds	r1, r2, r2
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	415b      	adcs	r3, r3
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ba4:	4641      	mov	r1, r8
 8004ba6:	1851      	adds	r1, r2, r1
 8004ba8:	6039      	str	r1, [r7, #0]
 8004baa:	4649      	mov	r1, r9
 8004bac:	414b      	adcs	r3, r1
 8004bae:	607b      	str	r3, [r7, #4]
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bbc:	4659      	mov	r1, fp
 8004bbe:	00cb      	lsls	r3, r1, #3
 8004bc0:	4651      	mov	r1, sl
 8004bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bc6:	4651      	mov	r1, sl
 8004bc8:	00ca      	lsls	r2, r1, #3
 8004bca:	4610      	mov	r0, r2
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4642      	mov	r2, r8
 8004bd2:	189b      	adds	r3, r3, r2
 8004bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bd6:	464b      	mov	r3, r9
 8004bd8:	460a      	mov	r2, r1
 8004bda:	eb42 0303 	adc.w	r3, r2, r3
 8004bde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bea:	667a      	str	r2, [r7, #100]	@ 0x64
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004bf8:	4649      	mov	r1, r9
 8004bfa:	008b      	lsls	r3, r1, #2
 8004bfc:	4641      	mov	r1, r8
 8004bfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c02:	4641      	mov	r1, r8
 8004c04:	008a      	lsls	r2, r1, #2
 8004c06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c0a:	f7fb fb39 	bl	8000280 <__aeabi_uldivmod>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	4b0d      	ldr	r3, [pc, #52]	@ (8004c48 <UART_SetConfig+0x4e4>)
 8004c14:	fba3 1302 	umull	r1, r3, r3, r2
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	2164      	movs	r1, #100	@ 0x64
 8004c1c:	fb01 f303 	mul.w	r3, r1, r3
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	3332      	adds	r3, #50	@ 0x32
 8004c26:	4a08      	ldr	r2, [pc, #32]	@ (8004c48 <UART_SetConfig+0x4e4>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	f003 020f 	and.w	r2, r3, #15
 8004c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4422      	add	r2, r4
 8004c3a:	609a      	str	r2, [r3, #8]
}
 8004c3c:	bf00      	nop
 8004c3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c42:	46bd      	mov	sp, r7
 8004c44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c48:	51eb851f 	.word	0x51eb851f

08004c4c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c5e:	2b84      	cmp	r3, #132	@ 0x84
 8004c60:	d005      	beq.n	8004c6e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004c62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4413      	add	r3, r2
 8004c6a:	3303      	adds	r3, #3
 8004c6c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004c80:	f000 fafc 	bl	800527c <vTaskStartScheduler>
  
  return osOK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c8c:	b089      	sub	sp, #36	@ 0x24
 8004c8e:	af04      	add	r7, sp, #16
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d020      	beq.n	8004cde <osThreadCreate+0x54>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d01c      	beq.n	8004cde <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685c      	ldr	r4, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691e      	ldr	r6, [r3, #16]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff ffc8 	bl	8004c4c <makeFreeRtosPriority>
 8004cbc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cc6:	9202      	str	r2, [sp, #8]
 8004cc8:	9301      	str	r3, [sp, #4]
 8004cca:	9100      	str	r1, [sp, #0]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	4632      	mov	r2, r6
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	f000 f8ed 	bl	8004eb2 <xTaskCreateStatic>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	e01c      	b.n	8004d18 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685c      	ldr	r4, [r3, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cea:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff ffaa 	bl	8004c4c <makeFreeRtosPriority>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	f107 030c 	add.w	r3, r7, #12
 8004cfe:	9301      	str	r3, [sp, #4]
 8004d00:	9200      	str	r2, [sp, #0]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	4632      	mov	r2, r6
 8004d06:	4629      	mov	r1, r5
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f000 f932 	bl	8004f72 <xTaskCreate>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d001      	beq.n	8004d18 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	e000      	b.n	8004d1a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004d18:	68fb      	ldr	r3, [r7, #12]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d22 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <osDelay+0x16>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	e000      	b.n	8004d3a <osDelay+0x18>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fa68 	bl	8005210 <vTaskDelay>
  
  return osOK;
 8004d40:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f103 0208 	add.w	r2, r3, #8
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d62:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f103 0208 	add.w	r2, r3, #8
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f103 0208 	add.w	r2, r3, #8
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	601a      	str	r2, [r3, #0]
}
 8004de0:	bf00      	nop
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e02:	d103      	bne.n	8004e0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	e00c      	b.n	8004e26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3308      	adds	r3, #8
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	e002      	b.n	8004e1a <vListInsert+0x2e>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d2f6      	bcs.n	8004e14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	601a      	str	r2, [r3, #0]
}
 8004e52:	bf00      	nop
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b085      	sub	sp, #20
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6892      	ldr	r2, [r2, #8]
 8004e74:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6852      	ldr	r2, [r2, #4]
 8004e7e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d103      	bne.n	8004e92 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	1e5a      	subs	r2, r3, #1
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b08e      	sub	sp, #56	@ 0x38
 8004eb6:	af04      	add	r7, sp, #16
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	607a      	str	r2, [r7, #4]
 8004ebe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10b      	bne.n	8004ede <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ed8:	bf00      	nop
 8004eda:	bf00      	nop
 8004edc:	e7fd      	b.n	8004eda <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10b      	bne.n	8004efc <xTaskCreateStatic+0x4a>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	61fb      	str	r3, [r7, #28]
}
 8004ef6:	bf00      	nop
 8004ef8:	bf00      	nop
 8004efa:	e7fd      	b.n	8004ef8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004efc:	23a0      	movs	r3, #160	@ 0xa0
 8004efe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	2ba0      	cmp	r3, #160	@ 0xa0
 8004f04:	d00b      	beq.n	8004f1e <xTaskCreateStatic+0x6c>
	__asm volatile
 8004f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	61bb      	str	r3, [r7, #24]
}
 8004f18:	bf00      	nop
 8004f1a:	bf00      	nop
 8004f1c:	e7fd      	b.n	8004f1a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f1e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d01e      	beq.n	8004f64 <xTaskCreateStatic+0xb2>
 8004f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01b      	beq.n	8004f64 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f2e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f34:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f38:	2202      	movs	r2, #2
 8004f3a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f3e:	2300      	movs	r3, #0
 8004f40:	9303      	str	r3, [sp, #12]
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	9302      	str	r3, [sp, #8]
 8004f46:	f107 0314 	add.w	r3, r7, #20
 8004f4a:	9301      	str	r3, [sp, #4]
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 f850 	bl	8004ffc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f5e:	f000 f8ed 	bl	800513c <prvAddNewTaskToReadyList>
 8004f62:	e001      	b.n	8004f68 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f68:	697b      	ldr	r3, [r7, #20]
	}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3728      	adds	r7, #40	@ 0x28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b08c      	sub	sp, #48	@ 0x30
 8004f76:	af04      	add	r7, sp, #16
 8004f78:	60f8      	str	r0, [r7, #12]
 8004f7a:	60b9      	str	r1, [r7, #8]
 8004f7c:	603b      	str	r3, [r7, #0]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f82:	88fb      	ldrh	r3, [r7, #6]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 fefe 	bl	8005d88 <pvPortMalloc>
 8004f8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00e      	beq.n	8004fb2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f94:	20a0      	movs	r0, #160	@ 0xa0
 8004f96:	f000 fef7 	bl	8005d88 <pvPortMalloc>
 8004f9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fa8:	e005      	b.n	8004fb6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004faa:	6978      	ldr	r0, [r7, #20]
 8004fac:	f000 ffba 	bl	8005f24 <vPortFree>
 8004fb0:	e001      	b.n	8004fb6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d017      	beq.n	8004fec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004fc4:	88fa      	ldrh	r2, [r7, #6]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	9303      	str	r3, [sp, #12]
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	9302      	str	r3, [sp, #8]
 8004fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd0:	9301      	str	r3, [sp, #4]
 8004fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 f80e 	bl	8004ffc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fe0:	69f8      	ldr	r0, [r7, #28]
 8004fe2:	f000 f8ab 	bl	800513c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	61bb      	str	r3, [r7, #24]
 8004fea:	e002      	b.n	8004ff2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004fec:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ff2:	69bb      	ldr	r3, [r7, #24]
	}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800500a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005014:	3b01      	subs	r3, #1
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	f023 0307 	bic.w	r3, r3, #7
 8005022:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00b      	beq.n	8005046 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	617b      	str	r3, [r7, #20]
}
 8005040:	bf00      	nop
 8005042:	bf00      	nop
 8005044:	e7fd      	b.n	8005042 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01f      	beq.n	800508c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800504c:	2300      	movs	r3, #0
 800504e:	61fb      	str	r3, [r7, #28]
 8005050:	e012      	b.n	8005078 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	4413      	add	r3, r2
 8005058:	7819      	ldrb	r1, [r3, #0]
 800505a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	4413      	add	r3, r2
 8005060:	3334      	adds	r3, #52	@ 0x34
 8005062:	460a      	mov	r2, r1
 8005064:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	4413      	add	r3, r2
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d006      	beq.n	8005080 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	3301      	adds	r3, #1
 8005076:	61fb      	str	r3, [r7, #28]
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	2b0f      	cmp	r3, #15
 800507c:	d9e9      	bls.n	8005052 <prvInitialiseNewTask+0x56>
 800507e:	e000      	b.n	8005082 <prvInitialiseNewTask+0x86>
			{
				break;
 8005080:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800508a:	e003      	b.n	8005094 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800508c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005096:	2b06      	cmp	r3, #6
 8005098:	d901      	bls.n	800509e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800509a:	2306      	movs	r3, #6
 800509c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800509e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050a8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80050aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ac:	2200      	movs	r2, #0
 80050ae:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b2:	3304      	adds	r3, #4
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff fe68 	bl	8004d8a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050bc:	3318      	adds	r3, #24
 80050be:	4618      	mov	r0, r3
 80050c0:	f7ff fe63 	bl	8004d8a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050cc:	f1c3 0207 	rsb	r2, r3, #7
 80050d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050d8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050dc:	2200      	movs	r2, #0
 80050de:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80050ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ec:	334c      	adds	r3, #76	@ 0x4c
 80050ee:	224c      	movs	r2, #76	@ 0x4c
 80050f0:	2100      	movs	r1, #0
 80050f2:	4618      	mov	r0, r3
 80050f4:	f001 f858 	bl	80061a8 <memset>
 80050f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005130 <prvInitialiseNewTask+0x134>)
 80050fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80050fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005100:	4a0c      	ldr	r2, [pc, #48]	@ (8005134 <prvInitialiseNewTask+0x138>)
 8005102:	655a      	str	r2, [r3, #84]	@ 0x54
 8005104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005106:	4a0c      	ldr	r2, [pc, #48]	@ (8005138 <prvInitialiseNewTask+0x13c>)
 8005108:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	68f9      	ldr	r1, [r7, #12]
 800510e:	69b8      	ldr	r0, [r7, #24]
 8005110:	f000 fc2a 	bl	8005968 <pxPortInitialiseStack>
 8005114:	4602      	mov	r2, r0
 8005116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005118:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800511a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005126:	bf00      	nop
 8005128:	3720      	adds	r7, #32
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20004544 	.word	0x20004544
 8005134:	200045ac 	.word	0x200045ac
 8005138:	20004614 	.word	0x20004614

0800513c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005144:	f000 fd40 	bl	8005bc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005148:	4b2a      	ldr	r3, [pc, #168]	@ (80051f4 <prvAddNewTaskToReadyList+0xb8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3301      	adds	r3, #1
 800514e:	4a29      	ldr	r2, [pc, #164]	@ (80051f4 <prvAddNewTaskToReadyList+0xb8>)
 8005150:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005152:	4b29      	ldr	r3, [pc, #164]	@ (80051f8 <prvAddNewTaskToReadyList+0xbc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800515a:	4a27      	ldr	r2, [pc, #156]	@ (80051f8 <prvAddNewTaskToReadyList+0xbc>)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005160:	4b24      	ldr	r3, [pc, #144]	@ (80051f4 <prvAddNewTaskToReadyList+0xb8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d110      	bne.n	800518a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005168:	f000 fad4 	bl	8005714 <prvInitialiseTaskLists>
 800516c:	e00d      	b.n	800518a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800516e:	4b23      	ldr	r3, [pc, #140]	@ (80051fc <prvAddNewTaskToReadyList+0xc0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d109      	bne.n	800518a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005176:	4b20      	ldr	r3, [pc, #128]	@ (80051f8 <prvAddNewTaskToReadyList+0xbc>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005180:	429a      	cmp	r2, r3
 8005182:	d802      	bhi.n	800518a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005184:	4a1c      	ldr	r2, [pc, #112]	@ (80051f8 <prvAddNewTaskToReadyList+0xbc>)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800518a:	4b1d      	ldr	r3, [pc, #116]	@ (8005200 <prvAddNewTaskToReadyList+0xc4>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3301      	adds	r3, #1
 8005190:	4a1b      	ldr	r2, [pc, #108]	@ (8005200 <prvAddNewTaskToReadyList+0xc4>)
 8005192:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005198:	2201      	movs	r2, #1
 800519a:	409a      	lsls	r2, r3
 800519c:	4b19      	ldr	r3, [pc, #100]	@ (8005204 <prvAddNewTaskToReadyList+0xc8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	4a18      	ldr	r2, [pc, #96]	@ (8005204 <prvAddNewTaskToReadyList+0xc8>)
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051aa:	4613      	mov	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4a15      	ldr	r2, [pc, #84]	@ (8005208 <prvAddNewTaskToReadyList+0xcc>)
 80051b4:	441a      	add	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	3304      	adds	r3, #4
 80051ba:	4619      	mov	r1, r3
 80051bc:	4610      	mov	r0, r2
 80051be:	f7ff fdf1 	bl	8004da4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051c2:	f000 fd33 	bl	8005c2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051c6:	4b0d      	ldr	r3, [pc, #52]	@ (80051fc <prvAddNewTaskToReadyList+0xc0>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00e      	beq.n	80051ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051ce:	4b0a      	ldr	r3, [pc, #40]	@ (80051f8 <prvAddNewTaskToReadyList+0xbc>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d8:	429a      	cmp	r2, r3
 80051da:	d207      	bcs.n	80051ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051dc:	4b0b      	ldr	r3, [pc, #44]	@ (800520c <prvAddNewTaskToReadyList+0xd0>)
 80051de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051ec:	bf00      	nop
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	200008f0 	.word	0x200008f0
 80051f8:	200007f0 	.word	0x200007f0
 80051fc:	200008fc 	.word	0x200008fc
 8005200:	2000090c 	.word	0x2000090c
 8005204:	200008f8 	.word	0x200008f8
 8005208:	200007f4 	.word	0x200007f4
 800520c:	e000ed04 	.word	0xe000ed04

08005210 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d018      	beq.n	8005254 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005222:	4b14      	ldr	r3, [pc, #80]	@ (8005274 <vTaskDelay+0x64>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00b      	beq.n	8005242 <vTaskDelay+0x32>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	60bb      	str	r3, [r7, #8]
}
 800523c:	bf00      	nop
 800523e:	bf00      	nop
 8005240:	e7fd      	b.n	800523e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005242:	f000 f885 	bl	8005350 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005246:	2100      	movs	r1, #0
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fb27 	bl	800589c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800524e:	f000 f88d 	bl	800536c <xTaskResumeAll>
 8005252:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d107      	bne.n	800526a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800525a:	4b07      	ldr	r3, [pc, #28]	@ (8005278 <vTaskDelay+0x68>)
 800525c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800526a:	bf00      	nop
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20000918 	.word	0x20000918
 8005278:	e000ed04 	.word	0xe000ed04

0800527c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08a      	sub	sp, #40	@ 0x28
 8005280:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005282:	2300      	movs	r3, #0
 8005284:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005286:	2300      	movs	r3, #0
 8005288:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800528a:	463a      	mov	r2, r7
 800528c:	1d39      	adds	r1, r7, #4
 800528e:	f107 0308 	add.w	r3, r7, #8
 8005292:	4618      	mov	r0, r3
 8005294:	f7fb fb7e 	bl	8000994 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005298:	6839      	ldr	r1, [r7, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	9202      	str	r2, [sp, #8]
 80052a0:	9301      	str	r3, [sp, #4]
 80052a2:	2300      	movs	r3, #0
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	2300      	movs	r3, #0
 80052a8:	460a      	mov	r2, r1
 80052aa:	4921      	ldr	r1, [pc, #132]	@ (8005330 <vTaskStartScheduler+0xb4>)
 80052ac:	4821      	ldr	r0, [pc, #132]	@ (8005334 <vTaskStartScheduler+0xb8>)
 80052ae:	f7ff fe00 	bl	8004eb2 <xTaskCreateStatic>
 80052b2:	4603      	mov	r3, r0
 80052b4:	4a20      	ldr	r2, [pc, #128]	@ (8005338 <vTaskStartScheduler+0xbc>)
 80052b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005338 <vTaskStartScheduler+0xbc>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052c0:	2301      	movs	r3, #1
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	e001      	b.n	80052ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d11b      	bne.n	8005308 <vTaskStartScheduler+0x8c>
	__asm volatile
 80052d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	613b      	str	r3, [r7, #16]
}
 80052e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80052e4:	4b15      	ldr	r3, [pc, #84]	@ (800533c <vTaskStartScheduler+0xc0>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	334c      	adds	r3, #76	@ 0x4c
 80052ea:	4a15      	ldr	r2, [pc, #84]	@ (8005340 <vTaskStartScheduler+0xc4>)
 80052ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80052ee:	4b15      	ldr	r3, [pc, #84]	@ (8005344 <vTaskStartScheduler+0xc8>)
 80052f0:	f04f 32ff 	mov.w	r2, #4294967295
 80052f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80052f6:	4b14      	ldr	r3, [pc, #80]	@ (8005348 <vTaskStartScheduler+0xcc>)
 80052f8:	2201      	movs	r2, #1
 80052fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80052fc:	4b13      	ldr	r3, [pc, #76]	@ (800534c <vTaskStartScheduler+0xd0>)
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005302:	f000 fbbd 	bl	8005a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005306:	e00f      	b.n	8005328 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530e:	d10b      	bne.n	8005328 <vTaskStartScheduler+0xac>
	__asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	60fb      	str	r3, [r7, #12]
}
 8005322:	bf00      	nop
 8005324:	bf00      	nop
 8005326:	e7fd      	b.n	8005324 <vTaskStartScheduler+0xa8>
}
 8005328:	bf00      	nop
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	08006bb0 	.word	0x08006bb0
 8005334:	080056e5 	.word	0x080056e5
 8005338:	20000914 	.word	0x20000914
 800533c:	200007f0 	.word	0x200007f0
 8005340:	20000028 	.word	0x20000028
 8005344:	20000910 	.word	0x20000910
 8005348:	200008fc 	.word	0x200008fc
 800534c:	200008f4 	.word	0x200008f4

08005350 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005354:	4b04      	ldr	r3, [pc, #16]	@ (8005368 <vTaskSuspendAll+0x18>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3301      	adds	r3, #1
 800535a:	4a03      	ldr	r2, [pc, #12]	@ (8005368 <vTaskSuspendAll+0x18>)
 800535c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800535e:	bf00      	nop
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	20000918 	.word	0x20000918

0800536c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005376:	2300      	movs	r3, #0
 8005378:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800537a:	4b42      	ldr	r3, [pc, #264]	@ (8005484 <xTaskResumeAll+0x118>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10b      	bne.n	800539a <xTaskResumeAll+0x2e>
	__asm volatile
 8005382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	603b      	str	r3, [r7, #0]
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop
 8005398:	e7fd      	b.n	8005396 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800539a:	f000 fc15 	bl	8005bc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800539e:	4b39      	ldr	r3, [pc, #228]	@ (8005484 <xTaskResumeAll+0x118>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	4a37      	ldr	r2, [pc, #220]	@ (8005484 <xTaskResumeAll+0x118>)
 80053a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053a8:	4b36      	ldr	r3, [pc, #216]	@ (8005484 <xTaskResumeAll+0x118>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d161      	bne.n	8005474 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053b0:	4b35      	ldr	r3, [pc, #212]	@ (8005488 <xTaskResumeAll+0x11c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d05d      	beq.n	8005474 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053b8:	e02e      	b.n	8005418 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053ba:	4b34      	ldr	r3, [pc, #208]	@ (800548c <xTaskResumeAll+0x120>)
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3318      	adds	r3, #24
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff fd49 	bl	8004e5e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff fd44 	bl	8004e5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053da:	2201      	movs	r2, #1
 80053dc:	409a      	lsls	r2, r3
 80053de:	4b2c      	ldr	r3, [pc, #176]	@ (8005490 <xTaskResumeAll+0x124>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	4a2a      	ldr	r2, [pc, #168]	@ (8005490 <xTaskResumeAll+0x124>)
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4a27      	ldr	r2, [pc, #156]	@ (8005494 <xTaskResumeAll+0x128>)
 80053f6:	441a      	add	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	3304      	adds	r3, #4
 80053fc:	4619      	mov	r1, r3
 80053fe:	4610      	mov	r0, r2
 8005400:	f7ff fcd0 	bl	8004da4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005408:	4b23      	ldr	r3, [pc, #140]	@ (8005498 <xTaskResumeAll+0x12c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540e:	429a      	cmp	r2, r3
 8005410:	d302      	bcc.n	8005418 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005412:	4b22      	ldr	r3, [pc, #136]	@ (800549c <xTaskResumeAll+0x130>)
 8005414:	2201      	movs	r2, #1
 8005416:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005418:	4b1c      	ldr	r3, [pc, #112]	@ (800548c <xTaskResumeAll+0x120>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1cc      	bne.n	80053ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005426:	f000 fa19 	bl	800585c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800542a:	4b1d      	ldr	r3, [pc, #116]	@ (80054a0 <xTaskResumeAll+0x134>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d010      	beq.n	8005458 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005436:	f000 f837 	bl	80054a8 <xTaskIncrementTick>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d002      	beq.n	8005446 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005440:	4b16      	ldr	r3, [pc, #88]	@ (800549c <xTaskResumeAll+0x130>)
 8005442:	2201      	movs	r2, #1
 8005444:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3b01      	subs	r3, #1
 800544a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f1      	bne.n	8005436 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005452:	4b13      	ldr	r3, [pc, #76]	@ (80054a0 <xTaskResumeAll+0x134>)
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005458:	4b10      	ldr	r3, [pc, #64]	@ (800549c <xTaskResumeAll+0x130>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d009      	beq.n	8005474 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005460:	2301      	movs	r3, #1
 8005462:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005464:	4b0f      	ldr	r3, [pc, #60]	@ (80054a4 <xTaskResumeAll+0x138>)
 8005466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005474:	f000 fbda 	bl	8005c2c <vPortExitCritical>

	return xAlreadyYielded;
 8005478:	68bb      	ldr	r3, [r7, #8]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20000918 	.word	0x20000918
 8005488:	200008f0 	.word	0x200008f0
 800548c:	200008b0 	.word	0x200008b0
 8005490:	200008f8 	.word	0x200008f8
 8005494:	200007f4 	.word	0x200007f4
 8005498:	200007f0 	.word	0x200007f0
 800549c:	20000904 	.word	0x20000904
 80054a0:	20000900 	.word	0x20000900
 80054a4:	e000ed04 	.word	0xe000ed04

080054a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054ae:	2300      	movs	r3, #0
 80054b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054b2:	4b4f      	ldr	r3, [pc, #316]	@ (80055f0 <xTaskIncrementTick+0x148>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f040 808f 	bne.w	80055da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054bc:	4b4d      	ldr	r3, [pc, #308]	@ (80055f4 <xTaskIncrementTick+0x14c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3301      	adds	r3, #1
 80054c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054c4:	4a4b      	ldr	r2, [pc, #300]	@ (80055f4 <xTaskIncrementTick+0x14c>)
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d121      	bne.n	8005514 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80054d0:	4b49      	ldr	r3, [pc, #292]	@ (80055f8 <xTaskIncrementTick+0x150>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00b      	beq.n	80054f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	603b      	str	r3, [r7, #0]
}
 80054ec:	bf00      	nop
 80054ee:	bf00      	nop
 80054f0:	e7fd      	b.n	80054ee <xTaskIncrementTick+0x46>
 80054f2:	4b41      	ldr	r3, [pc, #260]	@ (80055f8 <xTaskIncrementTick+0x150>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	4b40      	ldr	r3, [pc, #256]	@ (80055fc <xTaskIncrementTick+0x154>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a3e      	ldr	r2, [pc, #248]	@ (80055f8 <xTaskIncrementTick+0x150>)
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	4a3e      	ldr	r2, [pc, #248]	@ (80055fc <xTaskIncrementTick+0x154>)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	4b3e      	ldr	r3, [pc, #248]	@ (8005600 <xTaskIncrementTick+0x158>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3301      	adds	r3, #1
 800550c:	4a3c      	ldr	r2, [pc, #240]	@ (8005600 <xTaskIncrementTick+0x158>)
 800550e:	6013      	str	r3, [r2, #0]
 8005510:	f000 f9a4 	bl	800585c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005514:	4b3b      	ldr	r3, [pc, #236]	@ (8005604 <xTaskIncrementTick+0x15c>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	429a      	cmp	r2, r3
 800551c:	d348      	bcc.n	80055b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800551e:	4b36      	ldr	r3, [pc, #216]	@ (80055f8 <xTaskIncrementTick+0x150>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d104      	bne.n	8005532 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005528:	4b36      	ldr	r3, [pc, #216]	@ (8005604 <xTaskIncrementTick+0x15c>)
 800552a:	f04f 32ff 	mov.w	r2, #4294967295
 800552e:	601a      	str	r2, [r3, #0]
					break;
 8005530:	e03e      	b.n	80055b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005532:	4b31      	ldr	r3, [pc, #196]	@ (80055f8 <xTaskIncrementTick+0x150>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	429a      	cmp	r2, r3
 8005548:	d203      	bcs.n	8005552 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800554a:	4a2e      	ldr	r2, [pc, #184]	@ (8005604 <xTaskIncrementTick+0x15c>)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005550:	e02e      	b.n	80055b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	3304      	adds	r3, #4
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff fc81 	bl	8004e5e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005560:	2b00      	cmp	r3, #0
 8005562:	d004      	beq.n	800556e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	3318      	adds	r3, #24
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff fc78 	bl	8004e5e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005572:	2201      	movs	r2, #1
 8005574:	409a      	lsls	r2, r3
 8005576:	4b24      	ldr	r3, [pc, #144]	@ (8005608 <xTaskIncrementTick+0x160>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4313      	orrs	r3, r2
 800557c:	4a22      	ldr	r2, [pc, #136]	@ (8005608 <xTaskIncrementTick+0x160>)
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4a1f      	ldr	r2, [pc, #124]	@ (800560c <xTaskIncrementTick+0x164>)
 800558e:	441a      	add	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	3304      	adds	r3, #4
 8005594:	4619      	mov	r1, r3
 8005596:	4610      	mov	r0, r2
 8005598:	f7ff fc04 	bl	8004da4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005610 <xTaskIncrementTick+0x168>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d3b9      	bcc.n	800551e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80055aa:	2301      	movs	r3, #1
 80055ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055ae:	e7b6      	b.n	800551e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055b0:	4b17      	ldr	r3, [pc, #92]	@ (8005610 <xTaskIncrementTick+0x168>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055b6:	4915      	ldr	r1, [pc, #84]	@ (800560c <xTaskIncrementTick+0x164>)
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d901      	bls.n	80055cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80055c8:	2301      	movs	r3, #1
 80055ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80055cc:	4b11      	ldr	r3, [pc, #68]	@ (8005614 <xTaskIncrementTick+0x16c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d007      	beq.n	80055e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80055d4:	2301      	movs	r3, #1
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	e004      	b.n	80055e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80055da:	4b0f      	ldr	r3, [pc, #60]	@ (8005618 <xTaskIncrementTick+0x170>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3301      	adds	r3, #1
 80055e0:	4a0d      	ldr	r2, [pc, #52]	@ (8005618 <xTaskIncrementTick+0x170>)
 80055e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80055e4:	697b      	ldr	r3, [r7, #20]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20000918 	.word	0x20000918
 80055f4:	200008f4 	.word	0x200008f4
 80055f8:	200008a8 	.word	0x200008a8
 80055fc:	200008ac 	.word	0x200008ac
 8005600:	20000908 	.word	0x20000908
 8005604:	20000910 	.word	0x20000910
 8005608:	200008f8 	.word	0x200008f8
 800560c:	200007f4 	.word	0x200007f4
 8005610:	200007f0 	.word	0x200007f0
 8005614:	20000904 	.word	0x20000904
 8005618:	20000900 	.word	0x20000900

0800561c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005622:	4b2a      	ldr	r3, [pc, #168]	@ (80056cc <vTaskSwitchContext+0xb0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800562a:	4b29      	ldr	r3, [pc, #164]	@ (80056d0 <vTaskSwitchContext+0xb4>)
 800562c:	2201      	movs	r2, #1
 800562e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005630:	e045      	b.n	80056be <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005632:	4b27      	ldr	r3, [pc, #156]	@ (80056d0 <vTaskSwitchContext+0xb4>)
 8005634:	2200      	movs	r2, #0
 8005636:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005638:	4b26      	ldr	r3, [pc, #152]	@ (80056d4 <vTaskSwitchContext+0xb8>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	fab3 f383 	clz	r3, r3
 8005644:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005646:	7afb      	ldrb	r3, [r7, #11]
 8005648:	f1c3 031f 	rsb	r3, r3, #31
 800564c:	617b      	str	r3, [r7, #20]
 800564e:	4922      	ldr	r1, [pc, #136]	@ (80056d8 <vTaskSwitchContext+0xbc>)
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	440b      	add	r3, r1
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10b      	bne.n	800567a <vTaskSwitchContext+0x5e>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	607b      	str	r3, [r7, #4]
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop
 8005678:	e7fd      	b.n	8005676 <vTaskSwitchContext+0x5a>
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4613      	mov	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4a14      	ldr	r2, [pc, #80]	@ (80056d8 <vTaskSwitchContext+0xbc>)
 8005686:	4413      	add	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	605a      	str	r2, [r3, #4]
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	3308      	adds	r3, #8
 800569c:	429a      	cmp	r2, r3
 800569e:	d104      	bne.n	80056aa <vTaskSwitchContext+0x8e>
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	605a      	str	r2, [r3, #4]
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	4a0a      	ldr	r2, [pc, #40]	@ (80056dc <vTaskSwitchContext+0xc0>)
 80056b2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056b4:	4b09      	ldr	r3, [pc, #36]	@ (80056dc <vTaskSwitchContext+0xc0>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	334c      	adds	r3, #76	@ 0x4c
 80056ba:	4a09      	ldr	r2, [pc, #36]	@ (80056e0 <vTaskSwitchContext+0xc4>)
 80056bc:	6013      	str	r3, [r2, #0]
}
 80056be:	bf00      	nop
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	20000918 	.word	0x20000918
 80056d0:	20000904 	.word	0x20000904
 80056d4:	200008f8 	.word	0x200008f8
 80056d8:	200007f4 	.word	0x200007f4
 80056dc:	200007f0 	.word	0x200007f0
 80056e0:	20000028 	.word	0x20000028

080056e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056ec:	f000 f852 	bl	8005794 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056f0:	4b06      	ldr	r3, [pc, #24]	@ (800570c <prvIdleTask+0x28>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d9f9      	bls.n	80056ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80056f8:	4b05      	ldr	r3, [pc, #20]	@ (8005710 <prvIdleTask+0x2c>)
 80056fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005708:	e7f0      	b.n	80056ec <prvIdleTask+0x8>
 800570a:	bf00      	nop
 800570c:	200007f4 	.word	0x200007f4
 8005710:	e000ed04 	.word	0xe000ed04

08005714 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800571a:	2300      	movs	r3, #0
 800571c:	607b      	str	r3, [r7, #4]
 800571e:	e00c      	b.n	800573a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4a12      	ldr	r2, [pc, #72]	@ (8005774 <prvInitialiseTaskLists+0x60>)
 800572c:	4413      	add	r3, r2
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff fb0b 	bl	8004d4a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3301      	adds	r3, #1
 8005738:	607b      	str	r3, [r7, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b06      	cmp	r3, #6
 800573e:	d9ef      	bls.n	8005720 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005740:	480d      	ldr	r0, [pc, #52]	@ (8005778 <prvInitialiseTaskLists+0x64>)
 8005742:	f7ff fb02 	bl	8004d4a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005746:	480d      	ldr	r0, [pc, #52]	@ (800577c <prvInitialiseTaskLists+0x68>)
 8005748:	f7ff faff 	bl	8004d4a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800574c:	480c      	ldr	r0, [pc, #48]	@ (8005780 <prvInitialiseTaskLists+0x6c>)
 800574e:	f7ff fafc 	bl	8004d4a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005752:	480c      	ldr	r0, [pc, #48]	@ (8005784 <prvInitialiseTaskLists+0x70>)
 8005754:	f7ff faf9 	bl	8004d4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005758:	480b      	ldr	r0, [pc, #44]	@ (8005788 <prvInitialiseTaskLists+0x74>)
 800575a:	f7ff faf6 	bl	8004d4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800575e:	4b0b      	ldr	r3, [pc, #44]	@ (800578c <prvInitialiseTaskLists+0x78>)
 8005760:	4a05      	ldr	r2, [pc, #20]	@ (8005778 <prvInitialiseTaskLists+0x64>)
 8005762:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005764:	4b0a      	ldr	r3, [pc, #40]	@ (8005790 <prvInitialiseTaskLists+0x7c>)
 8005766:	4a05      	ldr	r2, [pc, #20]	@ (800577c <prvInitialiseTaskLists+0x68>)
 8005768:	601a      	str	r2, [r3, #0]
}
 800576a:	bf00      	nop
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	200007f4 	.word	0x200007f4
 8005778:	20000880 	.word	0x20000880
 800577c:	20000894 	.word	0x20000894
 8005780:	200008b0 	.word	0x200008b0
 8005784:	200008c4 	.word	0x200008c4
 8005788:	200008dc 	.word	0x200008dc
 800578c:	200008a8 	.word	0x200008a8
 8005790:	200008ac 	.word	0x200008ac

08005794 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800579a:	e019      	b.n	80057d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800579c:	f000 fa14 	bl	8005bc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057a0:	4b10      	ldr	r3, [pc, #64]	@ (80057e4 <prvCheckTasksWaitingTermination+0x50>)
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3304      	adds	r3, #4
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff fb56 	bl	8004e5e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057b2:	4b0d      	ldr	r3, [pc, #52]	@ (80057e8 <prvCheckTasksWaitingTermination+0x54>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	4a0b      	ldr	r2, [pc, #44]	@ (80057e8 <prvCheckTasksWaitingTermination+0x54>)
 80057ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057bc:	4b0b      	ldr	r3, [pc, #44]	@ (80057ec <prvCheckTasksWaitingTermination+0x58>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	4a0a      	ldr	r2, [pc, #40]	@ (80057ec <prvCheckTasksWaitingTermination+0x58>)
 80057c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057c6:	f000 fa31 	bl	8005c2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f810 	bl	80057f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057d0:	4b06      	ldr	r3, [pc, #24]	@ (80057ec <prvCheckTasksWaitingTermination+0x58>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e1      	bne.n	800579c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057d8:	bf00      	nop
 80057da:	bf00      	nop
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	200008c4 	.word	0x200008c4
 80057e8:	200008f0 	.word	0x200008f0
 80057ec:	200008d8 	.word	0x200008d8

080057f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	334c      	adds	r3, #76	@ 0x4c
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 fcdb 	bl	80061b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005808:	2b00      	cmp	r3, #0
 800580a:	d108      	bne.n	800581e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005810:	4618      	mov	r0, r3
 8005812:	f000 fb87 	bl	8005f24 <vPortFree>
				vPortFree( pxTCB );
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fb84 	bl	8005f24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800581c:	e019      	b.n	8005852 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005824:	2b01      	cmp	r3, #1
 8005826:	d103      	bne.n	8005830 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fb7b 	bl	8005f24 <vPortFree>
	}
 800582e:	e010      	b.n	8005852 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005836:	2b02      	cmp	r3, #2
 8005838:	d00b      	beq.n	8005852 <prvDeleteTCB+0x62>
	__asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	60fb      	str	r3, [r7, #12]
}
 800584c:	bf00      	nop
 800584e:	bf00      	nop
 8005850:	e7fd      	b.n	800584e <prvDeleteTCB+0x5e>
	}
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005862:	4b0c      	ldr	r3, [pc, #48]	@ (8005894 <prvResetNextTaskUnblockTime+0x38>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d104      	bne.n	8005876 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800586c:	4b0a      	ldr	r3, [pc, #40]	@ (8005898 <prvResetNextTaskUnblockTime+0x3c>)
 800586e:	f04f 32ff 	mov.w	r2, #4294967295
 8005872:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005874:	e008      	b.n	8005888 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005876:	4b07      	ldr	r3, [pc, #28]	@ (8005894 <prvResetNextTaskUnblockTime+0x38>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	4a04      	ldr	r2, [pc, #16]	@ (8005898 <prvResetNextTaskUnblockTime+0x3c>)
 8005886:	6013      	str	r3, [r2, #0]
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	200008a8 	.word	0x200008a8
 8005898:	20000910 	.word	0x20000910

0800589c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80058a6:	4b29      	ldr	r3, [pc, #164]	@ (800594c <prvAddCurrentTaskToDelayedList+0xb0>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058ac:	4b28      	ldr	r3, [pc, #160]	@ (8005950 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3304      	adds	r3, #4
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff fad3 	bl	8004e5e <uxListRemove>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10b      	bne.n	80058d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80058be:	4b24      	ldr	r3, [pc, #144]	@ (8005950 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c4:	2201      	movs	r2, #1
 80058c6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ca:	43da      	mvns	r2, r3
 80058cc:	4b21      	ldr	r3, [pc, #132]	@ (8005954 <prvAddCurrentTaskToDelayedList+0xb8>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4013      	ands	r3, r2
 80058d2:	4a20      	ldr	r2, [pc, #128]	@ (8005954 <prvAddCurrentTaskToDelayedList+0xb8>)
 80058d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058dc:	d10a      	bne.n	80058f4 <prvAddCurrentTaskToDelayedList+0x58>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d007      	beq.n	80058f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005950 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3304      	adds	r3, #4
 80058ea:	4619      	mov	r1, r3
 80058ec:	481a      	ldr	r0, [pc, #104]	@ (8005958 <prvAddCurrentTaskToDelayedList+0xbc>)
 80058ee:	f7ff fa59 	bl	8004da4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058f2:	e026      	b.n	8005942 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4413      	add	r3, r2
 80058fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058fc:	4b14      	ldr	r3, [pc, #80]	@ (8005950 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	429a      	cmp	r2, r3
 800590a:	d209      	bcs.n	8005920 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800590c:	4b13      	ldr	r3, [pc, #76]	@ (800595c <prvAddCurrentTaskToDelayedList+0xc0>)
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	4b0f      	ldr	r3, [pc, #60]	@ (8005950 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3304      	adds	r3, #4
 8005916:	4619      	mov	r1, r3
 8005918:	4610      	mov	r0, r2
 800591a:	f7ff fa67 	bl	8004dec <vListInsert>
}
 800591e:	e010      	b.n	8005942 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005920:	4b0f      	ldr	r3, [pc, #60]	@ (8005960 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	4b0a      	ldr	r3, [pc, #40]	@ (8005950 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3304      	adds	r3, #4
 800592a:	4619      	mov	r1, r3
 800592c:	4610      	mov	r0, r2
 800592e:	f7ff fa5d 	bl	8004dec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005932:	4b0c      	ldr	r3, [pc, #48]	@ (8005964 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	429a      	cmp	r2, r3
 800593a:	d202      	bcs.n	8005942 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800593c:	4a09      	ldr	r2, [pc, #36]	@ (8005964 <prvAddCurrentTaskToDelayedList+0xc8>)
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	6013      	str	r3, [r2, #0]
}
 8005942:	bf00      	nop
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	200008f4 	.word	0x200008f4
 8005950:	200007f0 	.word	0x200007f0
 8005954:	200008f8 	.word	0x200008f8
 8005958:	200008dc 	.word	0x200008dc
 800595c:	200008ac 	.word	0x200008ac
 8005960:	200008a8 	.word	0x200008a8
 8005964:	20000910 	.word	0x20000910

08005968 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3b04      	subs	r3, #4
 8005978:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005980:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3b04      	subs	r3, #4
 8005986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f023 0201 	bic.w	r2, r3, #1
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	3b04      	subs	r3, #4
 8005996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005998:	4a0c      	ldr	r2, [pc, #48]	@ (80059cc <pxPortInitialiseStack+0x64>)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3b14      	subs	r3, #20
 80059a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	3b04      	subs	r3, #4
 80059ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f06f 0202 	mvn.w	r2, #2
 80059b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	3b20      	subs	r3, #32
 80059bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80059be:	68fb      	ldr	r3, [r7, #12]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	080059d1 	.word	0x080059d1

080059d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80059d6:	2300      	movs	r3, #0
 80059d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80059da:	4b13      	ldr	r3, [pc, #76]	@ (8005a28 <prvTaskExitError+0x58>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e2:	d00b      	beq.n	80059fc <prvTaskExitError+0x2c>
	__asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	60fb      	str	r3, [r7, #12]
}
 80059f6:	bf00      	nop
 80059f8:	bf00      	nop
 80059fa:	e7fd      	b.n	80059f8 <prvTaskExitError+0x28>
	__asm volatile
 80059fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	60bb      	str	r3, [r7, #8]
}
 8005a0e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a10:	bf00      	nop
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0fc      	beq.n	8005a12 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a18:	bf00      	nop
 8005a1a:	bf00      	nop
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	20000024 	.word	0x20000024
 8005a2c:	00000000 	.word	0x00000000

08005a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a30:	4b07      	ldr	r3, [pc, #28]	@ (8005a50 <pxCurrentTCBConst2>)
 8005a32:	6819      	ldr	r1, [r3, #0]
 8005a34:	6808      	ldr	r0, [r1, #0]
 8005a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a3a:	f380 8809 	msr	PSP, r0
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f04f 0000 	mov.w	r0, #0
 8005a46:	f380 8811 	msr	BASEPRI, r0
 8005a4a:	4770      	bx	lr
 8005a4c:	f3af 8000 	nop.w

08005a50 <pxCurrentTCBConst2>:
 8005a50:	200007f0 	.word	0x200007f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop

08005a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a58:	4808      	ldr	r0, [pc, #32]	@ (8005a7c <prvPortStartFirstTask+0x24>)
 8005a5a:	6800      	ldr	r0, [r0, #0]
 8005a5c:	6800      	ldr	r0, [r0, #0]
 8005a5e:	f380 8808 	msr	MSP, r0
 8005a62:	f04f 0000 	mov.w	r0, #0
 8005a66:	f380 8814 	msr	CONTROL, r0
 8005a6a:	b662      	cpsie	i
 8005a6c:	b661      	cpsie	f
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	df00      	svc	0
 8005a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a7a:	bf00      	nop
 8005a7c:	e000ed08 	.word	0xe000ed08

08005a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a86:	4b47      	ldr	r3, [pc, #284]	@ (8005ba4 <xPortStartScheduler+0x124>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a47      	ldr	r2, [pc, #284]	@ (8005ba8 <xPortStartScheduler+0x128>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d10b      	bne.n	8005aa8 <xPortStartScheduler+0x28>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	60fb      	str	r3, [r7, #12]
}
 8005aa2:	bf00      	nop
 8005aa4:	bf00      	nop
 8005aa6:	e7fd      	b.n	8005aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005aa8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ba4 <xPortStartScheduler+0x124>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a3f      	ldr	r2, [pc, #252]	@ (8005bac <xPortStartScheduler+0x12c>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d10b      	bne.n	8005aca <xPortStartScheduler+0x4a>
	__asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	613b      	str	r3, [r7, #16]
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop
 8005ac8:	e7fd      	b.n	8005ac6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005aca:	4b39      	ldr	r3, [pc, #228]	@ (8005bb0 <xPortStartScheduler+0x130>)
 8005acc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	22ff      	movs	r2, #255	@ 0xff
 8005ada:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ae4:	78fb      	ldrb	r3, [r7, #3]
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	4b31      	ldr	r3, [pc, #196]	@ (8005bb4 <xPortStartScheduler+0x134>)
 8005af0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005af2:	4b31      	ldr	r3, [pc, #196]	@ (8005bb8 <xPortStartScheduler+0x138>)
 8005af4:	2207      	movs	r2, #7
 8005af6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005af8:	e009      	b.n	8005b0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005afa:	4b2f      	ldr	r3, [pc, #188]	@ (8005bb8 <xPortStartScheduler+0x138>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	4a2d      	ldr	r2, [pc, #180]	@ (8005bb8 <xPortStartScheduler+0x138>)
 8005b02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b04:	78fb      	ldrb	r3, [r7, #3]
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b0e:	78fb      	ldrb	r3, [r7, #3]
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b16:	2b80      	cmp	r3, #128	@ 0x80
 8005b18:	d0ef      	beq.n	8005afa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b1a:	4b27      	ldr	r3, [pc, #156]	@ (8005bb8 <xPortStartScheduler+0x138>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f1c3 0307 	rsb	r3, r3, #7
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d00b      	beq.n	8005b3e <xPortStartScheduler+0xbe>
	__asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	60bb      	str	r3, [r7, #8]
}
 8005b38:	bf00      	nop
 8005b3a:	bf00      	nop
 8005b3c:	e7fd      	b.n	8005b3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8005bb8 <xPortStartScheduler+0x138>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	021b      	lsls	r3, r3, #8
 8005b44:	4a1c      	ldr	r2, [pc, #112]	@ (8005bb8 <xPortStartScheduler+0x138>)
 8005b46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b48:	4b1b      	ldr	r3, [pc, #108]	@ (8005bb8 <xPortStartScheduler+0x138>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b50:	4a19      	ldr	r2, [pc, #100]	@ (8005bb8 <xPortStartScheduler+0x138>)
 8005b52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b5c:	4b17      	ldr	r3, [pc, #92]	@ (8005bbc <xPortStartScheduler+0x13c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a16      	ldr	r2, [pc, #88]	@ (8005bbc <xPortStartScheduler+0x13c>)
 8005b62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005b66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b68:	4b14      	ldr	r3, [pc, #80]	@ (8005bbc <xPortStartScheduler+0x13c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a13      	ldr	r2, [pc, #76]	@ (8005bbc <xPortStartScheduler+0x13c>)
 8005b6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005b72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b74:	f000 f8da 	bl	8005d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b78:	4b11      	ldr	r3, [pc, #68]	@ (8005bc0 <xPortStartScheduler+0x140>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b7e:	f000 f8f9 	bl	8005d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b82:	4b10      	ldr	r3, [pc, #64]	@ (8005bc4 <xPortStartScheduler+0x144>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a0f      	ldr	r2, [pc, #60]	@ (8005bc4 <xPortStartScheduler+0x144>)
 8005b88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005b8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b8e:	f7ff ff63 	bl	8005a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b92:	f7ff fd43 	bl	800561c <vTaskSwitchContext>
	prvTaskExitError();
 8005b96:	f7ff ff1b 	bl	80059d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	e000ed00 	.word	0xe000ed00
 8005ba8:	410fc271 	.word	0x410fc271
 8005bac:	410fc270 	.word	0x410fc270
 8005bb0:	e000e400 	.word	0xe000e400
 8005bb4:	2000091c 	.word	0x2000091c
 8005bb8:	20000920 	.word	0x20000920
 8005bbc:	e000ed20 	.word	0xe000ed20
 8005bc0:	20000024 	.word	0x20000024
 8005bc4:	e000ef34 	.word	0xe000ef34

08005bc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	607b      	str	r3, [r7, #4]
}
 8005be0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005be2:	4b10      	ldr	r3, [pc, #64]	@ (8005c24 <vPortEnterCritical+0x5c>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3301      	adds	r3, #1
 8005be8:	4a0e      	ldr	r2, [pc, #56]	@ (8005c24 <vPortEnterCritical+0x5c>)
 8005bea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005bec:	4b0d      	ldr	r3, [pc, #52]	@ (8005c24 <vPortEnterCritical+0x5c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d110      	bne.n	8005c16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8005c28 <vPortEnterCritical+0x60>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00b      	beq.n	8005c16 <vPortEnterCritical+0x4e>
	__asm volatile
 8005bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	603b      	str	r3, [r7, #0]
}
 8005c10:	bf00      	nop
 8005c12:	bf00      	nop
 8005c14:	e7fd      	b.n	8005c12 <vPortEnterCritical+0x4a>
	}
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	20000024 	.word	0x20000024
 8005c28:	e000ed04 	.word	0xe000ed04

08005c2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c32:	4b12      	ldr	r3, [pc, #72]	@ (8005c7c <vPortExitCritical+0x50>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10b      	bne.n	8005c52 <vPortExitCritical+0x26>
	__asm volatile
 8005c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	607b      	str	r3, [r7, #4]
}
 8005c4c:	bf00      	nop
 8005c4e:	bf00      	nop
 8005c50:	e7fd      	b.n	8005c4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005c52:	4b0a      	ldr	r3, [pc, #40]	@ (8005c7c <vPortExitCritical+0x50>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	4a08      	ldr	r2, [pc, #32]	@ (8005c7c <vPortExitCritical+0x50>)
 8005c5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c5c:	4b07      	ldr	r3, [pc, #28]	@ (8005c7c <vPortExitCritical+0x50>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d105      	bne.n	8005c70 <vPortExitCritical+0x44>
 8005c64:	2300      	movs	r3, #0
 8005c66:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	20000024 	.word	0x20000024

08005c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c80:	f3ef 8009 	mrs	r0, PSP
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	4b15      	ldr	r3, [pc, #84]	@ (8005ce0 <pxCurrentTCBConst>)
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	f01e 0f10 	tst.w	lr, #16
 8005c90:	bf08      	it	eq
 8005c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c9a:	6010      	str	r0, [r2, #0]
 8005c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ca0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005ca4:	f380 8811 	msr	BASEPRI, r0
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f7ff fcb4 	bl	800561c <vTaskSwitchContext>
 8005cb4:	f04f 0000 	mov.w	r0, #0
 8005cb8:	f380 8811 	msr	BASEPRI, r0
 8005cbc:	bc09      	pop	{r0, r3}
 8005cbe:	6819      	ldr	r1, [r3, #0]
 8005cc0:	6808      	ldr	r0, [r1, #0]
 8005cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc6:	f01e 0f10 	tst.w	lr, #16
 8005cca:	bf08      	it	eq
 8005ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005cd0:	f380 8809 	msr	PSP, r0
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	f3af 8000 	nop.w

08005ce0 <pxCurrentTCBConst>:
 8005ce0:	200007f0 	.word	0x200007f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop

08005ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	607b      	str	r3, [r7, #4]
}
 8005d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d02:	f7ff fbd1 	bl	80054a8 <xTaskIncrementTick>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d0c:	4b06      	ldr	r3, [pc, #24]	@ (8005d28 <SysTick_Handler+0x40>)
 8005d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	2300      	movs	r3, #0
 8005d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	f383 8811 	msr	BASEPRI, r3
}
 8005d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d20:	bf00      	nop
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	e000ed04 	.word	0xe000ed04

08005d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d30:	4b0b      	ldr	r3, [pc, #44]	@ (8005d60 <vPortSetupTimerInterrupt+0x34>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d36:	4b0b      	ldr	r3, [pc, #44]	@ (8005d64 <vPortSetupTimerInterrupt+0x38>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d68 <vPortSetupTimerInterrupt+0x3c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a0a      	ldr	r2, [pc, #40]	@ (8005d6c <vPortSetupTimerInterrupt+0x40>)
 8005d42:	fba2 2303 	umull	r2, r3, r2, r3
 8005d46:	099b      	lsrs	r3, r3, #6
 8005d48:	4a09      	ldr	r2, [pc, #36]	@ (8005d70 <vPortSetupTimerInterrupt+0x44>)
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d4e:	4b04      	ldr	r3, [pc, #16]	@ (8005d60 <vPortSetupTimerInterrupt+0x34>)
 8005d50:	2207      	movs	r2, #7
 8005d52:	601a      	str	r2, [r3, #0]
}
 8005d54:	bf00      	nop
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	e000e010 	.word	0xe000e010
 8005d64:	e000e018 	.word	0xe000e018
 8005d68:	20000018 	.word	0x20000018
 8005d6c:	10624dd3 	.word	0x10624dd3
 8005d70:	e000e014 	.word	0xe000e014

08005d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005d84 <vPortEnableVFP+0x10>
 8005d78:	6801      	ldr	r1, [r0, #0]
 8005d7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005d7e:	6001      	str	r1, [r0, #0]
 8005d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d82:	bf00      	nop
 8005d84:	e000ed88 	.word	0xe000ed88

08005d88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08a      	sub	sp, #40	@ 0x28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d90:	2300      	movs	r3, #0
 8005d92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d94:	f7ff fadc 	bl	8005350 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d98:	4b5c      	ldr	r3, [pc, #368]	@ (8005f0c <pvPortMalloc+0x184>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005da0:	f000 f924 	bl	8005fec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005da4:	4b5a      	ldr	r3, [pc, #360]	@ (8005f10 <pvPortMalloc+0x188>)
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f040 8095 	bne.w	8005edc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01e      	beq.n	8005df6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005db8:	2208      	movs	r2, #8
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d015      	beq.n	8005df6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f023 0307 	bic.w	r3, r3, #7
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f003 0307 	and.w	r3, r3, #7
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00b      	beq.n	8005df6 <pvPortMalloc+0x6e>
	__asm volatile
 8005dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de2:	f383 8811 	msr	BASEPRI, r3
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	617b      	str	r3, [r7, #20]
}
 8005df0:	bf00      	nop
 8005df2:	bf00      	nop
 8005df4:	e7fd      	b.n	8005df2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d06f      	beq.n	8005edc <pvPortMalloc+0x154>
 8005dfc:	4b45      	ldr	r3, [pc, #276]	@ (8005f14 <pvPortMalloc+0x18c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d86a      	bhi.n	8005edc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e06:	4b44      	ldr	r3, [pc, #272]	@ (8005f18 <pvPortMalloc+0x190>)
 8005e08:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e0a:	4b43      	ldr	r3, [pc, #268]	@ (8005f18 <pvPortMalloc+0x190>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e10:	e004      	b.n	8005e1c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e14:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d903      	bls.n	8005e2e <pvPortMalloc+0xa6>
 8005e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f1      	bne.n	8005e12 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e2e:	4b37      	ldr	r3, [pc, #220]	@ (8005f0c <pvPortMalloc+0x184>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d051      	beq.n	8005edc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e38:	6a3b      	ldr	r3, [r7, #32]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2208      	movs	r2, #8
 8005e3e:	4413      	add	r3, r2
 8005e40:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	1ad2      	subs	r2, r2, r3
 8005e52:	2308      	movs	r3, #8
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d920      	bls.n	8005e9c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4413      	add	r3, r2
 8005e60:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	f003 0307 	and.w	r3, r3, #7
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00b      	beq.n	8005e84 <pvPortMalloc+0xfc>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	613b      	str	r3, [r7, #16]
}
 8005e7e:	bf00      	nop
 8005e80:	bf00      	nop
 8005e82:	e7fd      	b.n	8005e80 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	1ad2      	subs	r2, r2, r3
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e96:	69b8      	ldr	r0, [r7, #24]
 8005e98:	f000 f90a 	bl	80060b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8005f14 <pvPortMalloc+0x18c>)
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	4a1b      	ldr	r2, [pc, #108]	@ (8005f14 <pvPortMalloc+0x18c>)
 8005ea8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8005f14 <pvPortMalloc+0x18c>)
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	4b1b      	ldr	r3, [pc, #108]	@ (8005f1c <pvPortMalloc+0x194>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d203      	bcs.n	8005ebe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005eb6:	4b17      	ldr	r3, [pc, #92]	@ (8005f14 <pvPortMalloc+0x18c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a18      	ldr	r2, [pc, #96]	@ (8005f1c <pvPortMalloc+0x194>)
 8005ebc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	4b13      	ldr	r3, [pc, #76]	@ (8005f10 <pvPortMalloc+0x188>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005ed2:	4b13      	ldr	r3, [pc, #76]	@ (8005f20 <pvPortMalloc+0x198>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	4a11      	ldr	r2, [pc, #68]	@ (8005f20 <pvPortMalloc+0x198>)
 8005eda:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005edc:	f7ff fa46 	bl	800536c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00b      	beq.n	8005f02 <pvPortMalloc+0x17a>
	__asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	60fb      	str	r3, [r7, #12]
}
 8005efc:	bf00      	nop
 8005efe:	bf00      	nop
 8005f00:	e7fd      	b.n	8005efe <pvPortMalloc+0x176>
	return pvReturn;
 8005f02:	69fb      	ldr	r3, [r7, #28]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3728      	adds	r7, #40	@ 0x28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	2000452c 	.word	0x2000452c
 8005f10:	20004540 	.word	0x20004540
 8005f14:	20004530 	.word	0x20004530
 8005f18:	20004524 	.word	0x20004524
 8005f1c:	20004534 	.word	0x20004534
 8005f20:	20004538 	.word	0x20004538

08005f24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d04f      	beq.n	8005fd6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f36:	2308      	movs	r3, #8
 8005f38:	425b      	negs	r3, r3
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	4b25      	ldr	r3, [pc, #148]	@ (8005fe0 <vPortFree+0xbc>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10b      	bne.n	8005f6a <vPortFree+0x46>
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	60fb      	str	r3, [r7, #12]
}
 8005f64:	bf00      	nop
 8005f66:	bf00      	nop
 8005f68:	e7fd      	b.n	8005f66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00b      	beq.n	8005f8a <vPortFree+0x66>
	__asm volatile
 8005f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	60bb      	str	r3, [r7, #8]
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop
 8005f88:	e7fd      	b.n	8005f86 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	4b14      	ldr	r3, [pc, #80]	@ (8005fe0 <vPortFree+0xbc>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4013      	ands	r3, r2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01e      	beq.n	8005fd6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d11a      	bne.n	8005fd6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8005fe0 <vPortFree+0xbc>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	401a      	ands	r2, r3
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005fb0:	f7ff f9ce 	bl	8005350 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe4 <vPortFree+0xc0>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	4a09      	ldr	r2, [pc, #36]	@ (8005fe4 <vPortFree+0xc0>)
 8005fc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005fc2:	6938      	ldr	r0, [r7, #16]
 8005fc4:	f000 f874 	bl	80060b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005fc8:	4b07      	ldr	r3, [pc, #28]	@ (8005fe8 <vPortFree+0xc4>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	4a06      	ldr	r2, [pc, #24]	@ (8005fe8 <vPortFree+0xc4>)
 8005fd0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005fd2:	f7ff f9cb 	bl	800536c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005fd6:	bf00      	nop
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20004540 	.word	0x20004540
 8005fe4:	20004530 	.word	0x20004530
 8005fe8:	2000453c 	.word	0x2000453c

08005fec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ff2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005ff6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ff8:	4b27      	ldr	r3, [pc, #156]	@ (8006098 <prvHeapInit+0xac>)
 8005ffa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00c      	beq.n	8006020 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3307      	adds	r3, #7
 800600a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f023 0307 	bic.w	r3, r3, #7
 8006012:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	4a1f      	ldr	r2, [pc, #124]	@ (8006098 <prvHeapInit+0xac>)
 800601c:	4413      	add	r3, r2
 800601e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006024:	4a1d      	ldr	r2, [pc, #116]	@ (800609c <prvHeapInit+0xb0>)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800602a:	4b1c      	ldr	r3, [pc, #112]	@ (800609c <prvHeapInit+0xb0>)
 800602c:	2200      	movs	r2, #0
 800602e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	4413      	add	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006038:	2208      	movs	r2, #8
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0307 	bic.w	r3, r3, #7
 8006046:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4a15      	ldr	r2, [pc, #84]	@ (80060a0 <prvHeapInit+0xb4>)
 800604c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800604e:	4b14      	ldr	r3, [pc, #80]	@ (80060a0 <prvHeapInit+0xb4>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2200      	movs	r2, #0
 8006054:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006056:	4b12      	ldr	r3, [pc, #72]	@ (80060a0 <prvHeapInit+0xb4>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	1ad2      	subs	r2, r2, r3
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800606c:	4b0c      	ldr	r3, [pc, #48]	@ (80060a0 <prvHeapInit+0xb4>)
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	4a0a      	ldr	r2, [pc, #40]	@ (80060a4 <prvHeapInit+0xb8>)
 800607a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	4a09      	ldr	r2, [pc, #36]	@ (80060a8 <prvHeapInit+0xbc>)
 8006082:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006084:	4b09      	ldr	r3, [pc, #36]	@ (80060ac <prvHeapInit+0xc0>)
 8006086:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800608a:	601a      	str	r2, [r3, #0]
}
 800608c:	bf00      	nop
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	20000924 	.word	0x20000924
 800609c:	20004524 	.word	0x20004524
 80060a0:	2000452c 	.word	0x2000452c
 80060a4:	20004534 	.word	0x20004534
 80060a8:	20004530 	.word	0x20004530
 80060ac:	20004540 	.word	0x20004540

080060b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060b8:	4b28      	ldr	r3, [pc, #160]	@ (800615c <prvInsertBlockIntoFreeList+0xac>)
 80060ba:	60fb      	str	r3, [r7, #12]
 80060bc:	e002      	b.n	80060c4 <prvInsertBlockIntoFreeList+0x14>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d8f7      	bhi.n	80060be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	4413      	add	r3, r2
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d108      	bne.n	80060f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	441a      	add	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	441a      	add	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	429a      	cmp	r2, r3
 8006104:	d118      	bne.n	8006138 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4b15      	ldr	r3, [pc, #84]	@ (8006160 <prvInsertBlockIntoFreeList+0xb0>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	429a      	cmp	r2, r3
 8006110:	d00d      	beq.n	800612e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	441a      	add	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	e008      	b.n	8006140 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800612e:	4b0c      	ldr	r3, [pc, #48]	@ (8006160 <prvInsertBlockIntoFreeList+0xb0>)
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	e003      	b.n	8006140 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	429a      	cmp	r2, r3
 8006146:	d002      	beq.n	800614e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800614e:	bf00      	nop
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	20004524 	.word	0x20004524
 8006160:	2000452c 	.word	0x2000452c

08006164 <siprintf>:
 8006164:	b40e      	push	{r1, r2, r3}
 8006166:	b510      	push	{r4, lr}
 8006168:	b09d      	sub	sp, #116	@ 0x74
 800616a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800616c:	9002      	str	r0, [sp, #8]
 800616e:	9006      	str	r0, [sp, #24]
 8006170:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006174:	480a      	ldr	r0, [pc, #40]	@ (80061a0 <siprintf+0x3c>)
 8006176:	9107      	str	r1, [sp, #28]
 8006178:	9104      	str	r1, [sp, #16]
 800617a:	490a      	ldr	r1, [pc, #40]	@ (80061a4 <siprintf+0x40>)
 800617c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006180:	9105      	str	r1, [sp, #20]
 8006182:	2400      	movs	r4, #0
 8006184:	a902      	add	r1, sp, #8
 8006186:	6800      	ldr	r0, [r0, #0]
 8006188:	9301      	str	r3, [sp, #4]
 800618a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800618c:	f000 fa00 	bl	8006590 <_svfiprintf_r>
 8006190:	9b02      	ldr	r3, [sp, #8]
 8006192:	701c      	strb	r4, [r3, #0]
 8006194:	b01d      	add	sp, #116	@ 0x74
 8006196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800619a:	b003      	add	sp, #12
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	20000028 	.word	0x20000028
 80061a4:	ffff0208 	.word	0xffff0208

080061a8 <memset>:
 80061a8:	4402      	add	r2, r0
 80061aa:	4603      	mov	r3, r0
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d100      	bne.n	80061b2 <memset+0xa>
 80061b0:	4770      	bx	lr
 80061b2:	f803 1b01 	strb.w	r1, [r3], #1
 80061b6:	e7f9      	b.n	80061ac <memset+0x4>

080061b8 <_reclaim_reent>:
 80061b8:	4b2d      	ldr	r3, [pc, #180]	@ (8006270 <_reclaim_reent+0xb8>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4283      	cmp	r3, r0
 80061be:	b570      	push	{r4, r5, r6, lr}
 80061c0:	4604      	mov	r4, r0
 80061c2:	d053      	beq.n	800626c <_reclaim_reent+0xb4>
 80061c4:	69c3      	ldr	r3, [r0, #28]
 80061c6:	b31b      	cbz	r3, 8006210 <_reclaim_reent+0x58>
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	b163      	cbz	r3, 80061e6 <_reclaim_reent+0x2e>
 80061cc:	2500      	movs	r5, #0
 80061ce:	69e3      	ldr	r3, [r4, #28]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	5959      	ldr	r1, [r3, r5]
 80061d4:	b9b1      	cbnz	r1, 8006204 <_reclaim_reent+0x4c>
 80061d6:	3504      	adds	r5, #4
 80061d8:	2d80      	cmp	r5, #128	@ 0x80
 80061da:	d1f8      	bne.n	80061ce <_reclaim_reent+0x16>
 80061dc:	69e3      	ldr	r3, [r4, #28]
 80061de:	4620      	mov	r0, r4
 80061e0:	68d9      	ldr	r1, [r3, #12]
 80061e2:	f000 f881 	bl	80062e8 <_free_r>
 80061e6:	69e3      	ldr	r3, [r4, #28]
 80061e8:	6819      	ldr	r1, [r3, #0]
 80061ea:	b111      	cbz	r1, 80061f2 <_reclaim_reent+0x3a>
 80061ec:	4620      	mov	r0, r4
 80061ee:	f000 f87b 	bl	80062e8 <_free_r>
 80061f2:	69e3      	ldr	r3, [r4, #28]
 80061f4:	689d      	ldr	r5, [r3, #8]
 80061f6:	b15d      	cbz	r5, 8006210 <_reclaim_reent+0x58>
 80061f8:	4629      	mov	r1, r5
 80061fa:	4620      	mov	r0, r4
 80061fc:	682d      	ldr	r5, [r5, #0]
 80061fe:	f000 f873 	bl	80062e8 <_free_r>
 8006202:	e7f8      	b.n	80061f6 <_reclaim_reent+0x3e>
 8006204:	680e      	ldr	r6, [r1, #0]
 8006206:	4620      	mov	r0, r4
 8006208:	f000 f86e 	bl	80062e8 <_free_r>
 800620c:	4631      	mov	r1, r6
 800620e:	e7e1      	b.n	80061d4 <_reclaim_reent+0x1c>
 8006210:	6961      	ldr	r1, [r4, #20]
 8006212:	b111      	cbz	r1, 800621a <_reclaim_reent+0x62>
 8006214:	4620      	mov	r0, r4
 8006216:	f000 f867 	bl	80062e8 <_free_r>
 800621a:	69e1      	ldr	r1, [r4, #28]
 800621c:	b111      	cbz	r1, 8006224 <_reclaim_reent+0x6c>
 800621e:	4620      	mov	r0, r4
 8006220:	f000 f862 	bl	80062e8 <_free_r>
 8006224:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006226:	b111      	cbz	r1, 800622e <_reclaim_reent+0x76>
 8006228:	4620      	mov	r0, r4
 800622a:	f000 f85d 	bl	80062e8 <_free_r>
 800622e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006230:	b111      	cbz	r1, 8006238 <_reclaim_reent+0x80>
 8006232:	4620      	mov	r0, r4
 8006234:	f000 f858 	bl	80062e8 <_free_r>
 8006238:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800623a:	b111      	cbz	r1, 8006242 <_reclaim_reent+0x8a>
 800623c:	4620      	mov	r0, r4
 800623e:	f000 f853 	bl	80062e8 <_free_r>
 8006242:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006244:	b111      	cbz	r1, 800624c <_reclaim_reent+0x94>
 8006246:	4620      	mov	r0, r4
 8006248:	f000 f84e 	bl	80062e8 <_free_r>
 800624c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800624e:	b111      	cbz	r1, 8006256 <_reclaim_reent+0x9e>
 8006250:	4620      	mov	r0, r4
 8006252:	f000 f849 	bl	80062e8 <_free_r>
 8006256:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006258:	b111      	cbz	r1, 8006260 <_reclaim_reent+0xa8>
 800625a:	4620      	mov	r0, r4
 800625c:	f000 f844 	bl	80062e8 <_free_r>
 8006260:	6a23      	ldr	r3, [r4, #32]
 8006262:	b11b      	cbz	r3, 800626c <_reclaim_reent+0xb4>
 8006264:	4620      	mov	r0, r4
 8006266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800626a:	4718      	bx	r3
 800626c:	bd70      	pop	{r4, r5, r6, pc}
 800626e:	bf00      	nop
 8006270:	20000028 	.word	0x20000028

08006274 <__errno>:
 8006274:	4b01      	ldr	r3, [pc, #4]	@ (800627c <__errno+0x8>)
 8006276:	6818      	ldr	r0, [r3, #0]
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	20000028 	.word	0x20000028

08006280 <__libc_init_array>:
 8006280:	b570      	push	{r4, r5, r6, lr}
 8006282:	4d0d      	ldr	r5, [pc, #52]	@ (80062b8 <__libc_init_array+0x38>)
 8006284:	4c0d      	ldr	r4, [pc, #52]	@ (80062bc <__libc_init_array+0x3c>)
 8006286:	1b64      	subs	r4, r4, r5
 8006288:	10a4      	asrs	r4, r4, #2
 800628a:	2600      	movs	r6, #0
 800628c:	42a6      	cmp	r6, r4
 800628e:	d109      	bne.n	80062a4 <__libc_init_array+0x24>
 8006290:	4d0b      	ldr	r5, [pc, #44]	@ (80062c0 <__libc_init_array+0x40>)
 8006292:	4c0c      	ldr	r4, [pc, #48]	@ (80062c4 <__libc_init_array+0x44>)
 8006294:	f000 fc64 	bl	8006b60 <_init>
 8006298:	1b64      	subs	r4, r4, r5
 800629a:	10a4      	asrs	r4, r4, #2
 800629c:	2600      	movs	r6, #0
 800629e:	42a6      	cmp	r6, r4
 80062a0:	d105      	bne.n	80062ae <__libc_init_array+0x2e>
 80062a2:	bd70      	pop	{r4, r5, r6, pc}
 80062a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80062a8:	4798      	blx	r3
 80062aa:	3601      	adds	r6, #1
 80062ac:	e7ee      	b.n	800628c <__libc_init_array+0xc>
 80062ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80062b2:	4798      	blx	r3
 80062b4:	3601      	adds	r6, #1
 80062b6:	e7f2      	b.n	800629e <__libc_init_array+0x1e>
 80062b8:	08006c0c 	.word	0x08006c0c
 80062bc:	08006c0c 	.word	0x08006c0c
 80062c0:	08006c0c 	.word	0x08006c0c
 80062c4:	08006c10 	.word	0x08006c10

080062c8 <__retarget_lock_acquire_recursive>:
 80062c8:	4770      	bx	lr

080062ca <__retarget_lock_release_recursive>:
 80062ca:	4770      	bx	lr

080062cc <memcpy>:
 80062cc:	440a      	add	r2, r1
 80062ce:	4291      	cmp	r1, r2
 80062d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80062d4:	d100      	bne.n	80062d8 <memcpy+0xc>
 80062d6:	4770      	bx	lr
 80062d8:	b510      	push	{r4, lr}
 80062da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062e2:	4291      	cmp	r1, r2
 80062e4:	d1f9      	bne.n	80062da <memcpy+0xe>
 80062e6:	bd10      	pop	{r4, pc}

080062e8 <_free_r>:
 80062e8:	b538      	push	{r3, r4, r5, lr}
 80062ea:	4605      	mov	r5, r0
 80062ec:	2900      	cmp	r1, #0
 80062ee:	d041      	beq.n	8006374 <_free_r+0x8c>
 80062f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062f4:	1f0c      	subs	r4, r1, #4
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	bfb8      	it	lt
 80062fa:	18e4      	addlt	r4, r4, r3
 80062fc:	f000 f8e0 	bl	80064c0 <__malloc_lock>
 8006300:	4a1d      	ldr	r2, [pc, #116]	@ (8006378 <_free_r+0x90>)
 8006302:	6813      	ldr	r3, [r2, #0]
 8006304:	b933      	cbnz	r3, 8006314 <_free_r+0x2c>
 8006306:	6063      	str	r3, [r4, #4]
 8006308:	6014      	str	r4, [r2, #0]
 800630a:	4628      	mov	r0, r5
 800630c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006310:	f000 b8dc 	b.w	80064cc <__malloc_unlock>
 8006314:	42a3      	cmp	r3, r4
 8006316:	d908      	bls.n	800632a <_free_r+0x42>
 8006318:	6820      	ldr	r0, [r4, #0]
 800631a:	1821      	adds	r1, r4, r0
 800631c:	428b      	cmp	r3, r1
 800631e:	bf01      	itttt	eq
 8006320:	6819      	ldreq	r1, [r3, #0]
 8006322:	685b      	ldreq	r3, [r3, #4]
 8006324:	1809      	addeq	r1, r1, r0
 8006326:	6021      	streq	r1, [r4, #0]
 8006328:	e7ed      	b.n	8006306 <_free_r+0x1e>
 800632a:	461a      	mov	r2, r3
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	b10b      	cbz	r3, 8006334 <_free_r+0x4c>
 8006330:	42a3      	cmp	r3, r4
 8006332:	d9fa      	bls.n	800632a <_free_r+0x42>
 8006334:	6811      	ldr	r1, [r2, #0]
 8006336:	1850      	adds	r0, r2, r1
 8006338:	42a0      	cmp	r0, r4
 800633a:	d10b      	bne.n	8006354 <_free_r+0x6c>
 800633c:	6820      	ldr	r0, [r4, #0]
 800633e:	4401      	add	r1, r0
 8006340:	1850      	adds	r0, r2, r1
 8006342:	4283      	cmp	r3, r0
 8006344:	6011      	str	r1, [r2, #0]
 8006346:	d1e0      	bne.n	800630a <_free_r+0x22>
 8006348:	6818      	ldr	r0, [r3, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	6053      	str	r3, [r2, #4]
 800634e:	4408      	add	r0, r1
 8006350:	6010      	str	r0, [r2, #0]
 8006352:	e7da      	b.n	800630a <_free_r+0x22>
 8006354:	d902      	bls.n	800635c <_free_r+0x74>
 8006356:	230c      	movs	r3, #12
 8006358:	602b      	str	r3, [r5, #0]
 800635a:	e7d6      	b.n	800630a <_free_r+0x22>
 800635c:	6820      	ldr	r0, [r4, #0]
 800635e:	1821      	adds	r1, r4, r0
 8006360:	428b      	cmp	r3, r1
 8006362:	bf04      	itt	eq
 8006364:	6819      	ldreq	r1, [r3, #0]
 8006366:	685b      	ldreq	r3, [r3, #4]
 8006368:	6063      	str	r3, [r4, #4]
 800636a:	bf04      	itt	eq
 800636c:	1809      	addeq	r1, r1, r0
 800636e:	6021      	streq	r1, [r4, #0]
 8006370:	6054      	str	r4, [r2, #4]
 8006372:	e7ca      	b.n	800630a <_free_r+0x22>
 8006374:	bd38      	pop	{r3, r4, r5, pc}
 8006376:	bf00      	nop
 8006378:	20004688 	.word	0x20004688

0800637c <sbrk_aligned>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	4e0f      	ldr	r6, [pc, #60]	@ (80063bc <sbrk_aligned+0x40>)
 8006380:	460c      	mov	r4, r1
 8006382:	6831      	ldr	r1, [r6, #0]
 8006384:	4605      	mov	r5, r0
 8006386:	b911      	cbnz	r1, 800638e <sbrk_aligned+0x12>
 8006388:	f000 fba4 	bl	8006ad4 <_sbrk_r>
 800638c:	6030      	str	r0, [r6, #0]
 800638e:	4621      	mov	r1, r4
 8006390:	4628      	mov	r0, r5
 8006392:	f000 fb9f 	bl	8006ad4 <_sbrk_r>
 8006396:	1c43      	adds	r3, r0, #1
 8006398:	d103      	bne.n	80063a2 <sbrk_aligned+0x26>
 800639a:	f04f 34ff 	mov.w	r4, #4294967295
 800639e:	4620      	mov	r0, r4
 80063a0:	bd70      	pop	{r4, r5, r6, pc}
 80063a2:	1cc4      	adds	r4, r0, #3
 80063a4:	f024 0403 	bic.w	r4, r4, #3
 80063a8:	42a0      	cmp	r0, r4
 80063aa:	d0f8      	beq.n	800639e <sbrk_aligned+0x22>
 80063ac:	1a21      	subs	r1, r4, r0
 80063ae:	4628      	mov	r0, r5
 80063b0:	f000 fb90 	bl	8006ad4 <_sbrk_r>
 80063b4:	3001      	adds	r0, #1
 80063b6:	d1f2      	bne.n	800639e <sbrk_aligned+0x22>
 80063b8:	e7ef      	b.n	800639a <sbrk_aligned+0x1e>
 80063ba:	bf00      	nop
 80063bc:	20004684 	.word	0x20004684

080063c0 <_malloc_r>:
 80063c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063c4:	1ccd      	adds	r5, r1, #3
 80063c6:	f025 0503 	bic.w	r5, r5, #3
 80063ca:	3508      	adds	r5, #8
 80063cc:	2d0c      	cmp	r5, #12
 80063ce:	bf38      	it	cc
 80063d0:	250c      	movcc	r5, #12
 80063d2:	2d00      	cmp	r5, #0
 80063d4:	4606      	mov	r6, r0
 80063d6:	db01      	blt.n	80063dc <_malloc_r+0x1c>
 80063d8:	42a9      	cmp	r1, r5
 80063da:	d904      	bls.n	80063e6 <_malloc_r+0x26>
 80063dc:	230c      	movs	r3, #12
 80063de:	6033      	str	r3, [r6, #0]
 80063e0:	2000      	movs	r0, #0
 80063e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064bc <_malloc_r+0xfc>
 80063ea:	f000 f869 	bl	80064c0 <__malloc_lock>
 80063ee:	f8d8 3000 	ldr.w	r3, [r8]
 80063f2:	461c      	mov	r4, r3
 80063f4:	bb44      	cbnz	r4, 8006448 <_malloc_r+0x88>
 80063f6:	4629      	mov	r1, r5
 80063f8:	4630      	mov	r0, r6
 80063fa:	f7ff ffbf 	bl	800637c <sbrk_aligned>
 80063fe:	1c43      	adds	r3, r0, #1
 8006400:	4604      	mov	r4, r0
 8006402:	d158      	bne.n	80064b6 <_malloc_r+0xf6>
 8006404:	f8d8 4000 	ldr.w	r4, [r8]
 8006408:	4627      	mov	r7, r4
 800640a:	2f00      	cmp	r7, #0
 800640c:	d143      	bne.n	8006496 <_malloc_r+0xd6>
 800640e:	2c00      	cmp	r4, #0
 8006410:	d04b      	beq.n	80064aa <_malloc_r+0xea>
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	4639      	mov	r1, r7
 8006416:	4630      	mov	r0, r6
 8006418:	eb04 0903 	add.w	r9, r4, r3
 800641c:	f000 fb5a 	bl	8006ad4 <_sbrk_r>
 8006420:	4581      	cmp	r9, r0
 8006422:	d142      	bne.n	80064aa <_malloc_r+0xea>
 8006424:	6821      	ldr	r1, [r4, #0]
 8006426:	1a6d      	subs	r5, r5, r1
 8006428:	4629      	mov	r1, r5
 800642a:	4630      	mov	r0, r6
 800642c:	f7ff ffa6 	bl	800637c <sbrk_aligned>
 8006430:	3001      	adds	r0, #1
 8006432:	d03a      	beq.n	80064aa <_malloc_r+0xea>
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	442b      	add	r3, r5
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	f8d8 3000 	ldr.w	r3, [r8]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	bb62      	cbnz	r2, 800649c <_malloc_r+0xdc>
 8006442:	f8c8 7000 	str.w	r7, [r8]
 8006446:	e00f      	b.n	8006468 <_malloc_r+0xa8>
 8006448:	6822      	ldr	r2, [r4, #0]
 800644a:	1b52      	subs	r2, r2, r5
 800644c:	d420      	bmi.n	8006490 <_malloc_r+0xd0>
 800644e:	2a0b      	cmp	r2, #11
 8006450:	d917      	bls.n	8006482 <_malloc_r+0xc2>
 8006452:	1961      	adds	r1, r4, r5
 8006454:	42a3      	cmp	r3, r4
 8006456:	6025      	str	r5, [r4, #0]
 8006458:	bf18      	it	ne
 800645a:	6059      	strne	r1, [r3, #4]
 800645c:	6863      	ldr	r3, [r4, #4]
 800645e:	bf08      	it	eq
 8006460:	f8c8 1000 	streq.w	r1, [r8]
 8006464:	5162      	str	r2, [r4, r5]
 8006466:	604b      	str	r3, [r1, #4]
 8006468:	4630      	mov	r0, r6
 800646a:	f000 f82f 	bl	80064cc <__malloc_unlock>
 800646e:	f104 000b 	add.w	r0, r4, #11
 8006472:	1d23      	adds	r3, r4, #4
 8006474:	f020 0007 	bic.w	r0, r0, #7
 8006478:	1ac2      	subs	r2, r0, r3
 800647a:	bf1c      	itt	ne
 800647c:	1a1b      	subne	r3, r3, r0
 800647e:	50a3      	strne	r3, [r4, r2]
 8006480:	e7af      	b.n	80063e2 <_malloc_r+0x22>
 8006482:	6862      	ldr	r2, [r4, #4]
 8006484:	42a3      	cmp	r3, r4
 8006486:	bf0c      	ite	eq
 8006488:	f8c8 2000 	streq.w	r2, [r8]
 800648c:	605a      	strne	r2, [r3, #4]
 800648e:	e7eb      	b.n	8006468 <_malloc_r+0xa8>
 8006490:	4623      	mov	r3, r4
 8006492:	6864      	ldr	r4, [r4, #4]
 8006494:	e7ae      	b.n	80063f4 <_malloc_r+0x34>
 8006496:	463c      	mov	r4, r7
 8006498:	687f      	ldr	r7, [r7, #4]
 800649a:	e7b6      	b.n	800640a <_malloc_r+0x4a>
 800649c:	461a      	mov	r2, r3
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	42a3      	cmp	r3, r4
 80064a2:	d1fb      	bne.n	800649c <_malloc_r+0xdc>
 80064a4:	2300      	movs	r3, #0
 80064a6:	6053      	str	r3, [r2, #4]
 80064a8:	e7de      	b.n	8006468 <_malloc_r+0xa8>
 80064aa:	230c      	movs	r3, #12
 80064ac:	6033      	str	r3, [r6, #0]
 80064ae:	4630      	mov	r0, r6
 80064b0:	f000 f80c 	bl	80064cc <__malloc_unlock>
 80064b4:	e794      	b.n	80063e0 <_malloc_r+0x20>
 80064b6:	6005      	str	r5, [r0, #0]
 80064b8:	e7d6      	b.n	8006468 <_malloc_r+0xa8>
 80064ba:	bf00      	nop
 80064bc:	20004688 	.word	0x20004688

080064c0 <__malloc_lock>:
 80064c0:	4801      	ldr	r0, [pc, #4]	@ (80064c8 <__malloc_lock+0x8>)
 80064c2:	f7ff bf01 	b.w	80062c8 <__retarget_lock_acquire_recursive>
 80064c6:	bf00      	nop
 80064c8:	20004680 	.word	0x20004680

080064cc <__malloc_unlock>:
 80064cc:	4801      	ldr	r0, [pc, #4]	@ (80064d4 <__malloc_unlock+0x8>)
 80064ce:	f7ff befc 	b.w	80062ca <__retarget_lock_release_recursive>
 80064d2:	bf00      	nop
 80064d4:	20004680 	.word	0x20004680

080064d8 <__ssputs_r>:
 80064d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064dc:	688e      	ldr	r6, [r1, #8]
 80064de:	461f      	mov	r7, r3
 80064e0:	42be      	cmp	r6, r7
 80064e2:	680b      	ldr	r3, [r1, #0]
 80064e4:	4682      	mov	sl, r0
 80064e6:	460c      	mov	r4, r1
 80064e8:	4690      	mov	r8, r2
 80064ea:	d82d      	bhi.n	8006548 <__ssputs_r+0x70>
 80064ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80064f4:	d026      	beq.n	8006544 <__ssputs_r+0x6c>
 80064f6:	6965      	ldr	r5, [r4, #20]
 80064f8:	6909      	ldr	r1, [r1, #16]
 80064fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064fe:	eba3 0901 	sub.w	r9, r3, r1
 8006502:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006506:	1c7b      	adds	r3, r7, #1
 8006508:	444b      	add	r3, r9
 800650a:	106d      	asrs	r5, r5, #1
 800650c:	429d      	cmp	r5, r3
 800650e:	bf38      	it	cc
 8006510:	461d      	movcc	r5, r3
 8006512:	0553      	lsls	r3, r2, #21
 8006514:	d527      	bpl.n	8006566 <__ssputs_r+0x8e>
 8006516:	4629      	mov	r1, r5
 8006518:	f7ff ff52 	bl	80063c0 <_malloc_r>
 800651c:	4606      	mov	r6, r0
 800651e:	b360      	cbz	r0, 800657a <__ssputs_r+0xa2>
 8006520:	6921      	ldr	r1, [r4, #16]
 8006522:	464a      	mov	r2, r9
 8006524:	f7ff fed2 	bl	80062cc <memcpy>
 8006528:	89a3      	ldrh	r3, [r4, #12]
 800652a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800652e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006532:	81a3      	strh	r3, [r4, #12]
 8006534:	6126      	str	r6, [r4, #16]
 8006536:	6165      	str	r5, [r4, #20]
 8006538:	444e      	add	r6, r9
 800653a:	eba5 0509 	sub.w	r5, r5, r9
 800653e:	6026      	str	r6, [r4, #0]
 8006540:	60a5      	str	r5, [r4, #8]
 8006542:	463e      	mov	r6, r7
 8006544:	42be      	cmp	r6, r7
 8006546:	d900      	bls.n	800654a <__ssputs_r+0x72>
 8006548:	463e      	mov	r6, r7
 800654a:	6820      	ldr	r0, [r4, #0]
 800654c:	4632      	mov	r2, r6
 800654e:	4641      	mov	r1, r8
 8006550:	f000 faa6 	bl	8006aa0 <memmove>
 8006554:	68a3      	ldr	r3, [r4, #8]
 8006556:	1b9b      	subs	r3, r3, r6
 8006558:	60a3      	str	r3, [r4, #8]
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	4433      	add	r3, r6
 800655e:	6023      	str	r3, [r4, #0]
 8006560:	2000      	movs	r0, #0
 8006562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006566:	462a      	mov	r2, r5
 8006568:	f000 fac4 	bl	8006af4 <_realloc_r>
 800656c:	4606      	mov	r6, r0
 800656e:	2800      	cmp	r0, #0
 8006570:	d1e0      	bne.n	8006534 <__ssputs_r+0x5c>
 8006572:	6921      	ldr	r1, [r4, #16]
 8006574:	4650      	mov	r0, sl
 8006576:	f7ff feb7 	bl	80062e8 <_free_r>
 800657a:	230c      	movs	r3, #12
 800657c:	f8ca 3000 	str.w	r3, [sl]
 8006580:	89a3      	ldrh	r3, [r4, #12]
 8006582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006586:	81a3      	strh	r3, [r4, #12]
 8006588:	f04f 30ff 	mov.w	r0, #4294967295
 800658c:	e7e9      	b.n	8006562 <__ssputs_r+0x8a>
	...

08006590 <_svfiprintf_r>:
 8006590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	4698      	mov	r8, r3
 8006596:	898b      	ldrh	r3, [r1, #12]
 8006598:	061b      	lsls	r3, r3, #24
 800659a:	b09d      	sub	sp, #116	@ 0x74
 800659c:	4607      	mov	r7, r0
 800659e:	460d      	mov	r5, r1
 80065a0:	4614      	mov	r4, r2
 80065a2:	d510      	bpl.n	80065c6 <_svfiprintf_r+0x36>
 80065a4:	690b      	ldr	r3, [r1, #16]
 80065a6:	b973      	cbnz	r3, 80065c6 <_svfiprintf_r+0x36>
 80065a8:	2140      	movs	r1, #64	@ 0x40
 80065aa:	f7ff ff09 	bl	80063c0 <_malloc_r>
 80065ae:	6028      	str	r0, [r5, #0]
 80065b0:	6128      	str	r0, [r5, #16]
 80065b2:	b930      	cbnz	r0, 80065c2 <_svfiprintf_r+0x32>
 80065b4:	230c      	movs	r3, #12
 80065b6:	603b      	str	r3, [r7, #0]
 80065b8:	f04f 30ff 	mov.w	r0, #4294967295
 80065bc:	b01d      	add	sp, #116	@ 0x74
 80065be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c2:	2340      	movs	r3, #64	@ 0x40
 80065c4:	616b      	str	r3, [r5, #20]
 80065c6:	2300      	movs	r3, #0
 80065c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80065ca:	2320      	movs	r3, #32
 80065cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80065d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80065d4:	2330      	movs	r3, #48	@ 0x30
 80065d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006774 <_svfiprintf_r+0x1e4>
 80065da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80065de:	f04f 0901 	mov.w	r9, #1
 80065e2:	4623      	mov	r3, r4
 80065e4:	469a      	mov	sl, r3
 80065e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065ea:	b10a      	cbz	r2, 80065f0 <_svfiprintf_r+0x60>
 80065ec:	2a25      	cmp	r2, #37	@ 0x25
 80065ee:	d1f9      	bne.n	80065e4 <_svfiprintf_r+0x54>
 80065f0:	ebba 0b04 	subs.w	fp, sl, r4
 80065f4:	d00b      	beq.n	800660e <_svfiprintf_r+0x7e>
 80065f6:	465b      	mov	r3, fp
 80065f8:	4622      	mov	r2, r4
 80065fa:	4629      	mov	r1, r5
 80065fc:	4638      	mov	r0, r7
 80065fe:	f7ff ff6b 	bl	80064d8 <__ssputs_r>
 8006602:	3001      	adds	r0, #1
 8006604:	f000 80a7 	beq.w	8006756 <_svfiprintf_r+0x1c6>
 8006608:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800660a:	445a      	add	r2, fp
 800660c:	9209      	str	r2, [sp, #36]	@ 0x24
 800660e:	f89a 3000 	ldrb.w	r3, [sl]
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 809f 	beq.w	8006756 <_svfiprintf_r+0x1c6>
 8006618:	2300      	movs	r3, #0
 800661a:	f04f 32ff 	mov.w	r2, #4294967295
 800661e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006622:	f10a 0a01 	add.w	sl, sl, #1
 8006626:	9304      	str	r3, [sp, #16]
 8006628:	9307      	str	r3, [sp, #28]
 800662a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800662e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006630:	4654      	mov	r4, sl
 8006632:	2205      	movs	r2, #5
 8006634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006638:	484e      	ldr	r0, [pc, #312]	@ (8006774 <_svfiprintf_r+0x1e4>)
 800663a:	f7f9 fdd1 	bl	80001e0 <memchr>
 800663e:	9a04      	ldr	r2, [sp, #16]
 8006640:	b9d8      	cbnz	r0, 800667a <_svfiprintf_r+0xea>
 8006642:	06d0      	lsls	r0, r2, #27
 8006644:	bf44      	itt	mi
 8006646:	2320      	movmi	r3, #32
 8006648:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800664c:	0711      	lsls	r1, r2, #28
 800664e:	bf44      	itt	mi
 8006650:	232b      	movmi	r3, #43	@ 0x2b
 8006652:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006656:	f89a 3000 	ldrb.w	r3, [sl]
 800665a:	2b2a      	cmp	r3, #42	@ 0x2a
 800665c:	d015      	beq.n	800668a <_svfiprintf_r+0xfa>
 800665e:	9a07      	ldr	r2, [sp, #28]
 8006660:	4654      	mov	r4, sl
 8006662:	2000      	movs	r0, #0
 8006664:	f04f 0c0a 	mov.w	ip, #10
 8006668:	4621      	mov	r1, r4
 800666a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800666e:	3b30      	subs	r3, #48	@ 0x30
 8006670:	2b09      	cmp	r3, #9
 8006672:	d94b      	bls.n	800670c <_svfiprintf_r+0x17c>
 8006674:	b1b0      	cbz	r0, 80066a4 <_svfiprintf_r+0x114>
 8006676:	9207      	str	r2, [sp, #28]
 8006678:	e014      	b.n	80066a4 <_svfiprintf_r+0x114>
 800667a:	eba0 0308 	sub.w	r3, r0, r8
 800667e:	fa09 f303 	lsl.w	r3, r9, r3
 8006682:	4313      	orrs	r3, r2
 8006684:	9304      	str	r3, [sp, #16]
 8006686:	46a2      	mov	sl, r4
 8006688:	e7d2      	b.n	8006630 <_svfiprintf_r+0xa0>
 800668a:	9b03      	ldr	r3, [sp, #12]
 800668c:	1d19      	adds	r1, r3, #4
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	9103      	str	r1, [sp, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	bfbb      	ittet	lt
 8006696:	425b      	neglt	r3, r3
 8006698:	f042 0202 	orrlt.w	r2, r2, #2
 800669c:	9307      	strge	r3, [sp, #28]
 800669e:	9307      	strlt	r3, [sp, #28]
 80066a0:	bfb8      	it	lt
 80066a2:	9204      	strlt	r2, [sp, #16]
 80066a4:	7823      	ldrb	r3, [r4, #0]
 80066a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80066a8:	d10a      	bne.n	80066c0 <_svfiprintf_r+0x130>
 80066aa:	7863      	ldrb	r3, [r4, #1]
 80066ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80066ae:	d132      	bne.n	8006716 <_svfiprintf_r+0x186>
 80066b0:	9b03      	ldr	r3, [sp, #12]
 80066b2:	1d1a      	adds	r2, r3, #4
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	9203      	str	r2, [sp, #12]
 80066b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80066bc:	3402      	adds	r4, #2
 80066be:	9305      	str	r3, [sp, #20]
 80066c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006784 <_svfiprintf_r+0x1f4>
 80066c4:	7821      	ldrb	r1, [r4, #0]
 80066c6:	2203      	movs	r2, #3
 80066c8:	4650      	mov	r0, sl
 80066ca:	f7f9 fd89 	bl	80001e0 <memchr>
 80066ce:	b138      	cbz	r0, 80066e0 <_svfiprintf_r+0x150>
 80066d0:	9b04      	ldr	r3, [sp, #16]
 80066d2:	eba0 000a 	sub.w	r0, r0, sl
 80066d6:	2240      	movs	r2, #64	@ 0x40
 80066d8:	4082      	lsls	r2, r0
 80066da:	4313      	orrs	r3, r2
 80066dc:	3401      	adds	r4, #1
 80066de:	9304      	str	r3, [sp, #16]
 80066e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066e4:	4824      	ldr	r0, [pc, #144]	@ (8006778 <_svfiprintf_r+0x1e8>)
 80066e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80066ea:	2206      	movs	r2, #6
 80066ec:	f7f9 fd78 	bl	80001e0 <memchr>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	d036      	beq.n	8006762 <_svfiprintf_r+0x1d2>
 80066f4:	4b21      	ldr	r3, [pc, #132]	@ (800677c <_svfiprintf_r+0x1ec>)
 80066f6:	bb1b      	cbnz	r3, 8006740 <_svfiprintf_r+0x1b0>
 80066f8:	9b03      	ldr	r3, [sp, #12]
 80066fa:	3307      	adds	r3, #7
 80066fc:	f023 0307 	bic.w	r3, r3, #7
 8006700:	3308      	adds	r3, #8
 8006702:	9303      	str	r3, [sp, #12]
 8006704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006706:	4433      	add	r3, r6
 8006708:	9309      	str	r3, [sp, #36]	@ 0x24
 800670a:	e76a      	b.n	80065e2 <_svfiprintf_r+0x52>
 800670c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006710:	460c      	mov	r4, r1
 8006712:	2001      	movs	r0, #1
 8006714:	e7a8      	b.n	8006668 <_svfiprintf_r+0xd8>
 8006716:	2300      	movs	r3, #0
 8006718:	3401      	adds	r4, #1
 800671a:	9305      	str	r3, [sp, #20]
 800671c:	4619      	mov	r1, r3
 800671e:	f04f 0c0a 	mov.w	ip, #10
 8006722:	4620      	mov	r0, r4
 8006724:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006728:	3a30      	subs	r2, #48	@ 0x30
 800672a:	2a09      	cmp	r2, #9
 800672c:	d903      	bls.n	8006736 <_svfiprintf_r+0x1a6>
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0c6      	beq.n	80066c0 <_svfiprintf_r+0x130>
 8006732:	9105      	str	r1, [sp, #20]
 8006734:	e7c4      	b.n	80066c0 <_svfiprintf_r+0x130>
 8006736:	fb0c 2101 	mla	r1, ip, r1, r2
 800673a:	4604      	mov	r4, r0
 800673c:	2301      	movs	r3, #1
 800673e:	e7f0      	b.n	8006722 <_svfiprintf_r+0x192>
 8006740:	ab03      	add	r3, sp, #12
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	462a      	mov	r2, r5
 8006746:	4b0e      	ldr	r3, [pc, #56]	@ (8006780 <_svfiprintf_r+0x1f0>)
 8006748:	a904      	add	r1, sp, #16
 800674a:	4638      	mov	r0, r7
 800674c:	f3af 8000 	nop.w
 8006750:	1c42      	adds	r2, r0, #1
 8006752:	4606      	mov	r6, r0
 8006754:	d1d6      	bne.n	8006704 <_svfiprintf_r+0x174>
 8006756:	89ab      	ldrh	r3, [r5, #12]
 8006758:	065b      	lsls	r3, r3, #25
 800675a:	f53f af2d 	bmi.w	80065b8 <_svfiprintf_r+0x28>
 800675e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006760:	e72c      	b.n	80065bc <_svfiprintf_r+0x2c>
 8006762:	ab03      	add	r3, sp, #12
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	462a      	mov	r2, r5
 8006768:	4b05      	ldr	r3, [pc, #20]	@ (8006780 <_svfiprintf_r+0x1f0>)
 800676a:	a904      	add	r1, sp, #16
 800676c:	4638      	mov	r0, r7
 800676e:	f000 f879 	bl	8006864 <_printf_i>
 8006772:	e7ed      	b.n	8006750 <_svfiprintf_r+0x1c0>
 8006774:	08006bd0 	.word	0x08006bd0
 8006778:	08006bda 	.word	0x08006bda
 800677c:	00000000 	.word	0x00000000
 8006780:	080064d9 	.word	0x080064d9
 8006784:	08006bd6 	.word	0x08006bd6

08006788 <_printf_common>:
 8006788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800678c:	4616      	mov	r6, r2
 800678e:	4698      	mov	r8, r3
 8006790:	688a      	ldr	r2, [r1, #8]
 8006792:	690b      	ldr	r3, [r1, #16]
 8006794:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006798:	4293      	cmp	r3, r2
 800679a:	bfb8      	it	lt
 800679c:	4613      	movlt	r3, r2
 800679e:	6033      	str	r3, [r6, #0]
 80067a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067a4:	4607      	mov	r7, r0
 80067a6:	460c      	mov	r4, r1
 80067a8:	b10a      	cbz	r2, 80067ae <_printf_common+0x26>
 80067aa:	3301      	adds	r3, #1
 80067ac:	6033      	str	r3, [r6, #0]
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	0699      	lsls	r1, r3, #26
 80067b2:	bf42      	ittt	mi
 80067b4:	6833      	ldrmi	r3, [r6, #0]
 80067b6:	3302      	addmi	r3, #2
 80067b8:	6033      	strmi	r3, [r6, #0]
 80067ba:	6825      	ldr	r5, [r4, #0]
 80067bc:	f015 0506 	ands.w	r5, r5, #6
 80067c0:	d106      	bne.n	80067d0 <_printf_common+0x48>
 80067c2:	f104 0a19 	add.w	sl, r4, #25
 80067c6:	68e3      	ldr	r3, [r4, #12]
 80067c8:	6832      	ldr	r2, [r6, #0]
 80067ca:	1a9b      	subs	r3, r3, r2
 80067cc:	42ab      	cmp	r3, r5
 80067ce:	dc26      	bgt.n	800681e <_printf_common+0x96>
 80067d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067d4:	6822      	ldr	r2, [r4, #0]
 80067d6:	3b00      	subs	r3, #0
 80067d8:	bf18      	it	ne
 80067da:	2301      	movne	r3, #1
 80067dc:	0692      	lsls	r2, r2, #26
 80067de:	d42b      	bmi.n	8006838 <_printf_common+0xb0>
 80067e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067e4:	4641      	mov	r1, r8
 80067e6:	4638      	mov	r0, r7
 80067e8:	47c8      	blx	r9
 80067ea:	3001      	adds	r0, #1
 80067ec:	d01e      	beq.n	800682c <_printf_common+0xa4>
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	6922      	ldr	r2, [r4, #16]
 80067f2:	f003 0306 	and.w	r3, r3, #6
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	bf02      	ittt	eq
 80067fa:	68e5      	ldreq	r5, [r4, #12]
 80067fc:	6833      	ldreq	r3, [r6, #0]
 80067fe:	1aed      	subeq	r5, r5, r3
 8006800:	68a3      	ldr	r3, [r4, #8]
 8006802:	bf0c      	ite	eq
 8006804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006808:	2500      	movne	r5, #0
 800680a:	4293      	cmp	r3, r2
 800680c:	bfc4      	itt	gt
 800680e:	1a9b      	subgt	r3, r3, r2
 8006810:	18ed      	addgt	r5, r5, r3
 8006812:	2600      	movs	r6, #0
 8006814:	341a      	adds	r4, #26
 8006816:	42b5      	cmp	r5, r6
 8006818:	d11a      	bne.n	8006850 <_printf_common+0xc8>
 800681a:	2000      	movs	r0, #0
 800681c:	e008      	b.n	8006830 <_printf_common+0xa8>
 800681e:	2301      	movs	r3, #1
 8006820:	4652      	mov	r2, sl
 8006822:	4641      	mov	r1, r8
 8006824:	4638      	mov	r0, r7
 8006826:	47c8      	blx	r9
 8006828:	3001      	adds	r0, #1
 800682a:	d103      	bne.n	8006834 <_printf_common+0xac>
 800682c:	f04f 30ff 	mov.w	r0, #4294967295
 8006830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006834:	3501      	adds	r5, #1
 8006836:	e7c6      	b.n	80067c6 <_printf_common+0x3e>
 8006838:	18e1      	adds	r1, r4, r3
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	2030      	movs	r0, #48	@ 0x30
 800683e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006842:	4422      	add	r2, r4
 8006844:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006848:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800684c:	3302      	adds	r3, #2
 800684e:	e7c7      	b.n	80067e0 <_printf_common+0x58>
 8006850:	2301      	movs	r3, #1
 8006852:	4622      	mov	r2, r4
 8006854:	4641      	mov	r1, r8
 8006856:	4638      	mov	r0, r7
 8006858:	47c8      	blx	r9
 800685a:	3001      	adds	r0, #1
 800685c:	d0e6      	beq.n	800682c <_printf_common+0xa4>
 800685e:	3601      	adds	r6, #1
 8006860:	e7d9      	b.n	8006816 <_printf_common+0x8e>
	...

08006864 <_printf_i>:
 8006864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006868:	7e0f      	ldrb	r7, [r1, #24]
 800686a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800686c:	2f78      	cmp	r7, #120	@ 0x78
 800686e:	4691      	mov	r9, r2
 8006870:	4680      	mov	r8, r0
 8006872:	460c      	mov	r4, r1
 8006874:	469a      	mov	sl, r3
 8006876:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800687a:	d807      	bhi.n	800688c <_printf_i+0x28>
 800687c:	2f62      	cmp	r7, #98	@ 0x62
 800687e:	d80a      	bhi.n	8006896 <_printf_i+0x32>
 8006880:	2f00      	cmp	r7, #0
 8006882:	f000 80d1 	beq.w	8006a28 <_printf_i+0x1c4>
 8006886:	2f58      	cmp	r7, #88	@ 0x58
 8006888:	f000 80b8 	beq.w	80069fc <_printf_i+0x198>
 800688c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006890:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006894:	e03a      	b.n	800690c <_printf_i+0xa8>
 8006896:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800689a:	2b15      	cmp	r3, #21
 800689c:	d8f6      	bhi.n	800688c <_printf_i+0x28>
 800689e:	a101      	add	r1, pc, #4	@ (adr r1, 80068a4 <_printf_i+0x40>)
 80068a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068a4:	080068fd 	.word	0x080068fd
 80068a8:	08006911 	.word	0x08006911
 80068ac:	0800688d 	.word	0x0800688d
 80068b0:	0800688d 	.word	0x0800688d
 80068b4:	0800688d 	.word	0x0800688d
 80068b8:	0800688d 	.word	0x0800688d
 80068bc:	08006911 	.word	0x08006911
 80068c0:	0800688d 	.word	0x0800688d
 80068c4:	0800688d 	.word	0x0800688d
 80068c8:	0800688d 	.word	0x0800688d
 80068cc:	0800688d 	.word	0x0800688d
 80068d0:	08006a0f 	.word	0x08006a0f
 80068d4:	0800693b 	.word	0x0800693b
 80068d8:	080069c9 	.word	0x080069c9
 80068dc:	0800688d 	.word	0x0800688d
 80068e0:	0800688d 	.word	0x0800688d
 80068e4:	08006a31 	.word	0x08006a31
 80068e8:	0800688d 	.word	0x0800688d
 80068ec:	0800693b 	.word	0x0800693b
 80068f0:	0800688d 	.word	0x0800688d
 80068f4:	0800688d 	.word	0x0800688d
 80068f8:	080069d1 	.word	0x080069d1
 80068fc:	6833      	ldr	r3, [r6, #0]
 80068fe:	1d1a      	adds	r2, r3, #4
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6032      	str	r2, [r6, #0]
 8006904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006908:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800690c:	2301      	movs	r3, #1
 800690e:	e09c      	b.n	8006a4a <_printf_i+0x1e6>
 8006910:	6833      	ldr	r3, [r6, #0]
 8006912:	6820      	ldr	r0, [r4, #0]
 8006914:	1d19      	adds	r1, r3, #4
 8006916:	6031      	str	r1, [r6, #0]
 8006918:	0606      	lsls	r6, r0, #24
 800691a:	d501      	bpl.n	8006920 <_printf_i+0xbc>
 800691c:	681d      	ldr	r5, [r3, #0]
 800691e:	e003      	b.n	8006928 <_printf_i+0xc4>
 8006920:	0645      	lsls	r5, r0, #25
 8006922:	d5fb      	bpl.n	800691c <_printf_i+0xb8>
 8006924:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006928:	2d00      	cmp	r5, #0
 800692a:	da03      	bge.n	8006934 <_printf_i+0xd0>
 800692c:	232d      	movs	r3, #45	@ 0x2d
 800692e:	426d      	negs	r5, r5
 8006930:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006934:	4858      	ldr	r0, [pc, #352]	@ (8006a98 <_printf_i+0x234>)
 8006936:	230a      	movs	r3, #10
 8006938:	e011      	b.n	800695e <_printf_i+0xfa>
 800693a:	6821      	ldr	r1, [r4, #0]
 800693c:	6833      	ldr	r3, [r6, #0]
 800693e:	0608      	lsls	r0, r1, #24
 8006940:	f853 5b04 	ldr.w	r5, [r3], #4
 8006944:	d402      	bmi.n	800694c <_printf_i+0xe8>
 8006946:	0649      	lsls	r1, r1, #25
 8006948:	bf48      	it	mi
 800694a:	b2ad      	uxthmi	r5, r5
 800694c:	2f6f      	cmp	r7, #111	@ 0x6f
 800694e:	4852      	ldr	r0, [pc, #328]	@ (8006a98 <_printf_i+0x234>)
 8006950:	6033      	str	r3, [r6, #0]
 8006952:	bf14      	ite	ne
 8006954:	230a      	movne	r3, #10
 8006956:	2308      	moveq	r3, #8
 8006958:	2100      	movs	r1, #0
 800695a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800695e:	6866      	ldr	r6, [r4, #4]
 8006960:	60a6      	str	r6, [r4, #8]
 8006962:	2e00      	cmp	r6, #0
 8006964:	db05      	blt.n	8006972 <_printf_i+0x10e>
 8006966:	6821      	ldr	r1, [r4, #0]
 8006968:	432e      	orrs	r6, r5
 800696a:	f021 0104 	bic.w	r1, r1, #4
 800696e:	6021      	str	r1, [r4, #0]
 8006970:	d04b      	beq.n	8006a0a <_printf_i+0x1a6>
 8006972:	4616      	mov	r6, r2
 8006974:	fbb5 f1f3 	udiv	r1, r5, r3
 8006978:	fb03 5711 	mls	r7, r3, r1, r5
 800697c:	5dc7      	ldrb	r7, [r0, r7]
 800697e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006982:	462f      	mov	r7, r5
 8006984:	42bb      	cmp	r3, r7
 8006986:	460d      	mov	r5, r1
 8006988:	d9f4      	bls.n	8006974 <_printf_i+0x110>
 800698a:	2b08      	cmp	r3, #8
 800698c:	d10b      	bne.n	80069a6 <_printf_i+0x142>
 800698e:	6823      	ldr	r3, [r4, #0]
 8006990:	07df      	lsls	r7, r3, #31
 8006992:	d508      	bpl.n	80069a6 <_printf_i+0x142>
 8006994:	6923      	ldr	r3, [r4, #16]
 8006996:	6861      	ldr	r1, [r4, #4]
 8006998:	4299      	cmp	r1, r3
 800699a:	bfde      	ittt	le
 800699c:	2330      	movle	r3, #48	@ 0x30
 800699e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069a6:	1b92      	subs	r2, r2, r6
 80069a8:	6122      	str	r2, [r4, #16]
 80069aa:	f8cd a000 	str.w	sl, [sp]
 80069ae:	464b      	mov	r3, r9
 80069b0:	aa03      	add	r2, sp, #12
 80069b2:	4621      	mov	r1, r4
 80069b4:	4640      	mov	r0, r8
 80069b6:	f7ff fee7 	bl	8006788 <_printf_common>
 80069ba:	3001      	adds	r0, #1
 80069bc:	d14a      	bne.n	8006a54 <_printf_i+0x1f0>
 80069be:	f04f 30ff 	mov.w	r0, #4294967295
 80069c2:	b004      	add	sp, #16
 80069c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	f043 0320 	orr.w	r3, r3, #32
 80069ce:	6023      	str	r3, [r4, #0]
 80069d0:	4832      	ldr	r0, [pc, #200]	@ (8006a9c <_printf_i+0x238>)
 80069d2:	2778      	movs	r7, #120	@ 0x78
 80069d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	6831      	ldr	r1, [r6, #0]
 80069dc:	061f      	lsls	r7, r3, #24
 80069de:	f851 5b04 	ldr.w	r5, [r1], #4
 80069e2:	d402      	bmi.n	80069ea <_printf_i+0x186>
 80069e4:	065f      	lsls	r7, r3, #25
 80069e6:	bf48      	it	mi
 80069e8:	b2ad      	uxthmi	r5, r5
 80069ea:	6031      	str	r1, [r6, #0]
 80069ec:	07d9      	lsls	r1, r3, #31
 80069ee:	bf44      	itt	mi
 80069f0:	f043 0320 	orrmi.w	r3, r3, #32
 80069f4:	6023      	strmi	r3, [r4, #0]
 80069f6:	b11d      	cbz	r5, 8006a00 <_printf_i+0x19c>
 80069f8:	2310      	movs	r3, #16
 80069fa:	e7ad      	b.n	8006958 <_printf_i+0xf4>
 80069fc:	4826      	ldr	r0, [pc, #152]	@ (8006a98 <_printf_i+0x234>)
 80069fe:	e7e9      	b.n	80069d4 <_printf_i+0x170>
 8006a00:	6823      	ldr	r3, [r4, #0]
 8006a02:	f023 0320 	bic.w	r3, r3, #32
 8006a06:	6023      	str	r3, [r4, #0]
 8006a08:	e7f6      	b.n	80069f8 <_printf_i+0x194>
 8006a0a:	4616      	mov	r6, r2
 8006a0c:	e7bd      	b.n	800698a <_printf_i+0x126>
 8006a0e:	6833      	ldr	r3, [r6, #0]
 8006a10:	6825      	ldr	r5, [r4, #0]
 8006a12:	6961      	ldr	r1, [r4, #20]
 8006a14:	1d18      	adds	r0, r3, #4
 8006a16:	6030      	str	r0, [r6, #0]
 8006a18:	062e      	lsls	r6, r5, #24
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	d501      	bpl.n	8006a22 <_printf_i+0x1be>
 8006a1e:	6019      	str	r1, [r3, #0]
 8006a20:	e002      	b.n	8006a28 <_printf_i+0x1c4>
 8006a22:	0668      	lsls	r0, r5, #25
 8006a24:	d5fb      	bpl.n	8006a1e <_printf_i+0x1ba>
 8006a26:	8019      	strh	r1, [r3, #0]
 8006a28:	2300      	movs	r3, #0
 8006a2a:	6123      	str	r3, [r4, #16]
 8006a2c:	4616      	mov	r6, r2
 8006a2e:	e7bc      	b.n	80069aa <_printf_i+0x146>
 8006a30:	6833      	ldr	r3, [r6, #0]
 8006a32:	1d1a      	adds	r2, r3, #4
 8006a34:	6032      	str	r2, [r6, #0]
 8006a36:	681e      	ldr	r6, [r3, #0]
 8006a38:	6862      	ldr	r2, [r4, #4]
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	f7f9 fbcf 	bl	80001e0 <memchr>
 8006a42:	b108      	cbz	r0, 8006a48 <_printf_i+0x1e4>
 8006a44:	1b80      	subs	r0, r0, r6
 8006a46:	6060      	str	r0, [r4, #4]
 8006a48:	6863      	ldr	r3, [r4, #4]
 8006a4a:	6123      	str	r3, [r4, #16]
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a52:	e7aa      	b.n	80069aa <_printf_i+0x146>
 8006a54:	6923      	ldr	r3, [r4, #16]
 8006a56:	4632      	mov	r2, r6
 8006a58:	4649      	mov	r1, r9
 8006a5a:	4640      	mov	r0, r8
 8006a5c:	47d0      	blx	sl
 8006a5e:	3001      	adds	r0, #1
 8006a60:	d0ad      	beq.n	80069be <_printf_i+0x15a>
 8006a62:	6823      	ldr	r3, [r4, #0]
 8006a64:	079b      	lsls	r3, r3, #30
 8006a66:	d413      	bmi.n	8006a90 <_printf_i+0x22c>
 8006a68:	68e0      	ldr	r0, [r4, #12]
 8006a6a:	9b03      	ldr	r3, [sp, #12]
 8006a6c:	4298      	cmp	r0, r3
 8006a6e:	bfb8      	it	lt
 8006a70:	4618      	movlt	r0, r3
 8006a72:	e7a6      	b.n	80069c2 <_printf_i+0x15e>
 8006a74:	2301      	movs	r3, #1
 8006a76:	4632      	mov	r2, r6
 8006a78:	4649      	mov	r1, r9
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	47d0      	blx	sl
 8006a7e:	3001      	adds	r0, #1
 8006a80:	d09d      	beq.n	80069be <_printf_i+0x15a>
 8006a82:	3501      	adds	r5, #1
 8006a84:	68e3      	ldr	r3, [r4, #12]
 8006a86:	9903      	ldr	r1, [sp, #12]
 8006a88:	1a5b      	subs	r3, r3, r1
 8006a8a:	42ab      	cmp	r3, r5
 8006a8c:	dcf2      	bgt.n	8006a74 <_printf_i+0x210>
 8006a8e:	e7eb      	b.n	8006a68 <_printf_i+0x204>
 8006a90:	2500      	movs	r5, #0
 8006a92:	f104 0619 	add.w	r6, r4, #25
 8006a96:	e7f5      	b.n	8006a84 <_printf_i+0x220>
 8006a98:	08006be1 	.word	0x08006be1
 8006a9c:	08006bf2 	.word	0x08006bf2

08006aa0 <memmove>:
 8006aa0:	4288      	cmp	r0, r1
 8006aa2:	b510      	push	{r4, lr}
 8006aa4:	eb01 0402 	add.w	r4, r1, r2
 8006aa8:	d902      	bls.n	8006ab0 <memmove+0x10>
 8006aaa:	4284      	cmp	r4, r0
 8006aac:	4623      	mov	r3, r4
 8006aae:	d807      	bhi.n	8006ac0 <memmove+0x20>
 8006ab0:	1e43      	subs	r3, r0, #1
 8006ab2:	42a1      	cmp	r1, r4
 8006ab4:	d008      	beq.n	8006ac8 <memmove+0x28>
 8006ab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006aba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006abe:	e7f8      	b.n	8006ab2 <memmove+0x12>
 8006ac0:	4402      	add	r2, r0
 8006ac2:	4601      	mov	r1, r0
 8006ac4:	428a      	cmp	r2, r1
 8006ac6:	d100      	bne.n	8006aca <memmove+0x2a>
 8006ac8:	bd10      	pop	{r4, pc}
 8006aca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ace:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ad2:	e7f7      	b.n	8006ac4 <memmove+0x24>

08006ad4 <_sbrk_r>:
 8006ad4:	b538      	push	{r3, r4, r5, lr}
 8006ad6:	4d06      	ldr	r5, [pc, #24]	@ (8006af0 <_sbrk_r+0x1c>)
 8006ad8:	2300      	movs	r3, #0
 8006ada:	4604      	mov	r4, r0
 8006adc:	4608      	mov	r0, r1
 8006ade:	602b      	str	r3, [r5, #0]
 8006ae0:	f7fb f862 	bl	8001ba8 <_sbrk>
 8006ae4:	1c43      	adds	r3, r0, #1
 8006ae6:	d102      	bne.n	8006aee <_sbrk_r+0x1a>
 8006ae8:	682b      	ldr	r3, [r5, #0]
 8006aea:	b103      	cbz	r3, 8006aee <_sbrk_r+0x1a>
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	bd38      	pop	{r3, r4, r5, pc}
 8006af0:	2000467c 	.word	0x2000467c

08006af4 <_realloc_r>:
 8006af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af8:	4607      	mov	r7, r0
 8006afa:	4614      	mov	r4, r2
 8006afc:	460d      	mov	r5, r1
 8006afe:	b921      	cbnz	r1, 8006b0a <_realloc_r+0x16>
 8006b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b04:	4611      	mov	r1, r2
 8006b06:	f7ff bc5b 	b.w	80063c0 <_malloc_r>
 8006b0a:	b92a      	cbnz	r2, 8006b18 <_realloc_r+0x24>
 8006b0c:	f7ff fbec 	bl	80062e8 <_free_r>
 8006b10:	4625      	mov	r5, r4
 8006b12:	4628      	mov	r0, r5
 8006b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b18:	f000 f81a 	bl	8006b50 <_malloc_usable_size_r>
 8006b1c:	4284      	cmp	r4, r0
 8006b1e:	4606      	mov	r6, r0
 8006b20:	d802      	bhi.n	8006b28 <_realloc_r+0x34>
 8006b22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b26:	d8f4      	bhi.n	8006b12 <_realloc_r+0x1e>
 8006b28:	4621      	mov	r1, r4
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	f7ff fc48 	bl	80063c0 <_malloc_r>
 8006b30:	4680      	mov	r8, r0
 8006b32:	b908      	cbnz	r0, 8006b38 <_realloc_r+0x44>
 8006b34:	4645      	mov	r5, r8
 8006b36:	e7ec      	b.n	8006b12 <_realloc_r+0x1e>
 8006b38:	42b4      	cmp	r4, r6
 8006b3a:	4622      	mov	r2, r4
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	bf28      	it	cs
 8006b40:	4632      	movcs	r2, r6
 8006b42:	f7ff fbc3 	bl	80062cc <memcpy>
 8006b46:	4629      	mov	r1, r5
 8006b48:	4638      	mov	r0, r7
 8006b4a:	f7ff fbcd 	bl	80062e8 <_free_r>
 8006b4e:	e7f1      	b.n	8006b34 <_realloc_r+0x40>

08006b50 <_malloc_usable_size_r>:
 8006b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b54:	1f18      	subs	r0, r3, #4
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	bfbc      	itt	lt
 8006b5a:	580b      	ldrlt	r3, [r1, r0]
 8006b5c:	18c0      	addlt	r0, r0, r3
 8006b5e:	4770      	bx	lr

08006b60 <_init>:
 8006b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b62:	bf00      	nop
 8006b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b66:	bc08      	pop	{r3}
 8006b68:	469e      	mov	lr, r3
 8006b6a:	4770      	bx	lr

08006b6c <_fini>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	bf00      	nop
 8006b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b72:	bc08      	pop	{r3}
 8006b74:	469e      	mov	lr, r3
 8006b76:	4770      	bx	lr
