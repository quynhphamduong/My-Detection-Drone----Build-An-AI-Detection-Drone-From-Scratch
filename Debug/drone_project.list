
drone_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061c8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08006368  08006368  00007368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063f8  080063f8  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  080063f8  080063f8  000073f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006400  08006400  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006400  08006400  00007400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006404  08006404  00007404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006408  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004590  20000060  08006468  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045f0  08006468  000085f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ca9  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003193  00000000  00000000  0001bd39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  0001eed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dd7  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ffd  00000000  00000000  00020ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146ef  00000000  00000000  00039ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097ad7  00000000  00000000  0004e5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6082  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f24  00000000  00000000  000e60c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000eafec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006350 	.word	0x08006350

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006350 	.word	0x08006350

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Calculate_Reference>:
 */

#include "Drone_control.h"

void Calculate_Reference(Drone_Calculation_Typedef *dr,Drone_Control_Typedef *dc)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	dr->picth_reference=(dc->RV-1500)*0.1f;//we can send reference direct from control
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	885b      	ldrh	r3, [r3, #2]
 800057e:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8000582:	ee07 3a90 	vmov	s15, r3
 8000586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800058a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000600 <Calculate_Reference+0x90>
 800058e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	edc3 7a00 	vstr	s15, [r3]
	dr->roll_reference=(dc->RH-1500)*0.1f;
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80005a0:	ee07 3a90 	vmov	s15, r3
 80005a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005a8:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8000600 <Calculate_Reference+0x90>
 80005ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	edc3 7a01 	vstr	s15, [r3, #4]
	dr->yaw_reference=(dc->LH-1500)*0.1f;
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	88db      	ldrh	r3, [r3, #6]
 80005ba:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80005be:	ee07 3a90 	vmov	s15, r3
 80005c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000600 <Calculate_Reference+0x90>
 80005ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	edc3 7a02 	vstr	s15, [r3, #8]
	dr->high_reference=(dc->LV-1000)*10;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	889b      	ldrh	r3, [r3, #4]
 80005d8:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 80005dc:	4613      	mov	r3, r2
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	4413      	add	r3, r2
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	ee07 3a90 	vmov	s15, r3
 80005e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	3dcccccd 	.word	0x3dcccccd

08000604 <escNormalOneshot125>:
	HAL_Delay(8000);
	HAL_Delay(1000);
}

void escNormalOneshot125(TIM_HandleTypeDef *htim,uint32_t speed,Timer_channel_enumTypedef CHANNEL)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	4613      	mov	r3, r2
 8000610:	71fb      	strb	r3, [r7, #7]
	if(speed>=MAXIMUM_SPEED)
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000618:	4293      	cmp	r3, r2
 800061a:	d903      	bls.n	8000624 <escNormalOneshot125+0x20>
	{
		speed=MAXIMUM_SPEED;
 800061c:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	e004      	b.n	800062e <escNormalOneshot125+0x2a>
	}
	else if(speed<=MINIMUM_SPEED)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d101      	bne.n	800062e <escNormalOneshot125+0x2a>
	{
		speed=MINIMUM_SPEED;
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
	}
	switch(CHANNEL)
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b0c      	cmp	r3, #12
 8000632:	d83d      	bhi.n	80006b0 <escNormalOneshot125+0xac>
 8000634:	a201      	add	r2, pc, #4	@ (adr r2, 800063c <escNormalOneshot125+0x38>)
 8000636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063a:	bf00      	nop
 800063c:	08000671 	.word	0x08000671
 8000640:	080006b1 	.word	0x080006b1
 8000644:	080006b1 	.word	0x080006b1
 8000648:	080006b1 	.word	0x080006b1
 800064c:	08000681 	.word	0x08000681
 8000650:	080006b1 	.word	0x080006b1
 8000654:	080006b1 	.word	0x080006b1
 8000658:	080006b1 	.word	0x080006b1
 800065c:	08000691 	.word	0x08000691
 8000660:	080006b1 	.word	0x080006b1
 8000664:	080006b1 	.word	0x080006b1
 8000668:	080006b1 	.word	0x080006b1
 800066c:	080006a1 	.word	0x080006a1
	{
	case CHANNEL1:
		htim->Instance->CCR1=speed+MINIMUM_ESC_PWM;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800067a:	3304      	adds	r3, #4
 800067c:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 800067e:	e017      	b.n	80006b0 <escNormalOneshot125+0xac>
	case CHANNEL2:
			htim->Instance->CCR2=speed+MINIMUM_ESC_PWM;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800068a:	3304      	adds	r3, #4
 800068c:	6393      	str	r3, [r2, #56]	@ 0x38
			break;
 800068e:	e00f      	b.n	80006b0 <escNormalOneshot125+0xac>
	case CHANNEL3:
			htim->Instance->CCR3=speed+MINIMUM_ESC_PWM;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800069a:	3304      	adds	r3, #4
 800069c:	63d3      	str	r3, [r2, #60]	@ 0x3c
			break;
 800069e:	e007      	b.n	80006b0 <escNormalOneshot125+0xac>
	case CHANNEL4:
			htim->Instance->CCR4=speed+MINIMUM_ESC_PWM;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80006aa:	3304      	adds	r3, #4
 80006ac:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 80006ae:	bf00      	nop
	}
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <Control4Motor>:

void Control4Motor(TIM_HandleTypeDef *htim,Motor_speed_Typedef *speed)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
	escNormalOneshot125(htim, speed->speed1, CHANNEL1);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2200      	movs	r2, #0
 80006cc:	4619      	mov	r1, r3
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff ff98 	bl	8000604 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed2, CHANNEL2);
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	2204      	movs	r2, #4
 80006da:	4619      	mov	r1, r3
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f7ff ff91 	bl	8000604 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed3, CHANNEL3);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	2208      	movs	r2, #8
 80006e8:	4619      	mov	r1, r3
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f7ff ff8a 	bl	8000604 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed4, CHANNEL4);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	220c      	movs	r2, #12
 80006f6:	4619      	mov	r1, r3
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff ff83 	bl	8000604 <escNormalOneshot125>

}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <pidControllersInit>:
 */

#include "PID.h"

void pidControllersInit(PIDControllers_Typedef* pid,float Kp,float Ki,float Kd,float to,float T,float upper_saturation,float lower_saturation)
{
 8000706:	b480      	push	{r7}
 8000708:	b089      	sub	sp, #36	@ 0x24
 800070a:	af00      	add	r7, sp, #0
 800070c:	61f8      	str	r0, [r7, #28]
 800070e:	ed87 0a06 	vstr	s0, [r7, #24]
 8000712:	edc7 0a05 	vstr	s1, [r7, #20]
 8000716:	ed87 1a04 	vstr	s2, [r7, #16]
 800071a:	edc7 1a03 	vstr	s3, [r7, #12]
 800071e:	ed87 2a02 	vstr	s4, [r7, #8]
 8000722:	edc7 2a01 	vstr	s5, [r7, #4]
 8000726:	ed87 3a00 	vstr	s6, [r7]
	pid->Kp=Kp;
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	69ba      	ldr	r2, [r7, #24]
 800072e:	601a      	str	r2, [r3, #0]
	pid->Ki=Ki;
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	697a      	ldr	r2, [r7, #20]
 8000734:	605a      	str	r2, [r3, #4]
	pid->Kd=Kd;
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	693a      	ldr	r2, [r7, #16]
 800073a:	609a      	str	r2, [r3, #8]
	pid->to=to;
 800073c:	69fb      	ldr	r3, [r7, #28]
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	60da      	str	r2, [r3, #12]
	pid->T=T;
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	68ba      	ldr	r2, [r7, #8]
 8000746:	611a      	str	r2, [r3, #16]

	pid->et=0;
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	f04f 0200 	mov.w	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
	pid->ek1=0;
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f04f 0200 	mov.w	r2, #0
 8000756:	619a      	str	r2, [r3, #24]

	pid->eKit=0;
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	f04f 0200 	mov.w	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
	pid->eKik1=0;
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	f04f 0200 	mov.w	r2, #0
 8000766:	621a      	str	r2, [r3, #32]

	pid->propotion=0;
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	f04f 0200 	mov.w	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->integrator=0;
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	f04f 0200 	mov.w	r2, #0
 8000776:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->deviator=0;
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	f04f 0200 	mov.w	r2, #0
 800077e:	631a      	str	r2, [r3, #48]	@ 0x30
	pid->integratork1=0;
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	f04f 0200 	mov.w	r2, #0
 8000786:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->deviatork1=0;
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	f04f 0200 	mov.w	r2, #0
 800078e:	635a      	str	r2, [r3, #52]	@ 0x34

	pid->upper_saturation=upper_saturation;
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	641a      	str	r2, [r3, #64]	@ 0x40
	pid->lower_saturation=lower_saturation;
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	683a      	ldr	r2, [r7, #0]
 800079a:	645a      	str	r2, [r3, #68]	@ 0x44

	pid->measurement=0;
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	f04f 0200 	mov.w	r2, #0
 80007a2:	639a      	str	r2, [r3, #56]	@ 0x38

	pid->u=0;
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	f04f 0200 	mov.w	r2, #0
 80007aa:	64da      	str	r2, [r3, #76]	@ 0x4c

}
 80007ac:	bf00      	nop
 80007ae:	3724      	adds	r7, #36	@ 0x24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <pidUpdate>:
	pid->Ki=Ki;
	pid->Kd=Kd;
}

float pidUpdate(PIDControllers_Typedef* pid,float measurement,float input)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80007c4:	edc7 0a01 	vstr	s1, [r7, #4]
	//get pid input
	pid->expected=input;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pid->measurement=measurement;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	68ba      	ldr	r2, [r7, #8]
 80007d2:	639a      	str	r2, [r3, #56]	@ 0x38
	pid->et=pid->expected-pid->measurement;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80007e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	edc3 7a05 	vstr	s15, [r3, #20]
	{
		pid->eKik1=0;
		pid->eKit=0;
	}
#else
	pid->eKit=pid->et;
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	695a      	ldr	r2, [r3, #20]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	61da      	str	r2, [r3, #28]
	pid->eKik1=pid->ek1;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	699a      	ldr	r2, [r3, #24]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	621a      	str	r2, [r3, #32]
#endif
	//PID calculation
	pid->propotion=pid->Kp*pid->et;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	ed93 7a00 	vldr	s14, [r3]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	edd3 7a05 	vldr	s15, [r3, #20]
 8000806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	pid->integrator=((pid->Ki*pid->T)/2)*(pid->eKit+pid->eKik1)+pid->integratork1;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	ed93 7a01 	vldr	s14, [r3, #4]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	edd3 7a04 	vldr	s15, [r3, #16]
 800081c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000820:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000824:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	edd3 6a07 	vldr	s13, [r3, #28]
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	edd3 7a08 	vldr	s15, [r3, #32]
 8000834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000838:	ee27 7a27 	vmul.f32	s14, s14, s15
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	pid->deviator=((2*pid->Kd)/(2*pid->to+pid->T))*(pid->et-pid->ek1)+((2*pid->to-pid->T)
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000852:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	edd3 7a03 	vldr	s15, [r3, #12]
 800085c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	edd3 7a04 	vldr	s15, [r3, #16]
 8000866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800086a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	edd3 6a05 	vldr	s13, [r3, #20]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	edd3 7a06 	vldr	s15, [r3, #24]
 800087a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800087e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	edd3 7a03 	vldr	s15, [r3, #12]
 8000888:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000892:	ee36 6ae7 	vsub.f32	s12, s13, s15
			/(2*pid->to+pid->T))*pid->deviatork1;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	edd3 7a03 	vldr	s15, [r3, #12]
 800089c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80008a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80008aa:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80008b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
	pid->deviator=((2*pid->Kd)/(2*pid->to+pid->T))*(pid->et-pid->ek1)+((2*pid->to-pid->T)
 80008b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	pid->ek1=pid->et;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	695a      	ldr	r2, [r3, #20]
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	619a      	str	r2, [r3, #24]
	pid->integratork1=pid->integrator;
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->deviatork1=pid->deviator;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	635a      	str	r2, [r3, #52]	@ 0x34
	pid->v=pid->propotion+pid->integrator+pid->deviator;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80008e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80008f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

	//saturation
	if(pid->v>pid->upper_saturation)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8000906:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800090a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800090e:	dd04      	ble.n	800091a <pidUpdate+0x162>
	{
		pid->u=pid->upper_saturation;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000918:	e013      	b.n	8000942 <pidUpdate+0x18a>
	}
	else if(pid->v<(pid->lower_saturation))
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000926:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800092a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800092e:	d504      	bpl.n	800093a <pidUpdate+0x182>
	{
		pid->u=pid->lower_saturation;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000938:	e003      	b.n	8000942 <pidUpdate+0x18a>
	}
	else
	{
		pid->u=pid->v;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	64da      	str	r2, [r3, #76]	@ 0x4c
	}

	return pid->u;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	ee07 3a90 	vmov	s15, r3
}
 800094a:	eeb0 0a67 	vmov.f32	s0, s15
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	4a07      	ldr	r2, [pc, #28]	@ (8000984 <vApplicationGetIdleTaskMemory+0x2c>)
 8000968:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	4a06      	ldr	r2, [pc, #24]	@ (8000988 <vApplicationGetIdleTaskMemory+0x30>)
 800096e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2280      	movs	r2, #128	@ 0x80
 8000974:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000976:	bf00      	nop
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	2000007c 	.word	0x2000007c
 8000988:	2000011c 	.word	0x2000011c

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b5b0      	push	{r4, r5, r7, lr}
 800098e:	b08a      	sub	sp, #40	@ 0x28
 8000990:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000992:	f001 f853 	bl	8001a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000996:	f000 f90d 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099a:	f000 fa71 	bl	8000e80 <MX_GPIO_Init>
  MX_SPI1_Init();
 800099e:	f000 f971 	bl	8000c84 <MX_SPI1_Init>
  MX_TIM2_Init();
 80009a2:	f000 f9a5 	bl	8000cf0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009a6:	f000 fa1d 	bl	8000de4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80009aa:	2201      	movs	r2, #1
 80009ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009b0:	4864      	ldr	r0, [pc, #400]	@ (8000b44 <main+0x1b8>)
 80009b2:	f001 fb27 	bl	8002004 <HAL_GPIO_WritePin>
  float sample=powf(10,-3);
 80009b6:	4b64      	ldr	r3, [pc, #400]	@ (8000b48 <main+0x1bc>)
 80009b8:	61fb      	str	r3, [r7, #28]
  pidControllersInit(&yaw, 20, 15, 5,0.1,sample,0.1,-0.1);
 80009ba:	ed9f 3a64 	vldr	s6, [pc, #400]	@ 8000b4c <main+0x1c0>
 80009be:	eddf 2a64 	vldr	s5, [pc, #400]	@ 8000b50 <main+0x1c4>
 80009c2:	ed97 2a07 	vldr	s4, [r7, #28]
 80009c6:	eddf 1a62 	vldr	s3, [pc, #392]	@ 8000b50 <main+0x1c4>
 80009ca:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 80009ce:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 80009d2:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 80009d6:	485f      	ldr	r0, [pc, #380]	@ (8000b54 <main+0x1c8>)
 80009d8:	f7ff fe95 	bl	8000706 <pidControllersInit>
  pidControllersInit(&yaw_rate, 100, 50,10, 0.1,sample,1500,-1500);
 80009dc:	ed9f 3a5e 	vldr	s6, [pc, #376]	@ 8000b58 <main+0x1cc>
 80009e0:	eddf 2a5e 	vldr	s5, [pc, #376]	@ 8000b5c <main+0x1d0>
 80009e4:	ed97 2a07 	vldr	s4, [r7, #28]
 80009e8:	eddf 1a59 	vldr	s3, [pc, #356]	@ 8000b50 <main+0x1c4>
 80009ec:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 80009f0:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8000b60 <main+0x1d4>
 80009f4:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 8000b64 <main+0x1d8>
 80009f8:	485b      	ldr	r0, [pc, #364]	@ (8000b68 <main+0x1dc>)
 80009fa:	f7ff fe84 	bl	8000706 <pidControllersInit>
  pidControllersInit(&pitch, 20, 15,5, 0.1,sample,0.1,-0.1);
 80009fe:	ed9f 3a53 	vldr	s6, [pc, #332]	@ 8000b4c <main+0x1c0>
 8000a02:	eddf 2a53 	vldr	s5, [pc, #332]	@ 8000b50 <main+0x1c4>
 8000a06:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a0a:	eddf 1a51 	vldr	s3, [pc, #324]	@ 8000b50 <main+0x1c4>
 8000a0e:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000a12:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8000a16:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000a1a:	4854      	ldr	r0, [pc, #336]	@ (8000b6c <main+0x1e0>)
 8000a1c:	f7ff fe73 	bl	8000706 <pidControllersInit>
  pidControllersInit(&pitch_rate, 100, 50,10, 0.1,sample,1500,-1500);
 8000a20:	ed9f 3a4d 	vldr	s6, [pc, #308]	@ 8000b58 <main+0x1cc>
 8000a24:	eddf 2a4d 	vldr	s5, [pc, #308]	@ 8000b5c <main+0x1d0>
 8000a28:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a2c:	eddf 1a48 	vldr	s3, [pc, #288]	@ 8000b50 <main+0x1c4>
 8000a30:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000a34:	eddf 0a4a 	vldr	s1, [pc, #296]	@ 8000b60 <main+0x1d4>
 8000a38:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 8000b64 <main+0x1d8>
 8000a3c:	484c      	ldr	r0, [pc, #304]	@ (8000b70 <main+0x1e4>)
 8000a3e:	f7ff fe62 	bl	8000706 <pidControllersInit>
  pidControllersInit(&roll, 20, 15,5 ,0.1,sample,0.1,-0.1);
 8000a42:	ed9f 3a42 	vldr	s6, [pc, #264]	@ 8000b4c <main+0x1c0>
 8000a46:	eddf 2a42 	vldr	s5, [pc, #264]	@ 8000b50 <main+0x1c4>
 8000a4a:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a4e:	eddf 1a40 	vldr	s3, [pc, #256]	@ 8000b50 <main+0x1c4>
 8000a52:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000a56:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8000a5a:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000a5e:	4845      	ldr	r0, [pc, #276]	@ (8000b74 <main+0x1e8>)
 8000a60:	f7ff fe51 	bl	8000706 <pidControllersInit>
  pidControllersInit(&roll_rate, 100, 50,10, 0.1,sample,1500,-1500);
 8000a64:	ed9f 3a3c 	vldr	s6, [pc, #240]	@ 8000b58 <main+0x1cc>
 8000a68:	eddf 2a3c 	vldr	s5, [pc, #240]	@ 8000b5c <main+0x1d0>
 8000a6c:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a70:	eddf 1a37 	vldr	s3, [pc, #220]	@ 8000b50 <main+0x1c4>
 8000a74:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000a78:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8000b60 <main+0x1d4>
 8000a7c:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8000b64 <main+0x1d8>
 8000a80:	483d      	ldr	r0, [pc, #244]	@ (8000b78 <main+0x1ec>)
 8000a82:	f7ff fe40 	bl	8000706 <pidControllersInit>
  pidControllersInit(&high, 50, 25,10 ,0.1,sample,6000,0);
 8000a86:	ed9f 3a3d 	vldr	s6, [pc, #244]	@ 8000b7c <main+0x1f0>
 8000a8a:	eddf 2a3d 	vldr	s5, [pc, #244]	@ 8000b80 <main+0x1f4>
 8000a8e:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a92:	eddf 1a2f 	vldr	s3, [pc, #188]	@ 8000b50 <main+0x1c4>
 8000a96:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000a9a:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 8000a9e:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8000b60 <main+0x1d4>
 8000aa2:	4838      	ldr	r0, [pc, #224]	@ (8000b84 <main+0x1f8>)
 8000aa4:	f7ff fe2f 	bl	8000706 <pidControllersInit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4837      	ldr	r0, [pc, #220]	@ (8000b88 <main+0x1fc>)
 8000aac:	f002 fe28 	bl	8003700 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	4835      	ldr	r0, [pc, #212]	@ (8000b88 <main+0x1fc>)
 8000ab4:	f002 fe24 	bl	8003700 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000ab8:	2108      	movs	r1, #8
 8000aba:	4833      	ldr	r0, [pc, #204]	@ (8000b88 <main+0x1fc>)
 8000abc:	f002 fe20 	bl	8003700 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000ac0:	210c      	movs	r1, #12
 8000ac2:	4831      	ldr	r0, [pc, #196]	@ (8000b88 <main+0x1fc>)
 8000ac4:	f002 fe1c 	bl	8003700 <HAL_TIM_PWM_Start>
//  Calibration(&htim2);
  nRF_WriteOneRegister(&hspi1, RX_PW_P1, 8);
 8000ac8:	2208      	movs	r2, #8
 8000aca:	2112      	movs	r1, #18
 8000acc:	482f      	ldr	r0, [pc, #188]	@ (8000b8c <main+0x200>)
 8000ace:	f000 fc01 	bl	80012d4 <nRF_WriteOneRegister>
  RX_Enhanced_ShockBurst_Config(&hspi1);
 8000ad2:	482e      	ldr	r0, [pc, #184]	@ (8000b8c <main+0x200>)
 8000ad4:	f000 fcca 	bl	800146c <RX_Enhanced_ShockBurst_Config>
  Set_CE_Low();
 8000ad8:	f000 fbe0 	bl	800129c <Set_CE_Low>
  nRF_WriteOneRegister(&hspi1, EN_RXADDR, 3);
 8000adc:	2203      	movs	r2, #3
 8000ade:	2102      	movs	r1, #2
 8000ae0:	482a      	ldr	r0, [pc, #168]	@ (8000b8c <main+0x200>)
 8000ae2:	f000 fbf7 	bl	80012d4 <nRF_WriteOneRegister>
  Set_CE_High();
 8000ae6:	f000 fbcd 	bl	8001284 <Set_CE_High>
  HAL_TIM_Base_Start_IT(&htim3);
 8000aea:	4829      	ldr	r0, [pc, #164]	@ (8000b90 <main+0x204>)
 8000aec:	f002 fd56 	bl	800359c <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000af0:	4b28      	ldr	r3, [pc, #160]	@ (8000b94 <main+0x208>)
 8000af2:	463c      	mov	r4, r7
 8000af4:	461d      	mov	r5, r3
 8000af6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000afe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b02:	463b      	mov	r3, r7
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f003 fcbf 	bl	800448a <osThreadCreate>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4a22      	ldr	r2, [pc, #136]	@ (8000b98 <main+0x20c>)
 8000b10:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(ESC_Task, "ESC", 128,NULL,1, &ESC_Handle);
 8000b12:	4b22      	ldr	r3, [pc, #136]	@ (8000b9c <main+0x210>)
 8000b14:	9301      	str	r3, [sp, #4]
 8000b16:	2301      	movs	r3, #1
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	2280      	movs	r2, #128	@ 0x80
 8000b1e:	4920      	ldr	r1, [pc, #128]	@ (8000ba0 <main+0x214>)
 8000b20:	4820      	ldr	r0, [pc, #128]	@ (8000ba4 <main+0x218>)
 8000b22:	f003 fe26 	bl	8004772 <xTaskCreate>
  xTaskCreate(NRF_Task, "NRF", 256, NULL, 2, &NRF_Handle);
 8000b26:	4b20      	ldr	r3, [pc, #128]	@ (8000ba8 <main+0x21c>)
 8000b28:	9301      	str	r3, [sp, #4]
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b34:	491d      	ldr	r1, [pc, #116]	@ (8000bac <main+0x220>)
 8000b36:	481e      	ldr	r0, [pc, #120]	@ (8000bb0 <main+0x224>)
 8000b38:	f003 fe1b 	bl	8004772 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b3c:	f003 fc9e 	bl	800447c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <main+0x1b4>
 8000b44:	40020800 	.word	0x40020800
 8000b48:	3a83126f 	.word	0x3a83126f
 8000b4c:	bdcccccd 	.word	0xbdcccccd
 8000b50:	3dcccccd 	.word	0x3dcccccd
 8000b54:	200005ac 	.word	0x200005ac
 8000b58:	c4bb8000 	.word	0xc4bb8000
 8000b5c:	44bb8000 	.word	0x44bb8000
 8000b60:	42480000 	.word	0x42480000
 8000b64:	42c80000 	.word	0x42c80000
 8000b68:	20000600 	.word	0x20000600
 8000b6c:	2000045c 	.word	0x2000045c
 8000b70:	200004b0 	.word	0x200004b0
 8000b74:	20000504 	.word	0x20000504
 8000b78:	20000558 	.word	0x20000558
 8000b7c:	00000000 	.word	0x00000000
 8000b80:	45bb8000 	.word	0x45bb8000
 8000b84:	20000654 	.word	0x20000654
 8000b88:	20000374 	.word	0x20000374
 8000b8c:	2000031c 	.word	0x2000031c
 8000b90:	200003bc 	.word	0x200003bc
 8000b94:	0800637c 	.word	0x0800637c
 8000b98:	20000404 	.word	0x20000404
 8000b9c:	200006f8 	.word	0x200006f8
 8000ba0:	08006368 	.word	0x08006368
 8000ba4:	08000fad 	.word	0x08000fad
 8000ba8:	200006fc 	.word	0x200006fc
 8000bac:	0800636c 	.word	0x0800636c
 8000bb0:	08001199 	.word	0x08001199

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b094      	sub	sp, #80	@ 0x50
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 0320 	add.w	r3, r7, #32
 8000bbe:	2230      	movs	r2, #48	@ 0x30
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f004 feee 	bl	80059a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	4b27      	ldr	r3, [pc, #156]	@ (8000c7c <SystemClock_Config+0xc8>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be0:	4a26      	ldr	r2, [pc, #152]	@ (8000c7c <SystemClock_Config+0xc8>)
 8000be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be8:	4b24      	ldr	r3, [pc, #144]	@ (8000c7c <SystemClock_Config+0xc8>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	4b21      	ldr	r3, [pc, #132]	@ (8000c80 <SystemClock_Config+0xcc>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a20      	ldr	r2, [pc, #128]	@ (8000c80 <SystemClock_Config+0xcc>)
 8000bfe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c02:	6013      	str	r3, [r2, #0]
 8000c04:	4b1e      	ldr	r3, [pc, #120]	@ (8000c80 <SystemClock_Config+0xcc>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c10:	2301      	movs	r3, #1
 8000c12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c24:	2319      	movs	r3, #25
 8000c26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c28:	23a8      	movs	r3, #168	@ 0xa8
 8000c2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c30:	2304      	movs	r3, #4
 8000c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c34:	f107 0320 	add.w	r3, r7, #32
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f001 fa17 	bl	800206c <HAL_RCC_OscConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c44:	f000 fb00 	bl	8001248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c48:	230f      	movs	r3, #15
 8000c4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	2102      	movs	r1, #2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f001 fc79 	bl	800255c <HAL_RCC_ClockConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c70:	f000 faea 	bl	8001248 <Error_Handler>
  }
}
 8000c74:	bf00      	nop
 8000c76:	3750      	adds	r7, #80	@ 0x50
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40007000 	.word	0x40007000

08000c84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c88:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <MX_SPI1_Init+0x64>)
 8000c8a:	4a18      	ldr	r2, [pc, #96]	@ (8000cec <MX_SPI1_Init+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <MX_SPI1_Init+0x64>)
 8000c90:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c96:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <MX_SPI1_Init+0x64>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <MX_SPI1_Init+0x64>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <MX_SPI1_Init+0x64>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <MX_SPI1_Init+0x64>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <MX_SPI1_Init+0x64>)
 8000cb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <MX_SPI1_Init+0x64>)
 8000cb8:	2210      	movs	r2, #16
 8000cba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <MX_SPI1_Init+0x64>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <MX_SPI1_Init+0x64>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <MX_SPI1_Init+0x64>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <MX_SPI1_Init+0x64>)
 8000cd0:	220a      	movs	r2, #10
 8000cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cd4:	4804      	ldr	r0, [pc, #16]	@ (8000ce8 <MX_SPI1_Init+0x64>)
 8000cd6:	f001 fe3f 	bl	8002958 <HAL_SPI_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ce0:	f000 fab2 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	2000031c 	.word	0x2000031c
 8000cec:	40013000 	.word	0x40013000

08000cf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	@ 0x28
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf6:	f107 0320 	add.w	r3, r7, #32
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]
 8000d0e:	615a      	str	r2, [r3, #20]
 8000d10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d12:	4b33      	ldr	r3, [pc, #204]	@ (8000de0 <MX_TIM2_Init+0xf0>)
 8000d14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d1a:	4b31      	ldr	r3, [pc, #196]	@ (8000de0 <MX_TIM2_Init+0xf0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b2f      	ldr	r3, [pc, #188]	@ (8000de0 <MX_TIM2_Init+0xf0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d26:	4b2e      	ldr	r3, [pc, #184]	@ (8000de0 <MX_TIM2_Init+0xf0>)
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000de0 <MX_TIM2_Init+0xf0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d34:	4b2a      	ldr	r3, [pc, #168]	@ (8000de0 <MX_TIM2_Init+0xf0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d3a:	4829      	ldr	r0, [pc, #164]	@ (8000de0 <MX_TIM2_Init+0xf0>)
 8000d3c:	f002 fc90 	bl	8003660 <HAL_TIM_PWM_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000d46:	f000 fa7f 	bl	8001248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d52:	f107 0320 	add.w	r3, r7, #32
 8000d56:	4619      	mov	r1, r3
 8000d58:	4821      	ldr	r0, [pc, #132]	@ (8000de0 <MX_TIM2_Init+0xf0>)
 8000d5a:	f003 faf5 	bl	8004348 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d64:	f000 fa70 	bl	8001248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d68:	2360      	movs	r3, #96	@ 0x60
 8000d6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4818      	ldr	r0, [pc, #96]	@ (8000de0 <MX_TIM2_Init+0xf0>)
 8000d80:	f002 fe5e 	bl	8003a40 <HAL_TIM_PWM_ConfigChannel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000d8a:	f000 fa5d 	bl	8001248 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2204      	movs	r2, #4
 8000d92:	4619      	mov	r1, r3
 8000d94:	4812      	ldr	r0, [pc, #72]	@ (8000de0 <MX_TIM2_Init+0xf0>)
 8000d96:	f002 fe53 	bl	8003a40 <HAL_TIM_PWM_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000da0:	f000 fa52 	bl	8001248 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2208      	movs	r2, #8
 8000da8:	4619      	mov	r1, r3
 8000daa:	480d      	ldr	r0, [pc, #52]	@ (8000de0 <MX_TIM2_Init+0xf0>)
 8000dac:	f002 fe48 	bl	8003a40 <HAL_TIM_PWM_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000db6:	f000 fa47 	bl	8001248 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	220c      	movs	r2, #12
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4807      	ldr	r0, [pc, #28]	@ (8000de0 <MX_TIM2_Init+0xf0>)
 8000dc2:	f002 fe3d 	bl	8003a40 <HAL_TIM_PWM_ConfigChannel>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000dcc:	f000 fa3c 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dd0:	4803      	ldr	r0, [pc, #12]	@ (8000de0 <MX_TIM2_Init+0xf0>)
 8000dd2:	f000 fce7 	bl	80017a4 <HAL_TIM_MspPostInit>

}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	@ 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000374 	.word	0x20000374

08000de4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dea:	f107 0308 	add.w	r3, r7, #8
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df8:	463b      	mov	r3, r7
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e00:	4b1d      	ldr	r3, [pc, #116]	@ (8000e78 <MX_TIM3_Init+0x94>)
 8000e02:	4a1e      	ldr	r2, [pc, #120]	@ (8000e7c <MX_TIM3_Init+0x98>)
 8000e04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000e06:	4b1c      	ldr	r3, [pc, #112]	@ (8000e78 <MX_TIM3_Init+0x94>)
 8000e08:	2253      	movs	r2, #83	@ 0x53
 8000e0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <MX_TIM3_Init+0x94>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000e12:	4b19      	ldr	r3, [pc, #100]	@ (8000e78 <MX_TIM3_Init+0x94>)
 8000e14:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	@ (8000e78 <MX_TIM3_Init+0x94>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e20:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <MX_TIM3_Init+0x94>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e26:	4814      	ldr	r0, [pc, #80]	@ (8000e78 <MX_TIM3_Init+0x94>)
 8000e28:	f002 fb68 	bl	80034fc <HAL_TIM_Base_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e32:	f000 fa09 	bl	8001248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e3c:	f107 0308 	add.w	r3, r7, #8
 8000e40:	4619      	mov	r1, r3
 8000e42:	480d      	ldr	r0, [pc, #52]	@ (8000e78 <MX_TIM3_Init+0x94>)
 8000e44:	f002 febe 	bl	8003bc4 <HAL_TIM_ConfigClockSource>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f000 f9fb 	bl	8001248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4806      	ldr	r0, [pc, #24]	@ (8000e78 <MX_TIM3_Init+0x94>)
 8000e60:	f003 fa72 	bl	8004348 <HAL_TIMEx_MasterConfigSynchronization>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e6a:	f000 f9ed 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200003bc 	.word	0x200003bc
 8000e7c:	40000400 	.word	0x40000400

08000e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	@ 0x28
 8000e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	4b40      	ldr	r3, [pc, #256]	@ (8000f9c <MX_GPIO_Init+0x11c>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a3f      	ldr	r2, [pc, #252]	@ (8000f9c <MX_GPIO_Init+0x11c>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b3d      	ldr	r3, [pc, #244]	@ (8000f9c <MX_GPIO_Init+0x11c>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b39      	ldr	r3, [pc, #228]	@ (8000f9c <MX_GPIO_Init+0x11c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a38      	ldr	r2, [pc, #224]	@ (8000f9c <MX_GPIO_Init+0x11c>)
 8000ebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b36      	ldr	r3, [pc, #216]	@ (8000f9c <MX_GPIO_Init+0x11c>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	4b32      	ldr	r3, [pc, #200]	@ (8000f9c <MX_GPIO_Init+0x11c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a31      	ldr	r2, [pc, #196]	@ (8000f9c <MX_GPIO_Init+0x11c>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b2f      	ldr	r3, [pc, #188]	@ (8000f9c <MX_GPIO_Init+0x11c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b2b      	ldr	r3, [pc, #172]	@ (8000f9c <MX_GPIO_Init+0x11c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a2a      	ldr	r2, [pc, #168]	@ (8000f9c <MX_GPIO_Init+0x11c>)
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b28      	ldr	r3, [pc, #160]	@ (8000f9c <MX_GPIO_Init+0x11c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f0c:	4824      	ldr	r0, [pc, #144]	@ (8000fa0 <MX_GPIO_Init+0x120>)
 8000f0e:	f001 f879 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2110      	movs	r1, #16
 8000f16:	4823      	ldr	r0, [pc, #140]	@ (8000fa4 <MX_GPIO_Init+0x124>)
 8000f18:	f001 f874 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2101      	movs	r1, #1
 8000f20:	4821      	ldr	r0, [pc, #132]	@ (8000fa8 <MX_GPIO_Init+0x128>)
 8000f22:	f001 f86f 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4818      	ldr	r0, [pc, #96]	@ (8000fa0 <MX_GPIO_Init+0x120>)
 8000f40:	f000 fec4 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f44:	2310      	movs	r3, #16
 8000f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4812      	ldr	r0, [pc, #72]	@ (8000fa4 <MX_GPIO_Init+0x124>)
 8000f5c:	f000 feb6 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f60:	2301      	movs	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	480c      	ldr	r0, [pc, #48]	@ (8000fa8 <MX_GPIO_Init+0x128>)
 8000f78:	f000 fea8 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4806      	ldr	r0, [pc, #24]	@ (8000fa8 <MX_GPIO_Init+0x128>)
 8000f90:	f000 fe9c 	bl	8001ccc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	@ 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	40020400 	.word	0x40020400

08000fac <ESC_Task>:

/* USER CODE BEGIN 4 */
void ESC_Task(void *argument)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

	while(1)
	{
		if(timer3_flag==1)
 8000fb4:	4b6c      	ldr	r3, [pc, #432]	@ (8001168 <ESC_Task+0x1bc>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d1fb      	bne.n	8000fb4 <ESC_Task+0x8>
		{
			/*
			 * get picth measurement
			 */
			Calculate_Reference(&calculation, &control);
 8000fbc:	496b      	ldr	r1, [pc, #428]	@ (800116c <ESC_Task+0x1c0>)
 8000fbe:	486c      	ldr	r0, [pc, #432]	@ (8001170 <ESC_Task+0x1c4>)
 8000fc0:	f7ff fad6 	bl	8000570 <Calculate_Reference>
			pidUpdate(&pitch, calculation.picth_measurement, calculation.picth_reference);
 8000fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8001170 <ESC_Task+0x1c4>)
 8000fc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fca:	4b69      	ldr	r3, [pc, #420]	@ (8001170 <ESC_Task+0x1c4>)
 8000fcc:	ed93 7a00 	vldr	s14, [r3]
 8000fd0:	eef0 0a47 	vmov.f32	s1, s14
 8000fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd8:	4866      	ldr	r0, [pc, #408]	@ (8001174 <ESC_Task+0x1c8>)
 8000fda:	f7ff fbed 	bl	80007b8 <pidUpdate>
			/*
			 * get picth rate measuremet
			 */
			calculation.picth_rate_reference=pitch.u;
 8000fde:	4b65      	ldr	r3, [pc, #404]	@ (8001174 <ESC_Task+0x1c8>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	4a63      	ldr	r2, [pc, #396]	@ (8001170 <ESC_Task+0x1c4>)
 8000fe4:	6193      	str	r3, [r2, #24]
			pidUpdate(&pitch_rate, calculation.picth_rate_measurement, calculation.picth_rate_reference);
 8000fe6:	4b62      	ldr	r3, [pc, #392]	@ (8001170 <ESC_Task+0x1c4>)
 8000fe8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000fec:	4b60      	ldr	r3, [pc, #384]	@ (8001170 <ESC_Task+0x1c4>)
 8000fee:	ed93 7a06 	vldr	s14, [r3, #24]
 8000ff2:	eef0 0a47 	vmov.f32	s1, s14
 8000ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffa:	485f      	ldr	r0, [pc, #380]	@ (8001178 <ESC_Task+0x1cc>)
 8000ffc:	f7ff fbdc 	bl	80007b8 <pidUpdate>

			/*
			 * get roll measurement
			 */
			pidUpdate(&roll, calculation.roll_measurement, calculation.roll_reference);
 8001000:	4b5b      	ldr	r3, [pc, #364]	@ (8001170 <ESC_Task+0x1c4>)
 8001002:	edd3 7a04 	vldr	s15, [r3, #16]
 8001006:	4b5a      	ldr	r3, [pc, #360]	@ (8001170 <ESC_Task+0x1c4>)
 8001008:	ed93 7a01 	vldr	s14, [r3, #4]
 800100c:	eef0 0a47 	vmov.f32	s1, s14
 8001010:	eeb0 0a67 	vmov.f32	s0, s15
 8001014:	4859      	ldr	r0, [pc, #356]	@ (800117c <ESC_Task+0x1d0>)
 8001016:	f7ff fbcf 	bl	80007b8 <pidUpdate>
			/*
			 * get roll rate measurement
			 */
			calculation.roll_rate_reference=roll.u;
 800101a:	4b58      	ldr	r3, [pc, #352]	@ (800117c <ESC_Task+0x1d0>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101e:	4a54      	ldr	r2, [pc, #336]	@ (8001170 <ESC_Task+0x1c4>)
 8001020:	61d3      	str	r3, [r2, #28]
			pidUpdate(&roll_rate, calculation.roll_rate_measurement, calculation.roll_rate_reference);
 8001022:	4b53      	ldr	r3, [pc, #332]	@ (8001170 <ESC_Task+0x1c4>)
 8001024:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001028:	4b51      	ldr	r3, [pc, #324]	@ (8001170 <ESC_Task+0x1c4>)
 800102a:	ed93 7a07 	vldr	s14, [r3, #28]
 800102e:	eef0 0a47 	vmov.f32	s1, s14
 8001032:	eeb0 0a67 	vmov.f32	s0, s15
 8001036:	4852      	ldr	r0, [pc, #328]	@ (8001180 <ESC_Task+0x1d4>)
 8001038:	f7ff fbbe 	bl	80007b8 <pidUpdate>
			/*
			 * get yaw measurement
			 */
			pidUpdate(&yaw, calculation.yaw_measurement, calculation.yaw_reference);
 800103c:	4b4c      	ldr	r3, [pc, #304]	@ (8001170 <ESC_Task+0x1c4>)
 800103e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001042:	4b4b      	ldr	r3, [pc, #300]	@ (8001170 <ESC_Task+0x1c4>)
 8001044:	ed93 7a02 	vldr	s14, [r3, #8]
 8001048:	eef0 0a47 	vmov.f32	s1, s14
 800104c:	eeb0 0a67 	vmov.f32	s0, s15
 8001050:	484c      	ldr	r0, [pc, #304]	@ (8001184 <ESC_Task+0x1d8>)
 8001052:	f7ff fbb1 	bl	80007b8 <pidUpdate>
			/*
			* get yaw measurement
			*/
			calculation.yaw_rate_reference=yaw.u;
 8001056:	4b4b      	ldr	r3, [pc, #300]	@ (8001184 <ESC_Task+0x1d8>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105a:	4a45      	ldr	r2, [pc, #276]	@ (8001170 <ESC_Task+0x1c4>)
 800105c:	6213      	str	r3, [r2, #32]
			pidUpdate(&yaw_rate, calculation.yaw_rate_measurement, calculation.yaw_rate_reference);
 800105e:	4b44      	ldr	r3, [pc, #272]	@ (8001170 <ESC_Task+0x1c4>)
 8001060:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001064:	4b42      	ldr	r3, [pc, #264]	@ (8001170 <ESC_Task+0x1c4>)
 8001066:	ed93 7a08 	vldr	s14, [r3, #32]
 800106a:	eef0 0a47 	vmov.f32	s1, s14
 800106e:	eeb0 0a67 	vmov.f32	s0, s15
 8001072:	4845      	ldr	r0, [pc, #276]	@ (8001188 <ESC_Task+0x1dc>)
 8001074:	f7ff fba0 	bl	80007b8 <pidUpdate>
			/*
			* get high measurement and high reference
			*/
			pidUpdate(&high, calculation.high_measurement, calculation.high_reference);
 8001078:	4b3d      	ldr	r3, [pc, #244]	@ (8001170 <ESC_Task+0x1c4>)
 800107a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800107e:	4b3c      	ldr	r3, [pc, #240]	@ (8001170 <ESC_Task+0x1c4>)
 8001080:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001084:	eef0 0a47 	vmov.f32	s1, s14
 8001088:	eeb0 0a67 	vmov.f32	s0, s15
 800108c:	483f      	ldr	r0, [pc, #252]	@ (800118c <ESC_Task+0x1e0>)
 800108e:	f7ff fb93 	bl	80007b8 <pidUpdate>

			speed.speed1=-pitch_rate.u+roll_rate.u-yaw_rate.u+high.u;
 8001092:	4b3b      	ldr	r3, [pc, #236]	@ (8001180 <ESC_Task+0x1d4>)
 8001094:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8001098:	4b37      	ldr	r3, [pc, #220]	@ (8001178 <ESC_Task+0x1cc>)
 800109a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800109e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010a2:	4b39      	ldr	r3, [pc, #228]	@ (8001188 <ESC_Task+0x1dc>)
 80010a4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80010a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010ac:	4b37      	ldr	r3, [pc, #220]	@ (800118c <ESC_Task+0x1e0>)
 80010ae:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80010b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ba:	ee17 2a90 	vmov	r2, s15
 80010be:	4b34      	ldr	r3, [pc, #208]	@ (8001190 <ESC_Task+0x1e4>)
 80010c0:	601a      	str	r2, [r3, #0]
			speed.speed2=+pitch_rate.u+roll_rate.u+yaw_rate.u+high.u;
 80010c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001178 <ESC_Task+0x1cc>)
 80010c4:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80010c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001180 <ESC_Task+0x1d4>)
 80010ca:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80010ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001188 <ESC_Task+0x1dc>)
 80010d4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80010d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010dc:	4b2b      	ldr	r3, [pc, #172]	@ (800118c <ESC_Task+0x1e0>)
 80010de:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80010e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ea:	ee17 2a90 	vmov	r2, s15
 80010ee:	4b28      	ldr	r3, [pc, #160]	@ (8001190 <ESC_Task+0x1e4>)
 80010f0:	605a      	str	r2, [r3, #4]
			speed.speed3=+pitch_rate.u-roll_rate.u-yaw_rate.u+high.u;
 80010f2:	4b21      	ldr	r3, [pc, #132]	@ (8001178 <ESC_Task+0x1cc>)
 80010f4:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80010f8:	4b21      	ldr	r3, [pc, #132]	@ (8001180 <ESC_Task+0x1d4>)
 80010fa:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80010fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001102:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <ESC_Task+0x1dc>)
 8001104:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001108:	ee37 7a67 	vsub.f32	s14, s14, s15
 800110c:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <ESC_Task+0x1e0>)
 800110e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800111a:	ee17 2a90 	vmov	r2, s15
 800111e:	4b1c      	ldr	r3, [pc, #112]	@ (8001190 <ESC_Task+0x1e4>)
 8001120:	609a      	str	r2, [r3, #8]
			speed.speed4=-pitch_rate.u-roll_rate.u-yaw_rate.u+high.u;
 8001122:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <ESC_Task+0x1cc>)
 8001124:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001128:	eeb1 7a67 	vneg.f32	s14, s15
 800112c:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <ESC_Task+0x1d4>)
 800112e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001132:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001136:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <ESC_Task+0x1dc>)
 8001138:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800113c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <ESC_Task+0x1e0>)
 8001142:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800114a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800114e:	ee17 2a90 	vmov	r2, s15
 8001152:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <ESC_Task+0x1e4>)
 8001154:	60da      	str	r2, [r3, #12]


			Control4Motor(&htim2, &speed);
 8001156:	490e      	ldr	r1, [pc, #56]	@ (8001190 <ESC_Task+0x1e4>)
 8001158:	480e      	ldr	r0, [pc, #56]	@ (8001194 <ESC_Task+0x1e8>)
 800115a:	f7ff faaf 	bl	80006bc <Control4Motor>
			timer3_flag=0;
 800115e:	4b02      	ldr	r3, [pc, #8]	@ (8001168 <ESC_Task+0x1bc>)
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
		if(timer3_flag==1)
 8001164:	e726      	b.n	8000fb4 <ESC_Task+0x8>
 8001166:	bf00      	nop
 8001168:	20000448 	.word	0x20000448
 800116c:	200006e0 	.word	0x200006e0
 8001170:	200006a8 	.word	0x200006a8
 8001174:	2000045c 	.word	0x2000045c
 8001178:	200004b0 	.word	0x200004b0
 800117c:	20000504 	.word	0x20000504
 8001180:	20000558 	.word	0x20000558
 8001184:	200005ac 	.word	0x200005ac
 8001188:	20000600 	.word	0x20000600
 800118c:	20000654 	.word	0x20000654
 8001190:	2000044c 	.word	0x2000044c
 8001194:	20000374 	.word	0x20000374

08001198 <NRF_Task>:

	}
}

void NRF_Task(void *argument)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		sprintf((char*)spi_tx,"87654321");
 80011a0:	490d      	ldr	r1, [pc, #52]	@ (80011d8 <NRF_Task+0x40>)
 80011a2:	480e      	ldr	r0, [pc, #56]	@ (80011dc <NRF_Task+0x44>)
 80011a4:	f004 fbde 	bl	8005964 <siprintf>
		if(RX_Communication(&hspi1, spi_rx)==STATUS_RX_OK)
 80011a8:	490d      	ldr	r1, [pc, #52]	@ (80011e0 <NRF_Task+0x48>)
 80011aa:	480e      	ldr	r0, [pc, #56]	@ (80011e4 <NRF_Task+0x4c>)
 80011ac:	f000 f9f4 	bl	8001598 <RX_Communication>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d102      	bne.n	80011bc <NRF_Task+0x24>
		{
			Select_Tx_Mode_RTOS(&hspi1);
 80011b6:	480b      	ldr	r0, [pc, #44]	@ (80011e4 <NRF_Task+0x4c>)
 80011b8:	f000 f93c 	bl	8001434 <Select_Tx_Mode_RTOS>
		}
		if (TX_Communication(&hspi1,spi_tx)==STATUS_TX_OK)
 80011bc:	4907      	ldr	r1, [pc, #28]	@ (80011dc <NRF_Task+0x44>)
 80011be:	4809      	ldr	r0, [pc, #36]	@ (80011e4 <NRF_Task+0x4c>)
 80011c0:	f000 f9a6 	bl	8001510 <TX_Communication>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d102      	bne.n	80011d0 <NRF_Task+0x38>
		{
			Select_Rx_Mode_RTOS(&hspi1);
 80011ca:	4806      	ldr	r0, [pc, #24]	@ (80011e4 <NRF_Task+0x4c>)
 80011cc:	f000 f980 	bl	80014d0 <Select_Rx_Mode_RTOS>
		}
		vTaskDelay(pdMS_TO_TICKS(10));
 80011d0:	200a      	movs	r0, #10
 80011d2:	f003 fc1d 	bl	8004a10 <vTaskDelay>
		sprintf((char*)spi_tx,"87654321");
 80011d6:	e7e3      	b.n	80011a0 <NRF_Task+0x8>
 80011d8:	08006398 	.word	0x08006398
 80011dc:	20000428 	.word	0x20000428
 80011e0:	20000408 	.word	0x20000408
 80011e4:	2000031c 	.word	0x2000031c

080011e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80011f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011f4:	4804      	ldr	r0, [pc, #16]	@ (8001208 <StartDefaultTask+0x20>)
 80011f6:	f000 ff1e 	bl	8002036 <HAL_GPIO_TogglePin>
    osDelay(500);
 80011fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011fe:	f003 f990 	bl	8004522 <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001202:	bf00      	nop
 8001204:	e7f4      	b.n	80011f0 <StartDefaultTask+0x8>
 8001206:	bf00      	nop
 8001208:	40020800 	.word	0x40020800

0800120c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a08      	ldr	r2, [pc, #32]	@ (800123c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d101      	bne.n	8001222 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800121e:	f000 fc2f 	bl	8001a80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance==TIM3)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a06      	ldr	r2, [pc, #24]	@ (8001240 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d102      	bne.n	8001232 <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	  timer3_flag=1;
 800122c:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END Callback 1 */
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40010000 	.word	0x40010000
 8001240:	40000400 	.word	0x40000400
 8001244:	20000448 	.word	0x20000448

08001248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
}
 800124e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <Error_Handler+0x8>

08001254 <Chip_Select>:
#include "nRF24L01.h"

NRF_MODE nrfmode;

void Chip_Select()
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO, CHIP_SELECT_PIN, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2110      	movs	r1, #16
 800125c:	4802      	ldr	r0, [pc, #8]	@ (8001268 <Chip_Select+0x14>)
 800125e:	f000 fed1 	bl	8002004 <HAL_GPIO_WritePin>
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40020000 	.word	0x40020000

0800126c <Chip_Deselect>:

void Chip_Deselect()
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO, CHIP_SELECT_PIN, 1);
 8001270:	2201      	movs	r2, #1
 8001272:	2110      	movs	r1, #16
 8001274:	4802      	ldr	r0, [pc, #8]	@ (8001280 <Chip_Deselect+0x14>)
 8001276:	f000 fec5 	bl	8002004 <HAL_GPIO_WritePin>
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40020000 	.word	0x40020000

08001284 <Set_CE_High>:

void Set_CE_High()
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CE_GPIO, CE_PIN, 1);
 8001288:	2201      	movs	r2, #1
 800128a:	2101      	movs	r1, #1
 800128c:	4802      	ldr	r0, [pc, #8]	@ (8001298 <Set_CE_High+0x14>)
 800128e:	f000 feb9 	bl	8002004 <HAL_GPIO_WritePin>
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40020400 	.word	0x40020400

0800129c <Set_CE_Low>:

void Set_CE_Low()
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CE_GPIO, CE_PIN, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2101      	movs	r1, #1
 80012a4:	4802      	ldr	r0, [pc, #8]	@ (80012b0 <Set_CE_Low+0x14>)
 80012a6:	f000 fead 	bl	8002004 <HAL_GPIO_WritePin>
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40020400 	.word	0x40020400

080012b4 <WaitForIRQ>:

void WaitForIRQ()
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(IRQ_GPIO, IRQ_PIN)==1)
 80012b8:	bf00      	nop
 80012ba:	2102      	movs	r1, #2
 80012bc:	4804      	ldr	r0, [pc, #16]	@ (80012d0 <WaitForIRQ+0x1c>)
 80012be:	f000 fe89 	bl	8001fd4 <HAL_GPIO_ReadPin>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d0f8      	beq.n	80012ba <WaitForIRQ+0x6>
		;
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40020400 	.word	0x40020400

080012d4 <nRF_WriteOneRegister>:
	HAL_SPI_Transmit(hspi, buff, (uint16_t)size+1, NRF_SPI_TIMEOUT);
	Chip_Deselect();
}

void nRF_WriteOneRegister(SPI_HandleTypeDef *hspi,uint8_t reg,uint8_t data)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	70fb      	strb	r3, [r7, #3]
 80012e0:	4613      	mov	r3, r2
 80012e2:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2];
	buff[0]=reg|(1<<5);
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	f043 0320 	orr.w	r3, r3, #32
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	733b      	strb	r3, [r7, #12]
	buff[1]=data;
 80012ee:	78bb      	ldrb	r3, [r7, #2]
 80012f0:	737b      	strb	r3, [r7, #13]
	Chip_Select();
 80012f2:	f7ff ffaf 	bl	8001254 <Chip_Select>
	HAL_SPI_Transmit(hspi, buff, 2, NRF_SPI_TIMEOUT);
 80012f6:	f107 010c 	add.w	r1, r7, #12
 80012fa:	2364      	movs	r3, #100	@ 0x64
 80012fc:	2202      	movs	r2, #2
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f001 fbb3 	bl	8002a6a <HAL_SPI_Transmit>
	Chip_Deselect();
 8001304:	f7ff ffb2 	bl	800126c <Chip_Deselect>
}
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <nRF_ReadOneRegister>:
	HAL_SPI_Receive(hspi, receive_data, size, NRF_SPI_TIMEOUT*10);
	Chip_Deselect();
}

void nRF_ReadOneRegister(SPI_HandleTypeDef *hspi,uint8_t reg,uint8_t *receive_data)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	460b      	mov	r3, r1
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	72fb      	strb	r3, [r7, #11]

	uint8_t buff=reg;
 800131e:	7afb      	ldrb	r3, [r7, #11]
 8001320:	75fb      	strb	r3, [r7, #23]
	Chip_Select();
 8001322:	f7ff ff97 	bl	8001254 <Chip_Select>
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8001326:	f107 0117 	add.w	r1, r7, #23
 800132a:	2364      	movs	r3, #100	@ 0x64
 800132c:	2201      	movs	r2, #1
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f001 fb9b 	bl	8002a6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, receive_data, 1, NRF_SPI_TIMEOUT);
 8001334:	2364      	movs	r3, #100	@ 0x64
 8001336:	2201      	movs	r2, #1
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f001 fcd9 	bl	8002cf2 <HAL_SPI_Receive>
	Chip_Deselect();
 8001340:	f7ff ff94 	bl	800126c <Chip_Deselect>

}
 8001344:	bf00      	nop
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <nRF_SendCmd>:
void nRF_SendCmd(SPI_HandleTypeDef *hspi,uint8_t cmd)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]

	uint8_t buff=cmd;
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	73fb      	strb	r3, [r7, #15]
	Chip_Select();
 800135c:	f7ff ff7a 	bl	8001254 <Chip_Select>
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8001360:	f107 010f 	add.w	r1, r7, #15
 8001364:	2364      	movs	r3, #100	@ 0x64
 8001366:	2201      	movs	r2, #1
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f001 fb7e 	bl	8002a6a <HAL_SPI_Transmit>
	Chip_Deselect();
 800136e:	f7ff ff7d 	bl	800126c <Chip_Deselect>
}
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <nRF_GetStatus>:

uint8_t nRF_GetStatus(SPI_HandleTypeDef *hspi)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b084      	sub	sp, #16
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]

	uint8_t buff=STATUS;
 8001382:	2307      	movs	r3, #7
 8001384:	73fb      	strb	r3, [r7, #15]
	uint8_t rx_data=0;
 8001386:	2300      	movs	r3, #0
 8001388:	73bb      	strb	r3, [r7, #14]
	Chip_Select();
 800138a:	f7ff ff63 	bl	8001254 <Chip_Select>
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 800138e:	f107 010f 	add.w	r1, r7, #15
 8001392:	2364      	movs	r3, #100	@ 0x64
 8001394:	2201      	movs	r2, #1
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f001 fb67 	bl	8002a6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &rx_data, 1, NRF_SPI_TIMEOUT*10);
 800139c:	f107 010e 	add.w	r1, r7, #14
 80013a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a4:	2201      	movs	r2, #1
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f001 fca3 	bl	8002cf2 <HAL_SPI_Receive>
	Chip_Deselect();
 80013ac:	f7ff ff5e 	bl	800126c <Chip_Deselect>
	return rx_data;
 80013b0:	7bbb      	ldrb	r3, [r7, #14]

}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <nRF_TX_Payload>:

void nRF_TX_Payload(SPI_HandleTypeDef *hspi,uint8_t *data, uint16_t size)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	4613      	mov	r3, r2
 80013c6:	80fb      	strh	r3, [r7, #6]
	Chip_Select();
 80013c8:	f7ff ff44 	bl	8001254 <Chip_Select>
	uint8_t buff=W_TX_PAYLOAD;
 80013cc:	23a0      	movs	r3, #160	@ 0xa0
 80013ce:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 80013d0:	f107 0117 	add.w	r1, r7, #23
 80013d4:	2364      	movs	r3, #100	@ 0x64
 80013d6:	2201      	movs	r2, #1
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f001 fb46 	bl	8002a6a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, data, size, NRF_SPI_TIMEOUT);
 80013de:	88fa      	ldrh	r2, [r7, #6]
 80013e0:	2364      	movs	r3, #100	@ 0x64
 80013e2:	68b9      	ldr	r1, [r7, #8]
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f001 fb40 	bl	8002a6a <HAL_SPI_Transmit>
	Chip_Deselect();
 80013ea:	f7ff ff3f 	bl	800126c <Chip_Deselect>
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <nRF_RX_Payload>:

void nRF_RX_Payload(SPI_HandleTypeDef *hspi,uint8_t *rx_data, uint16_t size)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	4613      	mov	r3, r2
 8001402:	80fb      	strh	r3, [r7, #6]
	Chip_Select();
 8001404:	f7ff ff26 	bl	8001254 <Chip_Select>
	uint8_t buff=R_RX_PAYLOAD;
 8001408:	2361      	movs	r3, #97	@ 0x61
 800140a:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 800140c:	f107 0117 	add.w	r1, r7, #23
 8001410:	2364      	movs	r3, #100	@ 0x64
 8001412:	2201      	movs	r2, #1
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f001 fb28 	bl	8002a6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, rx_data, size, NRF_SPI_TIMEOUT*10);
 800141a:	88fa      	ldrh	r2, [r7, #6]
 800141c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f001 fc65 	bl	8002cf2 <HAL_SPI_Receive>
	Chip_Deselect();
 8001428:	f7ff ff20 	bl	800126c <Chip_Deselect>
}
 800142c:	bf00      	nop
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <Select_Tx_Mode_RTOS>:
	HAL_Delay(2);
	nrfmode=MODE_TX;
}

void Select_Tx_Mode_RTOS(SPI_HandleTypeDef *hspi)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	uint8_t buff=0x0a;
 800143c:	230a      	movs	r3, #10
 800143e:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low();
 8001440:	f7ff ff2c 	bl	800129c <Set_CE_Low>
	CONFIG_REG_Write(hspi, buff);
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	4619      	mov	r1, r3
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f8d3 	bl	80015f4 <CONFIG_REG_Write>
	Set_CE_High();
 800144e:	f7ff ff19 	bl	8001284 <Set_CE_High>
	vTaskDelay(pdMS_TO_TICKS(2));
 8001452:	2002      	movs	r0, #2
 8001454:	f003 fadc 	bl	8004a10 <vTaskDelay>
	nrfmode=MODE_TX;
 8001458:	4b03      	ldr	r3, [pc, #12]	@ (8001468 <Select_Tx_Mode_RTOS+0x34>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000700 	.word	0x20000700

0800146c <RX_Enhanced_ShockBurst_Config>:

void RX_Enhanced_ShockBurst_Config(SPI_HandleTypeDef *hspi)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	uint8_t buff=0xb;
 8001474:	230b      	movs	r3, #11
 8001476:	73fb      	strb	r3, [r7, #15]
	CONFIG_REG_Write(hspi, buff);
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	4619      	mov	r1, r3
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 f8b9 	bl	80015f4 <CONFIG_REG_Write>
	nRF_WriteOneRegister(hspi, EN_RXADDR, 0x01);
 8001482:	2201      	movs	r2, #1
 8001484:	2102      	movs	r1, #2
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ff24 	bl	80012d4 <nRF_WriteOneRegister>
	nRF_WriteOneRegister(hspi, RX_PW_P0, 8);
 800148c:	2208      	movs	r2, #8
 800148e:	2111      	movs	r1, #17
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff1f 	bl	80012d4 <nRF_WriteOneRegister>
	nRF_WriteOneRegister(hspi, EN_AA, 0x00);
 8001496:	2200      	movs	r2, #0
 8001498:	2101      	movs	r1, #1
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ff1a 	bl	80012d4 <nRF_WriteOneRegister>
	nRF_WriteOneRegister(hspi,RF_SETUP, 0x7);
 80014a0:	2207      	movs	r2, #7
 80014a2:	2106      	movs	r1, #6
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff15 	bl	80012d4 <nRF_WriteOneRegister>
	Set_CE_High();
 80014aa:	f7ff feeb 	bl	8001284 <Set_CE_High>
	HAL_Delay(2);
 80014ae:	2002      	movs	r0, #2
 80014b0:	f000 fb06 	bl	8001ac0 <HAL_Delay>
	nRF_SendCmd(hspi, FLUSH_RX);
 80014b4:	21e2      	movs	r1, #226	@ 0xe2
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ff48 	bl	800134c <nRF_SendCmd>
	nrfmode=MODE_RX;
 80014bc:	4b03      	ldr	r3, [pc, #12]	@ (80014cc <RX_Enhanced_ShockBurst_Config+0x60>)
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]

}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000700 	.word	0x20000700

080014d0 <Select_Rx_Mode_RTOS>:
	nRF_SendCmd(hspi, FLUSH_RX);
	nrfmode=MODE_RX;
}

void Select_Rx_Mode_RTOS(SPI_HandleTypeDef *hspi)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	uint8_t buff=0x0b;
 80014d8:	230b      	movs	r3, #11
 80014da:	73fb      	strb	r3, [r7, #15]
	Set_CE_Low();
 80014dc:	f7ff fede 	bl	800129c <Set_CE_Low>
	CONFIG_REG_Write(hspi, buff);
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	4619      	mov	r1, r3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 f885 	bl	80015f4 <CONFIG_REG_Write>
	Set_CE_High();
 80014ea:	f7ff fecb 	bl	8001284 <Set_CE_High>
	vTaskDelay(pdMS_TO_TICKS(2));
 80014ee:	2002      	movs	r0, #2
 80014f0:	f003 fa8e 	bl	8004a10 <vTaskDelay>
	nRF_SendCmd(hspi, FLUSH_RX);
 80014f4:	21e2      	movs	r1, #226	@ 0xe2
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ff28 	bl	800134c <nRF_SendCmd>
	nrfmode=MODE_RX;
 80014fc:	4b03      	ldr	r3, [pc, #12]	@ (800150c <Select_Rx_Mode_RTOS+0x3c>)
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
}
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000700 	.word	0x20000700

08001510 <TX_Communication>:

}


uint8_t TX_Communication(SPI_HandleTypeDef *hspi,uint8_t *data)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
	if(nrfmode==MODE_TX)
 800151a:	4b1e      	ldr	r3, [pc, #120]	@ (8001594 <TX_Communication+0x84>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d133      	bne.n	800158a <TX_Communication+0x7a>
	{
		nRF_TX_Payload(hspi, data, 8);
 8001522:	2208      	movs	r2, #8
 8001524:	6839      	ldr	r1, [r7, #0]
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ff47 	bl	80013ba <nRF_TX_Payload>
		Set_CE_High();
 800152c:	f7ff feaa 	bl	8001284 <Set_CE_High>
		WaitForIRQ();
 8001530:	f7ff fec0 	bl	80012b4 <WaitForIRQ>
		nRF_SendCmd(hspi, FLUSH_TX);
 8001534:	21e1      	movs	r1, #225	@ 0xe1
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ff08 	bl	800134c <nRF_SendCmd>
		uint8_t status=nRF_GetStatus(hspi);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff1c 	bl	800137a <nRF_GetStatus>
 8001542:	4603      	mov	r3, r0
 8001544:	73fb      	strb	r3, [r7, #15]
		if((status&(1<<MAX_RT))!=0)
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	f003 0310 	and.w	r3, r3, #16
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00b      	beq.n	8001568 <TX_Communication+0x58>
		{
			status|=((1<<MAX_RT)|(1<<TX_FULL));
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	f043 0311 	orr.w	r3, r3, #17
 8001556:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(hspi, STATUS,status);
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	461a      	mov	r2, r3
 800155c:	2107      	movs	r1, #7
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff feb8 	bl	80012d4 <nRF_WriteOneRegister>
			return STATUS_TX_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e011      	b.n	800158c <TX_Communication+0x7c>
		}
		else if((status&(1<<5))!=0)
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	f003 0320 	and.w	r3, r3, #32
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00b      	beq.n	800158a <TX_Communication+0x7a>
		{
			status|=((1<<TX_DS)|(1<<TX_FULL));
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 8001578:	73fb      	strb	r3, [r7, #15]
			nRF_WriteOneRegister(hspi, STATUS,status);
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	461a      	mov	r2, r3
 800157e:	2107      	movs	r1, #7
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff fea7 	bl	80012d4 <nRF_WriteOneRegister>
			return STATUS_TX_OK;
 8001586:	2302      	movs	r3, #2
 8001588:	e000      	b.n	800158c <TX_Communication+0x7c>
		}
	}
	return STATUS_TX_NONDEFINE;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000700 	.word	0x20000700

08001598 <RX_Communication>:

uint8_t RX_Communication(SPI_HandleTypeDef *hspi,uint8_t *rx_data)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
	if(nrfmode==MODE_RX)
 80015a2:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <RX_Communication+0x58>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d11d      	bne.n	80015e6 <RX_Communication+0x4e>
	{
		Set_CE_High();
 80015aa:	f7ff fe6b 	bl	8001284 <Set_CE_High>
		uint8_t status=nRF_GetStatus(hspi);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fee3 	bl	800137a <nRF_GetStatus>
 80015b4:	4603      	mov	r3, r0
 80015b6:	73fb      	strb	r3, [r7, #15]
		if((status&(1<<RX_DR))!=0)
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00b      	beq.n	80015da <RX_Communication+0x42>
		{
			nRF_WriteOneRegister(hspi, STATUS,(1<<6));
 80015c2:	2240      	movs	r2, #64	@ 0x40
 80015c4:	2107      	movs	r1, #7
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff fe84 	bl	80012d4 <nRF_WriteOneRegister>
			nRF_RX_Payload(hspi, rx_data, 8);
 80015cc:	2208      	movs	r2, #8
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ff10 	bl	80013f6 <nRF_RX_Payload>
			return STATUS_RX_OK;
 80015d6:	2302      	movs	r3, #2
 80015d8:	e006      	b.n	80015e8 <RX_Communication+0x50>
		}
		nRF_SendCmd(hspi, FLUSH_RX);
 80015da:	21e2      	movs	r1, #226	@ 0xe2
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff feb5 	bl	800134c <nRF_SendCmd>
		return STATUS_RX_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <RX_Communication+0x50>
	}
	return STATUS_TX_NONDEFINE;
 80015e6:	2300      	movs	r3, #0

}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000700 	.word	0x20000700

080015f4 <CONFIG_REG_Write>:

void CONFIG_REG_Write(SPI_HandleTypeDef *hspi,uint8_t data)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	70fb      	strb	r3, [r7, #3]
	uint8_t read_reg;
	do
	{
		nRF_WriteOneRegister(hspi, CONFIG, data);
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	461a      	mov	r2, r3
 8001604:	2100      	movs	r1, #0
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff fe64 	bl	80012d4 <nRF_WriteOneRegister>
		nRF_ReadOneRegister(hspi, CONFIG, &read_reg);
 800160c:	f107 030f 	add.w	r3, r7, #15
 8001610:	461a      	mov	r2, r3
 8001612:	2100      	movs	r1, #0
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff fe7b 	bl	8001310 <nRF_ReadOneRegister>
	}while(read_reg!=data);
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	78fa      	ldrb	r2, [r7, #3]
 800161e:	429a      	cmp	r2, r3
 8001620:	d1ee      	bne.n	8001600 <CONFIG_REG_Write+0xc>
}
 8001622:	bf00      	nop
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <HAL_MspInit+0x54>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163a:	4a11      	ldr	r2, [pc, #68]	@ (8001680 <HAL_MspInit+0x54>)
 800163c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001640:	6453      	str	r3, [r2, #68]	@ 0x44
 8001642:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <HAL_MspInit+0x54>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001646:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <HAL_MspInit+0x54>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	4a0a      	ldr	r2, [pc, #40]	@ (8001680 <HAL_MspInit+0x54>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800165c:	6413      	str	r3, [r2, #64]	@ 0x40
 800165e:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <HAL_MspInit+0x54>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	210f      	movs	r1, #15
 800166e:	f06f 0001 	mvn.w	r0, #1
 8001672:	f000 fb01 	bl	8001c78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800

08001684 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	@ 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a19      	ldr	r2, [pc, #100]	@ (8001708 <HAL_SPI_MspInit+0x84>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d12b      	bne.n	80016fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	4b18      	ldr	r3, [pc, #96]	@ (800170c <HAL_SPI_MspInit+0x88>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ae:	4a17      	ldr	r2, [pc, #92]	@ (800170c <HAL_SPI_MspInit+0x88>)
 80016b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016b6:	4b15      	ldr	r3, [pc, #84]	@ (800170c <HAL_SPI_MspInit+0x88>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b11      	ldr	r3, [pc, #68]	@ (800170c <HAL_SPI_MspInit+0x88>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a10      	ldr	r2, [pc, #64]	@ (800170c <HAL_SPI_MspInit+0x88>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <HAL_SPI_MspInit+0x88>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016de:	23e0      	movs	r3, #224	@ 0xe0
 80016e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ee:	2305      	movs	r3, #5
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	@ (8001710 <HAL_SPI_MspInit+0x8c>)
 80016fa:	f000 fae7 	bl	8001ccc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80016fe:	bf00      	nop
 8001700:	3728      	adds	r7, #40	@ 0x28
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40013000 	.word	0x40013000
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000

08001714 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001724:	d10d      	bne.n	8001742 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <HAL_TIM_PWM_MspInit+0x3c>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	4a08      	ldr	r2, [pc, #32]	@ (8001750 <HAL_TIM_PWM_MspInit+0x3c>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6413      	str	r3, [r2, #64]	@ 0x40
 8001736:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_TIM_PWM_MspInit+0x3c>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800

08001754 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0e      	ldr	r2, [pc, #56]	@ (800179c <HAL_TIM_Base_MspInit+0x48>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d115      	bne.n	8001792 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b0d      	ldr	r3, [pc, #52]	@ (80017a0 <HAL_TIM_Base_MspInit+0x4c>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	4a0c      	ldr	r2, [pc, #48]	@ (80017a0 <HAL_TIM_Base_MspInit+0x4c>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6413      	str	r3, [r2, #64]	@ 0x40
 8001776:	4b0a      	ldr	r3, [pc, #40]	@ (80017a0 <HAL_TIM_Base_MspInit+0x4c>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2105      	movs	r1, #5
 8001786:	201d      	movs	r0, #29
 8001788:	f000 fa76 	bl	8001c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800178c:	201d      	movs	r0, #29
 800178e:	f000 fa8f 	bl	8001cb0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40000400 	.word	0x40000400
 80017a0:	40023800 	.word	0x40023800

080017a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017c4:	d11d      	bne.n	8001802 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <HAL_TIM_MspPostInit+0x68>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	4a0f      	ldr	r2, [pc, #60]	@ (800180c <HAL_TIM_MspPostInit+0x68>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d6:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <HAL_TIM_MspPostInit+0x68>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80017e2:	230f      	movs	r3, #15
 80017e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017f2:	2301      	movs	r3, #1
 80017f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	4619      	mov	r1, r3
 80017fc:	4804      	ldr	r0, [pc, #16]	@ (8001810 <HAL_TIM_MspPostInit+0x6c>)
 80017fe:	f000 fa65 	bl	8001ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001802:	bf00      	nop
 8001804:	3720      	adds	r7, #32
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	40020000 	.word	0x40020000

08001814 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08c      	sub	sp, #48	@ 0x30
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001824:	2300      	movs	r3, #0
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	4b2e      	ldr	r3, [pc, #184]	@ (80018e4 <HAL_InitTick+0xd0>)
 800182a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182c:	4a2d      	ldr	r2, [pc, #180]	@ (80018e4 <HAL_InitTick+0xd0>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6453      	str	r3, [r2, #68]	@ 0x44
 8001834:	4b2b      	ldr	r3, [pc, #172]	@ (80018e4 <HAL_InitTick+0xd0>)
 8001836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001840:	f107 020c 	add.w	r2, r7, #12
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	4611      	mov	r1, r2
 800184a:	4618      	mov	r0, r3
 800184c:	f001 f852 	bl	80028f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001850:	f001 f83c 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 8001854:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001858:	4a23      	ldr	r2, [pc, #140]	@ (80018e8 <HAL_InitTick+0xd4>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	0c9b      	lsrs	r3, r3, #18
 8001860:	3b01      	subs	r3, #1
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001864:	4b21      	ldr	r3, [pc, #132]	@ (80018ec <HAL_InitTick+0xd8>)
 8001866:	4a22      	ldr	r2, [pc, #136]	@ (80018f0 <HAL_InitTick+0xdc>)
 8001868:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800186a:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <HAL_InitTick+0xd8>)
 800186c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001870:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001872:	4a1e      	ldr	r2, [pc, #120]	@ (80018ec <HAL_InitTick+0xd8>)
 8001874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001876:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001878:	4b1c      	ldr	r3, [pc, #112]	@ (80018ec <HAL_InitTick+0xd8>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <HAL_InitTick+0xd8>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001884:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <HAL_InitTick+0xd8>)
 8001886:	2200      	movs	r2, #0
 8001888:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800188a:	4818      	ldr	r0, [pc, #96]	@ (80018ec <HAL_InitTick+0xd8>)
 800188c:	f001 fe36 	bl	80034fc <HAL_TIM_Base_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001896:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800189a:	2b00      	cmp	r3, #0
 800189c:	d11b      	bne.n	80018d6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800189e:	4813      	ldr	r0, [pc, #76]	@ (80018ec <HAL_InitTick+0xd8>)
 80018a0:	f001 fe7c 	bl	800359c <HAL_TIM_Base_Start_IT>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80018aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d111      	bne.n	80018d6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018b2:	2019      	movs	r0, #25
 80018b4:	f000 f9fc 	bl	8001cb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b0f      	cmp	r3, #15
 80018bc:	d808      	bhi.n	80018d0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80018be:	2200      	movs	r2, #0
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	2019      	movs	r0, #25
 80018c4:	f000 f9d8 	bl	8001c78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018c8:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <HAL_InitTick+0xe0>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	e002      	b.n	80018d6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80018d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3730      	adds	r7, #48	@ 0x30
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	431bde83 	.word	0x431bde83
 80018ec:	20000704 	.word	0x20000704
 80018f0:	40010000 	.word	0x40010000
 80018f4:	20000004 	.word	0x20000004

080018f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <NMI_Handler+0x4>

08001900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <HardFault_Handler+0x4>

08001908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <MemManage_Handler+0x4>

08001910 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <BusFault_Handler+0x4>

08001918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <UsageFault_Handler+0x4>

08001920 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001934:	4802      	ldr	r0, [pc, #8]	@ (8001940 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001936:	f001 ff93 	bl	8003860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000704 	.word	0x20000704

08001944 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <TIM3_IRQHandler+0x10>)
 800194a:	f001 ff89 	bl	8003860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200003bc 	.word	0x200003bc

08001958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001960:	4a14      	ldr	r2, [pc, #80]	@ (80019b4 <_sbrk+0x5c>)
 8001962:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <_sbrk+0x60>)
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800196c:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <_sbrk+0x64>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d102      	bne.n	800197a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001974:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <_sbrk+0x64>)
 8001976:	4a12      	ldr	r2, [pc, #72]	@ (80019c0 <_sbrk+0x68>)
 8001978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197a:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	429a      	cmp	r2, r3
 8001986:	d207      	bcs.n	8001998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001988:	f004 f86a 	bl	8005a60 <__errno>
 800198c:	4603      	mov	r3, r0
 800198e:	220c      	movs	r2, #12
 8001990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	e009      	b.n	80019ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001998:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <_sbrk+0x64>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800199e:	4b07      	ldr	r3, [pc, #28]	@ (80019bc <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	4a05      	ldr	r2, [pc, #20]	@ (80019bc <_sbrk+0x64>)
 80019a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019aa:	68fb      	ldr	r3, [r7, #12]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20020000 	.word	0x20020000
 80019b8:	00000400 	.word	0x00000400
 80019bc:	2000074c 	.word	0x2000074c
 80019c0:	200045f0 	.word	0x200045f0

080019c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c8:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <SystemInit+0x20>)
 80019ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ce:	4a05      	ldr	r2, [pc, #20]	@ (80019e4 <SystemInit+0x20>)
 80019d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019ec:	f7ff ffea 	bl	80019c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019f0:	480c      	ldr	r0, [pc, #48]	@ (8001a24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019f2:	490d      	ldr	r1, [pc, #52]	@ (8001a28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019f4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f8:	e002      	b.n	8001a00 <LoopCopyDataInit>

080019fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019fe:	3304      	adds	r3, #4

08001a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a04:	d3f9      	bcc.n	80019fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a06:	4a0a      	ldr	r2, [pc, #40]	@ (8001a30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a08:	4c0a      	ldr	r4, [pc, #40]	@ (8001a34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a0c:	e001      	b.n	8001a12 <LoopFillZerobss>

08001a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a10:	3204      	adds	r2, #4

08001a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a14:	d3fb      	bcc.n	8001a0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a16:	f004 f829 	bl	8005a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a1a:	f7fe ffb7 	bl	800098c <main>
  bx  lr    
 8001a1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a28:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001a2c:	08006408 	.word	0x08006408
  ldr r2, =_sbss
 8001a30:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001a34:	200045f0 	.word	0x200045f0

08001a38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a38:	e7fe      	b.n	8001a38 <ADC_IRQHandler>
	...

08001a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a40:	4b0e      	ldr	r3, [pc, #56]	@ (8001a7c <HAL_Init+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0d      	ldr	r2, [pc, #52]	@ (8001a7c <HAL_Init+0x40>)
 8001a46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a7c <HAL_Init+0x40>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0a      	ldr	r2, [pc, #40]	@ (8001a7c <HAL_Init+0x40>)
 8001a52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a58:	4b08      	ldr	r3, [pc, #32]	@ (8001a7c <HAL_Init+0x40>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a07      	ldr	r2, [pc, #28]	@ (8001a7c <HAL_Init+0x40>)
 8001a5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a64:	2003      	movs	r0, #3
 8001a66:	f000 f8fc 	bl	8001c62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a6a:	200f      	movs	r0, #15
 8001a6c:	f7ff fed2 	bl	8001814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a70:	f7ff fddc 	bl	800162c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023c00 	.word	0x40023c00

08001a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <HAL_IncTick+0x20>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <HAL_IncTick+0x24>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a04      	ldr	r2, [pc, #16]	@ (8001aa4 <HAL_IncTick+0x24>)
 8001a92:	6013      	str	r3, [r2, #0]
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000008 	.word	0x20000008
 8001aa4:	20000750 	.word	0x20000750

08001aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001aac:	4b03      	ldr	r3, [pc, #12]	@ (8001abc <HAL_GetTick+0x14>)
 8001aae:	681b      	ldr	r3, [r3, #0]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000750 	.word	0x20000750

08001ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac8:	f7ff ffee 	bl	8001aa8 <HAL_GetTick>
 8001acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad8:	d005      	beq.n	8001ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ada:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <HAL_Delay+0x44>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ae6:	bf00      	nop
 8001ae8:	f7ff ffde 	bl	8001aa8 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d8f7      	bhi.n	8001ae8 <HAL_Delay+0x28>
  {
  }
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000008 	.word	0x20000008

08001b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b18:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b24:	4013      	ands	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3a:	4a04      	ldr	r2, [pc, #16]	@ (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	60d3      	str	r3, [r2, #12]
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b54:	4b04      	ldr	r3, [pc, #16]	@ (8001b68 <__NVIC_GetPriorityGrouping+0x18>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	f003 0307 	and.w	r3, r3, #7
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	db0b      	blt.n	8001b96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	f003 021f 	and.w	r2, r3, #31
 8001b84:	4907      	ldr	r1, [pc, #28]	@ (8001ba4 <__NVIC_EnableIRQ+0x38>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000e100 	.word	0xe000e100

08001ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	6039      	str	r1, [r7, #0]
 8001bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	db0a      	blt.n	8001bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	490c      	ldr	r1, [pc, #48]	@ (8001bf4 <__NVIC_SetPriority+0x4c>)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	0112      	lsls	r2, r2, #4
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	440b      	add	r3, r1
 8001bcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd0:	e00a      	b.n	8001be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4908      	ldr	r1, [pc, #32]	@ (8001bf8 <__NVIC_SetPriority+0x50>)
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	3b04      	subs	r3, #4
 8001be0:	0112      	lsls	r2, r2, #4
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	440b      	add	r3, r1
 8001be6:	761a      	strb	r2, [r3, #24]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000e100 	.word	0xe000e100
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b089      	sub	sp, #36	@ 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f1c3 0307 	rsb	r3, r3, #7
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	bf28      	it	cs
 8001c1a:	2304      	movcs	r3, #4
 8001c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3304      	adds	r3, #4
 8001c22:	2b06      	cmp	r3, #6
 8001c24:	d902      	bls.n	8001c2c <NVIC_EncodePriority+0x30>
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3b03      	subs	r3, #3
 8001c2a:	e000      	b.n	8001c2e <NVIC_EncodePriority+0x32>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	f04f 32ff 	mov.w	r2, #4294967295
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	401a      	ands	r2, r3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c44:	f04f 31ff 	mov.w	r1, #4294967295
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4e:	43d9      	mvns	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	4313      	orrs	r3, r2
         );
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3724      	adds	r7, #36	@ 0x24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ff4c 	bl	8001b08 <__NVIC_SetPriorityGrouping>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c8a:	f7ff ff61 	bl	8001b50 <__NVIC_GetPriorityGrouping>
 8001c8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	68b9      	ldr	r1, [r7, #8]
 8001c94:	6978      	ldr	r0, [r7, #20]
 8001c96:	f7ff ffb1 	bl	8001bfc <NVIC_EncodePriority>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff ff80 	bl	8001ba8 <__NVIC_SetPriority>
}
 8001ca8:	bf00      	nop
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ff54 	bl	8001b6c <__NVIC_EnableIRQ>
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	@ 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e159      	b.n	8001f9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	f040 8148 	bne.w	8001f96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d005      	beq.n	8001d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d130      	bne.n	8001d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d54:	2201      	movs	r2, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 0201 	and.w	r2, r3, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d017      	beq.n	8001dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d123      	bne.n	8001e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	69b9      	ldr	r1, [r7, #24]
 8001e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80a2 	beq.w	8001f96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b57      	ldr	r3, [pc, #348]	@ (8001fb4 <HAL_GPIO_Init+0x2e8>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5a:	4a56      	ldr	r2, [pc, #344]	@ (8001fb4 <HAL_GPIO_Init+0x2e8>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e62:	4b54      	ldr	r3, [pc, #336]	@ (8001fb4 <HAL_GPIO_Init+0x2e8>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6e:	4a52      	ldr	r2, [pc, #328]	@ (8001fb8 <HAL_GPIO_Init+0x2ec>)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	220f      	movs	r2, #15
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a49      	ldr	r2, [pc, #292]	@ (8001fbc <HAL_GPIO_Init+0x2f0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d019      	beq.n	8001ece <HAL_GPIO_Init+0x202>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a48      	ldr	r2, [pc, #288]	@ (8001fc0 <HAL_GPIO_Init+0x2f4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0x1fe>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a47      	ldr	r2, [pc, #284]	@ (8001fc4 <HAL_GPIO_Init+0x2f8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00d      	beq.n	8001ec6 <HAL_GPIO_Init+0x1fa>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a46      	ldr	r2, [pc, #280]	@ (8001fc8 <HAL_GPIO_Init+0x2fc>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <HAL_GPIO_Init+0x1f6>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a45      	ldr	r2, [pc, #276]	@ (8001fcc <HAL_GPIO_Init+0x300>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_GPIO_Init+0x1f2>
 8001eba:	2304      	movs	r3, #4
 8001ebc:	e008      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	e006      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e004      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e002      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	f002 0203 	and.w	r2, r2, #3
 8001ed6:	0092      	lsls	r2, r2, #2
 8001ed8:	4093      	lsls	r3, r2
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee0:	4935      	ldr	r1, [pc, #212]	@ (8001fb8 <HAL_GPIO_Init+0x2ec>)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	089b      	lsrs	r3, r3, #2
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eee:	4b38      	ldr	r3, [pc, #224]	@ (8001fd0 <HAL_GPIO_Init+0x304>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f12:	4a2f      	ldr	r2, [pc, #188]	@ (8001fd0 <HAL_GPIO_Init+0x304>)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f18:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd0 <HAL_GPIO_Init+0x304>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f3c:	4a24      	ldr	r2, [pc, #144]	@ (8001fd0 <HAL_GPIO_Init+0x304>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f42:	4b23      	ldr	r3, [pc, #140]	@ (8001fd0 <HAL_GPIO_Init+0x304>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f66:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd0 <HAL_GPIO_Init+0x304>)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f6c:	4b18      	ldr	r3, [pc, #96]	@ (8001fd0 <HAL_GPIO_Init+0x304>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f90:	4a0f      	ldr	r2, [pc, #60]	@ (8001fd0 <HAL_GPIO_Init+0x304>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	61fb      	str	r3, [r7, #28]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	2b0f      	cmp	r3, #15
 8001fa0:	f67f aea2 	bls.w	8001ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	3724      	adds	r7, #36	@ 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40013800 	.word	0x40013800
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	40020800 	.word	0x40020800
 8001fc8:	40020c00 	.word	0x40020c00
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40013c00 	.word	0x40013c00

08001fd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	887b      	ldrh	r3, [r7, #2]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
 8001ff0:	e001      	b.n	8001ff6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
 8002010:	4613      	mov	r3, r2
 8002012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002014:	787b      	ldrb	r3, [r7, #1]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800201a:	887a      	ldrh	r2, [r7, #2]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002020:	e003      	b.n	800202a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002022:	887b      	ldrh	r3, [r7, #2]
 8002024:	041a      	lsls	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	619a      	str	r2, [r3, #24]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002036:	b480      	push	{r7}
 8002038:	b085      	sub	sp, #20
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	460b      	mov	r3, r1
 8002040:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002048:	887a      	ldrh	r2, [r7, #2]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4013      	ands	r3, r2
 800204e:	041a      	lsls	r2, r3, #16
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	43d9      	mvns	r1, r3
 8002054:	887b      	ldrh	r3, [r7, #2]
 8002056:	400b      	ands	r3, r1
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	619a      	str	r2, [r3, #24]
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e267      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d075      	beq.n	8002176 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800208a:	4b88      	ldr	r3, [pc, #544]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b04      	cmp	r3, #4
 8002094:	d00c      	beq.n	80020b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002096:	4b85      	ldr	r3, [pc, #532]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d112      	bne.n	80020c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020a2:	4b82      	ldr	r3, [pc, #520]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020ae:	d10b      	bne.n	80020c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b0:	4b7e      	ldr	r3, [pc, #504]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d05b      	beq.n	8002174 <HAL_RCC_OscConfig+0x108>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d157      	bne.n	8002174 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e242      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020d0:	d106      	bne.n	80020e0 <HAL_RCC_OscConfig+0x74>
 80020d2:	4b76      	ldr	r3, [pc, #472]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a75      	ldr	r2, [pc, #468]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 80020d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	e01d      	b.n	800211c <HAL_RCC_OscConfig+0xb0>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020e8:	d10c      	bne.n	8002104 <HAL_RCC_OscConfig+0x98>
 80020ea:	4b70      	ldr	r3, [pc, #448]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a6f      	ldr	r2, [pc, #444]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 80020f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	4b6d      	ldr	r3, [pc, #436]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a6c      	ldr	r2, [pc, #432]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	e00b      	b.n	800211c <HAL_RCC_OscConfig+0xb0>
 8002104:	4b69      	ldr	r3, [pc, #420]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a68      	ldr	r2, [pc, #416]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 800210a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	4b66      	ldr	r3, [pc, #408]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a65      	ldr	r2, [pc, #404]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 8002116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800211a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d013      	beq.n	800214c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7ff fcc0 	bl	8001aa8 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800212c:	f7ff fcbc 	bl	8001aa8 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b64      	cmp	r3, #100	@ 0x64
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e207      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	4b5b      	ldr	r3, [pc, #364]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0xc0>
 800214a:	e014      	b.n	8002176 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7ff fcac 	bl	8001aa8 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002154:	f7ff fca8 	bl	8001aa8 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b64      	cmp	r3, #100	@ 0x64
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e1f3      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002166:	4b51      	ldr	r3, [pc, #324]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0xe8>
 8002172:	e000      	b.n	8002176 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d063      	beq.n	800224a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002182:	4b4a      	ldr	r3, [pc, #296]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00b      	beq.n	80021a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800218e:	4b47      	ldr	r3, [pc, #284]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002196:	2b08      	cmp	r3, #8
 8002198:	d11c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800219a:	4b44      	ldr	r3, [pc, #272]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d116      	bne.n	80021d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a6:	4b41      	ldr	r3, [pc, #260]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d005      	beq.n	80021be <HAL_RCC_OscConfig+0x152>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d001      	beq.n	80021be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e1c7      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021be:	4b3b      	ldr	r3, [pc, #236]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4937      	ldr	r1, [pc, #220]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d2:	e03a      	b.n	800224a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d020      	beq.n	800221e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021dc:	4b34      	ldr	r3, [pc, #208]	@ (80022b0 <HAL_RCC_OscConfig+0x244>)
 80021de:	2201      	movs	r2, #1
 80021e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e2:	f7ff fc61 	bl	8001aa8 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ea:	f7ff fc5d 	bl	8001aa8 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e1a8      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fc:	4b2b      	ldr	r3, [pc, #172]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f0      	beq.n	80021ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002208:	4b28      	ldr	r3, [pc, #160]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4925      	ldr	r1, [pc, #148]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 8002218:	4313      	orrs	r3, r2
 800221a:	600b      	str	r3, [r1, #0]
 800221c:	e015      	b.n	800224a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800221e:	4b24      	ldr	r3, [pc, #144]	@ (80022b0 <HAL_RCC_OscConfig+0x244>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7ff fc40 	bl	8001aa8 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222c:	f7ff fc3c 	bl	8001aa8 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e187      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223e:	4b1b      	ldr	r3, [pc, #108]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d036      	beq.n	80022c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d016      	beq.n	800228c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800225e:	4b15      	ldr	r3, [pc, #84]	@ (80022b4 <HAL_RCC_OscConfig+0x248>)
 8002260:	2201      	movs	r2, #1
 8002262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002264:	f7ff fc20 	bl	8001aa8 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800226c:	f7ff fc1c 	bl	8001aa8 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e167      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227e:	4b0b      	ldr	r3, [pc, #44]	@ (80022ac <HAL_RCC_OscConfig+0x240>)
 8002280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x200>
 800228a:	e01b      	b.n	80022c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800228c:	4b09      	ldr	r3, [pc, #36]	@ (80022b4 <HAL_RCC_OscConfig+0x248>)
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002292:	f7ff fc09 	bl	8001aa8 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002298:	e00e      	b.n	80022b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229a:	f7ff fc05 	bl	8001aa8 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d907      	bls.n	80022b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e150      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
 80022ac:	40023800 	.word	0x40023800
 80022b0:	42470000 	.word	0x42470000
 80022b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b8:	4b88      	ldr	r3, [pc, #544]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 80022ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1ea      	bne.n	800229a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 8097 	beq.w	8002400 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d2:	2300      	movs	r3, #0
 80022d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d6:	4b81      	ldr	r3, [pc, #516]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10f      	bne.n	8002302 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	4b7d      	ldr	r3, [pc, #500]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	4a7c      	ldr	r2, [pc, #496]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 80022ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022f2:	4b7a      	ldr	r3, [pc, #488]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022fe:	2301      	movs	r3, #1
 8002300:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002302:	4b77      	ldr	r3, [pc, #476]	@ (80024e0 <HAL_RCC_OscConfig+0x474>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230a:	2b00      	cmp	r3, #0
 800230c:	d118      	bne.n	8002340 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800230e:	4b74      	ldr	r3, [pc, #464]	@ (80024e0 <HAL_RCC_OscConfig+0x474>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a73      	ldr	r2, [pc, #460]	@ (80024e0 <HAL_RCC_OscConfig+0x474>)
 8002314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231a:	f7ff fbc5 	bl	8001aa8 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002322:	f7ff fbc1 	bl	8001aa8 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e10c      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	4b6a      	ldr	r3, [pc, #424]	@ (80024e0 <HAL_RCC_OscConfig+0x474>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d106      	bne.n	8002356 <HAL_RCC_OscConfig+0x2ea>
 8002348:	4b64      	ldr	r3, [pc, #400]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 800234a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800234c:	4a63      	ldr	r2, [pc, #396]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6713      	str	r3, [r2, #112]	@ 0x70
 8002354:	e01c      	b.n	8002390 <HAL_RCC_OscConfig+0x324>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b05      	cmp	r3, #5
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0x30c>
 800235e:	4b5f      	ldr	r3, [pc, #380]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 8002360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002362:	4a5e      	ldr	r2, [pc, #376]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 8002364:	f043 0304 	orr.w	r3, r3, #4
 8002368:	6713      	str	r3, [r2, #112]	@ 0x70
 800236a:	4b5c      	ldr	r3, [pc, #368]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800236e:	4a5b      	ldr	r2, [pc, #364]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6713      	str	r3, [r2, #112]	@ 0x70
 8002376:	e00b      	b.n	8002390 <HAL_RCC_OscConfig+0x324>
 8002378:	4b58      	ldr	r3, [pc, #352]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 800237a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800237c:	4a57      	ldr	r2, [pc, #348]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	6713      	str	r3, [r2, #112]	@ 0x70
 8002384:	4b55      	ldr	r3, [pc, #340]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002388:	4a54      	ldr	r2, [pc, #336]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 800238a:	f023 0304 	bic.w	r3, r3, #4
 800238e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d015      	beq.n	80023c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002398:	f7ff fb86 	bl	8001aa8 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239e:	e00a      	b.n	80023b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a0:	f7ff fb82 	bl	8001aa8 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e0cb      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b6:	4b49      	ldr	r3, [pc, #292]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0ee      	beq.n	80023a0 <HAL_RCC_OscConfig+0x334>
 80023c2:	e014      	b.n	80023ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c4:	f7ff fb70 	bl	8001aa8 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023cc:	f7ff fb6c 	bl	8001aa8 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e0b5      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e2:	4b3e      	ldr	r3, [pc, #248]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1ee      	bne.n	80023cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023ee:	7dfb      	ldrb	r3, [r7, #23]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d105      	bne.n	8002400 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f4:	4b39      	ldr	r3, [pc, #228]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 80023f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f8:	4a38      	ldr	r2, [pc, #224]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 80023fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 80a1 	beq.w	800254c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800240a:	4b34      	ldr	r3, [pc, #208]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b08      	cmp	r3, #8
 8002414:	d05c      	beq.n	80024d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d141      	bne.n	80024a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241e:	4b31      	ldr	r3, [pc, #196]	@ (80024e4 <HAL_RCC_OscConfig+0x478>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7ff fb40 	bl	8001aa8 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242c:	f7ff fb3c 	bl	8001aa8 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e087      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243e:	4b27      	ldr	r3, [pc, #156]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69da      	ldr	r2, [r3, #28]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002458:	019b      	lsls	r3, r3, #6
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002460:	085b      	lsrs	r3, r3, #1
 8002462:	3b01      	subs	r3, #1
 8002464:	041b      	lsls	r3, r3, #16
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246c:	061b      	lsls	r3, r3, #24
 800246e:	491b      	ldr	r1, [pc, #108]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002474:	4b1b      	ldr	r3, [pc, #108]	@ (80024e4 <HAL_RCC_OscConfig+0x478>)
 8002476:	2201      	movs	r2, #1
 8002478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247a:	f7ff fb15 	bl	8001aa8 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002482:	f7ff fb11 	bl	8001aa8 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e05c      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002494:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x416>
 80024a0:	e054      	b.n	800254c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a2:	4b10      	ldr	r3, [pc, #64]	@ (80024e4 <HAL_RCC_OscConfig+0x478>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a8:	f7ff fafe 	bl	8001aa8 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b0:	f7ff fafa 	bl	8001aa8 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e045      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c2:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <HAL_RCC_OscConfig+0x470>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x444>
 80024ce:	e03d      	b.n	800254c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d107      	bne.n	80024e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e038      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40007000 	.word	0x40007000
 80024e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002558 <HAL_RCC_OscConfig+0x4ec>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d028      	beq.n	8002548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d121      	bne.n	8002548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d11a      	bne.n	8002548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002518:	4013      	ands	r3, r2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800251e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002520:	4293      	cmp	r3, r2
 8002522:	d111      	bne.n	8002548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252e:	085b      	lsrs	r3, r3, #1
 8002530:	3b01      	subs	r3, #1
 8002532:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002534:	429a      	cmp	r2, r3
 8002536:	d107      	bne.n	8002548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002542:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800

0800255c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0cc      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002570:	4b68      	ldr	r3, [pc, #416]	@ (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d90c      	bls.n	8002598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b65      	ldr	r3, [pc, #404]	@ (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b63      	ldr	r3, [pc, #396]	@ (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0b8      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b0:	4b59      	ldr	r3, [pc, #356]	@ (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4a58      	ldr	r2, [pc, #352]	@ (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c8:	4b53      	ldr	r3, [pc, #332]	@ (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4a52      	ldr	r2, [pc, #328]	@ (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d4:	4b50      	ldr	r3, [pc, #320]	@ (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	494d      	ldr	r1, [pc, #308]	@ (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d044      	beq.n	800267c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	4b47      	ldr	r3, [pc, #284]	@ (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d119      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e07f      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d003      	beq.n	800261a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002616:	2b03      	cmp	r3, #3
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261a:	4b3f      	ldr	r3, [pc, #252]	@ (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e06f      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262a:	4b3b      	ldr	r3, [pc, #236]	@ (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e067      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263a:	4b37      	ldr	r3, [pc, #220]	@ (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f023 0203 	bic.w	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4934      	ldr	r1, [pc, #208]	@ (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	4313      	orrs	r3, r2
 800264a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800264c:	f7ff fa2c 	bl	8001aa8 <HAL_GetTick>
 8002650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	e00a      	b.n	800266a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002654:	f7ff fa28 	bl	8001aa8 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e04f      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	4b2b      	ldr	r3, [pc, #172]	@ (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 020c 	and.w	r2, r3, #12
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	429a      	cmp	r2, r3
 800267a:	d1eb      	bne.n	8002654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800267c:	4b25      	ldr	r3, [pc, #148]	@ (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d20c      	bcs.n	80026a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b22      	ldr	r3, [pc, #136]	@ (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b20      	ldr	r3, [pc, #128]	@ (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e032      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b0:	4b19      	ldr	r3, [pc, #100]	@ (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4916      	ldr	r1, [pc, #88]	@ (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ce:	4b12      	ldr	r3, [pc, #72]	@ (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	490e      	ldr	r1, [pc, #56]	@ (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026e2:	f000 f821 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 80026e6:	4602      	mov	r2, r0
 80026e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	490a      	ldr	r1, [pc, #40]	@ (800271c <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	5ccb      	ldrb	r3, [r1, r3]
 80026f6:	fa22 f303 	lsr.w	r3, r2, r3
 80026fa:	4a09      	ldr	r2, [pc, #36]	@ (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026fe:	4b09      	ldr	r3, [pc, #36]	@ (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff f886 	bl	8001814 <HAL_InitTick>

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40023c00 	.word	0x40023c00
 8002718:	40023800 	.word	0x40023800
 800271c:	080063ac 	.word	0x080063ac
 8002720:	20000000 	.word	0x20000000
 8002724:	20000004 	.word	0x20000004

08002728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800272c:	b090      	sub	sp, #64	@ 0x40
 800272e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002740:	4b59      	ldr	r3, [pc, #356]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 030c 	and.w	r3, r3, #12
 8002748:	2b08      	cmp	r3, #8
 800274a:	d00d      	beq.n	8002768 <HAL_RCC_GetSysClockFreq+0x40>
 800274c:	2b08      	cmp	r3, #8
 800274e:	f200 80a1 	bhi.w	8002894 <HAL_RCC_GetSysClockFreq+0x16c>
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_RCC_GetSysClockFreq+0x34>
 8002756:	2b04      	cmp	r3, #4
 8002758:	d003      	beq.n	8002762 <HAL_RCC_GetSysClockFreq+0x3a>
 800275a:	e09b      	b.n	8002894 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800275c:	4b53      	ldr	r3, [pc, #332]	@ (80028ac <HAL_RCC_GetSysClockFreq+0x184>)
 800275e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002760:	e09b      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002762:	4b53      	ldr	r3, [pc, #332]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002764:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002766:	e098      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002768:	4b4f      	ldr	r3, [pc, #316]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002770:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002772:	4b4d      	ldr	r3, [pc, #308]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d028      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800277e:	4b4a      	ldr	r3, [pc, #296]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	099b      	lsrs	r3, r3, #6
 8002784:	2200      	movs	r2, #0
 8002786:	623b      	str	r3, [r7, #32]
 8002788:	627a      	str	r2, [r7, #36]	@ 0x24
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002790:	2100      	movs	r1, #0
 8002792:	4b47      	ldr	r3, [pc, #284]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002794:	fb03 f201 	mul.w	r2, r3, r1
 8002798:	2300      	movs	r3, #0
 800279a:	fb00 f303 	mul.w	r3, r0, r3
 800279e:	4413      	add	r3, r2
 80027a0:	4a43      	ldr	r2, [pc, #268]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80027a2:	fba0 1202 	umull	r1, r2, r0, r2
 80027a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027a8:	460a      	mov	r2, r1
 80027aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80027ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027ae:	4413      	add	r3, r2
 80027b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027b4:	2200      	movs	r2, #0
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	61fa      	str	r2, [r7, #28]
 80027ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80027c2:	f7fd fd5d 	bl	8000280 <__aeabi_uldivmod>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4613      	mov	r3, r2
 80027cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027ce:	e053      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027d0:	4b35      	ldr	r3, [pc, #212]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	099b      	lsrs	r3, r3, #6
 80027d6:	2200      	movs	r2, #0
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	617a      	str	r2, [r7, #20]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027e2:	f04f 0b00 	mov.w	fp, #0
 80027e6:	4652      	mov	r2, sl
 80027e8:	465b      	mov	r3, fp
 80027ea:	f04f 0000 	mov.w	r0, #0
 80027ee:	f04f 0100 	mov.w	r1, #0
 80027f2:	0159      	lsls	r1, r3, #5
 80027f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027f8:	0150      	lsls	r0, r2, #5
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	ebb2 080a 	subs.w	r8, r2, sl
 8002802:	eb63 090b 	sbc.w	r9, r3, fp
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002812:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002816:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800281a:	ebb2 0408 	subs.w	r4, r2, r8
 800281e:	eb63 0509 	sbc.w	r5, r3, r9
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	00eb      	lsls	r3, r5, #3
 800282c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002830:	00e2      	lsls	r2, r4, #3
 8002832:	4614      	mov	r4, r2
 8002834:	461d      	mov	r5, r3
 8002836:	eb14 030a 	adds.w	r3, r4, sl
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	eb45 030b 	adc.w	r3, r5, fp
 8002840:	607b      	str	r3, [r7, #4]
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800284e:	4629      	mov	r1, r5
 8002850:	028b      	lsls	r3, r1, #10
 8002852:	4621      	mov	r1, r4
 8002854:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002858:	4621      	mov	r1, r4
 800285a:	028a      	lsls	r2, r1, #10
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002862:	2200      	movs	r2, #0
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	60fa      	str	r2, [r7, #12]
 8002868:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800286c:	f7fd fd08 	bl	8000280 <__aeabi_uldivmod>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4613      	mov	r3, r2
 8002876:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002878:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	0c1b      	lsrs	r3, r3, #16
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	3301      	adds	r3, #1
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002888:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800288a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800288c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002890:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002892:	e002      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002894:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <HAL_RCC_GetSysClockFreq+0x184>)
 8002896:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800289a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800289c:	4618      	mov	r0, r3
 800289e:	3740      	adds	r7, #64	@ 0x40
 80028a0:	46bd      	mov	sp, r7
 80028a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800
 80028ac:	00f42400 	.word	0x00f42400
 80028b0:	017d7840 	.word	0x017d7840

080028b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b8:	4b03      	ldr	r3, [pc, #12]	@ (80028c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000000 	.word	0x20000000

080028cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028d0:	f7ff fff0 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 80028d4:	4602      	mov	r2, r0
 80028d6:	4b05      	ldr	r3, [pc, #20]	@ (80028ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	0b5b      	lsrs	r3, r3, #13
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	4903      	ldr	r1, [pc, #12]	@ (80028f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028e2:	5ccb      	ldrb	r3, [r1, r3]
 80028e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40023800 	.word	0x40023800
 80028f0:	080063bc 	.word	0x080063bc

080028f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	220f      	movs	r2, #15
 8002902:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002904:	4b12      	ldr	r3, [pc, #72]	@ (8002950 <HAL_RCC_GetClockConfig+0x5c>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 0203 	and.w	r2, r3, #3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002910:	4b0f      	ldr	r3, [pc, #60]	@ (8002950 <HAL_RCC_GetClockConfig+0x5c>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800291c:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <HAL_RCC_GetClockConfig+0x5c>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002928:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <HAL_RCC_GetClockConfig+0x5c>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	08db      	lsrs	r3, r3, #3
 800292e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002936:	4b07      	ldr	r3, [pc, #28]	@ (8002954 <HAL_RCC_GetClockConfig+0x60>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0207 	and.w	r2, r3, #7
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	601a      	str	r2, [r3, #0]
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800
 8002954:	40023c00 	.word	0x40023c00

08002958 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e07b      	b.n	8002a62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	d108      	bne.n	8002984 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800297a:	d009      	beq.n	8002990 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	61da      	str	r2, [r3, #28]
 8002982:	e005      	b.n	8002990 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fe fe6a 	bl	8001684 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a14:	ea42 0103 	orr.w	r1, r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	0c1b      	lsrs	r3, r3, #16
 8002a2e:	f003 0104 	and.w	r1, r3, #4
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a36:	f003 0210 	and.w	r2, r3, #16
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69da      	ldr	r2, [r3, #28]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b088      	sub	sp, #32
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	4613      	mov	r3, r2
 8002a78:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a7a:	f7ff f815 	bl	8001aa8 <HAL_GetTick>
 8002a7e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002a80:	88fb      	ldrh	r3, [r7, #6]
 8002a82:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d001      	beq.n	8002a94 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002a90:	2302      	movs	r3, #2
 8002a92:	e12a      	b.n	8002cea <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <HAL_SPI_Transmit+0x36>
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e122      	b.n	8002cea <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_SPI_Transmit+0x48>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e11b      	b.n	8002cea <HAL_SPI_Transmit+0x280>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2203      	movs	r2, #3
 8002abe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	88fa      	ldrh	r2, [r7, #6]
 8002ad2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	88fa      	ldrh	r2, [r7, #6]
 8002ad8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b00:	d10f      	bne.n	8002b22 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b2c:	2b40      	cmp	r3, #64	@ 0x40
 8002b2e:	d007      	beq.n	8002b40 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b48:	d152      	bne.n	8002bf0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_SPI_Transmit+0xee>
 8002b52:	8b7b      	ldrh	r3, [r7, #26]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d145      	bne.n	8002be4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5c:	881a      	ldrh	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b68:	1c9a      	adds	r2, r3, #2
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b7c:	e032      	b.n	8002be4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d112      	bne.n	8002bb2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b90:	881a      	ldrh	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9c:	1c9a      	adds	r2, r3, #2
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002bb0:	e018      	b.n	8002be4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bb2:	f7fe ff79 	bl	8001aa8 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d803      	bhi.n	8002bca <HAL_SPI_Transmit+0x160>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d102      	bne.n	8002bd0 <HAL_SPI_Transmit+0x166>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d109      	bne.n	8002be4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e082      	b.n	8002cea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1c7      	bne.n	8002b7e <HAL_SPI_Transmit+0x114>
 8002bee:	e053      	b.n	8002c98 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <HAL_SPI_Transmit+0x194>
 8002bf8:	8b7b      	ldrh	r3, [r7, #26]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d147      	bne.n	8002c8e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	330c      	adds	r3, #12
 8002c08:	7812      	ldrb	r2, [r2, #0]
 8002c0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c24:	e033      	b.n	8002c8e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d113      	bne.n	8002c5c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	330c      	adds	r3, #12
 8002c3e:	7812      	ldrb	r2, [r2, #0]
 8002c40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002c5a:	e018      	b.n	8002c8e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c5c:	f7fe ff24 	bl	8001aa8 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d803      	bhi.n	8002c74 <HAL_SPI_Transmit+0x20a>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c72:	d102      	bne.n	8002c7a <HAL_SPI_Transmit+0x210>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d109      	bne.n	8002c8e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e02d      	b.n	8002cea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1c6      	bne.n	8002c26 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	6839      	ldr	r1, [r7, #0]
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 fbd9 	bl	8003454 <SPI_EndRxTxTransaction>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10a      	bne.n	8002ccc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
  }
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b088      	sub	sp, #32
 8002cf6:	af02      	add	r7, sp, #8
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	603b      	str	r3, [r7, #0]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d001      	beq.n	8002d12 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e104      	b.n	8002f1c <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <HAL_SPI_Receive+0x2c>
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e0fc      	b.n	8002f1c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d2a:	d112      	bne.n	8002d52 <HAL_SPI_Receive+0x60>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10e      	bne.n	8002d52 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2204      	movs	r2, #4
 8002d38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d3c:	88fa      	ldrh	r2, [r7, #6]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	4613      	mov	r3, r2
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 f8eb 	bl	8002f24 <HAL_SPI_TransmitReceive>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	e0e4      	b.n	8002f1c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d52:	f7fe fea9 	bl	8001aa8 <HAL_GetTick>
 8002d56:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_SPI_Receive+0x74>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e0da      	b.n	8002f1c <HAL_SPI_Receive+0x22a>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2204      	movs	r2, #4
 8002d72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	88fa      	ldrh	r2, [r7, #6]
 8002d86:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	88fa      	ldrh	r2, [r7, #6]
 8002d8c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002db4:	d10f      	bne.n	8002dd6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002dd4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de0:	2b40      	cmp	r3, #64	@ 0x40
 8002de2:	d007      	beq.n	8002df4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002df2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d170      	bne.n	8002ede <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002dfc:	e035      	b.n	8002e6a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d115      	bne.n	8002e38 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f103 020c 	add.w	r2, r3, #12
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e18:	7812      	ldrb	r2, [r2, #0]
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e36:	e018      	b.n	8002e6a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e38:	f7fe fe36 	bl	8001aa8 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d803      	bhi.n	8002e50 <HAL_SPI_Receive+0x15e>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4e:	d102      	bne.n	8002e56 <HAL_SPI_Receive+0x164>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d109      	bne.n	8002e6a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e058      	b.n	8002f1c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1c4      	bne.n	8002dfe <HAL_SPI_Receive+0x10c>
 8002e74:	e038      	b.n	8002ee8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d113      	bne.n	8002eac <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8e:	b292      	uxth	r2, r2
 8002e90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e96:	1c9a      	adds	r2, r3, #2
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002eaa:	e018      	b.n	8002ede <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eac:	f7fe fdfc 	bl	8001aa8 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d803      	bhi.n	8002ec4 <HAL_SPI_Receive+0x1d2>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec2:	d102      	bne.n	8002eca <HAL_SPI_Receive+0x1d8>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d109      	bne.n	8002ede <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e01e      	b.n	8002f1c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1c6      	bne.n	8002e76 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	6839      	ldr	r1, [r7, #0]
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fa4b 	bl	8003388 <SPI_EndRxTransaction>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
  }
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	@ 0x28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f32:	2301      	movs	r3, #1
 8002f34:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f36:	f7fe fdb7 	bl	8001aa8 <HAL_GetTick>
 8002f3a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f42:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002f4a:	887b      	ldrh	r3, [r7, #2]
 8002f4c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f4e:	7ffb      	ldrb	r3, [r7, #31]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d00c      	beq.n	8002f6e <HAL_SPI_TransmitReceive+0x4a>
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f5a:	d106      	bne.n	8002f6a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d102      	bne.n	8002f6a <HAL_SPI_TransmitReceive+0x46>
 8002f64:	7ffb      	ldrb	r3, [r7, #31]
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d001      	beq.n	8002f6e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e17f      	b.n	800326e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <HAL_SPI_TransmitReceive+0x5c>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <HAL_SPI_TransmitReceive+0x5c>
 8002f7a:	887b      	ldrh	r3, [r7, #2]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e174      	b.n	800326e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_SPI_TransmitReceive+0x6e>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e16d      	b.n	800326e <HAL_SPI_TransmitReceive+0x34a>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d003      	beq.n	8002fae <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2205      	movs	r2, #5
 8002faa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	887a      	ldrh	r2, [r7, #2]
 8002fbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	887a      	ldrh	r2, [r7, #2]
 8002fc4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	887a      	ldrh	r2, [r7, #2]
 8002fd0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	887a      	ldrh	r2, [r7, #2]
 8002fd6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fee:	2b40      	cmp	r3, #64	@ 0x40
 8002ff0:	d007      	beq.n	8003002 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003000:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800300a:	d17e      	bne.n	800310a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <HAL_SPI_TransmitReceive+0xf6>
 8003014:	8afb      	ldrh	r3, [r7, #22]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d16c      	bne.n	80030f4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	881a      	ldrh	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	1c9a      	adds	r2, r3, #2
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800303e:	e059      	b.n	80030f4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b02      	cmp	r3, #2
 800304c:	d11b      	bne.n	8003086 <HAL_SPI_TransmitReceive+0x162>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d016      	beq.n	8003086 <HAL_SPI_TransmitReceive+0x162>
 8003058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305a:	2b01      	cmp	r3, #1
 800305c:	d113      	bne.n	8003086 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003062:	881a      	ldrh	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	1c9a      	adds	r2, r3, #2
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d119      	bne.n	80030c8 <HAL_SPI_TransmitReceive+0x1a4>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d014      	beq.n	80030c8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a8:	b292      	uxth	r2, r2
 80030aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b0:	1c9a      	adds	r2, r3, #2
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030c4:	2301      	movs	r3, #1
 80030c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030c8:	f7fe fcee 	bl	8001aa8 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d80d      	bhi.n	80030f4 <HAL_SPI_TransmitReceive+0x1d0>
 80030d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030de:	d009      	beq.n	80030f4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e0bc      	b.n	800326e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1a0      	bne.n	8003040 <HAL_SPI_TransmitReceive+0x11c>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003102:	b29b      	uxth	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d19b      	bne.n	8003040 <HAL_SPI_TransmitReceive+0x11c>
 8003108:	e082      	b.n	8003210 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_SPI_TransmitReceive+0x1f4>
 8003112:	8afb      	ldrh	r3, [r7, #22]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d171      	bne.n	80031fc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	330c      	adds	r3, #12
 8003122:	7812      	ldrb	r2, [r2, #0]
 8003124:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800313e:	e05d      	b.n	80031fc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b02      	cmp	r3, #2
 800314c:	d11c      	bne.n	8003188 <HAL_SPI_TransmitReceive+0x264>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003152:	b29b      	uxth	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d017      	beq.n	8003188 <HAL_SPI_TransmitReceive+0x264>
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	2b01      	cmp	r3, #1
 800315c:	d114      	bne.n	8003188 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	330c      	adds	r3, #12
 8003168:	7812      	ldrb	r2, [r2, #0]
 800316a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b01      	cmp	r3, #1
 8003194:	d119      	bne.n	80031ca <HAL_SPI_TransmitReceive+0x2a6>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800319a:	b29b      	uxth	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d014      	beq.n	80031ca <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031c6:	2301      	movs	r3, #1
 80031c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031ca:	f7fe fc6d 	bl	8001aa8 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d803      	bhi.n	80031e2 <HAL_SPI_TransmitReceive+0x2be>
 80031da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d102      	bne.n	80031e8 <HAL_SPI_TransmitReceive+0x2c4>
 80031e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d109      	bne.n	80031fc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e038      	b.n	800326e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d19c      	bne.n	8003140 <HAL_SPI_TransmitReceive+0x21c>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d197      	bne.n	8003140 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003210:	6a3a      	ldr	r2, [r7, #32]
 8003212:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 f91d 	bl	8003454 <SPI_EndRxTxTransaction>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e01d      	b.n	800326e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10a      	bne.n	8003250 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800323a:	2300      	movs	r3, #0
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	613b      	str	r3, [r7, #16]
 800324e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800326c:	2300      	movs	r3, #0
  }
}
 800326e:	4618      	mov	r0, r3
 8003270:	3728      	adds	r7, #40	@ 0x28
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	4613      	mov	r3, r2
 8003286:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003288:	f7fe fc0e 	bl	8001aa8 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	4413      	add	r3, r2
 8003296:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003298:	f7fe fc06 	bl	8001aa8 <HAL_GetTick>
 800329c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800329e:	4b39      	ldr	r3, [pc, #228]	@ (8003384 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	015b      	lsls	r3, r3, #5
 80032a4:	0d1b      	lsrs	r3, r3, #20
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	fb02 f303 	mul.w	r3, r2, r3
 80032ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032ae:	e055      	b.n	800335c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b6:	d051      	beq.n	800335c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032b8:	f7fe fbf6 	bl	8001aa8 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	69fa      	ldr	r2, [r7, #28]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d902      	bls.n	80032ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d13d      	bne.n	800334a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80032dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032e6:	d111      	bne.n	800330c <SPI_WaitFlagStateUntilTimeout+0x94>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032f0:	d004      	beq.n	80032fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032fa:	d107      	bne.n	800330c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800330a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003314:	d10f      	bne.n	8003336 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003334:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e018      	b.n	800337c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d102      	bne.n	8003356 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	61fb      	str	r3, [r7, #28]
 8003354:	e002      	b.n	800335c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	3b01      	subs	r3, #1
 800335a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4013      	ands	r3, r2
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	429a      	cmp	r2, r3
 800336a:	bf0c      	ite	eq
 800336c:	2301      	moveq	r3, #1
 800336e:	2300      	movne	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	461a      	mov	r2, r3
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	429a      	cmp	r2, r3
 8003378:	d19a      	bne.n	80032b0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3720      	adds	r7, #32
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20000000 	.word	0x20000000

08003388 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800339c:	d111      	bne.n	80033c2 <SPI_EndRxTransaction+0x3a>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033a6:	d004      	beq.n	80033b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033b0:	d107      	bne.n	80033c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033ca:	d12a      	bne.n	8003422 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033d4:	d012      	beq.n	80033fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2200      	movs	r2, #0
 80033de:	2180      	movs	r1, #128	@ 0x80
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f7ff ff49 	bl	8003278 <SPI_WaitFlagStateUntilTimeout>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d02d      	beq.n	8003448 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f0:	f043 0220 	orr.w	r2, r3, #32
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e026      	b.n	800344a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2200      	movs	r2, #0
 8003404:	2101      	movs	r1, #1
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f7ff ff36 	bl	8003278 <SPI_WaitFlagStateUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d01a      	beq.n	8003448 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003416:	f043 0220 	orr.w	r2, r3, #32
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e013      	b.n	800344a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2200      	movs	r2, #0
 800342a:	2101      	movs	r1, #1
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f7ff ff23 	bl	8003278 <SPI_WaitFlagStateUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d007      	beq.n	8003448 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343c:	f043 0220 	orr.w	r2, r3, #32
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e000      	b.n	800344a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2201      	movs	r2, #1
 8003468:	2102      	movs	r1, #2
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f7ff ff04 	bl	8003278 <SPI_WaitFlagStateUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d007      	beq.n	8003486 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347a:	f043 0220 	orr.w	r2, r3, #32
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e032      	b.n	80034ec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003486:	4b1b      	ldr	r3, [pc, #108]	@ (80034f4 <SPI_EndRxTxTransaction+0xa0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a1b      	ldr	r2, [pc, #108]	@ (80034f8 <SPI_EndRxTxTransaction+0xa4>)
 800348c:	fba2 2303 	umull	r2, r3, r2, r3
 8003490:	0d5b      	lsrs	r3, r3, #21
 8003492:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003496:	fb02 f303 	mul.w	r3, r2, r3
 800349a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034a4:	d112      	bne.n	80034cc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2200      	movs	r2, #0
 80034ae:	2180      	movs	r1, #128	@ 0x80
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f7ff fee1 	bl	8003278 <SPI_WaitFlagStateUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d016      	beq.n	80034ea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c0:	f043 0220 	orr.w	r2, r3, #32
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e00f      	b.n	80034ec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	3b01      	subs	r3, #1
 80034d6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e2:	2b80      	cmp	r3, #128	@ 0x80
 80034e4:	d0f2      	beq.n	80034cc <SPI_EndRxTxTransaction+0x78>
 80034e6:	e000      	b.n	80034ea <SPI_EndRxTxTransaction+0x96>
        break;
 80034e8:	bf00      	nop
  }

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20000000 	.word	0x20000000
 80034f8:	165e9f81 	.word	0x165e9f81

080034fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e041      	b.n	8003592 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fe f916 	bl	8001754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3304      	adds	r3, #4
 8003538:	4619      	mov	r1, r3
 800353a:	4610      	mov	r0, r2
 800353c:	f000 fc32 	bl	8003da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d001      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e044      	b.n	800363e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a1e      	ldr	r2, [pc, #120]	@ (800364c <HAL_TIM_Base_Start_IT+0xb0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d018      	beq.n	8003608 <HAL_TIM_Base_Start_IT+0x6c>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035de:	d013      	beq.n	8003608 <HAL_TIM_Base_Start_IT+0x6c>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003650 <HAL_TIM_Base_Start_IT+0xb4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00e      	beq.n	8003608 <HAL_TIM_Base_Start_IT+0x6c>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a19      	ldr	r2, [pc, #100]	@ (8003654 <HAL_TIM_Base_Start_IT+0xb8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d009      	beq.n	8003608 <HAL_TIM_Base_Start_IT+0x6c>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a17      	ldr	r2, [pc, #92]	@ (8003658 <HAL_TIM_Base_Start_IT+0xbc>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d004      	beq.n	8003608 <HAL_TIM_Base_Start_IT+0x6c>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a16      	ldr	r2, [pc, #88]	@ (800365c <HAL_TIM_Base_Start_IT+0xc0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d111      	bne.n	800362c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b06      	cmp	r3, #6
 8003618:	d010      	beq.n	800363c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 0201 	orr.w	r2, r2, #1
 8003628:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362a:	e007      	b.n	800363c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40010000 	.word	0x40010000
 8003650:	40000400 	.word	0x40000400
 8003654:	40000800 	.word	0x40000800
 8003658:	40000c00 	.word	0x40000c00
 800365c:	40014000 	.word	0x40014000

08003660 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e041      	b.n	80036f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fe f844 	bl	8001714 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	4619      	mov	r1, r3
 800369e:	4610      	mov	r0, r2
 80036a0:	f000 fb80 	bl	8003da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d109      	bne.n	8003724 <HAL_TIM_PWM_Start+0x24>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	bf14      	ite	ne
 800371c:	2301      	movne	r3, #1
 800371e:	2300      	moveq	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	e022      	b.n	800376a <HAL_TIM_PWM_Start+0x6a>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b04      	cmp	r3, #4
 8003728:	d109      	bne.n	800373e <HAL_TIM_PWM_Start+0x3e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	bf14      	ite	ne
 8003736:	2301      	movne	r3, #1
 8003738:	2300      	moveq	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	e015      	b.n	800376a <HAL_TIM_PWM_Start+0x6a>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b08      	cmp	r3, #8
 8003742:	d109      	bne.n	8003758 <HAL_TIM_PWM_Start+0x58>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	e008      	b.n	800376a <HAL_TIM_PWM_Start+0x6a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b01      	cmp	r3, #1
 8003762:	bf14      	ite	ne
 8003764:	2301      	movne	r3, #1
 8003766:	2300      	moveq	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e068      	b.n	8003844 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d104      	bne.n	8003782 <HAL_TIM_PWM_Start+0x82>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003780:	e013      	b.n	80037aa <HAL_TIM_PWM_Start+0xaa>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b04      	cmp	r3, #4
 8003786:	d104      	bne.n	8003792 <HAL_TIM_PWM_Start+0x92>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003790:	e00b      	b.n	80037aa <HAL_TIM_PWM_Start+0xaa>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b08      	cmp	r3, #8
 8003796:	d104      	bne.n	80037a2 <HAL_TIM_PWM_Start+0xa2>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037a0:	e003      	b.n	80037aa <HAL_TIM_PWM_Start+0xaa>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2201      	movs	r2, #1
 80037b0:	6839      	ldr	r1, [r7, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fda2 	bl	80042fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a23      	ldr	r2, [pc, #140]	@ (800384c <HAL_TIM_PWM_Start+0x14c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d107      	bne.n	80037d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a1d      	ldr	r2, [pc, #116]	@ (800384c <HAL_TIM_PWM_Start+0x14c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d018      	beq.n	800380e <HAL_TIM_PWM_Start+0x10e>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e4:	d013      	beq.n	800380e <HAL_TIM_PWM_Start+0x10e>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a19      	ldr	r2, [pc, #100]	@ (8003850 <HAL_TIM_PWM_Start+0x150>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00e      	beq.n	800380e <HAL_TIM_PWM_Start+0x10e>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a17      	ldr	r2, [pc, #92]	@ (8003854 <HAL_TIM_PWM_Start+0x154>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d009      	beq.n	800380e <HAL_TIM_PWM_Start+0x10e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a16      	ldr	r2, [pc, #88]	@ (8003858 <HAL_TIM_PWM_Start+0x158>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d004      	beq.n	800380e <HAL_TIM_PWM_Start+0x10e>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a14      	ldr	r2, [pc, #80]	@ (800385c <HAL_TIM_PWM_Start+0x15c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d111      	bne.n	8003832 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b06      	cmp	r3, #6
 800381e:	d010      	beq.n	8003842 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003830:	e007      	b.n	8003842 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0201 	orr.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40010000 	.word	0x40010000
 8003850:	40000400 	.word	0x40000400
 8003854:	40000800 	.word	0x40000800
 8003858:	40000c00 	.word	0x40000c00
 800385c:	40014000 	.word	0x40014000

08003860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d020      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01b      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0202 	mvn.w	r2, #2
 8003894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fa5b 	bl	8003d66 <HAL_TIM_IC_CaptureCallback>
 80038b0:	e005      	b.n	80038be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fa4d 	bl	8003d52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 fa5e 	bl	8003d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d020      	beq.n	8003910 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01b      	beq.n	8003910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0204 	mvn.w	r2, #4
 80038e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2202      	movs	r2, #2
 80038e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fa35 	bl	8003d66 <HAL_TIM_IC_CaptureCallback>
 80038fc:	e005      	b.n	800390a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fa27 	bl	8003d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fa38 	bl	8003d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d020      	beq.n	800395c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01b      	beq.n	800395c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0208 	mvn.w	r2, #8
 800392c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2204      	movs	r2, #4
 8003932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fa0f 	bl	8003d66 <HAL_TIM_IC_CaptureCallback>
 8003948:	e005      	b.n	8003956 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fa01 	bl	8003d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 fa12 	bl	8003d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	d020      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01b      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0210 	mvn.w	r2, #16
 8003978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2208      	movs	r2, #8
 800397e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f9e9 	bl	8003d66 <HAL_TIM_IC_CaptureCallback>
 8003994:	e005      	b.n	80039a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f9db 	bl	8003d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f9ec 	bl	8003d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00c      	beq.n	80039cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d007      	beq.n	80039cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0201 	mvn.w	r2, #1
 80039c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fd fc20 	bl	800120c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00c      	beq.n	80039f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d007      	beq.n	80039f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80039e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fd24 	bl	8004438 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00c      	beq.n	8003a14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d007      	beq.n	8003a14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f9bd 	bl	8003d8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00c      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d007      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0220 	mvn.w	r2, #32
 8003a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fcf6 	bl	8004424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e0ae      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b0c      	cmp	r3, #12
 8003a6a:	f200 809f 	bhi.w	8003bac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a74:	08003aa9 	.word	0x08003aa9
 8003a78:	08003bad 	.word	0x08003bad
 8003a7c:	08003bad 	.word	0x08003bad
 8003a80:	08003bad 	.word	0x08003bad
 8003a84:	08003ae9 	.word	0x08003ae9
 8003a88:	08003bad 	.word	0x08003bad
 8003a8c:	08003bad 	.word	0x08003bad
 8003a90:	08003bad 	.word	0x08003bad
 8003a94:	08003b2b 	.word	0x08003b2b
 8003a98:	08003bad 	.word	0x08003bad
 8003a9c:	08003bad 	.word	0x08003bad
 8003aa0:	08003bad 	.word	0x08003bad
 8003aa4:	08003b6b 	.word	0x08003b6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68b9      	ldr	r1, [r7, #8]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 f9fe 	bl	8003eb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699a      	ldr	r2, [r3, #24]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0208 	orr.w	r2, r2, #8
 8003ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0204 	bic.w	r2, r2, #4
 8003ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6999      	ldr	r1, [r3, #24]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	691a      	ldr	r2, [r3, #16]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	619a      	str	r2, [r3, #24]
      break;
 8003ae6:	e064      	b.n	8003bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fa44 	bl	8003f7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699a      	ldr	r2, [r3, #24]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6999      	ldr	r1, [r3, #24]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	021a      	lsls	r2, r3, #8
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	619a      	str	r2, [r3, #24]
      break;
 8003b28:	e043      	b.n	8003bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 fa8f 	bl	8004054 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69da      	ldr	r2, [r3, #28]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f042 0208 	orr.w	r2, r2, #8
 8003b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69da      	ldr	r2, [r3, #28]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0204 	bic.w	r2, r2, #4
 8003b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69d9      	ldr	r1, [r3, #28]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	61da      	str	r2, [r3, #28]
      break;
 8003b68:	e023      	b.n	8003bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68b9      	ldr	r1, [r7, #8]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 fad9 	bl	8004128 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	69da      	ldr	r2, [r3, #28]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69da      	ldr	r2, [r3, #28]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69d9      	ldr	r1, [r3, #28]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	021a      	lsls	r2, r3, #8
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	61da      	str	r2, [r3, #28]
      break;
 8003baa:	e002      	b.n	8003bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	75fb      	strb	r3, [r7, #23]
      break;
 8003bb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_TIM_ConfigClockSource+0x1c>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e0b4      	b.n	8003d4a <HAL_TIM_ConfigClockSource+0x186>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c18:	d03e      	beq.n	8003c98 <HAL_TIM_ConfigClockSource+0xd4>
 8003c1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c1e:	f200 8087 	bhi.w	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c26:	f000 8086 	beq.w	8003d36 <HAL_TIM_ConfigClockSource+0x172>
 8003c2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c2e:	d87f      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c30:	2b70      	cmp	r3, #112	@ 0x70
 8003c32:	d01a      	beq.n	8003c6a <HAL_TIM_ConfigClockSource+0xa6>
 8003c34:	2b70      	cmp	r3, #112	@ 0x70
 8003c36:	d87b      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c38:	2b60      	cmp	r3, #96	@ 0x60
 8003c3a:	d050      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0x11a>
 8003c3c:	2b60      	cmp	r3, #96	@ 0x60
 8003c3e:	d877      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c40:	2b50      	cmp	r3, #80	@ 0x50
 8003c42:	d03c      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0xfa>
 8003c44:	2b50      	cmp	r3, #80	@ 0x50
 8003c46:	d873      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c48:	2b40      	cmp	r3, #64	@ 0x40
 8003c4a:	d058      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x13a>
 8003c4c:	2b40      	cmp	r3, #64	@ 0x40
 8003c4e:	d86f      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c50:	2b30      	cmp	r3, #48	@ 0x30
 8003c52:	d064      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x15a>
 8003c54:	2b30      	cmp	r3, #48	@ 0x30
 8003c56:	d86b      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	d060      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x15a>
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d867      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d05c      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x15a>
 8003c64:	2b10      	cmp	r3, #16
 8003c66:	d05a      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x15a>
 8003c68:	e062      	b.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c7a:	f000 fb1f 	bl	80042bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	609a      	str	r2, [r3, #8]
      break;
 8003c96:	e04f      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ca8:	f000 fb08 	bl	80042bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cba:	609a      	str	r2, [r3, #8]
      break;
 8003cbc:	e03c      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f000 fa7c 	bl	80041c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2150      	movs	r1, #80	@ 0x50
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fad5 	bl	8004286 <TIM_ITRx_SetConfig>
      break;
 8003cdc:	e02c      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cea:	461a      	mov	r2, r3
 8003cec:	f000 fa9b 	bl	8004226 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2160      	movs	r1, #96	@ 0x60
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fac5 	bl	8004286 <TIM_ITRx_SetConfig>
      break;
 8003cfc:	e01c      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f000 fa5c 	bl	80041c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2140      	movs	r1, #64	@ 0x40
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 fab5 	bl	8004286 <TIM_ITRx_SetConfig>
      break;
 8003d1c:	e00c      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4619      	mov	r1, r3
 8003d28:	4610      	mov	r0, r2
 8003d2a:	f000 faac 	bl	8004286 <TIM_ITRx_SetConfig>
      break;
 8003d2e:	e003      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
      break;
 8003d34:	e000      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a37      	ldr	r2, [pc, #220]	@ (8003e94 <TIM_Base_SetConfig+0xf0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d00f      	beq.n	8003ddc <TIM_Base_SetConfig+0x38>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dc2:	d00b      	beq.n	8003ddc <TIM_Base_SetConfig+0x38>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a34      	ldr	r2, [pc, #208]	@ (8003e98 <TIM_Base_SetConfig+0xf4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d007      	beq.n	8003ddc <TIM_Base_SetConfig+0x38>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a33      	ldr	r2, [pc, #204]	@ (8003e9c <TIM_Base_SetConfig+0xf8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d003      	beq.n	8003ddc <TIM_Base_SetConfig+0x38>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a32      	ldr	r2, [pc, #200]	@ (8003ea0 <TIM_Base_SetConfig+0xfc>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d108      	bne.n	8003dee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a28      	ldr	r2, [pc, #160]	@ (8003e94 <TIM_Base_SetConfig+0xf0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d01b      	beq.n	8003e2e <TIM_Base_SetConfig+0x8a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dfc:	d017      	beq.n	8003e2e <TIM_Base_SetConfig+0x8a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a25      	ldr	r2, [pc, #148]	@ (8003e98 <TIM_Base_SetConfig+0xf4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d013      	beq.n	8003e2e <TIM_Base_SetConfig+0x8a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a24      	ldr	r2, [pc, #144]	@ (8003e9c <TIM_Base_SetConfig+0xf8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00f      	beq.n	8003e2e <TIM_Base_SetConfig+0x8a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a23      	ldr	r2, [pc, #140]	@ (8003ea0 <TIM_Base_SetConfig+0xfc>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00b      	beq.n	8003e2e <TIM_Base_SetConfig+0x8a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a22      	ldr	r2, [pc, #136]	@ (8003ea4 <TIM_Base_SetConfig+0x100>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d007      	beq.n	8003e2e <TIM_Base_SetConfig+0x8a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a21      	ldr	r2, [pc, #132]	@ (8003ea8 <TIM_Base_SetConfig+0x104>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d003      	beq.n	8003e2e <TIM_Base_SetConfig+0x8a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a20      	ldr	r2, [pc, #128]	@ (8003eac <TIM_Base_SetConfig+0x108>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d108      	bne.n	8003e40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a0c      	ldr	r2, [pc, #48]	@ (8003e94 <TIM_Base_SetConfig+0xf0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d103      	bne.n	8003e6e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	691a      	ldr	r2, [r3, #16]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f043 0204 	orr.w	r2, r3, #4
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	601a      	str	r2, [r3, #0]
}
 8003e86:	bf00      	nop
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40010000 	.word	0x40010000
 8003e98:	40000400 	.word	0x40000400
 8003e9c:	40000800 	.word	0x40000800
 8003ea0:	40000c00 	.word	0x40000c00
 8003ea4:	40014000 	.word	0x40014000
 8003ea8:	40014400 	.word	0x40014400
 8003eac:	40014800 	.word	0x40014800

08003eb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	f023 0201 	bic.w	r2, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0303 	bic.w	r3, r3, #3
 8003ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f023 0302 	bic.w	r3, r3, #2
 8003ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a1c      	ldr	r2, [pc, #112]	@ (8003f78 <TIM_OC1_SetConfig+0xc8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d10c      	bne.n	8003f26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f023 0308 	bic.w	r3, r3, #8
 8003f12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f023 0304 	bic.w	r3, r3, #4
 8003f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a13      	ldr	r2, [pc, #76]	@ (8003f78 <TIM_OC1_SetConfig+0xc8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d111      	bne.n	8003f52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	621a      	str	r2, [r3, #32]
}
 8003f6c:	bf00      	nop
 8003f6e:	371c      	adds	r7, #28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	40010000 	.word	0x40010000

08003f7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	f023 0210 	bic.w	r2, r3, #16
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	021b      	lsls	r3, r3, #8
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f023 0320 	bic.w	r3, r3, #32
 8003fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8004050 <TIM_OC2_SetConfig+0xd4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d10d      	bne.n	8003ff8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ff6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a15      	ldr	r2, [pc, #84]	@ (8004050 <TIM_OC2_SetConfig+0xd4>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d113      	bne.n	8004028 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004006:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800400e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	621a      	str	r2, [r3, #32]
}
 8004042:	bf00      	nop
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40010000 	.word	0x40010000

08004054 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0303 	bic.w	r3, r3, #3
 800408a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800409c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	021b      	lsls	r3, r3, #8
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004124 <TIM_OC3_SetConfig+0xd0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d10d      	bne.n	80040ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a14      	ldr	r2, [pc, #80]	@ (8004124 <TIM_OC3_SetConfig+0xd0>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d113      	bne.n	80040fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	621a      	str	r2, [r3, #32]
}
 8004118:	bf00      	nop
 800411a:	371c      	adds	r7, #28
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	40010000 	.word	0x40010000

08004128 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800415e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	021b      	lsls	r3, r3, #8
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004172:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	031b      	lsls	r3, r3, #12
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a10      	ldr	r2, [pc, #64]	@ (80041c4 <TIM_OC4_SetConfig+0x9c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d109      	bne.n	800419c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800418e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	019b      	lsls	r3, r3, #6
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	621a      	str	r2, [r3, #32]
}
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40010000 	.word	0x40010000

080041c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	f023 0201 	bic.w	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f023 030a 	bic.w	r3, r3, #10
 8004204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4313      	orrs	r3, r2
 800420c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	621a      	str	r2, [r3, #32]
}
 800421a:	bf00      	nop
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004226:	b480      	push	{r7}
 8004228:	b087      	sub	sp, #28
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f023 0210 	bic.w	r2, r3, #16
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004250:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	031b      	lsls	r3, r3, #12
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004262:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	4313      	orrs	r3, r2
 800426c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004286:	b480      	push	{r7}
 8004288:	b085      	sub	sp, #20
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800429c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f043 0307 	orr.w	r3, r3, #7
 80042a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	609a      	str	r2, [r3, #8]
}
 80042b0:	bf00      	nop
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	021a      	lsls	r2, r3, #8
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	431a      	orrs	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	609a      	str	r2, [r3, #8]
}
 80042f0:	bf00      	nop
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	2201      	movs	r2, #1
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a1a      	ldr	r2, [r3, #32]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	43db      	mvns	r3, r3
 800431e:	401a      	ands	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a1a      	ldr	r2, [r3, #32]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f003 031f 	and.w	r3, r3, #31
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	fa01 f303 	lsl.w	r3, r1, r3
 8004334:	431a      	orrs	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	621a      	str	r2, [r3, #32]
}
 800433a:	bf00      	nop
 800433c:	371c      	adds	r7, #28
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800435c:	2302      	movs	r3, #2
 800435e:	e050      	b.n	8004402 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a1c      	ldr	r2, [pc, #112]	@ (8004410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d018      	beq.n	80043d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ac:	d013      	beq.n	80043d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a18      	ldr	r2, [pc, #96]	@ (8004414 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d00e      	beq.n	80043d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a16      	ldr	r2, [pc, #88]	@ (8004418 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d009      	beq.n	80043d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a15      	ldr	r2, [pc, #84]	@ (800441c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d004      	beq.n	80043d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a13      	ldr	r2, [pc, #76]	@ (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d10c      	bne.n	80043f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	40010000 	.word	0x40010000
 8004414:	40000400 	.word	0x40000400
 8004418:	40000800 	.word	0x40000800
 800441c:	40000c00 	.word	0x40000c00
 8004420:	40014000 	.word	0x40014000

08004424 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800445a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800445e:	2b84      	cmp	r3, #132	@ 0x84
 8004460:	d005      	beq.n	800446e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004462:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4413      	add	r3, r2
 800446a:	3303      	adds	r3, #3
 800446c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800446e:	68fb      	ldr	r3, [r7, #12]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004480:	f000 fafc 	bl	8004a7c <vTaskStartScheduler>
  
  return osOK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	bd80      	pop	{r7, pc}

0800448a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800448a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800448c:	b089      	sub	sp, #36	@ 0x24
 800448e:	af04      	add	r7, sp, #16
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <osThreadCreate+0x54>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01c      	beq.n	80044de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685c      	ldr	r4, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691e      	ldr	r6, [r3, #16]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff ffc8 	bl	800444c <makeFreeRtosPriority>
 80044bc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044c6:	9202      	str	r2, [sp, #8]
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	9100      	str	r1, [sp, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	4632      	mov	r2, r6
 80044d0:	4629      	mov	r1, r5
 80044d2:	4620      	mov	r0, r4
 80044d4:	f000 f8ed 	bl	80046b2 <xTaskCreateStatic>
 80044d8:	4603      	mov	r3, r0
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	e01c      	b.n	8004518 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685c      	ldr	r4, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044ea:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff ffaa 	bl	800444c <makeFreeRtosPriority>
 80044f8:	4602      	mov	r2, r0
 80044fa:	f107 030c 	add.w	r3, r7, #12
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	9200      	str	r2, [sp, #0]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	4632      	mov	r2, r6
 8004506:	4629      	mov	r1, r5
 8004508:	4620      	mov	r0, r4
 800450a:	f000 f932 	bl	8004772 <xTaskCreate>
 800450e:	4603      	mov	r3, r0
 8004510:	2b01      	cmp	r3, #1
 8004512:	d001      	beq.n	8004518 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004514:	2300      	movs	r3, #0
 8004516:	e000      	b.n	800451a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004518:	68fb      	ldr	r3, [r7, #12]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004522 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <osDelay+0x16>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	e000      	b.n	800453a <osDelay+0x18>
 8004538:	2301      	movs	r3, #1
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fa68 	bl	8004a10 <vTaskDelay>
  
  return osOK;
 8004540:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f103 0208 	add.w	r2, r3, #8
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f04f 32ff 	mov.w	r2, #4294967295
 8004562:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f103 0208 	add.w	r2, r3, #8
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f103 0208 	add.w	r2, r3, #8
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	601a      	str	r2, [r3, #0]
}
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004602:	d103      	bne.n	800460c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	e00c      	b.n	8004626 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3308      	adds	r3, #8
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	e002      	b.n	800461a <vListInsert+0x2e>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	429a      	cmp	r2, r3
 8004624:	d2f6      	bcs.n	8004614 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	601a      	str	r2, [r3, #0]
}
 8004652:	bf00      	nop
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800465e:	b480      	push	{r7}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6892      	ldr	r2, [r2, #8]
 8004674:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6852      	ldr	r2, [r2, #4]
 800467e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	429a      	cmp	r2, r3
 8004688:	d103      	bne.n	8004692 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	1e5a      	subs	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b08e      	sub	sp, #56	@ 0x38
 80046b6:	af04      	add	r7, sp, #16
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	607a      	str	r2, [r7, #4]
 80046be:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80046c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10b      	bne.n	80046de <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80046d8:	bf00      	nop
 80046da:	bf00      	nop
 80046dc:	e7fd      	b.n	80046da <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80046de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10b      	bne.n	80046fc <xTaskCreateStatic+0x4a>
	__asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	61fb      	str	r3, [r7, #28]
}
 80046f6:	bf00      	nop
 80046f8:	bf00      	nop
 80046fa:	e7fd      	b.n	80046f8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80046fc:	23a0      	movs	r3, #160	@ 0xa0
 80046fe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	2ba0      	cmp	r3, #160	@ 0xa0
 8004704:	d00b      	beq.n	800471e <xTaskCreateStatic+0x6c>
	__asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	61bb      	str	r3, [r7, #24]
}
 8004718:	bf00      	nop
 800471a:	bf00      	nop
 800471c:	e7fd      	b.n	800471a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800471e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004722:	2b00      	cmp	r3, #0
 8004724:	d01e      	beq.n	8004764 <xTaskCreateStatic+0xb2>
 8004726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01b      	beq.n	8004764 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800472c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800472e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004732:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004734:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	2202      	movs	r2, #2
 800473a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800473e:	2300      	movs	r3, #0
 8004740:	9303      	str	r3, [sp, #12]
 8004742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004744:	9302      	str	r3, [sp, #8]
 8004746:	f107 0314 	add.w	r3, r7, #20
 800474a:	9301      	str	r3, [sp, #4]
 800474c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	68b9      	ldr	r1, [r7, #8]
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f850 	bl	80047fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800475c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800475e:	f000 f8ed 	bl	800493c <prvAddNewTaskToReadyList>
 8004762:	e001      	b.n	8004768 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004764:	2300      	movs	r3, #0
 8004766:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004768:	697b      	ldr	r3, [r7, #20]
	}
 800476a:	4618      	mov	r0, r3
 800476c:	3728      	adds	r7, #40	@ 0x28
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004772:	b580      	push	{r7, lr}
 8004774:	b08c      	sub	sp, #48	@ 0x30
 8004776:	af04      	add	r7, sp, #16
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	603b      	str	r3, [r7, #0]
 800477e:	4613      	mov	r3, r2
 8004780:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fefe 	bl	8005588 <pvPortMalloc>
 800478c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00e      	beq.n	80047b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004794:	20a0      	movs	r0, #160	@ 0xa0
 8004796:	f000 fef7 	bl	8005588 <pvPortMalloc>
 800479a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80047a8:	e005      	b.n	80047b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047aa:	6978      	ldr	r0, [r7, #20]
 80047ac:	f000 ffba 	bl	8005724 <vPortFree>
 80047b0:	e001      	b.n	80047b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d017      	beq.n	80047ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047c4:	88fa      	ldrh	r2, [r7, #6]
 80047c6:	2300      	movs	r3, #0
 80047c8:	9303      	str	r3, [sp, #12]
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	9302      	str	r3, [sp, #8]
 80047ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d0:	9301      	str	r3, [sp, #4]
 80047d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 f80e 	bl	80047fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047e0:	69f8      	ldr	r0, [r7, #28]
 80047e2:	f000 f8ab 	bl	800493c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80047e6:	2301      	movs	r3, #1
 80047e8:	61bb      	str	r3, [r7, #24]
 80047ea:	e002      	b.n	80047f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047ec:	f04f 33ff 	mov.w	r3, #4294967295
 80047f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80047f2:	69bb      	ldr	r3, [r7, #24]
	}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3720      	adds	r7, #32
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800480a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004814:	3b01      	subs	r3, #1
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	f023 0307 	bic.w	r3, r3, #7
 8004822:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00b      	beq.n	8004846 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	617b      	str	r3, [r7, #20]
}
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	e7fd      	b.n	8004842 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01f      	beq.n	800488c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800484c:	2300      	movs	r3, #0
 800484e:	61fb      	str	r3, [r7, #28]
 8004850:	e012      	b.n	8004878 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	4413      	add	r3, r2
 8004858:	7819      	ldrb	r1, [r3, #0]
 800485a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	4413      	add	r3, r2
 8004860:	3334      	adds	r3, #52	@ 0x34
 8004862:	460a      	mov	r2, r1
 8004864:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	4413      	add	r3, r2
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d006      	beq.n	8004880 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	3301      	adds	r3, #1
 8004876:	61fb      	str	r3, [r7, #28]
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	2b0f      	cmp	r3, #15
 800487c:	d9e9      	bls.n	8004852 <prvInitialiseNewTask+0x56>
 800487e:	e000      	b.n	8004882 <prvInitialiseNewTask+0x86>
			{
				break;
 8004880:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800488a:	e003      	b.n	8004894 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800488c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004896:	2b06      	cmp	r3, #6
 8004898:	d901      	bls.n	800489e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800489a:	2306      	movs	r3, #6
 800489c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800489e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048a8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80048aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ac:	2200      	movs	r2, #0
 80048ae:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b2:	3304      	adds	r3, #4
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff fe68 	bl	800458a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048bc:	3318      	adds	r3, #24
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff fe63 	bl	800458a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048cc:	f1c3 0207 	rsb	r2, r3, #7
 80048d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80048d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048d8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80048da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048dc:	2200      	movs	r2, #0
 80048de:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80048e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80048ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ec:	334c      	adds	r3, #76	@ 0x4c
 80048ee:	224c      	movs	r2, #76	@ 0x4c
 80048f0:	2100      	movs	r1, #0
 80048f2:	4618      	mov	r0, r3
 80048f4:	f001 f856 	bl	80059a4 <memset>
 80048f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fa:	4a0d      	ldr	r2, [pc, #52]	@ (8004930 <prvInitialiseNewTask+0x134>)
 80048fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80048fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004900:	4a0c      	ldr	r2, [pc, #48]	@ (8004934 <prvInitialiseNewTask+0x138>)
 8004902:	655a      	str	r2, [r3, #84]	@ 0x54
 8004904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004906:	4a0c      	ldr	r2, [pc, #48]	@ (8004938 <prvInitialiseNewTask+0x13c>)
 8004908:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	68f9      	ldr	r1, [r7, #12]
 800490e:	69b8      	ldr	r0, [r7, #24]
 8004910:	f000 fc2a 	bl	8005168 <pxPortInitialiseStack>
 8004914:	4602      	mov	r2, r0
 8004916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004918:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800491a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004926:	bf00      	nop
 8004928:	3720      	adds	r7, #32
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	200044a8 	.word	0x200044a8
 8004934:	20004510 	.word	0x20004510
 8004938:	20004578 	.word	0x20004578

0800493c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004944:	f000 fd40 	bl	80053c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004948:	4b2a      	ldr	r3, [pc, #168]	@ (80049f4 <prvAddNewTaskToReadyList+0xb8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3301      	adds	r3, #1
 800494e:	4a29      	ldr	r2, [pc, #164]	@ (80049f4 <prvAddNewTaskToReadyList+0xb8>)
 8004950:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004952:	4b29      	ldr	r3, [pc, #164]	@ (80049f8 <prvAddNewTaskToReadyList+0xbc>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800495a:	4a27      	ldr	r2, [pc, #156]	@ (80049f8 <prvAddNewTaskToReadyList+0xbc>)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004960:	4b24      	ldr	r3, [pc, #144]	@ (80049f4 <prvAddNewTaskToReadyList+0xb8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d110      	bne.n	800498a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004968:	f000 fad4 	bl	8004f14 <prvInitialiseTaskLists>
 800496c:	e00d      	b.n	800498a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800496e:	4b23      	ldr	r3, [pc, #140]	@ (80049fc <prvAddNewTaskToReadyList+0xc0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004976:	4b20      	ldr	r3, [pc, #128]	@ (80049f8 <prvAddNewTaskToReadyList+0xbc>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004980:	429a      	cmp	r2, r3
 8004982:	d802      	bhi.n	800498a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004984:	4a1c      	ldr	r2, [pc, #112]	@ (80049f8 <prvAddNewTaskToReadyList+0xbc>)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800498a:	4b1d      	ldr	r3, [pc, #116]	@ (8004a00 <prvAddNewTaskToReadyList+0xc4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3301      	adds	r3, #1
 8004990:	4a1b      	ldr	r2, [pc, #108]	@ (8004a00 <prvAddNewTaskToReadyList+0xc4>)
 8004992:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004998:	2201      	movs	r2, #1
 800499a:	409a      	lsls	r2, r3
 800499c:	4b19      	ldr	r3, [pc, #100]	@ (8004a04 <prvAddNewTaskToReadyList+0xc8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	4a18      	ldr	r2, [pc, #96]	@ (8004a04 <prvAddNewTaskToReadyList+0xc8>)
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4a15      	ldr	r2, [pc, #84]	@ (8004a08 <prvAddNewTaskToReadyList+0xcc>)
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3304      	adds	r3, #4
 80049ba:	4619      	mov	r1, r3
 80049bc:	4610      	mov	r0, r2
 80049be:	f7ff fdf1 	bl	80045a4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049c2:	f000 fd33 	bl	800542c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80049c6:	4b0d      	ldr	r3, [pc, #52]	@ (80049fc <prvAddNewTaskToReadyList+0xc0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00e      	beq.n	80049ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049ce:	4b0a      	ldr	r3, [pc, #40]	@ (80049f8 <prvAddNewTaskToReadyList+0xbc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d8:	429a      	cmp	r2, r3
 80049da:	d207      	bcs.n	80049ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80049dc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a0c <prvAddNewTaskToReadyList+0xd0>)
 80049de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049ec:	bf00      	nop
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	20000854 	.word	0x20000854
 80049f8:	20000754 	.word	0x20000754
 80049fc:	20000860 	.word	0x20000860
 8004a00:	20000870 	.word	0x20000870
 8004a04:	2000085c 	.word	0x2000085c
 8004a08:	20000758 	.word	0x20000758
 8004a0c:	e000ed04 	.word	0xe000ed04

08004a10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d018      	beq.n	8004a54 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a22:	4b14      	ldr	r3, [pc, #80]	@ (8004a74 <vTaskDelay+0x64>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00b      	beq.n	8004a42 <vTaskDelay+0x32>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	60bb      	str	r3, [r7, #8]
}
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
 8004a40:	e7fd      	b.n	8004a3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a42:	f000 f885 	bl	8004b50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a46:	2100      	movs	r1, #0
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fb27 	bl	800509c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a4e:	f000 f88d 	bl	8004b6c <xTaskResumeAll>
 8004a52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d107      	bne.n	8004a6a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004a5a:	4b07      	ldr	r3, [pc, #28]	@ (8004a78 <vTaskDelay+0x68>)
 8004a5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a6a:	bf00      	nop
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	2000087c 	.word	0x2000087c
 8004a78:	e000ed04 	.word	0xe000ed04

08004a7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08a      	sub	sp, #40	@ 0x28
 8004a80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a8a:	463a      	mov	r2, r7
 8004a8c:	1d39      	adds	r1, r7, #4
 8004a8e:	f107 0308 	add.w	r3, r7, #8
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fb ff60 	bl	8000958 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a98:	6839      	ldr	r1, [r7, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	9202      	str	r2, [sp, #8]
 8004aa0:	9301      	str	r3, [sp, #4]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	460a      	mov	r2, r1
 8004aaa:	4921      	ldr	r1, [pc, #132]	@ (8004b30 <vTaskStartScheduler+0xb4>)
 8004aac:	4821      	ldr	r0, [pc, #132]	@ (8004b34 <vTaskStartScheduler+0xb8>)
 8004aae:	f7ff fe00 	bl	80046b2 <xTaskCreateStatic>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4a20      	ldr	r2, [pc, #128]	@ (8004b38 <vTaskStartScheduler+0xbc>)
 8004ab6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8004b38 <vTaskStartScheduler+0xbc>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	e001      	b.n	8004aca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d11b      	bne.n	8004b08 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	613b      	str	r3, [r7, #16]
}
 8004ae2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ae4:	4b15      	ldr	r3, [pc, #84]	@ (8004b3c <vTaskStartScheduler+0xc0>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	334c      	adds	r3, #76	@ 0x4c
 8004aea:	4a15      	ldr	r2, [pc, #84]	@ (8004b40 <vTaskStartScheduler+0xc4>)
 8004aec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004aee:	4b15      	ldr	r3, [pc, #84]	@ (8004b44 <vTaskStartScheduler+0xc8>)
 8004af0:	f04f 32ff 	mov.w	r2, #4294967295
 8004af4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004af6:	4b14      	ldr	r3, [pc, #80]	@ (8004b48 <vTaskStartScheduler+0xcc>)
 8004af8:	2201      	movs	r2, #1
 8004afa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004afc:	4b13      	ldr	r3, [pc, #76]	@ (8004b4c <vTaskStartScheduler+0xd0>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b02:	f000 fbbd 	bl	8005280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b06:	e00f      	b.n	8004b28 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0e:	d10b      	bne.n	8004b28 <vTaskStartScheduler+0xac>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	60fb      	str	r3, [r7, #12]
}
 8004b22:	bf00      	nop
 8004b24:	bf00      	nop
 8004b26:	e7fd      	b.n	8004b24 <vTaskStartScheduler+0xa8>
}
 8004b28:	bf00      	nop
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	080063a4 	.word	0x080063a4
 8004b34:	08004ee5 	.word	0x08004ee5
 8004b38:	20000878 	.word	0x20000878
 8004b3c:	20000754 	.word	0x20000754
 8004b40:	20000010 	.word	0x20000010
 8004b44:	20000874 	.word	0x20000874
 8004b48:	20000860 	.word	0x20000860
 8004b4c:	20000858 	.word	0x20000858

08004b50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004b54:	4b04      	ldr	r3, [pc, #16]	@ (8004b68 <vTaskSuspendAll+0x18>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	4a03      	ldr	r2, [pc, #12]	@ (8004b68 <vTaskSuspendAll+0x18>)
 8004b5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004b5e:	bf00      	nop
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	2000087c 	.word	0x2000087c

08004b6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b7a:	4b42      	ldr	r3, [pc, #264]	@ (8004c84 <xTaskResumeAll+0x118>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10b      	bne.n	8004b9a <xTaskResumeAll+0x2e>
	__asm volatile
 8004b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	603b      	str	r3, [r7, #0]
}
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop
 8004b98:	e7fd      	b.n	8004b96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b9a:	f000 fc15 	bl	80053c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b9e:	4b39      	ldr	r3, [pc, #228]	@ (8004c84 <xTaskResumeAll+0x118>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	4a37      	ldr	r2, [pc, #220]	@ (8004c84 <xTaskResumeAll+0x118>)
 8004ba6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ba8:	4b36      	ldr	r3, [pc, #216]	@ (8004c84 <xTaskResumeAll+0x118>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d161      	bne.n	8004c74 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004bb0:	4b35      	ldr	r3, [pc, #212]	@ (8004c88 <xTaskResumeAll+0x11c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d05d      	beq.n	8004c74 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bb8:	e02e      	b.n	8004c18 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bba:	4b34      	ldr	r3, [pc, #208]	@ (8004c8c <xTaskResumeAll+0x120>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3318      	adds	r3, #24
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7ff fd49 	bl	800465e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	3304      	adds	r3, #4
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7ff fd44 	bl	800465e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bda:	2201      	movs	r2, #1
 8004bdc:	409a      	lsls	r2, r3
 8004bde:	4b2c      	ldr	r3, [pc, #176]	@ (8004c90 <xTaskResumeAll+0x124>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	4a2a      	ldr	r2, [pc, #168]	@ (8004c90 <xTaskResumeAll+0x124>)
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4a27      	ldr	r2, [pc, #156]	@ (8004c94 <xTaskResumeAll+0x128>)
 8004bf6:	441a      	add	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4610      	mov	r0, r2
 8004c00:	f7ff fcd0 	bl	80045a4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c08:	4b23      	ldr	r3, [pc, #140]	@ (8004c98 <xTaskResumeAll+0x12c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d302      	bcc.n	8004c18 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004c12:	4b22      	ldr	r3, [pc, #136]	@ (8004c9c <xTaskResumeAll+0x130>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c18:	4b1c      	ldr	r3, [pc, #112]	@ (8004c8c <xTaskResumeAll+0x120>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1cc      	bne.n	8004bba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c26:	f000 fa19 	bl	800505c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca0 <xTaskResumeAll+0x134>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d010      	beq.n	8004c58 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c36:	f000 f837 	bl	8004ca8 <xTaskIncrementTick>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004c40:	4b16      	ldr	r3, [pc, #88]	@ (8004c9c <xTaskResumeAll+0x130>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f1      	bne.n	8004c36 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004c52:	4b13      	ldr	r3, [pc, #76]	@ (8004ca0 <xTaskResumeAll+0x134>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c58:	4b10      	ldr	r3, [pc, #64]	@ (8004c9c <xTaskResumeAll+0x130>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d009      	beq.n	8004c74 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c60:	2301      	movs	r3, #1
 8004c62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c64:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca4 <xTaskResumeAll+0x138>)
 8004c66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c74:	f000 fbda 	bl	800542c <vPortExitCritical>

	return xAlreadyYielded;
 8004c78:	68bb      	ldr	r3, [r7, #8]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	2000087c 	.word	0x2000087c
 8004c88:	20000854 	.word	0x20000854
 8004c8c:	20000814 	.word	0x20000814
 8004c90:	2000085c 	.word	0x2000085c
 8004c94:	20000758 	.word	0x20000758
 8004c98:	20000754 	.word	0x20000754
 8004c9c:	20000868 	.word	0x20000868
 8004ca0:	20000864 	.word	0x20000864
 8004ca4:	e000ed04 	.word	0xe000ed04

08004ca8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cb2:	4b4f      	ldr	r3, [pc, #316]	@ (8004df0 <xTaskIncrementTick+0x148>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f040 808f 	bne.w	8004dda <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004cbc:	4b4d      	ldr	r3, [pc, #308]	@ (8004df4 <xTaskIncrementTick+0x14c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004cc4:	4a4b      	ldr	r2, [pc, #300]	@ (8004df4 <xTaskIncrementTick+0x14c>)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d121      	bne.n	8004d14 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004cd0:	4b49      	ldr	r3, [pc, #292]	@ (8004df8 <xTaskIncrementTick+0x150>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00b      	beq.n	8004cf2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	603b      	str	r3, [r7, #0]
}
 8004cec:	bf00      	nop
 8004cee:	bf00      	nop
 8004cf0:	e7fd      	b.n	8004cee <xTaskIncrementTick+0x46>
 8004cf2:	4b41      	ldr	r3, [pc, #260]	@ (8004df8 <xTaskIncrementTick+0x150>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	4b40      	ldr	r3, [pc, #256]	@ (8004dfc <xTaskIncrementTick+0x154>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a3e      	ldr	r2, [pc, #248]	@ (8004df8 <xTaskIncrementTick+0x150>)
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	4a3e      	ldr	r2, [pc, #248]	@ (8004dfc <xTaskIncrementTick+0x154>)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	4b3e      	ldr	r3, [pc, #248]	@ (8004e00 <xTaskIncrementTick+0x158>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	4a3c      	ldr	r2, [pc, #240]	@ (8004e00 <xTaskIncrementTick+0x158>)
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	f000 f9a4 	bl	800505c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d14:	4b3b      	ldr	r3, [pc, #236]	@ (8004e04 <xTaskIncrementTick+0x15c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d348      	bcc.n	8004db0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d1e:	4b36      	ldr	r3, [pc, #216]	@ (8004df8 <xTaskIncrementTick+0x150>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d104      	bne.n	8004d32 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d28:	4b36      	ldr	r3, [pc, #216]	@ (8004e04 <xTaskIncrementTick+0x15c>)
 8004d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2e:	601a      	str	r2, [r3, #0]
					break;
 8004d30:	e03e      	b.n	8004db0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d32:	4b31      	ldr	r3, [pc, #196]	@ (8004df8 <xTaskIncrementTick+0x150>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d203      	bcs.n	8004d52 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d4a:	4a2e      	ldr	r2, [pc, #184]	@ (8004e04 <xTaskIncrementTick+0x15c>)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d50:	e02e      	b.n	8004db0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	3304      	adds	r3, #4
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff fc81 	bl	800465e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d004      	beq.n	8004d6e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	3318      	adds	r3, #24
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff fc78 	bl	800465e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d72:	2201      	movs	r2, #1
 8004d74:	409a      	lsls	r2, r3
 8004d76:	4b24      	ldr	r3, [pc, #144]	@ (8004e08 <xTaskIncrementTick+0x160>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	4a22      	ldr	r2, [pc, #136]	@ (8004e08 <xTaskIncrementTick+0x160>)
 8004d7e:	6013      	str	r3, [r2, #0]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4a1f      	ldr	r2, [pc, #124]	@ (8004e0c <xTaskIncrementTick+0x164>)
 8004d8e:	441a      	add	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	3304      	adds	r3, #4
 8004d94:	4619      	mov	r1, r3
 8004d96:	4610      	mov	r0, r2
 8004d98:	f7ff fc04 	bl	80045a4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e10 <xTaskIncrementTick+0x168>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d3b9      	bcc.n	8004d1e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004daa:	2301      	movs	r3, #1
 8004dac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dae:	e7b6      	b.n	8004d1e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004db0:	4b17      	ldr	r3, [pc, #92]	@ (8004e10 <xTaskIncrementTick+0x168>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004db6:	4915      	ldr	r1, [pc, #84]	@ (8004e0c <xTaskIncrementTick+0x164>)
 8004db8:	4613      	mov	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d901      	bls.n	8004dcc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004dcc:	4b11      	ldr	r3, [pc, #68]	@ (8004e14 <xTaskIncrementTick+0x16c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d007      	beq.n	8004de4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	e004      	b.n	8004de4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004dda:	4b0f      	ldr	r3, [pc, #60]	@ (8004e18 <xTaskIncrementTick+0x170>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	3301      	adds	r3, #1
 8004de0:	4a0d      	ldr	r2, [pc, #52]	@ (8004e18 <xTaskIncrementTick+0x170>)
 8004de2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004de4:	697b      	ldr	r3, [r7, #20]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	2000087c 	.word	0x2000087c
 8004df4:	20000858 	.word	0x20000858
 8004df8:	2000080c 	.word	0x2000080c
 8004dfc:	20000810 	.word	0x20000810
 8004e00:	2000086c 	.word	0x2000086c
 8004e04:	20000874 	.word	0x20000874
 8004e08:	2000085c 	.word	0x2000085c
 8004e0c:	20000758 	.word	0x20000758
 8004e10:	20000754 	.word	0x20000754
 8004e14:	20000868 	.word	0x20000868
 8004e18:	20000864 	.word	0x20000864

08004e1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e22:	4b2a      	ldr	r3, [pc, #168]	@ (8004ecc <vTaskSwitchContext+0xb0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e2a:	4b29      	ldr	r3, [pc, #164]	@ (8004ed0 <vTaskSwitchContext+0xb4>)
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e30:	e045      	b.n	8004ebe <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004e32:	4b27      	ldr	r3, [pc, #156]	@ (8004ed0 <vTaskSwitchContext+0xb4>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e38:	4b26      	ldr	r3, [pc, #152]	@ (8004ed4 <vTaskSwitchContext+0xb8>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	fab3 f383 	clz	r3, r3
 8004e44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004e46:	7afb      	ldrb	r3, [r7, #11]
 8004e48:	f1c3 031f 	rsb	r3, r3, #31
 8004e4c:	617b      	str	r3, [r7, #20]
 8004e4e:	4922      	ldr	r1, [pc, #136]	@ (8004ed8 <vTaskSwitchContext+0xbc>)
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10b      	bne.n	8004e7a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	607b      	str	r3, [r7, #4]
}
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop
 8004e78:	e7fd      	b.n	8004e76 <vTaskSwitchContext+0x5a>
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4a14      	ldr	r2, [pc, #80]	@ (8004ed8 <vTaskSwitchContext+0xbc>)
 8004e86:	4413      	add	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	605a      	str	r2, [r3, #4]
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d104      	bne.n	8004eaa <vTaskSwitchContext+0x8e>
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	605a      	str	r2, [r3, #4]
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8004edc <vTaskSwitchContext+0xc0>)
 8004eb2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004eb4:	4b09      	ldr	r3, [pc, #36]	@ (8004edc <vTaskSwitchContext+0xc0>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	334c      	adds	r3, #76	@ 0x4c
 8004eba:	4a09      	ldr	r2, [pc, #36]	@ (8004ee0 <vTaskSwitchContext+0xc4>)
 8004ebc:	6013      	str	r3, [r2, #0]
}
 8004ebe:	bf00      	nop
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	2000087c 	.word	0x2000087c
 8004ed0:	20000868 	.word	0x20000868
 8004ed4:	2000085c 	.word	0x2000085c
 8004ed8:	20000758 	.word	0x20000758
 8004edc:	20000754 	.word	0x20000754
 8004ee0:	20000010 	.word	0x20000010

08004ee4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004eec:	f000 f852 	bl	8004f94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ef0:	4b06      	ldr	r3, [pc, #24]	@ (8004f0c <prvIdleTask+0x28>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d9f9      	bls.n	8004eec <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ef8:	4b05      	ldr	r3, [pc, #20]	@ (8004f10 <prvIdleTask+0x2c>)
 8004efa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f08:	e7f0      	b.n	8004eec <prvIdleTask+0x8>
 8004f0a:	bf00      	nop
 8004f0c:	20000758 	.word	0x20000758
 8004f10:	e000ed04 	.word	0xe000ed04

08004f14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	607b      	str	r3, [r7, #4]
 8004f1e:	e00c      	b.n	8004f3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4a12      	ldr	r2, [pc, #72]	@ (8004f74 <prvInitialiseTaskLists+0x60>)
 8004f2c:	4413      	add	r3, r2
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff fb0b 	bl	800454a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3301      	adds	r3, #1
 8004f38:	607b      	str	r3, [r7, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b06      	cmp	r3, #6
 8004f3e:	d9ef      	bls.n	8004f20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f40:	480d      	ldr	r0, [pc, #52]	@ (8004f78 <prvInitialiseTaskLists+0x64>)
 8004f42:	f7ff fb02 	bl	800454a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f46:	480d      	ldr	r0, [pc, #52]	@ (8004f7c <prvInitialiseTaskLists+0x68>)
 8004f48:	f7ff faff 	bl	800454a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f4c:	480c      	ldr	r0, [pc, #48]	@ (8004f80 <prvInitialiseTaskLists+0x6c>)
 8004f4e:	f7ff fafc 	bl	800454a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f52:	480c      	ldr	r0, [pc, #48]	@ (8004f84 <prvInitialiseTaskLists+0x70>)
 8004f54:	f7ff faf9 	bl	800454a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f58:	480b      	ldr	r0, [pc, #44]	@ (8004f88 <prvInitialiseTaskLists+0x74>)
 8004f5a:	f7ff faf6 	bl	800454a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f8c <prvInitialiseTaskLists+0x78>)
 8004f60:	4a05      	ldr	r2, [pc, #20]	@ (8004f78 <prvInitialiseTaskLists+0x64>)
 8004f62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f64:	4b0a      	ldr	r3, [pc, #40]	@ (8004f90 <prvInitialiseTaskLists+0x7c>)
 8004f66:	4a05      	ldr	r2, [pc, #20]	@ (8004f7c <prvInitialiseTaskLists+0x68>)
 8004f68:	601a      	str	r2, [r3, #0]
}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000758 	.word	0x20000758
 8004f78:	200007e4 	.word	0x200007e4
 8004f7c:	200007f8 	.word	0x200007f8
 8004f80:	20000814 	.word	0x20000814
 8004f84:	20000828 	.word	0x20000828
 8004f88:	20000840 	.word	0x20000840
 8004f8c:	2000080c 	.word	0x2000080c
 8004f90:	20000810 	.word	0x20000810

08004f94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f9a:	e019      	b.n	8004fd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f9c:	f000 fa14 	bl	80053c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fa0:	4b10      	ldr	r3, [pc, #64]	@ (8004fe4 <prvCheckTasksWaitingTermination+0x50>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3304      	adds	r3, #4
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff fb56 	bl	800465e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe8 <prvCheckTasksWaitingTermination+0x54>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	4a0b      	ldr	r2, [pc, #44]	@ (8004fe8 <prvCheckTasksWaitingTermination+0x54>)
 8004fba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004fec <prvCheckTasksWaitingTermination+0x58>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8004fec <prvCheckTasksWaitingTermination+0x58>)
 8004fc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004fc6:	f000 fa31 	bl	800542c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f810 	bl	8004ff0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fd0:	4b06      	ldr	r3, [pc, #24]	@ (8004fec <prvCheckTasksWaitingTermination+0x58>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e1      	bne.n	8004f9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004fd8:	bf00      	nop
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000828 	.word	0x20000828
 8004fe8:	20000854 	.word	0x20000854
 8004fec:	2000083c 	.word	0x2000083c

08004ff0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	334c      	adds	r3, #76	@ 0x4c
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 fcd9 	bl	80059b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005008:	2b00      	cmp	r3, #0
 800500a:	d108      	bne.n	800501e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005010:	4618      	mov	r0, r3
 8005012:	f000 fb87 	bl	8005724 <vPortFree>
				vPortFree( pxTCB );
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fb84 	bl	8005724 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800501c:	e019      	b.n	8005052 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005024:	2b01      	cmp	r3, #1
 8005026:	d103      	bne.n	8005030 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fb7b 	bl	8005724 <vPortFree>
	}
 800502e:	e010      	b.n	8005052 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005036:	2b02      	cmp	r3, #2
 8005038:	d00b      	beq.n	8005052 <prvDeleteTCB+0x62>
	__asm volatile
 800503a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	60fb      	str	r3, [r7, #12]
}
 800504c:	bf00      	nop
 800504e:	bf00      	nop
 8005050:	e7fd      	b.n	800504e <prvDeleteTCB+0x5e>
	}
 8005052:	bf00      	nop
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005062:	4b0c      	ldr	r3, [pc, #48]	@ (8005094 <prvResetNextTaskUnblockTime+0x38>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d104      	bne.n	8005076 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800506c:	4b0a      	ldr	r3, [pc, #40]	@ (8005098 <prvResetNextTaskUnblockTime+0x3c>)
 800506e:	f04f 32ff 	mov.w	r2, #4294967295
 8005072:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005074:	e008      	b.n	8005088 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005076:	4b07      	ldr	r3, [pc, #28]	@ (8005094 <prvResetNextTaskUnblockTime+0x38>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	4a04      	ldr	r2, [pc, #16]	@ (8005098 <prvResetNextTaskUnblockTime+0x3c>)
 8005086:	6013      	str	r3, [r2, #0]
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	2000080c 	.word	0x2000080c
 8005098:	20000874 	.word	0x20000874

0800509c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050a6:	4b29      	ldr	r3, [pc, #164]	@ (800514c <prvAddCurrentTaskToDelayedList+0xb0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050ac:	4b28      	ldr	r3, [pc, #160]	@ (8005150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3304      	adds	r3, #4
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff fad3 	bl	800465e <uxListRemove>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10b      	bne.n	80050d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050be:	4b24      	ldr	r3, [pc, #144]	@ (8005150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c4:	2201      	movs	r2, #1
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	43da      	mvns	r2, r3
 80050cc:	4b21      	ldr	r3, [pc, #132]	@ (8005154 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4013      	ands	r3, r2
 80050d2:	4a20      	ldr	r2, [pc, #128]	@ (8005154 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d10a      	bne.n	80050f4 <prvAddCurrentTaskToDelayedList+0x58>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3304      	adds	r3, #4
 80050ea:	4619      	mov	r1, r3
 80050ec:	481a      	ldr	r0, [pc, #104]	@ (8005158 <prvAddCurrentTaskToDelayedList+0xbc>)
 80050ee:	f7ff fa59 	bl	80045a4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050f2:	e026      	b.n	8005142 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4413      	add	r3, r2
 80050fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050fc:	4b14      	ldr	r3, [pc, #80]	@ (8005150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	429a      	cmp	r2, r3
 800510a:	d209      	bcs.n	8005120 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800510c:	4b13      	ldr	r3, [pc, #76]	@ (800515c <prvAddCurrentTaskToDelayedList+0xc0>)
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	4b0f      	ldr	r3, [pc, #60]	@ (8005150 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3304      	adds	r3, #4
 8005116:	4619      	mov	r1, r3
 8005118:	4610      	mov	r0, r2
 800511a:	f7ff fa67 	bl	80045ec <vListInsert>
}
 800511e:	e010      	b.n	8005142 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005120:	4b0f      	ldr	r3, [pc, #60]	@ (8005160 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	4b0a      	ldr	r3, [pc, #40]	@ (8005150 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3304      	adds	r3, #4
 800512a:	4619      	mov	r1, r3
 800512c:	4610      	mov	r0, r2
 800512e:	f7ff fa5d 	bl	80045ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005132:	4b0c      	ldr	r3, [pc, #48]	@ (8005164 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	429a      	cmp	r2, r3
 800513a:	d202      	bcs.n	8005142 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800513c:	4a09      	ldr	r2, [pc, #36]	@ (8005164 <prvAddCurrentTaskToDelayedList+0xc8>)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	6013      	str	r3, [r2, #0]
}
 8005142:	bf00      	nop
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	20000858 	.word	0x20000858
 8005150:	20000754 	.word	0x20000754
 8005154:	2000085c 	.word	0x2000085c
 8005158:	20000840 	.word	0x20000840
 800515c:	20000810 	.word	0x20000810
 8005160:	2000080c 	.word	0x2000080c
 8005164:	20000874 	.word	0x20000874

08005168 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	3b04      	subs	r3, #4
 8005178:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005180:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	3b04      	subs	r3, #4
 8005186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f023 0201 	bic.w	r2, r3, #1
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	3b04      	subs	r3, #4
 8005196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005198:	4a0c      	ldr	r2, [pc, #48]	@ (80051cc <pxPortInitialiseStack+0x64>)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3b14      	subs	r3, #20
 80051a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3b04      	subs	r3, #4
 80051ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f06f 0202 	mvn.w	r2, #2
 80051b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	3b20      	subs	r3, #32
 80051bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051be:	68fb      	ldr	r3, [r7, #12]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	080051d1 	.word	0x080051d1

080051d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80051d6:	2300      	movs	r3, #0
 80051d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051da:	4b13      	ldr	r3, [pc, #76]	@ (8005228 <prvTaskExitError+0x58>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e2:	d00b      	beq.n	80051fc <prvTaskExitError+0x2c>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	60fb      	str	r3, [r7, #12]
}
 80051f6:	bf00      	nop
 80051f8:	bf00      	nop
 80051fa:	e7fd      	b.n	80051f8 <prvTaskExitError+0x28>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	60bb      	str	r3, [r7, #8]
}
 800520e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005210:	bf00      	nop
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0fc      	beq.n	8005212 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	2000000c 	.word	0x2000000c
 800522c:	00000000 	.word	0x00000000

08005230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005230:	4b07      	ldr	r3, [pc, #28]	@ (8005250 <pxCurrentTCBConst2>)
 8005232:	6819      	ldr	r1, [r3, #0]
 8005234:	6808      	ldr	r0, [r1, #0]
 8005236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523a:	f380 8809 	msr	PSP, r0
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f04f 0000 	mov.w	r0, #0
 8005246:	f380 8811 	msr	BASEPRI, r0
 800524a:	4770      	bx	lr
 800524c:	f3af 8000 	nop.w

08005250 <pxCurrentTCBConst2>:
 8005250:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005254:	bf00      	nop
 8005256:	bf00      	nop

08005258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005258:	4808      	ldr	r0, [pc, #32]	@ (800527c <prvPortStartFirstTask+0x24>)
 800525a:	6800      	ldr	r0, [r0, #0]
 800525c:	6800      	ldr	r0, [r0, #0]
 800525e:	f380 8808 	msr	MSP, r0
 8005262:	f04f 0000 	mov.w	r0, #0
 8005266:	f380 8814 	msr	CONTROL, r0
 800526a:	b662      	cpsie	i
 800526c:	b661      	cpsie	f
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	df00      	svc	0
 8005278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800527a:	bf00      	nop
 800527c:	e000ed08 	.word	0xe000ed08

08005280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005286:	4b47      	ldr	r3, [pc, #284]	@ (80053a4 <xPortStartScheduler+0x124>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a47      	ldr	r2, [pc, #284]	@ (80053a8 <xPortStartScheduler+0x128>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d10b      	bne.n	80052a8 <xPortStartScheduler+0x28>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	613b      	str	r3, [r7, #16]
}
 80052a2:	bf00      	nop
 80052a4:	bf00      	nop
 80052a6:	e7fd      	b.n	80052a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052a8:	4b3e      	ldr	r3, [pc, #248]	@ (80053a4 <xPortStartScheduler+0x124>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a3f      	ldr	r2, [pc, #252]	@ (80053ac <xPortStartScheduler+0x12c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d10b      	bne.n	80052ca <xPortStartScheduler+0x4a>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	60fb      	str	r3, [r7, #12]
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	e7fd      	b.n	80052c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052ca:	4b39      	ldr	r3, [pc, #228]	@ (80053b0 <xPortStartScheduler+0x130>)
 80052cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	22ff      	movs	r2, #255	@ 0xff
 80052da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052e4:	78fb      	ldrb	r3, [r7, #3]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	4b31      	ldr	r3, [pc, #196]	@ (80053b4 <xPortStartScheduler+0x134>)
 80052f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052f2:	4b31      	ldr	r3, [pc, #196]	@ (80053b8 <xPortStartScheduler+0x138>)
 80052f4:	2207      	movs	r2, #7
 80052f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052f8:	e009      	b.n	800530e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80052fa:	4b2f      	ldr	r3, [pc, #188]	@ (80053b8 <xPortStartScheduler+0x138>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3b01      	subs	r3, #1
 8005300:	4a2d      	ldr	r2, [pc, #180]	@ (80053b8 <xPortStartScheduler+0x138>)
 8005302:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	005b      	lsls	r3, r3, #1
 800530a:	b2db      	uxtb	r3, r3
 800530c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800530e:	78fb      	ldrb	r3, [r7, #3]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005316:	2b80      	cmp	r3, #128	@ 0x80
 8005318:	d0ef      	beq.n	80052fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800531a:	4b27      	ldr	r3, [pc, #156]	@ (80053b8 <xPortStartScheduler+0x138>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f1c3 0307 	rsb	r3, r3, #7
 8005322:	2b04      	cmp	r3, #4
 8005324:	d00b      	beq.n	800533e <xPortStartScheduler+0xbe>
	__asm volatile
 8005326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	60bb      	str	r3, [r7, #8]
}
 8005338:	bf00      	nop
 800533a:	bf00      	nop
 800533c:	e7fd      	b.n	800533a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800533e:	4b1e      	ldr	r3, [pc, #120]	@ (80053b8 <xPortStartScheduler+0x138>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	4a1c      	ldr	r2, [pc, #112]	@ (80053b8 <xPortStartScheduler+0x138>)
 8005346:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005348:	4b1b      	ldr	r3, [pc, #108]	@ (80053b8 <xPortStartScheduler+0x138>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005350:	4a19      	ldr	r2, [pc, #100]	@ (80053b8 <xPortStartScheduler+0x138>)
 8005352:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	b2da      	uxtb	r2, r3
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800535c:	4b17      	ldr	r3, [pc, #92]	@ (80053bc <xPortStartScheduler+0x13c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a16      	ldr	r2, [pc, #88]	@ (80053bc <xPortStartScheduler+0x13c>)
 8005362:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005366:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005368:	4b14      	ldr	r3, [pc, #80]	@ (80053bc <xPortStartScheduler+0x13c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a13      	ldr	r2, [pc, #76]	@ (80053bc <xPortStartScheduler+0x13c>)
 800536e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005372:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005374:	f000 f8da 	bl	800552c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005378:	4b11      	ldr	r3, [pc, #68]	@ (80053c0 <xPortStartScheduler+0x140>)
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800537e:	f000 f8f9 	bl	8005574 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005382:	4b10      	ldr	r3, [pc, #64]	@ (80053c4 <xPortStartScheduler+0x144>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a0f      	ldr	r2, [pc, #60]	@ (80053c4 <xPortStartScheduler+0x144>)
 8005388:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800538c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800538e:	f7ff ff63 	bl	8005258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005392:	f7ff fd43 	bl	8004e1c <vTaskSwitchContext>
	prvTaskExitError();
 8005396:	f7ff ff1b 	bl	80051d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	e000ed00 	.word	0xe000ed00
 80053a8:	410fc271 	.word	0x410fc271
 80053ac:	410fc270 	.word	0x410fc270
 80053b0:	e000e400 	.word	0xe000e400
 80053b4:	20000880 	.word	0x20000880
 80053b8:	20000884 	.word	0x20000884
 80053bc:	e000ed20 	.word	0xe000ed20
 80053c0:	2000000c 	.word	0x2000000c
 80053c4:	e000ef34 	.word	0xe000ef34

080053c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	607b      	str	r3, [r7, #4]
}
 80053e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053e2:	4b10      	ldr	r3, [pc, #64]	@ (8005424 <vPortEnterCritical+0x5c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3301      	adds	r3, #1
 80053e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005424 <vPortEnterCritical+0x5c>)
 80053ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005424 <vPortEnterCritical+0x5c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d110      	bne.n	8005416 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005428 <vPortEnterCritical+0x60>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00b      	beq.n	8005416 <vPortEnterCritical+0x4e>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	603b      	str	r3, [r7, #0]
}
 8005410:	bf00      	nop
 8005412:	bf00      	nop
 8005414:	e7fd      	b.n	8005412 <vPortEnterCritical+0x4a>
	}
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	2000000c 	.word	0x2000000c
 8005428:	e000ed04 	.word	0xe000ed04

0800542c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005432:	4b12      	ldr	r3, [pc, #72]	@ (800547c <vPortExitCritical+0x50>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10b      	bne.n	8005452 <vPortExitCritical+0x26>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	607b      	str	r3, [r7, #4]
}
 800544c:	bf00      	nop
 800544e:	bf00      	nop
 8005450:	e7fd      	b.n	800544e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005452:	4b0a      	ldr	r3, [pc, #40]	@ (800547c <vPortExitCritical+0x50>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3b01      	subs	r3, #1
 8005458:	4a08      	ldr	r2, [pc, #32]	@ (800547c <vPortExitCritical+0x50>)
 800545a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800545c:	4b07      	ldr	r3, [pc, #28]	@ (800547c <vPortExitCritical+0x50>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d105      	bne.n	8005470 <vPortExitCritical+0x44>
 8005464:	2300      	movs	r3, #0
 8005466:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800546e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	2000000c 	.word	0x2000000c

08005480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005480:	f3ef 8009 	mrs	r0, PSP
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	4b15      	ldr	r3, [pc, #84]	@ (80054e0 <pxCurrentTCBConst>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	f01e 0f10 	tst.w	lr, #16
 8005490:	bf08      	it	eq
 8005492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549a:	6010      	str	r0, [r2, #0]
 800549c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80054a4:	f380 8811 	msr	BASEPRI, r0
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f7ff fcb4 	bl	8004e1c <vTaskSwitchContext>
 80054b4:	f04f 0000 	mov.w	r0, #0
 80054b8:	f380 8811 	msr	BASEPRI, r0
 80054bc:	bc09      	pop	{r0, r3}
 80054be:	6819      	ldr	r1, [r3, #0]
 80054c0:	6808      	ldr	r0, [r1, #0]
 80054c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c6:	f01e 0f10 	tst.w	lr, #16
 80054ca:	bf08      	it	eq
 80054cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054d0:	f380 8809 	msr	PSP, r0
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	f3af 8000 	nop.w

080054e0 <pxCurrentTCBConst>:
 80054e0:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop

080054e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	607b      	str	r3, [r7, #4]
}
 8005500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005502:	f7ff fbd1 	bl	8004ca8 <xTaskIncrementTick>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800550c:	4b06      	ldr	r3, [pc, #24]	@ (8005528 <SysTick_Handler+0x40>)
 800550e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	2300      	movs	r3, #0
 8005516:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	f383 8811 	msr	BASEPRI, r3
}
 800551e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005520:	bf00      	nop
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	e000ed04 	.word	0xe000ed04

0800552c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005530:	4b0b      	ldr	r3, [pc, #44]	@ (8005560 <vPortSetupTimerInterrupt+0x34>)
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005536:	4b0b      	ldr	r3, [pc, #44]	@ (8005564 <vPortSetupTimerInterrupt+0x38>)
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800553c:	4b0a      	ldr	r3, [pc, #40]	@ (8005568 <vPortSetupTimerInterrupt+0x3c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a0a      	ldr	r2, [pc, #40]	@ (800556c <vPortSetupTimerInterrupt+0x40>)
 8005542:	fba2 2303 	umull	r2, r3, r2, r3
 8005546:	099b      	lsrs	r3, r3, #6
 8005548:	4a09      	ldr	r2, [pc, #36]	@ (8005570 <vPortSetupTimerInterrupt+0x44>)
 800554a:	3b01      	subs	r3, #1
 800554c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800554e:	4b04      	ldr	r3, [pc, #16]	@ (8005560 <vPortSetupTimerInterrupt+0x34>)
 8005550:	2207      	movs	r2, #7
 8005552:	601a      	str	r2, [r3, #0]
}
 8005554:	bf00      	nop
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	e000e010 	.word	0xe000e010
 8005564:	e000e018 	.word	0xe000e018
 8005568:	20000000 	.word	0x20000000
 800556c:	10624dd3 	.word	0x10624dd3
 8005570:	e000e014 	.word	0xe000e014

08005574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005574:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005584 <vPortEnableVFP+0x10>
 8005578:	6801      	ldr	r1, [r0, #0]
 800557a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800557e:	6001      	str	r1, [r0, #0]
 8005580:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005582:	bf00      	nop
 8005584:	e000ed88 	.word	0xe000ed88

08005588 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08a      	sub	sp, #40	@ 0x28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005590:	2300      	movs	r3, #0
 8005592:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005594:	f7ff fadc 	bl	8004b50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005598:	4b5c      	ldr	r3, [pc, #368]	@ (800570c <pvPortMalloc+0x184>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055a0:	f000 f924 	bl	80057ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055a4:	4b5a      	ldr	r3, [pc, #360]	@ (8005710 <pvPortMalloc+0x188>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4013      	ands	r3, r2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f040 8095 	bne.w	80056dc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01e      	beq.n	80055f6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80055b8:	2208      	movs	r2, #8
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4413      	add	r3, r2
 80055be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f003 0307 	and.w	r3, r3, #7
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d015      	beq.n	80055f6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f023 0307 	bic.w	r3, r3, #7
 80055d0:	3308      	adds	r3, #8
 80055d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00b      	beq.n	80055f6 <pvPortMalloc+0x6e>
	__asm volatile
 80055de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	617b      	str	r3, [r7, #20]
}
 80055f0:	bf00      	nop
 80055f2:	bf00      	nop
 80055f4:	e7fd      	b.n	80055f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d06f      	beq.n	80056dc <pvPortMalloc+0x154>
 80055fc:	4b45      	ldr	r3, [pc, #276]	@ (8005714 <pvPortMalloc+0x18c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	429a      	cmp	r2, r3
 8005604:	d86a      	bhi.n	80056dc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005606:	4b44      	ldr	r3, [pc, #272]	@ (8005718 <pvPortMalloc+0x190>)
 8005608:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800560a:	4b43      	ldr	r3, [pc, #268]	@ (8005718 <pvPortMalloc+0x190>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005610:	e004      	b.n	800561c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800561c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	429a      	cmp	r2, r3
 8005624:	d903      	bls.n	800562e <pvPortMalloc+0xa6>
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1f1      	bne.n	8005612 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800562e:	4b37      	ldr	r3, [pc, #220]	@ (800570c <pvPortMalloc+0x184>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005634:	429a      	cmp	r2, r3
 8005636:	d051      	beq.n	80056dc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2208      	movs	r2, #8
 800563e:	4413      	add	r3, r2
 8005640:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800564a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	1ad2      	subs	r2, r2, r3
 8005652:	2308      	movs	r3, #8
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	429a      	cmp	r2, r3
 8005658:	d920      	bls.n	800569c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800565a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4413      	add	r3, r2
 8005660:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00b      	beq.n	8005684 <pvPortMalloc+0xfc>
	__asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	613b      	str	r3, [r7, #16]
}
 800567e:	bf00      	nop
 8005680:	bf00      	nop
 8005682:	e7fd      	b.n	8005680 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	1ad2      	subs	r2, r2, r3
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005696:	69b8      	ldr	r0, [r7, #24]
 8005698:	f000 f90a 	bl	80058b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800569c:	4b1d      	ldr	r3, [pc, #116]	@ (8005714 <pvPortMalloc+0x18c>)
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005714 <pvPortMalloc+0x18c>)
 80056a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005714 <pvPortMalloc+0x18c>)
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	4b1b      	ldr	r3, [pc, #108]	@ (800571c <pvPortMalloc+0x194>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d203      	bcs.n	80056be <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056b6:	4b17      	ldr	r3, [pc, #92]	@ (8005714 <pvPortMalloc+0x18c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a18      	ldr	r2, [pc, #96]	@ (800571c <pvPortMalloc+0x194>)
 80056bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	4b13      	ldr	r3, [pc, #76]	@ (8005710 <pvPortMalloc+0x188>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	431a      	orrs	r2, r3
 80056c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80056d2:	4b13      	ldr	r3, [pc, #76]	@ (8005720 <pvPortMalloc+0x198>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3301      	adds	r3, #1
 80056d8:	4a11      	ldr	r2, [pc, #68]	@ (8005720 <pvPortMalloc+0x198>)
 80056da:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056dc:	f7ff fa46 	bl	8004b6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00b      	beq.n	8005702 <pvPortMalloc+0x17a>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	60fb      	str	r3, [r7, #12]
}
 80056fc:	bf00      	nop
 80056fe:	bf00      	nop
 8005700:	e7fd      	b.n	80056fe <pvPortMalloc+0x176>
	return pvReturn;
 8005702:	69fb      	ldr	r3, [r7, #28]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3728      	adds	r7, #40	@ 0x28
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	20004490 	.word	0x20004490
 8005710:	200044a4 	.word	0x200044a4
 8005714:	20004494 	.word	0x20004494
 8005718:	20004488 	.word	0x20004488
 800571c:	20004498 	.word	0x20004498
 8005720:	2000449c 	.word	0x2000449c

08005724 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d04f      	beq.n	80057d6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005736:	2308      	movs	r3, #8
 8005738:	425b      	negs	r3, r3
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4413      	add	r3, r2
 800573e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	4b25      	ldr	r3, [pc, #148]	@ (80057e0 <vPortFree+0xbc>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4013      	ands	r3, r2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10b      	bne.n	800576a <vPortFree+0x46>
	__asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	60fb      	str	r3, [r7, #12]
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop
 8005768:	e7fd      	b.n	8005766 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00b      	beq.n	800578a <vPortFree+0x66>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	60bb      	str	r3, [r7, #8]
}
 8005784:	bf00      	nop
 8005786:	bf00      	nop
 8005788:	e7fd      	b.n	8005786 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	4b14      	ldr	r3, [pc, #80]	@ (80057e0 <vPortFree+0xbc>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4013      	ands	r3, r2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01e      	beq.n	80057d6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d11a      	bne.n	80057d6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	4b0e      	ldr	r3, [pc, #56]	@ (80057e0 <vPortFree+0xbc>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	43db      	mvns	r3, r3
 80057aa:	401a      	ands	r2, r3
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057b0:	f7ff f9ce 	bl	8004b50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	4b0a      	ldr	r3, [pc, #40]	@ (80057e4 <vPortFree+0xc0>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4413      	add	r3, r2
 80057be:	4a09      	ldr	r2, [pc, #36]	@ (80057e4 <vPortFree+0xc0>)
 80057c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057c2:	6938      	ldr	r0, [r7, #16]
 80057c4:	f000 f874 	bl	80058b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80057c8:	4b07      	ldr	r3, [pc, #28]	@ (80057e8 <vPortFree+0xc4>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3301      	adds	r3, #1
 80057ce:	4a06      	ldr	r2, [pc, #24]	@ (80057e8 <vPortFree+0xc4>)
 80057d0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80057d2:	f7ff f9cb 	bl	8004b6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057d6:	bf00      	nop
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	200044a4 	.word	0x200044a4
 80057e4:	20004494 	.word	0x20004494
 80057e8:	200044a0 	.word	0x200044a0

080057ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057f2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80057f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057f8:	4b27      	ldr	r3, [pc, #156]	@ (8005898 <prvHeapInit+0xac>)
 80057fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f003 0307 	and.w	r3, r3, #7
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00c      	beq.n	8005820 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3307      	adds	r3, #7
 800580a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0307 	bic.w	r3, r3, #7
 8005812:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	4a1f      	ldr	r2, [pc, #124]	@ (8005898 <prvHeapInit+0xac>)
 800581c:	4413      	add	r3, r2
 800581e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005824:	4a1d      	ldr	r2, [pc, #116]	@ (800589c <prvHeapInit+0xb0>)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800582a:	4b1c      	ldr	r3, [pc, #112]	@ (800589c <prvHeapInit+0xb0>)
 800582c:	2200      	movs	r2, #0
 800582e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	4413      	add	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005838:	2208      	movs	r2, #8
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	1a9b      	subs	r3, r3, r2
 800583e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0307 	bic.w	r3, r3, #7
 8005846:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4a15      	ldr	r2, [pc, #84]	@ (80058a0 <prvHeapInit+0xb4>)
 800584c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800584e:	4b14      	ldr	r3, [pc, #80]	@ (80058a0 <prvHeapInit+0xb4>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2200      	movs	r2, #0
 8005854:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005856:	4b12      	ldr	r3, [pc, #72]	@ (80058a0 <prvHeapInit+0xb4>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2200      	movs	r2, #0
 800585c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	1ad2      	subs	r2, r2, r3
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800586c:	4b0c      	ldr	r3, [pc, #48]	@ (80058a0 <prvHeapInit+0xb4>)
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	4a0a      	ldr	r2, [pc, #40]	@ (80058a4 <prvHeapInit+0xb8>)
 800587a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	4a09      	ldr	r2, [pc, #36]	@ (80058a8 <prvHeapInit+0xbc>)
 8005882:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005884:	4b09      	ldr	r3, [pc, #36]	@ (80058ac <prvHeapInit+0xc0>)
 8005886:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800588a:	601a      	str	r2, [r3, #0]
}
 800588c:	bf00      	nop
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	20000888 	.word	0x20000888
 800589c:	20004488 	.word	0x20004488
 80058a0:	20004490 	.word	0x20004490
 80058a4:	20004498 	.word	0x20004498
 80058a8:	20004494 	.word	0x20004494
 80058ac:	200044a4 	.word	0x200044a4

080058b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058b8:	4b28      	ldr	r3, [pc, #160]	@ (800595c <prvInsertBlockIntoFreeList+0xac>)
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	e002      	b.n	80058c4 <prvInsertBlockIntoFreeList+0x14>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d8f7      	bhi.n	80058be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	4413      	add	r3, r2
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d108      	bne.n	80058f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	441a      	add	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	441a      	add	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	429a      	cmp	r2, r3
 8005904:	d118      	bne.n	8005938 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	4b15      	ldr	r3, [pc, #84]	@ (8005960 <prvInsertBlockIntoFreeList+0xb0>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d00d      	beq.n	800592e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	441a      	add	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	e008      	b.n	8005940 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800592e:	4b0c      	ldr	r3, [pc, #48]	@ (8005960 <prvInsertBlockIntoFreeList+0xb0>)
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	e003      	b.n	8005940 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	429a      	cmp	r2, r3
 8005946:	d002      	beq.n	800594e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800594e:	bf00      	nop
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	20004488 	.word	0x20004488
 8005960:	20004490 	.word	0x20004490

08005964 <siprintf>:
 8005964:	b40e      	push	{r1, r2, r3}
 8005966:	b500      	push	{lr}
 8005968:	b09c      	sub	sp, #112	@ 0x70
 800596a:	ab1d      	add	r3, sp, #116	@ 0x74
 800596c:	9002      	str	r0, [sp, #8]
 800596e:	9006      	str	r0, [sp, #24]
 8005970:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005974:	4809      	ldr	r0, [pc, #36]	@ (800599c <siprintf+0x38>)
 8005976:	9107      	str	r1, [sp, #28]
 8005978:	9104      	str	r1, [sp, #16]
 800597a:	4909      	ldr	r1, [pc, #36]	@ (80059a0 <siprintf+0x3c>)
 800597c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005980:	9105      	str	r1, [sp, #20]
 8005982:	6800      	ldr	r0, [r0, #0]
 8005984:	9301      	str	r3, [sp, #4]
 8005986:	a902      	add	r1, sp, #8
 8005988:	f000 f9f8 	bl	8005d7c <_svfiprintf_r>
 800598c:	9b02      	ldr	r3, [sp, #8]
 800598e:	2200      	movs	r2, #0
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	b01c      	add	sp, #112	@ 0x70
 8005994:	f85d eb04 	ldr.w	lr, [sp], #4
 8005998:	b003      	add	sp, #12
 800599a:	4770      	bx	lr
 800599c:	20000010 	.word	0x20000010
 80059a0:	ffff0208 	.word	0xffff0208

080059a4 <memset>:
 80059a4:	4402      	add	r2, r0
 80059a6:	4603      	mov	r3, r0
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d100      	bne.n	80059ae <memset+0xa>
 80059ac:	4770      	bx	lr
 80059ae:	f803 1b01 	strb.w	r1, [r3], #1
 80059b2:	e7f9      	b.n	80059a8 <memset+0x4>

080059b4 <_reclaim_reent>:
 80059b4:	4b29      	ldr	r3, [pc, #164]	@ (8005a5c <_reclaim_reent+0xa8>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4283      	cmp	r3, r0
 80059ba:	b570      	push	{r4, r5, r6, lr}
 80059bc:	4604      	mov	r4, r0
 80059be:	d04b      	beq.n	8005a58 <_reclaim_reent+0xa4>
 80059c0:	69c3      	ldr	r3, [r0, #28]
 80059c2:	b1ab      	cbz	r3, 80059f0 <_reclaim_reent+0x3c>
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	b16b      	cbz	r3, 80059e4 <_reclaim_reent+0x30>
 80059c8:	2500      	movs	r5, #0
 80059ca:	69e3      	ldr	r3, [r4, #28]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	5959      	ldr	r1, [r3, r5]
 80059d0:	2900      	cmp	r1, #0
 80059d2:	d13b      	bne.n	8005a4c <_reclaim_reent+0x98>
 80059d4:	3504      	adds	r5, #4
 80059d6:	2d80      	cmp	r5, #128	@ 0x80
 80059d8:	d1f7      	bne.n	80059ca <_reclaim_reent+0x16>
 80059da:	69e3      	ldr	r3, [r4, #28]
 80059dc:	4620      	mov	r0, r4
 80059de:	68d9      	ldr	r1, [r3, #12]
 80059e0:	f000 f878 	bl	8005ad4 <_free_r>
 80059e4:	69e3      	ldr	r3, [r4, #28]
 80059e6:	6819      	ldr	r1, [r3, #0]
 80059e8:	b111      	cbz	r1, 80059f0 <_reclaim_reent+0x3c>
 80059ea:	4620      	mov	r0, r4
 80059ec:	f000 f872 	bl	8005ad4 <_free_r>
 80059f0:	6961      	ldr	r1, [r4, #20]
 80059f2:	b111      	cbz	r1, 80059fa <_reclaim_reent+0x46>
 80059f4:	4620      	mov	r0, r4
 80059f6:	f000 f86d 	bl	8005ad4 <_free_r>
 80059fa:	69e1      	ldr	r1, [r4, #28]
 80059fc:	b111      	cbz	r1, 8005a04 <_reclaim_reent+0x50>
 80059fe:	4620      	mov	r0, r4
 8005a00:	f000 f868 	bl	8005ad4 <_free_r>
 8005a04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005a06:	b111      	cbz	r1, 8005a0e <_reclaim_reent+0x5a>
 8005a08:	4620      	mov	r0, r4
 8005a0a:	f000 f863 	bl	8005ad4 <_free_r>
 8005a0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a10:	b111      	cbz	r1, 8005a18 <_reclaim_reent+0x64>
 8005a12:	4620      	mov	r0, r4
 8005a14:	f000 f85e 	bl	8005ad4 <_free_r>
 8005a18:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005a1a:	b111      	cbz	r1, 8005a22 <_reclaim_reent+0x6e>
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f000 f859 	bl	8005ad4 <_free_r>
 8005a22:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005a24:	b111      	cbz	r1, 8005a2c <_reclaim_reent+0x78>
 8005a26:	4620      	mov	r0, r4
 8005a28:	f000 f854 	bl	8005ad4 <_free_r>
 8005a2c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005a2e:	b111      	cbz	r1, 8005a36 <_reclaim_reent+0x82>
 8005a30:	4620      	mov	r0, r4
 8005a32:	f000 f84f 	bl	8005ad4 <_free_r>
 8005a36:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005a38:	b111      	cbz	r1, 8005a40 <_reclaim_reent+0x8c>
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f000 f84a 	bl	8005ad4 <_free_r>
 8005a40:	6a23      	ldr	r3, [r4, #32]
 8005a42:	b14b      	cbz	r3, 8005a58 <_reclaim_reent+0xa4>
 8005a44:	4620      	mov	r0, r4
 8005a46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005a4a:	4718      	bx	r3
 8005a4c:	680e      	ldr	r6, [r1, #0]
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f000 f840 	bl	8005ad4 <_free_r>
 8005a54:	4631      	mov	r1, r6
 8005a56:	e7bb      	b.n	80059d0 <_reclaim_reent+0x1c>
 8005a58:	bd70      	pop	{r4, r5, r6, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20000010 	.word	0x20000010

08005a60 <__errno>:
 8005a60:	4b01      	ldr	r3, [pc, #4]	@ (8005a68 <__errno+0x8>)
 8005a62:	6818      	ldr	r0, [r3, #0]
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	20000010 	.word	0x20000010

08005a6c <__libc_init_array>:
 8005a6c:	b570      	push	{r4, r5, r6, lr}
 8005a6e:	4d0d      	ldr	r5, [pc, #52]	@ (8005aa4 <__libc_init_array+0x38>)
 8005a70:	4c0d      	ldr	r4, [pc, #52]	@ (8005aa8 <__libc_init_array+0x3c>)
 8005a72:	1b64      	subs	r4, r4, r5
 8005a74:	10a4      	asrs	r4, r4, #2
 8005a76:	2600      	movs	r6, #0
 8005a78:	42a6      	cmp	r6, r4
 8005a7a:	d109      	bne.n	8005a90 <__libc_init_array+0x24>
 8005a7c:	4d0b      	ldr	r5, [pc, #44]	@ (8005aac <__libc_init_array+0x40>)
 8005a7e:	4c0c      	ldr	r4, [pc, #48]	@ (8005ab0 <__libc_init_array+0x44>)
 8005a80:	f000 fc66 	bl	8006350 <_init>
 8005a84:	1b64      	subs	r4, r4, r5
 8005a86:	10a4      	asrs	r4, r4, #2
 8005a88:	2600      	movs	r6, #0
 8005a8a:	42a6      	cmp	r6, r4
 8005a8c:	d105      	bne.n	8005a9a <__libc_init_array+0x2e>
 8005a8e:	bd70      	pop	{r4, r5, r6, pc}
 8005a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a94:	4798      	blx	r3
 8005a96:	3601      	adds	r6, #1
 8005a98:	e7ee      	b.n	8005a78 <__libc_init_array+0xc>
 8005a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a9e:	4798      	blx	r3
 8005aa0:	3601      	adds	r6, #1
 8005aa2:	e7f2      	b.n	8005a8a <__libc_init_array+0x1e>
 8005aa4:	08006400 	.word	0x08006400
 8005aa8:	08006400 	.word	0x08006400
 8005aac:	08006400 	.word	0x08006400
 8005ab0:	08006404 	.word	0x08006404

08005ab4 <__retarget_lock_acquire_recursive>:
 8005ab4:	4770      	bx	lr

08005ab6 <__retarget_lock_release_recursive>:
 8005ab6:	4770      	bx	lr

08005ab8 <memcpy>:
 8005ab8:	440a      	add	r2, r1
 8005aba:	4291      	cmp	r1, r2
 8005abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ac0:	d100      	bne.n	8005ac4 <memcpy+0xc>
 8005ac2:	4770      	bx	lr
 8005ac4:	b510      	push	{r4, lr}
 8005ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ace:	4291      	cmp	r1, r2
 8005ad0:	d1f9      	bne.n	8005ac6 <memcpy+0xe>
 8005ad2:	bd10      	pop	{r4, pc}

08005ad4 <_free_r>:
 8005ad4:	b538      	push	{r3, r4, r5, lr}
 8005ad6:	4605      	mov	r5, r0
 8005ad8:	2900      	cmp	r1, #0
 8005ada:	d041      	beq.n	8005b60 <_free_r+0x8c>
 8005adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ae0:	1f0c      	subs	r4, r1, #4
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	bfb8      	it	lt
 8005ae6:	18e4      	addlt	r4, r4, r3
 8005ae8:	f000 f8e0 	bl	8005cac <__malloc_lock>
 8005aec:	4a1d      	ldr	r2, [pc, #116]	@ (8005b64 <_free_r+0x90>)
 8005aee:	6813      	ldr	r3, [r2, #0]
 8005af0:	b933      	cbnz	r3, 8005b00 <_free_r+0x2c>
 8005af2:	6063      	str	r3, [r4, #4]
 8005af4:	6014      	str	r4, [r2, #0]
 8005af6:	4628      	mov	r0, r5
 8005af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005afc:	f000 b8dc 	b.w	8005cb8 <__malloc_unlock>
 8005b00:	42a3      	cmp	r3, r4
 8005b02:	d908      	bls.n	8005b16 <_free_r+0x42>
 8005b04:	6820      	ldr	r0, [r4, #0]
 8005b06:	1821      	adds	r1, r4, r0
 8005b08:	428b      	cmp	r3, r1
 8005b0a:	bf01      	itttt	eq
 8005b0c:	6819      	ldreq	r1, [r3, #0]
 8005b0e:	685b      	ldreq	r3, [r3, #4]
 8005b10:	1809      	addeq	r1, r1, r0
 8005b12:	6021      	streq	r1, [r4, #0]
 8005b14:	e7ed      	b.n	8005af2 <_free_r+0x1e>
 8005b16:	461a      	mov	r2, r3
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	b10b      	cbz	r3, 8005b20 <_free_r+0x4c>
 8005b1c:	42a3      	cmp	r3, r4
 8005b1e:	d9fa      	bls.n	8005b16 <_free_r+0x42>
 8005b20:	6811      	ldr	r1, [r2, #0]
 8005b22:	1850      	adds	r0, r2, r1
 8005b24:	42a0      	cmp	r0, r4
 8005b26:	d10b      	bne.n	8005b40 <_free_r+0x6c>
 8005b28:	6820      	ldr	r0, [r4, #0]
 8005b2a:	4401      	add	r1, r0
 8005b2c:	1850      	adds	r0, r2, r1
 8005b2e:	4283      	cmp	r3, r0
 8005b30:	6011      	str	r1, [r2, #0]
 8005b32:	d1e0      	bne.n	8005af6 <_free_r+0x22>
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	6053      	str	r3, [r2, #4]
 8005b3a:	4408      	add	r0, r1
 8005b3c:	6010      	str	r0, [r2, #0]
 8005b3e:	e7da      	b.n	8005af6 <_free_r+0x22>
 8005b40:	d902      	bls.n	8005b48 <_free_r+0x74>
 8005b42:	230c      	movs	r3, #12
 8005b44:	602b      	str	r3, [r5, #0]
 8005b46:	e7d6      	b.n	8005af6 <_free_r+0x22>
 8005b48:	6820      	ldr	r0, [r4, #0]
 8005b4a:	1821      	adds	r1, r4, r0
 8005b4c:	428b      	cmp	r3, r1
 8005b4e:	bf04      	itt	eq
 8005b50:	6819      	ldreq	r1, [r3, #0]
 8005b52:	685b      	ldreq	r3, [r3, #4]
 8005b54:	6063      	str	r3, [r4, #4]
 8005b56:	bf04      	itt	eq
 8005b58:	1809      	addeq	r1, r1, r0
 8005b5a:	6021      	streq	r1, [r4, #0]
 8005b5c:	6054      	str	r4, [r2, #4]
 8005b5e:	e7ca      	b.n	8005af6 <_free_r+0x22>
 8005b60:	bd38      	pop	{r3, r4, r5, pc}
 8005b62:	bf00      	nop
 8005b64:	200045ec 	.word	0x200045ec

08005b68 <sbrk_aligned>:
 8005b68:	b570      	push	{r4, r5, r6, lr}
 8005b6a:	4e0f      	ldr	r6, [pc, #60]	@ (8005ba8 <sbrk_aligned+0x40>)
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	6831      	ldr	r1, [r6, #0]
 8005b70:	4605      	mov	r5, r0
 8005b72:	b911      	cbnz	r1, 8005b7a <sbrk_aligned+0x12>
 8005b74:	f000 fba6 	bl	80062c4 <_sbrk_r>
 8005b78:	6030      	str	r0, [r6, #0]
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	f000 fba1 	bl	80062c4 <_sbrk_r>
 8005b82:	1c43      	adds	r3, r0, #1
 8005b84:	d103      	bne.n	8005b8e <sbrk_aligned+0x26>
 8005b86:	f04f 34ff 	mov.w	r4, #4294967295
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	bd70      	pop	{r4, r5, r6, pc}
 8005b8e:	1cc4      	adds	r4, r0, #3
 8005b90:	f024 0403 	bic.w	r4, r4, #3
 8005b94:	42a0      	cmp	r0, r4
 8005b96:	d0f8      	beq.n	8005b8a <sbrk_aligned+0x22>
 8005b98:	1a21      	subs	r1, r4, r0
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	f000 fb92 	bl	80062c4 <_sbrk_r>
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	d1f2      	bne.n	8005b8a <sbrk_aligned+0x22>
 8005ba4:	e7ef      	b.n	8005b86 <sbrk_aligned+0x1e>
 8005ba6:	bf00      	nop
 8005ba8:	200045e8 	.word	0x200045e8

08005bac <_malloc_r>:
 8005bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bb0:	1ccd      	adds	r5, r1, #3
 8005bb2:	f025 0503 	bic.w	r5, r5, #3
 8005bb6:	3508      	adds	r5, #8
 8005bb8:	2d0c      	cmp	r5, #12
 8005bba:	bf38      	it	cc
 8005bbc:	250c      	movcc	r5, #12
 8005bbe:	2d00      	cmp	r5, #0
 8005bc0:	4606      	mov	r6, r0
 8005bc2:	db01      	blt.n	8005bc8 <_malloc_r+0x1c>
 8005bc4:	42a9      	cmp	r1, r5
 8005bc6:	d904      	bls.n	8005bd2 <_malloc_r+0x26>
 8005bc8:	230c      	movs	r3, #12
 8005bca:	6033      	str	r3, [r6, #0]
 8005bcc:	2000      	movs	r0, #0
 8005bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ca8 <_malloc_r+0xfc>
 8005bd6:	f000 f869 	bl	8005cac <__malloc_lock>
 8005bda:	f8d8 3000 	ldr.w	r3, [r8]
 8005bde:	461c      	mov	r4, r3
 8005be0:	bb44      	cbnz	r4, 8005c34 <_malloc_r+0x88>
 8005be2:	4629      	mov	r1, r5
 8005be4:	4630      	mov	r0, r6
 8005be6:	f7ff ffbf 	bl	8005b68 <sbrk_aligned>
 8005bea:	1c43      	adds	r3, r0, #1
 8005bec:	4604      	mov	r4, r0
 8005bee:	d158      	bne.n	8005ca2 <_malloc_r+0xf6>
 8005bf0:	f8d8 4000 	ldr.w	r4, [r8]
 8005bf4:	4627      	mov	r7, r4
 8005bf6:	2f00      	cmp	r7, #0
 8005bf8:	d143      	bne.n	8005c82 <_malloc_r+0xd6>
 8005bfa:	2c00      	cmp	r4, #0
 8005bfc:	d04b      	beq.n	8005c96 <_malloc_r+0xea>
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	4639      	mov	r1, r7
 8005c02:	4630      	mov	r0, r6
 8005c04:	eb04 0903 	add.w	r9, r4, r3
 8005c08:	f000 fb5c 	bl	80062c4 <_sbrk_r>
 8005c0c:	4581      	cmp	r9, r0
 8005c0e:	d142      	bne.n	8005c96 <_malloc_r+0xea>
 8005c10:	6821      	ldr	r1, [r4, #0]
 8005c12:	1a6d      	subs	r5, r5, r1
 8005c14:	4629      	mov	r1, r5
 8005c16:	4630      	mov	r0, r6
 8005c18:	f7ff ffa6 	bl	8005b68 <sbrk_aligned>
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d03a      	beq.n	8005c96 <_malloc_r+0xea>
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	442b      	add	r3, r5
 8005c24:	6023      	str	r3, [r4, #0]
 8005c26:	f8d8 3000 	ldr.w	r3, [r8]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	bb62      	cbnz	r2, 8005c88 <_malloc_r+0xdc>
 8005c2e:	f8c8 7000 	str.w	r7, [r8]
 8005c32:	e00f      	b.n	8005c54 <_malloc_r+0xa8>
 8005c34:	6822      	ldr	r2, [r4, #0]
 8005c36:	1b52      	subs	r2, r2, r5
 8005c38:	d420      	bmi.n	8005c7c <_malloc_r+0xd0>
 8005c3a:	2a0b      	cmp	r2, #11
 8005c3c:	d917      	bls.n	8005c6e <_malloc_r+0xc2>
 8005c3e:	1961      	adds	r1, r4, r5
 8005c40:	42a3      	cmp	r3, r4
 8005c42:	6025      	str	r5, [r4, #0]
 8005c44:	bf18      	it	ne
 8005c46:	6059      	strne	r1, [r3, #4]
 8005c48:	6863      	ldr	r3, [r4, #4]
 8005c4a:	bf08      	it	eq
 8005c4c:	f8c8 1000 	streq.w	r1, [r8]
 8005c50:	5162      	str	r2, [r4, r5]
 8005c52:	604b      	str	r3, [r1, #4]
 8005c54:	4630      	mov	r0, r6
 8005c56:	f000 f82f 	bl	8005cb8 <__malloc_unlock>
 8005c5a:	f104 000b 	add.w	r0, r4, #11
 8005c5e:	1d23      	adds	r3, r4, #4
 8005c60:	f020 0007 	bic.w	r0, r0, #7
 8005c64:	1ac2      	subs	r2, r0, r3
 8005c66:	bf1c      	itt	ne
 8005c68:	1a1b      	subne	r3, r3, r0
 8005c6a:	50a3      	strne	r3, [r4, r2]
 8005c6c:	e7af      	b.n	8005bce <_malloc_r+0x22>
 8005c6e:	6862      	ldr	r2, [r4, #4]
 8005c70:	42a3      	cmp	r3, r4
 8005c72:	bf0c      	ite	eq
 8005c74:	f8c8 2000 	streq.w	r2, [r8]
 8005c78:	605a      	strne	r2, [r3, #4]
 8005c7a:	e7eb      	b.n	8005c54 <_malloc_r+0xa8>
 8005c7c:	4623      	mov	r3, r4
 8005c7e:	6864      	ldr	r4, [r4, #4]
 8005c80:	e7ae      	b.n	8005be0 <_malloc_r+0x34>
 8005c82:	463c      	mov	r4, r7
 8005c84:	687f      	ldr	r7, [r7, #4]
 8005c86:	e7b6      	b.n	8005bf6 <_malloc_r+0x4a>
 8005c88:	461a      	mov	r2, r3
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	42a3      	cmp	r3, r4
 8005c8e:	d1fb      	bne.n	8005c88 <_malloc_r+0xdc>
 8005c90:	2300      	movs	r3, #0
 8005c92:	6053      	str	r3, [r2, #4]
 8005c94:	e7de      	b.n	8005c54 <_malloc_r+0xa8>
 8005c96:	230c      	movs	r3, #12
 8005c98:	6033      	str	r3, [r6, #0]
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	f000 f80c 	bl	8005cb8 <__malloc_unlock>
 8005ca0:	e794      	b.n	8005bcc <_malloc_r+0x20>
 8005ca2:	6005      	str	r5, [r0, #0]
 8005ca4:	e7d6      	b.n	8005c54 <_malloc_r+0xa8>
 8005ca6:	bf00      	nop
 8005ca8:	200045ec 	.word	0x200045ec

08005cac <__malloc_lock>:
 8005cac:	4801      	ldr	r0, [pc, #4]	@ (8005cb4 <__malloc_lock+0x8>)
 8005cae:	f7ff bf01 	b.w	8005ab4 <__retarget_lock_acquire_recursive>
 8005cb2:	bf00      	nop
 8005cb4:	200045e4 	.word	0x200045e4

08005cb8 <__malloc_unlock>:
 8005cb8:	4801      	ldr	r0, [pc, #4]	@ (8005cc0 <__malloc_unlock+0x8>)
 8005cba:	f7ff befc 	b.w	8005ab6 <__retarget_lock_release_recursive>
 8005cbe:	bf00      	nop
 8005cc0:	200045e4 	.word	0x200045e4

08005cc4 <__ssputs_r>:
 8005cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc8:	688e      	ldr	r6, [r1, #8]
 8005cca:	461f      	mov	r7, r3
 8005ccc:	42be      	cmp	r6, r7
 8005cce:	680b      	ldr	r3, [r1, #0]
 8005cd0:	4682      	mov	sl, r0
 8005cd2:	460c      	mov	r4, r1
 8005cd4:	4690      	mov	r8, r2
 8005cd6:	d82d      	bhi.n	8005d34 <__ssputs_r+0x70>
 8005cd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005cdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ce0:	d026      	beq.n	8005d30 <__ssputs_r+0x6c>
 8005ce2:	6965      	ldr	r5, [r4, #20]
 8005ce4:	6909      	ldr	r1, [r1, #16]
 8005ce6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cea:	eba3 0901 	sub.w	r9, r3, r1
 8005cee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cf2:	1c7b      	adds	r3, r7, #1
 8005cf4:	444b      	add	r3, r9
 8005cf6:	106d      	asrs	r5, r5, #1
 8005cf8:	429d      	cmp	r5, r3
 8005cfa:	bf38      	it	cc
 8005cfc:	461d      	movcc	r5, r3
 8005cfe:	0553      	lsls	r3, r2, #21
 8005d00:	d527      	bpl.n	8005d52 <__ssputs_r+0x8e>
 8005d02:	4629      	mov	r1, r5
 8005d04:	f7ff ff52 	bl	8005bac <_malloc_r>
 8005d08:	4606      	mov	r6, r0
 8005d0a:	b360      	cbz	r0, 8005d66 <__ssputs_r+0xa2>
 8005d0c:	6921      	ldr	r1, [r4, #16]
 8005d0e:	464a      	mov	r2, r9
 8005d10:	f7ff fed2 	bl	8005ab8 <memcpy>
 8005d14:	89a3      	ldrh	r3, [r4, #12]
 8005d16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d1e:	81a3      	strh	r3, [r4, #12]
 8005d20:	6126      	str	r6, [r4, #16]
 8005d22:	6165      	str	r5, [r4, #20]
 8005d24:	444e      	add	r6, r9
 8005d26:	eba5 0509 	sub.w	r5, r5, r9
 8005d2a:	6026      	str	r6, [r4, #0]
 8005d2c:	60a5      	str	r5, [r4, #8]
 8005d2e:	463e      	mov	r6, r7
 8005d30:	42be      	cmp	r6, r7
 8005d32:	d900      	bls.n	8005d36 <__ssputs_r+0x72>
 8005d34:	463e      	mov	r6, r7
 8005d36:	6820      	ldr	r0, [r4, #0]
 8005d38:	4632      	mov	r2, r6
 8005d3a:	4641      	mov	r1, r8
 8005d3c:	f000 faa8 	bl	8006290 <memmove>
 8005d40:	68a3      	ldr	r3, [r4, #8]
 8005d42:	1b9b      	subs	r3, r3, r6
 8005d44:	60a3      	str	r3, [r4, #8]
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	4433      	add	r3, r6
 8005d4a:	6023      	str	r3, [r4, #0]
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d52:	462a      	mov	r2, r5
 8005d54:	f000 fac6 	bl	80062e4 <_realloc_r>
 8005d58:	4606      	mov	r6, r0
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d1e0      	bne.n	8005d20 <__ssputs_r+0x5c>
 8005d5e:	6921      	ldr	r1, [r4, #16]
 8005d60:	4650      	mov	r0, sl
 8005d62:	f7ff feb7 	bl	8005ad4 <_free_r>
 8005d66:	230c      	movs	r3, #12
 8005d68:	f8ca 3000 	str.w	r3, [sl]
 8005d6c:	89a3      	ldrh	r3, [r4, #12]
 8005d6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d72:	81a3      	strh	r3, [r4, #12]
 8005d74:	f04f 30ff 	mov.w	r0, #4294967295
 8005d78:	e7e9      	b.n	8005d4e <__ssputs_r+0x8a>
	...

08005d7c <_svfiprintf_r>:
 8005d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d80:	4698      	mov	r8, r3
 8005d82:	898b      	ldrh	r3, [r1, #12]
 8005d84:	061b      	lsls	r3, r3, #24
 8005d86:	b09d      	sub	sp, #116	@ 0x74
 8005d88:	4607      	mov	r7, r0
 8005d8a:	460d      	mov	r5, r1
 8005d8c:	4614      	mov	r4, r2
 8005d8e:	d510      	bpl.n	8005db2 <_svfiprintf_r+0x36>
 8005d90:	690b      	ldr	r3, [r1, #16]
 8005d92:	b973      	cbnz	r3, 8005db2 <_svfiprintf_r+0x36>
 8005d94:	2140      	movs	r1, #64	@ 0x40
 8005d96:	f7ff ff09 	bl	8005bac <_malloc_r>
 8005d9a:	6028      	str	r0, [r5, #0]
 8005d9c:	6128      	str	r0, [r5, #16]
 8005d9e:	b930      	cbnz	r0, 8005dae <_svfiprintf_r+0x32>
 8005da0:	230c      	movs	r3, #12
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	f04f 30ff 	mov.w	r0, #4294967295
 8005da8:	b01d      	add	sp, #116	@ 0x74
 8005daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dae:	2340      	movs	r3, #64	@ 0x40
 8005db0:	616b      	str	r3, [r5, #20]
 8005db2:	2300      	movs	r3, #0
 8005db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005db6:	2320      	movs	r3, #32
 8005db8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005dbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dc0:	2330      	movs	r3, #48	@ 0x30
 8005dc2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005f60 <_svfiprintf_r+0x1e4>
 8005dc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005dca:	f04f 0901 	mov.w	r9, #1
 8005dce:	4623      	mov	r3, r4
 8005dd0:	469a      	mov	sl, r3
 8005dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dd6:	b10a      	cbz	r2, 8005ddc <_svfiprintf_r+0x60>
 8005dd8:	2a25      	cmp	r2, #37	@ 0x25
 8005dda:	d1f9      	bne.n	8005dd0 <_svfiprintf_r+0x54>
 8005ddc:	ebba 0b04 	subs.w	fp, sl, r4
 8005de0:	d00b      	beq.n	8005dfa <_svfiprintf_r+0x7e>
 8005de2:	465b      	mov	r3, fp
 8005de4:	4622      	mov	r2, r4
 8005de6:	4629      	mov	r1, r5
 8005de8:	4638      	mov	r0, r7
 8005dea:	f7ff ff6b 	bl	8005cc4 <__ssputs_r>
 8005dee:	3001      	adds	r0, #1
 8005df0:	f000 80a7 	beq.w	8005f42 <_svfiprintf_r+0x1c6>
 8005df4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005df6:	445a      	add	r2, fp
 8005df8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 809f 	beq.w	8005f42 <_svfiprintf_r+0x1c6>
 8005e04:	2300      	movs	r3, #0
 8005e06:	f04f 32ff 	mov.w	r2, #4294967295
 8005e0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e0e:	f10a 0a01 	add.w	sl, sl, #1
 8005e12:	9304      	str	r3, [sp, #16]
 8005e14:	9307      	str	r3, [sp, #28]
 8005e16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e1c:	4654      	mov	r4, sl
 8005e1e:	2205      	movs	r2, #5
 8005e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e24:	484e      	ldr	r0, [pc, #312]	@ (8005f60 <_svfiprintf_r+0x1e4>)
 8005e26:	f7fa f9db 	bl	80001e0 <memchr>
 8005e2a:	9a04      	ldr	r2, [sp, #16]
 8005e2c:	b9d8      	cbnz	r0, 8005e66 <_svfiprintf_r+0xea>
 8005e2e:	06d0      	lsls	r0, r2, #27
 8005e30:	bf44      	itt	mi
 8005e32:	2320      	movmi	r3, #32
 8005e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e38:	0711      	lsls	r1, r2, #28
 8005e3a:	bf44      	itt	mi
 8005e3c:	232b      	movmi	r3, #43	@ 0x2b
 8005e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e42:	f89a 3000 	ldrb.w	r3, [sl]
 8005e46:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e48:	d015      	beq.n	8005e76 <_svfiprintf_r+0xfa>
 8005e4a:	9a07      	ldr	r2, [sp, #28]
 8005e4c:	4654      	mov	r4, sl
 8005e4e:	2000      	movs	r0, #0
 8005e50:	f04f 0c0a 	mov.w	ip, #10
 8005e54:	4621      	mov	r1, r4
 8005e56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e5a:	3b30      	subs	r3, #48	@ 0x30
 8005e5c:	2b09      	cmp	r3, #9
 8005e5e:	d94b      	bls.n	8005ef8 <_svfiprintf_r+0x17c>
 8005e60:	b1b0      	cbz	r0, 8005e90 <_svfiprintf_r+0x114>
 8005e62:	9207      	str	r2, [sp, #28]
 8005e64:	e014      	b.n	8005e90 <_svfiprintf_r+0x114>
 8005e66:	eba0 0308 	sub.w	r3, r0, r8
 8005e6a:	fa09 f303 	lsl.w	r3, r9, r3
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	9304      	str	r3, [sp, #16]
 8005e72:	46a2      	mov	sl, r4
 8005e74:	e7d2      	b.n	8005e1c <_svfiprintf_r+0xa0>
 8005e76:	9b03      	ldr	r3, [sp, #12]
 8005e78:	1d19      	adds	r1, r3, #4
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	9103      	str	r1, [sp, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	bfbb      	ittet	lt
 8005e82:	425b      	neglt	r3, r3
 8005e84:	f042 0202 	orrlt.w	r2, r2, #2
 8005e88:	9307      	strge	r3, [sp, #28]
 8005e8a:	9307      	strlt	r3, [sp, #28]
 8005e8c:	bfb8      	it	lt
 8005e8e:	9204      	strlt	r2, [sp, #16]
 8005e90:	7823      	ldrb	r3, [r4, #0]
 8005e92:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e94:	d10a      	bne.n	8005eac <_svfiprintf_r+0x130>
 8005e96:	7863      	ldrb	r3, [r4, #1]
 8005e98:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e9a:	d132      	bne.n	8005f02 <_svfiprintf_r+0x186>
 8005e9c:	9b03      	ldr	r3, [sp, #12]
 8005e9e:	1d1a      	adds	r2, r3, #4
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	9203      	str	r2, [sp, #12]
 8005ea4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ea8:	3402      	adds	r4, #2
 8005eaa:	9305      	str	r3, [sp, #20]
 8005eac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005f70 <_svfiprintf_r+0x1f4>
 8005eb0:	7821      	ldrb	r1, [r4, #0]
 8005eb2:	2203      	movs	r2, #3
 8005eb4:	4650      	mov	r0, sl
 8005eb6:	f7fa f993 	bl	80001e0 <memchr>
 8005eba:	b138      	cbz	r0, 8005ecc <_svfiprintf_r+0x150>
 8005ebc:	9b04      	ldr	r3, [sp, #16]
 8005ebe:	eba0 000a 	sub.w	r0, r0, sl
 8005ec2:	2240      	movs	r2, #64	@ 0x40
 8005ec4:	4082      	lsls	r2, r0
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	3401      	adds	r4, #1
 8005eca:	9304      	str	r3, [sp, #16]
 8005ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ed0:	4824      	ldr	r0, [pc, #144]	@ (8005f64 <_svfiprintf_r+0x1e8>)
 8005ed2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ed6:	2206      	movs	r2, #6
 8005ed8:	f7fa f982 	bl	80001e0 <memchr>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d036      	beq.n	8005f4e <_svfiprintf_r+0x1d2>
 8005ee0:	4b21      	ldr	r3, [pc, #132]	@ (8005f68 <_svfiprintf_r+0x1ec>)
 8005ee2:	bb1b      	cbnz	r3, 8005f2c <_svfiprintf_r+0x1b0>
 8005ee4:	9b03      	ldr	r3, [sp, #12]
 8005ee6:	3307      	adds	r3, #7
 8005ee8:	f023 0307 	bic.w	r3, r3, #7
 8005eec:	3308      	adds	r3, #8
 8005eee:	9303      	str	r3, [sp, #12]
 8005ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ef2:	4433      	add	r3, r6
 8005ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ef6:	e76a      	b.n	8005dce <_svfiprintf_r+0x52>
 8005ef8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005efc:	460c      	mov	r4, r1
 8005efe:	2001      	movs	r0, #1
 8005f00:	e7a8      	b.n	8005e54 <_svfiprintf_r+0xd8>
 8005f02:	2300      	movs	r3, #0
 8005f04:	3401      	adds	r4, #1
 8005f06:	9305      	str	r3, [sp, #20]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	f04f 0c0a 	mov.w	ip, #10
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f14:	3a30      	subs	r2, #48	@ 0x30
 8005f16:	2a09      	cmp	r2, #9
 8005f18:	d903      	bls.n	8005f22 <_svfiprintf_r+0x1a6>
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0c6      	beq.n	8005eac <_svfiprintf_r+0x130>
 8005f1e:	9105      	str	r1, [sp, #20]
 8005f20:	e7c4      	b.n	8005eac <_svfiprintf_r+0x130>
 8005f22:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f26:	4604      	mov	r4, r0
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e7f0      	b.n	8005f0e <_svfiprintf_r+0x192>
 8005f2c:	ab03      	add	r3, sp, #12
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	462a      	mov	r2, r5
 8005f32:	4b0e      	ldr	r3, [pc, #56]	@ (8005f6c <_svfiprintf_r+0x1f0>)
 8005f34:	a904      	add	r1, sp, #16
 8005f36:	4638      	mov	r0, r7
 8005f38:	f3af 8000 	nop.w
 8005f3c:	1c42      	adds	r2, r0, #1
 8005f3e:	4606      	mov	r6, r0
 8005f40:	d1d6      	bne.n	8005ef0 <_svfiprintf_r+0x174>
 8005f42:	89ab      	ldrh	r3, [r5, #12]
 8005f44:	065b      	lsls	r3, r3, #25
 8005f46:	f53f af2d 	bmi.w	8005da4 <_svfiprintf_r+0x28>
 8005f4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f4c:	e72c      	b.n	8005da8 <_svfiprintf_r+0x2c>
 8005f4e:	ab03      	add	r3, sp, #12
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	462a      	mov	r2, r5
 8005f54:	4b05      	ldr	r3, [pc, #20]	@ (8005f6c <_svfiprintf_r+0x1f0>)
 8005f56:	a904      	add	r1, sp, #16
 8005f58:	4638      	mov	r0, r7
 8005f5a:	f000 f879 	bl	8006050 <_printf_i>
 8005f5e:	e7ed      	b.n	8005f3c <_svfiprintf_r+0x1c0>
 8005f60:	080063c4 	.word	0x080063c4
 8005f64:	080063ce 	.word	0x080063ce
 8005f68:	00000000 	.word	0x00000000
 8005f6c:	08005cc5 	.word	0x08005cc5
 8005f70:	080063ca 	.word	0x080063ca

08005f74 <_printf_common>:
 8005f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f78:	4616      	mov	r6, r2
 8005f7a:	4698      	mov	r8, r3
 8005f7c:	688a      	ldr	r2, [r1, #8]
 8005f7e:	690b      	ldr	r3, [r1, #16]
 8005f80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f84:	4293      	cmp	r3, r2
 8005f86:	bfb8      	it	lt
 8005f88:	4613      	movlt	r3, r2
 8005f8a:	6033      	str	r3, [r6, #0]
 8005f8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f90:	4607      	mov	r7, r0
 8005f92:	460c      	mov	r4, r1
 8005f94:	b10a      	cbz	r2, 8005f9a <_printf_common+0x26>
 8005f96:	3301      	adds	r3, #1
 8005f98:	6033      	str	r3, [r6, #0]
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	0699      	lsls	r1, r3, #26
 8005f9e:	bf42      	ittt	mi
 8005fa0:	6833      	ldrmi	r3, [r6, #0]
 8005fa2:	3302      	addmi	r3, #2
 8005fa4:	6033      	strmi	r3, [r6, #0]
 8005fa6:	6825      	ldr	r5, [r4, #0]
 8005fa8:	f015 0506 	ands.w	r5, r5, #6
 8005fac:	d106      	bne.n	8005fbc <_printf_common+0x48>
 8005fae:	f104 0a19 	add.w	sl, r4, #25
 8005fb2:	68e3      	ldr	r3, [r4, #12]
 8005fb4:	6832      	ldr	r2, [r6, #0]
 8005fb6:	1a9b      	subs	r3, r3, r2
 8005fb8:	42ab      	cmp	r3, r5
 8005fba:	dc26      	bgt.n	800600a <_printf_common+0x96>
 8005fbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005fc0:	6822      	ldr	r2, [r4, #0]
 8005fc2:	3b00      	subs	r3, #0
 8005fc4:	bf18      	it	ne
 8005fc6:	2301      	movne	r3, #1
 8005fc8:	0692      	lsls	r2, r2, #26
 8005fca:	d42b      	bmi.n	8006024 <_printf_common+0xb0>
 8005fcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005fd0:	4641      	mov	r1, r8
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	47c8      	blx	r9
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	d01e      	beq.n	8006018 <_printf_common+0xa4>
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	6922      	ldr	r2, [r4, #16]
 8005fde:	f003 0306 	and.w	r3, r3, #6
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	bf02      	ittt	eq
 8005fe6:	68e5      	ldreq	r5, [r4, #12]
 8005fe8:	6833      	ldreq	r3, [r6, #0]
 8005fea:	1aed      	subeq	r5, r5, r3
 8005fec:	68a3      	ldr	r3, [r4, #8]
 8005fee:	bf0c      	ite	eq
 8005ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ff4:	2500      	movne	r5, #0
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	bfc4      	itt	gt
 8005ffa:	1a9b      	subgt	r3, r3, r2
 8005ffc:	18ed      	addgt	r5, r5, r3
 8005ffe:	2600      	movs	r6, #0
 8006000:	341a      	adds	r4, #26
 8006002:	42b5      	cmp	r5, r6
 8006004:	d11a      	bne.n	800603c <_printf_common+0xc8>
 8006006:	2000      	movs	r0, #0
 8006008:	e008      	b.n	800601c <_printf_common+0xa8>
 800600a:	2301      	movs	r3, #1
 800600c:	4652      	mov	r2, sl
 800600e:	4641      	mov	r1, r8
 8006010:	4638      	mov	r0, r7
 8006012:	47c8      	blx	r9
 8006014:	3001      	adds	r0, #1
 8006016:	d103      	bne.n	8006020 <_printf_common+0xac>
 8006018:	f04f 30ff 	mov.w	r0, #4294967295
 800601c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006020:	3501      	adds	r5, #1
 8006022:	e7c6      	b.n	8005fb2 <_printf_common+0x3e>
 8006024:	18e1      	adds	r1, r4, r3
 8006026:	1c5a      	adds	r2, r3, #1
 8006028:	2030      	movs	r0, #48	@ 0x30
 800602a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800602e:	4422      	add	r2, r4
 8006030:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006034:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006038:	3302      	adds	r3, #2
 800603a:	e7c7      	b.n	8005fcc <_printf_common+0x58>
 800603c:	2301      	movs	r3, #1
 800603e:	4622      	mov	r2, r4
 8006040:	4641      	mov	r1, r8
 8006042:	4638      	mov	r0, r7
 8006044:	47c8      	blx	r9
 8006046:	3001      	adds	r0, #1
 8006048:	d0e6      	beq.n	8006018 <_printf_common+0xa4>
 800604a:	3601      	adds	r6, #1
 800604c:	e7d9      	b.n	8006002 <_printf_common+0x8e>
	...

08006050 <_printf_i>:
 8006050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006054:	7e0f      	ldrb	r7, [r1, #24]
 8006056:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006058:	2f78      	cmp	r7, #120	@ 0x78
 800605a:	4691      	mov	r9, r2
 800605c:	4680      	mov	r8, r0
 800605e:	460c      	mov	r4, r1
 8006060:	469a      	mov	sl, r3
 8006062:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006066:	d807      	bhi.n	8006078 <_printf_i+0x28>
 8006068:	2f62      	cmp	r7, #98	@ 0x62
 800606a:	d80a      	bhi.n	8006082 <_printf_i+0x32>
 800606c:	2f00      	cmp	r7, #0
 800606e:	f000 80d2 	beq.w	8006216 <_printf_i+0x1c6>
 8006072:	2f58      	cmp	r7, #88	@ 0x58
 8006074:	f000 80b9 	beq.w	80061ea <_printf_i+0x19a>
 8006078:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800607c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006080:	e03a      	b.n	80060f8 <_printf_i+0xa8>
 8006082:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006086:	2b15      	cmp	r3, #21
 8006088:	d8f6      	bhi.n	8006078 <_printf_i+0x28>
 800608a:	a101      	add	r1, pc, #4	@ (adr r1, 8006090 <_printf_i+0x40>)
 800608c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006090:	080060e9 	.word	0x080060e9
 8006094:	080060fd 	.word	0x080060fd
 8006098:	08006079 	.word	0x08006079
 800609c:	08006079 	.word	0x08006079
 80060a0:	08006079 	.word	0x08006079
 80060a4:	08006079 	.word	0x08006079
 80060a8:	080060fd 	.word	0x080060fd
 80060ac:	08006079 	.word	0x08006079
 80060b0:	08006079 	.word	0x08006079
 80060b4:	08006079 	.word	0x08006079
 80060b8:	08006079 	.word	0x08006079
 80060bc:	080061fd 	.word	0x080061fd
 80060c0:	08006127 	.word	0x08006127
 80060c4:	080061b7 	.word	0x080061b7
 80060c8:	08006079 	.word	0x08006079
 80060cc:	08006079 	.word	0x08006079
 80060d0:	0800621f 	.word	0x0800621f
 80060d4:	08006079 	.word	0x08006079
 80060d8:	08006127 	.word	0x08006127
 80060dc:	08006079 	.word	0x08006079
 80060e0:	08006079 	.word	0x08006079
 80060e4:	080061bf 	.word	0x080061bf
 80060e8:	6833      	ldr	r3, [r6, #0]
 80060ea:	1d1a      	adds	r2, r3, #4
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6032      	str	r2, [r6, #0]
 80060f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060f8:	2301      	movs	r3, #1
 80060fa:	e09d      	b.n	8006238 <_printf_i+0x1e8>
 80060fc:	6833      	ldr	r3, [r6, #0]
 80060fe:	6820      	ldr	r0, [r4, #0]
 8006100:	1d19      	adds	r1, r3, #4
 8006102:	6031      	str	r1, [r6, #0]
 8006104:	0606      	lsls	r6, r0, #24
 8006106:	d501      	bpl.n	800610c <_printf_i+0xbc>
 8006108:	681d      	ldr	r5, [r3, #0]
 800610a:	e003      	b.n	8006114 <_printf_i+0xc4>
 800610c:	0645      	lsls	r5, r0, #25
 800610e:	d5fb      	bpl.n	8006108 <_printf_i+0xb8>
 8006110:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006114:	2d00      	cmp	r5, #0
 8006116:	da03      	bge.n	8006120 <_printf_i+0xd0>
 8006118:	232d      	movs	r3, #45	@ 0x2d
 800611a:	426d      	negs	r5, r5
 800611c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006120:	4859      	ldr	r0, [pc, #356]	@ (8006288 <_printf_i+0x238>)
 8006122:	230a      	movs	r3, #10
 8006124:	e011      	b.n	800614a <_printf_i+0xfa>
 8006126:	6821      	ldr	r1, [r4, #0]
 8006128:	6833      	ldr	r3, [r6, #0]
 800612a:	0608      	lsls	r0, r1, #24
 800612c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006130:	d402      	bmi.n	8006138 <_printf_i+0xe8>
 8006132:	0649      	lsls	r1, r1, #25
 8006134:	bf48      	it	mi
 8006136:	b2ad      	uxthmi	r5, r5
 8006138:	2f6f      	cmp	r7, #111	@ 0x6f
 800613a:	4853      	ldr	r0, [pc, #332]	@ (8006288 <_printf_i+0x238>)
 800613c:	6033      	str	r3, [r6, #0]
 800613e:	bf14      	ite	ne
 8006140:	230a      	movne	r3, #10
 8006142:	2308      	moveq	r3, #8
 8006144:	2100      	movs	r1, #0
 8006146:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800614a:	6866      	ldr	r6, [r4, #4]
 800614c:	60a6      	str	r6, [r4, #8]
 800614e:	2e00      	cmp	r6, #0
 8006150:	bfa2      	ittt	ge
 8006152:	6821      	ldrge	r1, [r4, #0]
 8006154:	f021 0104 	bicge.w	r1, r1, #4
 8006158:	6021      	strge	r1, [r4, #0]
 800615a:	b90d      	cbnz	r5, 8006160 <_printf_i+0x110>
 800615c:	2e00      	cmp	r6, #0
 800615e:	d04b      	beq.n	80061f8 <_printf_i+0x1a8>
 8006160:	4616      	mov	r6, r2
 8006162:	fbb5 f1f3 	udiv	r1, r5, r3
 8006166:	fb03 5711 	mls	r7, r3, r1, r5
 800616a:	5dc7      	ldrb	r7, [r0, r7]
 800616c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006170:	462f      	mov	r7, r5
 8006172:	42bb      	cmp	r3, r7
 8006174:	460d      	mov	r5, r1
 8006176:	d9f4      	bls.n	8006162 <_printf_i+0x112>
 8006178:	2b08      	cmp	r3, #8
 800617a:	d10b      	bne.n	8006194 <_printf_i+0x144>
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	07df      	lsls	r7, r3, #31
 8006180:	d508      	bpl.n	8006194 <_printf_i+0x144>
 8006182:	6923      	ldr	r3, [r4, #16]
 8006184:	6861      	ldr	r1, [r4, #4]
 8006186:	4299      	cmp	r1, r3
 8006188:	bfde      	ittt	le
 800618a:	2330      	movle	r3, #48	@ 0x30
 800618c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006190:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006194:	1b92      	subs	r2, r2, r6
 8006196:	6122      	str	r2, [r4, #16]
 8006198:	f8cd a000 	str.w	sl, [sp]
 800619c:	464b      	mov	r3, r9
 800619e:	aa03      	add	r2, sp, #12
 80061a0:	4621      	mov	r1, r4
 80061a2:	4640      	mov	r0, r8
 80061a4:	f7ff fee6 	bl	8005f74 <_printf_common>
 80061a8:	3001      	adds	r0, #1
 80061aa:	d14a      	bne.n	8006242 <_printf_i+0x1f2>
 80061ac:	f04f 30ff 	mov.w	r0, #4294967295
 80061b0:	b004      	add	sp, #16
 80061b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	f043 0320 	orr.w	r3, r3, #32
 80061bc:	6023      	str	r3, [r4, #0]
 80061be:	4833      	ldr	r0, [pc, #204]	@ (800628c <_printf_i+0x23c>)
 80061c0:	2778      	movs	r7, #120	@ 0x78
 80061c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	6831      	ldr	r1, [r6, #0]
 80061ca:	061f      	lsls	r7, r3, #24
 80061cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80061d0:	d402      	bmi.n	80061d8 <_printf_i+0x188>
 80061d2:	065f      	lsls	r7, r3, #25
 80061d4:	bf48      	it	mi
 80061d6:	b2ad      	uxthmi	r5, r5
 80061d8:	6031      	str	r1, [r6, #0]
 80061da:	07d9      	lsls	r1, r3, #31
 80061dc:	bf44      	itt	mi
 80061de:	f043 0320 	orrmi.w	r3, r3, #32
 80061e2:	6023      	strmi	r3, [r4, #0]
 80061e4:	b11d      	cbz	r5, 80061ee <_printf_i+0x19e>
 80061e6:	2310      	movs	r3, #16
 80061e8:	e7ac      	b.n	8006144 <_printf_i+0xf4>
 80061ea:	4827      	ldr	r0, [pc, #156]	@ (8006288 <_printf_i+0x238>)
 80061ec:	e7e9      	b.n	80061c2 <_printf_i+0x172>
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	f023 0320 	bic.w	r3, r3, #32
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	e7f6      	b.n	80061e6 <_printf_i+0x196>
 80061f8:	4616      	mov	r6, r2
 80061fa:	e7bd      	b.n	8006178 <_printf_i+0x128>
 80061fc:	6833      	ldr	r3, [r6, #0]
 80061fe:	6825      	ldr	r5, [r4, #0]
 8006200:	6961      	ldr	r1, [r4, #20]
 8006202:	1d18      	adds	r0, r3, #4
 8006204:	6030      	str	r0, [r6, #0]
 8006206:	062e      	lsls	r6, r5, #24
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	d501      	bpl.n	8006210 <_printf_i+0x1c0>
 800620c:	6019      	str	r1, [r3, #0]
 800620e:	e002      	b.n	8006216 <_printf_i+0x1c6>
 8006210:	0668      	lsls	r0, r5, #25
 8006212:	d5fb      	bpl.n	800620c <_printf_i+0x1bc>
 8006214:	8019      	strh	r1, [r3, #0]
 8006216:	2300      	movs	r3, #0
 8006218:	6123      	str	r3, [r4, #16]
 800621a:	4616      	mov	r6, r2
 800621c:	e7bc      	b.n	8006198 <_printf_i+0x148>
 800621e:	6833      	ldr	r3, [r6, #0]
 8006220:	1d1a      	adds	r2, r3, #4
 8006222:	6032      	str	r2, [r6, #0]
 8006224:	681e      	ldr	r6, [r3, #0]
 8006226:	6862      	ldr	r2, [r4, #4]
 8006228:	2100      	movs	r1, #0
 800622a:	4630      	mov	r0, r6
 800622c:	f7f9 ffd8 	bl	80001e0 <memchr>
 8006230:	b108      	cbz	r0, 8006236 <_printf_i+0x1e6>
 8006232:	1b80      	subs	r0, r0, r6
 8006234:	6060      	str	r0, [r4, #4]
 8006236:	6863      	ldr	r3, [r4, #4]
 8006238:	6123      	str	r3, [r4, #16]
 800623a:	2300      	movs	r3, #0
 800623c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006240:	e7aa      	b.n	8006198 <_printf_i+0x148>
 8006242:	6923      	ldr	r3, [r4, #16]
 8006244:	4632      	mov	r2, r6
 8006246:	4649      	mov	r1, r9
 8006248:	4640      	mov	r0, r8
 800624a:	47d0      	blx	sl
 800624c:	3001      	adds	r0, #1
 800624e:	d0ad      	beq.n	80061ac <_printf_i+0x15c>
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	079b      	lsls	r3, r3, #30
 8006254:	d413      	bmi.n	800627e <_printf_i+0x22e>
 8006256:	68e0      	ldr	r0, [r4, #12]
 8006258:	9b03      	ldr	r3, [sp, #12]
 800625a:	4298      	cmp	r0, r3
 800625c:	bfb8      	it	lt
 800625e:	4618      	movlt	r0, r3
 8006260:	e7a6      	b.n	80061b0 <_printf_i+0x160>
 8006262:	2301      	movs	r3, #1
 8006264:	4632      	mov	r2, r6
 8006266:	4649      	mov	r1, r9
 8006268:	4640      	mov	r0, r8
 800626a:	47d0      	blx	sl
 800626c:	3001      	adds	r0, #1
 800626e:	d09d      	beq.n	80061ac <_printf_i+0x15c>
 8006270:	3501      	adds	r5, #1
 8006272:	68e3      	ldr	r3, [r4, #12]
 8006274:	9903      	ldr	r1, [sp, #12]
 8006276:	1a5b      	subs	r3, r3, r1
 8006278:	42ab      	cmp	r3, r5
 800627a:	dcf2      	bgt.n	8006262 <_printf_i+0x212>
 800627c:	e7eb      	b.n	8006256 <_printf_i+0x206>
 800627e:	2500      	movs	r5, #0
 8006280:	f104 0619 	add.w	r6, r4, #25
 8006284:	e7f5      	b.n	8006272 <_printf_i+0x222>
 8006286:	bf00      	nop
 8006288:	080063d5 	.word	0x080063d5
 800628c:	080063e6 	.word	0x080063e6

08006290 <memmove>:
 8006290:	4288      	cmp	r0, r1
 8006292:	b510      	push	{r4, lr}
 8006294:	eb01 0402 	add.w	r4, r1, r2
 8006298:	d902      	bls.n	80062a0 <memmove+0x10>
 800629a:	4284      	cmp	r4, r0
 800629c:	4623      	mov	r3, r4
 800629e:	d807      	bhi.n	80062b0 <memmove+0x20>
 80062a0:	1e43      	subs	r3, r0, #1
 80062a2:	42a1      	cmp	r1, r4
 80062a4:	d008      	beq.n	80062b8 <memmove+0x28>
 80062a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062ae:	e7f8      	b.n	80062a2 <memmove+0x12>
 80062b0:	4402      	add	r2, r0
 80062b2:	4601      	mov	r1, r0
 80062b4:	428a      	cmp	r2, r1
 80062b6:	d100      	bne.n	80062ba <memmove+0x2a>
 80062b8:	bd10      	pop	{r4, pc}
 80062ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062c2:	e7f7      	b.n	80062b4 <memmove+0x24>

080062c4 <_sbrk_r>:
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	4d06      	ldr	r5, [pc, #24]	@ (80062e0 <_sbrk_r+0x1c>)
 80062c8:	2300      	movs	r3, #0
 80062ca:	4604      	mov	r4, r0
 80062cc:	4608      	mov	r0, r1
 80062ce:	602b      	str	r3, [r5, #0]
 80062d0:	f7fb fb42 	bl	8001958 <_sbrk>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	d102      	bne.n	80062de <_sbrk_r+0x1a>
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	b103      	cbz	r3, 80062de <_sbrk_r+0x1a>
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	bd38      	pop	{r3, r4, r5, pc}
 80062e0:	200045e0 	.word	0x200045e0

080062e4 <_realloc_r>:
 80062e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e8:	4680      	mov	r8, r0
 80062ea:	4615      	mov	r5, r2
 80062ec:	460c      	mov	r4, r1
 80062ee:	b921      	cbnz	r1, 80062fa <_realloc_r+0x16>
 80062f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062f4:	4611      	mov	r1, r2
 80062f6:	f7ff bc59 	b.w	8005bac <_malloc_r>
 80062fa:	b92a      	cbnz	r2, 8006308 <_realloc_r+0x24>
 80062fc:	f7ff fbea 	bl	8005ad4 <_free_r>
 8006300:	2400      	movs	r4, #0
 8006302:	4620      	mov	r0, r4
 8006304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006308:	f000 f81a 	bl	8006340 <_malloc_usable_size_r>
 800630c:	4285      	cmp	r5, r0
 800630e:	4606      	mov	r6, r0
 8006310:	d802      	bhi.n	8006318 <_realloc_r+0x34>
 8006312:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006316:	d8f4      	bhi.n	8006302 <_realloc_r+0x1e>
 8006318:	4629      	mov	r1, r5
 800631a:	4640      	mov	r0, r8
 800631c:	f7ff fc46 	bl	8005bac <_malloc_r>
 8006320:	4607      	mov	r7, r0
 8006322:	2800      	cmp	r0, #0
 8006324:	d0ec      	beq.n	8006300 <_realloc_r+0x1c>
 8006326:	42b5      	cmp	r5, r6
 8006328:	462a      	mov	r2, r5
 800632a:	4621      	mov	r1, r4
 800632c:	bf28      	it	cs
 800632e:	4632      	movcs	r2, r6
 8006330:	f7ff fbc2 	bl	8005ab8 <memcpy>
 8006334:	4621      	mov	r1, r4
 8006336:	4640      	mov	r0, r8
 8006338:	f7ff fbcc 	bl	8005ad4 <_free_r>
 800633c:	463c      	mov	r4, r7
 800633e:	e7e0      	b.n	8006302 <_realloc_r+0x1e>

08006340 <_malloc_usable_size_r>:
 8006340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006344:	1f18      	subs	r0, r3, #4
 8006346:	2b00      	cmp	r3, #0
 8006348:	bfbc      	itt	lt
 800634a:	580b      	ldrlt	r3, [r1, r0]
 800634c:	18c0      	addlt	r0, r0, r3
 800634e:	4770      	bx	lr

08006350 <_init>:
 8006350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006352:	bf00      	nop
 8006354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006356:	bc08      	pop	{r3}
 8006358:	469e      	mov	lr, r3
 800635a:	4770      	bx	lr

0800635c <_fini>:
 800635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635e:	bf00      	nop
 8006360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006362:	bc08      	pop	{r3}
 8006364:	469e      	mov	lr, r3
 8006366:	4770      	bx	lr
