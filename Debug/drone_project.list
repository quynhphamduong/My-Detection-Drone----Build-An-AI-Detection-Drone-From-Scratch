
drone_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005680  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08005820  08005820  00006820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005870  08005870  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005870  08005870  00006870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005878  08005878  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005878  08005878  00006878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800587c  0800587c  0000687c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005880  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004560  20000060  080058e0  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045c0  080058e0  000075c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013831  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000306a  00000000  00000000  0001a8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  0001d930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9f  00000000  00000000  0001eaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cc2  00000000  00000000  0001f897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001405e  00000000  00000000  00038559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000976b2  00000000  00000000  0004c5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3c69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bc4  00000000  00000000  000e3cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000e8870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005808 	.word	0x08005808

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005808 	.word	0x08005808

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <Calculate_Reference>:
 */

#include "Drone_control.h"

void Calculate_Reference(Drone_Calculation_Typedef *dr,Drone_Control_Typedef *dc)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
	dr->picth_reference=(dc->RV-1500)*0.1f;//we can send reference direct from control
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	885b      	ldrh	r3, [r3, #2]
 80004de:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80004e2:	ee07 3a90 	vmov	s15, r3
 80004e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004ea:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000560 <Calculate_Reference+0x90>
 80004ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	edc3 7a00 	vstr	s15, [r3]
	dr->roll_reference=(dc->RH-1500)*0.1f;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8000500:	ee07 3a90 	vmov	s15, r3
 8000504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000508:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8000560 <Calculate_Reference+0x90>
 800050c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	edc3 7a01 	vstr	s15, [r3, #4]
	dr->yaw_reference=(dc->LH-1500)*0.1f;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	88db      	ldrh	r3, [r3, #6]
 800051a:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800051e:	ee07 3a90 	vmov	s15, r3
 8000522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000526:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000560 <Calculate_Reference+0x90>
 800052a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	edc3 7a02 	vstr	s15, [r3, #8]
	dr->high_reference=(dc->LV-1000)*10;
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	889b      	ldrh	r3, [r3, #4]
 8000538:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 800053c:	4613      	mov	r3, r2
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	4413      	add	r3, r2
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	ee07 3a90 	vmov	s15, r3
 8000548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	3dcccccd 	.word	0x3dcccccd

08000564 <Calibration>:

#include "Oneshot125_Esc_Control.h"

//this is init function, only use before turn on scheduler
void Calibration(TIM_HandleTypeDef *htim)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]

	HAL_Delay(1000);
 800056c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000570:	f001 f934 	bl	80017dc <HAL_Delay>
	htim->Instance->CCR1=MAXIMUM_ESC_PWM;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f245 2208 	movw	r2, #21000	@ 0x5208
 800057c:	635a      	str	r2, [r3, #52]	@ 0x34
	htim->Instance->CCR2=MAXIMUM_ESC_PWM;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f245 2208 	movw	r2, #21000	@ 0x5208
 8000586:	639a      	str	r2, [r3, #56]	@ 0x38
	htim->Instance->CCR3=MAXIMUM_ESC_PWM;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f245 2208 	movw	r2, #21000	@ 0x5208
 8000590:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim->Instance->CCR4=MAXIMUM_ESC_PWM;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f245 2208 	movw	r2, #21000	@ 0x5208
 800059a:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(7000);
 800059c:	f641 3058 	movw	r0, #7000	@ 0x1b58
 80005a0:	f001 f91c 	bl	80017dc <HAL_Delay>
	htim->Instance->CCR1=MINIMUM_ESC_PWM;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f642 1204 	movw	r2, #10500	@ 0x2904
 80005ac:	635a      	str	r2, [r3, #52]	@ 0x34
	htim->Instance->CCR2=MINIMUM_ESC_PWM;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f642 1204 	movw	r2, #10500	@ 0x2904
 80005b6:	639a      	str	r2, [r3, #56]	@ 0x38
	htim->Instance->CCR3=MINIMUM_ESC_PWM;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f642 1204 	movw	r2, #10500	@ 0x2904
 80005c0:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim->Instance->CCR4=MINIMUM_ESC_PWM;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f642 1204 	movw	r2, #10500	@ 0x2904
 80005ca:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(8000);
 80005cc:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 80005d0:	f001 f904 	bl	80017dc <HAL_Delay>
	HAL_Delay(1000);
 80005d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005d8:	f001 f900 	bl	80017dc <HAL_Delay>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <escNormalOneshot125>:

void escNormalOneshot125(TIM_HandleTypeDef *htim,uint32_t speed,Timer_channel_enumTypedef CHANNEL)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	4613      	mov	r3, r2
 80005f0:	71fb      	strb	r3, [r7, #7]
	if(speed>=MAXIMUM_SPEED)
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	f642 1203 	movw	r2, #10499	@ 0x2903
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d903      	bls.n	8000604 <escNormalOneshot125+0x20>
	{
		speed=MAXIMUM_SPEED;
 80005fc:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	e004      	b.n	800060e <escNormalOneshot125+0x2a>
	}
	else if(speed<=MINIMUM_SPEED)
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d101      	bne.n	800060e <escNormalOneshot125+0x2a>
	{
		speed=MINIMUM_SPEED;
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
	}
	switch(CHANNEL)
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2b0c      	cmp	r3, #12
 8000612:	d83d      	bhi.n	8000690 <escNormalOneshot125+0xac>
 8000614:	a201      	add	r2, pc, #4	@ (adr r2, 800061c <escNormalOneshot125+0x38>)
 8000616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061a:	bf00      	nop
 800061c:	08000651 	.word	0x08000651
 8000620:	08000691 	.word	0x08000691
 8000624:	08000691 	.word	0x08000691
 8000628:	08000691 	.word	0x08000691
 800062c:	08000661 	.word	0x08000661
 8000630:	08000691 	.word	0x08000691
 8000634:	08000691 	.word	0x08000691
 8000638:	08000691 	.word	0x08000691
 800063c:	08000671 	.word	0x08000671
 8000640:	08000691 	.word	0x08000691
 8000644:	08000691 	.word	0x08000691
 8000648:	08000691 	.word	0x08000691
 800064c:	08000681 	.word	0x08000681
	{
	case CHANNEL1:
		htim->Instance->CCR1=speed+MINIMUM_ESC_PWM;
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800065a:	3304      	adds	r3, #4
 800065c:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 800065e:	e017      	b.n	8000690 <escNormalOneshot125+0xac>
	case CHANNEL2:
			htim->Instance->CCR2=speed+MINIMUM_ESC_PWM;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800066a:	3304      	adds	r3, #4
 800066c:	6393      	str	r3, [r2, #56]	@ 0x38
			break;
 800066e:	e00f      	b.n	8000690 <escNormalOneshot125+0xac>
	case CHANNEL3:
			htim->Instance->CCR3=speed+MINIMUM_ESC_PWM;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800067a:	3304      	adds	r3, #4
 800067c:	63d3      	str	r3, [r2, #60]	@ 0x3c
			break;
 800067e:	e007      	b.n	8000690 <escNormalOneshot125+0xac>
	case CHANNEL4:
			htim->Instance->CCR4=speed+MINIMUM_ESC_PWM;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800068a:	3304      	adds	r3, #4
 800068c:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 800068e:	bf00      	nop
	}
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <Control4Motor>:

void Control4Motor(TIM_HandleTypeDef *htim,Motor_speed_Typedef *speed)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
	escNormalOneshot125(htim, speed->speed1, CHANNEL1);
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2200      	movs	r2, #0
 80006ac:	4619      	mov	r1, r3
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f7ff ff98 	bl	80005e4 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed2, CHANNEL2);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	2204      	movs	r2, #4
 80006ba:	4619      	mov	r1, r3
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff ff91 	bl	80005e4 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed3, CHANNEL3);
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	2208      	movs	r2, #8
 80006c8:	4619      	mov	r1, r3
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ff8a 	bl	80005e4 <escNormalOneshot125>
	escNormalOneshot125(htim, speed->speed4, CHANNEL4);
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	220c      	movs	r2, #12
 80006d6:	4619      	mov	r1, r3
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff83 	bl	80005e4 <escNormalOneshot125>

}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <pidControllersInit>:
 */

#include "PID.h"

void pidControllersInit(PIDControllers_Typedef* pid,float Kp,float Ki,float Kd,float to,float T,float upper_saturation,float lower_saturation)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b089      	sub	sp, #36	@ 0x24
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	61f8      	str	r0, [r7, #28]
 80006ee:	ed87 0a06 	vstr	s0, [r7, #24]
 80006f2:	edc7 0a05 	vstr	s1, [r7, #20]
 80006f6:	ed87 1a04 	vstr	s2, [r7, #16]
 80006fa:	edc7 1a03 	vstr	s3, [r7, #12]
 80006fe:	ed87 2a02 	vstr	s4, [r7, #8]
 8000702:	edc7 2a01 	vstr	s5, [r7, #4]
 8000706:	ed87 3a00 	vstr	s6, [r7]
	pid->Kp=Kp;
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	69ba      	ldr	r2, [r7, #24]
 800070e:	601a      	str	r2, [r3, #0]
	pid->Ki=Ki;
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	697a      	ldr	r2, [r7, #20]
 8000714:	605a      	str	r2, [r3, #4]
	pid->Kd=Kd;
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	693a      	ldr	r2, [r7, #16]
 800071a:	609a      	str	r2, [r3, #8]
	pid->to=to;
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	60da      	str	r2, [r3, #12]
	pid->T=T;
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	68ba      	ldr	r2, [r7, #8]
 8000726:	611a      	str	r2, [r3, #16]

	pid->et=0;
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	f04f 0200 	mov.w	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
	pid->ek1=0;
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	f04f 0200 	mov.w	r2, #0
 8000736:	619a      	str	r2, [r3, #24]

	pid->eKit=0;
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	f04f 0200 	mov.w	r2, #0
 800073e:	61da      	str	r2, [r3, #28]
	pid->eKik1=0;
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	f04f 0200 	mov.w	r2, #0
 8000746:	621a      	str	r2, [r3, #32]

	pid->propotion=0;
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	f04f 0200 	mov.w	r2, #0
 800074e:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->integrator=0;
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f04f 0200 	mov.w	r2, #0
 8000756:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->deviator=0;
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	f04f 0200 	mov.w	r2, #0
 800075e:	631a      	str	r2, [r3, #48]	@ 0x30
	pid->integratork1=0;
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	f04f 0200 	mov.w	r2, #0
 8000766:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->deviatork1=0;
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	f04f 0200 	mov.w	r2, #0
 800076e:	635a      	str	r2, [r3, #52]	@ 0x34

	pid->upper_saturation=upper_saturation;
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	641a      	str	r2, [r3, #64]	@ 0x40
	pid->lower_saturation=lower_saturation;
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	683a      	ldr	r2, [r7, #0]
 800077a:	645a      	str	r2, [r3, #68]	@ 0x44

	pid->measurement=0;
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	f04f 0200 	mov.w	r2, #0
 8000782:	639a      	str	r2, [r3, #56]	@ 0x38

	pid->u=0;
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	f04f 0200 	mov.w	r2, #0
 800078a:	64da      	str	r2, [r3, #76]	@ 0x4c

}
 800078c:	bf00      	nop
 800078e:	3724      	adds	r7, #36	@ 0x24
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <pidUpdate>:
	pid->Ki=Ki;
	pid->Kd=Kd;
}

float pidUpdate(PIDControllers_Typedef* pid,float measurement,float input)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80007a4:	edc7 0a01 	vstr	s1, [r7, #4]
	//get pid input
	pid->expected=input;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	63da      	str	r2, [r3, #60]	@ 0x3c
	pid->measurement=measurement;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	639a      	str	r2, [r3, #56]	@ 0x38
	pid->et=pid->expected-pid->measurement;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80007c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	edc3 7a05 	vstr	s15, [r3, #20]
	{
		pid->eKik1=0;
		pid->eKit=0;
	}
#else
	pid->eKit=pid->et;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	695a      	ldr	r2, [r3, #20]
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	61da      	str	r2, [r3, #28]
	pid->eKik1=pid->ek1;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	699a      	ldr	r2, [r3, #24]
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	621a      	str	r2, [r3, #32]
#endif
	//PID calculation
	pid->propotion=pid->Kp*pid->et;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	ed93 7a00 	vldr	s14, [r3]
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	edd3 7a05 	vldr	s15, [r3, #20]
 80007e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	pid->integrator=((pid->Ki*pid->T)/2)*(pid->eKit+pid->eKik1)+pid->integratork1;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80007fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000800:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000804:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	edd3 6a07 	vldr	s13, [r3, #28]
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	edd3 7a08 	vldr	s15, [r3, #32]
 8000814:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000818:	ee27 7a27 	vmul.f32	s14, s14, s15
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	pid->deviator=((2*pid->Kd)/(2*pid->to+pid->T))*(pid->et-pid->ek1)+((2*pid->to-pid->T)
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000832:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	edd3 7a03 	vldr	s15, [r3, #12]
 800083c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	edd3 7a04 	vldr	s15, [r3, #16]
 8000846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800084a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	edd3 6a05 	vldr	s13, [r3, #20]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	edd3 7a06 	vldr	s15, [r3, #24]
 800085a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800085e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	edd3 7a03 	vldr	s15, [r3, #12]
 8000868:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000872:	ee36 6ae7 	vsub.f32	s12, s13, s15
			/(2*pid->to+pid->T))*pid->deviatork1;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	edd3 7a03 	vldr	s15, [r3, #12]
 800087c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	edd3 7a04 	vldr	s15, [r3, #16]
 8000886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800088a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8000894:	ee66 7aa7 	vmul.f32	s15, s13, s15
	pid->deviator=((2*pid->Kd)/(2*pid->to+pid->T))*(pid->et-pid->ek1)+((2*pid->to-pid->T)
 8000898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	pid->ek1=pid->et;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	695a      	ldr	r2, [r3, #20]
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	619a      	str	r2, [r3, #24]
	pid->integratork1=pid->integrator;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->deviatork1=pid->deviator;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	635a      	str	r2, [r3, #52]	@ 0x34
	pid->v=pid->propotion+pid->integrator+pid->deviator;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80008c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80008d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

	//saturation
	if(pid->v>pid->upper_saturation)
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80008e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ee:	dd04      	ble.n	80008fa <pidUpdate+0x162>
	{
		pid->u=pid->upper_saturation;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80008f8:	e013      	b.n	8000922 <pidUpdate+0x18a>
	}
	else if(pid->v<(pid->lower_saturation))
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000906:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800090a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800090e:	d504      	bpl.n	800091a <pidUpdate+0x182>
	{
		pid->u=pid->lower_saturation;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000918:	e003      	b.n	8000922 <pidUpdate+0x18a>
	}
	else
	{
		pid->u=pid->v;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	64da      	str	r2, [r3, #76]	@ 0x4c
	}

	return pid->u;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	ee07 3a90 	vmov	s15, r3
}
 800092a:	eeb0 0a67 	vmov.f32	s0, s15
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	4a07      	ldr	r2, [pc, #28]	@ (8000964 <vApplicationGetIdleTaskMemory+0x2c>)
 8000948:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	4a06      	ldr	r2, [pc, #24]	@ (8000968 <vApplicationGetIdleTaskMemory+0x30>)
 800094e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2280      	movs	r2, #128	@ 0x80
 8000954:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	2000007c 	.word	0x2000007c
 8000968:	2000011c 	.word	0x2000011c

0800096c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800096c:	b5b0      	push	{r4, r5, r7, lr}
 800096e:	b08a      	sub	sp, #40	@ 0x28
 8000970:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000972:	f000 fef1 	bl	8001758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000976:	f000 f8f9 	bl	8000b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097a:	f000 fa5d 	bl	8000e38 <MX_GPIO_Init>
  MX_SPI1_Init();
 800097e:	f000 f95d 	bl	8000c3c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000982:	f000 f991 	bl	8000ca8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000986:	f000 fa09 	bl	8000d9c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  float sample=powf(10,-3);
 800098a:	4b5d      	ldr	r3, [pc, #372]	@ (8000b00 <main+0x194>)
 800098c:	61fb      	str	r3, [r7, #28]
  pidControllersInit(&yaw, 20, 15, 5,0.1,sample,0.1,-0.1);
 800098e:	ed9f 3a5d 	vldr	s6, [pc, #372]	@ 8000b04 <main+0x198>
 8000992:	eddf 2a5d 	vldr	s5, [pc, #372]	@ 8000b08 <main+0x19c>
 8000996:	ed97 2a07 	vldr	s4, [r7, #28]
 800099a:	eddf 1a5b 	vldr	s3, [pc, #364]	@ 8000b08 <main+0x19c>
 800099e:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 80009a2:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 80009a6:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 80009aa:	4858      	ldr	r0, [pc, #352]	@ (8000b0c <main+0x1a0>)
 80009ac:	f7ff fe9b 	bl	80006e6 <pidControllersInit>
  pidControllersInit(&yaw_rate, 100, 50,10, 0.1,sample,1500,-1500);
 80009b0:	ed9f 3a57 	vldr	s6, [pc, #348]	@ 8000b10 <main+0x1a4>
 80009b4:	eddf 2a57 	vldr	s5, [pc, #348]	@ 8000b14 <main+0x1a8>
 80009b8:	ed97 2a07 	vldr	s4, [r7, #28]
 80009bc:	eddf 1a52 	vldr	s3, [pc, #328]	@ 8000b08 <main+0x19c>
 80009c0:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 80009c4:	eddf 0a54 	vldr	s1, [pc, #336]	@ 8000b18 <main+0x1ac>
 80009c8:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8000b1c <main+0x1b0>
 80009cc:	4854      	ldr	r0, [pc, #336]	@ (8000b20 <main+0x1b4>)
 80009ce:	f7ff fe8a 	bl	80006e6 <pidControllersInit>
  pidControllersInit(&pitch, 20, 15,5, 0.1,sample,0.1,-0.1);
 80009d2:	ed9f 3a4c 	vldr	s6, [pc, #304]	@ 8000b04 <main+0x198>
 80009d6:	eddf 2a4c 	vldr	s5, [pc, #304]	@ 8000b08 <main+0x19c>
 80009da:	ed97 2a07 	vldr	s4, [r7, #28]
 80009de:	eddf 1a4a 	vldr	s3, [pc, #296]	@ 8000b08 <main+0x19c>
 80009e2:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 80009e6:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 80009ea:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 80009ee:	484d      	ldr	r0, [pc, #308]	@ (8000b24 <main+0x1b8>)
 80009f0:	f7ff fe79 	bl	80006e6 <pidControllersInit>
  pidControllersInit(&pitch_rate, 100, 50,10, 0.1,sample,1500,-1500);
 80009f4:	ed9f 3a46 	vldr	s6, [pc, #280]	@ 8000b10 <main+0x1a4>
 80009f8:	eddf 2a46 	vldr	s5, [pc, #280]	@ 8000b14 <main+0x1a8>
 80009fc:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a00:	eddf 1a41 	vldr	s3, [pc, #260]	@ 8000b08 <main+0x19c>
 8000a04:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000a08:	eddf 0a43 	vldr	s1, [pc, #268]	@ 8000b18 <main+0x1ac>
 8000a0c:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8000b1c <main+0x1b0>
 8000a10:	4845      	ldr	r0, [pc, #276]	@ (8000b28 <main+0x1bc>)
 8000a12:	f7ff fe68 	bl	80006e6 <pidControllersInit>
  pidControllersInit(&roll, 20, 15,5 ,0.1,sample,0.1,-0.1);
 8000a16:	ed9f 3a3b 	vldr	s6, [pc, #236]	@ 8000b04 <main+0x198>
 8000a1a:	eddf 2a3b 	vldr	s5, [pc, #236]	@ 8000b08 <main+0x19c>
 8000a1e:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a22:	eddf 1a39 	vldr	s3, [pc, #228]	@ 8000b08 <main+0x19c>
 8000a26:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000a2a:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8000a2e:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000a32:	483e      	ldr	r0, [pc, #248]	@ (8000b2c <main+0x1c0>)
 8000a34:	f7ff fe57 	bl	80006e6 <pidControllersInit>
  pidControllersInit(&roll_rate, 100, 50,10, 0.1,sample,1500,-1500);
 8000a38:	ed9f 3a35 	vldr	s6, [pc, #212]	@ 8000b10 <main+0x1a4>
 8000a3c:	eddf 2a35 	vldr	s5, [pc, #212]	@ 8000b14 <main+0x1a8>
 8000a40:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a44:	eddf 1a30 	vldr	s3, [pc, #192]	@ 8000b08 <main+0x19c>
 8000a48:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000a4c:	eddf 0a32 	vldr	s1, [pc, #200]	@ 8000b18 <main+0x1ac>
 8000a50:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8000b1c <main+0x1b0>
 8000a54:	4836      	ldr	r0, [pc, #216]	@ (8000b30 <main+0x1c4>)
 8000a56:	f7ff fe46 	bl	80006e6 <pidControllersInit>
  pidControllersInit(&high, 50, 25,10 ,0.1,sample,6000,0);
 8000a5a:	ed9f 3a36 	vldr	s6, [pc, #216]	@ 8000b34 <main+0x1c8>
 8000a5e:	eddf 2a36 	vldr	s5, [pc, #216]	@ 8000b38 <main+0x1cc>
 8000a62:	ed97 2a07 	vldr	s4, [r7, #28]
 8000a66:	eddf 1a28 	vldr	s3, [pc, #160]	@ 8000b08 <main+0x19c>
 8000a6a:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000a6e:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 8000a72:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8000b18 <main+0x1ac>
 8000a76:	4831      	ldr	r0, [pc, #196]	@ (8000b3c <main+0x1d0>)
 8000a78:	f7ff fe35 	bl	80006e6 <pidControllersInit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4830      	ldr	r0, [pc, #192]	@ (8000b40 <main+0x1d4>)
 8000a80:	f002 fcb4 	bl	80033ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000a84:	2104      	movs	r1, #4
 8000a86:	482e      	ldr	r0, [pc, #184]	@ (8000b40 <main+0x1d4>)
 8000a88:	f002 fcb0 	bl	80033ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000a8c:	2108      	movs	r1, #8
 8000a8e:	482c      	ldr	r0, [pc, #176]	@ (8000b40 <main+0x1d4>)
 8000a90:	f002 fcac 	bl	80033ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000a94:	210c      	movs	r1, #12
 8000a96:	482a      	ldr	r0, [pc, #168]	@ (8000b40 <main+0x1d4>)
 8000a98:	f002 fca8 	bl	80033ec <HAL_TIM_PWM_Start>
  Calibration(&htim2);
 8000a9c:	4828      	ldr	r0, [pc, #160]	@ (8000b40 <main+0x1d4>)
 8000a9e:	f7ff fd61 	bl	8000564 <Calibration>
  RX_Enhanced_ShockBurst_Config(&hspi1);
 8000aa2:	4828      	ldr	r0, [pc, #160]	@ (8000b44 <main+0x1d8>)
 8000aa4:	f000 fc18 	bl	80012d8 <RX_Enhanced_ShockBurst_Config>
  HAL_TIM_Base_Start_IT(&htim3);
 8000aa8:	4827      	ldr	r0, [pc, #156]	@ (8000b48 <main+0x1dc>)
 8000aaa:	f002 fbed 	bl	8003288 <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000aae:	4b27      	ldr	r3, [pc, #156]	@ (8000b4c <main+0x1e0>)
 8000ab0:	463c      	mov	r4, r7
 8000ab2:	461d      	mov	r5, r3
 8000ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000abc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f003 fb56 	bl	8004176 <osThreadCreate>
 8000aca:	4603      	mov	r3, r0
 8000acc:	4a20      	ldr	r2, [pc, #128]	@ (8000b50 <main+0x1e4>)
 8000ace:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(ESC_Task, "ESC", 128,NULL,1, &ESC_Handle);
 8000ad0:	4b20      	ldr	r3, [pc, #128]	@ (8000b54 <main+0x1e8>)
 8000ad2:	9301      	str	r3, [sp, #4]
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	2300      	movs	r3, #0
 8000ada:	2280      	movs	r2, #128	@ 0x80
 8000adc:	491e      	ldr	r1, [pc, #120]	@ (8000b58 <main+0x1ec>)
 8000ade:	481f      	ldr	r0, [pc, #124]	@ (8000b5c <main+0x1f0>)
 8000ae0:	f003 fcbd 	bl	800445e <xTaskCreate>
  xTaskCreate(NRF_Task, "NRF", 128, NULL, 2, &NRF_Handle);
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b60 <main+0x1f4>)
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	2302      	movs	r3, #2
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2300      	movs	r3, #0
 8000aee:	2280      	movs	r2, #128	@ 0x80
 8000af0:	491c      	ldr	r1, [pc, #112]	@ (8000b64 <main+0x1f8>)
 8000af2:	481d      	ldr	r0, [pc, #116]	@ (8000b68 <main+0x1fc>)
 8000af4:	f003 fcb3 	bl	800445e <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000af8:	f003 fb36 	bl	8004168 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <main+0x190>
 8000b00:	3a83126f 	.word	0x3a83126f
 8000b04:	bdcccccd 	.word	0xbdcccccd
 8000b08:	3dcccccd 	.word	0x3dcccccd
 8000b0c:	2000058c 	.word	0x2000058c
 8000b10:	c4bb8000 	.word	0xc4bb8000
 8000b14:	44bb8000 	.word	0x44bb8000
 8000b18:	42480000 	.word	0x42480000
 8000b1c:	42c80000 	.word	0x42c80000
 8000b20:	200005e0 	.word	0x200005e0
 8000b24:	2000043c 	.word	0x2000043c
 8000b28:	20000490 	.word	0x20000490
 8000b2c:	200004e4 	.word	0x200004e4
 8000b30:	20000538 	.word	0x20000538
 8000b34:	00000000 	.word	0x00000000
 8000b38:	45bb8000 	.word	0x45bb8000
 8000b3c:	20000634 	.word	0x20000634
 8000b40:	20000374 	.word	0x20000374
 8000b44:	2000031c 	.word	0x2000031c
 8000b48:	200003bc 	.word	0x200003bc
 8000b4c:	08005834 	.word	0x08005834
 8000b50:	20000404 	.word	0x20000404
 8000b54:	200006d8 	.word	0x200006d8
 8000b58:	08005820 	.word	0x08005820
 8000b5c:	08000edd 	.word	0x08000edd
 8000b60:	200006dc 	.word	0x200006dc
 8000b64:	08005824 	.word	0x08005824
 8000b68:	080010c9 	.word	0x080010c9

08000b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b094      	sub	sp, #80	@ 0x50
 8000b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b72:	f107 0320 	add.w	r3, r7, #32
 8000b76:	2230      	movs	r2, #48	@ 0x30
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f004 fd6a 	bl	8005654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	4b27      	ldr	r3, [pc, #156]	@ (8000c34 <SystemClock_Config+0xc8>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b98:	4a26      	ldr	r2, [pc, #152]	@ (8000c34 <SystemClock_Config+0xc8>)
 8000b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba0:	4b24      	ldr	r3, [pc, #144]	@ (8000c34 <SystemClock_Config+0xc8>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	4b21      	ldr	r3, [pc, #132]	@ (8000c38 <SystemClock_Config+0xcc>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a20      	ldr	r2, [pc, #128]	@ (8000c38 <SystemClock_Config+0xcc>)
 8000bb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c38 <SystemClock_Config+0xcc>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000bdc:	2319      	movs	r3, #25
 8000bde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000be0:	23a8      	movs	r3, #168	@ 0xa8
 8000be2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000be8:	2304      	movs	r3, #4
 8000bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bec:	f107 0320 	add.w	r3, r7, #32
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f001 f8b1 	bl	8001d58 <HAL_RCC_OscConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bfc:	f000 fab0 	bl	8001160 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c00:	230f      	movs	r3, #15
 8000c02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c04:	2302      	movs	r3, #2
 8000c06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f001 fb13 	bl	8002248 <HAL_RCC_ClockConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c28:	f000 fa9a 	bl	8001160 <Error_Handler>
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	3750      	adds	r7, #80	@ 0x50
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40007000 	.word	0x40007000

08000c3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c40:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <MX_SPI1_Init+0x64>)
 8000c42:	4a18      	ldr	r2, [pc, #96]	@ (8000ca4 <MX_SPI1_Init+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c46:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <MX_SPI1_Init+0x64>)
 8000c48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <MX_SPI1_Init+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <MX_SPI1_Init+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <MX_SPI1_Init+0x64>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <MX_SPI1_Init+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <MX_SPI1_Init+0x64>)
 8000c68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <MX_SPI1_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <MX_SPI1_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <MX_SPI1_Init+0x64>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <MX_SPI1_Init+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <MX_SPI1_Init+0x64>)
 8000c88:	220a      	movs	r2, #10
 8000c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	@ (8000ca0 <MX_SPI1_Init+0x64>)
 8000c8e:	f001 fcd9 	bl	8002644 <HAL_SPI_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c98:	f000 fa62 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	2000031c 	.word	0x2000031c
 8000ca4:	40013000 	.word	0x40013000

08000ca8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	@ 0x28
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cae:	f107 0320 	add.w	r3, r7, #32
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]
 8000cc6:	615a      	str	r2, [r3, #20]
 8000cc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cca:	4b33      	ldr	r3, [pc, #204]	@ (8000d98 <MX_TIM2_Init+0xf0>)
 8000ccc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cd0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cd2:	4b31      	ldr	r3, [pc, #196]	@ (8000d98 <MX_TIM2_Init+0xf0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8000d98 <MX_TIM2_Init+0xf0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000cde:	4b2e      	ldr	r3, [pc, #184]	@ (8000d98 <MX_TIM2_Init+0xf0>)
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d98 <MX_TIM2_Init+0xf0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cec:	4b2a      	ldr	r3, [pc, #168]	@ (8000d98 <MX_TIM2_Init+0xf0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cf2:	4829      	ldr	r0, [pc, #164]	@ (8000d98 <MX_TIM2_Init+0xf0>)
 8000cf4:	f002 fb2a 	bl	800334c <HAL_TIM_PWM_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000cfe:	f000 fa2f 	bl	8001160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d0a:	f107 0320 	add.w	r3, r7, #32
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4821      	ldr	r0, [pc, #132]	@ (8000d98 <MX_TIM2_Init+0xf0>)
 8000d12:	f003 f98f 	bl	8004034 <HAL_TIMEx_MasterConfigSynchronization>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d1c:	f000 fa20 	bl	8001160 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d20:	2360      	movs	r3, #96	@ 0x60
 8000d22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2200      	movs	r2, #0
 8000d34:	4619      	mov	r1, r3
 8000d36:	4818      	ldr	r0, [pc, #96]	@ (8000d98 <MX_TIM2_Init+0xf0>)
 8000d38:	f002 fcf8 	bl	800372c <HAL_TIM_PWM_ConfigChannel>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000d42:	f000 fa0d 	bl	8001160 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	2204      	movs	r2, #4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4812      	ldr	r0, [pc, #72]	@ (8000d98 <MX_TIM2_Init+0xf0>)
 8000d4e:	f002 fced 	bl	800372c <HAL_TIM_PWM_ConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d58:	f000 fa02 	bl	8001160 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2208      	movs	r2, #8
 8000d60:	4619      	mov	r1, r3
 8000d62:	480d      	ldr	r0, [pc, #52]	@ (8000d98 <MX_TIM2_Init+0xf0>)
 8000d64:	f002 fce2 	bl	800372c <HAL_TIM_PWM_ConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000d6e:	f000 f9f7 	bl	8001160 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	220c      	movs	r2, #12
 8000d76:	4619      	mov	r1, r3
 8000d78:	4807      	ldr	r0, [pc, #28]	@ (8000d98 <MX_TIM2_Init+0xf0>)
 8000d7a:	f002 fcd7 	bl	800372c <HAL_TIM_PWM_ConfigChannel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000d84:	f000 f9ec 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d88:	4803      	ldr	r0, [pc, #12]	@ (8000d98 <MX_TIM2_Init+0xf0>)
 8000d8a:	f000 fbcf 	bl	800152c <HAL_TIM_MspPostInit>

}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	@ 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000374 	.word	0x20000374

08000d9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da2:	f107 0308 	add.w	r3, r7, #8
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db0:	463b      	mov	r3, r7
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000db8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e30 <MX_TIM3_Init+0x94>)
 8000dba:	4a1e      	ldr	r2, [pc, #120]	@ (8000e34 <MX_TIM3_Init+0x98>)
 8000dbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <MX_TIM3_Init+0x94>)
 8000dc0:	2253      	movs	r2, #83	@ 0x53
 8000dc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <MX_TIM3_Init+0x94>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000dca:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <MX_TIM3_Init+0x94>)
 8000dcc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd2:	4b17      	ldr	r3, [pc, #92]	@ (8000e30 <MX_TIM3_Init+0x94>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd8:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <MX_TIM3_Init+0x94>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dde:	4814      	ldr	r0, [pc, #80]	@ (8000e30 <MX_TIM3_Init+0x94>)
 8000de0:	f002 fa02 	bl	80031e8 <HAL_TIM_Base_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000dea:	f000 f9b9 	bl	8001160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000df4:	f107 0308 	add.w	r3, r7, #8
 8000df8:	4619      	mov	r1, r3
 8000dfa:	480d      	ldr	r0, [pc, #52]	@ (8000e30 <MX_TIM3_Init+0x94>)
 8000dfc:	f002 fd58 	bl	80038b0 <HAL_TIM_ConfigClockSource>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e06:	f000 f9ab 	bl	8001160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e12:	463b      	mov	r3, r7
 8000e14:	4619      	mov	r1, r3
 8000e16:	4806      	ldr	r0, [pc, #24]	@ (8000e30 <MX_TIM3_Init+0x94>)
 8000e18:	f003 f90c 	bl	8004034 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e22:	f000 f99d 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200003bc 	.word	0x200003bc
 8000e34:	40000400 	.word	0x40000400

08000e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	4b20      	ldr	r3, [pc, #128]	@ (8000ed4 <MX_GPIO_Init+0x9c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed4 <MX_GPIO_Init+0x9c>)
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed4 <MX_GPIO_Init+0x9c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	4b19      	ldr	r3, [pc, #100]	@ (8000ed4 <MX_GPIO_Init+0x9c>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a18      	ldr	r2, [pc, #96]	@ (8000ed4 <MX_GPIO_Init+0x9c>)
 8000e74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b16      	ldr	r3, [pc, #88]	@ (8000ed4 <MX_GPIO_Init+0x9c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <MX_GPIO_Init+0x9c>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a11      	ldr	r2, [pc, #68]	@ (8000ed4 <MX_GPIO_Init+0x9c>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <MX_GPIO_Init+0x9c>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ea8:	480b      	ldr	r0, [pc, #44]	@ (8000ed8 <MX_GPIO_Init+0xa0>)
 8000eaa:	f000 ff21 	bl	8001cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4804      	ldr	r0, [pc, #16]	@ (8000ed8 <MX_GPIO_Init+0xa0>)
 8000ec8:	f000 fd8e 	bl	80019e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ecc:	bf00      	nop
 8000ece:	3720      	adds	r7, #32
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020800 	.word	0x40020800

08000edc <ESC_Task>:

/* USER CODE BEGIN 4 */
void ESC_Task(void *argument)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

	while(1)
	{
		if(timer3_flag==1)
 8000ee4:	4b6c      	ldr	r3, [pc, #432]	@ (8001098 <ESC_Task+0x1bc>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d1fb      	bne.n	8000ee4 <ESC_Task+0x8>
		{
			/*
			 * get picth measurement
			 */
			Calculate_Reference(&calculation, &control);
 8000eec:	496b      	ldr	r1, [pc, #428]	@ (800109c <ESC_Task+0x1c0>)
 8000eee:	486c      	ldr	r0, [pc, #432]	@ (80010a0 <ESC_Task+0x1c4>)
 8000ef0:	f7ff faee 	bl	80004d0 <Calculate_Reference>
			pidUpdate(&pitch, calculation.picth_measurement, calculation.picth_reference);
 8000ef4:	4b6a      	ldr	r3, [pc, #424]	@ (80010a0 <ESC_Task+0x1c4>)
 8000ef6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000efa:	4b69      	ldr	r3, [pc, #420]	@ (80010a0 <ESC_Task+0x1c4>)
 8000efc:	ed93 7a00 	vldr	s14, [r3]
 8000f00:	eef0 0a47 	vmov.f32	s1, s14
 8000f04:	eeb0 0a67 	vmov.f32	s0, s15
 8000f08:	4866      	ldr	r0, [pc, #408]	@ (80010a4 <ESC_Task+0x1c8>)
 8000f0a:	f7ff fc45 	bl	8000798 <pidUpdate>
			/*
			 * get picth rate measuremet
			 */
			calculation.picth_rate_reference=pitch.u;
 8000f0e:	4b65      	ldr	r3, [pc, #404]	@ (80010a4 <ESC_Task+0x1c8>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f12:	4a63      	ldr	r2, [pc, #396]	@ (80010a0 <ESC_Task+0x1c4>)
 8000f14:	6193      	str	r3, [r2, #24]
			pidUpdate(&pitch_rate, calculation.picth_rate_measurement, calculation.picth_rate_reference);
 8000f16:	4b62      	ldr	r3, [pc, #392]	@ (80010a0 <ESC_Task+0x1c4>)
 8000f18:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000f1c:	4b60      	ldr	r3, [pc, #384]	@ (80010a0 <ESC_Task+0x1c4>)
 8000f1e:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f22:	eef0 0a47 	vmov.f32	s1, s14
 8000f26:	eeb0 0a67 	vmov.f32	s0, s15
 8000f2a:	485f      	ldr	r0, [pc, #380]	@ (80010a8 <ESC_Task+0x1cc>)
 8000f2c:	f7ff fc34 	bl	8000798 <pidUpdate>

			/*
			 * get roll measurement
			 */
			pidUpdate(&roll, calculation.roll_measurement, calculation.roll_reference);
 8000f30:	4b5b      	ldr	r3, [pc, #364]	@ (80010a0 <ESC_Task+0x1c4>)
 8000f32:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f36:	4b5a      	ldr	r3, [pc, #360]	@ (80010a0 <ESC_Task+0x1c4>)
 8000f38:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f3c:	eef0 0a47 	vmov.f32	s1, s14
 8000f40:	eeb0 0a67 	vmov.f32	s0, s15
 8000f44:	4859      	ldr	r0, [pc, #356]	@ (80010ac <ESC_Task+0x1d0>)
 8000f46:	f7ff fc27 	bl	8000798 <pidUpdate>
			/*
			 * get roll rate measurement
			 */
			calculation.roll_rate_reference=roll.u;
 8000f4a:	4b58      	ldr	r3, [pc, #352]	@ (80010ac <ESC_Task+0x1d0>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4e:	4a54      	ldr	r2, [pc, #336]	@ (80010a0 <ESC_Task+0x1c4>)
 8000f50:	61d3      	str	r3, [r2, #28]
			pidUpdate(&roll_rate, calculation.roll_rate_measurement, calculation.roll_rate_reference);
 8000f52:	4b53      	ldr	r3, [pc, #332]	@ (80010a0 <ESC_Task+0x1c4>)
 8000f54:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000f58:	4b51      	ldr	r3, [pc, #324]	@ (80010a0 <ESC_Task+0x1c4>)
 8000f5a:	ed93 7a07 	vldr	s14, [r3, #28]
 8000f5e:	eef0 0a47 	vmov.f32	s1, s14
 8000f62:	eeb0 0a67 	vmov.f32	s0, s15
 8000f66:	4852      	ldr	r0, [pc, #328]	@ (80010b0 <ESC_Task+0x1d4>)
 8000f68:	f7ff fc16 	bl	8000798 <pidUpdate>
			/*
			 * get yaw measurement
			 */
			pidUpdate(&yaw, calculation.yaw_measurement, calculation.yaw_reference);
 8000f6c:	4b4c      	ldr	r3, [pc, #304]	@ (80010a0 <ESC_Task+0x1c4>)
 8000f6e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f72:	4b4b      	ldr	r3, [pc, #300]	@ (80010a0 <ESC_Task+0x1c4>)
 8000f74:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f78:	eef0 0a47 	vmov.f32	s1, s14
 8000f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f80:	484c      	ldr	r0, [pc, #304]	@ (80010b4 <ESC_Task+0x1d8>)
 8000f82:	f7ff fc09 	bl	8000798 <pidUpdate>
			/*
			* get yaw measurement
			*/
			calculation.yaw_rate_reference=yaw.u;
 8000f86:	4b4b      	ldr	r3, [pc, #300]	@ (80010b4 <ESC_Task+0x1d8>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8a:	4a45      	ldr	r2, [pc, #276]	@ (80010a0 <ESC_Task+0x1c4>)
 8000f8c:	6213      	str	r3, [r2, #32]
			pidUpdate(&yaw_rate, calculation.yaw_rate_measurement, calculation.yaw_rate_reference);
 8000f8e:	4b44      	ldr	r3, [pc, #272]	@ (80010a0 <ESC_Task+0x1c4>)
 8000f90:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000f94:	4b42      	ldr	r3, [pc, #264]	@ (80010a0 <ESC_Task+0x1c4>)
 8000f96:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f9a:	eef0 0a47 	vmov.f32	s1, s14
 8000f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa2:	4845      	ldr	r0, [pc, #276]	@ (80010b8 <ESC_Task+0x1dc>)
 8000fa4:	f7ff fbf8 	bl	8000798 <pidUpdate>
			/*
			* get high measurement and high reference
			*/
			pidUpdate(&high, calculation.high_measurement, calculation.high_reference);
 8000fa8:	4b3d      	ldr	r3, [pc, #244]	@ (80010a0 <ESC_Task+0x1c4>)
 8000faa:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8000fae:	4b3c      	ldr	r3, [pc, #240]	@ (80010a0 <ESC_Task+0x1c4>)
 8000fb0:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8000fb4:	eef0 0a47 	vmov.f32	s1, s14
 8000fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fbc:	483f      	ldr	r0, [pc, #252]	@ (80010bc <ESC_Task+0x1e0>)
 8000fbe:	f7ff fbeb 	bl	8000798 <pidUpdate>

			speed.speed1=-pitch_rate.u+roll_rate.u-yaw_rate.u+high.u;
 8000fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80010b0 <ESC_Task+0x1d4>)
 8000fc4:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8000fc8:	4b37      	ldr	r3, [pc, #220]	@ (80010a8 <ESC_Task+0x1cc>)
 8000fca:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8000fce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fd2:	4b39      	ldr	r3, [pc, #228]	@ (80010b8 <ESC_Task+0x1dc>)
 8000fd4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8000fd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fdc:	4b37      	ldr	r3, [pc, #220]	@ (80010bc <ESC_Task+0x1e0>)
 8000fde:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8000fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fea:	ee17 2a90 	vmov	r2, s15
 8000fee:	4b34      	ldr	r3, [pc, #208]	@ (80010c0 <ESC_Task+0x1e4>)
 8000ff0:	601a      	str	r2, [r3, #0]
			speed.speed2=+pitch_rate.u+roll_rate.u+yaw_rate.u+high.u;
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80010a8 <ESC_Task+0x1cc>)
 8000ff4:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8000ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80010b0 <ESC_Task+0x1d4>)
 8000ffa:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8000ffe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001002:	4b2d      	ldr	r3, [pc, #180]	@ (80010b8 <ESC_Task+0x1dc>)
 8001004:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001008:	ee37 7a27 	vadd.f32	s14, s14, s15
 800100c:	4b2b      	ldr	r3, [pc, #172]	@ (80010bc <ESC_Task+0x1e0>)
 800100e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800101a:	ee17 2a90 	vmov	r2, s15
 800101e:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <ESC_Task+0x1e4>)
 8001020:	605a      	str	r2, [r3, #4]
			speed.speed3=+pitch_rate.u-roll_rate.u-yaw_rate.u+high.u;
 8001022:	4b21      	ldr	r3, [pc, #132]	@ (80010a8 <ESC_Task+0x1cc>)
 8001024:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8001028:	4b21      	ldr	r3, [pc, #132]	@ (80010b0 <ESC_Task+0x1d4>)
 800102a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800102e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001032:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <ESC_Task+0x1dc>)
 8001034:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001038:	ee37 7a67 	vsub.f32	s14, s14, s15
 800103c:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <ESC_Task+0x1e0>)
 800103e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001046:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800104a:	ee17 2a90 	vmov	r2, s15
 800104e:	4b1c      	ldr	r3, [pc, #112]	@ (80010c0 <ESC_Task+0x1e4>)
 8001050:	609a      	str	r2, [r3, #8]
			speed.speed4=-pitch_rate.u-roll_rate.u-yaw_rate.u+high.u;
 8001052:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <ESC_Task+0x1cc>)
 8001054:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001058:	eeb1 7a67 	vneg.f32	s14, s15
 800105c:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <ESC_Task+0x1d4>)
 800105e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001062:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001066:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <ESC_Task+0x1dc>)
 8001068:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800106c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001070:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <ESC_Task+0x1e0>)
 8001072:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800107a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800107e:	ee17 2a90 	vmov	r2, s15
 8001082:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <ESC_Task+0x1e4>)
 8001084:	60da      	str	r2, [r3, #12]


			Control4Motor(&htim2, &speed);
 8001086:	490e      	ldr	r1, [pc, #56]	@ (80010c0 <ESC_Task+0x1e4>)
 8001088:	480e      	ldr	r0, [pc, #56]	@ (80010c4 <ESC_Task+0x1e8>)
 800108a:	f7ff fb07 	bl	800069c <Control4Motor>
			timer3_flag=0;
 800108e:	4b02      	ldr	r3, [pc, #8]	@ (8001098 <ESC_Task+0x1bc>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
		if(timer3_flag==1)
 8001094:	e726      	b.n	8000ee4 <ESC_Task+0x8>
 8001096:	bf00      	nop
 8001098:	20000428 	.word	0x20000428
 800109c:	200006c0 	.word	0x200006c0
 80010a0:	20000688 	.word	0x20000688
 80010a4:	2000043c 	.word	0x2000043c
 80010a8:	20000490 	.word	0x20000490
 80010ac:	200004e4 	.word	0x200004e4
 80010b0:	20000538 	.word	0x20000538
 80010b4:	2000058c 	.word	0x2000058c
 80010b8:	200005e0 	.word	0x200005e0
 80010bc:	20000634 	.word	0x20000634
 80010c0:	2000042c 	.word	0x2000042c
 80010c4:	20000374 	.word	0x20000374

080010c8 <NRF_Task>:

	}
}

void NRF_Task(void *argument)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

	while(1)
	{
		if(RX_Communication(&hspi1, spi_rx)==STATUS_RX_OK)
 80010d0:	4907      	ldr	r1, [pc, #28]	@ (80010f0 <NRF_Task+0x28>)
 80010d2:	4808      	ldr	r0, [pc, #32]	@ (80010f4 <NRF_Task+0x2c>)
 80010d4:	f000 f92c 	bl	8001330 <RX_Communication>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d103      	bne.n	80010e6 <NRF_Task+0x1e>
		{
			/*
			 * get reference
			 */
			Calculate_Reference(&calculation, &control);
 80010de:	4906      	ldr	r1, [pc, #24]	@ (80010f8 <NRF_Task+0x30>)
 80010e0:	4806      	ldr	r0, [pc, #24]	@ (80010fc <NRF_Task+0x34>)
 80010e2:	f7ff f9f5 	bl	80004d0 <Calculate_Reference>
		}
		vTaskDelay(pdMS_TO_TICKS(10));
 80010e6:	200a      	movs	r0, #10
 80010e8:	f003 fb08 	bl	80046fc <vTaskDelay>
		if(RX_Communication(&hspi1, spi_rx)==STATUS_RX_OK)
 80010ec:	e7f0      	b.n	80010d0 <NRF_Task+0x8>
 80010ee:	bf00      	nop
 80010f0:	20000408 	.word	0x20000408
 80010f4:	2000031c 	.word	0x2000031c
 80010f8:	200006c0 	.word	0x200006c0
 80010fc:	20000688 	.word	0x20000688

08001100 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001108:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <StartDefaultTask+0x20>)
 800110e:	f000 fe08 	bl	8001d22 <HAL_GPIO_TogglePin>
    osDelay(500);
 8001112:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001116:	f003 f87a 	bl	800420e <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800111a:	bf00      	nop
 800111c:	e7f4      	b.n	8001108 <StartDefaultTask+0x8>
 800111e:	bf00      	nop
 8001120:	40020800 	.word	0x40020800

08001124 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a08      	ldr	r2, [pc, #32]	@ (8001154 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d101      	bne.n	800113a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001136:	f000 fb31 	bl	800179c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance==TIM3)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a06      	ldr	r2, [pc, #24]	@ (8001158 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d102      	bne.n	800114a <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	  timer3_flag=1;
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END Callback 1 */
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40010000 	.word	0x40010000
 8001158:	40000400 	.word	0x40000400
 800115c:	20000428 	.word	0x20000428

08001160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <Error_Handler+0x8>

0800116c <Chip_Select>:
#include "nRF24L01.h"



void Chip_Select()
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO, CHIP_SELECT_PIN, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2110      	movs	r1, #16
 8001174:	4802      	ldr	r0, [pc, #8]	@ (8001180 <Chip_Select+0x14>)
 8001176:	f000 fdbb 	bl	8001cf0 <HAL_GPIO_WritePin>
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40020000 	.word	0x40020000

08001184 <Chip_Deselect>:

void Chip_Deselect()
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CHIP_SELECT_GPIO, CHIP_SELECT_PIN, 1);
 8001188:	2201      	movs	r2, #1
 800118a:	2110      	movs	r1, #16
 800118c:	4802      	ldr	r0, [pc, #8]	@ (8001198 <Chip_Deselect+0x14>)
 800118e:	f000 fdaf 	bl	8001cf0 <HAL_GPIO_WritePin>
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40020000 	.word	0x40020000

0800119c <Set_CE_High>:

void Set_CE_High()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CE_GPIO, CE_PIN, 1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2101      	movs	r1, #1
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <Set_CE_High+0x14>)
 80011a6:	f000 fda3 	bl	8001cf0 <HAL_GPIO_WritePin>
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40020400 	.word	0x40020400

080011b4 <nRF_WriteOneRegister>:
	HAL_SPI_Transmit(hspi, buff, (uint16_t)size+1, NRF_SPI_TIMEOUT);
	Chip_Deselect();
}

void nRF_WriteOneRegister(SPI_HandleTypeDef *hspi,uint8_t reg,uint8_t data)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	70fb      	strb	r3, [r7, #3]
 80011c0:	4613      	mov	r3, r2
 80011c2:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2];
	buff[0]=reg|(1<<5);
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	f043 0320 	orr.w	r3, r3, #32
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	733b      	strb	r3, [r7, #12]
	buff[1]=data;
 80011ce:	78bb      	ldrb	r3, [r7, #2]
 80011d0:	737b      	strb	r3, [r7, #13]
	Chip_Select();
 80011d2:	f7ff ffcb 	bl	800116c <Chip_Select>
	HAL_SPI_Transmit(hspi, buff, 2, NRF_SPI_TIMEOUT);
 80011d6:	f107 010c 	add.w	r1, r7, #12
 80011da:	2364      	movs	r3, #100	@ 0x64
 80011dc:	2202      	movs	r2, #2
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f001 fab9 	bl	8002756 <HAL_SPI_Transmit>
	Chip_Deselect();
 80011e4:	f7ff ffce 	bl	8001184 <Chip_Deselect>
}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <nRF_ReadOneRegister>:
	HAL_SPI_Receive(hspi, receive_data, size, NRF_SPI_TIMEOUT*10);
	Chip_Deselect();
}

void nRF_ReadOneRegister(SPI_HandleTypeDef *hspi,uint8_t reg,uint8_t *receive_data)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	460b      	mov	r3, r1
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	72fb      	strb	r3, [r7, #11]

	uint8_t buff=reg;
 80011fe:	7afb      	ldrb	r3, [r7, #11]
 8001200:	75fb      	strb	r3, [r7, #23]
	Chip_Select();
 8001202:	f7ff ffb3 	bl	800116c <Chip_Select>
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8001206:	f107 0117 	add.w	r1, r7, #23
 800120a:	2364      	movs	r3, #100	@ 0x64
 800120c:	2201      	movs	r2, #1
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f001 faa1 	bl	8002756 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, receive_data, 1, NRF_SPI_TIMEOUT);
 8001214:	2364      	movs	r3, #100	@ 0x64
 8001216:	2201      	movs	r2, #1
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f001 fbdf 	bl	80029de <HAL_SPI_Receive>
	Chip_Deselect();
 8001220:	f7ff ffb0 	bl	8001184 <Chip_Deselect>

}
 8001224:	bf00      	nop
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <nRF_SendCmd>:
void nRF_SendCmd(SPI_HandleTypeDef *hspi,uint8_t cmd)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	70fb      	strb	r3, [r7, #3]

	uint8_t buff=cmd;
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	73fb      	strb	r3, [r7, #15]
	Chip_Select();
 800123c:	f7ff ff96 	bl	800116c <Chip_Select>
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 8001240:	f107 010f 	add.w	r1, r7, #15
 8001244:	2364      	movs	r3, #100	@ 0x64
 8001246:	2201      	movs	r2, #1
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f001 fa84 	bl	8002756 <HAL_SPI_Transmit>
	Chip_Deselect();
 800124e:	f7ff ff99 	bl	8001184 <Chip_Deselect>
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <nRF_GetStatus>:

uint8_t nRF_GetStatus(SPI_HandleTypeDef *hspi)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]

	uint8_t buff=STATUS;
 8001262:	2307      	movs	r3, #7
 8001264:	73fb      	strb	r3, [r7, #15]
	uint8_t rx_data=0;
 8001266:	2300      	movs	r3, #0
 8001268:	73bb      	strb	r3, [r7, #14]
	Chip_Select();
 800126a:	f7ff ff7f 	bl	800116c <Chip_Select>
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 800126e:	f107 010f 	add.w	r1, r7, #15
 8001272:	2364      	movs	r3, #100	@ 0x64
 8001274:	2201      	movs	r2, #1
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f001 fa6d 	bl	8002756 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &rx_data, 1, NRF_SPI_TIMEOUT*10);
 800127c:	f107 010e 	add.w	r1, r7, #14
 8001280:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001284:	2201      	movs	r2, #1
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f001 fba9 	bl	80029de <HAL_SPI_Receive>
	Chip_Deselect();
 800128c:	f7ff ff7a 	bl	8001184 <Chip_Deselect>
	return rx_data;
 8001290:	7bbb      	ldrb	r3, [r7, #14]

}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <nRF_RX_Payload>:
	HAL_SPI_Transmit(hspi, data, size, NRF_SPI_TIMEOUT);
	Chip_Deselect();
}

void nRF_RX_Payload(SPI_HandleTypeDef *hspi,uint8_t *rx_data, uint16_t size)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	4613      	mov	r3, r2
 80012a6:	80fb      	strh	r3, [r7, #6]
	Chip_Select();
 80012a8:	f7ff ff60 	bl	800116c <Chip_Select>
	uint8_t buff=R_RX_PAYLOAD;
 80012ac:	2361      	movs	r3, #97	@ 0x61
 80012ae:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &buff, 1, NRF_SPI_TIMEOUT);
 80012b0:	f107 0117 	add.w	r1, r7, #23
 80012b4:	2364      	movs	r3, #100	@ 0x64
 80012b6:	2201      	movs	r2, #1
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f001 fa4c 	bl	8002756 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, rx_data, size, NRF_SPI_TIMEOUT*10);
 80012be:	88fa      	ldrh	r2, [r7, #6]
 80012c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f001 fb89 	bl	80029de <HAL_SPI_Receive>
	Chip_Deselect();
 80012cc:	f7ff ff5a 	bl	8001184 <Chip_Deselect>
}
 80012d0:	bf00      	nop
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <RX_Enhanced_ShockBurst_Config>:
	Set_CE_High();
	HAL_Delay(2);
}

void RX_Enhanced_ShockBurst_Config(SPI_HandleTypeDef *hspi)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	uint8_t buff=0xb;
 80012e0:	230b      	movs	r3, #11
 80012e2:	73fb      	strb	r3, [r7, #15]
	CONFIG_REG_Write(hspi, buff);
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	4619      	mov	r1, r3
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 f847 	bl	800137c <CONFIG_REG_Write>
	nRF_WriteOneRegister(hspi, EN_RXADDR, 0x01);
 80012ee:	2201      	movs	r2, #1
 80012f0:	2102      	movs	r1, #2
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ff5e 	bl	80011b4 <nRF_WriteOneRegister>
	nRF_WriteOneRegister(hspi, RX_PW_P0, 8);
 80012f8:	2208      	movs	r2, #8
 80012fa:	2111      	movs	r1, #17
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff59 	bl	80011b4 <nRF_WriteOneRegister>
	nRF_WriteOneRegister(hspi, EN_AA, 0x00);
 8001302:	2200      	movs	r2, #0
 8001304:	2101      	movs	r1, #1
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ff54 	bl	80011b4 <nRF_WriteOneRegister>
	nRF_WriteOneRegister(hspi,RF_SETUP, 0x7);
 800130c:	2207      	movs	r2, #7
 800130e:	2106      	movs	r1, #6
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff4f 	bl	80011b4 <nRF_WriteOneRegister>
	Set_CE_High();
 8001316:	f7ff ff41 	bl	800119c <Set_CE_High>
	HAL_Delay(2);
 800131a:	2002      	movs	r0, #2
 800131c:	f000 fa5e 	bl	80017dc <HAL_Delay>
	nRF_SendCmd(hspi, FLUSH_RX);
 8001320:	21e2      	movs	r1, #226	@ 0xe2
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ff82 	bl	800122c <nRF_SendCmd>

}
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <RX_Communication>:
	}
	return STATUS_TX_NONDEFINE;
}

uint8_t RX_Communication(SPI_HandleTypeDef *hspi,uint8_t *rx_data)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
	Set_CE_High();
 800133a:	f7ff ff2f 	bl	800119c <Set_CE_High>
//	WaitForIRQ();
	uint8_t status=nRF_GetStatus(hspi);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ff8b 	bl	800125a <nRF_GetStatus>
 8001344:	4603      	mov	r3, r0
 8001346:	73fb      	strb	r3, [r7, #15]
	if((status&(1<<RX_DR))!=0)
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00b      	beq.n	800136a <RX_Communication+0x3a>
	{
		nRF_WriteOneRegister(hspi, STATUS,(1<<6));
 8001352:	2240      	movs	r2, #64	@ 0x40
 8001354:	2107      	movs	r1, #7
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ff2c 	bl	80011b4 <nRF_WriteOneRegister>
		nRF_RX_Payload(hspi, rx_data, 8);
 800135c:	2208      	movs	r2, #8
 800135e:	6839      	ldr	r1, [r7, #0]
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff9a 	bl	800129a <nRF_RX_Payload>
		return STATUS_RX_OK;
 8001366:	2301      	movs	r3, #1
 8001368:	e004      	b.n	8001374 <RX_Communication+0x44>
	}
	nRF_SendCmd(hspi, FLUSH_RX);
 800136a:	21e2      	movs	r1, #226	@ 0xe2
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff5d 	bl	800122c <nRF_SendCmd>
	return STATUS_RX_ERROR;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <CONFIG_REG_Write>:

void CONFIG_REG_Write(SPI_HandleTypeDef *hspi,uint8_t data)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	70fb      	strb	r3, [r7, #3]
	uint8_t read_reg;
	do
	{
		nRF_WriteOneRegister(hspi, CONFIG, data);
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	461a      	mov	r2, r3
 800138c:	2100      	movs	r1, #0
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ff10 	bl	80011b4 <nRF_WriteOneRegister>
		nRF_ReadOneRegister(hspi, CONFIG, &read_reg);
 8001394:	f107 030f 	add.w	r3, r7, #15
 8001398:	461a      	mov	r2, r3
 800139a:	2100      	movs	r1, #0
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ff27 	bl	80011f0 <nRF_ReadOneRegister>
	}while(read_reg!=data);
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	78fa      	ldrb	r2, [r7, #3]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d1ee      	bne.n	8001388 <CONFIG_REG_Write+0xc>
}
 80013aa:	bf00      	nop
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <HAL_MspInit+0x54>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c2:	4a11      	ldr	r2, [pc, #68]	@ (8001408 <HAL_MspInit+0x54>)
 80013c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <HAL_MspInit+0x54>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <HAL_MspInit+0x54>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <HAL_MspInit+0x54>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <HAL_MspInit+0x54>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	210f      	movs	r1, #15
 80013f6:	f06f 0001 	mvn.w	r0, #1
 80013fa:	f000 facb 	bl	8001994 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800

0800140c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	@ 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a19      	ldr	r2, [pc, #100]	@ (8001490 <HAL_SPI_MspInit+0x84>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d12b      	bne.n	8001486 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <HAL_SPI_MspInit+0x88>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001436:	4a17      	ldr	r2, [pc, #92]	@ (8001494 <HAL_SPI_MspInit+0x88>)
 8001438:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800143c:	6453      	str	r3, [r2, #68]	@ 0x44
 800143e:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <HAL_SPI_MspInit+0x88>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001442:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <HAL_SPI_MspInit+0x88>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	4a10      	ldr	r2, [pc, #64]	@ (8001494 <HAL_SPI_MspInit+0x88>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	@ 0x30
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <HAL_SPI_MspInit+0x88>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001466:	23e0      	movs	r3, #224	@ 0xe0
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001476:	2305      	movs	r3, #5
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	@ (8001498 <HAL_SPI_MspInit+0x8c>)
 8001482:	f000 fab1 	bl	80019e8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001486:	bf00      	nop
 8001488:	3728      	adds	r7, #40	@ 0x28
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40013000 	.word	0x40013000
 8001494:	40023800 	.word	0x40023800
 8001498:	40020000 	.word	0x40020000

0800149c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014ac:	d10d      	bne.n	80014ca <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	4a08      	ldr	r2, [pc, #32]	@ (80014d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800

080014dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001524 <HAL_TIM_Base_MspInit+0x48>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d115      	bne.n	800151a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <HAL_TIM_Base_MspInit+0x4c>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001528 <HAL_TIM_Base_MspInit+0x4c>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <HAL_TIM_Base_MspInit+0x4c>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2105      	movs	r1, #5
 800150e:	201d      	movs	r0, #29
 8001510:	f000 fa40 	bl	8001994 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001514:	201d      	movs	r0, #29
 8001516:	f000 fa59 	bl	80019cc <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40000400 	.word	0x40000400
 8001528:	40023800 	.word	0x40023800

0800152c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800154c:	d11d      	bne.n	800158a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <HAL_TIM_MspPostInit+0x68>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4a0f      	ldr	r2, [pc, #60]	@ (8001594 <HAL_TIM_MspPostInit+0x68>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	4b0d      	ldr	r3, [pc, #52]	@ (8001594 <HAL_TIM_MspPostInit+0x68>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800156a:	230f      	movs	r3, #15
 800156c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800157a:	2301      	movs	r3, #1
 800157c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	4619      	mov	r1, r3
 8001584:	4804      	ldr	r0, [pc, #16]	@ (8001598 <HAL_TIM_MspPostInit+0x6c>)
 8001586:	f000 fa2f 	bl	80019e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800158a:	bf00      	nop
 800158c:	3720      	adds	r7, #32
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	40020000 	.word	0x40020000

0800159c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08c      	sub	sp, #48	@ 0x30
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	4b2e      	ldr	r3, [pc, #184]	@ (800166c <HAL_InitTick+0xd0>)
 80015b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b4:	4a2d      	ldr	r2, [pc, #180]	@ (800166c <HAL_InitTick+0xd0>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80015bc:	4b2b      	ldr	r3, [pc, #172]	@ (800166c <HAL_InitTick+0xd0>)
 80015be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015c8:	f107 020c 	add.w	r2, r7, #12
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	4611      	mov	r1, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f001 f804 	bl	80025e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80015d8:	f000 ffee 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
 80015dc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015e0:	4a23      	ldr	r2, [pc, #140]	@ (8001670 <HAL_InitTick+0xd4>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	0c9b      	lsrs	r3, r3, #18
 80015e8:	3b01      	subs	r3, #1
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80015ec:	4b21      	ldr	r3, [pc, #132]	@ (8001674 <HAL_InitTick+0xd8>)
 80015ee:	4a22      	ldr	r2, [pc, #136]	@ (8001678 <HAL_InitTick+0xdc>)
 80015f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80015f2:	4b20      	ldr	r3, [pc, #128]	@ (8001674 <HAL_InitTick+0xd8>)
 80015f4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015f8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80015fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001674 <HAL_InitTick+0xd8>)
 80015fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001600:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <HAL_InitTick+0xd8>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001606:	4b1b      	ldr	r3, [pc, #108]	@ (8001674 <HAL_InitTick+0xd8>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160c:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <HAL_InitTick+0xd8>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001612:	4818      	ldr	r0, [pc, #96]	@ (8001674 <HAL_InitTick+0xd8>)
 8001614:	f001 fde8 	bl	80031e8 <HAL_TIM_Base_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800161e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001622:	2b00      	cmp	r3, #0
 8001624:	d11b      	bne.n	800165e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001626:	4813      	ldr	r0, [pc, #76]	@ (8001674 <HAL_InitTick+0xd8>)
 8001628:	f001 fe2e 	bl	8003288 <HAL_TIM_Base_Start_IT>
 800162c:	4603      	mov	r3, r0
 800162e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001632:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001636:	2b00      	cmp	r3, #0
 8001638:	d111      	bne.n	800165e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800163a:	2019      	movs	r0, #25
 800163c:	f000 f9c6 	bl	80019cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b0f      	cmp	r3, #15
 8001644:	d808      	bhi.n	8001658 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001646:	2200      	movs	r2, #0
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	2019      	movs	r0, #25
 800164c:	f000 f9a2 	bl	8001994 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001650:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <HAL_InitTick+0xe0>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e002      	b.n	800165e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800165e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001662:	4618      	mov	r0, r3
 8001664:	3730      	adds	r7, #48	@ 0x30
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	431bde83 	.word	0x431bde83
 8001674:	200006e0 	.word	0x200006e0
 8001678:	40010000 	.word	0x40010000
 800167c:	20000004 	.word	0x20000004

08001680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <NMI_Handler+0x4>

08001688 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <MemManage_Handler+0x4>

08001698 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016bc:	4802      	ldr	r0, [pc, #8]	@ (80016c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016be:	f001 ff45 	bl	800354c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200006e0 	.word	0x200006e0

080016cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016d0:	4802      	ldr	r0, [pc, #8]	@ (80016dc <TIM3_IRQHandler+0x10>)
 80016d2:	f001 ff3b 	bl	800354c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200003bc 	.word	0x200003bc

080016e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <SystemInit+0x20>)
 80016e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ea:	4a05      	ldr	r2, [pc, #20]	@ (8001700 <SystemInit+0x20>)
 80016ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001704:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800173c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001708:	f7ff ffea 	bl	80016e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800170c:	480c      	ldr	r0, [pc, #48]	@ (8001740 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800170e:	490d      	ldr	r1, [pc, #52]	@ (8001744 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001710:	4a0d      	ldr	r2, [pc, #52]	@ (8001748 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001714:	e002      	b.n	800171c <LoopCopyDataInit>

08001716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171a:	3304      	adds	r3, #4

0800171c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800171c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001720:	d3f9      	bcc.n	8001716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001722:	4a0a      	ldr	r2, [pc, #40]	@ (800174c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001724:	4c0a      	ldr	r4, [pc, #40]	@ (8001750 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001728:	e001      	b.n	800172e <LoopFillZerobss>

0800172a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800172c:	3204      	adds	r2, #4

0800172e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001730:	d3fb      	bcc.n	800172a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001732:	f003 ffed 	bl	8005710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001736:	f7ff f919 	bl	800096c <main>
  bx  lr    
 800173a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800173c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001744:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001748:	08005880 	.word	0x08005880
  ldr r2, =_sbss
 800174c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001750:	200045c0 	.word	0x200045c0

08001754 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001754:	e7fe      	b.n	8001754 <ADC_IRQHandler>
	...

08001758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800175c:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0d      	ldr	r2, [pc, #52]	@ (8001798 <HAL_Init+0x40>)
 8001762:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001766:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001768:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <HAL_Init+0x40>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <HAL_Init+0x40>)
 800176e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001772:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001774:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <HAL_Init+0x40>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a07      	ldr	r2, [pc, #28]	@ (8001798 <HAL_Init+0x40>)
 800177a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800177e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001780:	2003      	movs	r0, #3
 8001782:	f000 f8fc 	bl	800197e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001786:	200f      	movs	r0, #15
 8001788:	f7ff ff08 	bl	800159c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800178c:	f7ff fe12 	bl	80013b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023c00 	.word	0x40023c00

0800179c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a0:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HAL_IncTick+0x20>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <HAL_IncTick+0x24>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	4a04      	ldr	r2, [pc, #16]	@ (80017c0 <HAL_IncTick+0x24>)
 80017ae:	6013      	str	r3, [r2, #0]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000008 	.word	0x20000008
 80017c0:	20000728 	.word	0x20000728

080017c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return uwTick;
 80017c8:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <HAL_GetTick+0x14>)
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000728 	.word	0x20000728

080017dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e4:	f7ff ffee 	bl	80017c4 <HAL_GetTick>
 80017e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f4:	d005      	beq.n	8001802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <HAL_Delay+0x44>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001802:	bf00      	nop
 8001804:	f7ff ffde 	bl	80017c4 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	429a      	cmp	r2, r3
 8001812:	d8f7      	bhi.n	8001804 <HAL_Delay+0x28>
  {
  }
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000008 	.word	0x20000008

08001824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001834:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001840:	4013      	ands	r3, r2
 8001842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800184c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001856:	4a04      	ldr	r2, [pc, #16]	@ (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	60d3      	str	r3, [r2, #12]
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001870:	4b04      	ldr	r3, [pc, #16]	@ (8001884 <__NVIC_GetPriorityGrouping+0x18>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	f003 0307 	and.w	r3, r3, #7
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	2b00      	cmp	r3, #0
 8001898:	db0b      	blt.n	80018b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	f003 021f 	and.w	r2, r3, #31
 80018a0:	4907      	ldr	r1, [pc, #28]	@ (80018c0 <__NVIC_EnableIRQ+0x38>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	2001      	movs	r0, #1
 80018aa:	fa00 f202 	lsl.w	r2, r0, r2
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000e100 	.word	0xe000e100

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db0a      	blt.n	80018ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	490c      	ldr	r1, [pc, #48]	@ (8001910 <__NVIC_SetPriority+0x4c>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	440b      	add	r3, r1
 80018e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ec:	e00a      	b.n	8001904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4908      	ldr	r1, [pc, #32]	@ (8001914 <__NVIC_SetPriority+0x50>)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	3b04      	subs	r3, #4
 80018fc:	0112      	lsls	r2, r2, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	440b      	add	r3, r1
 8001902:	761a      	strb	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	@ 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f1c3 0307 	rsb	r3, r3, #7
 8001932:	2b04      	cmp	r3, #4
 8001934:	bf28      	it	cs
 8001936:	2304      	movcs	r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	2b06      	cmp	r3, #6
 8001940:	d902      	bls.n	8001948 <NVIC_EncodePriority+0x30>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3b03      	subs	r3, #3
 8001946:	e000      	b.n	800194a <NVIC_EncodePriority+0x32>
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43d9      	mvns	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	4313      	orrs	r3, r2
         );
}
 8001972:	4618      	mov	r0, r3
 8001974:	3724      	adds	r7, #36	@ 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ff4c 	bl	8001824 <__NVIC_SetPriorityGrouping>
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a6:	f7ff ff61 	bl	800186c <__NVIC_GetPriorityGrouping>
 80019aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	68b9      	ldr	r1, [r7, #8]
 80019b0:	6978      	ldr	r0, [r7, #20]
 80019b2:	f7ff ffb1 	bl	8001918 <NVIC_EncodePriority>
 80019b6:	4602      	mov	r2, r0
 80019b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019bc:	4611      	mov	r1, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ff80 	bl	80018c4 <__NVIC_SetPriority>
}
 80019c4:	bf00      	nop
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ff54 	bl	8001888 <__NVIC_EnableIRQ>
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	@ 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	e159      	b.n	8001cb8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a04:	2201      	movs	r2, #1
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	f040 8148 	bne.w	8001cb2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d005      	beq.n	8001a3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d130      	bne.n	8001a9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	2203      	movs	r2, #3
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a70:	2201      	movs	r2, #1
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	f003 0201 	and.w	r2, r3, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d017      	beq.n	8001ad8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d123      	bne.n	8001b2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	08da      	lsrs	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3208      	adds	r2, #8
 8001aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	220f      	movs	r2, #15
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	08da      	lsrs	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3208      	adds	r2, #8
 8001b26:	69b9      	ldr	r1, [r7, #24]
 8001b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0203 	and.w	r2, r3, #3
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 80a2 	beq.w	8001cb2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b57      	ldr	r3, [pc, #348]	@ (8001cd0 <HAL_GPIO_Init+0x2e8>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b76:	4a56      	ldr	r2, [pc, #344]	@ (8001cd0 <HAL_GPIO_Init+0x2e8>)
 8001b78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b7e:	4b54      	ldr	r3, [pc, #336]	@ (8001cd0 <HAL_GPIO_Init+0x2e8>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b8a:	4a52      	ldr	r2, [pc, #328]	@ (8001cd4 <HAL_GPIO_Init+0x2ec>)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	3302      	adds	r3, #2
 8001b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a49      	ldr	r2, [pc, #292]	@ (8001cd8 <HAL_GPIO_Init+0x2f0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d019      	beq.n	8001bea <HAL_GPIO_Init+0x202>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a48      	ldr	r2, [pc, #288]	@ (8001cdc <HAL_GPIO_Init+0x2f4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0x1fe>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a47      	ldr	r2, [pc, #284]	@ (8001ce0 <HAL_GPIO_Init+0x2f8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00d      	beq.n	8001be2 <HAL_GPIO_Init+0x1fa>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a46      	ldr	r2, [pc, #280]	@ (8001ce4 <HAL_GPIO_Init+0x2fc>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d007      	beq.n	8001bde <HAL_GPIO_Init+0x1f6>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a45      	ldr	r2, [pc, #276]	@ (8001ce8 <HAL_GPIO_Init+0x300>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d101      	bne.n	8001bda <HAL_GPIO_Init+0x1f2>
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	e008      	b.n	8001bec <HAL_GPIO_Init+0x204>
 8001bda:	2307      	movs	r3, #7
 8001bdc:	e006      	b.n	8001bec <HAL_GPIO_Init+0x204>
 8001bde:	2303      	movs	r3, #3
 8001be0:	e004      	b.n	8001bec <HAL_GPIO_Init+0x204>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e002      	b.n	8001bec <HAL_GPIO_Init+0x204>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <HAL_GPIO_Init+0x204>
 8001bea:	2300      	movs	r3, #0
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	f002 0203 	and.w	r2, r2, #3
 8001bf2:	0092      	lsls	r2, r2, #2
 8001bf4:	4093      	lsls	r3, r2
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bfc:	4935      	ldr	r1, [pc, #212]	@ (8001cd4 <HAL_GPIO_Init+0x2ec>)
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	3302      	adds	r3, #2
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c0a:	4b38      	ldr	r3, [pc, #224]	@ (8001cec <HAL_GPIO_Init+0x304>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c2e:	4a2f      	ldr	r2, [pc, #188]	@ (8001cec <HAL_GPIO_Init+0x304>)
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c34:	4b2d      	ldr	r3, [pc, #180]	@ (8001cec <HAL_GPIO_Init+0x304>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c58:	4a24      	ldr	r2, [pc, #144]	@ (8001cec <HAL_GPIO_Init+0x304>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c5e:	4b23      	ldr	r3, [pc, #140]	@ (8001cec <HAL_GPIO_Init+0x304>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c82:	4a1a      	ldr	r2, [pc, #104]	@ (8001cec <HAL_GPIO_Init+0x304>)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c88:	4b18      	ldr	r3, [pc, #96]	@ (8001cec <HAL_GPIO_Init+0x304>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cac:	4a0f      	ldr	r2, [pc, #60]	@ (8001cec <HAL_GPIO_Init+0x304>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	61fb      	str	r3, [r7, #28]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	2b0f      	cmp	r3, #15
 8001cbc:	f67f aea2 	bls.w	8001a04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3724      	adds	r7, #36	@ 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40013800 	.word	0x40013800
 8001cd8:	40020000 	.word	0x40020000
 8001cdc:	40020400 	.word	0x40020400
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	40020c00 	.word	0x40020c00
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40013c00 	.word	0x40013c00

08001cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d00:	787b      	ldrb	r3, [r7, #1]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d0c:	e003      	b.n	8001d16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d0e:	887b      	ldrh	r3, [r7, #2]
 8001d10:	041a      	lsls	r2, r3, #16
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	619a      	str	r2, [r3, #24]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b085      	sub	sp, #20
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d34:	887a      	ldrh	r2, [r7, #2]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	041a      	lsls	r2, r3, #16
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	887b      	ldrh	r3, [r7, #2]
 8001d42:	400b      	ands	r3, r1
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	619a      	str	r2, [r3, #24]
}
 8001d4a:	bf00      	nop
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e267      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d075      	beq.n	8001e62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d76:	4b88      	ldr	r3, [pc, #544]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d00c      	beq.n	8001d9c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d82:	4b85      	ldr	r3, [pc, #532]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d112      	bne.n	8001db4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d8e:	4b82      	ldr	r3, [pc, #520]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d9a:	d10b      	bne.n	8001db4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d05b      	beq.n	8001e60 <HAL_RCC_OscConfig+0x108>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d157      	bne.n	8001e60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e242      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dbc:	d106      	bne.n	8001dcc <HAL_RCC_OscConfig+0x74>
 8001dbe:	4b76      	ldr	r3, [pc, #472]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a75      	ldr	r2, [pc, #468]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e01d      	b.n	8001e08 <HAL_RCC_OscConfig+0xb0>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x98>
 8001dd6:	4b70      	ldr	r3, [pc, #448]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a6f      	ldr	r2, [pc, #444]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b6d      	ldr	r3, [pc, #436]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a6c      	ldr	r2, [pc, #432]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e00b      	b.n	8001e08 <HAL_RCC_OscConfig+0xb0>
 8001df0:	4b69      	ldr	r3, [pc, #420]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a68      	ldr	r2, [pc, #416]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001df6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	4b66      	ldr	r3, [pc, #408]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a65      	ldr	r2, [pc, #404]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fcd8 	bl	80017c4 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff fcd4 	bl	80017c4 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	@ 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e207      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	4b5b      	ldr	r3, [pc, #364]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0xc0>
 8001e36:	e014      	b.n	8001e62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fcc4 	bl	80017c4 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff fcc0 	bl	80017c4 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	@ 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e1f3      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e52:	4b51      	ldr	r3, [pc, #324]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0xe8>
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d063      	beq.n	8001f36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e6e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00b      	beq.n	8001e92 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e7a:	4b47      	ldr	r3, [pc, #284]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d11c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e86:	4b44      	ldr	r3, [pc, #272]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d116      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e92:	4b41      	ldr	r3, [pc, #260]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_RCC_OscConfig+0x152>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e1c7      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4937      	ldr	r1, [pc, #220]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	e03a      	b.n	8001f36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d020      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec8:	4b34      	ldr	r3, [pc, #208]	@ (8001f9c <HAL_RCC_OscConfig+0x244>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ece:	f7ff fc79 	bl	80017c4 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed6:	f7ff fc75 	bl	80017c4 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e1a8      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	4b28      	ldr	r3, [pc, #160]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4925      	ldr	r1, [pc, #148]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]
 8001f08:	e015      	b.n	8001f36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0a:	4b24      	ldr	r3, [pc, #144]	@ (8001f9c <HAL_RCC_OscConfig+0x244>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7ff fc58 	bl	80017c4 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f18:	f7ff fc54 	bl	80017c4 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e187      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d036      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d016      	beq.n	8001f78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4a:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <HAL_RCC_OscConfig+0x248>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7ff fc38 	bl	80017c4 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f58:	f7ff fc34 	bl	80017c4 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e167      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x200>
 8001f76:	e01b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f78:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <HAL_RCC_OscConfig+0x248>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff fc21 	bl	80017c4 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f84:	e00e      	b.n	8001fa4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f86:	f7ff fc1d 	bl	80017c4 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d907      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e150      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	42470000 	.word	0x42470000
 8001fa0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa4:	4b88      	ldr	r3, [pc, #544]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ea      	bne.n	8001f86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 8097 	beq.w	80020ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc2:	4b81      	ldr	r3, [pc, #516]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10f      	bne.n	8001fee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	4b7d      	ldr	r3, [pc, #500]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	4a7c      	ldr	r2, [pc, #496]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fde:	4b7a      	ldr	r3, [pc, #488]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fea:	2301      	movs	r3, #1
 8001fec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fee:	4b77      	ldr	r3, [pc, #476]	@ (80021cc <HAL_RCC_OscConfig+0x474>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d118      	bne.n	800202c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ffa:	4b74      	ldr	r3, [pc, #464]	@ (80021cc <HAL_RCC_OscConfig+0x474>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a73      	ldr	r2, [pc, #460]	@ (80021cc <HAL_RCC_OscConfig+0x474>)
 8002000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002006:	f7ff fbdd 	bl	80017c4 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200e:	f7ff fbd9 	bl	80017c4 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e10c      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	4b6a      	ldr	r3, [pc, #424]	@ (80021cc <HAL_RCC_OscConfig+0x474>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d106      	bne.n	8002042 <HAL_RCC_OscConfig+0x2ea>
 8002034:	4b64      	ldr	r3, [pc, #400]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002038:	4a63      	ldr	r2, [pc, #396]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002040:	e01c      	b.n	800207c <HAL_RCC_OscConfig+0x324>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b05      	cmp	r3, #5
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x30c>
 800204a:	4b5f      	ldr	r3, [pc, #380]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800204e:	4a5e      	ldr	r2, [pc, #376]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	6713      	str	r3, [r2, #112]	@ 0x70
 8002056:	4b5c      	ldr	r3, [pc, #368]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800205a:	4a5b      	ldr	r2, [pc, #364]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6713      	str	r3, [r2, #112]	@ 0x70
 8002062:	e00b      	b.n	800207c <HAL_RCC_OscConfig+0x324>
 8002064:	4b58      	ldr	r3, [pc, #352]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002068:	4a57      	ldr	r2, [pc, #348]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 800206a:	f023 0301 	bic.w	r3, r3, #1
 800206e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002070:	4b55      	ldr	r3, [pc, #340]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002074:	4a54      	ldr	r2, [pc, #336]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002076:	f023 0304 	bic.w	r3, r3, #4
 800207a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d015      	beq.n	80020b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002084:	f7ff fb9e 	bl	80017c4 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208a:	e00a      	b.n	80020a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208c:	f7ff fb9a 	bl	80017c4 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e0cb      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a2:	4b49      	ldr	r3, [pc, #292]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0ee      	beq.n	800208c <HAL_RCC_OscConfig+0x334>
 80020ae:	e014      	b.n	80020da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b0:	f7ff fb88 	bl	80017c4 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7ff fb84 	bl	80017c4 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e0b5      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ce:	4b3e      	ldr	r3, [pc, #248]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1ee      	bne.n	80020b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020da:	7dfb      	ldrb	r3, [r7, #23]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d105      	bne.n	80020ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e0:	4b39      	ldr	r3, [pc, #228]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e4:	4a38      	ldr	r2, [pc, #224]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80a1 	beq.w	8002238 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020f6:	4b34      	ldr	r3, [pc, #208]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d05c      	beq.n	80021bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d141      	bne.n	800218e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210a:	4b31      	ldr	r3, [pc, #196]	@ (80021d0 <HAL_RCC_OscConfig+0x478>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7ff fb58 	bl	80017c4 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7ff fb54 	bl	80017c4 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e087      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212a:	4b27      	ldr	r3, [pc, #156]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69da      	ldr	r2, [r3, #28]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002144:	019b      	lsls	r3, r3, #6
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214c:	085b      	lsrs	r3, r3, #1
 800214e:	3b01      	subs	r3, #1
 8002150:	041b      	lsls	r3, r3, #16
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002158:	061b      	lsls	r3, r3, #24
 800215a:	491b      	ldr	r1, [pc, #108]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002160:	4b1b      	ldr	r3, [pc, #108]	@ (80021d0 <HAL_RCC_OscConfig+0x478>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff fb2d 	bl	80017c4 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216e:	f7ff fb29 	bl	80017c4 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e05c      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002180:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x416>
 800218c:	e054      	b.n	8002238 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218e:	4b10      	ldr	r3, [pc, #64]	@ (80021d0 <HAL_RCC_OscConfig+0x478>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff fb16 	bl	80017c4 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7ff fb12 	bl	80017c4 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e045      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ae:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x444>
 80021ba:	e03d      	b.n	8002238 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d107      	bne.n	80021d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e038      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40007000 	.word	0x40007000
 80021d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002244 <HAL_RCC_OscConfig+0x4ec>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d028      	beq.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d121      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d11a      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002204:	4013      	ands	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800220a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800220c:	4293      	cmp	r3, r2
 800220e:	d111      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221a:	085b      	lsrs	r3, r3, #1
 800221c:	3b01      	subs	r3, #1
 800221e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d107      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800

08002248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0cc      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800225c:	4b68      	ldr	r3, [pc, #416]	@ (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d90c      	bls.n	8002284 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b65      	ldr	r3, [pc, #404]	@ (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b63      	ldr	r3, [pc, #396]	@ (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0b8      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d020      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800229c:	4b59      	ldr	r3, [pc, #356]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4a58      	ldr	r2, [pc, #352]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022b4:	4b53      	ldr	r3, [pc, #332]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4a52      	ldr	r2, [pc, #328]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c0:	4b50      	ldr	r3, [pc, #320]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	494d      	ldr	r1, [pc, #308]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d044      	beq.n	8002368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	4b47      	ldr	r3, [pc, #284]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d119      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e07f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d003      	beq.n	8002306 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002302:	2b03      	cmp	r3, #3
 8002304:	d107      	bne.n	8002316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002306:	4b3f      	ldr	r3, [pc, #252]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d109      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e06f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002316:	4b3b      	ldr	r3, [pc, #236]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e067      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002326:	4b37      	ldr	r3, [pc, #220]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f023 0203 	bic.w	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	4934      	ldr	r1, [pc, #208]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	4313      	orrs	r3, r2
 8002336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002338:	f7ff fa44 	bl	80017c4 <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	e00a      	b.n	8002356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002340:	f7ff fa40 	bl	80017c4 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e04f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002356:	4b2b      	ldr	r3, [pc, #172]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 020c 	and.w	r2, r3, #12
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	429a      	cmp	r2, r3
 8002366:	d1eb      	bne.n	8002340 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002368:	4b25      	ldr	r3, [pc, #148]	@ (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d20c      	bcs.n	8002390 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b22      	ldr	r3, [pc, #136]	@ (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b20      	ldr	r3, [pc, #128]	@ (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e032      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800239c:	4b19      	ldr	r3, [pc, #100]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4916      	ldr	r1, [pc, #88]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ba:	4b12      	ldr	r3, [pc, #72]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	490e      	ldr	r1, [pc, #56]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ce:	f000 f821 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	490a      	ldr	r1, [pc, #40]	@ (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	5ccb      	ldrb	r3, [r1, r3]
 80023e2:	fa22 f303 	lsr.w	r3, r2, r3
 80023e6:	4a09      	ldr	r2, [pc, #36]	@ (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80023ea:	4b09      	ldr	r3, [pc, #36]	@ (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff f8d4 	bl	800159c <HAL_InitTick>

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40023c00 	.word	0x40023c00
 8002404:	40023800 	.word	0x40023800
 8002408:	08005858 	.word	0x08005858
 800240c:	20000000 	.word	0x20000000
 8002410:	20000004 	.word	0x20000004

08002414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002418:	b090      	sub	sp, #64	@ 0x40
 800241a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800242c:	4b59      	ldr	r3, [pc, #356]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b08      	cmp	r3, #8
 8002436:	d00d      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x40>
 8002438:	2b08      	cmp	r3, #8
 800243a:	f200 80a1 	bhi.w	8002580 <HAL_RCC_GetSysClockFreq+0x16c>
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x34>
 8002442:	2b04      	cmp	r3, #4
 8002444:	d003      	beq.n	800244e <HAL_RCC_GetSysClockFreq+0x3a>
 8002446:	e09b      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002448:	4b53      	ldr	r3, [pc, #332]	@ (8002598 <HAL_RCC_GetSysClockFreq+0x184>)
 800244a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800244c:	e09b      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800244e:	4b53      	ldr	r3, [pc, #332]	@ (800259c <HAL_RCC_GetSysClockFreq+0x188>)
 8002450:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002452:	e098      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002454:	4b4f      	ldr	r3, [pc, #316]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800245c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800245e:	4b4d      	ldr	r3, [pc, #308]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d028      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246a:	4b4a      	ldr	r3, [pc, #296]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	099b      	lsrs	r3, r3, #6
 8002470:	2200      	movs	r2, #0
 8002472:	623b      	str	r3, [r7, #32]
 8002474:	627a      	str	r2, [r7, #36]	@ 0x24
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800247c:	2100      	movs	r1, #0
 800247e:	4b47      	ldr	r3, [pc, #284]	@ (800259c <HAL_RCC_GetSysClockFreq+0x188>)
 8002480:	fb03 f201 	mul.w	r2, r3, r1
 8002484:	2300      	movs	r3, #0
 8002486:	fb00 f303 	mul.w	r3, r0, r3
 800248a:	4413      	add	r3, r2
 800248c:	4a43      	ldr	r2, [pc, #268]	@ (800259c <HAL_RCC_GetSysClockFreq+0x188>)
 800248e:	fba0 1202 	umull	r1, r2, r0, r2
 8002492:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002494:	460a      	mov	r2, r1
 8002496:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002498:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800249a:	4413      	add	r3, r2
 800249c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800249e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024a0:	2200      	movs	r2, #0
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	61fa      	str	r2, [r7, #28]
 80024a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80024ae:	f7fd fe97 	bl	80001e0 <__aeabi_uldivmod>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4613      	mov	r3, r2
 80024b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024ba:	e053      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024bc:	4b35      	ldr	r3, [pc, #212]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	099b      	lsrs	r3, r3, #6
 80024c2:	2200      	movs	r2, #0
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	617a      	str	r2, [r7, #20]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024ce:	f04f 0b00 	mov.w	fp, #0
 80024d2:	4652      	mov	r2, sl
 80024d4:	465b      	mov	r3, fp
 80024d6:	f04f 0000 	mov.w	r0, #0
 80024da:	f04f 0100 	mov.w	r1, #0
 80024de:	0159      	lsls	r1, r3, #5
 80024e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024e4:	0150      	lsls	r0, r2, #5
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	ebb2 080a 	subs.w	r8, r2, sl
 80024ee:	eb63 090b 	sbc.w	r9, r3, fp
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002502:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002506:	ebb2 0408 	subs.w	r4, r2, r8
 800250a:	eb63 0509 	sbc.w	r5, r3, r9
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	00eb      	lsls	r3, r5, #3
 8002518:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800251c:	00e2      	lsls	r2, r4, #3
 800251e:	4614      	mov	r4, r2
 8002520:	461d      	mov	r5, r3
 8002522:	eb14 030a 	adds.w	r3, r4, sl
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	eb45 030b 	adc.w	r3, r5, fp
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	e9d7 4500 	ldrd	r4, r5, [r7]
 800253a:	4629      	mov	r1, r5
 800253c:	028b      	lsls	r3, r1, #10
 800253e:	4621      	mov	r1, r4
 8002540:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002544:	4621      	mov	r1, r4
 8002546:	028a      	lsls	r2, r1, #10
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800254e:	2200      	movs	r2, #0
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	60fa      	str	r2, [r7, #12]
 8002554:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002558:	f7fd fe42 	bl	80001e0 <__aeabi_uldivmod>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4613      	mov	r3, r2
 8002562:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002564:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	3301      	adds	r3, #1
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002574:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800257e:	e002      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002580:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <HAL_RCC_GetSysClockFreq+0x184>)
 8002582:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002588:	4618      	mov	r0, r3
 800258a:	3740      	adds	r7, #64	@ 0x40
 800258c:	46bd      	mov	sp, r7
 800258e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	00f42400 	.word	0x00f42400
 800259c:	017d7840 	.word	0x017d7840

080025a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a4:	4b03      	ldr	r3, [pc, #12]	@ (80025b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000000 	.word	0x20000000

080025b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025bc:	f7ff fff0 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b05      	ldr	r3, [pc, #20]	@ (80025d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	0b5b      	lsrs	r3, r3, #13
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	4903      	ldr	r1, [pc, #12]	@ (80025dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ce:	5ccb      	ldrb	r3, [r1, r3]
 80025d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40023800 	.word	0x40023800
 80025dc:	08005868 	.word	0x08005868

080025e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	220f      	movs	r2, #15
 80025ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025f0:	4b12      	ldr	r3, [pc, #72]	@ (800263c <HAL_RCC_GetClockConfig+0x5c>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0203 	and.w	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025fc:	4b0f      	ldr	r3, [pc, #60]	@ (800263c <HAL_RCC_GetClockConfig+0x5c>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002608:	4b0c      	ldr	r3, [pc, #48]	@ (800263c <HAL_RCC_GetClockConfig+0x5c>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002614:	4b09      	ldr	r3, [pc, #36]	@ (800263c <HAL_RCC_GetClockConfig+0x5c>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	08db      	lsrs	r3, r3, #3
 800261a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002622:	4b07      	ldr	r3, [pc, #28]	@ (8002640 <HAL_RCC_GetClockConfig+0x60>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0207 	and.w	r2, r3, #7
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	601a      	str	r2, [r3, #0]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800
 8002640:	40023c00 	.word	0x40023c00

08002644 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e07b      	b.n	800274e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	2b00      	cmp	r3, #0
 800265c:	d108      	bne.n	8002670 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002666:	d009      	beq.n	800267c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	61da      	str	r2, [r3, #28]
 800266e:	e005      	b.n	800267c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fe feb8 	bl	800140c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002700:	ea42 0103 	orr.w	r1, r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002708:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	0c1b      	lsrs	r3, r3, #16
 800271a:	f003 0104 	and.w	r1, r3, #4
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002722:	f003 0210 	and.w	r2, r3, #16
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69da      	ldr	r2, [r3, #28]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800273c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b088      	sub	sp, #32
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	603b      	str	r3, [r7, #0]
 8002762:	4613      	mov	r3, r2
 8002764:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002766:	f7ff f82d 	bl	80017c4 <HAL_GetTick>
 800276a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d001      	beq.n	8002780 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800277c:	2302      	movs	r3, #2
 800277e:	e12a      	b.n	80029d6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <HAL_SPI_Transmit+0x36>
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e122      	b.n	80029d6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_SPI_Transmit+0x48>
 800279a:	2302      	movs	r3, #2
 800279c:	e11b      	b.n	80029d6 <HAL_SPI_Transmit+0x280>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2203      	movs	r2, #3
 80027aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	88fa      	ldrh	r2, [r7, #6]
 80027be:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	88fa      	ldrh	r2, [r7, #6]
 80027c4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027ec:	d10f      	bne.n	800280e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800280c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002818:	2b40      	cmp	r3, #64	@ 0x40
 800281a:	d007      	beq.n	800282c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800282a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002834:	d152      	bne.n	80028dc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <HAL_SPI_Transmit+0xee>
 800283e:	8b7b      	ldrh	r3, [r7, #26]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d145      	bne.n	80028d0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	881a      	ldrh	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002854:	1c9a      	adds	r2, r3, #2
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002868:	e032      	b.n	80028d0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b02      	cmp	r3, #2
 8002876:	d112      	bne.n	800289e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287c:	881a      	ldrh	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002888:	1c9a      	adds	r2, r3, #2
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800289c:	e018      	b.n	80028d0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800289e:	f7fe ff91 	bl	80017c4 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d803      	bhi.n	80028b6 <HAL_SPI_Transmit+0x160>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d102      	bne.n	80028bc <HAL_SPI_Transmit+0x166>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d109      	bne.n	80028d0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e082      	b.n	80029d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1c7      	bne.n	800286a <HAL_SPI_Transmit+0x114>
 80028da:	e053      	b.n	8002984 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <HAL_SPI_Transmit+0x194>
 80028e4:	8b7b      	ldrh	r3, [r7, #26]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d147      	bne.n	800297a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	330c      	adds	r3, #12
 80028f4:	7812      	ldrb	r2, [r2, #0]
 80028f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002910:	e033      	b.n	800297a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b02      	cmp	r3, #2
 800291e:	d113      	bne.n	8002948 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	330c      	adds	r3, #12
 800292a:	7812      	ldrb	r2, [r2, #0]
 800292c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002946:	e018      	b.n	800297a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002948:	f7fe ff3c 	bl	80017c4 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d803      	bhi.n	8002960 <HAL_SPI_Transmit+0x20a>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295e:	d102      	bne.n	8002966 <HAL_SPI_Transmit+0x210>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e02d      	b.n	80029d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800297e:	b29b      	uxth	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1c6      	bne.n	8002912 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	6839      	ldr	r1, [r7, #0]
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 fbd9 	bl	8003140 <SPI_EndRxTxTransaction>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10a      	bne.n	80029b8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80029d4:	2300      	movs	r3, #0
  }
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3720      	adds	r7, #32
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b088      	sub	sp, #32
 80029e2:	af02      	add	r7, sp, #8
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	603b      	str	r3, [r7, #0]
 80029ea:	4613      	mov	r3, r2
 80029ec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d001      	beq.n	80029fe <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80029fa:	2302      	movs	r3, #2
 80029fc:	e104      	b.n	8002c08 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <HAL_SPI_Receive+0x2c>
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e0fc      	b.n	8002c08 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a16:	d112      	bne.n	8002a3e <HAL_SPI_Receive+0x60>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10e      	bne.n	8002a3e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2204      	movs	r2, #4
 8002a24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a28:	88fa      	ldrh	r2, [r7, #6]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 f8eb 	bl	8002c10 <HAL_SPI_TransmitReceive>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	e0e4      	b.n	8002c08 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a3e:	f7fe fec1 	bl	80017c4 <HAL_GetTick>
 8002a42:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_SPI_Receive+0x74>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e0da      	b.n	8002c08 <HAL_SPI_Receive+0x22a>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	88fa      	ldrh	r2, [r7, #6]
 8002a72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	88fa      	ldrh	r2, [r7, #6]
 8002a78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002aa0:	d10f      	bne.n	8002ac2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ab0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ac0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002acc:	2b40      	cmp	r3, #64	@ 0x40
 8002ace:	d007      	beq.n	8002ae0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ade:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d170      	bne.n	8002bca <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ae8:	e035      	b.n	8002b56 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d115      	bne.n	8002b24 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f103 020c 	add.w	r2, r3, #12
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b04:	7812      	ldrb	r2, [r2, #0]
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b22:	e018      	b.n	8002b56 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b24:	f7fe fe4e 	bl	80017c4 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d803      	bhi.n	8002b3c <HAL_SPI_Receive+0x15e>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3a:	d102      	bne.n	8002b42 <HAL_SPI_Receive+0x164>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e058      	b.n	8002c08 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1c4      	bne.n	8002aea <HAL_SPI_Receive+0x10c>
 8002b60:	e038      	b.n	8002bd4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d113      	bne.n	8002b98 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7a:	b292      	uxth	r2, r2
 8002b7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b82:	1c9a      	adds	r2, r3, #2
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b96:	e018      	b.n	8002bca <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b98:	f7fe fe14 	bl	80017c4 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d803      	bhi.n	8002bb0 <HAL_SPI_Receive+0x1d2>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bae:	d102      	bne.n	8002bb6 <HAL_SPI_Receive+0x1d8>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e01e      	b.n	8002c08 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1c6      	bne.n	8002b62 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	6839      	ldr	r1, [r7, #0]
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 fa4b 	bl	8003074 <SPI_EndRxTransaction>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002c06:	2300      	movs	r3, #0
  }
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	@ 0x28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c22:	f7fe fdcf 	bl	80017c4 <HAL_GetTick>
 8002c26:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c2e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c3a:	7ffb      	ldrb	r3, [r7, #31]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d00c      	beq.n	8002c5a <HAL_SPI_TransmitReceive+0x4a>
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c46:	d106      	bne.n	8002c56 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d102      	bne.n	8002c56 <HAL_SPI_TransmitReceive+0x46>
 8002c50:	7ffb      	ldrb	r3, [r7, #31]
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d001      	beq.n	8002c5a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002c56:	2302      	movs	r3, #2
 8002c58:	e17f      	b.n	8002f5a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_SPI_TransmitReceive+0x5c>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d002      	beq.n	8002c6c <HAL_SPI_TransmitReceive+0x5c>
 8002c66:	887b      	ldrh	r3, [r7, #2]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e174      	b.n	8002f5a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_SPI_TransmitReceive+0x6e>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e16d      	b.n	8002f5a <HAL_SPI_TransmitReceive+0x34a>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d003      	beq.n	8002c9a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2205      	movs	r2, #5
 8002c96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	887a      	ldrh	r2, [r7, #2]
 8002caa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	887a      	ldrh	r2, [r7, #2]
 8002cb0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	887a      	ldrh	r2, [r7, #2]
 8002cbc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	887a      	ldrh	r2, [r7, #2]
 8002cc2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cda:	2b40      	cmp	r3, #64	@ 0x40
 8002cdc:	d007      	beq.n	8002cee <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cf6:	d17e      	bne.n	8002df6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <HAL_SPI_TransmitReceive+0xf6>
 8002d00:	8afb      	ldrh	r3, [r7, #22]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d16c      	bne.n	8002de0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0a:	881a      	ldrh	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d16:	1c9a      	adds	r2, r3, #2
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d2a:	e059      	b.n	8002de0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d11b      	bne.n	8002d72 <HAL_SPI_TransmitReceive+0x162>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d016      	beq.n	8002d72 <HAL_SPI_TransmitReceive+0x162>
 8002d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d113      	bne.n	8002d72 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4e:	881a      	ldrh	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	1c9a      	adds	r2, r3, #2
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d119      	bne.n	8002db4 <HAL_SPI_TransmitReceive+0x1a4>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d014      	beq.n	8002db4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d94:	b292      	uxth	r2, r2
 8002d96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d9c:	1c9a      	adds	r2, r3, #2
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002db0:	2301      	movs	r3, #1
 8002db2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002db4:	f7fe fd06 	bl	80017c4 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d80d      	bhi.n	8002de0 <HAL_SPI_TransmitReceive+0x1d0>
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dca:	d009      	beq.n	8002de0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e0bc      	b.n	8002f5a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1a0      	bne.n	8002d2c <HAL_SPI_TransmitReceive+0x11c>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d19b      	bne.n	8002d2c <HAL_SPI_TransmitReceive+0x11c>
 8002df4:	e082      	b.n	8002efc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <HAL_SPI_TransmitReceive+0x1f4>
 8002dfe:	8afb      	ldrh	r3, [r7, #22]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d171      	bne.n	8002ee8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	330c      	adds	r3, #12
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e2a:	e05d      	b.n	8002ee8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d11c      	bne.n	8002e74 <HAL_SPI_TransmitReceive+0x264>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d017      	beq.n	8002e74 <HAL_SPI_TransmitReceive+0x264>
 8002e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d114      	bne.n	8002e74 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	330c      	adds	r3, #12
 8002e54:	7812      	ldrb	r2, [r2, #0]
 8002e56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d119      	bne.n	8002eb6 <HAL_SPI_TransmitReceive+0x2a6>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d014      	beq.n	8002eb6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002eb6:	f7fe fc85 	bl	80017c4 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d803      	bhi.n	8002ece <HAL_SPI_TransmitReceive+0x2be>
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ecc:	d102      	bne.n	8002ed4 <HAL_SPI_TransmitReceive+0x2c4>
 8002ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d109      	bne.n	8002ee8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e038      	b.n	8002f5a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d19c      	bne.n	8002e2c <HAL_SPI_TransmitReceive+0x21c>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d197      	bne.n	8002e2c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002efc:	6a3a      	ldr	r2, [r7, #32]
 8002efe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f91d 	bl	8003140 <SPI_EndRxTxTransaction>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e01d      	b.n	8002f5a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10a      	bne.n	8002f3c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f26:	2300      	movs	r3, #0
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002f58:	2300      	movs	r3, #0
  }
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3728      	adds	r7, #40	@ 0x28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	4613      	mov	r3, r2
 8002f72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f74:	f7fe fc26 	bl	80017c4 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	4413      	add	r3, r2
 8002f82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f84:	f7fe fc1e 	bl	80017c4 <HAL_GetTick>
 8002f88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f8a:	4b39      	ldr	r3, [pc, #228]	@ (8003070 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	015b      	lsls	r3, r3, #5
 8002f90:	0d1b      	lsrs	r3, r3, #20
 8002f92:	69fa      	ldr	r2, [r7, #28]
 8002f94:	fb02 f303 	mul.w	r3, r2, r3
 8002f98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f9a:	e055      	b.n	8003048 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa2:	d051      	beq.n	8003048 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fa4:	f7fe fc0e 	bl	80017c4 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d902      	bls.n	8002fba <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d13d      	bne.n	8003036 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002fc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fd2:	d111      	bne.n	8002ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fdc:	d004      	beq.n	8002fe8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe6:	d107      	bne.n	8002ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ff6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003000:	d10f      	bne.n	8003022 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003020:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e018      	b.n	8003068 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
 8003040:	e002      	b.n	8003048 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	3b01      	subs	r3, #1
 8003046:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	4013      	ands	r3, r2
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	429a      	cmp	r2, r3
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	461a      	mov	r2, r3
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	429a      	cmp	r2, r3
 8003064:	d19a      	bne.n	8002f9c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3720      	adds	r7, #32
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	20000000 	.word	0x20000000

08003074 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003088:	d111      	bne.n	80030ae <SPI_EndRxTransaction+0x3a>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003092:	d004      	beq.n	800309e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800309c:	d107      	bne.n	80030ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030ac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030b6:	d12a      	bne.n	800310e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030c0:	d012      	beq.n	80030e8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2200      	movs	r2, #0
 80030ca:	2180      	movs	r1, #128	@ 0x80
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7ff ff49 	bl	8002f64 <SPI_WaitFlagStateUntilTimeout>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d02d      	beq.n	8003134 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030dc:	f043 0220 	orr.w	r2, r3, #32
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e026      	b.n	8003136 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2200      	movs	r2, #0
 80030f0:	2101      	movs	r1, #1
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f7ff ff36 	bl	8002f64 <SPI_WaitFlagStateUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d01a      	beq.n	8003134 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003102:	f043 0220 	orr.w	r2, r3, #32
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e013      	b.n	8003136 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2200      	movs	r2, #0
 8003116:	2101      	movs	r1, #1
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f7ff ff23 	bl	8002f64 <SPI_WaitFlagStateUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003128:	f043 0220 	orr.w	r2, r3, #32
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e000      	b.n	8003136 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2201      	movs	r2, #1
 8003154:	2102      	movs	r1, #2
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f7ff ff04 	bl	8002f64 <SPI_WaitFlagStateUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003166:	f043 0220 	orr.w	r2, r3, #32
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e032      	b.n	80031d8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003172:	4b1b      	ldr	r3, [pc, #108]	@ (80031e0 <SPI_EndRxTxTransaction+0xa0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1b      	ldr	r2, [pc, #108]	@ (80031e4 <SPI_EndRxTxTransaction+0xa4>)
 8003178:	fba2 2303 	umull	r2, r3, r2, r3
 800317c:	0d5b      	lsrs	r3, r3, #21
 800317e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003182:	fb02 f303 	mul.w	r3, r2, r3
 8003186:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003190:	d112      	bne.n	80031b8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2200      	movs	r2, #0
 800319a:	2180      	movs	r1, #128	@ 0x80
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f7ff fee1 	bl	8002f64 <SPI_WaitFlagStateUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d016      	beq.n	80031d6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ac:	f043 0220 	orr.w	r2, r3, #32
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e00f      	b.n	80031d8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ce:	2b80      	cmp	r3, #128	@ 0x80
 80031d0:	d0f2      	beq.n	80031b8 <SPI_EndRxTxTransaction+0x78>
 80031d2:	e000      	b.n	80031d6 <SPI_EndRxTxTransaction+0x96>
        break;
 80031d4:	bf00      	nop
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20000000 	.word	0x20000000
 80031e4:	165e9f81 	.word	0x165e9f81

080031e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e041      	b.n	800327e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fe f964 	bl	80014dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3304      	adds	r3, #4
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f000 fc32 	bl	8003a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b01      	cmp	r3, #1
 800329a:	d001      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e044      	b.n	800332a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003338 <HAL_TIM_Base_Start_IT+0xb0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d018      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0x6c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ca:	d013      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0x6c>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a1a      	ldr	r2, [pc, #104]	@ (800333c <HAL_TIM_Base_Start_IT+0xb4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00e      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0x6c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a19      	ldr	r2, [pc, #100]	@ (8003340 <HAL_TIM_Base_Start_IT+0xb8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d009      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0x6c>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a17      	ldr	r2, [pc, #92]	@ (8003344 <HAL_TIM_Base_Start_IT+0xbc>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d004      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0x6c>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a16      	ldr	r2, [pc, #88]	@ (8003348 <HAL_TIM_Base_Start_IT+0xc0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d111      	bne.n	8003318 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b06      	cmp	r3, #6
 8003304:	d010      	beq.n	8003328 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0201 	orr.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003316:	e007      	b.n	8003328 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40010000 	.word	0x40010000
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800
 8003344:	40000c00 	.word	0x40000c00
 8003348:	40014000 	.word	0x40014000

0800334c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e041      	b.n	80033e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fe f892 	bl	800149c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3304      	adds	r3, #4
 8003388:	4619      	mov	r1, r3
 800338a:	4610      	mov	r0, r2
 800338c:	f000 fb80 	bl	8003a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d109      	bne.n	8003410 <HAL_TIM_PWM_Start+0x24>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b01      	cmp	r3, #1
 8003406:	bf14      	ite	ne
 8003408:	2301      	movne	r3, #1
 800340a:	2300      	moveq	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	e022      	b.n	8003456 <HAL_TIM_PWM_Start+0x6a>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2b04      	cmp	r3, #4
 8003414:	d109      	bne.n	800342a <HAL_TIM_PWM_Start+0x3e>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b01      	cmp	r3, #1
 8003420:	bf14      	ite	ne
 8003422:	2301      	movne	r3, #1
 8003424:	2300      	moveq	r3, #0
 8003426:	b2db      	uxtb	r3, r3
 8003428:	e015      	b.n	8003456 <HAL_TIM_PWM_Start+0x6a>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b08      	cmp	r3, #8
 800342e:	d109      	bne.n	8003444 <HAL_TIM_PWM_Start+0x58>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	bf14      	ite	ne
 800343c:	2301      	movne	r3, #1
 800343e:	2300      	moveq	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	e008      	b.n	8003456 <HAL_TIM_PWM_Start+0x6a>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	bf14      	ite	ne
 8003450:	2301      	movne	r3, #1
 8003452:	2300      	moveq	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e068      	b.n	8003530 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d104      	bne.n	800346e <HAL_TIM_PWM_Start+0x82>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800346c:	e013      	b.n	8003496 <HAL_TIM_PWM_Start+0xaa>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b04      	cmp	r3, #4
 8003472:	d104      	bne.n	800347e <HAL_TIM_PWM_Start+0x92>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800347c:	e00b      	b.n	8003496 <HAL_TIM_PWM_Start+0xaa>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b08      	cmp	r3, #8
 8003482:	d104      	bne.n	800348e <HAL_TIM_PWM_Start+0xa2>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800348c:	e003      	b.n	8003496 <HAL_TIM_PWM_Start+0xaa>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2202      	movs	r2, #2
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2201      	movs	r2, #1
 800349c:	6839      	ldr	r1, [r7, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fda2 	bl	8003fe8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a23      	ldr	r2, [pc, #140]	@ (8003538 <HAL_TIM_PWM_Start+0x14c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d107      	bne.n	80034be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003538 <HAL_TIM_PWM_Start+0x14c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d018      	beq.n	80034fa <HAL_TIM_PWM_Start+0x10e>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034d0:	d013      	beq.n	80034fa <HAL_TIM_PWM_Start+0x10e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a19      	ldr	r2, [pc, #100]	@ (800353c <HAL_TIM_PWM_Start+0x150>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00e      	beq.n	80034fa <HAL_TIM_PWM_Start+0x10e>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a17      	ldr	r2, [pc, #92]	@ (8003540 <HAL_TIM_PWM_Start+0x154>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d009      	beq.n	80034fa <HAL_TIM_PWM_Start+0x10e>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a16      	ldr	r2, [pc, #88]	@ (8003544 <HAL_TIM_PWM_Start+0x158>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <HAL_TIM_PWM_Start+0x10e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a14      	ldr	r2, [pc, #80]	@ (8003548 <HAL_TIM_PWM_Start+0x15c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d111      	bne.n	800351e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2b06      	cmp	r3, #6
 800350a:	d010      	beq.n	800352e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351c:	e007      	b.n	800352e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40010000 	.word	0x40010000
 800353c:	40000400 	.word	0x40000400
 8003540:	40000800 	.word	0x40000800
 8003544:	40000c00 	.word	0x40000c00
 8003548:	40014000 	.word	0x40014000

0800354c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d020      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01b      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0202 	mvn.w	r2, #2
 8003580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fa5b 	bl	8003a52 <HAL_TIM_IC_CaptureCallback>
 800359c:	e005      	b.n	80035aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fa4d 	bl	8003a3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fa5e 	bl	8003a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d020      	beq.n	80035fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d01b      	beq.n	80035fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0204 	mvn.w	r2, #4
 80035cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fa35 	bl	8003a52 <HAL_TIM_IC_CaptureCallback>
 80035e8:	e005      	b.n	80035f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fa27 	bl	8003a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fa38 	bl	8003a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d020      	beq.n	8003648 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01b      	beq.n	8003648 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0208 	mvn.w	r2, #8
 8003618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2204      	movs	r2, #4
 800361e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fa0f 	bl	8003a52 <HAL_TIM_IC_CaptureCallback>
 8003634:	e005      	b.n	8003642 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fa01 	bl	8003a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 fa12 	bl	8003a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b00      	cmp	r3, #0
 8003650:	d020      	beq.n	8003694 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01b      	beq.n	8003694 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0210 	mvn.w	r2, #16
 8003664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2208      	movs	r2, #8
 800366a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f9e9 	bl	8003a52 <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f9db 	bl	8003a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f9ec 	bl	8003a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00c      	beq.n	80036b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d007      	beq.n	80036b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0201 	mvn.w	r2, #1
 80036b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd fd36 	bl	8001124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00c      	beq.n	80036dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d007      	beq.n	80036dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80036d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fd24 	bl	8004124 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00c      	beq.n	8003700 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d007      	beq.n	8003700 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f9bd 	bl	8003a7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00c      	beq.n	8003724 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d007      	beq.n	8003724 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0220 	mvn.w	r2, #32
 800371c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fcf6 	bl	8004110 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003746:	2302      	movs	r3, #2
 8003748:	e0ae      	b.n	80038a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b0c      	cmp	r3, #12
 8003756:	f200 809f 	bhi.w	8003898 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800375a:	a201      	add	r2, pc, #4	@ (adr r2, 8003760 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003760:	08003795 	.word	0x08003795
 8003764:	08003899 	.word	0x08003899
 8003768:	08003899 	.word	0x08003899
 800376c:	08003899 	.word	0x08003899
 8003770:	080037d5 	.word	0x080037d5
 8003774:	08003899 	.word	0x08003899
 8003778:	08003899 	.word	0x08003899
 800377c:	08003899 	.word	0x08003899
 8003780:	08003817 	.word	0x08003817
 8003784:	08003899 	.word	0x08003899
 8003788:	08003899 	.word	0x08003899
 800378c:	08003899 	.word	0x08003899
 8003790:	08003857 	.word	0x08003857
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	4618      	mov	r0, r3
 800379c:	f000 f9fe 	bl	8003b9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699a      	ldr	r2, [r3, #24]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0208 	orr.w	r2, r2, #8
 80037ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0204 	bic.w	r2, r2, #4
 80037be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6999      	ldr	r1, [r3, #24]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	619a      	str	r2, [r3, #24]
      break;
 80037d2:	e064      	b.n	800389e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68b9      	ldr	r1, [r7, #8]
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 fa44 	bl	8003c68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6999      	ldr	r1, [r3, #24]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	021a      	lsls	r2, r3, #8
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	619a      	str	r2, [r3, #24]
      break;
 8003814:	e043      	b.n	800389e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fa8f 	bl	8003d40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69da      	ldr	r2, [r3, #28]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0208 	orr.w	r2, r2, #8
 8003830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69da      	ldr	r2, [r3, #28]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0204 	bic.w	r2, r2, #4
 8003840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69d9      	ldr	r1, [r3, #28]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	61da      	str	r2, [r3, #28]
      break;
 8003854:	e023      	b.n	800389e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fad9 	bl	8003e14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69da      	ldr	r2, [r3, #28]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69da      	ldr	r2, [r3, #28]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69d9      	ldr	r1, [r3, #28]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	021a      	lsls	r2, r3, #8
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	61da      	str	r2, [r3, #28]
      break;
 8003896:	e002      	b.n	800389e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	75fb      	strb	r3, [r7, #23]
      break;
 800389c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_TIM_ConfigClockSource+0x1c>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e0b4      	b.n	8003a36 <HAL_TIM_ConfigClockSource+0x186>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80038ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003904:	d03e      	beq.n	8003984 <HAL_TIM_ConfigClockSource+0xd4>
 8003906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800390a:	f200 8087 	bhi.w	8003a1c <HAL_TIM_ConfigClockSource+0x16c>
 800390e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003912:	f000 8086 	beq.w	8003a22 <HAL_TIM_ConfigClockSource+0x172>
 8003916:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800391a:	d87f      	bhi.n	8003a1c <HAL_TIM_ConfigClockSource+0x16c>
 800391c:	2b70      	cmp	r3, #112	@ 0x70
 800391e:	d01a      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0xa6>
 8003920:	2b70      	cmp	r3, #112	@ 0x70
 8003922:	d87b      	bhi.n	8003a1c <HAL_TIM_ConfigClockSource+0x16c>
 8003924:	2b60      	cmp	r3, #96	@ 0x60
 8003926:	d050      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x11a>
 8003928:	2b60      	cmp	r3, #96	@ 0x60
 800392a:	d877      	bhi.n	8003a1c <HAL_TIM_ConfigClockSource+0x16c>
 800392c:	2b50      	cmp	r3, #80	@ 0x50
 800392e:	d03c      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0xfa>
 8003930:	2b50      	cmp	r3, #80	@ 0x50
 8003932:	d873      	bhi.n	8003a1c <HAL_TIM_ConfigClockSource+0x16c>
 8003934:	2b40      	cmp	r3, #64	@ 0x40
 8003936:	d058      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x13a>
 8003938:	2b40      	cmp	r3, #64	@ 0x40
 800393a:	d86f      	bhi.n	8003a1c <HAL_TIM_ConfigClockSource+0x16c>
 800393c:	2b30      	cmp	r3, #48	@ 0x30
 800393e:	d064      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0x15a>
 8003940:	2b30      	cmp	r3, #48	@ 0x30
 8003942:	d86b      	bhi.n	8003a1c <HAL_TIM_ConfigClockSource+0x16c>
 8003944:	2b20      	cmp	r3, #32
 8003946:	d060      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0x15a>
 8003948:	2b20      	cmp	r3, #32
 800394a:	d867      	bhi.n	8003a1c <HAL_TIM_ConfigClockSource+0x16c>
 800394c:	2b00      	cmp	r3, #0
 800394e:	d05c      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0x15a>
 8003950:	2b10      	cmp	r3, #16
 8003952:	d05a      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0x15a>
 8003954:	e062      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003966:	f000 fb1f 	bl	8003fa8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003978:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	609a      	str	r2, [r3, #8]
      break;
 8003982:	e04f      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003994:	f000 fb08 	bl	8003fa8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039a6:	609a      	str	r2, [r3, #8]
      break;
 80039a8:	e03c      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b6:	461a      	mov	r2, r3
 80039b8:	f000 fa7c 	bl	8003eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2150      	movs	r1, #80	@ 0x50
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fad5 	bl	8003f72 <TIM_ITRx_SetConfig>
      break;
 80039c8:	e02c      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039d6:	461a      	mov	r2, r3
 80039d8:	f000 fa9b 	bl	8003f12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2160      	movs	r1, #96	@ 0x60
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fac5 	bl	8003f72 <TIM_ITRx_SetConfig>
      break;
 80039e8:	e01c      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f6:	461a      	mov	r2, r3
 80039f8:	f000 fa5c 	bl	8003eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2140      	movs	r1, #64	@ 0x40
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fab5 	bl	8003f72 <TIM_ITRx_SetConfig>
      break;
 8003a08:	e00c      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4619      	mov	r1, r3
 8003a14:	4610      	mov	r0, r2
 8003a16:	f000 faac 	bl	8003f72 <TIM_ITRx_SetConfig>
      break;
 8003a1a:	e003      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a20:	e000      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
	...

08003a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a37      	ldr	r2, [pc, #220]	@ (8003b80 <TIM_Base_SetConfig+0xf0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00f      	beq.n	8003ac8 <TIM_Base_SetConfig+0x38>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aae:	d00b      	beq.n	8003ac8 <TIM_Base_SetConfig+0x38>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a34      	ldr	r2, [pc, #208]	@ (8003b84 <TIM_Base_SetConfig+0xf4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d007      	beq.n	8003ac8 <TIM_Base_SetConfig+0x38>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a33      	ldr	r2, [pc, #204]	@ (8003b88 <TIM_Base_SetConfig+0xf8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d003      	beq.n	8003ac8 <TIM_Base_SetConfig+0x38>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a32      	ldr	r2, [pc, #200]	@ (8003b8c <TIM_Base_SetConfig+0xfc>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d108      	bne.n	8003ada <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a28      	ldr	r2, [pc, #160]	@ (8003b80 <TIM_Base_SetConfig+0xf0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01b      	beq.n	8003b1a <TIM_Base_SetConfig+0x8a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae8:	d017      	beq.n	8003b1a <TIM_Base_SetConfig+0x8a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a25      	ldr	r2, [pc, #148]	@ (8003b84 <TIM_Base_SetConfig+0xf4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <TIM_Base_SetConfig+0x8a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a24      	ldr	r2, [pc, #144]	@ (8003b88 <TIM_Base_SetConfig+0xf8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00f      	beq.n	8003b1a <TIM_Base_SetConfig+0x8a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a23      	ldr	r2, [pc, #140]	@ (8003b8c <TIM_Base_SetConfig+0xfc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00b      	beq.n	8003b1a <TIM_Base_SetConfig+0x8a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a22      	ldr	r2, [pc, #136]	@ (8003b90 <TIM_Base_SetConfig+0x100>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d007      	beq.n	8003b1a <TIM_Base_SetConfig+0x8a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a21      	ldr	r2, [pc, #132]	@ (8003b94 <TIM_Base_SetConfig+0x104>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d003      	beq.n	8003b1a <TIM_Base_SetConfig+0x8a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a20      	ldr	r2, [pc, #128]	@ (8003b98 <TIM_Base_SetConfig+0x108>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d108      	bne.n	8003b2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a0c      	ldr	r2, [pc, #48]	@ (8003b80 <TIM_Base_SetConfig+0xf0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d103      	bne.n	8003b5a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	691a      	ldr	r2, [r3, #16]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f043 0204 	orr.w	r2, r3, #4
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	601a      	str	r2, [r3, #0]
}
 8003b72:	bf00      	nop
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40010000 	.word	0x40010000
 8003b84:	40000400 	.word	0x40000400
 8003b88:	40000800 	.word	0x40000800
 8003b8c:	40000c00 	.word	0x40000c00
 8003b90:	40014000 	.word	0x40014000
 8003b94:	40014400 	.word	0x40014400
 8003b98:	40014800 	.word	0x40014800

08003b9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	f023 0201 	bic.w	r2, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0303 	bic.w	r3, r3, #3
 8003bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f023 0302 	bic.w	r3, r3, #2
 8003be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8003c64 <TIM_OC1_SetConfig+0xc8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d10c      	bne.n	8003c12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f023 0308 	bic.w	r3, r3, #8
 8003bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f023 0304 	bic.w	r3, r3, #4
 8003c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a13      	ldr	r2, [pc, #76]	@ (8003c64 <TIM_OC1_SetConfig+0xc8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d111      	bne.n	8003c3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	621a      	str	r2, [r3, #32]
}
 8003c58:	bf00      	nop
 8003c5a:	371c      	adds	r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	40010000 	.word	0x40010000

08003c68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	f023 0210 	bic.w	r2, r3, #16
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	021b      	lsls	r3, r3, #8
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f023 0320 	bic.w	r3, r3, #32
 8003cb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8003d3c <TIM_OC2_SetConfig+0xd4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d10d      	bne.n	8003ce4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ce2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a15      	ldr	r2, [pc, #84]	@ (8003d3c <TIM_OC2_SetConfig+0xd4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d113      	bne.n	8003d14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40010000 	.word	0x40010000

08003d40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0303 	bic.w	r3, r3, #3
 8003d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	021b      	lsls	r3, r3, #8
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a1d      	ldr	r2, [pc, #116]	@ (8003e10 <TIM_OC3_SetConfig+0xd0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d10d      	bne.n	8003dba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003da4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	021b      	lsls	r3, r3, #8
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a14      	ldr	r2, [pc, #80]	@ (8003e10 <TIM_OC3_SetConfig+0xd0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d113      	bne.n	8003dea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	621a      	str	r2, [r3, #32]
}
 8003e04:	bf00      	nop
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	40010000 	.word	0x40010000

08003e14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	031b      	lsls	r3, r3, #12
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a10      	ldr	r2, [pc, #64]	@ (8003eb0 <TIM_OC4_SetConfig+0x9c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d109      	bne.n	8003e88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	019b      	lsls	r3, r3, #6
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40010000 	.word	0x40010000

08003eb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	f023 0201 	bic.w	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f023 030a 	bic.w	r3, r3, #10
 8003ef0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	621a      	str	r2, [r3, #32]
}
 8003f06:	bf00      	nop
 8003f08:	371c      	adds	r7, #28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b087      	sub	sp, #28
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	f023 0210 	bic.w	r2, r3, #16
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	031b      	lsls	r3, r3, #12
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	621a      	str	r2, [r3, #32]
}
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b085      	sub	sp, #20
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f043 0307 	orr.w	r3, r3, #7
 8003f94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	609a      	str	r2, [r3, #8]
}
 8003f9c:	bf00      	nop
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	021a      	lsls	r2, r3, #8
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	609a      	str	r2, [r3, #8]
}
 8003fdc:	bf00      	nop
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 031f 	and.w	r3, r3, #31
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a1a      	ldr	r2, [r3, #32]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	43db      	mvns	r3, r3
 800400a:	401a      	ands	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a1a      	ldr	r2, [r3, #32]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	fa01 f303 	lsl.w	r3, r1, r3
 8004020:	431a      	orrs	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
	...

08004034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004048:	2302      	movs	r3, #2
 800404a:	e050      	b.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004072:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a1c      	ldr	r2, [pc, #112]	@ (80040fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d018      	beq.n	80040c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004098:	d013      	beq.n	80040c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a18      	ldr	r2, [pc, #96]	@ (8004100 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00e      	beq.n	80040c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a16      	ldr	r2, [pc, #88]	@ (8004104 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d009      	beq.n	80040c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a15      	ldr	r2, [pc, #84]	@ (8004108 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d004      	beq.n	80040c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a13      	ldr	r2, [pc, #76]	@ (800410c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d10c      	bne.n	80040dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40010000 	.word	0x40010000
 8004100:	40000400 	.word	0x40000400
 8004104:	40000800 	.word	0x40000800
 8004108:	40000c00 	.word	0x40000c00
 800410c:	40014000 	.word	0x40014000

08004110 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	4603      	mov	r3, r0
 8004140:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800414a:	2b84      	cmp	r3, #132	@ 0x84
 800414c:	d005      	beq.n	800415a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800414e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4413      	add	r3, r2
 8004156:	3303      	adds	r3, #3
 8004158:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800415a:	68fb      	ldr	r3, [r7, #12]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800416c:	f000 fafc 	bl	8004768 <vTaskStartScheduler>
  
  return osOK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	bd80      	pop	{r7, pc}

08004176 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004176:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004178:	b089      	sub	sp, #36	@ 0x24
 800417a:	af04      	add	r7, sp, #16
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d020      	beq.n	80041ca <osThreadCreate+0x54>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01c      	beq.n	80041ca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685c      	ldr	r4, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691e      	ldr	r6, [r3, #16]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff ffc8 	bl	8004138 <makeFreeRtosPriority>
 80041a8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041b2:	9202      	str	r2, [sp, #8]
 80041b4:	9301      	str	r3, [sp, #4]
 80041b6:	9100      	str	r1, [sp, #0]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	4632      	mov	r2, r6
 80041bc:	4629      	mov	r1, r5
 80041be:	4620      	mov	r0, r4
 80041c0:	f000 f8ed 	bl	800439e <xTaskCreateStatic>
 80041c4:	4603      	mov	r3, r0
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	e01c      	b.n	8004204 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685c      	ldr	r4, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041d6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff ffaa 	bl	8004138 <makeFreeRtosPriority>
 80041e4:	4602      	mov	r2, r0
 80041e6:	f107 030c 	add.w	r3, r7, #12
 80041ea:	9301      	str	r3, [sp, #4]
 80041ec:	9200      	str	r2, [sp, #0]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	4632      	mov	r2, r6
 80041f2:	4629      	mov	r1, r5
 80041f4:	4620      	mov	r0, r4
 80041f6:	f000 f932 	bl	800445e <xTaskCreate>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d001      	beq.n	8004204 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004200:	2300      	movs	r3, #0
 8004202:	e000      	b.n	8004206 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004204:	68fb      	ldr	r3, [r7, #12]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800420e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <osDelay+0x16>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	e000      	b.n	8004226 <osDelay+0x18>
 8004224:	2301      	movs	r3, #1
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fa68 	bl	80046fc <vTaskDelay>
  
  return osOK;
 800422c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f103 0208 	add.w	r2, r3, #8
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f04f 32ff 	mov.w	r2, #4294967295
 800424e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f103 0208 	add.w	r2, r3, #8
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f103 0208 	add.w	r2, r3, #8
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	601a      	str	r2, [r3, #0]
}
 80042cc:	bf00      	nop
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ee:	d103      	bne.n	80042f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	e00c      	b.n	8004312 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3308      	adds	r3, #8
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	e002      	b.n	8004306 <vListInsert+0x2e>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	429a      	cmp	r2, r3
 8004310:	d2f6      	bcs.n	8004300 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	601a      	str	r2, [r3, #0]
}
 800433e:	bf00      	nop
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800434a:	b480      	push	{r7}
 800434c:	b085      	sub	sp, #20
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6892      	ldr	r2, [r2, #8]
 8004360:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6852      	ldr	r2, [r2, #4]
 800436a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	429a      	cmp	r2, r3
 8004374:	d103      	bne.n	800437e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	1e5a      	subs	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b08e      	sub	sp, #56	@ 0x38
 80043a2:	af04      	add	r7, sp, #16
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	607a      	str	r2, [r7, #4]
 80043aa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80043ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10b      	bne.n	80043ca <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop
 80043c8:	e7fd      	b.n	80043c6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80043ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10b      	bne.n	80043e8 <xTaskCreateStatic+0x4a>
	__asm volatile
 80043d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	61fb      	str	r3, [r7, #28]
}
 80043e2:	bf00      	nop
 80043e4:	bf00      	nop
 80043e6:	e7fd      	b.n	80043e4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043e8:	23a0      	movs	r3, #160	@ 0xa0
 80043ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80043f0:	d00b      	beq.n	800440a <xTaskCreateStatic+0x6c>
	__asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	61bb      	str	r3, [r7, #24]
}
 8004404:	bf00      	nop
 8004406:	bf00      	nop
 8004408:	e7fd      	b.n	8004406 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800440a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800440c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800440e:	2b00      	cmp	r3, #0
 8004410:	d01e      	beq.n	8004450 <xTaskCreateStatic+0xb2>
 8004412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004414:	2b00      	cmp	r3, #0
 8004416:	d01b      	beq.n	8004450 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800441a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800441c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004420:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	2202      	movs	r2, #2
 8004426:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800442a:	2300      	movs	r3, #0
 800442c:	9303      	str	r3, [sp, #12]
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004430:	9302      	str	r3, [sp, #8]
 8004432:	f107 0314 	add.w	r3, r7, #20
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	68b9      	ldr	r1, [r7, #8]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f850 	bl	80044e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004448:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800444a:	f000 f8ed 	bl	8004628 <prvAddNewTaskToReadyList>
 800444e:	e001      	b.n	8004454 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004454:	697b      	ldr	r3, [r7, #20]
	}
 8004456:	4618      	mov	r0, r3
 8004458:	3728      	adds	r7, #40	@ 0x28
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800445e:	b580      	push	{r7, lr}
 8004460:	b08c      	sub	sp, #48	@ 0x30
 8004462:	af04      	add	r7, sp, #16
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	603b      	str	r3, [r7, #0]
 800446a:	4613      	mov	r3, r2
 800446c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800446e:	88fb      	ldrh	r3, [r7, #6]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4618      	mov	r0, r3
 8004474:	f000 ff00 	bl	8005278 <pvPortMalloc>
 8004478:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00e      	beq.n	800449e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004480:	20a0      	movs	r0, #160	@ 0xa0
 8004482:	f000 fef9 	bl	8005278 <pvPortMalloc>
 8004486:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	631a      	str	r2, [r3, #48]	@ 0x30
 8004494:	e005      	b.n	80044a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004496:	6978      	ldr	r0, [r7, #20]
 8004498:	f000 ffbc 	bl	8005414 <vPortFree>
 800449c:	e001      	b.n	80044a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d017      	beq.n	80044d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044b0:	88fa      	ldrh	r2, [r7, #6]
 80044b2:	2300      	movs	r3, #0
 80044b4:	9303      	str	r3, [sp, #12]
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	9302      	str	r3, [sp, #8]
 80044ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044bc:	9301      	str	r3, [sp, #4]
 80044be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68b9      	ldr	r1, [r7, #8]
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 f80e 	bl	80044e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044cc:	69f8      	ldr	r0, [r7, #28]
 80044ce:	f000 f8ab 	bl	8004628 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044d2:	2301      	movs	r3, #1
 80044d4:	61bb      	str	r3, [r7, #24]
 80044d6:	e002      	b.n	80044de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044d8:	f04f 33ff 	mov.w	r3, #4294967295
 80044dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044de:	69bb      	ldr	r3, [r7, #24]
	}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3720      	adds	r7, #32
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004500:	3b01      	subs	r3, #1
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	f023 0307 	bic.w	r3, r3, #7
 800450e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00b      	beq.n	8004532 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800451a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	617b      	str	r3, [r7, #20]
}
 800452c:	bf00      	nop
 800452e:	bf00      	nop
 8004530:	e7fd      	b.n	800452e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01f      	beq.n	8004578 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]
 800453c:	e012      	b.n	8004564 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	4413      	add	r3, r2
 8004544:	7819      	ldrb	r1, [r3, #0]
 8004546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	4413      	add	r3, r2
 800454c:	3334      	adds	r3, #52	@ 0x34
 800454e:	460a      	mov	r2, r1
 8004550:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	4413      	add	r3, r2
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d006      	beq.n	800456c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	3301      	adds	r3, #1
 8004562:	61fb      	str	r3, [r7, #28]
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	2b0f      	cmp	r3, #15
 8004568:	d9e9      	bls.n	800453e <prvInitialiseNewTask+0x56>
 800456a:	e000      	b.n	800456e <prvInitialiseNewTask+0x86>
			{
				break;
 800456c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004576:	e003      	b.n	8004580 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004582:	2b06      	cmp	r3, #6
 8004584:	d901      	bls.n	800458a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004586:	2306      	movs	r3, #6
 8004588:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800458a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800458e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004592:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004594:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004598:	2200      	movs	r2, #0
 800459a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800459c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459e:	3304      	adds	r3, #4
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff fe68 	bl	8004276 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80045a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a8:	3318      	adds	r3, #24
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff fe63 	bl	8004276 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80045b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b8:	f1c3 0207 	rsb	r2, r3, #7
 80045bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80045c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045c4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80045c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c8:	2200      	movs	r2, #0
 80045ca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80045d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d8:	334c      	adds	r3, #76	@ 0x4c
 80045da:	224c      	movs	r2, #76	@ 0x4c
 80045dc:	2100      	movs	r1, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	f001 f838 	bl	8005654 <memset>
 80045e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e6:	4a0d      	ldr	r2, [pc, #52]	@ (800461c <prvInitialiseNewTask+0x134>)
 80045e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80045ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ec:	4a0c      	ldr	r2, [pc, #48]	@ (8004620 <prvInitialiseNewTask+0x138>)
 80045ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80045f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f2:	4a0c      	ldr	r2, [pc, #48]	@ (8004624 <prvInitialiseNewTask+0x13c>)
 80045f4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	68f9      	ldr	r1, [r7, #12]
 80045fa:	69b8      	ldr	r0, [r7, #24]
 80045fc:	f000 fc2a 	bl	8004e54 <pxPortInitialiseStack>
 8004600:	4602      	mov	r2, r0
 8004602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004604:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800460c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800460e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004610:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004612:	bf00      	nop
 8004614:	3720      	adds	r7, #32
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20004480 	.word	0x20004480
 8004620:	200044e8 	.word	0x200044e8
 8004624:	20004550 	.word	0x20004550

08004628 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004630:	f000 fd42 	bl	80050b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004634:	4b2a      	ldr	r3, [pc, #168]	@ (80046e0 <prvAddNewTaskToReadyList+0xb8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3301      	adds	r3, #1
 800463a:	4a29      	ldr	r2, [pc, #164]	@ (80046e0 <prvAddNewTaskToReadyList+0xb8>)
 800463c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800463e:	4b29      	ldr	r3, [pc, #164]	@ (80046e4 <prvAddNewTaskToReadyList+0xbc>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d109      	bne.n	800465a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004646:	4a27      	ldr	r2, [pc, #156]	@ (80046e4 <prvAddNewTaskToReadyList+0xbc>)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800464c:	4b24      	ldr	r3, [pc, #144]	@ (80046e0 <prvAddNewTaskToReadyList+0xb8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d110      	bne.n	8004676 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004654:	f000 fad4 	bl	8004c00 <prvInitialiseTaskLists>
 8004658:	e00d      	b.n	8004676 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800465a:	4b23      	ldr	r3, [pc, #140]	@ (80046e8 <prvAddNewTaskToReadyList+0xc0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d109      	bne.n	8004676 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004662:	4b20      	ldr	r3, [pc, #128]	@ (80046e4 <prvAddNewTaskToReadyList+0xbc>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466c:	429a      	cmp	r2, r3
 800466e:	d802      	bhi.n	8004676 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004670:	4a1c      	ldr	r2, [pc, #112]	@ (80046e4 <prvAddNewTaskToReadyList+0xbc>)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004676:	4b1d      	ldr	r3, [pc, #116]	@ (80046ec <prvAddNewTaskToReadyList+0xc4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3301      	adds	r3, #1
 800467c:	4a1b      	ldr	r2, [pc, #108]	@ (80046ec <prvAddNewTaskToReadyList+0xc4>)
 800467e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004684:	2201      	movs	r2, #1
 8004686:	409a      	lsls	r2, r3
 8004688:	4b19      	ldr	r3, [pc, #100]	@ (80046f0 <prvAddNewTaskToReadyList+0xc8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4313      	orrs	r3, r2
 800468e:	4a18      	ldr	r2, [pc, #96]	@ (80046f0 <prvAddNewTaskToReadyList+0xc8>)
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4a15      	ldr	r2, [pc, #84]	@ (80046f4 <prvAddNewTaskToReadyList+0xcc>)
 80046a0:	441a      	add	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3304      	adds	r3, #4
 80046a6:	4619      	mov	r1, r3
 80046a8:	4610      	mov	r0, r2
 80046aa:	f7ff fdf1 	bl	8004290 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80046ae:	f000 fd35 	bl	800511c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80046b2:	4b0d      	ldr	r3, [pc, #52]	@ (80046e8 <prvAddNewTaskToReadyList+0xc0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00e      	beq.n	80046d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046ba:	4b0a      	ldr	r3, [pc, #40]	@ (80046e4 <prvAddNewTaskToReadyList+0xbc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d207      	bcs.n	80046d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046c8:	4b0b      	ldr	r3, [pc, #44]	@ (80046f8 <prvAddNewTaskToReadyList+0xd0>)
 80046ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046d8:	bf00      	nop
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	2000082c 	.word	0x2000082c
 80046e4:	2000072c 	.word	0x2000072c
 80046e8:	20000838 	.word	0x20000838
 80046ec:	20000848 	.word	0x20000848
 80046f0:	20000834 	.word	0x20000834
 80046f4:	20000730 	.word	0x20000730
 80046f8:	e000ed04 	.word	0xe000ed04

080046fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d018      	beq.n	8004740 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800470e:	4b14      	ldr	r3, [pc, #80]	@ (8004760 <vTaskDelay+0x64>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00b      	beq.n	800472e <vTaskDelay+0x32>
	__asm volatile
 8004716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	60bb      	str	r3, [r7, #8]
}
 8004728:	bf00      	nop
 800472a:	bf00      	nop
 800472c:	e7fd      	b.n	800472a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800472e:	f000 f885 	bl	800483c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004732:	2100      	movs	r1, #0
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fb27 	bl	8004d88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800473a:	f000 f88d 	bl	8004858 <xTaskResumeAll>
 800473e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d107      	bne.n	8004756 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004746:	4b07      	ldr	r3, [pc, #28]	@ (8004764 <vTaskDelay+0x68>)
 8004748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004756:	bf00      	nop
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	20000854 	.word	0x20000854
 8004764:	e000ed04 	.word	0xe000ed04

08004768 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	@ 0x28
 800476c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800476e:	2300      	movs	r3, #0
 8004770:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004772:	2300      	movs	r3, #0
 8004774:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004776:	463a      	mov	r2, r7
 8004778:	1d39      	adds	r1, r7, #4
 800477a:	f107 0308 	add.w	r3, r7, #8
 800477e:	4618      	mov	r0, r3
 8004780:	f7fc f8da 	bl	8000938 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004784:	6839      	ldr	r1, [r7, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	9202      	str	r2, [sp, #8]
 800478c:	9301      	str	r3, [sp, #4]
 800478e:	2300      	movs	r3, #0
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	2300      	movs	r3, #0
 8004794:	460a      	mov	r2, r1
 8004796:	4921      	ldr	r1, [pc, #132]	@ (800481c <vTaskStartScheduler+0xb4>)
 8004798:	4821      	ldr	r0, [pc, #132]	@ (8004820 <vTaskStartScheduler+0xb8>)
 800479a:	f7ff fe00 	bl	800439e <xTaskCreateStatic>
 800479e:	4603      	mov	r3, r0
 80047a0:	4a20      	ldr	r2, [pc, #128]	@ (8004824 <vTaskStartScheduler+0xbc>)
 80047a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80047a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004824 <vTaskStartScheduler+0xbc>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80047ac:	2301      	movs	r3, #1
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	e001      	b.n	80047b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d11b      	bne.n	80047f4 <vTaskStartScheduler+0x8c>
	__asm volatile
 80047bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	613b      	str	r3, [r7, #16]
}
 80047ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80047d0:	4b15      	ldr	r3, [pc, #84]	@ (8004828 <vTaskStartScheduler+0xc0>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	334c      	adds	r3, #76	@ 0x4c
 80047d6:	4a15      	ldr	r2, [pc, #84]	@ (800482c <vTaskStartScheduler+0xc4>)
 80047d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047da:	4b15      	ldr	r3, [pc, #84]	@ (8004830 <vTaskStartScheduler+0xc8>)
 80047dc:	f04f 32ff 	mov.w	r2, #4294967295
 80047e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047e2:	4b14      	ldr	r3, [pc, #80]	@ (8004834 <vTaskStartScheduler+0xcc>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047e8:	4b13      	ldr	r3, [pc, #76]	@ (8004838 <vTaskStartScheduler+0xd0>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047ee:	f000 fbbf 	bl	8004f70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047f2:	e00f      	b.n	8004814 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fa:	d10b      	bne.n	8004814 <vTaskStartScheduler+0xac>
	__asm volatile
 80047fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	60fb      	str	r3, [r7, #12]
}
 800480e:	bf00      	nop
 8004810:	bf00      	nop
 8004812:	e7fd      	b.n	8004810 <vTaskStartScheduler+0xa8>
}
 8004814:	bf00      	nop
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	08005850 	.word	0x08005850
 8004820:	08004bd1 	.word	0x08004bd1
 8004824:	20000850 	.word	0x20000850
 8004828:	2000072c 	.word	0x2000072c
 800482c:	20000010 	.word	0x20000010
 8004830:	2000084c 	.word	0x2000084c
 8004834:	20000838 	.word	0x20000838
 8004838:	20000830 	.word	0x20000830

0800483c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004840:	4b04      	ldr	r3, [pc, #16]	@ (8004854 <vTaskSuspendAll+0x18>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3301      	adds	r3, #1
 8004846:	4a03      	ldr	r2, [pc, #12]	@ (8004854 <vTaskSuspendAll+0x18>)
 8004848:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800484a:	bf00      	nop
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	20000854 	.word	0x20000854

08004858 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004862:	2300      	movs	r3, #0
 8004864:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004866:	4b42      	ldr	r3, [pc, #264]	@ (8004970 <xTaskResumeAll+0x118>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10b      	bne.n	8004886 <xTaskResumeAll+0x2e>
	__asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	603b      	str	r3, [r7, #0]
}
 8004880:	bf00      	nop
 8004882:	bf00      	nop
 8004884:	e7fd      	b.n	8004882 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004886:	f000 fc17 	bl	80050b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800488a:	4b39      	ldr	r3, [pc, #228]	@ (8004970 <xTaskResumeAll+0x118>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3b01      	subs	r3, #1
 8004890:	4a37      	ldr	r2, [pc, #220]	@ (8004970 <xTaskResumeAll+0x118>)
 8004892:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004894:	4b36      	ldr	r3, [pc, #216]	@ (8004970 <xTaskResumeAll+0x118>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d161      	bne.n	8004960 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800489c:	4b35      	ldr	r3, [pc, #212]	@ (8004974 <xTaskResumeAll+0x11c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d05d      	beq.n	8004960 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048a4:	e02e      	b.n	8004904 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048a6:	4b34      	ldr	r3, [pc, #208]	@ (8004978 <xTaskResumeAll+0x120>)
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3318      	adds	r3, #24
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff fd49 	bl	800434a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff fd44 	bl	800434a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c6:	2201      	movs	r2, #1
 80048c8:	409a      	lsls	r2, r3
 80048ca:	4b2c      	ldr	r3, [pc, #176]	@ (800497c <xTaskResumeAll+0x124>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	4a2a      	ldr	r2, [pc, #168]	@ (800497c <xTaskResumeAll+0x124>)
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048d8:	4613      	mov	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4a27      	ldr	r2, [pc, #156]	@ (8004980 <xTaskResumeAll+0x128>)
 80048e2:	441a      	add	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3304      	adds	r3, #4
 80048e8:	4619      	mov	r1, r3
 80048ea:	4610      	mov	r0, r2
 80048ec:	f7ff fcd0 	bl	8004290 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f4:	4b23      	ldr	r3, [pc, #140]	@ (8004984 <xTaskResumeAll+0x12c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d302      	bcc.n	8004904 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80048fe:	4b22      	ldr	r3, [pc, #136]	@ (8004988 <xTaskResumeAll+0x130>)
 8004900:	2201      	movs	r2, #1
 8004902:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004904:	4b1c      	ldr	r3, [pc, #112]	@ (8004978 <xTaskResumeAll+0x120>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1cc      	bne.n	80048a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004912:	f000 fa19 	bl	8004d48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004916:	4b1d      	ldr	r3, [pc, #116]	@ (800498c <xTaskResumeAll+0x134>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d010      	beq.n	8004944 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004922:	f000 f837 	bl	8004994 <xTaskIncrementTick>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800492c:	4b16      	ldr	r3, [pc, #88]	@ (8004988 <xTaskResumeAll+0x130>)
 800492e:	2201      	movs	r2, #1
 8004930:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3b01      	subs	r3, #1
 8004936:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f1      	bne.n	8004922 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800493e:	4b13      	ldr	r3, [pc, #76]	@ (800498c <xTaskResumeAll+0x134>)
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004944:	4b10      	ldr	r3, [pc, #64]	@ (8004988 <xTaskResumeAll+0x130>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d009      	beq.n	8004960 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800494c:	2301      	movs	r3, #1
 800494e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004950:	4b0f      	ldr	r3, [pc, #60]	@ (8004990 <xTaskResumeAll+0x138>)
 8004952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004960:	f000 fbdc 	bl	800511c <vPortExitCritical>

	return xAlreadyYielded;
 8004964:	68bb      	ldr	r3, [r7, #8]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20000854 	.word	0x20000854
 8004974:	2000082c 	.word	0x2000082c
 8004978:	200007ec 	.word	0x200007ec
 800497c:	20000834 	.word	0x20000834
 8004980:	20000730 	.word	0x20000730
 8004984:	2000072c 	.word	0x2000072c
 8004988:	20000840 	.word	0x20000840
 800498c:	2000083c 	.word	0x2000083c
 8004990:	e000ed04 	.word	0xe000ed04

08004994 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800499a:	2300      	movs	r3, #0
 800499c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800499e:	4b4f      	ldr	r3, [pc, #316]	@ (8004adc <xTaskIncrementTick+0x148>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f040 808f 	bne.w	8004ac6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049a8:	4b4d      	ldr	r3, [pc, #308]	@ (8004ae0 <xTaskIncrementTick+0x14c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3301      	adds	r3, #1
 80049ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049b0:	4a4b      	ldr	r2, [pc, #300]	@ (8004ae0 <xTaskIncrementTick+0x14c>)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d121      	bne.n	8004a00 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80049bc:	4b49      	ldr	r3, [pc, #292]	@ (8004ae4 <xTaskIncrementTick+0x150>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00b      	beq.n	80049de <xTaskIncrementTick+0x4a>
	__asm volatile
 80049c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	603b      	str	r3, [r7, #0]
}
 80049d8:	bf00      	nop
 80049da:	bf00      	nop
 80049dc:	e7fd      	b.n	80049da <xTaskIncrementTick+0x46>
 80049de:	4b41      	ldr	r3, [pc, #260]	@ (8004ae4 <xTaskIncrementTick+0x150>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	4b40      	ldr	r3, [pc, #256]	@ (8004ae8 <xTaskIncrementTick+0x154>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a3e      	ldr	r2, [pc, #248]	@ (8004ae4 <xTaskIncrementTick+0x150>)
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	4a3e      	ldr	r2, [pc, #248]	@ (8004ae8 <xTaskIncrementTick+0x154>)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	4b3e      	ldr	r3, [pc, #248]	@ (8004aec <xTaskIncrementTick+0x158>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3301      	adds	r3, #1
 80049f8:	4a3c      	ldr	r2, [pc, #240]	@ (8004aec <xTaskIncrementTick+0x158>)
 80049fa:	6013      	str	r3, [r2, #0]
 80049fc:	f000 f9a4 	bl	8004d48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a00:	4b3b      	ldr	r3, [pc, #236]	@ (8004af0 <xTaskIncrementTick+0x15c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d348      	bcc.n	8004a9c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a0a:	4b36      	ldr	r3, [pc, #216]	@ (8004ae4 <xTaskIncrementTick+0x150>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d104      	bne.n	8004a1e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a14:	4b36      	ldr	r3, [pc, #216]	@ (8004af0 <xTaskIncrementTick+0x15c>)
 8004a16:	f04f 32ff 	mov.w	r2, #4294967295
 8004a1a:	601a      	str	r2, [r3, #0]
					break;
 8004a1c:	e03e      	b.n	8004a9c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a1e:	4b31      	ldr	r3, [pc, #196]	@ (8004ae4 <xTaskIncrementTick+0x150>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d203      	bcs.n	8004a3e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a36:	4a2e      	ldr	r2, [pc, #184]	@ (8004af0 <xTaskIncrementTick+0x15c>)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a3c:	e02e      	b.n	8004a9c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	3304      	adds	r3, #4
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff fc81 	bl	800434a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d004      	beq.n	8004a5a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	3318      	adds	r3, #24
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff fc78 	bl	800434a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5e:	2201      	movs	r2, #1
 8004a60:	409a      	lsls	r2, r3
 8004a62:	4b24      	ldr	r3, [pc, #144]	@ (8004af4 <xTaskIncrementTick+0x160>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	4a22      	ldr	r2, [pc, #136]	@ (8004af4 <xTaskIncrementTick+0x160>)
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a70:	4613      	mov	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4a1f      	ldr	r2, [pc, #124]	@ (8004af8 <xTaskIncrementTick+0x164>)
 8004a7a:	441a      	add	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4619      	mov	r1, r3
 8004a82:	4610      	mov	r0, r2
 8004a84:	f7ff fc04 	bl	8004290 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004afc <xTaskIncrementTick+0x168>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d3b9      	bcc.n	8004a0a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004a96:	2301      	movs	r3, #1
 8004a98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a9a:	e7b6      	b.n	8004a0a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a9c:	4b17      	ldr	r3, [pc, #92]	@ (8004afc <xTaskIncrementTick+0x168>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa2:	4915      	ldr	r1, [pc, #84]	@ (8004af8 <xTaskIncrementTick+0x164>)
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d901      	bls.n	8004ab8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ab8:	4b11      	ldr	r3, [pc, #68]	@ (8004b00 <xTaskIncrementTick+0x16c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d007      	beq.n	8004ad0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	e004      	b.n	8004ad0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8004b04 <xTaskIncrementTick+0x170>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3301      	adds	r3, #1
 8004acc:	4a0d      	ldr	r2, [pc, #52]	@ (8004b04 <xTaskIncrementTick+0x170>)
 8004ace:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004ad0:	697b      	ldr	r3, [r7, #20]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20000854 	.word	0x20000854
 8004ae0:	20000830 	.word	0x20000830
 8004ae4:	200007e4 	.word	0x200007e4
 8004ae8:	200007e8 	.word	0x200007e8
 8004aec:	20000844 	.word	0x20000844
 8004af0:	2000084c 	.word	0x2000084c
 8004af4:	20000834 	.word	0x20000834
 8004af8:	20000730 	.word	0x20000730
 8004afc:	2000072c 	.word	0x2000072c
 8004b00:	20000840 	.word	0x20000840
 8004b04:	2000083c 	.word	0x2000083c

08004b08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8004bb8 <vTaskSwitchContext+0xb0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b16:	4b29      	ldr	r3, [pc, #164]	@ (8004bbc <vTaskSwitchContext+0xb4>)
 8004b18:	2201      	movs	r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b1c:	e045      	b.n	8004baa <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004b1e:	4b27      	ldr	r3, [pc, #156]	@ (8004bbc <vTaskSwitchContext+0xb4>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b24:	4b26      	ldr	r3, [pc, #152]	@ (8004bc0 <vTaskSwitchContext+0xb8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	fab3 f383 	clz	r3, r3
 8004b30:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004b32:	7afb      	ldrb	r3, [r7, #11]
 8004b34:	f1c3 031f 	rsb	r3, r3, #31
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	4922      	ldr	r1, [pc, #136]	@ (8004bc4 <vTaskSwitchContext+0xbc>)
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	440b      	add	r3, r1
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10b      	bne.n	8004b66 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	607b      	str	r3, [r7, #4]
}
 8004b60:	bf00      	nop
 8004b62:	bf00      	nop
 8004b64:	e7fd      	b.n	8004b62 <vTaskSwitchContext+0x5a>
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4a14      	ldr	r2, [pc, #80]	@ (8004bc4 <vTaskSwitchContext+0xbc>)
 8004b72:	4413      	add	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	605a      	str	r2, [r3, #4]
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	3308      	adds	r3, #8
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d104      	bne.n	8004b96 <vTaskSwitchContext+0x8e>
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	605a      	str	r2, [r3, #4]
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8004bc8 <vTaskSwitchContext+0xc0>)
 8004b9e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ba0:	4b09      	ldr	r3, [pc, #36]	@ (8004bc8 <vTaskSwitchContext+0xc0>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	334c      	adds	r3, #76	@ 0x4c
 8004ba6:	4a09      	ldr	r2, [pc, #36]	@ (8004bcc <vTaskSwitchContext+0xc4>)
 8004ba8:	6013      	str	r3, [r2, #0]
}
 8004baa:	bf00      	nop
 8004bac:	371c      	adds	r7, #28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	20000854 	.word	0x20000854
 8004bbc:	20000840 	.word	0x20000840
 8004bc0:	20000834 	.word	0x20000834
 8004bc4:	20000730 	.word	0x20000730
 8004bc8:	2000072c 	.word	0x2000072c
 8004bcc:	20000010 	.word	0x20000010

08004bd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bd8:	f000 f852 	bl	8004c80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bdc:	4b06      	ldr	r3, [pc, #24]	@ (8004bf8 <prvIdleTask+0x28>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d9f9      	bls.n	8004bd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004be4:	4b05      	ldr	r3, [pc, #20]	@ (8004bfc <prvIdleTask+0x2c>)
 8004be6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bf4:	e7f0      	b.n	8004bd8 <prvIdleTask+0x8>
 8004bf6:	bf00      	nop
 8004bf8:	20000730 	.word	0x20000730
 8004bfc:	e000ed04 	.word	0xe000ed04

08004c00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c06:	2300      	movs	r3, #0
 8004c08:	607b      	str	r3, [r7, #4]
 8004c0a:	e00c      	b.n	8004c26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4a12      	ldr	r2, [pc, #72]	@ (8004c60 <prvInitialiseTaskLists+0x60>)
 8004c18:	4413      	add	r3, r2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff fb0b 	bl	8004236 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3301      	adds	r3, #1
 8004c24:	607b      	str	r3, [r7, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b06      	cmp	r3, #6
 8004c2a:	d9ef      	bls.n	8004c0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c2c:	480d      	ldr	r0, [pc, #52]	@ (8004c64 <prvInitialiseTaskLists+0x64>)
 8004c2e:	f7ff fb02 	bl	8004236 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c32:	480d      	ldr	r0, [pc, #52]	@ (8004c68 <prvInitialiseTaskLists+0x68>)
 8004c34:	f7ff faff 	bl	8004236 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c38:	480c      	ldr	r0, [pc, #48]	@ (8004c6c <prvInitialiseTaskLists+0x6c>)
 8004c3a:	f7ff fafc 	bl	8004236 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c3e:	480c      	ldr	r0, [pc, #48]	@ (8004c70 <prvInitialiseTaskLists+0x70>)
 8004c40:	f7ff faf9 	bl	8004236 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c44:	480b      	ldr	r0, [pc, #44]	@ (8004c74 <prvInitialiseTaskLists+0x74>)
 8004c46:	f7ff faf6 	bl	8004236 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c78 <prvInitialiseTaskLists+0x78>)
 8004c4c:	4a05      	ldr	r2, [pc, #20]	@ (8004c64 <prvInitialiseTaskLists+0x64>)
 8004c4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c50:	4b0a      	ldr	r3, [pc, #40]	@ (8004c7c <prvInitialiseTaskLists+0x7c>)
 8004c52:	4a05      	ldr	r2, [pc, #20]	@ (8004c68 <prvInitialiseTaskLists+0x68>)
 8004c54:	601a      	str	r2, [r3, #0]
}
 8004c56:	bf00      	nop
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000730 	.word	0x20000730
 8004c64:	200007bc 	.word	0x200007bc
 8004c68:	200007d0 	.word	0x200007d0
 8004c6c:	200007ec 	.word	0x200007ec
 8004c70:	20000800 	.word	0x20000800
 8004c74:	20000818 	.word	0x20000818
 8004c78:	200007e4 	.word	0x200007e4
 8004c7c:	200007e8 	.word	0x200007e8

08004c80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c86:	e019      	b.n	8004cbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c88:	f000 fa16 	bl	80050b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c8c:	4b10      	ldr	r3, [pc, #64]	@ (8004cd0 <prvCheckTasksWaitingTermination+0x50>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3304      	adds	r3, #4
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff fb56 	bl	800434a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cd4 <prvCheckTasksWaitingTermination+0x54>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	4a0b      	ldr	r2, [pc, #44]	@ (8004cd4 <prvCheckTasksWaitingTermination+0x54>)
 8004ca6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd8 <prvCheckTasksWaitingTermination+0x58>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	4a0a      	ldr	r2, [pc, #40]	@ (8004cd8 <prvCheckTasksWaitingTermination+0x58>)
 8004cb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004cb2:	f000 fa33 	bl	800511c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f810 	bl	8004cdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cbc:	4b06      	ldr	r3, [pc, #24]	@ (8004cd8 <prvCheckTasksWaitingTermination+0x58>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1e1      	bne.n	8004c88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004cc4:	bf00      	nop
 8004cc6:	bf00      	nop
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20000800 	.word	0x20000800
 8004cd4:	2000082c 	.word	0x2000082c
 8004cd8:	20000814 	.word	0x20000814

08004cdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	334c      	adds	r3, #76	@ 0x4c
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fcbb 	bl	8005664 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d108      	bne.n	8004d0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 fb89 	bl	8005414 <vPortFree>
				vPortFree( pxTCB );
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fb86 	bl	8005414 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d08:	e019      	b.n	8004d3e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d103      	bne.n	8004d1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 fb7d 	bl	8005414 <vPortFree>
	}
 8004d1a:	e010      	b.n	8004d3e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d00b      	beq.n	8004d3e <prvDeleteTCB+0x62>
	__asm volatile
 8004d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	60fb      	str	r3, [r7, #12]
}
 8004d38:	bf00      	nop
 8004d3a:	bf00      	nop
 8004d3c:	e7fd      	b.n	8004d3a <prvDeleteTCB+0x5e>
	}
 8004d3e:	bf00      	nop
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d80 <prvResetNextTaskUnblockTime+0x38>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d104      	bne.n	8004d62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d58:	4b0a      	ldr	r3, [pc, #40]	@ (8004d84 <prvResetNextTaskUnblockTime+0x3c>)
 8004d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d60:	e008      	b.n	8004d74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d62:	4b07      	ldr	r3, [pc, #28]	@ (8004d80 <prvResetNextTaskUnblockTime+0x38>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	4a04      	ldr	r2, [pc, #16]	@ (8004d84 <prvResetNextTaskUnblockTime+0x3c>)
 8004d72:	6013      	str	r3, [r2, #0]
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	200007e4 	.word	0x200007e4
 8004d84:	2000084c 	.word	0x2000084c

08004d88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d92:	4b29      	ldr	r3, [pc, #164]	@ (8004e38 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d98:	4b28      	ldr	r3, [pc, #160]	@ (8004e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff fad3 	bl	800434a <uxListRemove>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10b      	bne.n	8004dc2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004daa:	4b24      	ldr	r3, [pc, #144]	@ (8004e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db0:	2201      	movs	r2, #1
 8004db2:	fa02 f303 	lsl.w	r3, r2, r3
 8004db6:	43da      	mvns	r2, r3
 8004db8:	4b21      	ldr	r3, [pc, #132]	@ (8004e40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	4a20      	ldr	r2, [pc, #128]	@ (8004e40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004dc0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc8:	d10a      	bne.n	8004de0 <prvAddCurrentTaskToDelayedList+0x58>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d007      	beq.n	8004de0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8004e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	481a      	ldr	r0, [pc, #104]	@ (8004e44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004dda:	f7ff fa59 	bl	8004290 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004dde:	e026      	b.n	8004e2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4413      	add	r3, r2
 8004de6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004de8:	4b14      	ldr	r3, [pc, #80]	@ (8004e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d209      	bcs.n	8004e0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004df8:	4b13      	ldr	r3, [pc, #76]	@ (8004e48 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8004e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3304      	adds	r3, #4
 8004e02:	4619      	mov	r1, r3
 8004e04:	4610      	mov	r0, r2
 8004e06:	f7ff fa67 	bl	80042d8 <vListInsert>
}
 8004e0a:	e010      	b.n	8004e2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004e4c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4b0a      	ldr	r3, [pc, #40]	@ (8004e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3304      	adds	r3, #4
 8004e16:	4619      	mov	r1, r3
 8004e18:	4610      	mov	r0, r2
 8004e1a:	f7ff fa5d 	bl	80042d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004e50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d202      	bcs.n	8004e2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004e28:	4a09      	ldr	r2, [pc, #36]	@ (8004e50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	6013      	str	r3, [r2, #0]
}
 8004e2e:	bf00      	nop
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20000830 	.word	0x20000830
 8004e3c:	2000072c 	.word	0x2000072c
 8004e40:	20000834 	.word	0x20000834
 8004e44:	20000818 	.word	0x20000818
 8004e48:	200007e8 	.word	0x200007e8
 8004e4c:	200007e4 	.word	0x200007e4
 8004e50:	2000084c 	.word	0x2000084c

08004e54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3b04      	subs	r3, #4
 8004e64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3b04      	subs	r3, #4
 8004e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f023 0201 	bic.w	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3b04      	subs	r3, #4
 8004e82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e84:	4a0c      	ldr	r2, [pc, #48]	@ (8004eb8 <pxPortInitialiseStack+0x64>)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	3b14      	subs	r3, #20
 8004e8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3b04      	subs	r3, #4
 8004e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f06f 0202 	mvn.w	r2, #2
 8004ea2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3b20      	subs	r3, #32
 8004ea8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	08004ebd 	.word	0x08004ebd

08004ebc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ec6:	4b13      	ldr	r3, [pc, #76]	@ (8004f14 <prvTaskExitError+0x58>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ece:	d00b      	beq.n	8004ee8 <prvTaskExitError+0x2c>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	60fb      	str	r3, [r7, #12]
}
 8004ee2:	bf00      	nop
 8004ee4:	bf00      	nop
 8004ee6:	e7fd      	b.n	8004ee4 <prvTaskExitError+0x28>
	__asm volatile
 8004ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eec:	f383 8811 	msr	BASEPRI, r3
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	60bb      	str	r3, [r7, #8]
}
 8004efa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004efc:	bf00      	nop
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0fc      	beq.n	8004efe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f04:	bf00      	nop
 8004f06:	bf00      	nop
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	2000000c 	.word	0x2000000c
	...

08004f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f20:	4b07      	ldr	r3, [pc, #28]	@ (8004f40 <pxCurrentTCBConst2>)
 8004f22:	6819      	ldr	r1, [r3, #0]
 8004f24:	6808      	ldr	r0, [r1, #0]
 8004f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2a:	f380 8809 	msr	PSP, r0
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f04f 0000 	mov.w	r0, #0
 8004f36:	f380 8811 	msr	BASEPRI, r0
 8004f3a:	4770      	bx	lr
 8004f3c:	f3af 8000 	nop.w

08004f40 <pxCurrentTCBConst2>:
 8004f40:	2000072c 	.word	0x2000072c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop

08004f48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f48:	4808      	ldr	r0, [pc, #32]	@ (8004f6c <prvPortStartFirstTask+0x24>)
 8004f4a:	6800      	ldr	r0, [r0, #0]
 8004f4c:	6800      	ldr	r0, [r0, #0]
 8004f4e:	f380 8808 	msr	MSP, r0
 8004f52:	f04f 0000 	mov.w	r0, #0
 8004f56:	f380 8814 	msr	CONTROL, r0
 8004f5a:	b662      	cpsie	i
 8004f5c:	b661      	cpsie	f
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	df00      	svc	0
 8004f68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f6a:	bf00      	nop
 8004f6c:	e000ed08 	.word	0xe000ed08

08004f70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f76:	4b47      	ldr	r3, [pc, #284]	@ (8005094 <xPortStartScheduler+0x124>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a47      	ldr	r2, [pc, #284]	@ (8005098 <xPortStartScheduler+0x128>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d10b      	bne.n	8004f98 <xPortStartScheduler+0x28>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	613b      	str	r3, [r7, #16]
}
 8004f92:	bf00      	nop
 8004f94:	bf00      	nop
 8004f96:	e7fd      	b.n	8004f94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f98:	4b3e      	ldr	r3, [pc, #248]	@ (8005094 <xPortStartScheduler+0x124>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a3f      	ldr	r2, [pc, #252]	@ (800509c <xPortStartScheduler+0x12c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d10b      	bne.n	8004fba <xPortStartScheduler+0x4a>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	60fb      	str	r3, [r7, #12]
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop
 8004fb8:	e7fd      	b.n	8004fb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fba:	4b39      	ldr	r3, [pc, #228]	@ (80050a0 <xPortStartScheduler+0x130>)
 8004fbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	22ff      	movs	r2, #255	@ 0xff
 8004fca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	4b31      	ldr	r3, [pc, #196]	@ (80050a4 <xPortStartScheduler+0x134>)
 8004fe0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fe2:	4b31      	ldr	r3, [pc, #196]	@ (80050a8 <xPortStartScheduler+0x138>)
 8004fe4:	2207      	movs	r2, #7
 8004fe6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fe8:	e009      	b.n	8004ffe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004fea:	4b2f      	ldr	r3, [pc, #188]	@ (80050a8 <xPortStartScheduler+0x138>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	4a2d      	ldr	r2, [pc, #180]	@ (80050a8 <xPortStartScheduler+0x138>)
 8004ff2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ffe:	78fb      	ldrb	r3, [r7, #3]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005006:	2b80      	cmp	r3, #128	@ 0x80
 8005008:	d0ef      	beq.n	8004fea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800500a:	4b27      	ldr	r3, [pc, #156]	@ (80050a8 <xPortStartScheduler+0x138>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f1c3 0307 	rsb	r3, r3, #7
 8005012:	2b04      	cmp	r3, #4
 8005014:	d00b      	beq.n	800502e <xPortStartScheduler+0xbe>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	60bb      	str	r3, [r7, #8]
}
 8005028:	bf00      	nop
 800502a:	bf00      	nop
 800502c:	e7fd      	b.n	800502a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800502e:	4b1e      	ldr	r3, [pc, #120]	@ (80050a8 <xPortStartScheduler+0x138>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	4a1c      	ldr	r2, [pc, #112]	@ (80050a8 <xPortStartScheduler+0x138>)
 8005036:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005038:	4b1b      	ldr	r3, [pc, #108]	@ (80050a8 <xPortStartScheduler+0x138>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005040:	4a19      	ldr	r2, [pc, #100]	@ (80050a8 <xPortStartScheduler+0x138>)
 8005042:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	b2da      	uxtb	r2, r3
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800504c:	4b17      	ldr	r3, [pc, #92]	@ (80050ac <xPortStartScheduler+0x13c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a16      	ldr	r2, [pc, #88]	@ (80050ac <xPortStartScheduler+0x13c>)
 8005052:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005056:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005058:	4b14      	ldr	r3, [pc, #80]	@ (80050ac <xPortStartScheduler+0x13c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a13      	ldr	r2, [pc, #76]	@ (80050ac <xPortStartScheduler+0x13c>)
 800505e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005062:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005064:	f000 f8da 	bl	800521c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005068:	4b11      	ldr	r3, [pc, #68]	@ (80050b0 <xPortStartScheduler+0x140>)
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800506e:	f000 f8f9 	bl	8005264 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005072:	4b10      	ldr	r3, [pc, #64]	@ (80050b4 <xPortStartScheduler+0x144>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a0f      	ldr	r2, [pc, #60]	@ (80050b4 <xPortStartScheduler+0x144>)
 8005078:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800507c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800507e:	f7ff ff63 	bl	8004f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005082:	f7ff fd41 	bl	8004b08 <vTaskSwitchContext>
	prvTaskExitError();
 8005086:	f7ff ff19 	bl	8004ebc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	e000ed00 	.word	0xe000ed00
 8005098:	410fc271 	.word	0x410fc271
 800509c:	410fc270 	.word	0x410fc270
 80050a0:	e000e400 	.word	0xe000e400
 80050a4:	20000858 	.word	0x20000858
 80050a8:	2000085c 	.word	0x2000085c
 80050ac:	e000ed20 	.word	0xe000ed20
 80050b0:	2000000c 	.word	0x2000000c
 80050b4:	e000ef34 	.word	0xe000ef34

080050b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	607b      	str	r3, [r7, #4]
}
 80050d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050d2:	4b10      	ldr	r3, [pc, #64]	@ (8005114 <vPortEnterCritical+0x5c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3301      	adds	r3, #1
 80050d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005114 <vPortEnterCritical+0x5c>)
 80050da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005114 <vPortEnterCritical+0x5c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d110      	bne.n	8005106 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005118 <vPortEnterCritical+0x60>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00b      	beq.n	8005106 <vPortEnterCritical+0x4e>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	603b      	str	r3, [r7, #0]
}
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	e7fd      	b.n	8005102 <vPortEnterCritical+0x4a>
	}
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	2000000c 	.word	0x2000000c
 8005118:	e000ed04 	.word	0xe000ed04

0800511c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005122:	4b12      	ldr	r3, [pc, #72]	@ (800516c <vPortExitCritical+0x50>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10b      	bne.n	8005142 <vPortExitCritical+0x26>
	__asm volatile
 800512a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	607b      	str	r3, [r7, #4]
}
 800513c:	bf00      	nop
 800513e:	bf00      	nop
 8005140:	e7fd      	b.n	800513e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005142:	4b0a      	ldr	r3, [pc, #40]	@ (800516c <vPortExitCritical+0x50>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3b01      	subs	r3, #1
 8005148:	4a08      	ldr	r2, [pc, #32]	@ (800516c <vPortExitCritical+0x50>)
 800514a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800514c:	4b07      	ldr	r3, [pc, #28]	@ (800516c <vPortExitCritical+0x50>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d105      	bne.n	8005160 <vPortExitCritical+0x44>
 8005154:	2300      	movs	r3, #0
 8005156:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800515e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	2000000c 	.word	0x2000000c

08005170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005170:	f3ef 8009 	mrs	r0, PSP
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	4b15      	ldr	r3, [pc, #84]	@ (80051d0 <pxCurrentTCBConst>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	f01e 0f10 	tst.w	lr, #16
 8005180:	bf08      	it	eq
 8005182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518a:	6010      	str	r0, [r2, #0]
 800518c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005190:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005194:	f380 8811 	msr	BASEPRI, r0
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f7ff fcb2 	bl	8004b08 <vTaskSwitchContext>
 80051a4:	f04f 0000 	mov.w	r0, #0
 80051a8:	f380 8811 	msr	BASEPRI, r0
 80051ac:	bc09      	pop	{r0, r3}
 80051ae:	6819      	ldr	r1, [r3, #0]
 80051b0:	6808      	ldr	r0, [r1, #0]
 80051b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b6:	f01e 0f10 	tst.w	lr, #16
 80051ba:	bf08      	it	eq
 80051bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051c0:	f380 8809 	msr	PSP, r0
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	f3af 8000 	nop.w

080051d0 <pxCurrentTCBConst>:
 80051d0:	2000072c 	.word	0x2000072c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop

080051d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	607b      	str	r3, [r7, #4]
}
 80051f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051f2:	f7ff fbcf 	bl	8004994 <xTaskIncrementTick>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051fc:	4b06      	ldr	r3, [pc, #24]	@ (8005218 <SysTick_Handler+0x40>)
 80051fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	2300      	movs	r3, #0
 8005206:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	f383 8811 	msr	BASEPRI, r3
}
 800520e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005210:	bf00      	nop
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	e000ed04 	.word	0xe000ed04

0800521c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005220:	4b0b      	ldr	r3, [pc, #44]	@ (8005250 <vPortSetupTimerInterrupt+0x34>)
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005226:	4b0b      	ldr	r3, [pc, #44]	@ (8005254 <vPortSetupTimerInterrupt+0x38>)
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800522c:	4b0a      	ldr	r3, [pc, #40]	@ (8005258 <vPortSetupTimerInterrupt+0x3c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a0a      	ldr	r2, [pc, #40]	@ (800525c <vPortSetupTimerInterrupt+0x40>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	099b      	lsrs	r3, r3, #6
 8005238:	4a09      	ldr	r2, [pc, #36]	@ (8005260 <vPortSetupTimerInterrupt+0x44>)
 800523a:	3b01      	subs	r3, #1
 800523c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800523e:	4b04      	ldr	r3, [pc, #16]	@ (8005250 <vPortSetupTimerInterrupt+0x34>)
 8005240:	2207      	movs	r2, #7
 8005242:	601a      	str	r2, [r3, #0]
}
 8005244:	bf00      	nop
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	e000e010 	.word	0xe000e010
 8005254:	e000e018 	.word	0xe000e018
 8005258:	20000000 	.word	0x20000000
 800525c:	10624dd3 	.word	0x10624dd3
 8005260:	e000e014 	.word	0xe000e014

08005264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005264:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005274 <vPortEnableVFP+0x10>
 8005268:	6801      	ldr	r1, [r0, #0]
 800526a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800526e:	6001      	str	r1, [r0, #0]
 8005270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005272:	bf00      	nop
 8005274:	e000ed88 	.word	0xe000ed88

08005278 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08a      	sub	sp, #40	@ 0x28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005280:	2300      	movs	r3, #0
 8005282:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005284:	f7ff fada 	bl	800483c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005288:	4b5c      	ldr	r3, [pc, #368]	@ (80053fc <pvPortMalloc+0x184>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005290:	f000 f924 	bl	80054dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005294:	4b5a      	ldr	r3, [pc, #360]	@ (8005400 <pvPortMalloc+0x188>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4013      	ands	r3, r2
 800529c:	2b00      	cmp	r3, #0
 800529e:	f040 8095 	bne.w	80053cc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d01e      	beq.n	80052e6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80052a8:	2208      	movs	r2, #8
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4413      	add	r3, r2
 80052ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d015      	beq.n	80052e6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f023 0307 	bic.w	r3, r3, #7
 80052c0:	3308      	adds	r3, #8
 80052c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00b      	beq.n	80052e6 <pvPortMalloc+0x6e>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	617b      	str	r3, [r7, #20]
}
 80052e0:	bf00      	nop
 80052e2:	bf00      	nop
 80052e4:	e7fd      	b.n	80052e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d06f      	beq.n	80053cc <pvPortMalloc+0x154>
 80052ec:	4b45      	ldr	r3, [pc, #276]	@ (8005404 <pvPortMalloc+0x18c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d86a      	bhi.n	80053cc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052f6:	4b44      	ldr	r3, [pc, #272]	@ (8005408 <pvPortMalloc+0x190>)
 80052f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052fa:	4b43      	ldr	r3, [pc, #268]	@ (8005408 <pvPortMalloc+0x190>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005300:	e004      	b.n	800530c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800530c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	429a      	cmp	r2, r3
 8005314:	d903      	bls.n	800531e <pvPortMalloc+0xa6>
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f1      	bne.n	8005302 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800531e:	4b37      	ldr	r3, [pc, #220]	@ (80053fc <pvPortMalloc+0x184>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005324:	429a      	cmp	r2, r3
 8005326:	d051      	beq.n	80053cc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2208      	movs	r2, #8
 800532e:	4413      	add	r3, r2
 8005330:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	1ad2      	subs	r2, r2, r3
 8005342:	2308      	movs	r3, #8
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	429a      	cmp	r2, r3
 8005348:	d920      	bls.n	800538c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800534a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4413      	add	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00b      	beq.n	8005374 <pvPortMalloc+0xfc>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	613b      	str	r3, [r7, #16]
}
 800536e:	bf00      	nop
 8005370:	bf00      	nop
 8005372:	e7fd      	b.n	8005370 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	1ad2      	subs	r2, r2, r3
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005386:	69b8      	ldr	r0, [r7, #24]
 8005388:	f000 f90a 	bl	80055a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800538c:	4b1d      	ldr	r3, [pc, #116]	@ (8005404 <pvPortMalloc+0x18c>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	4a1b      	ldr	r2, [pc, #108]	@ (8005404 <pvPortMalloc+0x18c>)
 8005398:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800539a:	4b1a      	ldr	r3, [pc, #104]	@ (8005404 <pvPortMalloc+0x18c>)
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	4b1b      	ldr	r3, [pc, #108]	@ (800540c <pvPortMalloc+0x194>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d203      	bcs.n	80053ae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053a6:	4b17      	ldr	r3, [pc, #92]	@ (8005404 <pvPortMalloc+0x18c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a18      	ldr	r2, [pc, #96]	@ (800540c <pvPortMalloc+0x194>)
 80053ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	4b13      	ldr	r3, [pc, #76]	@ (8005400 <pvPortMalloc+0x188>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	431a      	orrs	r2, r3
 80053b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80053c2:	4b13      	ldr	r3, [pc, #76]	@ (8005410 <pvPortMalloc+0x198>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3301      	adds	r3, #1
 80053c8:	4a11      	ldr	r2, [pc, #68]	@ (8005410 <pvPortMalloc+0x198>)
 80053ca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053cc:	f7ff fa44 	bl	8004858 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00b      	beq.n	80053f2 <pvPortMalloc+0x17a>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	60fb      	str	r3, [r7, #12]
}
 80053ec:	bf00      	nop
 80053ee:	bf00      	nop
 80053f0:	e7fd      	b.n	80053ee <pvPortMalloc+0x176>
	return pvReturn;
 80053f2:	69fb      	ldr	r3, [r7, #28]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3728      	adds	r7, #40	@ 0x28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20004468 	.word	0x20004468
 8005400:	2000447c 	.word	0x2000447c
 8005404:	2000446c 	.word	0x2000446c
 8005408:	20004460 	.word	0x20004460
 800540c:	20004470 	.word	0x20004470
 8005410:	20004474 	.word	0x20004474

08005414 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d04f      	beq.n	80054c6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005426:	2308      	movs	r3, #8
 8005428:	425b      	negs	r3, r3
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4413      	add	r3, r2
 800542e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	4b25      	ldr	r3, [pc, #148]	@ (80054d0 <vPortFree+0xbc>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4013      	ands	r3, r2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10b      	bne.n	800545a <vPortFree+0x46>
	__asm volatile
 8005442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	60fb      	str	r3, [r7, #12]
}
 8005454:	bf00      	nop
 8005456:	bf00      	nop
 8005458:	e7fd      	b.n	8005456 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00b      	beq.n	800547a <vPortFree+0x66>
	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	60bb      	str	r3, [r7, #8]
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop
 8005478:	e7fd      	b.n	8005476 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	4b14      	ldr	r3, [pc, #80]	@ (80054d0 <vPortFree+0xbc>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4013      	ands	r3, r2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01e      	beq.n	80054c6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d11a      	bne.n	80054c6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	4b0e      	ldr	r3, [pc, #56]	@ (80054d0 <vPortFree+0xbc>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	43db      	mvns	r3, r3
 800549a:	401a      	ands	r2, r3
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054a0:	f7ff f9cc 	bl	800483c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	4b0a      	ldr	r3, [pc, #40]	@ (80054d4 <vPortFree+0xc0>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4413      	add	r3, r2
 80054ae:	4a09      	ldr	r2, [pc, #36]	@ (80054d4 <vPortFree+0xc0>)
 80054b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054b2:	6938      	ldr	r0, [r7, #16]
 80054b4:	f000 f874 	bl	80055a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80054b8:	4b07      	ldr	r3, [pc, #28]	@ (80054d8 <vPortFree+0xc4>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3301      	adds	r3, #1
 80054be:	4a06      	ldr	r2, [pc, #24]	@ (80054d8 <vPortFree+0xc4>)
 80054c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80054c2:	f7ff f9c9 	bl	8004858 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054c6:	bf00      	nop
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	2000447c 	.word	0x2000447c
 80054d4:	2000446c 	.word	0x2000446c
 80054d8:	20004478 	.word	0x20004478

080054dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054e2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80054e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054e8:	4b27      	ldr	r3, [pc, #156]	@ (8005588 <prvHeapInit+0xac>)
 80054ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00c      	beq.n	8005510 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	3307      	adds	r3, #7
 80054fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0307 	bic.w	r3, r3, #7
 8005502:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	4a1f      	ldr	r2, [pc, #124]	@ (8005588 <prvHeapInit+0xac>)
 800550c:	4413      	add	r3, r2
 800550e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005514:	4a1d      	ldr	r2, [pc, #116]	@ (800558c <prvHeapInit+0xb0>)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800551a:	4b1c      	ldr	r3, [pc, #112]	@ (800558c <prvHeapInit+0xb0>)
 800551c:	2200      	movs	r2, #0
 800551e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	4413      	add	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005528:	2208      	movs	r2, #8
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	1a9b      	subs	r3, r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f023 0307 	bic.w	r3, r3, #7
 8005536:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4a15      	ldr	r2, [pc, #84]	@ (8005590 <prvHeapInit+0xb4>)
 800553c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800553e:	4b14      	ldr	r3, [pc, #80]	@ (8005590 <prvHeapInit+0xb4>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2200      	movs	r2, #0
 8005544:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005546:	4b12      	ldr	r3, [pc, #72]	@ (8005590 <prvHeapInit+0xb4>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2200      	movs	r2, #0
 800554c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	1ad2      	subs	r2, r2, r3
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800555c:	4b0c      	ldr	r3, [pc, #48]	@ (8005590 <prvHeapInit+0xb4>)
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	4a0a      	ldr	r2, [pc, #40]	@ (8005594 <prvHeapInit+0xb8>)
 800556a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	4a09      	ldr	r2, [pc, #36]	@ (8005598 <prvHeapInit+0xbc>)
 8005572:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005574:	4b09      	ldr	r3, [pc, #36]	@ (800559c <prvHeapInit+0xc0>)
 8005576:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800557a:	601a      	str	r2, [r3, #0]
}
 800557c:	bf00      	nop
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	20000860 	.word	0x20000860
 800558c:	20004460 	.word	0x20004460
 8005590:	20004468 	.word	0x20004468
 8005594:	20004470 	.word	0x20004470
 8005598:	2000446c 	.word	0x2000446c
 800559c:	2000447c 	.word	0x2000447c

080055a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055a8:	4b28      	ldr	r3, [pc, #160]	@ (800564c <prvInsertBlockIntoFreeList+0xac>)
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	e002      	b.n	80055b4 <prvInsertBlockIntoFreeList+0x14>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d8f7      	bhi.n	80055ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	4413      	add	r3, r2
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d108      	bne.n	80055e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	441a      	add	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	441a      	add	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d118      	bne.n	8005628 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b15      	ldr	r3, [pc, #84]	@ (8005650 <prvInsertBlockIntoFreeList+0xb0>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d00d      	beq.n	800561e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	441a      	add	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	e008      	b.n	8005630 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800561e:	4b0c      	ldr	r3, [pc, #48]	@ (8005650 <prvInsertBlockIntoFreeList+0xb0>)
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	e003      	b.n	8005630 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	429a      	cmp	r2, r3
 8005636:	d002      	beq.n	800563e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800563e:	bf00      	nop
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	20004460 	.word	0x20004460
 8005650:	20004468 	.word	0x20004468

08005654 <memset>:
 8005654:	4402      	add	r2, r0
 8005656:	4603      	mov	r3, r0
 8005658:	4293      	cmp	r3, r2
 800565a:	d100      	bne.n	800565e <memset+0xa>
 800565c:	4770      	bx	lr
 800565e:	f803 1b01 	strb.w	r1, [r3], #1
 8005662:	e7f9      	b.n	8005658 <memset+0x4>

08005664 <_reclaim_reent>:
 8005664:	4b29      	ldr	r3, [pc, #164]	@ (800570c <_reclaim_reent+0xa8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4283      	cmp	r3, r0
 800566a:	b570      	push	{r4, r5, r6, lr}
 800566c:	4604      	mov	r4, r0
 800566e:	d04b      	beq.n	8005708 <_reclaim_reent+0xa4>
 8005670:	69c3      	ldr	r3, [r0, #28]
 8005672:	b1ab      	cbz	r3, 80056a0 <_reclaim_reent+0x3c>
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	b16b      	cbz	r3, 8005694 <_reclaim_reent+0x30>
 8005678:	2500      	movs	r5, #0
 800567a:	69e3      	ldr	r3, [r4, #28]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	5959      	ldr	r1, [r3, r5]
 8005680:	2900      	cmp	r1, #0
 8005682:	d13b      	bne.n	80056fc <_reclaim_reent+0x98>
 8005684:	3504      	adds	r5, #4
 8005686:	2d80      	cmp	r5, #128	@ 0x80
 8005688:	d1f7      	bne.n	800567a <_reclaim_reent+0x16>
 800568a:	69e3      	ldr	r3, [r4, #28]
 800568c:	4620      	mov	r0, r4
 800568e:	68d9      	ldr	r1, [r3, #12]
 8005690:	f000 f864 	bl	800575c <_free_r>
 8005694:	69e3      	ldr	r3, [r4, #28]
 8005696:	6819      	ldr	r1, [r3, #0]
 8005698:	b111      	cbz	r1, 80056a0 <_reclaim_reent+0x3c>
 800569a:	4620      	mov	r0, r4
 800569c:	f000 f85e 	bl	800575c <_free_r>
 80056a0:	6961      	ldr	r1, [r4, #20]
 80056a2:	b111      	cbz	r1, 80056aa <_reclaim_reent+0x46>
 80056a4:	4620      	mov	r0, r4
 80056a6:	f000 f859 	bl	800575c <_free_r>
 80056aa:	69e1      	ldr	r1, [r4, #28]
 80056ac:	b111      	cbz	r1, 80056b4 <_reclaim_reent+0x50>
 80056ae:	4620      	mov	r0, r4
 80056b0:	f000 f854 	bl	800575c <_free_r>
 80056b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80056b6:	b111      	cbz	r1, 80056be <_reclaim_reent+0x5a>
 80056b8:	4620      	mov	r0, r4
 80056ba:	f000 f84f 	bl	800575c <_free_r>
 80056be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056c0:	b111      	cbz	r1, 80056c8 <_reclaim_reent+0x64>
 80056c2:	4620      	mov	r0, r4
 80056c4:	f000 f84a 	bl	800575c <_free_r>
 80056c8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80056ca:	b111      	cbz	r1, 80056d2 <_reclaim_reent+0x6e>
 80056cc:	4620      	mov	r0, r4
 80056ce:	f000 f845 	bl	800575c <_free_r>
 80056d2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80056d4:	b111      	cbz	r1, 80056dc <_reclaim_reent+0x78>
 80056d6:	4620      	mov	r0, r4
 80056d8:	f000 f840 	bl	800575c <_free_r>
 80056dc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80056de:	b111      	cbz	r1, 80056e6 <_reclaim_reent+0x82>
 80056e0:	4620      	mov	r0, r4
 80056e2:	f000 f83b 	bl	800575c <_free_r>
 80056e6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80056e8:	b111      	cbz	r1, 80056f0 <_reclaim_reent+0x8c>
 80056ea:	4620      	mov	r0, r4
 80056ec:	f000 f836 	bl	800575c <_free_r>
 80056f0:	6a23      	ldr	r3, [r4, #32]
 80056f2:	b14b      	cbz	r3, 8005708 <_reclaim_reent+0xa4>
 80056f4:	4620      	mov	r0, r4
 80056f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80056fa:	4718      	bx	r3
 80056fc:	680e      	ldr	r6, [r1, #0]
 80056fe:	4620      	mov	r0, r4
 8005700:	f000 f82c 	bl	800575c <_free_r>
 8005704:	4631      	mov	r1, r6
 8005706:	e7bb      	b.n	8005680 <_reclaim_reent+0x1c>
 8005708:	bd70      	pop	{r4, r5, r6, pc}
 800570a:	bf00      	nop
 800570c:	20000010 	.word	0x20000010

08005710 <__libc_init_array>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	4d0d      	ldr	r5, [pc, #52]	@ (8005748 <__libc_init_array+0x38>)
 8005714:	4c0d      	ldr	r4, [pc, #52]	@ (800574c <__libc_init_array+0x3c>)
 8005716:	1b64      	subs	r4, r4, r5
 8005718:	10a4      	asrs	r4, r4, #2
 800571a:	2600      	movs	r6, #0
 800571c:	42a6      	cmp	r6, r4
 800571e:	d109      	bne.n	8005734 <__libc_init_array+0x24>
 8005720:	4d0b      	ldr	r5, [pc, #44]	@ (8005750 <__libc_init_array+0x40>)
 8005722:	4c0c      	ldr	r4, [pc, #48]	@ (8005754 <__libc_init_array+0x44>)
 8005724:	f000 f870 	bl	8005808 <_init>
 8005728:	1b64      	subs	r4, r4, r5
 800572a:	10a4      	asrs	r4, r4, #2
 800572c:	2600      	movs	r6, #0
 800572e:	42a6      	cmp	r6, r4
 8005730:	d105      	bne.n	800573e <__libc_init_array+0x2e>
 8005732:	bd70      	pop	{r4, r5, r6, pc}
 8005734:	f855 3b04 	ldr.w	r3, [r5], #4
 8005738:	4798      	blx	r3
 800573a:	3601      	adds	r6, #1
 800573c:	e7ee      	b.n	800571c <__libc_init_array+0xc>
 800573e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005742:	4798      	blx	r3
 8005744:	3601      	adds	r6, #1
 8005746:	e7f2      	b.n	800572e <__libc_init_array+0x1e>
 8005748:	08005878 	.word	0x08005878
 800574c:	08005878 	.word	0x08005878
 8005750:	08005878 	.word	0x08005878
 8005754:	0800587c 	.word	0x0800587c

08005758 <__retarget_lock_acquire_recursive>:
 8005758:	4770      	bx	lr

0800575a <__retarget_lock_release_recursive>:
 800575a:	4770      	bx	lr

0800575c <_free_r>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	4605      	mov	r5, r0
 8005760:	2900      	cmp	r1, #0
 8005762:	d041      	beq.n	80057e8 <_free_r+0x8c>
 8005764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005768:	1f0c      	subs	r4, r1, #4
 800576a:	2b00      	cmp	r3, #0
 800576c:	bfb8      	it	lt
 800576e:	18e4      	addlt	r4, r4, r3
 8005770:	f000 f83e 	bl	80057f0 <__malloc_lock>
 8005774:	4a1d      	ldr	r2, [pc, #116]	@ (80057ec <_free_r+0x90>)
 8005776:	6813      	ldr	r3, [r2, #0]
 8005778:	b933      	cbnz	r3, 8005788 <_free_r+0x2c>
 800577a:	6063      	str	r3, [r4, #4]
 800577c:	6014      	str	r4, [r2, #0]
 800577e:	4628      	mov	r0, r5
 8005780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005784:	f000 b83a 	b.w	80057fc <__malloc_unlock>
 8005788:	42a3      	cmp	r3, r4
 800578a:	d908      	bls.n	800579e <_free_r+0x42>
 800578c:	6820      	ldr	r0, [r4, #0]
 800578e:	1821      	adds	r1, r4, r0
 8005790:	428b      	cmp	r3, r1
 8005792:	bf01      	itttt	eq
 8005794:	6819      	ldreq	r1, [r3, #0]
 8005796:	685b      	ldreq	r3, [r3, #4]
 8005798:	1809      	addeq	r1, r1, r0
 800579a:	6021      	streq	r1, [r4, #0]
 800579c:	e7ed      	b.n	800577a <_free_r+0x1e>
 800579e:	461a      	mov	r2, r3
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	b10b      	cbz	r3, 80057a8 <_free_r+0x4c>
 80057a4:	42a3      	cmp	r3, r4
 80057a6:	d9fa      	bls.n	800579e <_free_r+0x42>
 80057a8:	6811      	ldr	r1, [r2, #0]
 80057aa:	1850      	adds	r0, r2, r1
 80057ac:	42a0      	cmp	r0, r4
 80057ae:	d10b      	bne.n	80057c8 <_free_r+0x6c>
 80057b0:	6820      	ldr	r0, [r4, #0]
 80057b2:	4401      	add	r1, r0
 80057b4:	1850      	adds	r0, r2, r1
 80057b6:	4283      	cmp	r3, r0
 80057b8:	6011      	str	r1, [r2, #0]
 80057ba:	d1e0      	bne.n	800577e <_free_r+0x22>
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	6053      	str	r3, [r2, #4]
 80057c2:	4408      	add	r0, r1
 80057c4:	6010      	str	r0, [r2, #0]
 80057c6:	e7da      	b.n	800577e <_free_r+0x22>
 80057c8:	d902      	bls.n	80057d0 <_free_r+0x74>
 80057ca:	230c      	movs	r3, #12
 80057cc:	602b      	str	r3, [r5, #0]
 80057ce:	e7d6      	b.n	800577e <_free_r+0x22>
 80057d0:	6820      	ldr	r0, [r4, #0]
 80057d2:	1821      	adds	r1, r4, r0
 80057d4:	428b      	cmp	r3, r1
 80057d6:	bf04      	itt	eq
 80057d8:	6819      	ldreq	r1, [r3, #0]
 80057da:	685b      	ldreq	r3, [r3, #4]
 80057dc:	6063      	str	r3, [r4, #4]
 80057de:	bf04      	itt	eq
 80057e0:	1809      	addeq	r1, r1, r0
 80057e2:	6021      	streq	r1, [r4, #0]
 80057e4:	6054      	str	r4, [r2, #4]
 80057e6:	e7ca      	b.n	800577e <_free_r+0x22>
 80057e8:	bd38      	pop	{r3, r4, r5, pc}
 80057ea:	bf00      	nop
 80057ec:	200045bc 	.word	0x200045bc

080057f0 <__malloc_lock>:
 80057f0:	4801      	ldr	r0, [pc, #4]	@ (80057f8 <__malloc_lock+0x8>)
 80057f2:	f7ff bfb1 	b.w	8005758 <__retarget_lock_acquire_recursive>
 80057f6:	bf00      	nop
 80057f8:	200045b8 	.word	0x200045b8

080057fc <__malloc_unlock>:
 80057fc:	4801      	ldr	r0, [pc, #4]	@ (8005804 <__malloc_unlock+0x8>)
 80057fe:	f7ff bfac 	b.w	800575a <__retarget_lock_release_recursive>
 8005802:	bf00      	nop
 8005804:	200045b8 	.word	0x200045b8

08005808 <_init>:
 8005808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580a:	bf00      	nop
 800580c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800580e:	bc08      	pop	{r3}
 8005810:	469e      	mov	lr, r3
 8005812:	4770      	bx	lr

08005814 <_fini>:
 8005814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005816:	bf00      	nop
 8005818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800581a:	bc08      	pop	{r3}
 800581c:	469e      	mov	lr, r3
 800581e:	4770      	bx	lr
